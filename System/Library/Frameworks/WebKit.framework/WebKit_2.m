void sub_196C9EE9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF::StringImpl **a48,char a49,__int16 a50,char a51,WTF *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  char a71;
  char a72;
  const char **a73;
  char a74;
  uint64_t v74;
  void *v75;
  const void *v77;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  void *v82;
  unint64_t v83;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a69, a2);
  if (!v74)
    a10 = 1;
  if ((a10 & 1) == 0)
    WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(v74, v75);
  if (a72)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a71, v75);
  if (LOBYTE(STACK[0x200]) && a74)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a73);
  if (LOBYTE(STACK[0x218]) && LOBYTE(STACK[0x210]))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x208]);
  if (LOBYTE(STACK[0x230]))
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x220], v75);
  if (LOBYTE(STACK[0x890]) && LOBYTE(STACK[0x888]))
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)&STACK[0x7F0]);
  if (LOBYTE(STACK[0x248]) && STACK[0x240])
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(STACK[0x240], v75);
  if (LOBYTE(STACK[0x260]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x250], v75);
  if (LOBYTE(STACK[0x270]))
  {
    v77 = (const void *)STACK[0x268];
    STACK[0x268] = 0;
    if (v77)
      CFRelease(v77);
  }
  if (!a48)
    a49 = 1;
  if ((a49 & 1) == 0)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a48, (WTF::StringImpl *)v75);
  if (!a22)
    a51 = 1;
  if ((a51 & 1) == 0)
    CFRelease(*(CFTypeRef *)(a22 + 8));
  if (LOBYTE(STACK[0x280]))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x278]);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x288], (WTF::StringImpl *)v75);
  if (LOBYTE(STACK[0x29C]))
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&STACK[0x298]);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x2A0], v80);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x2B0], v81);
  if (LOBYTE(STACK[0x2D0]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2C0], v82);
  if (LOBYTE(STACK[0x2E8]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2D8], v82);
  if (LOBYTE(STACK[0x300]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2F0], v82);
  if (LOBYTE(STACK[0x318]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x308], v82);
  if (LOBYTE(STACK[0x330]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x320], v82);
  if (LOBYTE(STACK[0x348]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x338], v82);
  if (LOBYTE(STACK[0x360]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x350], v82);
  if (LOBYTE(STACK[0x378]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x368], v82);
  if (LOBYTE(STACK[0x390]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x380], v82);
  if (LOBYTE(STACK[0x3A8]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x398], v82);
  if (LOBYTE(STACK[0x3C0]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3B0], v82);
  if (LOBYTE(STACK[0x3D8]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3C8], v82);
  if (LOBYTE(STACK[0x3F0]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3E0], v82);
  if (LOBYTE(STACK[0x408]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3F8], v82);
  if (LOBYTE(STACK[0x420]))
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x410], v82);
  if (LOBYTE(STACK[0x430]))
  {
    v83 = STACK[0x428];
    STACK[0x428] = 0;
    if (v83)
      CFRelease(*(CFTypeRef *)(v83 + 8));
  }
  if (LOBYTE(STACK[0x448]))
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x438], v82);
  if (LOBYTE(STACK[0x458]))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x450]);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x460], (WTF::StringImpl *)v82);
  std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x470]);
  _Unwind_Resume(a1);
}

void sub_196C9F50C()
{
  JUMPOUT(0x196C9F248);
}

void sub_196C9F524()
{
  JUMPOUT(0x196C9F288);
}

void sub_196C9F52C()
{
  JUMPOUT(0x196C9F2A0);
}

void sub_196C9F53C()
{
  JUMPOUT(0x196C9F2D8);
}

void sub_196C9F544()
{
  JUMPOUT(0x196C9F2E8);
}

void sub_196C9F54C()
{
  JUMPOUT(0x196C9F2FCLL);
}

void sub_196C9F554()
{
  JUMPOUT(0x196C9F340);
}

void sub_196C9F55C()
{
  JUMPOUT(0x196C9F348);
}

void sub_196C9F564()
{
  JUMPOUT(0x196C9F358);
}

void sub_196C9F56C()
{
  JUMPOUT(0x196C9F360);
}

void sub_196C9F588()
{
  JUMPOUT(0x196C9F368);
}

void sub_196C9F590()
{
  JUMPOUT(0x196C9F378);
}

void sub_196C9F598()
{
  JUMPOUT(0x196C9F388);
}

void sub_196C9F5A0()
{
  JUMPOUT(0x196C9F398);
}

void sub_196C9F5A8()
{
  JUMPOUT(0x196C9F3A8);
}

void sub_196C9F5B0()
{
  JUMPOUT(0x196C9F3B8);
}

void sub_196C9F5B8()
{
  JUMPOUT(0x196C9F3C8);
}

void sub_196C9F5C0()
{
  JUMPOUT(0x196C9F3D8);
}

void sub_196C9F5C8()
{
  JUMPOUT(0x196C9F3E8);
}

void sub_196C9F5D0()
{
  JUMPOUT(0x196C9F3F8);
}

void sub_196C9F5D8()
{
  JUMPOUT(0x196C9F408);
}

void sub_196C9F5E0()
{
  JUMPOUT(0x196C9F418);
}

void sub_196C9F5E8()
{
  JUMPOUT(0x196C9F428);
}

void sub_196C9F5F0()
{
  JUMPOUT(0x196C9F438);
}

void sub_196C9F5F8()
{
  JUMPOUT(0x196C9F448);
}

void sub_196C9F600()
{
  JUMPOUT(0x196C9F458);
}

void sub_196C9F608()
{
  JUMPOUT(0x196C9F474);
}

void sub_196C9F610()
{
  JUMPOUT(0x196C9F484);
}

void sub_196C9F618()
{
  JUMPOUT(0x196C9F494);
}

void sub_196C9F620()
{
  JUMPOUT(0x196C9F49CLL);
}

void sub_196C9F628()
{
  JUMPOUT(0x196C9F4A4);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_196C9F6A4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v6, v5);
        v23 = *a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
    goto LABEL_26;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v22 = v5;
    v23 = 0;
LABEL_26:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v22)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v23);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v31 = 0;
  v32 = 0;
  if (v10 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(a1, &v29);
      if (!v30)
      {
LABEL_43:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, a2);
      }
      v25 = HIDWORD(v32);
      if (HIDWORD(v32) != (_DWORD)v32)
        break;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v31, (unint64_t)&v29);
      if (v30)
        goto LABEL_37;
LABEL_40:
      if (!--v10)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v31, HIDWORD(v32));
        *(_QWORD *)a3 = v31;
        v28 = v32;
        v31 = 0;
        v32 = 0;
        *(_QWORD *)(a3 + 8) = v28;
        goto LABEL_20;
      }
    }
    v26 = v29;
    v29 = 0;
    *(_QWORD *)(v31 + 8 * HIDWORD(v32)) = v26;
    HIDWORD(v32) = v25 + 1;
LABEL_37:
    v27 = v29;
    v29 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v27 -= 2;
    }
    goto LABEL_40;
  }
  if (v10)
  {
    LODWORD(v32) = v10;
    v31 = WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(a1, &v29);
      if (!v30)
        goto LABEL_43;
      v11 = HIDWORD(v32);
      if (HIDWORD(v32) != (_DWORD)v32)
        break;
      v17 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v31, HIDWORD(v32) + 1, (unint64_t)&v29);
      v18 = HIDWORD(v32);
      v19 = HIDWORD(v32) + 1;
      v20 = v31;
      v21 = *v17;
      *v17 = 0;
      *(_QWORD *)(v20 + 8 * v18) = v21;
      HIDWORD(v32) = v19;
      if (v30)
        goto LABEL_13;
LABEL_16:
      if (!--v10)
      {
        v14 = v31;
        v15 = v32;
        goto LABEL_19;
      }
    }
    v12 = v29;
    v29 = 0;
    *(_QWORD *)(v31 + 8 * HIDWORD(v32)) = v12;
    HIDWORD(v32) = v11 + 1;
LABEL_13:
    v13 = v29;
    v29 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v13 -= 2;
    }
    goto LABEL_16;
  }
  v14 = 0;
  v15 = 0;
LABEL_19:
  v31 = 0;
  v32 = 0;
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v15;
LABEL_20:
  *(_BYTE *)(a3 + 16) = 1;
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, a2);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_196C9F9C0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  const char **v15;
  int v16;
  const char **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char **v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v6, v5);
        v19 = *a1;
        v18 = a1[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_32;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v18 = v5;
    v19 = 0;
LABEL_32:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v18)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v19);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v24 = 0;
  v25 = 0;
  if (v10 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v22);
      if (!v23)
      {
LABEL_28:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
        return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, a2);
      }
      v16 = HIDWORD(v25);
      if (HIDWORD(v25) == (_DWORD)v25)
      {
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SandboxExtensionHandle>((uint64_t)&v24, (unint64_t)&v22);
        if (!v23)
          goto LABEL_23;
      }
      else
      {
        v17 = v22;
        v22 = 0;
        *(_QWORD *)(v24 + 8 * HIDWORD(v25)) = v17;
        HIDWORD(v25) = v16 + 1;
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
LABEL_23:
      if (!--v10)
      {
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v24, HIDWORD(v25));
        *(_QWORD *)a3 = v24;
        v21 = v25;
        v24 = 0;
        v25 = 0;
        *(_QWORD *)(a3 + 8) = v21;
        goto LABEL_11;
      }
    }
  }
  if (v10)
  {
    LODWORD(v25) = v10;
    v24 = WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v22);
      if (!v23)
        goto LABEL_28;
      v14 = HIDWORD(v25);
      if (HIDWORD(v25) == (_DWORD)v25)
      {
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SandboxExtensionHandle>((uint64_t)&v24, (unint64_t)&v22);
        if (!v23)
          goto LABEL_18;
      }
      else
      {
        v15 = v22;
        v22 = 0;
        *(_QWORD *)(v24 + 8 * HIDWORD(v25)) = v15;
        HIDWORD(v25) = v14 + 1;
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
LABEL_18:
      if (!--v10)
      {
        v11 = v24;
        v12 = v25;
        goto LABEL_10;
      }
    }
  }
  v11 = 0;
  v12 = 0;
LABEL_10:
  v24 = 0;
  v25 = 0;
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
LABEL_11:
  *(_BYTE *)(a3 + 16) = 1;
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, a2);
}

void sub_196C9FBFC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a10)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&a9);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::UserData>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::UserData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WebKit::UserData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  IPC::Decoder::decode<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(a1, (uint64_t)&v6);
  if (*a1)
  {
    if (v7)
    {
      v4 = v6;
      v6 = 0;
      if (v4)
      {
        CFRetain(*(CFTypeRef *)(v4 + 8));
        *(_QWORD *)a2 = v4;
        *(_BYTE *)(a2 + 8) = 1;
        CFRelease(*(CFTypeRef *)(v4 + 8));
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
LABEL_5:
  if (v7)
  {
    v5 = v6;
    v6 = 0;
    if (v5)
      CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void sub_196C9FD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
  {
    if (a9)
      CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,void>::decode<IPC::Decoder,API::Object>(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196C9FDB4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  if (*((_BYTE *)v1 + 8))
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,void>::decode<IPC::Decoder,API::Object>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebKit *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  WTF::StringImpl *v24;
  void *v25;
  unint64_t v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  WebKit *v76;
  uint64_t v77;

  v4 = a1[1];
  v5 = (_BYTE *)*a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v36 = 0;
    v37 = 0;
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (v38)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        v37 = *a1;
        v36 = a1[1];
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
    }
    goto LABEL_84;
  }
  v7 = &v5[v6];
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v36 = v4;
    v37 = 0;
LABEL_84:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39)
    {
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
        v5 = (_BYTE *)*a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_85;
  }
  if (*v7 >= 2u)
  {
LABEL_85:
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40 && v4)
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v40 + 16))(v40, v5);
    goto LABEL_91;
  }
  if (!*v7)
  {
    *(_QWORD *)a2 = 0;
LABEL_19:
    *(_BYTE *)(a2 + 8) = 1;
    return;
  }
  if (v4 <= v7 + 1 - v5)
  {
    v41 = 0;
    v42 = 0;
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
      v41 = 0;
      v65 = *a1;
      v66 = a1[1];
      v67 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      v42 = 0;
      if (v67)
      {
        if (v66)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v65);
          v42 = (_BYTE *)*a1;
          v41 = a1[1];
        }
      }
    }
    goto LABEL_90;
  }
  a1[2] = (uint64_t)(v7 + 2);
  if (v7[1] >= 0x14u)
  {
    v41 = v4;
    v42 = v5;
LABEL_90:
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44 && v41)
      (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v44 + 16))(v44, v42, v41);
    goto LABEL_91;
  }
  switch(v7[1])
  {
    case 0u:
      v13 = a1[1];
      v14 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
      if (v13 < v14 || v13 - v14 <= 7)
      {
        *a1 = 0;
        a1[1] = 0;
        v52 = a1[3];
        if (v52)
        {
          if (v13)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
            v53 = *a1;
            v54 = a1[1];
            v55 = a1[3];
            *a1 = 0;
            a1[1] = 0;
            if (v55)
            {
              if (v54)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v53);
            }
          }
        }
LABEL_79:
        v33 = *a1;
        v34 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v35 = a1[3];
        if (v35 && v34)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
        if (*a1)
          goto LABEL_81;
        goto LABEL_113;
      }
      v15 = (unint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v16 = *v15;
      a1[2] = (uint64_t)(v15 + 1);
      v76 = 0;
      v77 = 0;
      if (v16 < 0x20000)
      {
        if (v16)
        {
          LODWORD(v77) = v16;
          v76 = (WebKit *)WTF::fastMalloc((WTF *)(8 * v16));
          while (1)
          {
            IPC::Decoder::decode<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(&v74, a1);
            if (!v75)
              goto LABEL_78;
            v17 = HIDWORD(v77);
            if (HIDWORD(v77) != (_DWORD)v77)
              break;
            WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)&v76, (unint64_t)&v74);
            if (v75)
              goto LABEL_34;
LABEL_36:
            if (!--v16)
            {
              v20 = v76;
              v21 = v77;
              v22 = HIDWORD(v77);
              goto LABEL_38;
            }
          }
          v18 = v74;
          v74 = 0;
          *((_QWORD *)v76 + HIDWORD(v77)) = v18;
          HIDWORD(v77) = v17 + 1;
LABEL_34:
          v19 = v74;
          v74 = 0;
          if (v19)
            CFRelease(*(CFTypeRef *)(v19 + 8));
          goto LABEL_36;
        }
        v22 = 0;
        v21 = 0;
        v20 = 0;
LABEL_38:
        v76 = 0;
        v77 = 0;
        v71 = v20;
LABEL_39:
        v72 = __PAIR64__(v22, v21);
        v73 = 1;
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v5);
        if (*a1)
        {
          v10 = (WebKit *)API::Object::newObject(0x20uLL, 1);
          *(_QWORD *)v10 = off_1E34CC2A8;
          WebKit::InitializeWebKit2(v10);
          *(_QWORD *)v10 = &off_1E34CC2F8;
          v24 = v71;
          v71 = 0;
          v72 = 0;
          *((_QWORD *)v10 + 2) = v24;
          *((_DWORD *)v10 + 6) = v21;
          *((_DWORD *)v10 + 7) = v22;
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v25);
          if (*a1)
            goto LABEL_17;
          goto LABEL_97;
        }
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v23);
LABEL_113:
        v56 = *a1;
        v57 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v58 = a1[3];
        if (v58)
        {
          if (v57)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v56);
            if (*a1)
              goto LABEL_81;
          }
        }
        goto LABEL_91;
      }
      while (1)
      {
        IPC::Decoder::decode<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(&v74, a1);
        if (!v75)
        {
LABEL_78:
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v5);
          goto LABEL_79;
        }
        v30 = HIDWORD(v77);
        if (HIDWORD(v77) != (_DWORD)v77)
          break;
        WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)&v76, (unint64_t)&v74);
        if (v75)
          goto LABEL_71;
LABEL_73:
        if (!--v16)
        {
          WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v76, HIDWORD(v77));
          v71 = v76;
          v21 = v77;
          v22 = HIDWORD(v77);
          v76 = 0;
          v77 = 0;
          goto LABEL_39;
        }
      }
      v31 = v74;
      v74 = 0;
      *((_QWORD *)v76 + HIDWORD(v77)) = v31;
      HIDWORD(v77) = v30 + 1;
LABEL_71:
      v32 = v74;
      v74 = 0;
      if (v32)
        CFRelease(*(CFTypeRef *)(v32 + 8));
      goto LABEL_73;
    case 1u:
      v26 = a1[1];
      if (v26 <= v7 + 2 - v5)
      {
        v59 = 0;
        v60 = 0;
        *a1 = 0;
        a1[1] = 0;
        v61 = a1[3];
        if (v61)
        {
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
            v59 = 0;
            v68 = *a1;
            v69 = a1[1];
            v70 = a1[3];
            *a1 = 0;
            a1[1] = 0;
            v60 = 0;
            if (v70 && v69)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v68, v69);
              v60 = (_BYTE *)*a1;
              v59 = a1[1];
            }
          }
          else
          {
            v59 = 0;
            v60 = 0;
          }
        }
      }
      else
      {
        a1[2] = (uint64_t)(v7 + 3);
        v27 = v7[2];
        if (v27 < 2)
        {
          v28 = v27 != 0;
          v10 = (WebKit *)API::Object::newObject(0x18uLL, 32);
          *((_BYTE *)v10 + 16) = v28;
          *(_QWORD *)v10 = off_1E34CC2A8;
          WebKit::InitializeWebKit2(v10);
          v29 = 0;
          *(_QWORD *)v10 = &off_1E34AD258;
          goto LABEL_45;
        }
        v59 = v26;
        v60 = v5;
      }
      *a1 = 0;
      a1[1] = 0;
      v62 = a1[3];
      if (!v62 || !v59)
        goto LABEL_91;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 16))(v62, v60);
      if (*a1)
        goto LABEL_81;
      v63 = a1[1];
      v64 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (!v64 || !v63)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 16))(v64, 0);
      v10 = 0;
      v29 = 1;
LABEL_45:
      if (*a1)
      {
        if (!v29)
          goto LABEL_17;
        goto LABEL_81;
      }
      if (!v10)
        LOBYTE(v29) = 1;
      if ((v29 & 1) == 0)
        goto LABEL_97;
      goto LABEL_91;
    case 2u:
      IPC::Decoder::decode<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 3u:
      IPC::ArgumentCoder<API::Dictionary,void>::decode((uint64_t)&v71, a1);
      if ((_BYTE)v72)
      {
        v10 = v71;
        if (*a1)
        {
          LODWORD(v12) = 1;
          goto LABEL_23;
        }
        if (v71)
        {
          v51 = (const void *)*((_QWORD *)v71 + 1);
          goto LABEL_104;
        }
        LODWORD(v12) = 0;
        goto LABEL_23;
      }
      v48 = *a1;
      v49 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v50 = a1[3];
      if (!v50 || !v49)
        goto LABEL_105;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48);
      v12 = *a1;
      if (*a1)
        goto LABEL_81;
      goto LABEL_106;
    case 4u:
      IPC::Decoder::decode<WTF::Ref<API::Double,WTF::RawPtrTraits<API::Double>,WTF::DefaultRefDerefTraits<API::Double>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 5u:
      IPC::Decoder::decode<WTF::Ref<API::Error,WTF::RawPtrTraits<API::Error>,WTF::DefaultRefDerefTraits<API::Error>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 6u:
      IPC::Decoder::decode<WTF::Ref<API::FrameHandle,WTF::RawPtrTraits<API::FrameHandle>,WTF::DefaultRefDerefTraits<API::FrameHandle>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 7u:
      IPC::Decoder::decode<WTF::Ref<WebKit::WebImage,WTF::RawPtrTraits<WebKit::WebImage>,WTF::DefaultRefDerefTraits<WebKit::WebImage>>>((uint64_t)&v71, (unint64_t *)a1);
      goto LABEL_50;
    case 8u:
      IPC::Decoder::decode<WTF::Ref<API::PageHandle,WTF::RawPtrTraits<API::PageHandle>,WTF::DefaultRefDerefTraits<API::PageHandle>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 9u:
      IPC::Decoder::decode<WTF::Ref<API::Point,WTF::RawPtrTraits<API::Point>,WTF::DefaultRefDerefTraits<API::Point>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 0xAu:
      IPC::Decoder::decode<WTF::Ref<API::Rect,WTF::RawPtrTraits<API::Rect>,WTF::DefaultRefDerefTraits<API::Rect>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 0xBu:
      IPC::Decoder::decode<WTF::Ref<API::SerializedScriptValue,WTF::RawPtrTraits<API::SerializedScriptValue>,WTF::DefaultRefDerefTraits<API::SerializedScriptValue>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 0xCu:
      IPC::Decoder::decode<WTF::Ref<API::Size,WTF::RawPtrTraits<API::Size>,WTF::DefaultRefDerefTraits<API::Size>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 0xDu:
      IPC::Decoder::decode<WTF::String>(a1, &v71);
      v9 = *a1;
      if (!*a1)
      {
        v10 = 0;
LABEL_11:
        if ((_BYTE)v72)
        {
          v11 = v71;
          v71 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v8);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        if (v9)
        {
          if (*a1)
          {
LABEL_17:
            *(_BYTE *)a2 = 0;
            *(_BYTE *)(a2 + 8) = 0;
            goto LABEL_18;
          }
        }
        else
        {
          v45 = *a1;
          v46 = a1[1];
          *a1 = 0;
          a1[1] = 0;
          v47 = a1[3];
          if (v47 && v46)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45);
          if (*a1)
            goto LABEL_81;
        }
        if (v9 && v10)
LABEL_97:
          CFRelease(*((CFTypeRef *)v10 + 1));
LABEL_91:
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 8) = 0;
        return;
      }
      if ((_BYTE)v72)
      {
        API::String::create(&v71, &v76);
        v10 = v76;
        goto LABEL_11;
      }
LABEL_81:
      while (1)
      {
        __break(1u);
LABEL_82:
        IPC::Decoder::decode<WTF::Ref<API::UserContentURLPattern,WTF::RawPtrTraits<API::UserContentURLPattern>,WTF::DefaultRefDerefTraits<API::UserContentURLPattern>>>((uint64_t)&v71, a1);
LABEL_50:
        LODWORD(v12) = v72;
        if (!*a1)
          break;
        if ((_BYTE)v72)
        {
          LODWORD(v12) = 1;
          v10 = v71;
          goto LABEL_23;
        }
      }
      if ((_BYTE)v72)
      {
        LODWORD(v12) = (_DWORD)v71;
        if (v71)
        {
          v51 = (const void *)*((_QWORD *)v71 + 1);
LABEL_104:
          CFRelease(v51);
LABEL_105:
          LODWORD(v12) = 0;
        }
      }
LABEL_106:
      v10 = 0;
LABEL_23:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      if ((_DWORD)v12)
      {
LABEL_18:
        *(_QWORD *)a2 = v10;
        goto LABEL_19;
      }
      break;
    case 0xEu:
      IPC::Decoder::decode<WTF::Ref<API::URL,WTF::RawPtrTraits<API::URL>,WTF::DefaultRefDerefTraits<API::URL>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 0xFu:
      IPC::Decoder::decode<WTF::Ref<API::URLRequest,WTF::RawPtrTraits<API::URLRequest>,WTF::DefaultRefDerefTraits<API::URLRequest>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 0x10u:
      IPC::Decoder::decode<WTF::Ref<API::URLResponse,WTF::RawPtrTraits<API::URLResponse>,WTF::DefaultRefDerefTraits<API::URLResponse>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 0x11u:
      IPC::Decoder::decode<WTF::Ref<API::UInt64,WTF::RawPtrTraits<API::UInt64>,WTF::DefaultRefDerefTraits<API::UInt64>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 0x12u:
      IPC::Decoder::decode<WTF::Ref<API::Int64,WTF::RawPtrTraits<API::Int64>,WTF::DefaultRefDerefTraits<API::Int64>>>((uint64_t)&v71, a1);
      goto LABEL_50;
    case 0x13u:
      goto LABEL_82;
    default:
      goto LABEL_91;
  }
}

void sub_196CA05FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, ...)
{
  va_list va;

  va_start(va, a8);
  if (a8)
  {
    if (a7)
      CFRelease(*(CFTypeRef *)(a7 + 8));
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_196CA0640(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  JUMPOUT(0x196CA0638);
}

uint64_t IPC::Decoder::decode<WebKit::TextCheckerState>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::TextCheckerState,void>::decode(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void IPC::Decoder::decode<WebCore::ScreenProperties>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::ScreenProperties,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

unint64_t IPC::Decoder::decode<WebKit::AccessibilityPreferences>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::AccessibilityPreferences,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_196CA07B0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::CDMRequirement>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 2u;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v23 = 0;
    v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v6, v5);
        v24 = *a1;
        v23 = a1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
    goto LABEL_29;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v33 = 0;
    v34 = 0;
    if (v10 >= 0x8000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::OrganizationStorageAccessPromptQuirk>(a1, (uint64_t)&v27);
        if (!v32)
          break;
        if (HIDWORD(v34) == (_DWORD)v34)
        {
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OrganizationStorageAccessPromptQuirk>((uint64_t)&v33, (unint64_t)&v27);
        }
        else
        {
          v19 = v33 + 32 * HIDWORD(v34);
          v20 = v27;
          v27 = 0;
          *(_QWORD *)v19 = v20;
          *(_QWORD *)(v19 + 8) = 0;
          v21 = v28;
          v28 = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)(v19 + 24) = 0;
          *(_QWORD *)(v19 + 8) = v21;
          v22 = v29;
          v29 = 0;
          *(_QWORD *)(v19 + 16) = v22;
          LODWORD(v22) = v30;
          v30 = 0;
          *(_DWORD *)(v19 + 24) = v22;
          LODWORD(v22) = v31;
          v31 = 0;
          *(_DWORD *)(v19 + 28) = v22;
          ++HIDWORD(v34);
        }
        std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
        if (!--v10)
        {
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v33, HIDWORD(v34));
          *(_QWORD *)a3 = v33;
          v26 = v34;
          v33 = 0;
          v34 = 0;
          *(_QWORD *)(a3 + 8) = v26;
          goto LABEL_17;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v16 = 0;
        v17 = 0;
LABEL_16:
        v33 = 0;
        v34 = 0;
        *(_QWORD *)a3 = v16;
        *(_QWORD *)(a3 + 8) = v17;
LABEL_17:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, a2);
      }
      LODWORD(v34) = v10;
      v33 = WTF::fastMalloc((WTF *)(32 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::OrganizationStorageAccessPromptQuirk>(a1, (uint64_t)&v27);
        if (!v32)
          break;
        if (HIDWORD(v34) == (_DWORD)v34)
        {
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OrganizationStorageAccessPromptQuirk>((uint64_t)&v33, (unint64_t)&v27);
        }
        else
        {
          v12 = v33 + 32 * HIDWORD(v34);
          v13 = v27;
          v27 = 0;
          *(_QWORD *)v12 = v13;
          *(_QWORD *)(v12 + 8) = 0;
          v14 = v28;
          v28 = 0;
          *(_QWORD *)(v12 + 16) = 0;
          *(_QWORD *)(v12 + 24) = 0;
          *(_QWORD *)(v12 + 8) = v14;
          v15 = v29;
          v29 = 0;
          *(_QWORD *)(v12 + 16) = v15;
          LODWORD(v15) = v30;
          v30 = 0;
          *(_DWORD *)(v12 + 24) = v15;
          LODWORD(v15) = v31;
          v31 = 0;
          *(_DWORD *)(v12 + 28) = v15;
          ++HIDWORD(v34);
        }
        std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
        if (!--v10)
        {
          v16 = v33;
          v17 = v34;
          goto LABEL_16;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
    return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, a2);
  }
  v23 = v5;
  v24 = 0;
LABEL_29:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v23)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v24);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void sub_196CA0B44(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[88];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return result;
  }
  v6 = result;
  v13 = 0;
  v14 = 0;
  if (result >= 0x5D1)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebsiteDataStoreParameters>(a2, v15);
      if (!v16)
        break;
      if (HIDWORD(v14) == (_DWORD)v14)
      {
        WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteDataStoreParameters>((unsigned int *)&v13, (unint64_t)v15);
      }
      else
      {
        WebKit::WebsiteDataStoreParameters::WebsiteDataStoreParameters(v13 + 704 * HIDWORD(v14), v15);
        ++HIDWORD(v14);
      }
      std::__optional_destruct_base<WebKit::WebsiteDataStoreParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v11);
      if (!--v6)
      {
        WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v13, HIDWORD(v14));
        *(_QWORD *)a1 = v13;
        v12 = v14;
        v13 = 0;
        v14 = 0;
        *(_QWORD *)(a1 + 8) = v12;
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (!result)
    {
      v9 = 0;
      v10 = 0;
LABEL_11:
      v13 = 0;
      v14 = 0;
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v10;
LABEL_12:
      *(_BYTE *)(a1 + 16) = 1;
      return WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
    }
    LODWORD(v14) = 704 * (int)result / 0x2C0u;
    v13 = WTF::fastMalloc((WTF *)(704 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebsiteDataStoreParameters>(a2, v15);
      if (!v16)
        break;
      if (HIDWORD(v14) == (_DWORD)v14)
      {
        WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteDataStoreParameters>((unsigned int *)&v13, (unint64_t)v15);
      }
      else
      {
        WebKit::WebsiteDataStoreParameters::WebsiteDataStoreParameters(v13 + 704 * HIDWORD(v14), v15);
        ++HIDWORD(v14);
      }
      std::__optional_destruct_base<WebKit::WebsiteDataStoreParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v8);
      if (!--v6)
      {
        v9 = v13;
        v10 = v14;
        goto LABEL_11;
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  std::__optional_destruct_base<WebKit::WebsiteDataStoreParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v7);
  return WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
}

void sub_196CA0D64(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  WTF::StringImpl *v12;

  std::__optional_destruct_base<WebKit::WebsiteDataStoreParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11, a2);
  WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::WebsiteDataStoreParameters>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::WebsiteDataStoreParameters,void>::decode(a1, a2);
  if (!a2[704])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196CA0DE8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::WebsiteDataStoreParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::ScreenProperties,void>::decode(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  int v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (_DWORD *)(v5 + v6);
    a1[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8 & 0xFFFFFF00;
      v11 = *v8;
      goto LABEL_8;
    }
    v14 = v4;
    v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5, v4);
        v15 = *a1;
        v14 = a1[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v17 = a1[3];
  if (v17 && v14)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  v10 = 0;
  v11 = 0;
  v9 = 1;
LABEL_8:
  IPC::Decoder::decode<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>>(a1, &v18);
  if (*a1)
  {
    if (!v9 && v19)
    {
      v13 = v18;
      *(_DWORD *)a2 = v11 | v10;
      *(_QWORD *)(a2 + 8) = v13;
      *(_BYTE *)(a2 + 16) = 1;
      return;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v19)
  {
    if (v18)
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v18, v12);
  }
}

void IPC::Decoder::decode<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196CA0FA0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 8))
  {
    if (*(_QWORD *)v2)
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(*(_QWORD *)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<API::Data,void>::decode(uint64_t a1, uint64_t *a2)
{
  WebKit *v4;
  const void *v5[2];
  char v6;

  IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)v5);
  if (*a2)
  {
    if (v6)
    {
      API::Data::create((WTF *)v5[1], v5[0], &v4);
      *(_QWORD *)a1 = v4;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196CA1088(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 8))
  {
    if (*(_QWORD *)v2)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  WTF::StringImpl **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  int v16;
  _BYTE v17[24];
  WTF::StringImpl *v18;
  char v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl **v22;

  v2 = (uint64_t *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)result;
  v6 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v11 = 0;
    v12 = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v13 = *(_QWORD *)(result + 24);
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v5, v4);
        v12 = *v2;
        v11 = v2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_11;
  }
  v8 = (int *)(v5 + v6);
  *(_QWORD *)(result + 16) = v8 + 1;
  if (!v5)
  {
    v11 = v4;
    v12 = 0;
LABEL_11:
    *v2 = 0;
    v2[1] = 0;
    result = v2[3];
    if (result)
    {
      if (v11)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  v9 = 0;
  v10 = *v8;
  v22 = 0;
  if (v10)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v2, (uint64_t)&v20);
      if (!v21)
        break;
      result = (uint64_t)IPC::Decoder::decode<WTF::String>(v2, &v18);
      if (v19)
      {
        if (!v21)
          goto LABEL_43;
        result = (uint64_t)v20;
        if (v20 == (WTF::StringImpl *)-1)
          goto LABEL_42;
        result = WTF::equal(v20, 0, v15);
        if ((result & 1) != 0)
          goto LABEL_42;
        if (!v21 || !v19)
        {
LABEL_43:
          __break(1u);
          break;
        }
        result = WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>((uint64_t *)&v22, &v20, (WTF::StringImpl *)&v18, (uint64_t)v17);
        if (!v17[16])
        {
LABEL_42:
          *a2 = 0;
          a2[8] = 0;
          v16 = 1;
        }
        else
        {
          v16 = 0;
        }
        if (v19)
        {
          result = (uint64_t)v18;
          v18 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
      else
      {
        *a2 = 0;
        a2[8] = 0;
        v16 = 1;
      }
      if (v21)
      {
        result = (uint64_t)v20;
        v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (v16)
        goto LABEL_45;
      if (!--v10)
      {
        v9 = v22;
        goto LABEL_8;
      }
    }
    *a2 = 0;
    a2[8] = 0;
LABEL_45:
    result = (uint64_t)v22;
    if (v22)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v22, v14);
  }
  else
  {
LABEL_8:
    *(_QWORD *)a2 = v9;
    a2[8] = 1;
  }
  return result;
}

void sub_196CA12C4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1, v7);
  v9 = *(WTF::StringImpl ***)(v5 - 40);
  if (v9)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v8);
  _Unwind_Resume(a1);
}

void sub_196CA12F4()
{
  JUMPOUT(0x196CA12D4);
}

void sub_196CA12FC()
{
  JUMPOUT(0x196CA12DCLL);
}

unsigned __int8 *WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v24;
  unsigned int *v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = (_QWORD *)(v8 + 24);
    do
    {
      *(v11 - 1) = 255;
      *v11 = 0;
      v11[1] = 0;
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (unsigned __int8 *)(v5 + 24 * v12);
      v15 = *v14;
      if (v15 != 254)
      {
        if (v15 == 255 && *((_QWORD *)v14 + 1) == 0)
        {
          v35 = v5 + 24 * v12;
          v36 = *(unsigned int **)(v35 + 16);
          *(_QWORD *)(v35 + 16) = 0;
          if (v36)
          {
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              atomic_store(1u, v36);
              WTF::fastFree((WTF *)v36, v9);
            }
          }
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::PairHash<IPC::ReceiverName,unsigned long long>::hash((unsigned __int8 *)(v5 + 24 * v12));
          v20 = 0;
          do
          {
            v21 = v19 & v18;
            v22 = (unsigned __int8 *)(v17 + 24 * (v19 & v18));
            v19 = ++v20 + (v19 & v18);
          }
          while (*v22 != 255 || *((_QWORD *)v22 + 1) != 0);
          v24 = v17 + 24 * v21;
          v27 = *(unsigned int **)(v24 + 16);
          v26 = (_QWORD *)(v24 + 16);
          v25 = v27;
          *v26 = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v25);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v25));
            if (!v29)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v9);
            }
          }
          *(_OWORD *)v22 = *(_OWORD *)v14;
          v30 = v5 + 24 * v12;
          v31 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          *v26 = v31;
          v32 = *(unsigned int **)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          if (v32)
          {
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v32);
              WTF::fastFree((WTF *)v32, v9);
            }
          }
          if (v14 == a3)
            v13 = v22;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

void WebKit::NetworkProcess::didReceiveMessage(unsigned int **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned int v6;
  int v7;

  if (this[4] == (unsigned int *)a2)
  {
    if (!IPC::MessageReceiverMap::dispatchMessage(this + 5, (IPC::Connection *)a2, a3))
    {
      v6 = *((unsigned __int16 *)a3 + 25);
      if (v6 >= 0xE98)
        v6 = 3736;
      v7 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]);
      if (v7 == 3)
      {
        WebKit::AuxiliaryProcess::didReceiveMessage((WebKit::AuxiliaryProcess *)this, a2, a3);
      }
      else if (v7 == 33)
      {
        WebKit::NetworkContentRuleListManager::didReceiveMessage((WTF::StringImpl *)(this + 30), (IPC::Connection *)a2, a3);
      }
      else
      {
        WebKit::NetworkProcess::didReceiveNetworkProcessMessage((WebKit::NetworkProcess *)this, a2, a3);
      }
    }
  }
  else
  {
    WTFLogAlways();
  }
}

BOOL IPC::MessageReceiverMap::dispatchMessage(unsigned int **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  unsigned int *v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20[2];
  WTF *v21;

  v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 >= 0xE98)
    v6 = 3736;
  LOBYTE(v21) = (&IPC::Detail::messageDescriptions)[3 * v6 + 2];
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<IPC::ReceiverName>>,IPC::ReceiverName>(this, (unsigned __int8 *)&v21, (unsigned int **)v20);
  v8 = (unsigned int *)v20[0];
  if (v20[0])
  {
    v14 = *((_QWORD *)v20[0] + 1);
    if (v14)
    {
      (*(void (**)(_QWORD, IPC::Connection *, IPC::Decoder *))(*(_QWORD *)v14 + 16))(*((_QWORD *)v20[0] + 1), a2, a3);
      v8 = (unsigned int *)v20[0];
      v20[0] = 0;
      if (!v8)
        return 1;
    }
    else
    {
      v20[0] = 0;
    }
    do
    {
      v15 = __ldaxr(v8);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v8));
    if (!v16)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
    if (v14)
      return 1;
  }
  v9 = *((unsigned __int16 *)a3 + 25);
  if (v9 >= 0xE98)
    v9 = 3736;
  v10 = (WTF *)*((_QWORD *)a3 + 8);
  v20[0] = (WTF *)LOBYTE((&IPC::Detail::messageDescriptions)[3 * v9 + 2]);
  v20[1] = v10;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>>,std::pair<IPC::ReceiverName,unsigned long long>>((unint64_t)(this + 1), (unsigned __int8 *)v20, (unsigned int **)&v21);
  v12 = (unsigned int *)v21;
  if (!v21)
    return 0;
  v17 = *((_QWORD *)v21 + 1);
  if (v17)
  {
    (*(void (**)(_QWORD, IPC::Connection *, IPC::Decoder *))(*(_QWORD *)v17 + 16))(*((_QWORD *)v21 + 1), a2, a3);
    v12 = (unsigned int *)v21;
    v21 = 0;
    if (!v12)
      return 1;
  }
  else
  {
    v21 = 0;
  }
  do
  {
    v18 = __ldaxr(v12);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v12));
  if (!v19)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  return v17 != 0;
}

unsigned int **WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<IPC::ReceiverName>>,IPC::ReceiverName>@<X0>(unsigned int **result@<X0>, unsigned __int8 *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;

  v3 = *result;
  if (*result)
  {
    v4 = *(v3 - 2);
    v5 = *a2;
    v6 = 9 * ((~(v5 << 15) + v5) ^ ((~(v5 << 15) + v5) >> 10));
    v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
    v8 = (v7 ^ HIWORD(v7)) & v4;
    v9 = LOBYTE(v3[4 * v8]);
    if (v9 == v5)
    {
LABEL_8:
      v3 = *(unsigned int **)&v3[4 * v8 + 2];
      if (v3)
      {
        do
          v11 = __ldaxr(v3);
        while (__stlxr(v11 + 1, v3));
      }
    }
    else
    {
      v10 = 1;
      while (v9 != 255)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = LOBYTE(v3[4 * v8]);
        ++v10;
        if (v9 == v5)
          goto LABEL_8;
      }
      v3 = 0;
    }
  }
  *a3 = v3;
  return result;
}

unint64_t WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>>,std::pair<IPC::ReceiverName,unsigned long long>>@<X0>(unint64_t result@<X0>, unsigned __int8 *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned __int8 *v17;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
LABEL_17:
    v14 = 0;
    goto LABEL_9;
  }
  v6 = *(_DWORD *)(v4 - 8);
  result = WTF::PairHash<IPC::ReceiverName,unsigned long long>::hash(a2);
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  v9 = result & v6;
  v10 = (unsigned __int8 *)(v4 + 24 * (result & v6));
  v11 = *v10;
  v12 = *((_QWORD *)v10 + 1);
  if (v11 != v7 || v12 != v8)
  {
    v16 = 1;
    while (v11 != 255 || v12)
    {
      v9 = (v9 + v16) & v6;
      v17 = (unsigned __int8 *)(v4 + 24 * v9);
      v11 = *v17;
      v12 = *((_QWORD *)v17 + 1);
      ++v16;
      if (v11 == v7 && v12 == v8)
        goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_7:
  v14 = *(unsigned int **)(v4 + 24 * v9 + 16);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
LABEL_9:
  *a3 = v14;
  return result;
}

unint64_t WTF::PairHash<IPC::ReceiverName,unsigned long long>::hash(unsigned __int8 *a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = ~(*a1 << 15) + *a1;
  v2 = (9 * (v1 ^ (v1 >> 10))) ^ ((9 * (v1 ^ (v1 >> 10))) >> 6);
  v3 = *((_QWORD *)a1 + 1) + ~(*((_QWORD *)a1 + 1) << 32);
  v4 = 9 * (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) ^ (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v2 + ~(v2 << 11)) ^ ((v2 + ~(v2 << 11)) >> 16))
                           + 95187966 * ((v5 >> 31) ^ v5))) >> 4;
}

void `non-virtual thunk to'WebKit::WebCookieManager::didReceiveMessage(WebKit::WebCookieManager *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebCookieManager::didReceiveMessage((WebKit::WebCookieManager *)((char *)this - 8), a2, a3);
}

void WebKit::WebCookieManager::didReceiveMessage(WebKit::WebCookieManager *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  _QWORD *v4;
  char v5;
  unint64_t v6;
  char v7;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x60A:
      IPC::handleMessageAsync<Messages::WebCookieManager::DeleteAllCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::WebCookieManager::deleteAllCookies, 0);
      break;
    case 0x60B:
      IPC::handleMessageAsync<Messages::WebCookieManager::DeleteAllCookiesModifiedSince,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, _QWORD **, double))WebKit::WebCookieManager::deleteAllCookiesModifiedSince, 0);
      break;
    case 0x60C:
      IPC::handleMessageAsync<Messages::WebCookieManager::DeleteCookie,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, _OWORD *, _QWORD **))WebKit::WebCookieManager::deleteCookie, 0);
      break;
    case 0x60D:
      IPC::handleMessageAsync<Messages::WebCookieManager::DeleteCookiesForHostnames,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, _QWORD *, unsigned __int8 ****))WebKit::WebCookieManager::deleteCookiesForHostnames, 0);
      break;
    case 0x60E:
      IPC::handleMessageAsync<Messages::WebCookieManager::GetAllCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::WebCookieManager::getAllCookies, 0);
      break;
    case 0x60F:
      IPC::handleMessageAsync<Messages::WebCookieManager::GetCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, uint64_t, WTF::StringImpl **, _QWORD **))WebKit::WebCookieManager::getCookies, 0);
      break;
    case 0x610:
      IPC::handleMessageAsync<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::WebCookieManager::getHTTPCookieAcceptPolicy, 0);
      break;
    case 0x611:
      IPC::handleMessageAsync<Messages::WebCookieManager::GetHostnamesWithCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::WebCookieManager::getHostnamesWithCookies, 0);
      break;
    case 0x612:
      IPC::handleMessageAsync<Messages::WebCookieManager::SetCookie,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, _QWORD *, unsigned __int8 ****))WebKit::WebCookieManager::setCookie, 0);
      break;
    case 0x613:
      IPC::handleMessageAsync<Messages::WebCookieManager::SetCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, _QWORD *, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))WebKit::WebCookieManager::setCookies, 0);
      break;
    case 0x614:
      IPC::handleMessageAsync<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, uint64_t, _QWORD, _QWORD **))WebKit::WebCookieManager::setHTTPCookieAcceptPolicy, 0);
      break;
    case 0x615:
      v4 = (_QWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v5)
        WebKit::WebCookieManager::startObservingCookieChanges((uint64_t)this, v4);
      break;
    case 0x616:
      v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v7)
        WebKit::WebCookieManager::stopObservingCookieChanges((uint64_t)this, v6);
      break;
    default:
      return;
  }
}

void `non-virtual thunk to'WebKit::WebPageProxy::didReceiveMessage(WebKit::WebPageProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebPageProxy::didReceiveMessage((WebKit::WebPageProxy *)((char *)this - 16), a2, a3);
}

void WebKit::WebPageProxy::didReceiveMessage(WebKit::WebPageProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  double v5;
  float v6;
  float v7;
  uint64_t v8;
  BOOL *v9;
  BOOL *p_includeSnapshot;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  void *v15;
  const WTF::StringImpl *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned __int8 v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v42;
  uint64_t v43;
  unsigned __int16 v44;
  int v45;
  uint64_t v46;
  StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  void *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  const WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  double v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  double *v70;
  unint64_t v71;
  unsigned __int16 v73;
  int v74;
  _BOOL4 v75;
  WTF::StringImpl *v76;
  FloatSize v77;
  Image *v78;
  Image *v79;
  void *v80;
  void *v81;
  unsigned __int16 v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int isLink;
  double v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  _DWORD *v95;
  unsigned __int16 v96;
  int v97;
  _BOOL4 v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  double v112;
  char v113;
  unint64_t v114;
  char v115;
  IntPoint v116;
  WTF::StringImpl *v117;
  char m_x_low;
  unint64_t v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  __n128 v128;
  __n128 v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned __int8 *v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  BOOL v138;
  unint64_t v139;
  unsigned int v140;
  void *v141;
  __int128 v142;
  IntPoint v143;
  unint64_t m_identifier;
  void *v145;
  void *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned __int8 *v152;
  unsigned int v153;
  uint64_t v154;
  unsigned __int16 v155;
  void (*v156)(void);
  unint64_t v157;
  unsigned __int8 *v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  InteractionInformationRequest request;
  __int128 v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  unint64_t v171;
  unint64_t v172;
  double *v173;
  unsigned __int16 ShouldRelaxThirdPartyCookie;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  unint64_t v179;
  WTF::StringImpl *v180;
  unint64_t v181;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int16 v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unsigned __int8 *v195;
  uint64_t v196;
  _DWORD *v197;
  unint64_t v198;
  char v199;
  void *v200;
  char m_x;
  uint64_t v202;
  void *v203;
  char v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  FloatPoint v209;
  StringImpl *v210;
  __int128 v211;
  unint64_t v212;
  char *v213;
  unint64_t v214;
  uint64_t *v215;
  unint64_t v216;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  unsigned __int16 v232;
  unsigned __int16 v233;
  BOOL v234;
  uint64_t v235;
  unsigned __int16 v236;
  const WTF::StringImpl *v237;
  int v238;
  double v239;
  char v240;
  unint64_t v241;
  WTF::StringImpl *v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  IntPoint v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  const void *point;
  unsigned __int16 v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  char v257;
  IntPoint v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  unsigned __int16 v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unsigned __int8 *v277;
  unsigned __int8 *v278;
  unsigned int v279;
  unint64_t v280;
  uint64_t *v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t *v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  int *v292;
  int v293;
  char v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t *v298;
  void *v299;
  char v300;
  unint64_t v301;
  char v302;
  int v303;
  unint64_t v304;
  char v305;
  unsigned __int16 v306;
  char v307;
  uint64_t v308;
  CFTypeRef *v309;
  WTF::StringImpl *v310;
  int v311;
  uint64_t v312;
  unint64_t v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  WTF::StringImpl *v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  __int128 v324;
  const void *v325;
  CFTypeRef *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  WTF::StringImpl *v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  void *v356;
  void *v357;
  WTF::StringImpl *v358;
  Image *v359;
  _BOOL8 v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  void *v363;
  void *v364;
  void *v365;
  WTF::StringImpl *v366;
  WTF::StringImpl *v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  unint64_t v370;
  WTF::StringImpl *v371;
  _QWORD *v372;
  uint64_t v373;
  uint64_t v374;
  WTF::StringImpl *v375;
  unint64_t v376;
  char v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  char v381;
  __int128 v382;
  __int128 v383;
  Image *v384;
  Image *v385;
  IntPoint v386;
  unint64_t v387;
  unsigned int *v388;
  unsigned int v389;
  unsigned int *v390;
  unsigned int v391;
  unsigned int *v392;
  unsigned int v393;
  unsigned int *v394;
  unsigned int v395;
  _DWORD *v396;
  uint64_t v397;
  unsigned int *v398;
  WTF::StringImpl *v399;
  WTF::StringImpl *v400;
  WTF::StringImpl *v401;
  WTF::StringImpl *v402;
  WTF::StringImpl *v403;
  unint64_t v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  WTF::StringImpl *v409;
  WTF::StringImpl *v410;
  StringImpl *v411;
  IntPoint v412;
  uint64_t v413;
  WTF::StringImpl *v414;
  uint64_t v415;
  WTF::StringImpl *v416;
  IntPoint v417;
  uint64_t v418;
  WTF::StringImpl *v419;
  WTF::StringImpl *v420;
  WTF::StringImpl *v421;
  WTF::StringImpl *v422;
  unint64_t v423;
  unint64_t v424;
  _DWORD *v425;
  void *v426;
  const void *v427;
  WTF::StringImpl *v428;
  uint64_t v429;
  WTF::StringImpl *v430;
  WTF::StringImpl *v431;
  CFTypeRef *v432;
  WTF::StringImpl *v433;
  WTF::StringImpl *v434;
  unint64_t v435;
  char v436;
  unint64_t v437;
  char v438;
  unint64_t v439;
  unint64_t v440;
  char v441;
  unint64_t v442;
  char v443;
  unint64_t v444;
  char v445;
  unint64_t v446;
  unsigned __int8 *v447;
  unsigned int v448;
  BOOL v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  char v453;
  WTF *v454;
  unint64_t v455;
  char v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  void *v461;
  _QWORD *v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  WTF::StringImpl *v466;
  void *v467;
  void *v468;
  void *v469;
  void *v470;
  void *v471;
  void *v472;
  void *v473;
  void *v474;
  void *v475;
  void *v476;
  WTF::StringImpl *v477;
  WTF::StringImpl *v478;
  WTF::StringImpl *v479;
  uint64_t v480;
  StringImpl *m_ptr;
  WTF::StringImpl *v482;
  WTF::StringImpl *v483;
  unint64_t v484;
  WTF::StringImpl *v485;
  _QWORD *v486;
  uint64_t v487;
  uint64_t v488;
  StringImpl *v489;
  WTF::StringImpl *v490;
  const void *adjustedPointForNodeRespondingToClickEvents;
  int v492;
  uint64_t v493;
  void *v494;
  unint64_t v495;
  void *v496;
  void *v497;
  void *v498;
  unsigned __int16 v499;
  unsigned __int16 v500;
  FloatPoint v501;
  __int128 v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unsigned int v506;
  unint64_t v507;
  char v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  double *v513;
  double v514;
  WTF::StringImpl *v515;
  IntPoint v516;
  uint64_t v517;
  uint64_t v518;
  int v519;
  unint64_t v520;
  char v521;
  IntPoint v522;
  int v523;
  unint64_t v524;
  _QWORD *v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  char v529;
  uint64_t v530;
  unint64_t v531;
  WTF::StringImpl *v532;
  unint64_t v533;
  int *v534;
  int v535;
  unint64_t v536;
  char v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  unint64_t v545;
  unint64_t v546;
  double *v547;
  unint64_t v548;
  _QWORD *v549;
  uint64_t v550;
  uint64_t v551;
  WTF::StringImpl *v552;
  void *v553;
  void *v554;
  InteractionInformationAtPosition *v555;
  IntPoint v556;
  uint64_t v557;
  int v558;
  unsigned __int16 v559;
  WTF::StringImpl *v560;
  unint64_t v561;
  uint64_t v562;
  unint64_t v563;
  unsigned __int8 *v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unsigned __int8 *v569;
  unsigned int v570;
  BOOL v571;
  unsigned int v572;
  uint64_t v573;
  unint64_t v574;
  uint64_t v575;
  unint64_t v576;
  _QWORD *v577;
  uint64_t v578;
  uint64_t v579;
  WTF::StringImpl *v580;
  IntPoint v581;
  unsigned __int16 v582;
  unint64_t v583;
  uint64_t v584;
  unint64_t v585;
  unsigned int *v586;
  unsigned int v587;
  unint64_t v588;
  unint64_t v589;
  unsigned __int8 *v590;
  unsigned int v591;
  uint64_t v592;
  char v593;
  WTF::StringImpl *v594;
  WTF::StringImpl *v595;
  WTF::StringImpl *v596;
  WTF::StringImpl *v597;
  WTF::StringImpl *v598;
  WTF::StringImpl *v599;
  unint64_t v600;
  char v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  WTF::StringImpl *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  WTF::StringImpl *v609;
  uint64_t v610;
  uint64_t v611;
  void *v612;
  WTF::StringImpl *v613;
  WTF::StringImpl *v614;
  WTF::StringImpl *v615;
  WTF::StringImpl *v616;
  WTF::StringImpl *v617;
  WTF::StringImpl *v618;
  const void *v619;
  void *v620;
  WTF::StringImpl *v621;
  WTF::StringImpl *m_size;
  WTF::StringImpl *v623;
  Image *v624;
  WTF::StringImpl *v625;
  WTF::StringImpl *v626;
  uint64_t v627;
  unsigned __int16 v628;
  BOOL v629;
  int v630;
  void *v631;
  int v632;
  unsigned __int16 v633;
  WTF::StringImpl *v634;
  WTF::StringImpl *v635;
  uint64_t v636;
  uint64_t v637;
  char v638;
  unint64_t v639;
  unsigned __int8 *v640;
  unsigned int v641;
  BOOL v642;
  IntPoint v643;
  FloatPoint v644;
  StringImpl *v645;
  unint64_t v646;
  char v647;
  uint64_t v648;
  unint64_t v649;
  char v650;
  IntPoint v651;
  unint64_t v652;
  void *v653;
  void *v654;
  int v655;
  WTF::StringImpl *v656;
  uint64_t v657;
  WTF::StringImpl *v658;
  WTF::StringImpl *v659;
  WTF::StringImpl *v660;
  uint64_t v661;
  __int128 v662;
  int v663;
  uint64_t v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  void *v702;
  unsigned int v703;
  unsigned int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  unint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  WTF::StringImpl *v756;
  uint64_t v757;
  WTF::StringImpl *v758;
  WTF::StringImpl *v759;
  unint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  void *v766;
  void *v767;
  void *v768;
  WTF::StringImpl *v769;
  uint64_t v770;
  unint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  _DWORD *v775;
  _DWORD *v776;
  _DWORD *v777;
  unsigned int *v778;
  unsigned int v779;
  unsigned int v780;
  unint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  unint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  unint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  WTF::StringImpl *v794;
  void *v795;
  WTF::StringImpl *v796;
  uint64_t v797;
  void *v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  const void *v803;
  const void *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  unint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  unint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  WTF::StringImpl *v835;
  CFTypeRef *v836;
  CFTypeRef v837;
  WTF::StringImpl *v838;
  WTF::StringImpl *v839;
  WTF::StringImpl *v840;
  unint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  CFTypeRef v846;
  WTF::StringImpl *m_hotSpot;
  const void *v848;
  int v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  WTF::StringImpl *v854;
  int v855;
  uint64_t v856;
  void *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  unint64_t v866;
  unsigned __int8 *v867;
  unsigned int v868;
  int v869;
  IntPoint v870;
  int v871;
  unint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  WTF::StringImpl *v878;
  WTF::StringImpl *v879;
  WTF::StringImpl *v880;
  WTF::StringImpl *v881;
  WTF::StringImpl *v882;
  WTF::StringImpl *v883;
  WTF::StringImpl *v884;
  WTF::StringImpl *v885;
  WTF::StringImpl *v886;
  WTF::StringImpl *v887;
  WTF::StringImpl *v888;
  WTF::StringImpl *v889;
  WTF::StringImpl *v890;
  void *v891;
  void *v892;
  void *v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  InteractionInformationRequest v899;
  WTF::StringImpl *v900;
  WTF::StringImpl *v901;
  uint64_t v902;
  unint64_t v903;
  WTF::StringImpl *v904;
  WTF::StringImpl *v905;
  uint64_t v906;
  int v907;
  uint64_t v908;
  WTF::StringImpl *v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  const WTF::String *v916;
  BOOL includeSnapshot;
  BOOL includeLinkIndicator;
  BOOL *LogChannel;
  WTF::StringImpl *v920;
  WTF::StringImpl *v921;
  unsigned int *v922;
  unsigned int *v923;
  WTF::StringImpl *v924;
  void *v925;
  __int128 v926;
  __int128 v927;
  FloatPoint v928;
  int m_userEnd_low;
  uint64_t v930;
  StringImpl *v931;
  uint64_t v932;
  uint64_t v933;
  void *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  char v938;
  uint64_t v939;
  uint64_t v940;
  __int128 v941;
  uint64_t v942;
  void *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  WTF *v959;
  unsigned int v960;
  unsigned int v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  unint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  unint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  WTF::StringImpl *v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  unint64_t v992;
  float *v993;
  unint64_t v994;
  unint64_t v995;
  float *v996;
  uint64_t v997;
  uint64_t v998;
  unint64_t v999;
  unsigned __int8 *v1000;
  unsigned int v1001;
  unsigned int v1002;
  WTF::StringImpl *v1003;
  WTF::StringImpl *v1004;
  WTF::StringImpl *v1005;
  unint64_t v1006;
  uint64_t v1007;
  int v1008;
  WTF::StringImpl *v1009;
  unint64_t v1010;
  char v1011;
  uint64_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  char v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  char v1020;
  uint64_t v1021;
  uint64_t v1022;
  unint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  unint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  unint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  unint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  WTF::StringImpl *v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  _BOOL4 canBeValid;
  void *v1058;
  uint64_t v1059;
  unint64_t v1060;
  char v1061;
  _QWORD *v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  unint64_t v1068;
  _QWORD *v1069;
  uint64_t v1070;
  uint64_t v1071;
  _DWORD *v1072;
  uint64_t v1073;
  uint64_t v1074;
  const WTF::StringImpl *v1075;
  IntPoint v1076;
  float64_t v1077;
  unint64_t v1078;
  char v1079;
  uint64_t v1080;
  uint64_t v1081;
  WTF::StringImpl *v1082;
  WTF::StringImpl *v1083;
  WTF::StringImpl *v1084;
  uint64_t v1085;
  unint64_t v1086;
  char v1087;
  _QWORD *v1088;
  uint64_t v1089;
  _DWORD *v1090;
  _DWORD *v1091;
  uint64_t v1092;
  unint64_t v1093;
  char v1094;
  _QWORD *v1095;
  uint64_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  char v1099;
  _QWORD *v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  char v1107;
  _QWORD *v1108;
  uint64_t v1109;
  uint64_t v1110;
  unint64_t v1111;
  char v1112;
  _QWORD *v1113;
  uint64_t v1114;
  uint64_t v1115;
  unint64_t v1116;
  char v1117;
  _QWORD *v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  char v1128;
  double v1129;
  uint64_t v1130;
  const WTF::StringImpl *v1131;
  unint64_t v1132;
  char v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  unint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  unint64_t v1143;
  WTF::StringImpl *v1144;
  _QWORD *v1145;
  uint64_t v1146;
  uint64_t v1147;
  WTF::StringImpl *v1148;
  const void *v1149;
  uint64_t v1150;
  unint64_t v1151;
  char v1152;
  _QWORD *v1153;
  uint64_t v1154;
  uint64_t v1155;
  unint64_t v1156;
  char v1157;
  _QWORD *v1158;
  uint64_t v1159;
  uint64_t v1160;
  unint64_t v1161;
  char v1162;
  _QWORD *v1163;
  uint64_t v1164;
  void *v1165;
  WTF::StringImpl *v1166;
  InteractionInformationRequest v1167;
  __int128 v1168;
  __int128 v1169;
  WTF::StringImpl *v1170;
  WTF::StringImpl *v1171;
  WTF::StringImpl *v1172;
  WTF::StringImpl *v1173;
  WTF::StringImpl *v1174;
  unint64_t v1175;
  char v1176;
  _QWORD *v1177;
  uint64_t v1178;
  unint64_t v1179;
  _QWORD *v1180;
  uint64_t v1181;
  uint64_t v1182;
  char v1183;
  IntPoint v1184;
  WTF::StringImpl *v1185;
  unint64_t v1186;
  char v1187;
  uint64_t v1188;
  unint64_t v1189;
  WTF::StringImpl *v1190;
  unint64_t v1191;
  unsigned __int8 *v1192;
  unsigned int v1193;
  unint64_t v1194;
  char v1195;
  uint64_t v1196;
  uint64_t v1197;
  unint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  WTF::StringImpl *v1203;
  WTF::StringImpl *v1204;
  unint64_t v1205;
  unsigned __int8 *v1206;
  unsigned int v1207;
  _BOOL4 isDataDetectorLink;
  unsigned __int16 v1209;
  uint64_t v1210;
  unint64_t v1211;
  char v1212;
  unsigned __int16 v1213;
  int v1214;
  uint64_t v1215;
  IntPoint v1216;
  void *v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  WTF::StringImpl *v1230;
  uint64_t v1231;
  uint64_t v1232;
  _BOOL8 v1233;
  unsigned int *v1234;
  unsigned int v1235;
  unsigned int v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  WTF::StringImpl *v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  WTF::StringImpl *v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  WTF::StringImpl *v1252;
  WTF::StringImpl *v1253;
  WTF::StringImpl *v1254;
  unint64_t v1255;
  _QWORD *v1256;
  uint64_t v1257;
  uint64_t v1258;
  unint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  WTF::StringImpl *v1263;
  WTF::StringImpl *v1264;
  unint64_t v1265;
  _QWORD *v1266;
  uint64_t v1267;
  uint64_t v1268;
  WTF::StringImpl *v1269;
  WTF::StringImpl *v1270;
  unint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  unint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  WTF::StringImpl *v1283;
  uint64_t v1284;
  uint64_t v1285;
  WTF::StringImpl *v1286;
  unint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  WTF::StringImpl *v1292;
  unint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  WTF::StringImpl *v1300[2];
  char v1301;
  WTF::StringImpl *v1302;
  char v1303;
  WTF::StringImpl *v1304;
  char v1305;
  WTF::StringImpl *v1306;
  char v1307;
  WTF::StringImpl *v1308;
  char v1309;
  WTF::StringImpl *v1310;
  char v1311;
  WTF::StringImpl *v1312[2];
  __int128 v1313;
  __int128 v1314;
  WTF::StringImpl *v1315;
  int v1316;
  __int16 v1317;
  const void *v1318;
  char v1319;
  char v1320;
  _BYTE v1321[40];
  Image *v1322;
  Image *v1323;
  char v1324;
  char v1325;
  char v1326;
  InteractionInformationAtPosition v1327;
  uint64_t v1328;
  char v1329[8];
  uint64_t v1330;
  CFTypeRef v1331;
  uint64_t v1332;
  __int128 v1333;
  __int128 v1334;
  __int128 v1335;
  WTF::StringImpl *v1336;
  int v1337;
  __int16 v1338;
  CFTypeRef v1339;
  char v1340;
  CFTypeRef *v1341;
  unsigned __int8 v1342;
  char v1343;
  char v1344;
  unsigned __int8 v1345[16];
  CFTypeRef *v1346;
  char v1347;
  _BYTE v1348[56];
  _DWORD *v1349;
  __int16 v1350;
  char v1351;
  uint64_t v1352;
  _QWORD v1353[2];
  char v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  _QWORD v1360[2];
  char v1361;
  __int128 v1362;
  char v1363;
  WTF::StringImpl *v1364;
  unsigned __int8 v1365;
  CFTypeRef *v1366;
  char v1367;
  _BYTE v1368[64];
  _BYTE v1369[61];
  char v1370;
  _QWORD v1371[2];
  char v1372;
  char v1373;
  __int128 v1374;
  FloatRect v1375;
  int v1376;
  __int128 v1377;
  __int128 v1378;
  FloatRect v1379;
  FloatRect v1380;
  char v1381;
  __int128 v1382;
  uint64_t v1383;
  char v1384[8];
  Image *v1385;
  char v1386;
  Image *v1387;
  __int128 v1388;
  __int128 v1389;
  _DWORD *v1390;
  char v1391;
  _DWORD *v1392;
  char v1393;
  unsigned int *v1394;
  unsigned int *v1395;
  unsigned int *v1396;
  unsigned int *v1397;
  _DWORD *v1398;
  _DWORD *v1399;
  _BYTE v1400[24];
  char v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  char v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  char v1416;
  __int128 v1417;
  char v1418;
  char v1419;
  uint64_t v1420;

  v8 = MEMORY[0x1E0C80A78](this, a2, a3);
  p_includeSnapshot = v9;
  v12 = v11;
  v13 = v8;
  v14 = v1368;
  v1420 = *MEMORY[0x1E0C80C00];
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
  switch(*((_WORD *)p_includeSnapshot + 25))
  {
    case 0x72C:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::BackForwardListItemState>>((uint64_t *)p_includeSnapshot, &v1327);
      if (LOBYTE(v1327.linkIndicator.textRectsInBoundingRectCoordinates.m_buffer))
        WebKit::WebPageProxy::backForwardAddItem(v13, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (WTF::StringImpl **)&v1327.canBeValid);
      std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::BackForwardListItemState>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327);
      goto LABEL_1678;
    case 0x72D:
      WebKit::WebPageProxy::backForwardClear((WebKit::WebPageProxy *)v13);
      goto LABEL_1678;
    case 0x733:
      v162 = *(_QWORD *)(v13 + 40);
      if (v162)
        v60 = *(_QWORD *)(v162 + 8);
      else
        v60 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1584))(v60);
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 344))(v60);
      goto LABEL_618;
    case 0x734:
      WebKit::WebPageProxy::clearTextIndicator((WebKit::WebPageProxy *)v13);
      goto LABEL_1678;
    case 0x736:
      WebKit::WebPageProxy::closePage(v13);
      goto LABEL_1678;
    case 0x737:
      WebKit::WebPageProxy::commitPotentialTapFailed((WebKit::WebPageProxy *)v13);
      goto LABEL_1678;
    case 0x738:
      v107 = *(_QWORD *)(v13 + 40);
      if (v107)
        v60 = *(_QWORD *)(v107 + 8);
      else
        v60 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1584))(v60);
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 408))(v60);
      goto LABEL_618;
    case 0x73E:
      IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>((uint64_t *)p_includeSnapshot, &v1327);
      if (!(_BYTE)v1364)
        goto LABEL_1678;
      v49 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if (!v50)
        goto LABEL_59;
      *(_QWORD *)v1368 = v49;
      p_includeSnapshot = &v1368[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v51 = off_1E34FBF70;
      v51[1] = *(_QWORD *)v1368;
      v52 = *(_QWORD *)&v1368[8];
      *(_QWORD *)&v1368[8] = 0;
      v51[2] = v52;
      *(_QWORD *)v1321 = v51;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
      if (!(_BYTE)v1364)
        goto LABEL_2630;
      WebKit::WebPageProxy::decidePolicyForNavigationActionAsync(v13, (uint64_t *)&v1327.request.point, (uint64_t *)v1321);
      v53 = *(_QWORD *)v1321;
      *(_QWORD *)v1321 = 0;
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
LABEL_59:
      if (!(_BYTE)v1364)
        goto LABEL_1678;
      goto LABEL_810;
    case 0x73F:
      IPC::Decoder::decode<WebKit::NavigationActionData>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (v1419)
      {
        IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
        v238 = v1321[8];
        if (v1321[8])
        {
          if (!v1419)
            goto LABEL_2630;
          WebKit::NavigationActionData::NavigationActionData((uint64_t)&v1327, (uint64_t)v1368);
          v1364 = *(WTF::StringImpl **)v1321;
          v238 = 1;
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
        }
        v1365 = v238;
        if (v1419)
        {
          WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v1368);
          v238 = v1365;
        }
        if (v238)
          goto LABEL_667;
      }
      else
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        v1365 = 0;
      }
      v353 = *(_QWORD *)p_includeSnapshot;
      v354 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v355 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v355)
        goto LABEL_1678;
      if (!v354)
        goto LABEL_1678;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v355 + 16))(v355, v353);
      if (!v1365)
        goto LABEL_1678;
LABEL_667:
      v370 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if ((_BYTE)v371)
      {
        *(_QWORD *)v1368 = v370;
        p_includeSnapshot = &v1368[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
        v372 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v372 = off_1E34FBF98;
        v372[1] = *(_QWORD *)v1368;
        v373 = *(_QWORD *)&v1368[8];
        *(_QWORD *)&v1368[8] = 0;
        v372[2] = v373;
        *(_QWORD *)v1321 = v372;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
        if (!v1365)
          goto LABEL_2630;
        WebKit::WebPageProxy::decidePolicyForNewWindowAction(v13, v12, (uint64_t)&v1327, (_DWORD **)&v1364, (uint64_t *)v1321);
        v374 = *(_QWORD *)v1321;
        *(_QWORD *)v1321 = 0;
        if (v374)
          (*(void (**)(uint64_t))(*(_QWORD *)v374 + 8))(v374);
      }
      if (v1365)
      {
        v375 = v1364;
        v1364 = 0;
        if (v375)
        {
          if (*(_DWORD *)v375 == 2)
            WTF::StringImpl::destroy(v375, v371);
          else
            *(_DWORD *)v375 -= 2;
        }
LABEL_810:
        WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v1327);
      }
      goto LABEL_1678;
    case 0x740:
      IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>>((uint64_t *)p_includeSnapshot, &v1327);
      if (!v1351)
        goto LABEL_1678;
      v241 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if (!(_BYTE)v242)
        goto LABEL_399;
      *(_QWORD *)v1368 = v241;
      p_includeSnapshot = &v1368[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
      v243 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v243 = off_1E34FBF48;
      v243[1] = *(_QWORD *)v1368;
      v244 = *(_QWORD *)&v1368[8];
      *(_QWORD *)&v1368[8] = 0;
      v243[2] = v244;
      *(_QWORD *)v1321 = v243;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
      if (!v1351)
        goto LABEL_2630;
      WebKit::WebPageProxy::decidePolicyForResponse(v13, (WebKit::AuxiliaryProcessProxy *)v12, (uint64_t *)&v1327.request.point, *(_QWORD *)&v1327.linkIndicator.textBoundingRectInRootViewCoordinates.m_location, (uint64_t)&v1327.linkIndicator.textBoundingRectInRootViewCoordinates.m_size, (WebCore::ResourceRequestBase *)((char *)&v1335 + 8), v1348[48], &v1349, v1350, (uint64_t *)v1321);
      v245 = *(_QWORD *)v1321;
      *(_QWORD *)v1321 = 0;
      if (v245)
        (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
LABEL_399:
      if (v1351)
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>::~__tuple_impl((uint64_t)&v1327, v242);
      goto LABEL_1678;
    case 0x745:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (v1327.canBeValid)
        WebKit::WebPageProxy::didCancelClientRedirectForFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot);
      goto LABEL_1678;
    case 0x746:
      v1327.request.point = (IntPoint)IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)p_includeSnapshot);
      *(_DWORD *)&v1327.request.includeSnapshot = v253;
      if ((_BYTE)v253)
      {
        v254 = *(_QWORD *)(v13 + 40);
        if (v254)
          v255 = *(_QWORD *)(v254 + 8);
        else
          v255 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v255 + 1584))(v255);
        (*(void (**)(uint64_t, InteractionInformationAtPosition *))(*(_QWORD *)v255 + 240))(v255, &v1327);
        (*(void (**)(uint64_t))(*(_QWORD *)v255 + 1592))(v255);
      }
      goto LABEL_1678;
    case 0x748:
      IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)p_includeSnapshot);
      goto LABEL_1678;
    case 0x749:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (v1327.canBeValid)
        WebKit::WebPageProxy::didChangeMainDocument(v13, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot);
      goto LABEL_1678;
    case 0x74A:
      v61 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)p_includeSnapshot);
      if ((v61 & 0xFF00000000) != 0)
        *(_DWORD *)(v13 + 860) = v61;
      goto LABEL_1678;
    case 0x74B:
      v239 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)p_includeSnapshot));
      if (v240)
        WebKit::WebPageProxy::didChangeProgress((WebKit::WebPageProxy *)v13, v239);
      goto LABEL_1678;
    case 0x74C:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>>((uint64_t *)p_includeSnapshot, &v1327);
      if (!LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x))
        goto LABEL_1678;
      WebKit::WebPageProxy::didChangeProvisionalURLForFrame((WebKit::WebPageProxy *)v13, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid, (WTF::StringImpl *)&v1327.isLink);
      if (!LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x))
        goto LABEL_1678;
      v58 = *(WTF::StringImpl **)&v1327.isLink;
      *(_QWORD *)&v1327.isLink = 0;
      if (!v58)
        goto LABEL_1678;
      goto LABEL_966;
    case 0x74D:
      v18 = IPC::Decoder::decode<WebCore::RectEdges<BOOL>>((uint64_t *)p_includeSnapshot);
      if (!BYTE4(v18))
      {
        v676 = *(_QWORD *)p_includeSnapshot;
        v677 = *((_QWORD *)p_includeSnapshot + 1);
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v678 = *((_QWORD *)p_includeSnapshot + 3);
        if (v678)
        {
          if (v677)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v678 + 16))(v678, v676);
        }
      }
      v19 = v18 & 0xFFFFFFFFFFLL;
      v20 = v18 & 0xFFFFFF00 | 0x100000000;
      if (!BYTE4(v18))
        v20 = 0;
      if (v19 <= 0x100000000)
        LOBYTE(v19) = 0;
      if (HIDWORD(v20))
        WebKit::WebPageProxy::didChangeScrollOffsetPinningForMainFrame(v13, v20 & 0xFFFFFF00 | v19);
      goto LABEL_1678;
    case 0x74E:
      v28 = IPC::Decoder::decode<std::tuple<BOOL,BOOL>>((uint64_t *)p_includeSnapshot);
      if ((v28 & 0xFFFFFF) >= 0x10000)
      {
        *(_BYTE *)(v13 + 848) = v28 != 0;
        *(_BYTE *)(v13 + 849) = (v28 & 0xFF00) != 0;
      }
      goto LABEL_1678;
    case 0x74F:
      IPC::ArgumentCoder<WebCore::ViewportAttributes,void>::decode((unint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (*(&v1327.isContentEditable + 4))
      {
        *(InteractionInformationRequest *)v1368 = v1327.request;
        *(_OWORD *)&v1368[16] = *(_OWORD *)&v1327.canBeValid;
        *(_DWORD *)&v1368[32] = *(_DWORD *)&v1327.isContentEditable;
        v1368[36] = 1;
        v59 = *(_QWORD *)(v13 + 40);
        if (v59)
          v60 = *(_QWORD *)(v59 + 8);
        else
          v60 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1584))(v60);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v60 + 328))(v60, v1368);
LABEL_618:
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1592))(v60);
        goto LABEL_1678;
      }
      v679 = *(_QWORD *)p_includeSnapshot;
      v675 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v672 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v672)
      {
        v675 = 0;
LABEL_1369:
        v670 = 0;
        goto LABEL_1370;
      }
      if (!v675)
        goto LABEL_1369;
LABEL_2170:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v672 + 16))(v672, v679);
      v670 = *(_QWORD *)p_includeSnapshot;
      v675 = *((_QWORD *)p_includeSnapshot + 1);
      v672 = *((_QWORD *)p_includeSnapshot + 3);
LABEL_1370:
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      if (!v672)
        goto LABEL_1678;
      goto LABEL_1557;
    case 0x750:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>>((uint64_t *)p_includeSnapshot, &v1327);
      if (BYTE8(v1335))
      {
        WebKit::WebPageProxy::didCommitLoadForFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (uint64_t)&v1327.canBeValid, (WebCore::ResourceRequestBase *)&v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, v1332, (const WTF::String *)&v1333, SWORD4(v1333), (const void **)&v1334, SWORD4(v1334), SBYTE10(v1334), BYTE11(v1334), BYTE12(v1334), (CFTypeRef **)&v1335);
        if (BYTE8(v1335))
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>::~__tuple_impl((uint64_t)&v1327, v65);
      }
      goto LABEL_1678;
    case 0x751:
      WebKit::WebPageProxy::didCompleteSyntheticClick((WebKit::WebPageProxy *)v13);
      goto LABEL_1678;
    case 0x753:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (v1327.canBeValid)
        WebKit::WebPageProxy::didCreateMainFrame(v13, (IPC::Connection *)v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot);
      goto LABEL_1678;
    case 0x755:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>((uint64_t *)p_includeSnapshot, &v1327);
      if (!LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier))
        goto LABEL_1678;
      WebKit::WebPageProxy::didCreateSubframe(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid, *(uint64_t *)&v1327.isLink, (WTF::StringImpl *)&v1327.isContentEditable);
      if (!LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier))
        goto LABEL_1678;
      goto LABEL_937;
    case 0x756:
      v304 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)p_includeSnapshot);
      if (v305)
        WebKit::WebPageProxy::didDestroyNavigation((WebKit::WebPageProxy *)v13, v304);
      goto LABEL_1678;
    case 0x758:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::UserData>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
      if (!v1327.isLink)
        goto LABEL_1678;
      WebKit::WebPageProxy::didDisplayInsecureContentForFrame((_QWORD *)v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (CFTypeRef **)&v1327.canBeValid);
      goto LABEL_287;
    case 0x759:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (!v1321[16])
        goto LABEL_1401;
      IPC::Decoder::decode<WTF::URL>((uint64_t *)p_includeSnapshot, v1368);
      if (!v1368[40])
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x) = 0;
        goto LABEL_1402;
      }
      IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1312);
      v311 = LOBYTE(v1312[1]);
      if (LOBYTE(v1312[1]))
      {
        if (!v1321[16] || !v1368[40])
          goto LABEL_2630;
        v1327.request = *(InteractionInformationRequest *)v1321;
        v312 = *(_QWORD *)v1368;
        *(_QWORD *)v1368 = 0;
        *(_OWORD *)&v1327.isLink = *(_OWORD *)&v1368[8];
        v1327.containerScrollingNodeID = *(Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>::MarkableTraits> *)&v1368[24];
        *(_DWORD *)&v1368[8] &= ~1u;
        *(_QWORD *)&v1327.canBeValid = v312;
        *(WTF::StringImpl **)&v1327.isDataDetectorLink = v1312[0];
        LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x) = 1;
      }
      else
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x) = 0;
        if (!v1368[40])
          goto LABEL_1402;
      }
      v421 = *(WTF::StringImpl **)v1368;
      *(_QWORD *)v1368 = 0;
      if (v421)
      {
        if (*(_DWORD *)v421 == 2)
          WTF::StringImpl::destroy(v421, v33);
        else
          *(_DWORD *)v421 -= 2;
      }
      if (!v311)
        goto LABEL_1402;
      WebKit::WebPageProxy::didExplicitOpenForFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (WTF::StringImpl *)&v1327.canBeValid, (WTF::StringImpl *)&v1327.isDataDetectorLink);
      if (!LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x))
        goto LABEL_1678;
      v434 = *(WTF::StringImpl **)&v1327.isDataDetectorLink;
      *(_QWORD *)&v1327.isDataDetectorLink = 0;
      if (v434)
      {
        if (*(_DWORD *)v434 == 2)
          WTF::StringImpl::destroy(v434, v54);
        else
          *(_DWORD *)v434 -= 2;
      }
      v58 = *(WTF::StringImpl **)&v1327.canBeValid;
      *(_QWORD *)&v1327.canBeValid = 0;
      if (!v58)
        goto LABEL_1678;
      goto LABEL_966;
    case 0x75A:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1300);
      if (!v1301)
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        v1342 = 0;
        goto LABEL_1449;
      }
      IPC::Decoder::decode<WebKit::FrameInfoData>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!LOBYTE(v1380.m_location.m_x))
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        v1342 = 0;
        goto LABEL_1625;
      }
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (!v1326)
        goto LABEL_1623;
      v319 = *((_QWORD *)p_includeSnapshot + 1);
      v320 = *(_QWORD *)p_includeSnapshot;
      v321 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
      if (v319 < v321 || v319 - v321 <= 7)
      {
        v831 = 0;
        v832 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v833 = *((_QWORD *)p_includeSnapshot + 3);
        if (v833)
        {
          if (v319)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v833 + 16))(v833);
            v832 = *(_QWORD *)p_includeSnapshot;
            v831 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v831 = 0;
            v832 = 0;
          }
        }
      }
      else
      {
        v322 = (uint64_t *)(v320 + v321);
        *((_QWORD *)p_includeSnapshot + 2) = v322 + 1;
        if (v320)
        {
          v323 = *v322;
          IPC::Decoder::decode<WebCore::ResourceError>((uint64_t *)p_includeSnapshot, (uint64_t)v1312);
          if (v1320 && (IPC::Decoder::decode<WebKit::UserData>((uint64_t *)p_includeSnapshot, (uint64_t)&v1310), v1311))
          {
            if (!v1301 || !LOBYTE(v1380.m_location.m_x) || !v1326 || !v1320)
              goto LABEL_2630;
            v1327.request = *(InteractionInformationRequest *)v1300;
            std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v1327.canBeValid, (uint64_t)v1368);
            std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, (uint64_t)v1321);
            v1332 = v323;
            v324 = *(_OWORD *)v1312;
            v1312[0] = 0;
            v1312[1] = 0;
            v1333 = v324;
            v1334 = v1313;
            v1335 = v1314;
            LODWORD(v1313) = v1313 & 0xFFFFFFFE;
            v1336 = v1315;
            v1337 = v1316;
            v1338 = v1317;
            v325 = v1318;
            v1315 = 0;
            v1318 = 0;
            v1339 = v325;
            v1340 = v1319;
            v326 = (CFTypeRef *)v1310;
            if (v1310)
              CFRetain(*((CFTypeRef *)v1310 + 1));
            v1341 = v326;
            v1342 = 1;
            if (v1311)
            {
              v327 = v1310;
              v1310 = 0;
              if (v327)
                CFRelease(*((CFTypeRef *)v327 + 1));
            }
          }
          else
          {
            LOBYTE(v1327.request.point.m_x) = 0;
            v1342 = 0;
          }
          std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1312, v33);
          goto LABEL_1624;
        }
        v831 = v319;
        v832 = 0;
      }
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v834 = *((_QWORD *)p_includeSnapshot + 3);
      if (v834 && v831)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v834 + 16))(v834, v832);
LABEL_1623:
      LOBYTE(v1327.request.point.m_x) = 0;
      v1342 = 0;
LABEL_1624:
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v1321);
LABEL_1625:
      std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v318);
      if (v1342)
        goto LABEL_1626;
LABEL_1449:
      v732 = *(_QWORD *)p_includeSnapshot;
      v733 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v734 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v734)
        goto LABEL_1678;
      if (!v733)
        goto LABEL_1678;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v734 + 16))(v734, v732);
      if (!v1342)
        goto LABEL_1678;
LABEL_1626:
      WebKit::WebPageProxy::didFailLoadForFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, &v1327.canBeValid, (WebCore::ResourceRequestBase *)&v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, v1332, (const WebCore::ResourceError *)&v1333, &v1341);
      if (!v1342)
        goto LABEL_1678;
      v836 = v1341;
      v1341 = 0;
      if (v836)
        CFRelease(v836[1]);
      v837 = v1339;
      v1339 = 0;
      if (v837)
        CFRelease(v837);
      v838 = v1336;
      v1336 = 0;
      if (v838)
      {
        if (*(_DWORD *)v838 == 2)
          WTF::StringImpl::destroy(v838, v835);
        else
          *(_DWORD *)v838 -= 2;
      }
      v839 = (WTF::StringImpl *)*((_QWORD *)&v1333 + 1);
      *((_QWORD *)&v1333 + 1) = 0;
      if (v839)
      {
        if (*(_DWORD *)v839 == 2)
          WTF::StringImpl::destroy(v839, v835);
        else
          *(_DWORD *)v839 -= 2;
      }
      v840 = (WTF::StringImpl *)v1333;
      *(_QWORD *)&v1333 = 0;
      if (v840)
      {
        if (*(_DWORD *)v840 == 2)
          WTF::StringImpl::destroy(v840, v835);
        else
          *(_DWORD *)v840 -= 2;
      }
      goto LABEL_1651;
    case 0x75B:
      IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1343)
      {
        WebKit::WebPageProxy::didFailProvisionalLoadForFrame(v13, v12, (uint64_t)&v1327, (WebCore::ResourceRequestBase *)&v1327.linkIndicator.textBoundingRectInRootViewCoordinates, v1330, (WTF::StringImpl **)&v1331, (const WebCore::ResourceError *)&v1332, v1340, &v1341, v1342);
        if (v1343)
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>::~__tuple_impl((uint64_t)&v1327, v337);
      }
      goto LABEL_1678;
    case 0x75E:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!v1368[16])
        goto LABEL_1354;
      v38 = *((_QWORD *)p_includeSnapshot + 1);
      v39 = *(_QWORD *)p_includeSnapshot;
      v181 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
      if (v38 < v181 || v38 - v181 <= 7)
        goto LABEL_1352;
      v183 = (uint64_t *)(v39 + v181);
      *((_QWORD *)p_includeSnapshot + 2) = v183 + 1;
      if (!v39)
        goto LABEL_2671;
      v184 = *v183;
      IPC::Decoder::decode<WebKit::UserData>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (!v1321[8])
        goto LABEL_1354;
      if (!v1368[16])
        goto LABEL_2630;
      v185 = *(_QWORD *)v1321;
      v1327.request = *(InteractionInformationRequest *)v1368;
      *(_QWORD *)&v1327.canBeValid = v184;
      if (*(_QWORD *)v1321)
      {
        CFRetain(*(CFTypeRef *)(*(_QWORD *)v1321 + 8));
        *(_QWORD *)&v1327.isLink = v185;
        v1327.isContentEditable = 1;
        if (v1321[8])
        {
          v186 = *(_QWORD *)v1321;
          *(_QWORD *)v1321 = 0;
          if (v186)
            CFRelease(*(CFTypeRef *)(v186 + 8));
        }
      }
      else
      {
        *(_QWORD *)&v1327.isLink = 0;
        v1327.isContentEditable = 1;
      }
      WebKit::WebPageProxy::didFinishDocumentLoadForFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, v184, (CFTypeRef **)&v1327.isLink);
      if (v1327.isContentEditable)
      {
        v55 = *(_QWORD *)&v1327.isLink;
        *(_QWORD *)&v1327.isLink = 0;
        if (v55)
LABEL_289:
          CFRelease(*(CFTypeRef *)(v55 + 8));
      }
      goto LABEL_1678;
    case 0x75F:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1312);
      if (!(_BYTE)v1313)
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        BYTE8(v1333) = 0;
        goto LABEL_1454;
      }
      IPC::Decoder::decode<WebKit::FrameInfoData>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!LOBYTE(v1380.m_location.m_x))
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        BYTE8(v1333) = 0;
        goto LABEL_1647;
      }
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (!v1326)
        goto LABEL_1645;
      v330 = *((_QWORD *)p_includeSnapshot + 1);
      v331 = *(_QWORD *)p_includeSnapshot;
      v332 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
      if (v330 < v332 || v330 - v332 <= 7)
      {
        v841 = 0;
        v842 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v843 = *((_QWORD *)p_includeSnapshot + 3);
        if (v843)
        {
          if (v330)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v843 + 16))(v843);
            v842 = *(_QWORD *)p_includeSnapshot;
            v841 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v841 = 0;
            v842 = 0;
          }
        }
      }
      else
      {
        v333 = (uint64_t *)(v331 + v332);
        *((_QWORD *)p_includeSnapshot + 2) = v333 + 1;
        if (v331)
        {
          v334 = *v333;
          IPC::Decoder::decode<WebKit::UserData>((uint64_t *)p_includeSnapshot, (uint64_t)v1300);
          if (LOBYTE(v1300[1]))
          {
            if (!(_BYTE)v1313 || !LOBYTE(v1380.m_location.m_x) || !v1326)
              goto LABEL_2630;
            v1327.request = *(InteractionInformationRequest *)v1312;
            std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v1327.canBeValid, (uint64_t)v1368);
            std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, (uint64_t)v1321);
            v1332 = v334;
            v335 = v1300[0];
            if (v1300[0])
              CFRetain(*((CFTypeRef *)v1300[0] + 1));
            *(_QWORD *)&v1333 = v335;
            BYTE8(v1333) = 1;
            if (LOBYTE(v1300[1]))
            {
              v336 = v1300[0];
              v1300[0] = 0;
              if (v336)
                CFRelease(*((CFTypeRef *)v336 + 1));
            }
LABEL_1646:
            std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v1321);
LABEL_1647:
            std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v329);
            if (BYTE8(v1333))
              goto LABEL_1648;
LABEL_1454:
            v735 = *(_QWORD *)p_includeSnapshot;
            v736 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v737 = *((_QWORD *)p_includeSnapshot + 3);
            if (!v737)
              goto LABEL_1678;
            if (!v736)
              goto LABEL_1678;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v737 + 16))(v737, v735);
            if (!BYTE8(v1333))
              goto LABEL_1678;
LABEL_1648:
            WebKit::WebPageProxy::didFinishLoadForFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, &v1327.canBeValid, (uint64_t)&v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, v1332, (CFTypeRef **)&v1333);
            if (!BYTE8(v1333))
              goto LABEL_1678;
            v845 = v1333;
            *(_QWORD *)&v1333 = 0;
            if (v845)
              CFRelease(*(CFTypeRef *)(v845 + 8));
LABEL_1651:
            v846 = v1331;
            v1331 = 0;
            if (v846)
              CFRelease(v846);
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates);
LABEL_1654:
            m_hotSpot = (WTF::StringImpl *)v1327.cursor.var0.__val_.m_hotSpot;
            v1327.cursor.var0.__val_.m_hotSpot = 0;
            if (m_hotSpot)
            {
              if (*(_DWORD *)m_hotSpot == 2)
                WTF::StringImpl::destroy(m_hotSpot, v769);
              else
                *(_DWORD *)m_hotSpot -= 2;
            }
            if (LODWORD(v1327.cursor.var0.__val_.m_image.m_ptr) != -1)
              ((void (*)(_BYTE *, float *))off_1E34FBEB0[LODWORD(v1327.cursor.var0.__val_.m_image.m_ptr)])(v1368, &v1327.lineCaretExtent.m_location.m_y);
            LODWORD(v1327.cursor.var0.__val_.m_image.m_ptr) = -1;
            v848 = *(const void **)&v1327.caretLength;
            *(_QWORD *)&v1327.caretLength = 0;
            if (v848)
              CFRelease(v848);
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v1327.isLink);
            goto LABEL_1678;
          }
LABEL_1645:
          LOBYTE(v1327.request.point.m_x) = 0;
          BYTE8(v1333) = 0;
          goto LABEL_1646;
        }
        v841 = v330;
        v842 = 0;
      }
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v844 = *((_QWORD *)p_includeSnapshot + 3);
      if (v844 && v841)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v844 + 16))(v844, v842);
      goto LABEL_1645;
    case 0x761:
      IPC::Decoder::decode<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)p_includeSnapshot, &v1327);
      if (!v1327.isLink)
        goto LABEL_1678;
      WebKit::WebPageProxy::didFinishLoadingDataForCustomContentProvider(v13, (WebCore::ResourceResponseBase *)&v1327, *(uint64_t *)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid);
      if (!v1327.isLink)
        goto LABEL_1678;
      goto LABEL_965;
    case 0x762:
      WebKit::WebPageProxy::didFinishProgress((WebKit::WebPageProxy *)v13);
      goto LABEL_1678;
    case 0x763:
      v187 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
      if (v187 >= 0x100u)
      {
        v188 = *(_QWORD *)(v13 + 32);
        v189 = *(_QWORD *)(v188 + 2136);
        if (v189)
        {
          *(_QWORD *)(v188 + 2136) = 0;
          (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v189 + 16))(v189, v187 != 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
        }
      }
      goto LABEL_1678;
    case 0x764:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::UserData>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
      if (!v1327.isLink)
        goto LABEL_1678;
      v55 = *(_QWORD *)&v1327.canBeValid;
      if (!*(_QWORD *)&v1327.canBeValid)
        goto LABEL_1678;
      goto LABEL_289;
    case 0x765:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::UserData>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
      if (!v1327.isLink)
        goto LABEL_1678;
      WebKit::WebPageProxy::didFirstVisuallyNonEmptyLayoutForFrame((_QWORD *)v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (CFTypeRef **)&v1327.canBeValid);
      goto LABEL_287;
    case 0x766:
      IPC::Decoder::decode<WebCore::ImageBufferParameters>((unint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (!v1321[32])
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        LOBYTE(v1327.url.m_pathEnd) = 0;
        goto LABEL_1584;
      }
      IPC::Decoder::decode<WebCore::ShareableBitmapHandle>((IPC::Decoder *)p_includeSnapshot, v1368);
      v31 = v1369[0];
      if (!v1369[0])
        goto LABEL_1580;
      v32 = *((_QWORD *)p_includeSnapshot + 1);
      v33 = *(WTF::StringImpl **)p_includeSnapshot;
      v34 = ((*((_QWORD *)p_includeSnapshot + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)p_includeSnapshot;
      if (v32 < v34 || v32 - v34 <= 3)
      {
        v799 = 0;
        v800 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v801 = *((_QWORD *)p_includeSnapshot + 3);
        if (v801)
        {
          if (v32)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v801 + 16))(v801);
            v800 = *(_QWORD *)p_includeSnapshot;
            v799 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v799 = 0;
            v800 = 0;
          }
        }
      }
      else
      {
        v35 = (unsigned int *)((char *)v33 + v34);
        *((_QWORD *)p_includeSnapshot + 2) = v35 + 1;
        if (v33)
        {
          if (!v1321[32])
            goto LABEL_2630;
          v36 = *v35;
          v1327.request.point = *(IntPoint *)v1321;
          *(_DWORD *)&v1327.request.includeSnapshot = *(_DWORD *)&v1321[8];
          v37 = *(_QWORD *)&v1321[16];
          *(_QWORD *)&v1321[16] = 0;
          *(_QWORD *)&v1327.canBeValid = v37;
          *(_WORD *)&v1327.isLink = *(_WORD *)&v1321[24];
          WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v1327.isContentEditable, (uint64_t)v1368);
          v1327.url.m_hostEnd = v36;
          v31 = 1;
          goto LABEL_1581;
        }
        v799 = v32;
        v800 = 0;
      }
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v802 = *((_QWORD *)p_includeSnapshot + 3);
      if (v802 && v799)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v802 + 16))(v802, v800);
      v31 = 0;
LABEL_1580:
      LOBYTE(v1327.request.point.m_x) = 0;
LABEL_1581:
      LOBYTE(v1327.url.m_pathEnd) = v31;
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v1368);
      if (v1321[32])
      {
        v803 = *(const void **)&v1321[16];
        *(_QWORD *)&v1321[16] = 0;
        if (v803)
          CFRelease(v803);
      }
LABEL_1584:
      if (LOBYTE(v1327.url.m_pathEnd)
        || (v805 = *(_QWORD *)p_includeSnapshot,
            v806 = *((_QWORD *)p_includeSnapshot + 1),
            *(_QWORD *)p_includeSnapshot = 0,
            *((_QWORD *)p_includeSnapshot + 1) = 0,
            (v807 = *((_QWORD *)p_includeSnapshot + 3)) != 0)
        && v806
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v807 + 16))(v807, v805), LOBYTE(v1327.url.m_pathEnd)))
      {
        WebKit::WebPageProxy::didGetImageForFindMatch(v13, (uint64_t)&v1327, (uint64_t)&v1327.isContentEditable);
        if (LOBYTE(v1327.url.m_pathEnd))
        {
          if (LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x))
          {
            v804 = *(const void **)&v1327.isDataDetectorLink;
            *(_QWORD *)&v1327.isDataDetectorLink = 0;
            if (v804)
              CFRelease(v804);
          }
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1327.isContentEditable);
          point = *(const void **)&v1327.canBeValid;
          *(_QWORD *)&v1327.canBeValid = 0;
          if (point)
            goto LABEL_1590;
        }
      }
      goto LABEL_1678;
    case 0x76A:
      WebKit::WebPageProxy::didHandleTapAsHover((WebKit::WebPageProxy *)v13);
      goto LABEL_1678;
    case 0x76C:
      IPC::Decoder::decode<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1329[0])
        WebKit::WebPageProxy::didNavigateWithNavigationData(v13, (uint64_t)&v1327, *(uint64_t *)&v1327.__engaged_, v1328);
      std::__optional_destruct_base<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v328);
      goto LABEL_1678;
    case 0x76D:
      v1327.request.point = (IntPoint)IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)p_includeSnapshot);
      *(_DWORD *)&v1327.request.includeSnapshot = v57;
      if ((_BYTE)v57)
        WebKit::WebPageProxy::didNotHandleTapAsClick((WebKit::WebPageProxy *)v13, &v1327.request.point);
      goto LABEL_1678;
    case 0x76E:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.isContentEditable)
        WebKit::WebPageProxy::didPerformClientRedirect(v13, (WTF::StringImpl **)&v1327, (WTF::StringImpl **)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid, *(uint64_t *)&v1327.isLink);
      goto LABEL_491;
    case 0x770:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.isContentEditable)
        WebKit::WebPageProxy::didPerformServerRedirect(v13, (WTF::StringImpl **)&v1327, (WTF::StringImpl **)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid, *(uint64_t *)&v1327.isLink);
      goto LABEL_491;
    case 0x771:
      v235 = IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebCore::LayoutMilestone>>>((uint64_t *)p_includeSnapshot);
      if ((v235 & 0xFF0000) != 0)
        WebKit::WebPageProxy::didReachLayoutMilestone(v13, v235);
      goto LABEL_1678;
    case 0x773:
      v21 = IPC::Decoder::decode<WebCore::FilterOperation::Type>((uint64_t *)p_includeSnapshot);
      if (v21 < 0x100u)
        goto LABEL_1556;
      v22 = *((_QWORD *)p_includeSnapshot + 1);
      v23 = *(_QWORD *)p_includeSnapshot;
      v24 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
      if (v22 <= v24)
      {
        v789 = 0;
        v790 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v791 = *((_QWORD *)p_includeSnapshot + 3);
        if (v791)
        {
          if (v22)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v791 + 16))(v791);
            v790 = *(_QWORD *)p_includeSnapshot;
            v789 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v789 = 0;
            v790 = 0;
          }
        }
      }
      else
      {
        v25 = (unsigned __int8 *)(v23 + v24);
        *((_QWORD *)p_includeSnapshot + 2) = v25 + 1;
        if (v23)
        {
          v26 = *v25;
          if (v26 < 2)
          {
            v27 = v21;
            IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
            if (!v1327.isContentEditable)
              goto LABEL_1556;
            *(InteractionInformationRequest *)&v1368[6] = v1327.request;
            *(_OWORD *)&v1368[22] = *(_OWORD *)&v1327.canBeValid;
            WebKit::WebPageProxy::didReceiveEvent(v13, v27, v26 != 0, (uint64_t)&v1327);
            goto LABEL_1678;
          }
LABEL_1555:
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v793 = *((_QWORD *)p_includeSnapshot + 3);
          if (v793 && v22)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v793 + 16))(v793, v23);
          goto LABEL_1556;
        }
        v789 = v22;
        v790 = 0;
      }
      v22 = 0;
      v23 = 0;
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v792 = *((_QWORD *)p_includeSnapshot + 3);
      if (v792)
      {
        if (v789)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v792 + 16))(v792, v790, v789);
          v23 = *(_QWORD *)p_includeSnapshot;
          v22 = *((_QWORD *)p_includeSnapshot + 1);
        }
        else
        {
          v22 = 0;
          v23 = 0;
        }
      }
      goto LABEL_1555;
    case 0x774:
      IPC::Decoder::decode<std::tuple<WebKit::InteractionInformationAtPosition>>(&v1327, (unint64_t *)p_includeSnapshot);
      if (v1344)
      {
        WebKit::WebPageProxy::didReceivePositionInformation((WebKit::WebPageProxy *)v13, &v1327);
        if (v1344)
          goto LABEL_29;
      }
      goto LABEL_1678;
    case 0x775:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>>((uint64_t *)p_includeSnapshot, &v1327);
      if (LOBYTE(v1327.lineCaretExtent.m_size.m_height))
        WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrame((WebKit::WebPageProxy *)v13, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, *(CFTypeRef **)&v1327.canBeValid, (WebCore::ResourceRequestBase *)&v1327.isLink, (CFTypeRef **)&v1327.lineCaretExtent.m_location.m_y);
      std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327);
      goto LABEL_1678;
    case 0x776:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (v1368[16] && (IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1312), LOBYTE(v1312[1])))
      {
        IPC::Decoder::decode<WebKit::UserData>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
        LODWORD(v4) = v1321[8];
        if (v1321[8])
        {
          if (!v1368[16] || !LOBYTE(v1312[1]))
            goto LABEL_2630;
          v1327.request = *(InteractionInformationRequest *)v1368;
          v108 = v1312[0];
          v1312[0] = 0;
          *(_QWORD *)&v1327.canBeValid = v108;
          v109 = *(_QWORD *)v1321;
          if (*(_QWORD *)v1321)
          {
            CFRetain(*(CFTypeRef *)(*(_QWORD *)v1321 + 8));
            *(_QWORD *)&v1327.isLink = v109;
            v110 = 1;
            v1327.isContentEditable = 1;
            if (v1321[8])
            {
              v111 = *(_QWORD *)v1321;
              *(_QWORD *)v1321 = 0;
              if (v111)
                CFRelease(*(CFTypeRef *)(v111 + 8));
            }
          }
          else
          {
            *(_QWORD *)&v1327.isLink = 0;
            v110 = 1;
            v1327.isContentEditable = 1;
          }
        }
        else
        {
          v110 = 0;
          LOBYTE(v1327.request.point.m_x) = 0;
          v1327.isContentEditable = 0;
        }
        if (LOBYTE(v1312[1]))
        {
          v420 = v1312[0];
          v1312[0] = 0;
          if (v420)
          {
            if (*(_DWORD *)v420 == 2)
              WTF::StringImpl::destroy(v420, v33);
            else
              *(_DWORD *)v420 -= 2;
          }
        }
        if ((_DWORD)v4)
        {
LABEL_923:
          if (!v110)
            goto LABEL_1678;
          WebKit::WebPageProxy::didReceiveTitleForFrame((const char *)v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (WTF::StringImpl *)&v1327.canBeValid);
          if (!v1327.isContentEditable)
            goto LABEL_1678;
          v480 = *(_QWORD *)&v1327.isLink;
          *(_QWORD *)&v1327.isLink = 0;
          if (v480)
            CFRelease(*(CFTypeRef *)(v480 + 8));
LABEL_927:
          v58 = *(WTF::StringImpl **)&v1327.canBeValid;
          *(_QWORD *)&v1327.canBeValid = 0;
          if (!v58)
            goto LABEL_1678;
          goto LABEL_966;
        }
      }
      else
      {
        v110 = 0;
        LOBYTE(v1327.request.point.m_x) = 0;
        v1327.isContentEditable = 0;
      }
      v341 = *(_QWORD *)p_includeSnapshot;
      v342 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v343 = *((_QWORD *)p_includeSnapshot + 3);
      if (v343 && v342)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v343 + 16))(v343, v341);
      goto LABEL_923;
    case 0x77A:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::UserData>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
      if (!v1327.isLink)
        goto LABEL_1678;
      WebKit::WebPageProxy::didRunInsecureContentForFrame((_QWORD *)v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (CFTypeRef **)&v1327.canBeValid);
LABEL_287:
      if (v1327.isLink)
      {
        v55 = *(_QWORD *)&v1327.canBeValid;
        *(_QWORD *)&v1327.canBeValid = 0;
        if (v55)
          goto LABEL_289;
      }
      goto LABEL_1678;
    case 0x77B:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (!v1321[16])
        goto LABEL_1354;
      v38 = *((_QWORD *)p_includeSnapshot + 1);
      v39 = *(_QWORD *)p_includeSnapshot;
      v40 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
      if (v38 >= v40 && v38 - v40 > 7)
      {
        v42 = (uint64_t *)(v39 + v40);
        *((_QWORD *)p_includeSnapshot + 2) = v42 + 1;
        if (v39)
        {
          v43 = *v42;
          v44 = IPC::Decoder::decode<WebKit::VideoCodecType>(p_includeSnapshot);
          if (v44 >= 0x100u)
          {
            LOBYTE(v4) = v44;
            IPC::Decoder::decode<WTF::URL>((uint64_t *)p_includeSnapshot, v1368);
            if (v1368[40])
            {
              IPC::Decoder::decode<WebKit::UserData>((uint64_t *)p_includeSnapshot, (uint64_t)v1312);
              v45 = LOBYTE(v1312[1]);
              if (LOBYTE(v1312[1]))
              {
                if (!v1321[16] || !v1368[40])
                  goto LABEL_2630;
                v1327.request = *(InteractionInformationRequest *)v1321;
                *(_QWORD *)&v1327.canBeValid = v43;
                v1327.isLink = (char)v4;
                v46 = *(_QWORD *)v1368;
                *(_QWORD *)v1368 = 0;
                *(_QWORD *)&v1327.isContentEditable = v46;
                v1327.containerScrollingNodeID = *(Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>::MarkableTraits> *)&v1368[8];
                *(_OWORD *)&v1327.isDataDetectorLink = *(_OWORD *)&v1368[24];
                *(_DWORD *)&v1368[8] &= ~1u;
                v47 = (StringImpl *)v1312[0];
                if (v1312[0])
                {
                  CFRetain(*((CFTypeRef *)v1312[0] + 1));
                  v1327.url.m_string.m_impl.m_ptr = v47;
                  *((_BYTE *)&v1327.url + 8) = 1;
                  if (LOBYTE(v1312[1]))
                  {
                    v48 = v1312[0];
                    v1312[0] = 0;
                    if (v48)
                      CFRelease(*((CFTypeRef *)v48 + 1));
                  }
                }
                else
                {
                  v1327.url.m_string.m_impl.m_ptr = 0;
                  *((_BYTE *)&v1327.url + 8) = 1;
                }
              }
              else
              {
                LOBYTE(v1327.request.point.m_x) = 0;
                *((_BYTE *)&v1327.url + 8) = 0;
              }
              if (v1368[40])
              {
                v433 = *(WTF::StringImpl **)v1368;
                *(_QWORD *)v1368 = 0;
                if (v433)
                {
                  if (*(_DWORD *)v433 == 2)
                    WTF::StringImpl::destroy(v433, v33);
                  else
                    *(_DWORD *)v433 -= 2;
                }
              }
              if (v45)
              {
                WebKit::WebPageProxy::didSameDocumentNavigationForFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, v43, v4, (const WTF::URL *)&v1327.isContentEditable, (CFTypeRef **)&v1327.url);
                if (*((_BYTE *)&v1327.url + 8))
                {
                  m_ptr = v1327.url.m_string.m_impl.m_ptr;
                  v1327.url.m_string.m_impl.m_ptr = 0;
                  if (m_ptr)
                    CFRelease(*((CFTypeRef *)m_ptr + 1));
LABEL_937:
                  v58 = *(WTF::StringImpl **)&v1327.isContentEditable;
                  *(_QWORD *)&v1327.isContentEditable = 0;
                  if (v58)
                    goto LABEL_966;
                }
                goto LABEL_1678;
              }
            }
          }
LABEL_1354:
          v670 = *(_QWORD *)p_includeSnapshot;
          v671 = *((_QWORD *)p_includeSnapshot + 1);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v672 = *((_QWORD *)p_includeSnapshot + 3);
          if (!v672)
            goto LABEL_1678;
          goto LABEL_1355;
        }
LABEL_2671:
        v666 = v38;
        v667 = v39;
      }
      else
      {
LABEL_1352:
        v666 = 0;
        v667 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v668 = *((_QWORD *)p_includeSnapshot + 3);
        if (v668)
        {
          if (v38)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v668 + 16))(v668, v39, v38);
            v667 = *(_QWORD *)p_includeSnapshot;
            v666 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v666 = 0;
            v667 = 0;
          }
        }
      }
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v669 = *((_QWORD *)p_includeSnapshot + 3);
      if (v669 && v666)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v669 + 16))(v669, v667);
      goto LABEL_1354;
    case 0x77C:
      v306 = IPC::Decoder::decode<WebKit::VideoCodecType>(p_includeSnapshot);
      if (v306 <= 0xFFu)
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        v1367 = 0;
      }
      else
      {
        v307 = v306;
        IPC::Decoder::decode<WTF::URL>((uint64_t *)p_includeSnapshot, v1321);
        if ((_BYTE)v1322)
        {
          IPC::Decoder::decode<WebKit::NavigationActionData>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
          if (v1419)
          {
            IPC::Decoder::decode<WebKit::UserData>((uint64_t *)p_includeSnapshot, (uint64_t)v1312);
            if (LOBYTE(v1312[1]))
            {
              if (!(_BYTE)v1322 || !v1419)
                goto LABEL_2630;
              LOBYTE(v1327.request.point.m_x) = v307;
              v308 = *(_QWORD *)v1321;
              *(_QWORD *)v1321 = 0;
              *(_QWORD *)&v1327.request.includeSnapshot = v308;
              *(_OWORD *)&v1327.canBeValid = *(_OWORD *)&v1321[8];
              *(_OWORD *)&v1327.isContentEditable = *(_OWORD *)&v1321[24];
              *(_DWORD *)&v1321[8] &= ~1u;
              WebKit::NavigationActionData::NavigationActionData((uint64_t)&v1327.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t)v1368);
              v309 = (CFTypeRef *)v1312[0];
              if (v1312[0])
                CFRetain(*((CFTypeRef *)v1312[0] + 1));
              v1366 = v309;
              v1367 = 1;
              if (LOBYTE(v1312[1]))
              {
                v310 = v1312[0];
                v1312[0] = 0;
                if (v310)
                  CFRelease(*((CFTypeRef *)v310 + 1));
              }
            }
            else
            {
              LOBYTE(v1327.request.point.m_x) = 0;
              v1367 = 0;
            }
            if (v1419)
              WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v1368);
          }
          else
          {
            LOBYTE(v1327.request.point.m_x) = 0;
            v1367 = 0;
          }
          if ((_BYTE)v1322)
          {
            v422 = *(WTF::StringImpl **)v1321;
            *(_QWORD *)v1321 = 0;
            if (v422)
            {
              if (*(_DWORD *)v422 == 2)
                WTF::StringImpl::destroy(v422, v33);
              else
                *(_DWORD *)v422 -= 2;
            }
          }
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
          v1367 = 0;
        }
        if (v1367)
        {
LABEL_824:
          v429 = *(_QWORD *)&v1327.request.includeSnapshot;
          *(_QWORD *)&v1327.request.includeSnapshot = 0;
          *(_QWORD *)v1368 = v429;
          *(_OWORD *)&v1368[8] = *(_OWORD *)&v1327.canBeValid;
          *(_OWORD *)&v1368[24] = *(_OWORD *)&v1327.isContentEditable;
          *(_DWORD *)&v1327.canBeValid &= ~1u;
          WebKit::WebPageProxy::didSameDocumentNavigationForFrameViaJSHistoryAPI(v13, v12, LOBYTE(v1327.request.point.m_x), (const WTF::URL *)v1368, (uint64_t)&v1327.containerScrollingNodeID.m_value.m_processIdentifier, &v1366);
          v431 = *(WTF::StringImpl **)v1368;
          *(_QWORD *)v1368 = 0;
          if (v431)
          {
            if (*(_DWORD *)v431 == 2)
              WTF::StringImpl::destroy(v431, v430);
            else
              *(_DWORD *)v431 -= 2;
          }
          if (!v1367)
            goto LABEL_1678;
          v432 = v1366;
          v1366 = 0;
          if (v432)
            CFRelease(v432[1]);
          WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v1327.containerScrollingNodeID.m_value.m_processIdentifier);
          v58 = *(WTF::StringImpl **)&v1327.request.includeSnapshot;
          *(_QWORD *)&v1327.request.includeSnapshot = 0;
          if (!v58)
            goto LABEL_1678;
LABEL_966:
          v492 = *(_DWORD *)v58 - 2;
          if (*(_DWORD *)v58 != 2)
          {
LABEL_967:
            *(_DWORD *)v58 = v492;
            goto LABEL_1678;
          }
LABEL_968:
          WTF::StringImpl::destroy(v58, v54);
          goto LABEL_1678;
        }
      }
      v729 = *(_QWORD *)p_includeSnapshot;
      v730 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v731 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v731)
        goto LABEL_1678;
      if (!v730)
        goto LABEL_1678;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v731 + 16))(v731, v729);
      if (!v1367)
        goto LABEL_1678;
      goto LABEL_824;
    case 0x77E:
      WebKit::WebPageProxy::didStartProgress((WebKit::WebPageProxy *)v13);
      goto LABEL_1678;
    case 0x77F:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1342)
      {
        WebKit::WebPageProxy::didStartProvisionalLoadForFrame((WebCore::DiagnosticLoggingKeys *)v13, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, &v1327.canBeValid, (uint64_t)&v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, v1332, (const WTF::URL *)&v1333, (WTF::URL *)((char *)&v1335 + 8), &v1341);
        if (v1342)
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>::~__tuple_impl((uint64_t)&v1327, v190);
      }
      goto LABEL_1678;
    case 0x782:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.isContentEditable)
        WebKit::WebPageProxy::didUpdateHistoryTitle(v13, v12, (uint64_t)&v1327, (WTF::StringImpl **)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid, *(uint64_t *)&v1327.isLink);
LABEL_491:
      std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v76);
      goto LABEL_1678;
    case 0x784:
      v301 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if (v302)
      {
        WebKit::WebPageProxy::disableDoubleTapGesturesDuringTapIfNecessary(v13, v301);
        goto LABEL_1678;
      }
      v723 = *(_QWORD *)p_includeSnapshot;
      v724 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v725 = *((_QWORD *)p_includeSnapshot + 3);
      if (v725)
        goto LABEL_1547;
      goto LABEL_1678;
    case 0x788:
      IPC::Decoder::decode<WebKit::EditorState>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      v300 = v1328;
      if ((_BYTE)v1328)
      {
        std::__tuple_leaf<0ul,WebKit::EditorState,false>::__tuple_leaf[abi:sn180100]<WebKit::EditorState,void>((uint64_t)v1368, (__int128 *)&v1327.request.point);
        v300 = 1;
      }
      else
      {
        v1368[0] = 0;
      }
      LOBYTE(v1399) = v300;
      std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](&v1327, v299);
      if ((_BYTE)v1399
        || (v726 = *(_QWORD *)p_includeSnapshot,
            v727 = *((_QWORD *)p_includeSnapshot + 1),
            *(_QWORD *)p_includeSnapshot = 0,
            *((_QWORD *)p_includeSnapshot + 1) = 0,
            (v728 = *((_QWORD *)p_includeSnapshot + 3)) != 0)
        && v727
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v728 + 16))(v728, v726), (_BYTE)v1399))
      {
        if (WebKit::WebPageProxy::updateEditorState((WebKit::WebPageProxy *)v13, v1368, 1))
          WebKit::WebPageProxy::dispatchDidUpdateEditorState(v13);
        if ((_BYTE)v1399)
        {
          std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1385, v356);
          if ((_BYTE)v1383)
            WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v1368[32], v357);
        }
      }
      goto LABEL_1678;
    case 0x78C:
      WebKit::WebPageProxy::endColorPicker(v13);
      goto LABEL_1678;
    case 0x78D:
      WebKit::WebPageProxy::endDataListSuggestions(v13);
      goto LABEL_1678;
    case 0x78E:
      WebKit::WebPageProxy::endDateTimePicker(v13);
      goto LABEL_1678;
    case 0x78F:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1312);
      if ((_BYTE)v1313)
      {
        IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)p_includeSnapshot, v1321);
        if (v1321[32])
        {
          IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)p_includeSnapshot, v1368);
          if (v1368[32])
          {
            if (!(_BYTE)v1313 || !v1321[32])
              goto LABEL_2630;
            v1327.request = *(InteractionInformationRequest *)v1312;
            v1327.canBeValid = 0;
            LOBYTE(v4) = -1;
            LODWORD(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1327.canBeValid, (uint64_t)v1321);
            LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
            LODWORD(v1327.url.m_string.m_impl.m_ptr) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1327.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t)v1368);
            *((_BYTE *)&v1327.url + 8) = 1;
            if (v1368[32] && *(_DWORD *)&v1368[24] != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34FBEB0[*(unsigned int *)&v1368[24]])(v1300, v1368);
          }
          else
          {
            LOBYTE(v1327.request.point.m_x) = 0;
            *((_BYTE *)&v1327.url + 8) = 0;
          }
          if (v1321[32] && *(_DWORD *)&v1321[24] != -1)
            ((void (*)(_BYTE *, _BYTE *))off_1E34FBEB0[*(unsigned int *)&v1321[24]])(v1368, v1321);
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
          *((_BYTE *)&v1327.url + 8) = 0;
        }
        if (*((_BYTE *)&v1327.url + 8))
        {
LABEL_681:
          v376 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (v377)
          {
            *(_QWORD *)v1368 = v376;
            p_includeSnapshot = &v1368[8];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
            v378 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v378 = off_1E34FC038;
            v378[1] = *(_QWORD *)v1368;
            v379 = *(_QWORD *)&v1368[8];
            *(_QWORD *)&v1368[8] = 0;
            v378[2] = v379;
            *(_QWORD *)v1321 = v378;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
            if (!*((_BYTE *)&v1327.url + 8))
              goto LABEL_2630;
            WebKit::WebPageProxy::enumerateMediaDevicesForFrame((WebKit::WebPageProxy *)v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (WebCore::SecurityOriginData *)&v1327.canBeValid, (WebCore::SecurityOriginData *)&v1327.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t *)v1321);
            v380 = *(_QWORD *)v1321;
            *(_QWORD *)v1321 = 0;
            if (v380)
              (*(void (**)(uint64_t))(*(_QWORD *)v380 + 8))(v380);
          }
          if (*((_BYTE *)&v1327.url + 8))
          {
            if (LODWORD(v1327.url.m_string.m_impl.m_ptr) != -1)
              ((void (*)(_BYTE *, ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long> *))off_1E34FBEB0[LODWORD(v1327.url.m_string.m_impl.m_ptr)])(v1368, &v1327.containerScrollingNodeID.m_value.m_processIdentifier);
            LODWORD(v1327.url.m_string.m_impl.m_ptr) = -1;
            if (LODWORD(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) != -1)
              ((void (*)(_BYTE *, BOOL *))off_1E34FBEB0[LODWORD(v1327.containerScrollingNodeID.m_value.m_object.m_identifier)])(v1368, &v1327.canBeValid);
          }
          goto LABEL_1678;
        }
      }
      else
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        *((_BYTE *)&v1327.url + 8) = 0;
      }
      v683 = *(_QWORD *)p_includeSnapshot;
      v684 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v685 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v685)
        goto LABEL_1678;
      if (!v684)
        goto LABEL_1678;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v685 + 16))(v685, v683);
      if (!*((_BYTE *)&v1327.url + 8))
        goto LABEL_1678;
      goto LABEL_681;
    case 0x791:
      v313 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if (!v314)
        goto LABEL_1678;
      v1327.request.point = (IntPoint)v313;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1327.request.includeSnapshot, (unsigned __int8 **)v12);
      v315 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v315 = off_1E34FBED0;
      *(IntPoint *)(v315 + 8) = v1327.request.point;
      v316 = *(_QWORD *)&v1327.request.includeSnapshot;
      *(_QWORD *)&v1327.request.includeSnapshot = 0;
      *(_QWORD *)(v315 + 16) = v316;
      *(_QWORD *)v1368 = v315;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1327.request.includeSnapshot);
      WebKit::WebPageProxy::focusFromServiceWorker(v13, (uint64_t *)v1368);
      goto LABEL_520;
    case 0x794:
      IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (v1327.isLink)
        WebKit::WebPageProxy::focusedFrameChanged((_QWORD *)v13, v12, (uint64_t *)&v1327.request.point);
      goto LABEL_1678;
    case 0x79B:
      IPC::ArgumentCoder<WebCore::DataDetectorElementInfo,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!v1368[24])
        goto LABEL_1505;
      v62 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)p_includeSnapshot);
      if (!v63)
      {
        v748 = *(_QWORD *)p_includeSnapshot;
        v749 = *((_QWORD *)p_includeSnapshot + 1);
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v750 = *((_QWORD *)p_includeSnapshot + 3);
        if (v750 && v749)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v750 + 16))(v750, v748);
        if (*(_QWORD *)v1368)
          CFRelease(*(CFTypeRef *)v1368);
        goto LABEL_1402;
      }
      *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)&v1368[8];
      v1327.request.point = *(IntPoint *)v1368;
      *(_QWORD *)&v1327.isLink = v62;
      v1327.isContentEditable = 1;
      WebKit::WebPageProxy::handleClickForDataDetectionResult(v13, (uint64_t)&v1327, (uint64_t)&v1327.isLink);
      if (v1327.isContentEditable)
      {
LABEL_424:
        point = (const void *)v1327.request.point;
        v1327.request.point = 0;
        if (point)
LABEL_1590:
          CFRelease(point);
      }
      goto LABEL_1678;
    case 0x79C:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (v1327.request.includeSnapshot)
      {
        WebKit::WebPageProxy::handleKeydownInDataList(v13, (const WTF::String *)&v1327);
        if (v1327.request.includeSnapshot)
          goto LABEL_330;
      }
      goto LABEL_1678;
    case 0x79F:
      v125 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if (!v126)
        goto LABEL_1402;
      v127 = v125;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!v1368[16])
        goto LABEL_1505;
      v130 = *((_QWORD *)p_includeSnapshot + 1);
      v131 = *(_QWORD *)p_includeSnapshot;
      v132 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
      if (v130 <= v132)
      {
        v760 = 0;
        v761 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v770 = *((_QWORD *)p_includeSnapshot + 3);
        if (v770)
        {
          if (v130)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v770 + 16))(v770);
            v761 = *(_QWORD *)p_includeSnapshot;
            v760 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v760 = 0;
            v761 = 0;
          }
        }
      }
      else
      {
        v133 = (unsigned __int8 *)(v131 + v132);
        *((_QWORD *)p_includeSnapshot + 2) = v133 + 1;
        if (v131)
        {
          v134 = *v133;
          if (v134 >= 2)
            goto LABEL_1506;
          v135 = ((unint64_t)(v133 + 8) & 0xFFFFFFFFFFFFFFF8) - v131;
          if (v130 >= v135
            && v130 - v135 > 7
            && ((v136 = (unint64_t *)((unint64_t)(v133 + 8) & 0xFFFFFFFFFFFFFFF8),
                 *((_QWORD *)p_includeSnapshot + 2) = v136 + 1,
                 v128.n128_u64[0] = *v136,
                 v137 = (((unint64_t)v136 + 15) & 0xFFFFFFFFFFFFFFF8) - v131,
                 v130 >= v137)
              ? (v138 = v130 - v137 > 7)
              : (v138 = 0),
                v138))
          {
            v139 = v131 + v137;
            v129.n128_u64[0] = *(_QWORD *)v139;
            *((_QWORD *)p_includeSnapshot + 2) = v139 + 8;
            if (v130 <= v139 + 8 - v131)
            {
              v785 = 0;
              v786 = 0;
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v787 = *((_QWORD *)p_includeSnapshot + 3);
              if (v787)
              {
                (*(void (**)(uint64_t, __n128, double))(*(_QWORD *)v787 + 16))(v787, v128, v129.n128_f64[0]);
                v785 = 0;
                v1102 = *(_QWORD *)p_includeSnapshot;
                v1103 = *((_QWORD *)p_includeSnapshot + 1);
                v1104 = *((_QWORD *)p_includeSnapshot + 3);
                *(_QWORD *)p_includeSnapshot = 0;
                *((_QWORD *)p_includeSnapshot + 1) = 0;
                v786 = 0;
                if (v1104)
                {
                  if (v1103)
                  {
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1104 + 16))(v1104, v1102);
                    v786 = *(_QWORD *)p_includeSnapshot;
                    v785 = *((_QWORD *)p_includeSnapshot + 1);
                  }
                }
              }
            }
            else
            {
              *((_QWORD *)p_includeSnapshot + 2) = v139 + 9;
              v140 = *(unsigned __int8 *)(v139 + 8);
              if (v140 < 2)
              {
                v1327.request.point = (IntPoint)v127;
                *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)v1368;
                v1327.isLink = v134 != 0;
                *(_QWORD *)&v1327.isContentEditable = v128.n128_u64[0];
                v1327.containerScrollingNodeID.m_value.m_object.m_identifier = v129.n128_u64[0];
                LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = v140 != 0;
                v1327.isDataDetectorLink = 1;
                WebKit::WebPageProxy::handleSmartMagnificationInformationForPotentialTap(v13, v127, (uint64_t)&v1327.request.includeSnapshot, v134 != 0, v140 != 0, v128.n128_f64[0], v129.n128_f64[0]);
                goto LABEL_1678;
              }
              v785 = v130;
              v786 = v131;
            }
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v788 = *((_QWORD *)p_includeSnapshot + 3);
            if (v788 && v785)
              (*(void (**)(uint64_t, uint64_t, unint64_t, __n128, __n128))(*(_QWORD *)v788 + 16))(v788, v786, v785, v128, v129);
          }
          else
          {
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v673 = *((_QWORD *)p_includeSnapshot + 3);
            if (v673)
            {
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v673 + 16))(v673, v128);
              v131 = *(_QWORD *)p_includeSnapshot;
              v130 = *((_QWORD *)p_includeSnapshot + 1);
              v674 = *((_QWORD *)p_includeSnapshot + 3);
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              if (v674)
                goto LABEL_1507;
            }
          }
          goto LABEL_1402;
        }
        v760 = v130;
        v761 = 0;
      }
      v130 = 0;
      v131 = 0;
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v763 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v763)
        goto LABEL_1506;
      if (v760)
        goto LABEL_1504;
      goto LABEL_1517;
    case 0x7A3:
      WebKit::WebPageProxy::hidePopupMenu(v13);
      goto LABEL_1678;
    case 0x7A4:
      v197 = *(_DWORD **)(v13 + 816);
      *(_QWORD *)(v13 + 816) = 0;
      if (v197)
        WTF::RefCounted<WebCore::ValidationBubble>::deref(v197);
      goto LABEL_1678;
    case 0x7AA:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.isLink)
        WebKit::WebPageProxy::logDiagnosticMessageFromWebProcess((WTF *)v13, v12, (WTF::String *)&v1327, (uint64_t)&v1327.request.includeSnapshot, v1327.canBeValid);
      goto LABEL_418;
    case 0x7AB:
      IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1368);
      if (!v1368[8])
        goto LABEL_1401;
      v119 = *((_QWORD *)p_includeSnapshot + 1);
      v120 = *(WTF::StringImpl **)p_includeSnapshot;
      v121 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
      if (v119 <= v121)
      {
        v751 = 0;
        v752 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v753 = *((_QWORD *)p_includeSnapshot + 3);
        if (v753)
        {
          if (v119)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v753 + 16))(v753);
            v752 = *(_QWORD *)p_includeSnapshot;
            v751 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v751 = 0;
            v752 = 0;
          }
        }
      }
      else
      {
        v122 = (char *)v120 + v121;
        *((_QWORD *)p_includeSnapshot + 2) = v122 + 1;
        if (v120)
        {
          if (!*v122)
          {
            v1327.request.point = *(IntPoint *)v1368;
            v1327.request.includeSnapshot = 0;
            v1327.canBeValid = 1;
            WebKit::WebPageProxy::logDiagnosticMessageWithDomainFromWebProcess(v13, v12, (WTF::String *)&v1327, 0);
            if (v1327.canBeValid)
              goto LABEL_965;
            goto LABEL_1678;
          }
LABEL_204:
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v123 = *((_QWORD *)p_includeSnapshot + 3);
          if (v123 && v119)
            (*(void (**)(uint64_t))(*(_QWORD *)v123 + 16))(v123);
          if (v1368[8])
          {
            v124 = *(WTF::StringImpl **)v1368;
            *(_QWORD *)v1368 = 0;
            if (v124)
            {
              if (*(_DWORD *)v124 == 2)
                WTF::StringImpl::destroy(v124, v120);
              else
                *(_DWORD *)v124 -= 2;
            }
          }
          goto LABEL_1402;
        }
        v751 = v119;
        v752 = 0;
      }
      v119 = 0;
      v120 = 0;
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v754 = *((_QWORD *)p_includeSnapshot + 3);
      if (v754)
      {
        if (v751)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v754 + 16))(v754, v752, v751);
          v120 = *(WTF::StringImpl **)p_includeSnapshot;
          v119 = *((_QWORD *)p_includeSnapshot + 1);
        }
        else
        {
          v119 = 0;
          v120 = 0;
        }
      }
      goto LABEL_204;
    case 0x7AC:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.isLink)
        WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacyFromWebProcess((WTF *)v13, v12, (WTF::String *)&v1327, (uint64_t)&v1327.request.includeSnapshot, v1327.canBeValid);
LABEL_418:
      std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v191);
      goto LABEL_1678;
    case 0x7AD:
      IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
      if (!v1321[8])
        goto LABEL_1402;
      IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1368);
      if (!v1368[8])
      {
        v97 = 0;
        v98 = 0;
        LOBYTE(v1327.request.point.m_x) = 0;
        v1327.isLink = 0;
        goto LABEL_905;
      }
      v93 = *((_QWORD *)p_includeSnapshot + 1);
      v33 = *(WTF::StringImpl **)p_includeSnapshot;
      v94 = ((*((_QWORD *)p_includeSnapshot + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)p_includeSnapshot;
      if (v93 < v94 || v93 - v94 <= 3)
      {
        v812 = 0;
        v813 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v814 = *((_QWORD *)p_includeSnapshot + 3);
        if (v814)
        {
          if (v93)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v814 + 16))(v814);
            v813 = *(_QWORD *)p_includeSnapshot;
            v812 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v812 = 0;
            v813 = 0;
          }
        }
      }
      else
      {
        v95 = (_DWORD *)((char *)v33 + v94);
        *((_QWORD *)p_includeSnapshot + 2) = v95 + 1;
        if (v33)
        {
          LODWORD(v3) = *v95;
          v96 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
          if (v96 <= 0xFFu)
          {
LABEL_170:
            v97 = 0;
            v98 = 0;
            LOBYTE(v1327.request.point.m_x) = 0;
            goto LABEL_761;
          }
          if (!v1321[8] || !v1368[8])
            goto LABEL_2630;
          v97 = v96;
          v412 = *(IntPoint *)v1321;
          *(_QWORD *)v1321 = 0;
          v413 = *(_QWORD *)v1368;
          *(_QWORD *)v1368 = 0;
          v1327.request.point = v412;
          *(_QWORD *)&v1327.request.includeSnapshot = v413;
          *(_DWORD *)&v1327.canBeValid = v3;
          v1327.isSelected = v96;
          v98 = 1;
LABEL_761:
          v1327.isLink = v98;
          if (v1368[8])
          {
            v414 = *(WTF::StringImpl **)v1368;
            *(_QWORD *)v1368 = 0;
            if (v414)
            {
              if (*(_DWORD *)v414 == 2)
                WTF::StringImpl::destroy(v414, v33);
              else
                *(_DWORD *)v414 -= 2;
            }
          }
LABEL_905:
          if (v1321[8])
          {
            v478 = *(WTF::StringImpl **)v1321;
            *(_QWORD *)v1321 = 0;
            if (v478)
            {
              if (*(_DWORD *)v478 == 2)
                WTF::StringImpl::destroy(v478, v33);
              else
                *(_DWORD *)v478 -= 2;
            }
          }
          if (v98)
          {
            WebKit::WebPageProxy::logDiagnosticMessageWithResultFromWebProcess((WTF *)v13, v12, (WTF::String *)&v1327, (uint64_t)&v1327.request.includeSnapshot, v3, v97 != 0);
            if (!v1327.isLink)
              goto LABEL_1678;
LABEL_912:
            v479 = *(WTF::StringImpl **)&v1327.request.includeSnapshot;
            *(_QWORD *)&v1327.request.includeSnapshot = 0;
            if (v479)
            {
              if (*(_DWORD *)v479 == 2)
                WTF::StringImpl::destroy(v479, v54);
              else
                *(_DWORD *)v479 -= 2;
            }
LABEL_965:
            v58 = (WTF::StringImpl *)v1327.request.point;
            v1327.request.point = 0;
            if (!v58)
              goto LABEL_1678;
            goto LABEL_966;
          }
          goto LABEL_1402;
        }
        v812 = v93;
        v813 = 0;
      }
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v815 = *((_QWORD *)p_includeSnapshot + 3);
      if (v815 && v812)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v815 + 16))(v815, v813);
      goto LABEL_170;
    case 0x7AE:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.isContentEditable)
        WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess((WTF *)v13, v12, (WTF::String *)&v1327, (uint64_t)&v1327.request.includeSnapshot, (_QWORD **)&v1327.canBeValid, v1327.isLink);
      std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v249);
      goto LABEL_1678;
    case 0x7AF:
      IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
      if (!v1321[8])
        goto LABEL_1402;
      IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1368);
      if (!v1368[8])
      {
        v74 = 0;
        v75 = 0;
        LOBYTE(v1327.request.point.m_x) = 0;
        v1327.isContentEditable = 0;
        goto LABEL_896;
      }
      v68 = *((_QWORD *)p_includeSnapshot + 1);
      v33 = *(WTF::StringImpl **)p_includeSnapshot;
      v69 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
      if (v68 < v69 || v68 - v69 <= 7)
      {
        v808 = 0;
        v809 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v810 = *((_QWORD *)p_includeSnapshot + 3);
        if (v810)
        {
          if (v68)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v810 + 16))(v810);
            v809 = *(_QWORD *)p_includeSnapshot;
            v808 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v808 = 0;
            v809 = 0;
          }
        }
      }
      else
      {
        v70 = (double *)((char *)v33 + v69);
        *((_QWORD *)p_includeSnapshot + 2) = v70 + 1;
        if (v33)
        {
          v71 = (((unint64_t)v70 + 11) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v33;
          if (v68 < v71 || v68 - v71 <= 3)
          {
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v824 = *((_QWORD *)p_includeSnapshot + 3);
            if (v824)
            {
              if (v68)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v824 + 16))(v824);
                v33 = *(WTF::StringImpl **)p_includeSnapshot;
                v825 = *((_QWORD *)p_includeSnapshot + 1);
                v826 = *((_QWORD *)p_includeSnapshot + 3);
                *(_QWORD *)p_includeSnapshot = 0;
                *((_QWORD *)p_includeSnapshot + 1) = 0;
                if (v826)
                {
                  if (v825)
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v826 + 16))(v826, v33);
                }
              }
            }
            goto LABEL_117;
          }
          v5 = *v70;
          v3 = *(unsigned int *)(((unint64_t)v70 + 11) & 0xFFFFFFFFFFFFFFFCLL);
          *((_QWORD *)p_includeSnapshot + 2) = (((unint64_t)v70 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
          v73 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
          if (v73 <= 0xFFu)
          {
LABEL_117:
            v74 = 0;
            v75 = 0;
            LOBYTE(v1327.request.point.m_x) = 0;
            goto LABEL_775;
          }
          if (!v1321[8] || !v1368[8])
            goto LABEL_2630;
          v74 = v73;
          v417 = *(IntPoint *)v1321;
          *(_QWORD *)v1321 = 0;
          v418 = *(_QWORD *)v1368;
          *(_QWORD *)v1368 = 0;
          v1327.request.point = v417;
          *(_QWORD *)&v1327.request.includeSnapshot = v418;
          *(double *)&v1327.canBeValid = v5;
          *(_DWORD *)&v1327.isLink = v3;
          v1327.isAnimating = v73;
          v75 = 1;
LABEL_775:
          v1327.isContentEditable = v75;
          if (v1368[8])
          {
            v419 = *(WTF::StringImpl **)v1368;
            *(_QWORD *)v1368 = 0;
            if (v419)
            {
              if (*(_DWORD *)v419 == 2)
                WTF::StringImpl::destroy(v419, v33);
              else
                *(_DWORD *)v419 -= 2;
            }
          }
LABEL_896:
          if (v1321[8])
          {
            v477 = *(WTF::StringImpl **)v1321;
            *(_QWORD *)v1321 = 0;
            if (v477)
            {
              if (*(_DWORD *)v477 == 2)
                WTF::StringImpl::destroy(v477, v33);
              else
                *(_DWORD *)v477 -= 2;
            }
          }
          if (v75)
          {
            WebKit::WebPageProxy::logDiagnosticMessageWithValueFromWebProcess((WTF::StringImpl *)v13, v12, (WTF::String *)&v1327, (uint64_t)&v1327.request.includeSnapshot, v3, v74 != 0);
            if (v1327.isContentEditable)
              goto LABEL_912;
            goto LABEL_1678;
          }
LABEL_1402:
          v670 = *(_QWORD *)p_includeSnapshot;
          v699 = *((_QWORD *)p_includeSnapshot + 1);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v672 = *((_QWORD *)p_includeSnapshot + 3);
          if (!v672 || !v699)
            goto LABEL_1678;
          goto LABEL_1558;
        }
        v808 = v68;
        v809 = 0;
      }
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v811 = *((_QWORD *)p_includeSnapshot + 3);
      if (v811 && v808)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v811 + 16))(v811, v809, v808);
      goto LABEL_117;
    case 0x7B0:
      v288 = *((_QWORD *)p_includeSnapshot + 1);
      v289 = *(_QWORD *)p_includeSnapshot;
      v290 = ((*((_QWORD *)p_includeSnapshot + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)p_includeSnapshot;
      if (v288 < v290 || v288 - v290 <= 3)
      {
        v738 = 0;
        v739 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v740 = *((_QWORD *)p_includeSnapshot + 3);
        if (v740)
        {
          if (v288)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v740 + 16))(v740, v289, v288);
            v739 = *(_QWORD *)p_includeSnapshot;
            v738 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v738 = 0;
            v739 = 0;
          }
        }
        goto LABEL_1459;
      }
      v292 = (int *)(v289 + v290);
      *((_QWORD *)p_includeSnapshot + 2) = v292 + 1;
      if (!v289)
      {
        v738 = v288;
        v739 = 0;
LABEL_1459:
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v741 = *((_QWORD *)p_includeSnapshot + 3);
        if (v741 && v738)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v741 + 16))(v741, v739);
        goto LABEL_1546;
      }
      v293 = *v292;
      IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)p_includeSnapshot);
      if (v294)
      {
        v295 = *((_QWORD *)p_includeSnapshot + 1);
        v296 = *(_QWORD *)p_includeSnapshot;
        v297 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
        if (v295 < v297 || v295 - v297 <= 7)
        {
          v781 = 0;
          v782 = 0;
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v783 = *((_QWORD *)p_includeSnapshot + 3);
          if (v783)
          {
            if (v295)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v783 + 16))(v783);
              v782 = *(_QWORD *)p_includeSnapshot;
              v781 = *((_QWORD *)p_includeSnapshot + 1);
            }
            else
            {
              v781 = 0;
              v782 = 0;
            }
          }
        }
        else
        {
          v298 = (uint64_t *)(v296 + v297);
          *((_QWORD *)p_includeSnapshot + 2) = v298 + 1;
          if (v296)
          {
            WebKit::WebPageProxy::logScrollingEvent(v13, v293, *v298);
            goto LABEL_1678;
          }
          v781 = v295;
          v782 = 0;
        }
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v784 = *((_QWORD *)p_includeSnapshot + 3);
        if (v784 && v781)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v784 + 16))(v784, v782);
      }
LABEL_1546:
      v723 = *(_QWORD *)p_includeSnapshot;
      v724 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v725 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v725)
        goto LABEL_1678;
      goto LABEL_1547;
    case 0x7B1:
      v274 = *((_QWORD *)p_includeSnapshot + 1);
      v275 = *(_QWORD *)p_includeSnapshot;
      v276 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
      if (v274 <= v276)
      {
        v719 = 0;
        v720 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v721 = *((_QWORD *)p_includeSnapshot + 3);
        if (v721)
        {
          if (v274)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v721 + 16))(v721);
            v720 = *(_QWORD *)p_includeSnapshot;
            v719 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v719 = 0;
            v720 = 0;
          }
        }
      }
      else
      {
        v277 = (unsigned __int8 *)(v275 + v276);
        v278 = v277 + 1;
        *((_QWORD *)p_includeSnapshot + 2) = v277 + 1;
        if (v275)
        {
          v279 = *v277;
          if (v279 < 2)
          {
            v280 = ((unint64_t)(v278 + 7) & 0xFFFFFFFFFFFFFFF8) - v275;
            if (v274 >= v280 && v274 - v280 > 7)
            {
              v282 = (uint64_t *)(v275 + v280);
              *((_QWORD *)p_includeSnapshot + 2) = v282 + 1;
              v283 = *v282;
              v284 = (((unint64_t)v282 + 15) & 0xFFFFFFFFFFFFFFF8) - v275;
              if (v274 >= v284 && v274 - v284 > 7)
              {
                v286 = (uint64_t *)(v275 + v284);
                v287 = *v286;
                *((_QWORD *)p_includeSnapshot + 2) = v286 + 1;
                *(_BYTE *)(v13 + 857) = v279 != 0;
                if (v279)
                {
                  *(_QWORD *)(v13 + 656) = v283;
                  *(_QWORD *)(v13 + 664) = v287;
                }
                goto LABEL_1678;
              }
            }
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v636 = *((_QWORD *)p_includeSnapshot + 3);
            if (!v636
              || ((*(void (**)(uint64_t))(*(_QWORD *)v636 + 16))(v636),
                  v275 = *(_QWORD *)p_includeSnapshot,
                  v274 = *((_QWORD *)p_includeSnapshot + 1),
                  v637 = *((_QWORD *)p_includeSnapshot + 3),
                  *(_QWORD *)p_includeSnapshot = 0,
                  *((_QWORD *)p_includeSnapshot + 1) = 0,
                  !v637))
            {
LABEL_1435:
              v723 = *(_QWORD *)p_includeSnapshot;
              v724 = *((_QWORD *)p_includeSnapshot + 1);
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v725 = *((_QWORD *)p_includeSnapshot + 3);
              if (!v725)
                goto LABEL_1678;
LABEL_1547:
              if (!v724)
                goto LABEL_1678;
LABEL_1548:
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v725 + 16))(v725, v723);
              goto LABEL_1678;
            }
LABEL_2065:
            if (v274)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v637 + 16))(v637, v275);
            goto LABEL_1435;
          }
LABEL_1434:
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v637 = *((_QWORD *)p_includeSnapshot + 3);
          if (!v637)
            goto LABEL_1435;
          goto LABEL_2065;
        }
        v719 = v274;
        v720 = 0;
      }
      v274 = 0;
      v275 = 0;
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v722 = *((_QWORD *)p_includeSnapshot + 3);
      if (v722)
      {
        if (v719)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v722 + 16))(v722, v720, v719);
          v275 = *(_QWORD *)p_includeSnapshot;
          v274 = *((_QWORD *)p_includeSnapshot + 1);
        }
        else
        {
          v274 = 0;
          v275 = 0;
        }
      }
      goto LABEL_1434;
    case 0x7C0:
      IPC::Decoder::decode<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1347)
        WebKit::WebPageProxy::mouseDidMoveOverElement(v13, (uint64_t)&v1327, v1345[8], &v1346);
      std::__optional_destruct_base<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::WebHitTestResultData *)&v1327);
      goto LABEL_1678;
    case 0x7C1:
      IPC::Decoder::decode<std::tuple<WebCore::IntRect>>((unint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (v1327.canBeValid)
        *(InteractionInformationRequest *)(*(_QWORD *)(v13 + 32) + 1880) = v1327.request;
      goto LABEL_1678;
    case 0x7C3:
      v1327.request.point = (IntPoint)IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)p_includeSnapshot);
      *(_DWORD *)&v1327.request.includeSnapshot = v303;
      if ((_BYTE)v303)
        WebKit::WebPageProxy::pageDidScroll((WebKit::WebPageProxy *)v13, &v1327.request.point);
      goto LABEL_1678;
    case 0x7C4:
      IPC::Decoder::decode<std::tuple<WebCore::Color>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.request.includeSnapshot)
        WebKit::WebPageProxy::pageExtendedBackgroundColorDidChange((WebKit::WebPageProxy *)v13, (const WebCore::Color *)&v1327);
      goto LABEL_308;
    case 0x7C5:
      v112 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)p_includeSnapshot));
      if (v113)
        WebKit::WebPageProxy::pageScaleFactorDidChange((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, v112);
      goto LABEL_1678;
    case 0x7C7:
      v91 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)p_includeSnapshot));
      if (v92)
        WebKit::WebPageProxy::pluginScaleFactorDidChange((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, v91);
      goto LABEL_1678;
    case 0x7C8:
      v66 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)p_includeSnapshot));
      if (v67)
        WebKit::WebPageProxy::pluginZoomFactorDidChange((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, v66);
      goto LABEL_1678;
    case 0x7CA:
      IPC::Decoder::decode<WTF::UUID>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (!v1321[16])
        goto LABEL_1402;
      IPC::Decoder::decode<WTF::UUID>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!v1368[16])
        goto LABEL_1402;
      IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)p_includeSnapshot, (uint64_t)v1312);
      if (!(_BYTE)v1313)
        goto LABEL_1401;
      if (!v1321[16] || !v1368[16])
        goto LABEL_2630;
      v1327.request = *(InteractionInformationRequest *)v1321;
      *(_OWORD *)&v1327.canBeValid = *(_OWORD *)v1368;
      *(_OWORD *)&v1327.isContentEditable = *(_OWORD *)v1312;
      LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 1;
      WebKit::WebPageProxy::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect(v13, v12, &v1327, (uint64_t)&v1327.canBeValid, (uint64_t)v1312[0], (uint64_t)v1312[1]);
      goto LABEL_1678;
    case 0x7CB:
      IPC::Decoder::decode<WTF::UUID>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (!v1321[16])
        goto LABEL_1402;
      v233 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>((uint64_t *)p_includeSnapshot);
      if (v233 < 0x100u)
        goto LABEL_1402;
      v234 = v233;
      IPC::Decoder::decode<WTF::UUID>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!v1368[16])
        goto LABEL_1402;
      if (!v1321[16])
        goto LABEL_2630;
      v1327.request = *(InteractionInformationRequest *)v1321;
      v1327.canBeValid = v234;
      *(_OWORD *)&v1327.isContentEditable = *(_OWORD *)v1368;
      LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 1;
      WebKit::WebPageProxy::proofreadingSessionUpdateStateForSuggestionWithID(v13, v12, &v1327, v234, (uint64_t)&v1327.isContentEditable);
      goto LABEL_1678;
    case 0x7CC:
      IPC::Decoder::decode<std::tuple<float>>((uint64_t *)p_includeSnapshot);
      goto LABEL_1678;
    case 0x7D1:
      IPC::Decoder::decode<std::tuple<unsigned long long,WTF::String>>((uint64_t *)p_includeSnapshot, &v1327);
      if (!v1327.canBeValid)
        goto LABEL_1678;
      WebKit::WebPageProxy::registerEditCommandForUndo((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, *(_QWORD *)&v1327.request.point, (const WTF::String *)&v1327.request.includeSnapshot);
      if (!v1327.canBeValid)
        goto LABEL_1678;
      v58 = *(WTF::StringImpl **)&v1327.request.includeSnapshot;
      *(_QWORD *)&v1327.request.includeSnapshot = 0;
      if (!v58)
        goto LABEL_1678;
      goto LABEL_966;
    case 0x7D2:
      goto LABEL_1678;
    case 0x7D4:
      IPC::Decoder::decode<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)p_includeSnapshot, &v1327);
      if (!v1327.isLink)
        goto LABEL_1678;
      WebKit::WebPageProxy::relayAccessibilityNotification(v13, (uint64_t)&v1327, *(uint64_t *)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid);
      if (!v1327.isLink)
        goto LABEL_1678;
LABEL_330:
      v58 = (WTF::StringImpl *)v1327.request.point;
      v1327.request.point = 0;
      if (!v58)
        goto LABEL_1678;
      goto LABEL_966;
    case 0x7DA:
      v114 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if (v115)
      {
        v116 = (IntPoint)v114;
        IPC::Decoder::decode<WebKit::FrameInfoData>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
        m_x_low = LOBYTE(v1380.m_location.m_x);
        if (LOBYTE(v1380.m_location.m_x))
        {
          v1327.request.point = v116;
          std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v1327.request.includeSnapshot, (uint64_t)v1368);
          m_x_low = 1;
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
        }
        LOBYTE(v1327.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width) = m_x_low;
        std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v117);
        if (LOBYTE(v1327.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width))
          goto LABEL_612;
      }
      else
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        LOBYTE(v1327.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width) = 0;
      }
      v690 = *(_QWORD *)p_includeSnapshot;
      v691 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v692 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v692)
        goto LABEL_1678;
      if (!v691)
        goto LABEL_1678;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v692 + 16))(v692, v690);
      if (!LOBYTE(v1327.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width))
        goto LABEL_1678;
LABEL_612:
      WebKit::WebPageProxy::requestGeolocationPermissionForFrame(v13, v12, *(_QWORD *)&v1327.request.point, (uint64_t)&v1327.request.includeSnapshot);
      if (LOBYTE(v1327.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width))
      {
        v359 = v1327.cursor.var0.__val_.m_image.m_ptr;
        v1327.cursor.var0.__val_.m_image.m_ptr = 0;
        if (v359)
        {
          if (*(_DWORD *)v359 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v359, v358);
          else
            *(_DWORD *)v359 -= 2;
        }
        if (*(_DWORD *)&v1327.cursor.var0.__null_state_ != -1)
          ((void (*)(_BYTE *, float *))off_1E34FBEB0[*(unsigned int *)&v1327.cursor.var0.__null_state_])(v1368, &v1327.caretLength);
        *(_DWORD *)&v1327.cursor.var0.__null_state_ = -1;
        v411 = v1327.textAfter.m_impl.m_ptr;
        v1327.textAfter.m_impl.m_ptr = 0;
        if (v411)
          CFRelease(v411);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v1327.canBeValid);
      }
      goto LABEL_1678;
    case 0x7DF:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)p_includeSnapshot, v1321);
      if ((_BYTE)v1322)
      {
        IPC::Decoder::decode<WebCore::ShareableBitmapHandle>((IPC::Decoder *)p_includeSnapshot, v1368);
        if (v1369[0] && (IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1300), LOBYTE(v1300[1])))
        {
          IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1312);
          v246 = (char)v1312[1];
          if (LOBYTE(v1312[1]))
          {
            if (!(_BYTE)v1322 || !v1369[0] || !LOBYTE(v1300[1]))
              goto LABEL_2630;
            v247 = *(IntPoint *)v1321;
            *(_QWORD *)v1321 = 0;
            v1327.request.point = v247;
            *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)&v1321[8];
            *(_OWORD *)&v1327.isLink = *(_OWORD *)&v1321[24];
            *(_DWORD *)&v1321[8] &= ~1u;
            WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v1327.containerScrollingNodeID, (uint64_t)v1368);
            v248 = v1300[0];
            v1300[0] = 0;
            *(_QWORD *)&v1327.url.m_pathEnd = v248;
            v1327.imageURL.m_string.m_impl.m_ptr = (StringImpl *)v1312[0];
            v246 = 1;
          }
          else
          {
            LOBYTE(v1327.request.point.m_x) = 0;
          }
          *((_BYTE *)&v1327.imageURL + 8) = v246;
          if (LOBYTE(v1300[1]))
          {
            v466 = v1300[0];
            v1300[0] = 0;
            if (v466)
            {
              if (*(_DWORD *)v466 == 2)
                WTF::StringImpl::destroy(v466, v33);
              else
                *(_DWORD *)v466 -= 2;
            }
          }
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
          *((_BYTE *)&v1327.imageURL + 8) = 0;
        }
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v1368);
        if ((_BYTE)v1322)
        {
          v483 = *(WTF::StringImpl **)v1321;
          *(_QWORD *)v1321 = 0;
          if (v483)
          {
            if (*(_DWORD *)v483 == 2)
              WTF::StringImpl::destroy(v483, v482);
            else
              *(_DWORD *)v483 -= 2;
          }
        }
      }
      else
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        *((_BYTE *)&v1327.imageURL + 8) = 0;
      }
      if (!*((_BYTE *)&v1327.imageURL + 8))
      {
        v742 = *(_QWORD *)p_includeSnapshot;
        v743 = *((_QWORD *)p_includeSnapshot + 1);
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v744 = *((_QWORD *)p_includeSnapshot + 3);
        if (!v744)
          goto LABEL_1678;
        if (!v743)
          goto LABEL_1678;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v744 + 16))(v744, v742);
        if (!*((_BYTE *)&v1327.imageURL + 8))
          goto LABEL_1678;
      }
      v484 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if ((_BYTE)v485)
      {
        *(_QWORD *)v1368 = v484;
        p_includeSnapshot = &v1368[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
        v486 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v486 = off_1E34FBFE8;
        v486[1] = *(_QWORD *)v1368;
        v487 = *(_QWORD *)&v1368[8];
        *(_QWORD *)&v1368[8] = 0;
        v486[2] = v487;
        *(_QWORD *)v1321 = v486;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
        if (!*((_BYTE *)&v1327.imageURL + 8))
          goto LABEL_2630;
        WebKit::WebPageProxy::requestTextRecognition(v13, (uint64_t)&v1327, (uint64_t)&v1327.containerScrollingNodeID, (uint64_t)&v1327.url.m_pathEnd, (uint64_t)&v1327.imageURL, (uint64_t)v1321);
        v488 = *(_QWORD *)v1321;
        *(_QWORD *)v1321 = 0;
        if (v488)
          (*(void (**)(uint64_t))(*(_QWORD *)v488 + 8))(v488);
      }
      if (!*((_BYTE *)&v1327.imageURL + 8))
        goto LABEL_1678;
      v489 = v1327.imageURL.m_string.m_impl.m_ptr;
      v1327.imageURL.m_string.m_impl.m_ptr = 0;
      if (v489)
      {
        if (*(_DWORD *)v489 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v489, v485);
        else
          *(_DWORD *)v489 -= 2;
      }
      v490 = *(WTF::StringImpl **)&v1327.url.m_pathEnd;
      *(_QWORD *)&v1327.url.m_pathEnd = 0;
      if (v490)
      {
        if (*(_DWORD *)v490 == 2)
          WTF::StringImpl::destroy(v490, v485);
        else
          *(_DWORD *)v490 -= 2;
      }
      if (LOBYTE(v1327.url.m_string.m_impl.m_ptr))
      {
        adjustedPointForNodeRespondingToClickEvents = (const void *)v1327.adjustedPointForNodeRespondingToClickEvents;
        v1327.adjustedPointForNodeRespondingToClickEvents = 0;
        if (adjustedPointForNodeRespondingToClickEvents)
          CFRelease(adjustedPointForNodeRespondingToClickEvents);
      }
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1327.containerScrollingNodeID);
      goto LABEL_965;
    case 0x7E0:
      v256 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if (v257
        && (v258 = (IntPoint)v256,
            IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1300), v1301))
      {
        IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)p_includeSnapshot, v1312);
        if ((_BYTE)v1314)
        {
          IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)p_includeSnapshot, v1321);
          if (v1321[32])
          {
            IPC::ArgumentCoder<WebCore::MediaStreamRequest,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
            if (v1418
              || (v895 = *(_QWORD *)p_includeSnapshot,
                  v896 = *((_QWORD *)p_includeSnapshot + 1),
                  *(_QWORD *)p_includeSnapshot = 0,
                  *((_QWORD *)p_includeSnapshot + 1) = 0,
                  (v897 = *((_QWORD *)p_includeSnapshot + 3)) != 0)
              && v896
              && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v897 + 16))(v897, v895), v1418))
            {
              if (!v1301 || !(_BYTE)v1314 || !v1321[32])
                goto LABEL_2630;
              v1327.request.point = v258;
              *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)v1300;
              v1327.isLink = 0;
              LODWORD(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1327.isLink, (uint64_t)v1312);
              v1327.isDataDetectorLink = 0;
              *((_DWORD *)&v1327.url + 2) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1327.isDataDetectorLink, (uint64_t)v1321);
              LOBYTE(v1327.url.m_userEnd) = v1368[0];
              WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)&v1327.url.m_hostEnd, (uint64_t)&v1368[8]);
              v259 = v1406;
              v1406 = 0;
              v1353[0] = v259;
              v260 = v1407;
              v1407 = 0;
              v1353[1] = v260;
              v1354 = v1408;
              WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)&v1355, (uint64_t)&v1409);
              v262 = v1414;
              v1414 = 0;
              v1360[0] = v262;
              v263 = v1415;
              v1415 = 0;
              v1360[1] = v263;
              v1361 = v1416;
              v1362 = v1417;
              v1363 = 1;
              if (v1418)
              {
                WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1414, v261);
                std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1413, v264);
                std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1412, v265);
                std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1411, v266);
                std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1410, v267);
                WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1406, v268);
                std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1405, v269);
                std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1404, v270);
                std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1403, v271);
                std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1402, v272);
              }
            }
            else
            {
              LOBYTE(v1327.request.point.m_x) = 0;
              v1363 = 0;
            }
            if (v1321[32] && *(_DWORD *)&v1321[24] != -1)
              ((void (*)(_BYTE *, _BYTE *))off_1E34FBEB0[*(unsigned int *)&v1321[24]])(v1368, v1321);
          }
          else
          {
            LOBYTE(v1327.request.point.m_x) = 0;
            v1363 = 0;
          }
          if ((_BYTE)v1314 && DWORD2(v1313) != -1)
            ((void (*)(_BYTE *, WTF::StringImpl **))off_1E34FBEB0[DWORD2(v1313)])(v1368, v1312);
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
          v1363 = 0;
        }
        if (v1363)
        {
LABEL_889:
          WebKit::WebPageProxy::requestUserMediaPermissionForFrame((WebKit::WebPageProxy *)v13, v12, *(WTF::String **)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid, (WebCore::SecurityOriginData *)&v1327.isLink, (WebCore::SecurityOriginData *)&v1327.isDataDetectorLink, (uint64_t)&v1327.url.m_userEnd);
          if (!v1363)
            goto LABEL_1678;
          WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1360, v467);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1359, v468);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1358, v469);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1357, v470);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1356, v471);
          WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1353, v472);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1352, v473);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1349, v474);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1348, v475);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1345, v476);
          if (*((_DWORD *)&v1327.url + 2) != -1)
            ((void (*)(_BYTE *, BOOL *))off_1E34FBEB0[*((unsigned int *)&v1327.url + 2)])(v1368, &v1327.isDataDetectorLink);
          *((_DWORD *)&v1327.url + 2) = -1;
          goto LABEL_893;
        }
      }
      else
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        v1363 = 0;
      }
      v347 = *(_QWORD *)p_includeSnapshot;
      v348 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v349 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v349)
        goto LABEL_1678;
      if (!v348)
        goto LABEL_1678;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v349 + 16))(v349, v347);
      if (!v1363)
        goto LABEL_1678;
      goto LABEL_889;
    case 0x7E3:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (!v1327.request.includeSnapshot)
        goto LABEL_1678;
      WebKit::GeolocationPermissionRequestManagerProxy::revokeAuthorizationToken((WebKit::GeolocationPermissionRequestManagerProxy *)(*(_QWORD *)(v13 + 32) + 712), (const WTF::StringImpl **)&v1327, v64);
      if (!v1327.request.includeSnapshot)
        goto LABEL_1678;
      goto LABEL_965;
    case 0x7E4:
      WebKit::WebPageProxy::runModal((WebKit::WebPageProxy *)v13);
      goto LABEL_1678;
    case 0x7E5:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1312);
      if ((_BYTE)v1313)
      {
        IPC::Decoder::decode<WebKit::FrameInfoData>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
        if (LOBYTE(v1380.m_location.m_x)
          && ((IPC::ArgumentCoder<WebCore::FileChooserSettings,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)v1321), v1325)|| (v33 = *(WTF::StringImpl **)p_includeSnapshot, v764 = *((_QWORD *)p_includeSnapshot + 1), *(_QWORD *)p_includeSnapshot = 0, *((_QWORD *)p_includeSnapshot + 1) = 0, (v765 = *((_QWORD *)p_includeSnapshot + 3)) != 0)&& v764&& ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v765 + 16))(v765, v33), v1325)))
        {
          if (!(_BYTE)v1313 || !LOBYTE(v1380.m_location.m_x))
            goto LABEL_2630;
          v1327.request = *(InteractionInformationRequest *)v1312;
          std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v1327.canBeValid, (uint64_t)v1368);
          LOWORD(v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_location.m_x) = *(_WORD *)v1321;
          v77 = *(FloatSize *)&v1321[8];
          memset(&v1321[8], 0, 32);
          v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size = v77;
          v1327.linkIndicator.textRectsInBoundingRectCoordinates = *(Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> *)&v1321[16];
          *(_QWORD *)&v1327.linkIndicator.contentImageScaleFactor = *(_QWORD *)&v1321[32];
          v78 = v1322;
          v1322 = 0;
          v1327.linkIndicator.contentImageWithHighlight.m_ptr = v78;
          v79 = v1323;
          v1323 = 0;
          v1327.linkIndicator.contentImageWithoutSelection.m_ptr = v79;
          LOBYTE(v1327.linkIndicator.contentImage.m_ptr) = v1324;
          LOBYTE(v1327.linkIndicator.estimatedBackgroundColor.m_colorAndFlags) = 1;
          if (v1325)
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322, v33);
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1321[24], v80);
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1321[8], v81);
          }
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
          LOBYTE(v1327.linkIndicator.estimatedBackgroundColor.m_colorAndFlags) = 0;
        }
        std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v33);
        if (LOBYTE(v1327.linkIndicator.estimatedBackgroundColor.m_colorAndFlags))
        {
LABEL_1512:
          WebKit::WebPageProxy::runOpenPanel(v13, (_BYTE *)v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (uint64_t)&v1327.canBeValid, (uint64_t)&v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates);
          if (!LOBYTE(v1327.linkIndicator.estimatedBackgroundColor.m_colorAndFlags))
            goto LABEL_1678;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.linkIndicator.contentImageWithHighlight, v766);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.linkIndicator.textRectsInBoundingRectCoordinates.m_capacity, v767);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size, v768);
          goto LABEL_1654;
        }
      }
      else
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        LOBYTE(v1327.linkIndicator.estimatedBackgroundColor.m_colorAndFlags) = 0;
      }
      v680 = *(_QWORD *)p_includeSnapshot;
      v681 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v682 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v682)
        goto LABEL_1678;
      if (!v681)
        goto LABEL_1678;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v682 + 16))(v682, v680);
      if (!LOBYTE(v1327.linkIndicator.estimatedBackgroundColor.m_colorAndFlags))
        goto LABEL_1678;
      goto LABEL_1512;
    case 0x7E6:
      IPC::Decoder::decode<std::tuple<WebCore::Color>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.request.includeSnapshot)
        WebKit::WebPageProxy::sampledPageTopColorChanged(v13, (const WebCore::Color *)&v1327);
      goto LABEL_308;
    case 0x7E7:
      IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)p_includeSnapshot, (uint64_t)v1368);
      if (v1368[16])
      {
        IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
        isLink = v1321[8];
        if (v1321[8])
        {
          if (!v1368[16])
            goto LABEL_2630;
          WTF::MachSendRight::MachSendRight();
          *(_QWORD *)&v1327.request.includeSnapshot = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1327.canBeValid = *(_QWORD *)v1321;
          isLink = 1;
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
        }
        v1327.isLink = isLink;
        if (v1368[16])
        {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v1368);
          isLink = v1327.isLink;
        }
        if (isLink)
          goto LABEL_653;
      }
      else
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        v1327.isLink = 0;
      }
      v350 = *(_QWORD *)p_includeSnapshot;
      v351 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v352 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v352)
        goto LABEL_1678;
      if (!v351)
        goto LABEL_1678;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v352 + 16))(v352, v350);
      if (!v1327.isLink)
        goto LABEL_1678;
LABEL_653:
      WebKit::WebPageProxy::saveImageToLibrary((WebKit::WebPageProxy *)v13, (int)&v1327, (const WTF::StringImpl **)&v1327.canBeValid);
      if (v1327.isLink)
      {
        v369 = *(WTF::StringImpl **)&v1327.canBeValid;
        *(_QWORD *)&v1327.canBeValid = 0;
        if (v369)
        {
          if (*(_DWORD *)v369 == 2)
            WTF::StringImpl::destroy(v369, v368);
          else
            *(_DWORD *)v369 -= 2;
        }
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1327);
      }
      goto LABEL_1678;
    case 0x7EE:
      v232 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
      if (v232 >= 0x100u)
        *(_BYTE *)(v13 + 850) = v232 != 0;
      goto LABEL_1678;
    case 0x7EF:
      IPC::Decoder::decode<std::tuple<WebCore::Color>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.request.includeSnapshot)
        WebKit::WebPageProxy::setColorPickerColor(v13, (const Color *)&v1327);
      goto LABEL_308;
    case 0x7F0:
      IPC::Decoder::decode<WebCore::Cursor>((unint64_t *)p_includeSnapshot, &v1327);
      if (!v1327.isContentEditable)
        goto LABEL_1556;
      *(_QWORD *)&v1368[8] = *(_QWORD *)&v1327.request.includeSnapshot;
      *(_OWORD *)&v1368[16] = *(_OWORD *)&v1327.canBeValid;
      v1368[0] = v1327.request.point.m_x;
      v1368[32] = 1;
      v230 = *(_QWORD *)(v13 + 40);
      if (v230)
        v231 = *(_QWORD *)(v230 + 8);
      else
        v231 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v231 + 1584))(v231);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v231 + 312))(v231, v1368);
      (*(void (**)(uint64_t))(*(_QWORD *)v231 + 1592))(v231);
      if (!v1368[32])
        goto LABEL_1678;
      v317 = *(_QWORD *)&v1368[8];
      *(_QWORD *)&v1368[8] = 0;
      if (!v317)
        goto LABEL_1678;
      if (*(_DWORD *)(v317 + 8) == 1)
        goto LABEL_521;
      --*(_DWORD *)(v317 + 8);
      goto LABEL_1678;
    case 0x7F1:
      v251 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
      if (v251 < 0x100u)
        goto LABEL_1678;
      v252 = *(_QWORD *)(v13 + 40);
      if (v252)
        v60 = *(_QWORD *)(v252 + 8);
      else
        v60 = 0;
      v360 = v251 != 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1584))(v60);
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v60 + 320))(v60, v360);
      goto LABEL_618;
    case 0x7F2:
      IPC::Decoder::decode<std::tuple<WebKit::DataDetectionResult>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (v1327.request.includeSnapshot)
      {
        WebKit::WebPageProxy::setDataDetectionResult(v13, (CFTypeRef *)&v1327);
        if (v1327.request.includeSnapshot)
          goto LABEL_424;
      }
      goto LABEL_1678;
    case 0x7F3:
      v82 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
      if (v82 >= 0x100u)
      {
        v83 = 80;
        if (!(_BYTE)v82)
          v83 = 88;
        (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v13 + 104) + v83))(*(_QWORD *)(v13 + 104), v13);
      }
      goto LABEL_1678;
    case 0x7F4:
      v273 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
      if (v273 >= 0x100u)
        *(_BYTE *)(v13 + 734) = v273 != 0;
      goto LABEL_1678;
    case 0x7F6:
      v155 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
      if (v155 >= 0x100u)
        *(_BYTE *)(v13 + 1004) = v155 != 0;
      goto LABEL_1678;
    case 0x7F7:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot) < 0x100u)
        goto LABEL_1678;
      v156 = *(void (**)(void))(**(_QWORD **)(v13 + 104) + 208);
      goto LABEL_421;
    case 0x7F8:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot) < 0x100u)
        goto LABEL_1678;
      v156 = *(void (**)(void))(**(_QWORD **)(v13 + 104) + 184);
      goto LABEL_421;
    case 0x7FB:
      v236 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
      if (v236 >= 0x100u)
        WebKit::WebPageProxy::setNetworkRequestsInProgress((WebKit::WebPageProxy *)v13, v236 != 0, v237);
      goto LABEL_1678;
    case 0x7FD:
      v198 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)p_includeSnapshot);
      if (v199)
        *(_QWORD *)(v13 + 864) = v198;
      goto LABEL_1678;
    case 0x7FE:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot) < 0x100u)
        goto LABEL_1678;
      v156 = *(void (**)(void))(**(_QWORD **)(v13 + 104) + 200);
      goto LABEL_421;
    case 0x7FF:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (!v1327.request.includeSnapshot)
        goto LABEL_1678;
      (*(void (**)(_QWORD, unint64_t, InteractionInformationAtPosition *))(**(_QWORD **)(v13 + 104)
                                                                                           + 128))(*(_QWORD *)(v13 + 104), v13, &v1327);
      if (!v1327.request.includeSnapshot)
        goto LABEL_1678;
      v58 = (WTF::StringImpl *)v1327.request.point;
      v1327.request.point = 0;
      if (!v58)
        goto LABEL_1678;
      goto LABEL_966;
    case 0x800:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (!v1321[16])
      {
        LOBYTE(v1327.request.point.m_x) = 0;
        LOBYTE(v1327.imageURL.m_hostEnd) = 0;
        goto LABEL_1428;
      }
      IPC::Decoder::decode<WebCore::TextIndicatorData>((unint64_t *)p_includeSnapshot, v1368);
      v204 = v1369[48];
      if (!v1369[48])
        goto LABEL_1521;
      v205 = *((_QWORD *)p_includeSnapshot + 1);
      v33 = *(WTF::StringImpl **)p_includeSnapshot;
      v206 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
      if (v205 < v206 || v205 - v206 <= 7)
      {
        v771 = 0;
        v772 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v773 = *((_QWORD *)p_includeSnapshot + 3);
        if (v773)
        {
          if (v205)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v773 + 16))(v773);
            v772 = *(_QWORD *)p_includeSnapshot;
            v771 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v771 = 0;
            v772 = 0;
          }
        }
      }
      else
      {
        v207 = (uint64_t *)((char *)v33 + v206);
        *((_QWORD *)p_includeSnapshot + 2) = v207 + 1;
        if (v33)
        {
          if (!v1321[16])
            goto LABEL_2630;
          v208 = *v207;
          v1327.request = *(InteractionInformationRequest *)v1321;
          *(_OWORD *)&v1327.canBeValid = *(_OWORD *)v1368;
          *(_OWORD *)&v1327.isContentEditable = *(_OWORD *)&v1368[16];
          *(_OWORD *)&v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = *(_OWORD *)&v1368[32];
          v209 = *(FloatPoint *)&v1368[48];
          *(_QWORD *)&v1368[48] = 0;
          v1327.adjustedPointForNodeRespondingToClickEvents = v209;
          v210 = *(StringImpl **)&v1368[56];
          *(_QWORD *)&v1368[56] = 0;
          v1327.url.m_string.m_impl.m_ptr = v210;
          *((_DWORD *)&v1327.url + 2) = *(_DWORD *)v1369;
          v211 = *(_OWORD *)&v1369[8];
          memset(&v1369[8], 0, 24);
          *(_OWORD *)&v1327.url.m_userEnd = v211;
          *(_QWORD *)&v1327.url.m_pathEnd = *(_QWORD *)&v1369[24];
          WebCore::Color::Color();
          *((_DWORD *)&v1327.imageURL + 2) = *(_DWORD *)&v1369[40];
          *(_QWORD *)&v1327.imageURL.m_userEnd = v208;
          v204 = 1;
          goto LABEL_1522;
        }
        v771 = v205;
        v772 = 0;
      }
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v774 = *((_QWORD *)p_includeSnapshot + 3);
      if (v774 && v771)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v774 + 16))(v774, v772);
      v204 = 0;
LABEL_1521:
      LOBYTE(v1327.request.point.m_x) = 0;
LABEL_1522:
      LOBYTE(v1327.imageURL.m_hostEnd) = v204;
      std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v33);
      if (LOBYTE(v1327.imageURL.m_hostEnd))
        goto LABEL_1523;
LABEL_1428:
      v716 = *(_QWORD *)p_includeSnapshot;
      v717 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v718 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v718)
        goto LABEL_1678;
      if (!v717)
        goto LABEL_1678;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v718 + 16))(v718, v716);
      if (!LOBYTE(v1327.imageURL.m_hostEnd))
        goto LABEL_1678;
LABEL_1523:
      WebKit::WebPageProxy::setTextIndicatorFromFrame(v13, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (__int128 *)&v1327.canBeValid, *(uint64_t *)&v1327.imageURL.m_userEnd);
      if (LOBYTE(v1327.imageURL.m_hostEnd))
      {
        if (((uint64_t)v1327.imageURL.m_string.m_impl.m_ptr & 0x8000000000000) != 0)
        {
          v778 = (unsigned int *)((uint64_t)v1327.imageURL.m_string.m_impl.m_ptr & 0xFFFFFFFFFFFFLL);
          do
          {
            v779 = __ldaxr(v778);
            v780 = v779 - 1;
          }
          while (__stlxr(v780, v778));
          if (!v780)
          {
            atomic_store(1u, v778);
            WTF::fastFree((WTF *)v778, v86);
          }
        }
        v775 = *(_DWORD **)&v1327.url.m_pathEnd;
        *(_QWORD *)&v1327.url.m_pathEnd = 0;
        if (v775)
        {
          if (v775[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v775 + 8))(v775);
          else
            --v775[2];
        }
        v776 = *(_DWORD **)&v1327.url.m_hostEnd;
        *(_QWORD *)&v1327.url.m_hostEnd = 0;
        if (v776)
        {
          if (v776[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v776 + 8))(v776);
          else
            --v776[2];
        }
        v777 = *(_DWORD **)&v1327.url.m_userEnd;
        *(_QWORD *)&v1327.url.m_userEnd = 0;
        if (v777)
        {
          if (v777[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v777 + 8))(v777);
          else
            --v777[2];
        }
        v398 = (unsigned int *)v1327.adjustedPointForNodeRespondingToClickEvents;
        if (v1327.adjustedPointForNodeRespondingToClickEvents)
        {
          v1327.adjustedPointForNodeRespondingToClickEvents = 0;
          LODWORD(v1327.url.m_string.m_impl.m_ptr) = 0;
          goto LABEL_1539;
        }
      }
      goto LABEL_1678;
    case 0x801:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot) < 0x100u)
        goto LABEL_1678;
      v156 = *(void (**)(void))(**(_QWORD **)(v13 + 104) + 168);
LABEL_421:
      v156();
      goto LABEL_1678;
    case 0x802:
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (v1327.canBeValid)
      {
        *(InteractionInformationRequest *)v1368 = v1327.request;
        v1368[16] = 1;
        WebKit::WebPageProxy::setWindowFrame((WebKit::WebPageProxy *)v13, (const FloatRect *)v1368);
        goto LABEL_1678;
      }
      v679 = *(_QWORD *)p_includeSnapshot;
      v686 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v672 = *((_QWORD *)p_includeSnapshot + 3);
      if (v672 && v686)
        goto LABEL_2170;
LABEL_1415:
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      goto LABEL_1678;
    case 0x804:
      IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)p_includeSnapshot, v1312);
      if (!LOBYTE(v1312[1]))
      {
        v33 = *(WTF::StringImpl **)p_includeSnapshot;
        v700 = *((_QWORD *)p_includeSnapshot + 1);
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v701 = *((_QWORD *)p_includeSnapshot + 3);
        if (!v701)
          goto LABEL_1406;
        if (!v700)
          goto LABEL_1406;
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v701 + 16))(v701, v33);
        if (!LOBYTE(v1312[1]))
          goto LABEL_1406;
      }
      IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (v1321[16]
        && (IPC::Decoder::decode<WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)p_includeSnapshot, (uint64_t)v1368), v1368[16]))
      {
        if (!LOBYTE(v1312[1]) || !v1321[16])
          goto LABEL_2630;
        WebCore::Color::Color();
        *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)v1321;
        v160 = *(_QWORD *)v1368;
        *(_QWORD *)v1368 = 0;
        *(_QWORD *)&v1327.isLink = v160;
        v161 = *(_QWORD *)&v1368[8];
        *(_QWORD *)&v1368[8] = 0;
        *(_QWORD *)&v1327.isContentEditable = v161;
        LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = 1;
        if (v1368[16])
          WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1368, v33);
      }
      else
      {
LABEL_1406:
        LOBYTE(v1327.request.point.m_x) = 0;
        LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
      }
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1312, v33);
      if (LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier)
        || (v745 = *(_QWORD *)p_includeSnapshot,
            v746 = *((_QWORD *)p_includeSnapshot + 1),
            *(_QWORD *)p_includeSnapshot = 0,
            *((_QWORD *)p_includeSnapshot + 1) = 0,
            (v747 = *((_QWORD *)p_includeSnapshot + 3)) != 0)
        && v746
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v747 + 16))(v747, v745),
            LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier)))
      {
        WebKit::WebPageProxy::showColorPicker(v13, (uint64_t)&v1327, (uint64_t)&v1327.request.includeSnapshot, (uint64_t)&v1327.isLink);
        if (LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier))
        {
          WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.isLink, v702);
          if ((*(_QWORD *)&v1327.request.point & 0x8000000000000) != 0)
          {
            v398 = (unsigned int *)(*(_QWORD *)&v1327.request.point & 0xFFFFFFFFFFFFLL);
            do
            {
              v703 = __ldaxr(v398);
              v704 = v703 - 1;
            }
            while (__stlxr(v704, v398));
            if (!v704)
            {
              atomic_store(1u, v398);
              goto LABEL_1539;
            }
          }
        }
      }
      goto LABEL_1678;
    case 0x805:
      IPC::ArgumentCoder<WebCore::ContactsRequestData,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (v1327.isContentEditable)
        goto LABEL_148;
      v687 = *(_QWORD *)p_includeSnapshot;
      v688 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v689 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v689 || !v688)
        goto LABEL_1415;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v689 + 16))(v689, v687);
      if (!v1327.isContentEditable)
        goto LABEL_2183;
LABEL_148:
      *(IntPoint *)v1368 = v1327.request.point;
      *(_QWORD *)&v1368[8] = *(_QWORD *)&v1327.request.includeSnapshot;
      v1368[16] = v1327.canBeValid;
      v84 = *(WTF::StringImpl **)&v1327.isLink;
      *(_QWORD *)&v1368[24] = *(_QWORD *)&v1327.isLink;
      v1368[32] = 1;
      v85 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if (!(_BYTE)v86)
        goto LABEL_153;
      v1327.request.point = (IntPoint)v85;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1327.request.includeSnapshot, (unsigned __int8 **)v12);
      v87 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v87 = off_1E34FBF20;
      *(IntPoint *)(v87 + 8) = v1327.request.point;
      v88 = *(_QWORD *)&v1327.request.includeSnapshot;
      *(_QWORD *)&v1327.request.includeSnapshot = 0;
      *(_QWORD *)(v87 + 16) = v88;
      *(_QWORD *)v1321 = v87;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1327.request.includeSnapshot);
      WebKit::WebPageProxy::showContactPicker(v13, v12, (const WTF::StringImpl *)v1368, (uint64_t)v1321);
      v89 = *(_QWORD *)v1321;
      *(_QWORD *)v1321 = 0;
      if (v89)
        (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
      if (!v1368[32])
        goto LABEL_1678;
      v84 = *(WTF::StringImpl **)&v1368[24];
LABEL_153:
      *(_QWORD *)&v1368[24] = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
          WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v86);
        else
          *(_DWORD *)v84 -= 2;
      }
      v398 = *(unsigned int **)v1368;
      if (!*(_QWORD *)v1368)
        goto LABEL_1678;
      *(_QWORD *)v1368 = 0;
      *(_DWORD *)&v1368[8] = 0;
      goto LABEL_1539;
    case 0x807:
      IPC::ArgumentCoder<WebCore::DataListSuggestionInformation,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier))
      {
        m_x = v1327.request.point.m_x;
        *(_QWORD *)&v1368[8] = *(_QWORD *)&v1327.request.includeSnapshot;
        v202 = *(_QWORD *)&v1327.canBeValid;
        *(_QWORD *)&v1327.request.includeSnapshot = 0;
        *(_QWORD *)&v1327.canBeValid = 0;
        *(_QWORD *)&v1368[16] = v202;
        *(_OWORD *)&v1368[24] = *(_OWORD *)&v1327.isLink;
        WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.request.includeSnapshot, v200);
        v1368[0] = m_x;
        v1368[40] = 1;
        WebKit::WebPageProxy::showDataListSuggestions(v13, (uint64_t)v1368);
        if (v1368[40])
          WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1368[8], v203);
        goto LABEL_1678;
      }
      v715 = *(_QWORD *)p_includeSnapshot;
      v671 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v672 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v672)
      {
LABEL_1423:
        v671 = 0;
LABEL_1424:
        v670 = 0;
        goto LABEL_1425;
      }
      if (!v671)
        goto LABEL_1424;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v672 + 16))(v672, v715);
LABEL_2183:
      v670 = *(_QWORD *)p_includeSnapshot;
      v671 = *((_QWORD *)p_includeSnapshot + 1);
      v672 = *((_QWORD *)p_includeSnapshot + 3);
LABEL_1425:
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      if (!v672)
        goto LABEL_1678;
LABEL_1355:
      if (!v671)
        goto LABEL_1678;
      goto LABEL_1558;
    case 0x808:
      IPC::ArgumentCoder<WebCore::DateTimeChooserParameters,void>::decode((uint64_t *)p_includeSnapshot, &v1327);
      if (LOBYTE(v1327.imageURL.m_userEnd))
        goto LABEL_226;
      v693 = *(_QWORD *)p_includeSnapshot;
      v671 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v672 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v672)
        goto LABEL_1423;
      if (!v671)
        goto LABEL_1424;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v672 + 16))(v672, v693);
      if (!LOBYTE(v1327.imageURL.m_userEnd))
        goto LABEL_2183;
LABEL_226:
      *(_OWORD *)&v1368[8] = *(_OWORD *)&v1327.request.includeSnapshot;
      v142 = *(_OWORD *)&v1327.isLink;
      v143 = v1327.request.point;
      m_identifier = v1327.containerScrollingNodeID.m_value.m_object.m_identifier;
      v1327.request.point = 0;
      memset(&v1327.isLink, 0, 64);
      *(_OWORD *)&v1368[24] = v142;
      *(IntPoint *)v1368 = v143;
      *(_QWORD *)&v1368[40] = m_identifier;
      *(_QWORD *)&v1368[48] = v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
      *(_QWORD *)&v1368[56] = *(_QWORD *)&v1327.isDataDetectorLink;
      *(FloatPoint *)v1369 = v1327.adjustedPointForNodeRespondingToClickEvents;
      *(_QWORD *)&v1369[8] = v1327.url.m_string.m_impl.m_ptr;
      *(_QWORD *)&v1369[16] = *((_QWORD *)&v1327.url + 1);
      *(_QWORD *)&v1369[53] = *(StringImpl **)((char *)&v1327.imageURL.m_string.m_impl.m_ptr + 5);
      *(_OWORD *)&v1369[40] = *(_OWORD *)&v1327.url.m_pathEnd;
      *(_OWORD *)&v1369[24] = *(_OWORD *)&v1327.url.m_userEnd;
      v1370 = 1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.url, v141);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.isDataDetectorLink, v145);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.containerScrollingNodeID, v146);
      v148 = *(WTF::StringImpl **)&v1327.isContentEditable;
      *(_QWORD *)&v1327.isContentEditable = 0;
      if (v148)
      {
        if (*(_DWORD *)v148 == 2)
          WTF::StringImpl::destroy(v148, v147);
        else
          *(_DWORD *)v148 -= 2;
      }
      v361 = *(WTF::StringImpl **)&v1327.isLink;
      *(_QWORD *)&v1327.isLink = 0;
      if (v361)
      {
        if (*(_DWORD *)v361 == 2)
          WTF::StringImpl::destroy(v361, v147);
        else
          *(_DWORD *)v361 -= 2;
      }
      v362 = (WTF::StringImpl *)v1327.request.point;
      v1327.request.point = 0;
      if (v362)
      {
        if (*(_DWORD *)v362 == 2)
          WTF::StringImpl::destroy(v362, v147);
        else
          *(_DWORD *)v362 -= 2;
      }
      WebKit::WebPageProxy::showDateTimePicker(v13, (uint64_t)v1368);
      if (!v1370)
        goto LABEL_1678;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1369[8], v363);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1368[56], v364);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1368[40], v365);
      v366 = *(WTF::StringImpl **)&v1368[32];
      *(_QWORD *)&v1368[32] = 0;
      if (v366)
      {
        if (*(_DWORD *)v366 == 2)
          WTF::StringImpl::destroy(v366, v54);
        else
          *(_DWORD *)v366 -= 2;
      }
      v399 = *(WTF::StringImpl **)&v1368[24];
      *(_QWORD *)&v1368[24] = 0;
      if (!v399)
        goto LABEL_820;
      goto LABEL_817;
    case 0x80C:
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)p_includeSnapshot, (uint64_t)v1321);
      if (!v1321[16])
        goto LABEL_1505;
      IPC::Decoder::decode<WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!v1368[16])
        goto LABEL_1402;
      v1327.request = *(InteractionInformationRequest *)v1321;
      v100 = *(_QWORD *)v1368;
      *(_QWORD *)v1368 = 0;
      *(_QWORD *)&v1327.canBeValid = v100;
      v101 = *(_QWORD *)&v1368[8];
      *(_QWORD *)&v1368[8] = 0;
      *(_QWORD *)&v1327.isLink = v101;
      v4 = (WTF::StringImpl *)v1368;
      WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1368, v99);
      v1327.isContentEditable = 1;
      v102 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if (!(_BYTE)v103)
        goto LABEL_181;
      *(_QWORD *)v1368 = v102;
      p_includeSnapshot = &v1368[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
      v104 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v104 = off_1E34FC010;
      v104[1] = *(_QWORD *)v1368;
      v105 = *(_QWORD *)&v1368[8];
      *(_QWORD *)&v1368[8] = 0;
      v104[2] = v105;
      *(_QWORD *)v1321 = v104;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
      if (!v1327.isContentEditable)
        goto LABEL_2630;
      WebKit::WebPageProxy::showMediaControlsContextMenu(v13, (uint64_t)&v1327, (uint64_t)&v1327.canBeValid, (uint64_t)v1321);
      v106 = *(_QWORD *)v1321;
      *(_QWORD *)v1321 = 0;
      if (v106)
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
      if (v1327.isContentEditable)
LABEL_181:
        WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.canBeValid, v103);
      goto LABEL_1678;
    case 0x80D:
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v13 + 104) + 24))(*(_QWORD *)(v13 + 104), v13);
      goto LABEL_1678;
    case 0x80E:
      v149 = *((_QWORD *)p_includeSnapshot + 1);
      v150 = *(_QWORD *)p_includeSnapshot;
      v151 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
      if (v149 <= v151)
      {
        v694 = 0;
        v695 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v696 = *((_QWORD *)p_includeSnapshot + 3);
        if (v696)
        {
          if (v149)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v696 + 16))(v696);
            v695 = *(_QWORD *)p_includeSnapshot;
            v694 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v694 = 0;
            v695 = 0;
          }
        }
      }
      else
      {
        v152 = (unsigned __int8 *)(v150 + v151);
        *((_QWORD *)p_includeSnapshot + 2) = v152 + 1;
        if (v150)
        {
          v153 = *v152;
          if (v153 < 2)
          {
            LOBYTE(v4) = v153 != 0;
            IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)p_includeSnapshot, (uint64_t)v1368);
            if (!v1368[16])
              goto LABEL_1402;
            v154 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>((uint64_t *)p_includeSnapshot);
            if ((unsigned __int16)v154 < 0x100u)
              goto LABEL_1402;
            v12 = v154;
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
            if (v1321[8])
            {
              if (!v1368[16])
                goto LABEL_2630;
              LOBYTE(v1327.request.point.m_x) = v153 != 0;
              *(InteractionInformationRequest *)((char *)&v1327.request + 4) = *(InteractionInformationRequest *)v1368;
              v1327.isSelected = v12;
              *(_QWORD *)&v1327.isLink = *(_QWORD *)v1321;
              v1327.isContentEditable = 1;
              WebKit::WebPageProxy::showPlaybackTargetPicker(v13, v153 != 0, (uint64_t)&v1327.request.point.m_y, v12, (uint64_t)&v1327.isLink);
              if (!v1327.isContentEditable)
                goto LABEL_1678;
              v58 = *(WTF::StringImpl **)&v1327.isLink;
              *(_QWORD *)&v1327.isLink = 0;
              if (!v58)
                goto LABEL_1678;
              goto LABEL_966;
            }
LABEL_1401:
            LOBYTE(v1327.request.point.m_x) = 0;
            goto LABEL_1402;
          }
LABEL_1400:
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v698 = *((_QWORD *)p_includeSnapshot + 3);
          if (v698 && v149)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v698 + 16))(v698, v150);
          goto LABEL_1401;
        }
        v694 = v149;
        v695 = 0;
      }
      v149 = 0;
      v150 = 0;
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v697 = *((_QWORD *)p_includeSnapshot + 3);
      if (v697)
      {
        if (v694)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v697 + 16))(v697, v695, v694);
          v150 = *(_QWORD *)p_includeSnapshot;
          v149 = *((_QWORD *)p_includeSnapshot + 1);
        }
        else
        {
          v149 = 0;
          v150 = 0;
        }
      }
      goto LABEL_1400;
    case 0x80F:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1312);
      if (!(_BYTE)v1313)
        goto LABEL_1676;
      IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)p_includeSnapshot, (uint64_t)v1300);
      if (!v1301)
        goto LABEL_1676;
      v212 = *((_QWORD *)p_includeSnapshot + 1);
      v213 = *(char **)p_includeSnapshot;
      v214 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
      if (v212 < v214 || v212 - v214 <= 7)
      {
        v820 = 0;
        v821 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v822 = *((_QWORD *)p_includeSnapshot + 3);
        if (v822)
        {
          if (v212)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v822 + 16))(v822);
            v821 = *(_QWORD *)p_includeSnapshot;
            v820 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v820 = 0;
            v821 = 0;
          }
        }
      }
      else
      {
        v215 = (uint64_t *)&v213[v214];
        *((_QWORD *)p_includeSnapshot + 2) = v215 + 1;
        if (v213)
        {
          v216 = (((unint64_t)v215 + 15) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v213;
          if (v212 < v216 || v212 - v216 <= 7)
          {
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v827 = *((_QWORD *)p_includeSnapshot + 3);
            if (v827)
            {
              if (v212)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v827 + 16))(v827);
                v828 = *(_QWORD *)p_includeSnapshot;
                v829 = *((_QWORD *)p_includeSnapshot + 1);
                v830 = *((_QWORD *)p_includeSnapshot + 3);
                *(_QWORD *)p_includeSnapshot = 0;
                *((_QWORD *)p_includeSnapshot + 1) = 0;
                if (v830)
                {
                  if (v829)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v830 + 16))(v830, v828);
                }
              }
            }
LABEL_1675:
            v858 = *(_QWORD *)p_includeSnapshot;
            v859 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v860 = *((_QWORD *)p_includeSnapshot + 3);
            if (v860 && v859)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v860 + 16))(v860, v858);
            goto LABEL_1676;
          }
          v218 = (unint64_t *)(((unint64_t)v215 + 15) & 0xFFFFFFFFFFFFFFF8);
          v219 = *v218;
          v220 = *v215;
          *((_QWORD *)p_includeSnapshot + 2) = v218 + 1;
          *(_QWORD *)&v1368[8] = 0;
          *(_QWORD *)v1368 = 0;
          if (v219 >= 0x5555)
          {
            while (1)
            {
              IPC::Decoder::decode<WebKit::WebPopupItem>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
              if (!LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
                break;
              v849 = *(_DWORD *)&v1368[12];
              if (*(_DWORD *)&v1368[12] == *(_DWORD *)&v1368[8])
              {
                WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPopupItem>((unsigned int *)v1368, (unint64_t)&v1327);
              }
              else
              {
                v850 = *(_QWORD *)v1368 + 48 * *(unsigned int *)&v1368[12];
                *(_BYTE *)v850 = v1327.request.point.m_x;
                v851 = *(_QWORD *)&v1327.request.includeSnapshot;
                *(_QWORD *)&v1327.request.includeSnapshot = 0;
                *(_QWORD *)(v850 + 8) = v851;
                *(_WORD *)(v850 + 16) = *(_WORD *)&v1327.canBeValid;
                v852 = *(_QWORD *)&v1327.isLink;
                *(_QWORD *)&v1327.isLink = 0;
                *(_QWORD *)(v850 + 24) = v852;
                v853 = *(_QWORD *)&v1327.isContentEditable;
                *(_QWORD *)&v1327.isContentEditable = 0;
                *(_QWORD *)(v850 + 32) = v853;
                LOWORD(v853) = v1327.containerScrollingNodeID.m_value.m_object.m_identifier;
                *(_BYTE *)(v850 + 42) = BYTE2(v1327.containerScrollingNodeID.m_value.m_object.m_identifier);
                *(_WORD *)(v850 + 40) = v853;
                *(_DWORD *)&v1368[12] = v849 + 1;
              }
              std::__optional_destruct_base<WebKit::WebPopupItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v222);
              if (!--v219)
              {
                v229 = *(_DWORD *)&v1368[12];
                v228 = *(_DWORD *)&v1368[8];
                v4 = *(WTF::StringImpl **)v1368;
                if (*(_DWORD *)&v1368[8] > *(_DWORD *)&v1368[12])
                {
                  v854 = *(WTF::StringImpl **)v1368;
                  if (*(_DWORD *)&v1368[12])
                  {
                    if (*(_DWORD *)&v1368[12] >= 0x5555556u)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196CAD198);
                    }
                    v855 = 48 * *(_DWORD *)&v1368[12];
                    v856 = WTF::fastMalloc((WTF *)(48 * *(unsigned int *)&v1368[12]));
                    v228 = (v855 & 0xFFFFFFF0) / 0x30;
                    if ((WTF::StringImpl *)v856 == v4)
                    {
                      v854 = v4;
                    }
                    else
                    {
                      v854 = (WTF::StringImpl *)v856;
                      WTF::VectorMover<false,WebKit::WebPopupItem>::move(v4, (WTF::StringImpl *)((char *)v4 + 48 * v229), v856);
                    }
                  }
                  if (v4)
                  {
                    if (v854 == v4)
                    {
                      v228 = 0;
                      v854 = 0;
                      *(_QWORD *)v1368 = 0;
                      *(_DWORD *)&v1368[8] = 0;
                    }
                    WTF::fastFree(v4, v213);
                  }
                  v4 = v854;
                }
                goto LABEL_797;
              }
            }
LABEL_1674:
            std::__optional_destruct_base<WebKit::WebPopupItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v222);
            WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1368, v857);
            goto LABEL_1675;
          }
          if (v219)
          {
            v221 = WTF::fastMalloc((WTF *)(48 * v219));
            *(_DWORD *)&v1368[8] = 48 * (int)v219 / 0x30u;
            *(_QWORD *)v1368 = v221;
            do
            {
              IPC::Decoder::decode<WebKit::WebPopupItem>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
              if (!LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
                goto LABEL_1674;
              v223 = *(_DWORD *)&v1368[12];
              if (*(_DWORD *)&v1368[12] == *(_DWORD *)&v1368[8])
              {
                WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPopupItem>((unsigned int *)v1368, (unint64_t)&v1327);
              }
              else
              {
                v224 = *(_QWORD *)v1368 + 48 * *(unsigned int *)&v1368[12];
                *(_BYTE *)v224 = v1327.request.point.m_x;
                v225 = *(_QWORD *)&v1327.request.includeSnapshot;
                *(_QWORD *)&v1327.request.includeSnapshot = 0;
                *(_QWORD *)(v224 + 8) = v225;
                *(_WORD *)(v224 + 16) = *(_WORD *)&v1327.canBeValid;
                v226 = *(_QWORD *)&v1327.isLink;
                *(_QWORD *)&v1327.isLink = 0;
                *(_QWORD *)(v224 + 24) = v226;
                v227 = *(_QWORD *)&v1327.isContentEditable;
                *(_QWORD *)&v1327.isContentEditable = 0;
                *(_QWORD *)(v224 + 32) = v227;
                LOWORD(v227) = v1327.containerScrollingNodeID.m_value.m_object.m_identifier;
                *(_BYTE *)(v224 + 42) = BYTE2(v1327.containerScrollingNodeID.m_value.m_object.m_identifier);
                *(_WORD *)(v224 + 40) = v227;
                *(_DWORD *)&v1368[12] = v223 + 1;
              }
              std::__optional_destruct_base<WebKit::WebPopupItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v222);
              --v219;
            }
            while (v219);
            v4 = *(WTF::StringImpl **)v1368;
            v228 = *(_DWORD *)&v1368[8];
            v229 = *(_DWORD *)&v1368[12];
          }
          else
          {
            v229 = 0;
            v228 = 0;
            v4 = 0;
          }
LABEL_797:
          *(_QWORD *)v1368 = 0;
          *(_QWORD *)v1321 = v4;
          *(_QWORD *)&v1368[8] = 0;
          *(_DWORD *)&v1321[8] = v228;
          *(_DWORD *)&v1321[12] = v229;
          v1321[16] = 1;
          WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1368, v213);
          v423 = *((_QWORD *)p_includeSnapshot + 1);
          v33 = *(WTF::StringImpl **)p_includeSnapshot;
          v424 = ((*((_QWORD *)p_includeSnapshot + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)p_includeSnapshot;
          if (v423 < v424 || v423 - v424 <= 3)
          {
            v872 = 0;
            v873 = 0;
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v874 = *((_QWORD *)p_includeSnapshot + 3);
            if (v874)
            {
              if (v423)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v874 + 16))(v874);
                v873 = *(_QWORD *)p_includeSnapshot;
                v872 = *((_QWORD *)p_includeSnapshot + 1);
              }
              else
              {
                v872 = 0;
                v873 = 0;
              }
            }
          }
          else
          {
            v425 = (_DWORD *)((char *)v33 + v424);
            *((_QWORD *)p_includeSnapshot + 2) = v425 + 1;
            if (v33)
            {
              LODWORD(v14) = *v425;
              IPC::ArgumentCoder<WebKit::PlatformPopupMenuData,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
              if (v1368[16]
                || (v33 = *(WTF::StringImpl **)p_includeSnapshot,
                    v876 = *((_QWORD *)p_includeSnapshot + 1),
                    *(_QWORD *)p_includeSnapshot = 0,
                    *((_QWORD *)p_includeSnapshot + 1) = 0,
                    (v877 = *((_QWORD *)p_includeSnapshot + 3)) != 0)
                && v876
                && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v877 + 16))(v877, v33), v1368[16]))
              {
                if (!(_BYTE)v1313 || !v1301)
                  goto LABEL_2630;
                v1327.request = *(InteractionInformationRequest *)v1312;
                *(_OWORD *)&v1327.canBeValid = *(_OWORD *)v1300;
                *(_QWORD *)v1321 = 0;
                *(_QWORD *)&v1321[8] = 0;
                *(_QWORD *)&v1327.isContentEditable = v220;
                v1327.containerScrollingNodeID.m_value.m_object.m_identifier = (unint64_t)v4;
                v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = __PAIR64__(v229, v228);
                *(_DWORD *)&v1327.isDataDetectorLink = (_DWORD)v14;
                v1327.adjustedPointForNodeRespondingToClickEvents = *(FloatPoint *)v1368;
                LOWORD(v1327.url.m_string.m_impl.m_ptr) = *(_WORD *)&v1368[8];
                BYTE2(v1327.url.m_string.m_impl.m_ptr) = v1368[10];
                *((_BYTE *)&v1327.url + 8) = 1;
                WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1321, v33);
                WebKit::WebPageProxy::showPopupMenuFromFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (const WebCore::IntRect *)&v1327.canBeValid, v220, (uint64_t)&v1327.containerScrollingNodeID, v14, (uint64_t)&v1327.adjustedPointForNodeRespondingToClickEvents);
                if (*((_BYTE *)&v1327.url + 8))
                {
                  v427 = (const void *)v1327.adjustedPointForNodeRespondingToClickEvents;
                  v1327.adjustedPointForNodeRespondingToClickEvents = 0;
                  if (v427)
                    CFRelease(v427);
                  WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.containerScrollingNodeID, v426);
                }
LABEL_1677:
                if (!v13)
                  return;
                goto LABEL_1678;
              }
              goto LABEL_1708;
            }
            v872 = v423;
            v873 = 0;
          }
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v875 = *((_QWORD *)p_includeSnapshot + 3);
          if (v875 && v872)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v875 + 16))(v875, v873);
LABEL_1708:
          WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1321, v33);
LABEL_1676:
          v861 = *(_QWORD *)p_includeSnapshot;
          v862 = *((_QWORD *)p_includeSnapshot + 1);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v863 = *((_QWORD *)p_includeSnapshot + 3);
          if (v863 && v862)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v863 + 16))(v863, v861);
          goto LABEL_1677;
        }
        v820 = v212;
        v821 = 0;
      }
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v823 = *((_QWORD *)p_includeSnapshot + 3);
      if (v823 && v820)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v823 + 16))(v823, v821, v820);
      goto LABEL_1676;
    case 0x810:
      IPC::ArgumentCoder<WebCore::ShareDataWithParsedURL,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (LOBYTE(v1327.imageURL.m_string.m_impl.m_ptr))
        goto LABEL_261;
      v705 = *(_QWORD *)p_includeSnapshot;
      v706 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v707 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v707 || !v706)
        goto LABEL_1415;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v707 + 16))(v707, v705);
      if (!LOBYTE(v1327.imageURL.m_string.m_impl.m_ptr))
      {
        v672 = *((_QWORD *)p_includeSnapshot + 3);
        v670 = *(_QWORD *)p_includeSnapshot;
        v671 = *((_QWORD *)p_includeSnapshot + 1);
        goto LABEL_1425;
      }
LABEL_261:
      request = v1327.request;
      v165 = *(_OWORD *)&v1327.canBeValid;
      memset(&v1327, 0, 40);
      *(InteractionInformationRequest *)v1368 = request;
      *(_OWORD *)&v1368[16] = v165;
      *(_QWORD *)&v1368[32] = *(_QWORD *)&v1327.isContentEditable;
      v1368[40] = 0;
      v1369[16] = 0;
      if (*((_BYTE *)&v1327.url + 8))
      {
        v166 = v1327.containerScrollingNodeID.m_value.m_object.m_identifier;
        v1327.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
        *(_QWORD *)&v1368[40] = v166;
        *(_OWORD *)&v1368[48] = *(_OWORD *)&v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
        *(_OWORD *)v1369 = *(_OWORD *)&v1327.adjustedPointForNodeRespondingToClickEvents.m_x;
        LODWORD(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) &= ~1u;
        v1369[16] = 1;
      }
      v167 = *(_QWORD *)&v1327.url.m_userEnd;
      *(_QWORD *)&v1327.url.m_userEnd = 0;
      *(_QWORD *)&v1369[24] = v167;
      v168 = *(_QWORD *)&v1327.url.m_hostEnd;
      *(_QWORD *)&v1327.url.m_hostEnd = 0;
      *(_QWORD *)&v1369[32] = v168;
      v1369[40] = v1327.url.m_pathEnd;
      v1369[48] = 1;
      WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.url.m_userEnd, v163);
      if (*((_BYTE *)&v1327.url + 8))
      {
        v170 = (WTF::StringImpl *)v1327.containerScrollingNodeID.m_value.m_object.m_identifier;
        v1327.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
        if (v170)
        {
          if (*(_DWORD *)v170 == 2)
            WTF::StringImpl::destroy(v170, v169);
          else
            *(_DWORD *)v170 -= 2;
        }
      }
      WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.isLink, v169);
      v401 = *(WTF::StringImpl **)&v1327.canBeValid;
      *(_QWORD *)&v1327.canBeValid = 0;
      if (v401)
      {
        if (*(_DWORD *)v401 == 2)
          WTF::StringImpl::destroy(v401, v400);
        else
          *(_DWORD *)v401 -= 2;
      }
      v402 = *(WTF::StringImpl **)&v1327.request.includeSnapshot;
      *(_QWORD *)&v1327.request.includeSnapshot = 0;
      if (v402)
      {
        if (*(_DWORD *)v402 == 2)
          WTF::StringImpl::destroy(v402, v400);
        else
          *(_DWORD *)v402 -= 2;
      }
      v403 = (WTF::StringImpl *)v1327.request.point;
      v1327.request.point = 0;
      if (v403)
      {
        if (*(_DWORD *)v403 == 2)
          WTF::StringImpl::destroy(v403, v400);
        else
          *(_DWORD *)v403 -= 2;
      }
      v404 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if ((_BYTE)v405)
      {
        v1327.request.point = (IntPoint)v404;
        p_includeSnapshot = &v1327.request.includeSnapshot;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1327.request.includeSnapshot, (unsigned __int8 **)v12);
        v406 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v406 = off_1E34FBEF8;
        *(IntPoint *)(v406 + 8) = v1327.request.point;
        v407 = *(_QWORD *)&v1327.request.includeSnapshot;
        *(_QWORD *)&v1327.request.includeSnapshot = 0;
        *(_QWORD *)(v406 + 16) = v407;
        *(_QWORD *)v1321 = v406;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1327.request.includeSnapshot);
        if (!v1369[48])
          goto LABEL_2630;
        WebKit::WebPageProxy::showShareSheet(v13, v12, (uint64_t)v1368, (uint64_t)v1321);
        v408 = *(_QWORD *)v1321;
        *(_QWORD *)v1321 = 0;
        if (v408)
          (*(void (**)(uint64_t))(*(_QWORD *)v408 + 8))(v408);
        if (!v1369[48])
          goto LABEL_1678;
      }
      WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1369[24], v405);
      if (v1369[16])
      {
        v410 = *(WTF::StringImpl **)&v1368[40];
        *(_QWORD *)&v1368[40] = 0;
        if (v410)
        {
          if (*(_DWORD *)v410 == 2)
            WTF::StringImpl::destroy(v410, v409);
          else
            *(_DWORD *)v410 -= 2;
        }
      }
      WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1368[24], v409);
      v428 = *(WTF::StringImpl **)&v1368[16];
      *(_QWORD *)&v1368[16] = 0;
      if (v428)
      {
        if (*(_DWORD *)v428 == 2)
          WTF::StringImpl::destroy(v428, v54);
        else
          *(_DWORD *)v428 -= 2;
      }
      v399 = *(WTF::StringImpl **)&v1368[8];
      *(_QWORD *)&v1368[8] = 0;
      if (v399)
      {
LABEL_817:
        if (*(_DWORD *)v399 == 2)
          WTF::StringImpl::destroy(v399, v54);
        else
          *(_DWORD *)v399 -= 2;
      }
LABEL_820:
      v58 = *(WTF::StringImpl **)v1368;
      *(_QWORD *)v1368 = 0;
      if (!v58)
        goto LABEL_1678;
      goto LABEL_966;
    case 0x811:
      IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!v1368[16])
        goto LABEL_1354;
      IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
      if (!v1321[8])
        goto LABEL_1354;
      if (!v1368[16])
        goto LABEL_2630;
      v1327.request = *(InteractionInformationRequest *)v1368;
      *(_QWORD *)&v1327.canBeValid = *(_QWORD *)v1321;
      v1327.isLink = 1;
      WebKit::WebPageProxy::showValidationMessage((WebKit::WebPageProxy *)v13, (const IntRect *)&v1327, (const WTF::String *)&v1327.canBeValid);
      if (!v1327.isLink)
        goto LABEL_1678;
      goto LABEL_927;
    case 0x81E:
      v192 = *((_QWORD *)p_includeSnapshot + 1);
      v193 = *(_QWORD *)p_includeSnapshot;
      v194 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
      if (v192 <= v194)
      {
        v708 = 0;
        v709 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v710 = *((_QWORD *)p_includeSnapshot + 3);
        if (v710)
        {
          if (v192)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v710 + 16))(v710, v193, v192);
            v709 = *(_QWORD *)p_includeSnapshot;
            v708 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v708 = 0;
            v709 = 0;
          }
        }
      }
      else
      {
        v195 = (unsigned __int8 *)(v193 + v194);
        *((_QWORD *)p_includeSnapshot + 2) = v195 + 1;
        if (v193)
        {
          v196 = *v195;
          if (v196 < 7)
          {
            WebKit::WebPageProxy::takeFocus(v13, v196);
            goto LABEL_1678;
          }
LABEL_1418:
          v712 = *(_QWORD *)p_includeSnapshot;
          v713 = *((_QWORD *)p_includeSnapshot + 1);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v714 = *((_QWORD *)p_includeSnapshot + 3);
          if (!v714)
            goto LABEL_1678;
          if (!v713)
            goto LABEL_1678;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v714 + 16))(v714, v712);
          v670 = *(_QWORD *)p_includeSnapshot;
          v675 = *((_QWORD *)p_includeSnapshot + 1);
          v672 = *((_QWORD *)p_includeSnapshot + 3);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          if (!v672)
            goto LABEL_1678;
          goto LABEL_1557;
        }
        v708 = v192;
        v709 = 0;
      }
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v711 = *((_QWORD *)p_includeSnapshot + 3);
      if (v711 && v708)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v711 + 16))(v711, v709);
      goto LABEL_1418;
    case 0x820:
      IPC::Decoder::decode<std::tuple<WebCore::Color>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.request.includeSnapshot)
        WebKit::WebPageProxy::themeColorChanged(v13, (const WebCore::Color *)&v1327);
LABEL_308:
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v56);
      goto LABEL_1678;
    case 0x824:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntPoint>>((uint64_t *)p_includeSnapshot, &v1327);
      if (v1327.isLink)
        WebKit::WebPageProxy::updateRemoteFrameSize(v13, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid);
      goto LABEL_1678;
    case 0x829:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!v1368[16])
        goto LABEL_1402;
      v130 = *((_QWORD *)p_includeSnapshot + 1);
      v131 = *(_QWORD *)p_includeSnapshot;
      v157 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
      if (v130 <= v157)
      {
        v760 = 0;
        v761 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v762 = *((_QWORD *)p_includeSnapshot + 3);
        if (v762)
        {
          if (v130)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v762 + 16))(v762);
            v761 = *(_QWORD *)p_includeSnapshot;
            v760 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v760 = 0;
            v761 = 0;
          }
        }
      }
      else
      {
        v158 = (unsigned __int8 *)(v131 + v157);
        *((_QWORD *)p_includeSnapshot + 2) = v158 + 1;
        if (v131)
        {
          v159 = *v158;
          if (v159 < 2)
          {
            v1327.request = *(InteractionInformationRequest *)v1368;
            v1327.canBeValid = v159 != 0;
            v1327.isLink = 1;
            WebKit::WebPageProxy::willGoToBackForwardListItem(v13, &v1327, v159 != 0);
            goto LABEL_1678;
          }
LABEL_1506:
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v674 = *((_QWORD *)p_includeSnapshot + 3);
          if (v674)
          {
LABEL_1507:
            if (v130)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v674 + 16))(v674, v131);
          }
          goto LABEL_1402;
        }
        v760 = v130;
        v761 = 0;
      }
      v130 = 0;
      v131 = 0;
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v763 = *((_QWORD *)p_includeSnapshot + 3);
      if (v763)
      {
        if (v760)
        {
LABEL_1504:
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v763 + 16))(v763, v761, v760);
LABEL_1505:
          v131 = *(_QWORD *)p_includeSnapshot;
          v130 = *((_QWORD *)p_includeSnapshot + 1);
        }
        else
        {
LABEL_1517:
          v130 = 0;
          v131 = 0;
        }
      }
      goto LABEL_1506;
    case 0x82A:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!v1368[16] || (IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321), !v1321[8]))
      {
        v175 = 0;
        LOBYTE(v1327.request.point.m_x) = 0;
        LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
        goto LABEL_571;
      }
      v171 = *((_QWORD *)p_includeSnapshot + 1);
      v33 = *(WTF::StringImpl **)p_includeSnapshot;
      v172 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
      if (v171 < v172 || v171 - v172 <= 7)
      {
        v816 = 0;
        v817 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v818 = *((_QWORD *)p_includeSnapshot + 3);
        if (v818)
        {
          if (v171)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v818 + 16))(v818);
            v817 = *(_QWORD *)p_includeSnapshot;
            v816 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v816 = 0;
            v817 = 0;
          }
        }
      }
      else
      {
        v173 = (double *)((char *)v33 + v172);
        *((_QWORD *)p_includeSnapshot + 2) = v173 + 1;
        if (v33)
        {
          v5 = *v173;
          ShouldRelaxThirdPartyCookie = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>((uint64_t *)p_includeSnapshot);
          if (ShouldRelaxThirdPartyCookie > 0xFFu)
          {
            if (!v1368[16] || !v1321[8])
              goto LABEL_2630;
            v176 = 0;
            v1327.request = *(InteractionInformationRequest *)v1368;
            v415 = *(_QWORD *)v1321;
            *(_QWORD *)v1321 = 0;
            *(_QWORD *)&v1327.canBeValid = v415;
            *(double *)&v1327.isLink = v5;
            v1327.isContentEditable = ShouldRelaxThirdPartyCookie;
            v175 = 1;
LABEL_768:
            LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = v175;
            if (v1321[8])
            {
              v416 = *(WTF::StringImpl **)v1321;
              *(_QWORD *)v1321 = 0;
              if (v416)
              {
                if (*(_DWORD *)v416 == 2)
                  WTF::StringImpl::destroy(v416, v33);
                else
                  *(_DWORD *)v416 -= 2;
              }
            }
            if (!v176)
            {
LABEL_918:
              if (v175)
              {
                WebKit::WebPageProxy::willPerformClientRedirectForFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (uint64_t)&v1327.canBeValid, v5);
                if (LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier))
                  goto LABEL_927;
              }
              goto LABEL_1678;
            }
LABEL_571:
            v344 = *(_QWORD *)p_includeSnapshot;
            v345 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v346 = *((_QWORD *)p_includeSnapshot + 3);
            if (v346 && v345)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v346 + 16))(v346, v344);
            goto LABEL_918;
          }
LABEL_273:
          v175 = 0;
          LOBYTE(v1327.request.point.m_x) = 0;
          v176 = 1;
          goto LABEL_768;
        }
        v816 = v171;
        v817 = 0;
      }
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v819 = *((_QWORD *)p_includeSnapshot + 3);
      if (v819 && v816)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v819 + 16))(v819, v817);
      goto LABEL_273;
    case 0x82C:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1312);
      if ((_BYTE)v1313
        && (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1321), v1321[16])&& (IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)p_includeSnapshot, (uint64_t)v1368), v1368[16]))
      {
        IPC::Decoder::decode<WebKit::UserData>((uint64_t *)p_includeSnapshot, (uint64_t)v1300);
        v177 = LOBYTE(v1300[1]);
        if (LOBYTE(v1300[1]))
        {
          if (!(_BYTE)v1313 || !v1321[16] || !v1368[16])
            goto LABEL_2630;
          v1327.request = *(InteractionInformationRequest *)v1312;
          *(_OWORD *)&v1327.canBeValid = *(_OWORD *)v1321;
          v178 = *(_QWORD *)v1368;
          *(_QWORD *)v1368 = 0;
          *(_QWORD *)&v1327.isContentEditable = v178;
          v179 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1327.containerScrollingNodeID.m_value.m_object.m_identifier = v179;
          v4 = v1300[0];
          if (v1300[0])
          {
            CFRetain(*((CFTypeRef *)v1300[0] + 1));
            v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = (unint64_t)v4;
            LODWORD(v4) = 1;
            v1327.isDataDetectorLink = 1;
            if (LOBYTE(v1300[1]))
            {
              v180 = v1300[0];
              v1300[0] = 0;
              if (v180)
                CFRelease(*((CFTypeRef *)v180 + 1));
            }
          }
          else
          {
            v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
            LODWORD(v4) = 1;
            v1327.isDataDetectorLink = 1;
          }
        }
        else
        {
          LODWORD(v4) = 0;
          LOBYTE(v1327.request.point.m_x) = 0;
          v1327.isDataDetectorLink = 0;
        }
        if (v1368[16])
          WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1368, v33);
        if (v177)
        {
LABEL_870:
          if (!(_DWORD)v4)
            goto LABEL_1678;
          v460 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!(_BYTE)v461)
            goto LABEL_876;
          *(_QWORD *)v1368 = v460;
          p_includeSnapshot = &v1368[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v462 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v462 = off_1E34FBFC0;
          v462[1] = *(_QWORD *)v1368;
          v463 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v462[2] = v463;
          *(_QWORD *)v1321 = v462;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          if (!v1327.isDataDetectorLink)
            goto LABEL_2630;
          WebKit::WebPageProxy::willSubmitForm(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid, *(uint64_t *)&v1327.isLink, (uint64_t)&v1327.isContentEditable, (CFTypeRef **)&v1327.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t)v1321);
          v464 = *(_QWORD *)v1321;
          *(_QWORD *)v1321 = 0;
          if (v464)
            (*(void (**)(uint64_t))(*(_QWORD *)v464 + 8))(v464);
          if (v1327.isDataDetectorLink)
          {
LABEL_876:
            v465 = v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
            v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
            if (v465)
              CFRelease(*(CFTypeRef *)(v465 + 8));
            WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.isContentEditable, v461);
          }
          goto LABEL_1678;
        }
      }
      else
      {
        LODWORD(v4) = 0;
        LOBYTE(v1327.request.point.m_x) = 0;
        v1327.isDataDetectorLink = 0;
      }
      v338 = *(_QWORD *)p_includeSnapshot;
      v339 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v340 = *((_QWORD *)p_includeSnapshot + 3);
      if (v340 && v339)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v340 + 16))(v340, v338);
      goto LABEL_870;
    default:
      if (*((unsigned __int16 *)p_includeSnapshot + 25) <= 0x7B1u)
      {
        if (*((unsigned __int16 *)p_includeSnapshot + 25) > 0x777u)
        {
          switch(*((_WORD *)p_includeSnapshot + 25))
          {
            case 0x778:
              IPC::Decoder::decode<std::tuple<WebKit::UserData>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
              if (!v1327.request.includeSnapshot)
                goto LABEL_1678;
              WebKit::WebPageProxy::didResignInputElementStrongPasswordAppearance(v13, (CFTypeRef **)&v1327);
              goto LABEL_1125;
            case 0x77D:
              IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((uint64_t *)p_includeSnapshot, &v1327);
              if (v1327.canBeValid)
                WebKit::WebPageProxy::didStartLoadForQuickLookDocumentInMainFrame((WebKit::WebPageProxy *)v13, (WTF::StringImpl **)&v1327, (const WTF::String *)&v1327.request.includeSnapshot);
              goto LABEL_1117;
            case 0x781:
              *(_BYTE *)(v13 + 891) = 0;
              goto LABEL_1678;
            case 0x783:
              if (!*(_BYTE *)(v13 + 733))
              {
                *(_BYTE *)(v13 + 733) = 1;
                WebKit::WebPageProxy::stopMakingViewBlankDueToLackOfRenderingUpdateIfNecessary(v13);
              }
              goto LABEL_1678;
            case 0x785:
              WebKit::WebPageProxy::disableInspectorNodeSearch((WebKit::WebPageProxy *)v13);
              goto LABEL_1678;
            case 0x789:
              WebKit::WebPageProxy::elementDidBlur((WebKit::WebPageProxy *)v13);
              goto LABEL_1678;
            case 0x78A:
              IPC::Decoder::decode<WebKit::FocusedElementInformation>((unint64_t *)p_includeSnapshot, v1368);
              if (!v1391)
              {
                LOBYTE(v1327.request.point.m_x) = 0;
                *((_BYTE *)&v1327.elementContext.var0.var2 + 8) = 0;
                goto LABEL_2053;
              }
              v567 = *((_QWORD *)p_includeSnapshot + 1);
              v33 = *(WTF::StringImpl **)p_includeSnapshot;
              v568 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
              if (v567 <= v568)
              {
                v1039 = 0;
                v1040 = 0;
                *(_QWORD *)p_includeSnapshot = 0;
                *((_QWORD *)p_includeSnapshot + 1) = 0;
                v1041 = *((_QWORD *)p_includeSnapshot + 3);
                if (v1041)
                {
                  if (v567)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v1041 + 16))(v1041);
                    v1040 = *(_QWORD *)p_includeSnapshot;
                    v1039 = *((_QWORD *)p_includeSnapshot + 1);
                  }
                  else
                  {
                    v1039 = 0;
                    v1040 = 0;
                  }
                }
              }
              else
              {
                v569 = (unsigned __int8 *)v33 + v568;
                *((_QWORD *)p_includeSnapshot + 2) = v569 + 1;
                if (v33)
                {
                  v570 = *v569;
                  if (v570 < 2)
                  {
                    v571 = v570 != 0;
                    if (v567 <= v569 + 1 - (unsigned __int8 *)v33)
                    {
                      v1044 = 0;
                      v1045 = 0;
                      *(_QWORD *)p_includeSnapshot = 0;
                      *((_QWORD *)p_includeSnapshot + 1) = 0;
                      v1046 = *((_QWORD *)p_includeSnapshot + 3);
                      if (v1046)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v1046 + 16))(v1046);
                        v1044 = 0;
                        v33 = *(WTF::StringImpl **)p_includeSnapshot;
                        v1222 = *((_QWORD *)p_includeSnapshot + 1);
                        v1223 = *((_QWORD *)p_includeSnapshot + 3);
                        *(_QWORD *)p_includeSnapshot = 0;
                        *((_QWORD *)p_includeSnapshot + 1) = 0;
                        v1045 = 0;
                        if (v1223)
                        {
                          if (v1222)
                          {
                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1223 + 16))(v1223, v33);
                            v1045 = *(_QWORD *)p_includeSnapshot;
                            v1044 = *((_QWORD *)p_includeSnapshot + 1);
                          }
                        }
                      }
                    }
                    else
                    {
                      *((_QWORD *)p_includeSnapshot + 2) = v569 + 2;
                      v572 = v569[1];
                      if (v572 < 2)
                      {
                        LOBYTE(v4) = v572 != 0;
                        v573 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>((uint64_t *)p_includeSnapshot);
                        if ((v573 & 0xFF0000) != 0)
                        {
                          v12 = v573;
                          IPC::Decoder::decode<WebKit::UserData>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
                          if (v1321[8])
                          {
                            if (!v1391)
                              goto LABEL_2630;
                            std::__tuple_leaf<0ul,WebKit::FocusedElementInformation,false>::__tuple_leaf[abi:sn180100]<WebKit::FocusedElementInformation,void>((uint64_t)&v1327, (__int128 *)v1368);
                            LOBYTE(v1327.dataDetectorBounds.m_size.m_width) = v571;
                            BYTE1(v1327.dataDetectorBounds.m_size.m_width) = (_BYTE)v4;
                            HIWORD(v1327.dataDetectorBounds.m_size.m_width) = v12;
                            v574 = *(_QWORD *)v1321;
                            if (*(_QWORD *)v1321)
                              CFRetain(*(CFTypeRef *)(*(_QWORD *)v1321 + 8));
                            v1327.elementContext.var0.var2.m_identifier = v574;
                            *((_BYTE *)&v1327.elementContext.var0.var2 + 8) = 1;
                            if (v1321[8])
                            {
                              v575 = *(_QWORD *)v1321;
                              *(_QWORD *)v1321 = 0;
                              if (v575)
                                CFRelease(*(CFTypeRef *)(v575 + 8));
                            }
LABEL_2051:
                            if (v1391)
                              WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v1368, v33);
LABEL_2053:
                            if (*((_BYTE *)&v1327.elementContext.var0.var2 + 8)
                              || (v1049 = *(_QWORD *)p_includeSnapshot,
                                  v1050 = *((_QWORD *)p_includeSnapshot + 1),
                                  *(_QWORD *)p_includeSnapshot = 0,
                                  *((_QWORD *)p_includeSnapshot + 1) = 0,
                                  (v1051 = *((_QWORD *)p_includeSnapshot + 3)) != 0)
                              && v1050
                              && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1051 + 16))(v1051, v1049),
                                  *((_BYTE *)&v1327.elementContext.var0.var2 + 8)))
                            {
                              WebKit::WebPageProxy::elementDidFocus(v13, (uint64_t)&v1327, LOBYTE(v1327.dataDetectorBounds.m_size.m_width), BYTE1(v1327.dataDetectorBounds.m_size.m_width), HIWORD(v1327.dataDetectorBounds.m_size.m_width), (API::Object **)&v1327.elementContext);
                              if (*((_BYTE *)&v1327.elementContext.var0.var2 + 8))
                              {
                                v1048 = v1327.elementContext.var0.var2.m_identifier;
                                v1327.elementContext.var0.var2.m_identifier = 0;
                                if (v1048)
                                  CFRelease(*(CFTypeRef *)(v1048 + 8));
                                v555 = &v1327;
LABEL_2058:
                                WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v555, v554);
                              }
                            }
                            goto LABEL_1678;
                          }
                        }
LABEL_2050:
                        LOBYTE(v1327.request.point.m_x) = 0;
                        *((_BYTE *)&v1327.elementContext.var0.var2 + 8) = 0;
                        goto LABEL_2051;
                      }
                      v1044 = v567;
                      v1045 = (uint64_t)v33;
                    }
                    *(_QWORD *)p_includeSnapshot = 0;
                    *((_QWORD *)p_includeSnapshot + 1) = 0;
                    v1047 = *((_QWORD *)p_includeSnapshot + 3);
                    if (v1047 && v1044)
                      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1047 + 16))(v1047, v1045, v1044);
                    goto LABEL_2050;
                  }
LABEL_2045:
                  *(_QWORD *)p_includeSnapshot = 0;
                  *((_QWORD *)p_includeSnapshot + 1) = 0;
                  v1043 = *((_QWORD *)p_includeSnapshot + 3);
                  if (v1043 && v567)
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1043 + 16))(v1043, v33);
                  goto LABEL_2050;
                }
                v1039 = v567;
                v1040 = 0;
              }
              v567 = 0;
              v33 = 0;
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1042 = *((_QWORD *)p_includeSnapshot + 3);
              if (v1042)
              {
                if (v1039)
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1042 + 16))(v1042, v1040, v1039);
                  v33 = *(WTF::StringImpl **)p_includeSnapshot;
                  v567 = *((_QWORD *)p_includeSnapshot + 1);
                }
                else
                {
                  v567 = 0;
                  v33 = 0;
                }
              }
              goto LABEL_2045;
            case 0x78B:
              WebKit::WebPageProxy::enableInspectorNodeSearch((WebKit::WebPageProxy *)v13);
              goto LABEL_1678;
            case 0x793:
              v582 = IPC::Decoder::decode<WebCore::InputMode>((uint64_t *)p_includeSnapshot);
              if (v582 > 0xFFu)
              {
                WebKit::WebPageProxy::focusedElementDidChangeInputMode(v13, v582);
                goto LABEL_1678;
              }
              v670 = *(_QWORD *)p_includeSnapshot;
              v675 = *((_QWORD *)p_includeSnapshot + 1);
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v672 = *((_QWORD *)p_includeSnapshot + 3);
              if (v672)
                goto LABEL_1557;
              goto LABEL_1678;
            case 0x798:
              IPC::Decoder::decode<std::tuple<WebKit::UserData>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
              if (!v1327.request.includeSnapshot)
                goto LABEL_1678;
              WebKit::WebPageProxy::handleAutoFillButtonClick(v13, (CFTypeRef **)&v1327);
LABEL_1125:
              if (!v1327.request.includeSnapshot)
                goto LABEL_1678;
              v581 = v1327.request.point;
              v1327.request.point = 0;
              if (!*(_QWORD *)&v581)
                goto LABEL_1678;
              point = *(const void **)(*(_QWORD *)&v581 + 8);
              goto LABEL_1590;
            case 0x799:
              IPC::ArgumentCoder<WebKit::WebAutocorrectionContext,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
              if (LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
                goto LABEL_1110;
              v975 = *(_QWORD *)p_includeSnapshot;
              v976 = *((_QWORD *)p_includeSnapshot + 1);
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v915 = *((_QWORD *)p_includeSnapshot + 3);
              if (v915)
              {
                if (v976)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v915 + 16))(v915, v975);
                  if (LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
                  {
LABEL_1110:
                    *(InteractionInformationRequest *)v1368 = v1327.request;
                    *(_OWORD *)&v1368[16] = *(_OWORD *)&v1327.canBeValid;
                    *(_OWORD *)&v1368[32] = *(_OWORD *)&v1327.isContentEditable;
                    v1368[48] = 1;
                    WebKit::WebPageProxy::handleAutocorrectionContext((WebKit::WebPageProxy *)v13, (const WebAutocorrectionContext *)v1368);
                    if (v1368[48])
                    {
                      v580 = *(WTF::StringImpl **)&v1368[24];
                      *(_QWORD *)&v1368[24] = 0;
                      if (v580)
                      {
                        if (*(_DWORD *)v580 == 2)
                          WTF::StringImpl::destroy(v580, v54);
                        else
                          *(_DWORD *)v580 -= 2;
                      }
                      v625 = *(WTF::StringImpl **)&v1368[16];
                      *(_QWORD *)&v1368[16] = 0;
                      if (v625)
                      {
                        if (*(_DWORD *)v625 == 2)
                          WTF::StringImpl::destroy(v625, v54);
                        else
                          *(_DWORD *)v625 -= 2;
                      }
                      v626 = *(WTF::StringImpl **)&v1368[8];
                      *(_QWORD *)&v1368[8] = 0;
                      if (v626)
                      {
                        if (*(_DWORD *)v626 == 2)
                          WTF::StringImpl::destroy(v626, v54);
                        else
                          *(_DWORD *)v626 -= 2;
                      }
                      v58 = *(WTF::StringImpl **)v1368;
                      *(_QWORD *)v1368 = 0;
                      if (v58)
                        goto LABEL_1151;
                    }
                    goto LABEL_1678;
                  }
                  v913 = *(_QWORD *)p_includeSnapshot;
                  v976 = *((_QWORD *)p_includeSnapshot + 1);
                  v915 = *((_QWORD *)p_includeSnapshot + 3);
LABEL_1958:
                  *(_QWORD *)p_includeSnapshot = 0;
                  *((_QWORD *)p_includeSnapshot + 1) = 0;
                  if (!v915)
                    goto LABEL_1678;
                  goto LABEL_1977;
                }
              }
              else
              {
                v976 = 0;
              }
              v913 = 0;
              goto LABEL_1958;
            case 0x79A:
              v561 = *((_QWORD *)p_includeSnapshot + 1);
              v562 = *(_QWORD *)p_includeSnapshot;
              v563 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
              if (v561 <= v563)
              {
                v971 = 0;
                v972 = 0;
                *(_QWORD *)p_includeSnapshot = 0;
                *((_QWORD *)p_includeSnapshot + 1) = 0;
                v973 = *((_QWORD *)p_includeSnapshot + 3);
                if (v973)
                {
                  if (v561)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v973 + 16))(v973);
                    v972 = *(_QWORD *)p_includeSnapshot;
                    v971 = *((_QWORD *)p_includeSnapshot + 1);
                  }
                  else
                  {
                    v971 = 0;
                    v972 = 0;
                  }
                }
              }
              else
              {
                v564 = (unsigned __int8 *)(v562 + v563);
                v565 = v562 + v563 + 1;
                *((_QWORD *)p_includeSnapshot + 2) = v565;
                if (v562)
                {
                  v566 = *v564;
                  if (v566 >= 4)
                    goto LABEL_2074;
                  if (v561 <= v565 - v562)
                  {
                    *(_QWORD *)p_includeSnapshot = 0;
                    *((_QWORD *)p_includeSnapshot + 1) = 0;
                    v1053 = *((_QWORD *)p_includeSnapshot + 3);
                    if (v1053)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v1053 + 16))(v1053);
                      v1224 = *(_QWORD *)p_includeSnapshot;
                      v1225 = *((_QWORD *)p_includeSnapshot + 1);
                      v1226 = *((_QWORD *)p_includeSnapshot + 3);
                      *(_QWORD *)p_includeSnapshot = 0;
                      *((_QWORD *)p_includeSnapshot + 1) = 0;
                      if (v1226)
                      {
                        if (v1225)
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1226 + 16))(v1226, v1224);
                      }
                    }
                  }
                  else
                  {
                    *((_QWORD *)p_includeSnapshot + 2) = v564 + 2;
                    if (v564[1] < 8uLL)
                    {
                      (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v13 + 104) + 440))(*(_QWORD *)(v13 + 104), v13, v566);
                      goto LABEL_1678;
                    }
                  }
                  goto LABEL_2073;
                }
                v971 = v561;
                v972 = 0;
              }
              v561 = 0;
              v562 = 0;
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v974 = *((_QWORD *)p_includeSnapshot + 3);
              if (!v974)
                goto LABEL_2074;
              if (v971)
              {
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v974 + 16))(v974, v972, v971);
LABEL_2073:
                v562 = *(_QWORD *)p_includeSnapshot;
                v561 = *((_QWORD *)p_includeSnapshot + 1);
                goto LABEL_2074;
              }
              v561 = 0;
              v562 = 0;
LABEL_2074:
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1054 = *((_QWORD *)p_includeSnapshot + 3);
              if (v1054 && v561)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1054 + 16))(v1054, v562);
              v670 = *(_QWORD *)p_includeSnapshot;
              v675 = *((_QWORD *)p_includeSnapshot + 1);
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v672 = *((_QWORD *)p_includeSnapshot + 3);
              if (!v672)
                goto LABEL_1678;
              goto LABEL_1557;
            case 0x79D:
              IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>((uint64_t *)p_includeSnapshot, &v1327);
              if (v1327.canBeValid)
                WebKit::WebPageProxy::handleMessageShared((WebKit::WebPageProxy *)v13, (WebKit::WebProcessProxy **)(v13 + 208), (WTF::StringImpl **)&v1327, (CFTypeRef **)&v1327.request.includeSnapshot);
              goto LABEL_1108;
            case 0x79E:
              IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>((uint64_t *)p_includeSnapshot, &v1327);
              if (!v1327.canBeValid)
                goto LABEL_1108;
              v576 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
              if (!(_BYTE)v560)
                goto LABEL_1108;
              *(_QWORD *)v1368 = v576;
              p_includeSnapshot = &v1368[8];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
              v577 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v577 = off_1E34FC0B0;
              v577[1] = *(_QWORD *)v1368;
              v578 = *(_QWORD *)&v1368[8];
              *(_QWORD *)&v1368[8] = 0;
              v577[2] = v578;
              *(_QWORD *)v1321 = v577;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
              if (!v1327.canBeValid)
                goto LABEL_2630;
              WebKit::WebPageProxy::handleMessageWithAsyncReply(v13, (WTF::StringImpl **)&v1327, (uint64_t *)&v1327.request.includeSnapshot, (uint64_t *)v1321);
              v579 = *(_QWORD *)v1321;
              *(_QWORD *)v1321 = 0;
              if (v579)
                (*(void (**)(uint64_t))(*(_QWORD *)v579 + 8))(v579);
LABEL_1108:
              std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v560);
              goto LABEL_1678;
            case 0x7A1:
              WebKit::WebPageProxy::hideInspectorHighlight((WebKit::WebPageProxy *)v13);
              goto LABEL_1678;
            case 0x7A2:
              WebKit::WebPageProxy::hideInspectorIndication((WebKit::WebPageProxy *)v13);
              goto LABEL_1678;
            case 0x7A5:
              IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
              if (!v1327.request.includeSnapshot)
                goto LABEL_1678;
              WebKit::WebPageProxy::ignoreWord((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, (const WTF::String *)&v1327);
              goto LABEL_1149;
            case 0x7A7:
              v559 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
              if (v559 >= 0x100u)
                *(_BYTE *)(v13 + 984) = v559 != 0;
              goto LABEL_1678;
            case 0x7A8:
              v583 = *((_QWORD *)p_includeSnapshot + 1);
              v584 = *(_QWORD *)p_includeSnapshot;
              v585 = ((*((_QWORD *)p_includeSnapshot + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)p_includeSnapshot;
              if (v583 < v585 || v583 - v585 <= 3)
              {
                v977 = 0;
                v978 = 0;
                *(_QWORD *)p_includeSnapshot = 0;
                *((_QWORD *)p_includeSnapshot + 1) = 0;
                v979 = *((_QWORD *)p_includeSnapshot + 3);
                if (v979)
                {
                  if (v583)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v979 + 16))(v979);
                    v978 = *(_QWORD *)p_includeSnapshot;
                    v977 = *((_QWORD *)p_includeSnapshot + 1);
                  }
                  else
                  {
                    v977 = 0;
                    v978 = 0;
                  }
                }
              }
              else
              {
                v586 = (unsigned int *)(v584 + v585);
                *((_QWORD *)p_includeSnapshot + 2) = v586 + 1;
                if (v584)
                {
                  v587 = *v586;
                  if (!(v587 >> 28))
                  {
                    WebKit::WebPageProxy::isPlayingMediaDidChange(v13, v587);
                    goto LABEL_1678;
                  }
LABEL_1964:
                  *(_QWORD *)p_includeSnapshot = 0;
                  *((_QWORD *)p_includeSnapshot + 1) = 0;
                  v981 = *((_QWORD *)p_includeSnapshot + 3);
                  if (!v981)
                    goto LABEL_1678;
                  if (!v583)
                    goto LABEL_1678;
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v981 + 16))(v981, v584);
                  v670 = *(_QWORD *)p_includeSnapshot;
                  v675 = *((_QWORD *)p_includeSnapshot + 1);
                  v672 = *((_QWORD *)p_includeSnapshot + 3);
                  *(_QWORD *)p_includeSnapshot = 0;
                  *((_QWORD *)p_includeSnapshot + 1) = 0;
                  if (!v672)
                    goto LABEL_1678;
LABEL_1557:
                  if (!v675)
                    goto LABEL_1678;
LABEL_1558:
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v672 + 16))(v672, v670);
                  goto LABEL_1678;
                }
                v977 = v583;
                v978 = 0;
              }
              v583 = 0;
              v584 = 0;
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v980 = *((_QWORD *)p_includeSnapshot + 3);
              if (v980)
              {
                if (v977)
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v980 + 16))(v980, v978, v977);
                  v584 = *(_QWORD *)p_includeSnapshot;
                  v583 = *((_QWORD *)p_includeSnapshot + 1);
                }
                else
                {
                  v583 = 0;
                  v584 = 0;
                }
              }
              goto LABEL_1964;
            case 0x7A9:
              IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
              if (!v1327.request.includeSnapshot)
                goto LABEL_1678;
              WebKit::WebPageProxy::learnWord((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, (const WTF::String *)&v1327);
              goto LABEL_1149;
            default:
              goto LABEL_1174;
          }
        }
        if (*((unsigned __int16 *)p_includeSnapshot + 25) <= 0x746u)
        {
          switch(*((_WORD *)p_includeSnapshot + 25))
          {
            case 0x72B:
              WebKit::WebPageProxy::assistiveTechnologyMakeFirstResponder((WebKit::WebPageProxy *)v13);
              goto LABEL_1678;
            case 0x72C:
            case 0x72D:
            case 0x72F:
            case 0x731:
              goto LABEL_1174;
            case 0x72E:
              WebKit::WebPageProxy::beginMonitoringCaptureDevices((WebKit::WebPageProxy *)v13);
              goto LABEL_1678;
            case 0x730:
              IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>>((uint64_t *)p_includeSnapshot, &v1327);
              if (v1327.isLink)
                WebKit::WebPageProxy::beginTextRecognitionForVideoInElementFullScreen(v13, *(_QWORD *)&v1327.request.point, *(float *)&v1327.request.includeSnapshot, *(float *)&v1327.request.includeImageData, *(float *)&v1327.canBeValid, *(float *)&v1327.isSelected);
              goto LABEL_1678;
            case 0x732:
              WebKit::WebPageProxy::cancelTextRecognitionForVideoInElementFullScreen((WebKit::WebPageProxy *)v13);
              goto LABEL_1678;
            default:
              switch(*((_WORD *)p_includeSnapshot + 25))
              {
                case 0x73A:
                  IPC::Decoder::decode<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)p_includeSnapshot, &v1327);
                  if (LOBYTE(v1327.imageURL.m_string.m_impl.m_ptr))
                    WebKit::WebPageProxy::contentFilterDidBlockLoadForFrame(v13, (WebKit::AuxiliaryProcessProxy *)v12, (uint64_t)&v1327, *(uint64_t *)&v1327.url.m_hostEnd, *(uint64_t *)&v1327.url.m_pathEnd);
                  std::__optional_destruct_base<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v367);
                  goto LABEL_1678;
                case 0x73C:
                  WebKit::WebPageProxy::couldNotRestorePageState((WebKit::WebPageProxy *)v13);
                  goto LABEL_1678;
                case 0x73D:
                  IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1368);
                  if (!v1368[8])
                    goto LABEL_2034;
                  v588 = *((_QWORD *)p_includeSnapshot + 1);
                  v532 = *(WTF::StringImpl **)p_includeSnapshot;
                  v589 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
                  if (v588 <= v589)
                  {
                    v982 = 0;
                    v983 = 0;
                    *(_QWORD *)p_includeSnapshot = 0;
                    *((_QWORD *)p_includeSnapshot + 1) = 0;
                    v984 = *((_QWORD *)p_includeSnapshot + 3);
                    if (v984)
                    {
                      if (v588)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v984 + 16))(v984);
                        v983 = *(_QWORD *)p_includeSnapshot;
                        v982 = *((_QWORD *)p_includeSnapshot + 1);
                      }
                      else
                      {
                        v982 = 0;
                        v983 = 0;
                      }
                    }
                  }
                  else
                  {
                    v590 = (unsigned __int8 *)v532 + v589;
                    *((_QWORD *)p_includeSnapshot + 2) = v590 + 1;
                    if (v532)
                    {
                      v591 = *v590;
                      if (v591 < 3)
                      {
                        v1327.request.point = *(IntPoint *)v1368;
                        v1327.request.includeSnapshot = v591;
                        v1327.canBeValid = 1;
                        WebKit::WebPageProxy::createInspectorTarget(v13, v12, &v1327, v591);
                        if (v1327.canBeValid)
                          goto LABEL_1150;
                        goto LABEL_1678;
                      }
LABEL_1970:
                      *(_QWORD *)p_includeSnapshot = 0;
                      *((_QWORD *)p_includeSnapshot + 1) = 0;
                      v986 = *((_QWORD *)p_includeSnapshot + 3);
                      if (v986 && v588)
                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v986 + 16))(v986, v532);
                      if (!v1368[8])
                        goto LABEL_1976;
LABEL_1972:
                      v987 = *(WTF::StringImpl **)v1368;
                      *(_QWORD *)v1368 = 0;
                      if (v987)
                      {
                        if (*(_DWORD *)v987 == 2)
                          WTF::StringImpl::destroy(v987, v532);
                        else
                          *(_DWORD *)v987 -= 2;
                      }
                      goto LABEL_1976;
                    }
                    v982 = v588;
                    v983 = 0;
                  }
                  v588 = 0;
                  v532 = 0;
                  *(_QWORD *)p_includeSnapshot = 0;
                  *((_QWORD *)p_includeSnapshot + 1) = 0;
                  v985 = *((_QWORD *)p_includeSnapshot + 3);
                  if (v985)
                  {
                    if (v982)
                    {
                      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v985 + 16))(v985, v983, v982);
                      v532 = *(WTF::StringImpl **)p_includeSnapshot;
                      v588 = *((_QWORD *)p_includeSnapshot + 1);
                    }
                    else
                    {
                      v588 = 0;
                      v532 = 0;
                    }
                  }
                  goto LABEL_1970;
                case 0x741:
                  IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
                  if (!v1327.request.includeSnapshot)
                    goto LABEL_1678;
                  WebKit::WebPageProxy::destroyInspectorTarget((WebKit::WebPageInspectorController **)v13, (IPC::Connection *)v12, (WTF::StringImpl **)&v1327);
                  goto LABEL_1149;
                default:
                  goto LABEL_1174;
              }
          }
        }
        switch(*((_WORD *)p_includeSnapshot + 25))
        {
          case 0x767:
            v435 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
            if (!v436)
            {
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.url.m_string.m_impl.m_ptr) = 0;
              goto LABEL_1925;
            }
            v12 = v435;
            IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)p_includeSnapshot, v1321);
            if (!v1321[8]
              && ((v33 = *(WTF::StringImpl **)p_includeSnapshot,
                   v957 = *((_QWORD *)p_includeSnapshot + 1),
                   *(_QWORD *)p_includeSnapshot = 0,
                   *((_QWORD *)p_includeSnapshot + 1) = 0,
                   (v958 = *((_QWORD *)p_includeSnapshot + 3)) == 0)
               || !v957
               || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v958 + 16))(v958, v33), !v1321[8]))
              || (IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)p_includeSnapshot, (uint64_t)v1368), !v1368[16]))
            {
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.url.m_string.m_impl.m_ptr) = 0;
              goto LABEL_1931;
            }
            v437 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)p_includeSnapshot);
            if (!v438)
              goto LABEL_2030;
            v439 = v437;
            v440 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)p_includeSnapshot);
            if (!v441)
              goto LABEL_2030;
            v4 = (WTF::StringImpl *)v440;
            v442 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)p_includeSnapshot);
            if (!v443)
              goto LABEL_2030;
            v14 = (_BYTE *)v442;
            v444 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)p_includeSnapshot);
            if (!v445)
              goto LABEL_2030;
            v30 = *((_QWORD *)p_includeSnapshot + 1);
            v33 = *(WTF::StringImpl **)p_includeSnapshot;
            v446 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
            if (v30 <= v446)
            {
              v1023 = 0;
              v1024 = 0;
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1025 = *((_QWORD *)p_includeSnapshot + 3);
              if (v1025)
              {
                if (v30)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v1025 + 16))(v1025);
                  v1024 = *(_QWORD *)p_includeSnapshot;
                  v1023 = *((_QWORD *)p_includeSnapshot + 1);
                }
                else
                {
                  v1023 = 0;
                  v1024 = 0;
                }
              }
            }
            else
            {
              v447 = (unsigned __int8 *)v33 + v446;
              *((_QWORD *)p_includeSnapshot + 2) = v447 + 1;
              if (v33)
              {
                v448 = *v447;
                if (v448 < 2)
                {
                  v449 = v448 != 0;
                  if (!v1321[8] || !v1368[16])
                    goto LABEL_2630;
                  v450 = v444;
                  v1327.request.point = (IntPoint)v12;
                  WebCore::Color::Color();
                  v451 = *(_QWORD *)v1368;
                  *(_QWORD *)v1368 = 0;
                  *(_QWORD *)&v1327.canBeValid = v451;
                  v452 = *(_QWORD *)&v1368[8];
                  *(_QWORD *)&v1368[8] = 0;
                  *(_QWORD *)&v1327.isLink = v452;
                  *(_QWORD *)&v1327.isContentEditable = v439;
                  v1327.containerScrollingNodeID.m_value.m_object.m_identifier = (unint64_t)v4;
                  v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = (unint64_t)v14;
                  *(_QWORD *)&v1327.isDataDetectorLink = v450;
                  v453 = 1;
                  LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x) = v449;
LABEL_858:
                  LOBYTE(v1327.url.m_string.m_impl.m_ptr) = v453;
                  if (v1368[16])
                  {
                    v454 = *(WTF **)v1368;
                    if (*(_QWORD *)v1368)
                    {
                      *(_QWORD *)v1368 = 0;
                      *(_DWORD *)&v1368[8] = 0;
                      WTF::fastFree(v454, v33);
                    }
                  }
LABEL_1931:
                  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1321, v33);
                  if (LOBYTE(v1327.url.m_string.m_impl.m_ptr))
                    goto LABEL_1932;
LABEL_1925:
                  v954 = *(_QWORD *)p_includeSnapshot;
                  v955 = *((_QWORD *)p_includeSnapshot + 1);
                  *(_QWORD *)p_includeSnapshot = 0;
                  *((_QWORD *)p_includeSnapshot + 1) = 0;
                  v956 = *((_QWORD *)p_includeSnapshot + 3);
                  if (!v956)
                    goto LABEL_1678;
                  if (!v955)
                    goto LABEL_1678;
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v956 + 16))(v956, v954);
                  if (!LOBYTE(v1327.url.m_string.m_impl.m_ptr))
                    goto LABEL_1678;
LABEL_1932:
                  WebKit::WebPageProxy::didGetTapHighlightGeometries(v13, *(_QWORD *)&v1327.request.point, (uint64_t)&v1327.request.includeSnapshot, (uint64_t)&v1327.canBeValid, (uint64_t)&v1327.isContentEditable, (uint64_t)&v1327.containerScrollingNodeID, (uint64_t)&v1327.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t)&v1327.isDataDetectorLink, SLOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x));
                  if (LOBYTE(v1327.url.m_string.m_impl.m_ptr))
                  {
                    v959 = *(WTF **)&v1327.canBeValid;
                    if (*(_QWORD *)&v1327.canBeValid)
                    {
                      *(_QWORD *)&v1327.canBeValid = 0;
                      *(_DWORD *)&v1327.isLink = 0;
                      WTF::fastFree(v959, v86);
                    }
                    if ((*(_QWORD *)&v1327.request.includeSnapshot & 0x8000000000000) != 0)
                    {
                      v398 = (unsigned int *)(*(_QWORD *)&v1327.request.includeSnapshot & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v960 = __ldaxr(v398);
                        v961 = v960 - 1;
                      }
                      while (__stlxr(v961, v398));
                      if (!v961)
                      {
                        atomic_store(1u, v398);
                        goto LABEL_1539;
                      }
                    }
                  }
                  goto LABEL_1678;
                }
LABEL_2031:
                *(_QWORD *)p_includeSnapshot = 0;
                *((_QWORD *)p_includeSnapshot + 1) = 0;
                v1027 = *((_QWORD *)p_includeSnapshot + 3);
                if (v1027 && v30)
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1027 + 16))(v1027, v33);
                v453 = 0;
                LOBYTE(v1327.request.point.m_x) = 0;
                goto LABEL_858;
              }
              v1023 = v30;
              v1024 = 0;
            }
            v30 = 0;
            v33 = 0;
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1026 = *((_QWORD *)p_includeSnapshot + 3);
            if (v1026)
            {
              if (v1023)
              {
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1026 + 16))(v1026, v1024, v1023);
LABEL_2030:
                v33 = *(WTF::StringImpl **)p_includeSnapshot;
                v30 = *((_QWORD *)p_includeSnapshot + 1);
              }
              else
              {
                v30 = 0;
                v33 = 0;
              }
            }
            goto LABEL_2031;
          case 0x768:
            v500 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
            if (v500 >= 0x100u)
              WebKit::WebPageProxy::didHandleAdditionalDragItemsRequest((WebKit::WebPageProxy *)v13, v500 != 0);
            goto LABEL_1678;
          case 0x769:
            v499 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
            if (v499 >= 0x100u)
              WebKit::WebPageProxy::didHandleDragStartRequest((WebKit::WebPageProxy *)v13, v499 != 0);
            goto LABEL_1678;
          case 0x76A:
          case 0x76B:
          case 0x76C:
          case 0x76D:
          case 0x76E:
          case 0x770:
          case 0x771:
            goto LABEL_1174;
          case 0x76F:
            IPC::Decoder::decode<WebCore::DictionaryPopupInfo>((unint64_t *)p_includeSnapshot, (uint64_t)&v1327);
            if (LOBYTE(v1327.title.m_impl.m_ptr))
            {
              *(_OWORD *)&v1368[8] = *(_OWORD *)&v1327.request.includeSnapshot;
              *(_OWORD *)&v1368[24] = *(_OWORD *)&v1327.isLink;
              *(Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>::MarkableTraits> *)&v1368[40] = v1327.containerScrollingNodeID;
              *(IntPoint *)v1368 = v1327.request.point;
              *(_QWORD *)&v1368[56] = *(_QWORD *)&v1327.isDataDetectorLink;
              v501 = v1327.adjustedPointForNodeRespondingToClickEvents;
              *(_QWORD *)&v1327.isDataDetectorLink = 0;
              v1327.adjustedPointForNodeRespondingToClickEvents = 0;
              *(FloatPoint *)v1369 = v501;
              *(_DWORD *)&v1369[8] = v1327.url.m_string.m_impl.m_ptr;
              v502 = *(_OWORD *)((char *)&v1327.url + 8);
              memset((char *)&v1327.url + 8, 0, 24);
              *(_OWORD *)&v1369[16] = v502;
              *(_QWORD *)&v1369[32] = *(_QWORD *)&v1327.url.m_hostEnd;
              WebCore::Color::Color();
              *(_DWORD *)&v1369[48] = v1327.imageURL.m_string.m_impl.m_ptr;
              WebCore::AttributedString::AttributedString();
              v1373 = 1;
              if (!LOBYTE(v1327.title.m_impl.m_ptr))
                goto LABEL_1006;
              WebCore::DictionaryPopupInfo::~DictionaryPopupInfo((WebCore::DictionaryPopupInfo *)&v1327);
              if (v1373)
                goto LABEL_1006;
            }
            else
            {
              v1368[0] = 0;
              v1373 = 0;
            }
            v951 = *(_QWORD *)p_includeSnapshot;
            v952 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v953 = *((_QWORD *)p_includeSnapshot + 3);
            if (!v953)
              goto LABEL_1678;
            if (!v952)
              goto LABEL_1678;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v953 + 16))(v953, v951);
            if (!v1373)
              goto LABEL_1678;
LABEL_1006:
            WebKit::WebPageProxy::didPerformDictionaryLookup(v13, (uint64_t)v1368);
            if (v1373)
              WebCore::DictionaryPopupInfo::~DictionaryPopupInfo((WebCore::DictionaryPopupInfo *)v1368);
            goto LABEL_1678;
          case 0x772:
            IPC::Decoder::decode<std::tuple<std::optional<WebCore::TextIndicatorData>>>((unint64_t *)p_includeSnapshot, &v1327);
            if (*((_BYTE *)&v1327.imageURL + 8))
            {
              v1368[0] = 0;
              v1369[48] = 0;
              if (LOBYTE(v1327.imageURL.m_string.m_impl.m_ptr))
              {
                std::construct_at[abi:sn180100]<WebCore::TextIndicatorData,WebCore::TextIndicatorData,WebCore::TextIndicatorData*>((uint64_t)v1368, (__int128 *)&v1327.request.point);
                v1369[48] = 1;
              }
              WebKit::WebPageProxy::didReceiveEditDragSnapshot(v13, (uint64_t)v1368);
              std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v497);
              if (*((_BYTE *)&v1327.imageURL + 8))
                std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v498);
            }
            goto LABEL_1678;
          default:
            if (v17 == 1863)
            {
              v592 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)p_includeSnapshot);
              if ((v592 & 0xFF00000000) != 0)
                *(_DWORD *)(v13 + 828) = v592;
              goto LABEL_1678;
            }
            if (v17 != 1888)
              goto LABEL_1174;
            IPC::Decoder::decode<std::tuple<WebCore::ShareableResourceHandle>>((IPC::Decoder *)p_includeSnapshot, (uint64_t)&v1327);
            if (v1327.isLink)
            {
              WebKit::WebPageProxy::didFinishLoadForQuickLookDocumentInMainFrame(v13);
              if (v1327.isLink)
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1327);
            }
            goto LABEL_1678;
        }
      }
      if (*((unsigned __int16 *)p_includeSnapshot + 25) <= 0x7FBu)
      {
        switch(*((_WORD *)p_includeSnapshot + 25))
        {
          case 0x7D3:
            IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)p_includeSnapshot, &v1327);
            if (v1327.isContentEditable)
              WebKit::WebPageProxy::registerWebProcessAccessibilityToken(v13, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid, *(uint64_t *)&v1327.isLink);
            goto LABEL_1678;
          case 0x7D4:
          case 0x7D6:
          case 0x7D7:
          case 0x7D9:
          case 0x7DA:
          case 0x7DE:
          case 0x7DF:
          case 0x7E0:
          case 0x7E3:
          case 0x7E4:
          case 0x7E5:
          case 0x7E6:
          case 0x7E7:
            goto LABEL_1174;
          case 0x7D5:
            v536 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot);
            if (v537)
            {
              v538 = v536;
              v539 = *(_QWORD *)(v13 + 40);
              if (v539)
                v540 = *(_QWORD *)(v539 + 8);
              else
                v540 = 0;
              (*(void (**)(uint64_t))(*(_QWORD *)v540 + 1584))(v540);
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v540 + 800))(v540, v538);
              (*(void (**)(uint64_t))(*(_QWORD *)v540 + 1592))(v540);
            }
            goto LABEL_1678;
          case 0x7D8:
            v528 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
            if (!v529)
              goto LABEL_1976;
            v530 = v528;
            IPC::ArgumentCoder<WebCore::TextCheckingRequestData,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
            if (!v1368[32])
            {
              v1028 = *(_QWORD *)p_includeSnapshot;
              v1029 = *((_QWORD *)p_includeSnapshot + 1);
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1030 = *((_QWORD *)p_includeSnapshot + 3);
              if (!v1030
                || !v1029
                || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1030 + 16))(v1030, v1028), !v1368[32]))
              {
LABEL_2034:
                LOBYTE(v1327.request.point.m_x) = 0;
                goto LABEL_1976;
              }
            }
            v531 = *((_QWORD *)p_includeSnapshot + 1);
            v532 = *(WTF::StringImpl **)p_includeSnapshot;
            v533 = ((*((_QWORD *)p_includeSnapshot + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)p_includeSnapshot;
            if (v531 < v533 || v531 - v533 <= 3)
            {
              v1035 = 0;
              v1036 = 0;
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1037 = *((_QWORD *)p_includeSnapshot + 3);
              if (v1037)
              {
                if (v531)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v1037 + 16))(v1037);
                  v1036 = *(_QWORD *)p_includeSnapshot;
                  v1035 = *((_QWORD *)p_includeSnapshot + 1);
                }
                else
                {
                  v1035 = 0;
                  v1036 = 0;
                }
              }
            }
            else
            {
              v534 = (int *)((char *)v532 + v533);
              *((_QWORD *)p_includeSnapshot + 2) = v534 + 1;
              if (v532)
              {
                v535 = *v534;
                v1327.request.point = (IntPoint)v530;
                *(_QWORD *)&v1327.request.includeSnapshot = *(_QWORD *)v1368;
                *(_OWORD *)&v1327.canBeValid = *(_OWORD *)&v1368[8];
                *(_WORD *)&v1327.isContentEditable = *(_WORD *)&v1368[24];
                LODWORD(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = v535;
                LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 1;
                WebKit::WebPageProxy::requestCheckingOfString(v13, v530, (uint64_t)&v1327.request.includeSnapshot);
                if (LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
                {
                  v58 = *(WTF::StringImpl **)&v1327.request.includeSnapshot;
                  *(_QWORD *)&v1327.request.includeSnapshot = 0;
                  if (v58)
                    goto LABEL_1151;
                }
                goto LABEL_1678;
              }
              v1035 = v531;
              v1036 = 0;
            }
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1038 = *((_QWORD *)p_includeSnapshot + 3);
            if (v1038 && v1035)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1038 + 16))(v1038, v1036);
            LOBYTE(v1327.request.point.m_x) = 0;
            if (v1368[32])
              goto LABEL_1972;
            goto LABEL_1976;
          case 0x7DB:
            v520 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
            if (v521
              && (v522 = (IntPoint)v520,
                  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1321), v1321[16])&& (IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)p_includeSnapshot, v1368), v1368[32]))
            {
              IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1312);
              v523 = LOBYTE(v1312[1]);
              if (LOBYTE(v1312[1]))
              {
                if (!v1321[16] || !v1368[32])
                  goto LABEL_2630;
                v1327.request.point = v522;
                *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)v1321;
                v1327.isLink = 0;
                LODWORD(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1327.isLink, (uint64_t)v1368);
                *(WTF::StringImpl **)&v1327.isDataDetectorLink = v1312[0];
                v523 = 1;
              }
              else
              {
                LOBYTE(v1327.request.point.m_x) = 0;
              }
              LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x) = v523;
              if (v1368[32] && *(_DWORD *)&v1368[24] != -1)
              {
                ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34FBEB0[*(unsigned int *)&v1368[24]])(v1312, v1368);
                v523 = LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x);
              }
              if (v523)
              {
LABEL_1307:
                WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(v13, v12, *(_DWORD **)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, *(uint64_t *)&v1327.canBeValid, (WebCore::SecurityOriginData *)&v1327.isLink, (_DWORD **)&v1327.isDataDetectorLink);
                if (!LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x))
                  goto LABEL_1678;
                v635 = *(WTF::StringImpl **)&v1327.isDataDetectorLink;
                *(_QWORD *)&v1327.isDataDetectorLink = 0;
                if (v635)
                {
                  if (*(_DWORD *)v635 == 2)
                    WTF::StringImpl::destroy(v635, v634);
                  else
                    *(_DWORD *)v635 -= 2;
                }
LABEL_893:
                if (LODWORD(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) != -1)
                  ((void (*)(_BYTE *, BOOL *))off_1E34FBEB0[LODWORD(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier)])(v1368, &v1327.isLink);
                goto LABEL_1678;
              }
            }
            else
            {
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x) = 0;
            }
            v602 = *(_QWORD *)p_includeSnapshot;
            v603 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v604 = *((_QWORD *)p_includeSnapshot + 3);
            if (!v604)
              goto LABEL_1678;
            if (!v603)
              goto LABEL_1678;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v604 + 16))(v604, v602);
            if (!LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x))
              goto LABEL_1678;
            goto LABEL_1307;
          case 0x7DC:
            IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
            if (!v1327.request.includeSnapshot)
              goto LABEL_1678;
            v548 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
            if (!(_BYTE)v54)
              goto LABEL_1056;
            *(_QWORD *)v1368 = v548;
            p_includeSnapshot = &v1368[8];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
            v549 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v549 = off_1E34FC060;
            v549[1] = *(_QWORD *)v1368;
            v550 = *(_QWORD *)&v1368[8];
            *(_QWORD *)&v1368[8] = 0;
            v549[2] = v550;
            *(_QWORD *)v1321 = v549;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
            if (!v1327.request.includeSnapshot)
              goto LABEL_2630;
            WebKit::WebPageProxy::requestNotificationPermission(v13, (WTF::StringImpl **)&v1327, (uint64_t *)v1321);
            v551 = *(_QWORD *)v1321;
            *(_QWORD *)v1321 = 0;
            if (v551)
              (*(void (**)(uint64_t))(*(_QWORD *)v551 + 8))(v551);
LABEL_1056:
            if (!v1327.request.includeSnapshot)
              goto LABEL_1678;
            v58 = (WTF::StringImpl *)v1327.request.point;
            v1327.request.point = 0;
            if (!v58)
              goto LABEL_1678;
            v492 = *(_DWORD *)v58 - 2;
            if (*(_DWORD *)v58 == 2)
              goto LABEL_968;
            goto LABEL_967;
          case 0x7DD:
            IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
            if (!v1327.request.includeSnapshot)
              goto LABEL_1678;
            v524 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
            if (!(_BYTE)v54)
              goto LABEL_1149;
            *(_QWORD *)v1368 = v524;
            p_includeSnapshot = &v1368[8];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
            v525 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v525 = off_1E34FC088;
            v525[1] = *(_QWORD *)v1368;
            v526 = *(_QWORD *)&v1368[8];
            *(_QWORD *)&v1368[8] = 0;
            v525[2] = v526;
            *(_QWORD *)v1321 = v525;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
            if (!v1327.request.includeSnapshot)
              goto LABEL_2630;
            WebKit::WebPageProxy::requestPasswordForQuickLookDocumentInMainFrame(v13, &v1327, v1321);
            v527 = *(_QWORD *)v1321;
            *(_QWORD *)v1321 = 0;
            if (v527)
              (*(void (**)(uint64_t))(*(_QWORD *)v527 + 8))(v527);
            goto LABEL_1149;
          case 0x7E1:
            v541 = IPC::Decoder::decode<std::optional<WebCore::FloatPoint>>((unint64_t *)p_includeSnapshot);
            if ((v542 & 0xFF00000000) == 0)
              goto LABEL_2037;
            v543 = v542;
            v544 = *(_QWORD *)p_includeSnapshot;
            v545 = *((_QWORD *)p_includeSnapshot + 1);
            v546 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
            if (v545 < v546 || v545 - v546 <= 7)
            {
              v1031 = 0;
              v1032 = 0;
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1033 = *((_QWORD *)p_includeSnapshot + 3);
              if (v1033)
              {
                if (v545)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v1033 + 16))(v1033);
                  v1032 = *(_QWORD *)p_includeSnapshot;
                  v1031 = *((_QWORD *)p_includeSnapshot + 1);
                }
                else
                {
                  v1031 = 0;
                  v1032 = 0;
                }
              }
            }
            else
            {
              v547 = (double *)(v544 + v546);
              *((_QWORD *)p_includeSnapshot + 2) = v547 + 1;
              if (v544)
              {
                WebKit::WebPageProxy::restorePageCenterAndScale(v13, v541, v543, *v547);
                goto LABEL_1678;
              }
              v1031 = v545;
              v1032 = 0;
            }
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1034 = *((_QWORD *)p_includeSnapshot + 3);
            if (v1034 && v1031)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1034 + 16))(v1034, v1032);
LABEL_2037:
            v670 = *(_QWORD *)p_includeSnapshot;
            v675 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v672 = *((_QWORD *)p_includeSnapshot + 3);
            if (v672)
              goto LABEL_1557;
            goto LABEL_1678;
          case 0x7E2:
            v503 = IPC::Decoder::decode<std::optional<WebCore::FloatPoint>>((unint64_t *)p_includeSnapshot);
            if ((v504 & 0xFF00000000) == 0)
              goto LABEL_1976;
            v505 = v503;
            v506 = v504;
            v507 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)p_includeSnapshot);
            if (!v508)
              goto LABEL_1892;
            v509 = v507;
            IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
            if (!v1368[16])
              goto LABEL_1976;
            v510 = *((_QWORD *)p_includeSnapshot + 1);
            v511 = *(_QWORD *)p_includeSnapshot;
            v512 = ((*((_QWORD *)p_includeSnapshot + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)p_includeSnapshot;
            if (v510 < v512 || v510 - v512 <= 7)
            {
              v1064 = 0;
              v1065 = 0;
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1066 = *((_QWORD *)p_includeSnapshot + 3);
              if (v1066)
              {
                if (v510)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v1066 + 16))(v1066);
                  v1065 = *(_QWORD *)p_includeSnapshot;
                  v1064 = *((_QWORD *)p_includeSnapshot + 1);
                }
                else
                {
                  v1064 = 0;
                  v1065 = 0;
                }
              }
            }
            else
            {
              v513 = (double *)(v511 + v512);
              *((_QWORD *)p_includeSnapshot + 2) = v513 + 1;
              if (v511)
              {
                v514 = *v513;
                v1327.request.point = (IntPoint)v505;
                *(_DWORD *)&v1327.request.includeSnapshot = v506;
                *(_QWORD *)&v1327.request.includeImageData = v509;
                *(_OWORD *)&v1327.isSelected = *(_OWORD *)v1368;
                *(double *)&v1327.containerScrollingNodeID.m_value.m_object.m_identifier = v514;
                LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 1;
                WebKit::WebPageProxy::restorePageState(v13, v505, v506, (uint64_t)&v1327.request.includeImageData, (uint64_t)&v1327.isSelected, v514);
                goto LABEL_1678;
              }
              v1064 = v510;
              v1065 = 0;
            }
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1067 = *((_QWORD *)p_includeSnapshot + 3);
            if (v1067 && v1064)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1067 + 16))(v1067, v1065);
            goto LABEL_1976;
          case 0x7E8:
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
            if (v1321[8])
            {
              IPC::Decoder::decode<WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)p_includeSnapshot, v515, (uint64_t)v1368);
              LODWORD(v4) = v1368[16];
              if (v1368[16])
              {
                if (!v1321[8])
                  goto LABEL_2630;
                v516 = *(IntPoint *)v1321;
                *(_QWORD *)v1321 = 0;
                v517 = *(_QWORD *)v1368;
                *(_QWORD *)v1368 = 0;
                v1327.request.point = v516;
                *(_QWORD *)&v1327.request.includeSnapshot = v517;
                v518 = *(_QWORD *)&v1368[8];
                *(_QWORD *)&v1368[8] = 0;
                *(_QWORD *)&v1327.canBeValid = v518;
                v519 = 1;
                v1327.isLink = 1;
                WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1368, v33);
              }
              else
              {
                v519 = 0;
                LOBYTE(v1327.request.point.m_x) = 0;
                v1327.isLink = 0;
              }
              if (v1321[8])
              {
                v615 = *(WTF::StringImpl **)v1321;
                *(_QWORD *)v1321 = 0;
                if (v615)
                {
                  if (*(_DWORD *)v615 == 2)
                    WTF::StringImpl::destroy(v615, v33);
                  else
                    *(_DWORD *)v615 -= 2;
                }
              }
              if ((_DWORD)v4)
              {
LABEL_1279:
                if (!v519)
                  goto LABEL_1678;
                WebKit::WebPageProxy::saveRecentSearches(v13, v12, &v1327, (uint64_t *)&v1327.request.includeSnapshot);
                if (!v1327.isLink)
                  goto LABEL_1678;
                WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.request.includeSnapshot, v631);
                goto LABEL_1150;
              }
            }
            else
            {
              v519 = 0;
              LOBYTE(v1327.request.point.m_x) = 0;
              v1327.isLink = 0;
            }
            v606 = *(_QWORD *)p_includeSnapshot;
            v607 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v608 = *((_QWORD *)p_includeSnapshot + 3);
            if (v608 && v607)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v608 + 16))(v608, v606);
            goto LABEL_1279;
          case 0x7E9:
            IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
            if (v1327.isLink)
            {
              *(InteractionInformationRequest *)v1368 = v1327.request;
              *(_QWORD *)&v1368[16] = *(_QWORD *)&v1327.canBeValid;
              WebKit::WebPageProxy::scrollingNodeScrollDidEndScroll(v13, (uint64_t *)v1368);
            }
            goto LABEL_1678;
          case 0x7EA:
            IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
            if (v1327.isLink)
            {
              *(InteractionInformationRequest *)v1368 = v1327.request;
              *(_QWORD *)&v1368[16] = *(_QWORD *)&v1327.canBeValid;
              WebKit::WebPageProxy::scrollingNodeScrollWillStartScroll(v13, (uint64_t *)v1368);
            }
            goto LABEL_1678;
          case 0x7EB:
            goto LABEL_983;
          case 0x7EC:
            IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((uint64_t *)p_includeSnapshot, &v1327);
            if (v1327.canBeValid)
              Inspector::InspectorTargetAgent::sendMessageFromTargetToFrontend(*(Inspector::InspectorTargetAgent **)(*(_QWORD *)(v13 + 1072) + 40), (const WTF::String *)&v1327, (const WTF::String *)&v1327.request.includeSnapshot);
            goto LABEL_1117;
          default:
            if (v17 == 1970)
              goto LABEL_1678;
            if (v17 != 1990)
              goto LABEL_1174;
            v493 = *(_QWORD *)(v13 + 40);
            if (v493)
              v60 = *(_QWORD *)(v493 + 8);
            else
              v60 = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1584))(v60);
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 776))(v60);
            goto LABEL_618;
        }
      }
      if (*((unsigned __int16 *)p_includeSnapshot + 25) > 0x819u)
      {
        switch(*((_WORD *)p_includeSnapshot + 25))
        {
          case 0x81A:
            IPC::ArgumentCoder<WebCore::DragItem,void>::decode((unint64_t *)p_includeSnapshot, (uint64_t)v1368);
            if (v1401
              || (v965 = *(_QWORD *)p_includeSnapshot,
                  v966 = *((_QWORD *)p_includeSnapshot + 1),
                  *(_QWORD *)p_includeSnapshot = 0,
                  *((_QWORD *)p_includeSnapshot + 1) = 0,
                  (v967 = *((_QWORD *)p_includeSnapshot + 3)) != 0)
              && v966
              && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v967 + 16))(v967, v965), v1401))
            {
              IPC::Decoder::decode<WebCore::ShareableBitmapHandle>((IPC::Decoder *)p_includeSnapshot, v1321);
              v381 = v1325;
              if (v1325)
              {
                if (!v1401)
                  goto LABEL_2630;
                MEMORY[0x19AEB56B8](&v1327, v1368);
                *(_OWORD *)&v1327.textAfter.m_impl.m_ptr = v1374;
                *(FloatRect *)((char *)&v1327.lineCaretExtent + 4) = v1375;
                *(_DWORD *)&v1327.cursor.var0.__null_state_ = v1376;
                v382 = v1377;
                v1377 = 0u;
                *(_OWORD *)&v1327.cursor.var0.__val_.m_image.m_ptr = v382;
                *(_OWORD *)&v1327.cursor.var0.__val_.m_platformCursor = v1378;
                v1327.linkIndicator.selectionRectInRootViewCoordinates = v1379;
                LODWORD(v1378) = v1378 & 0xFFFFFFFE;
                v1327.linkIndicator.textBoundingRectInRootViewCoordinates = v1380;
                LOBYTE(v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_location.m_x) = v1381;
                v383 = v1382;
                v1382 = 0u;
                *(_OWORD *)&v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width = v383;
                *(_QWORD *)&v383 = v1383;
                v1383 = 0;
                *(_QWORD *)&v1327.linkIndicator.textRectsInBoundingRectCoordinates.m_capacity = v383;
                LOBYTE(v1327.linkIndicator.contentImageScaleFactor) = 0;
                LOBYTE(v1327.linkIndicator.contentImageWithoutSelection.m_ptr) = 0;
                if (v1386)
                {
                  LOBYTE(v1327.linkIndicator.contentImageScaleFactor) = v1384[0];
                  v384 = v1385;
                  if (v1385)
                    *(_DWORD *)v1385 += 2;
                  v1327.linkIndicator.contentImageWithHighlight.m_ptr = v384;
                  LOBYTE(v1327.linkIndicator.contentImageWithoutSelection.m_ptr) = 1;
                }
                LOBYTE(v1327.linkIndicator.contentImage.m_ptr) = 0;
                LOBYTE(v1327.dataDetectorBounds.m_size.m_width) = 0;
                if (v1391)
                {
                  v385 = v1387;
                  if (v1387)
                    *(_DWORD *)v1387 += 2;
                  v1327.linkIndicator.contentImage.m_ptr = v385;
                  *(_OWORD *)&v1327.linkIndicator.estimatedBackgroundColor.m_colorAndFlags = v1388;
                  *(_OWORD *)&v1327.dataDetectorIdentifier.m_impl.m_ptr = v1389;
                  v386 = (IntPoint)v1390;
                  if (v1390)
                    *v1390 += 2;
                  v1327.dataDetectorBounds.m_location = v386;
                  LOBYTE(v1327.dataDetectorBounds.m_size.m_width) = 1;
                }
                v1327.elementContext.var0.var0 = 0;
                LOBYTE(v1331) = 0;
                if (v1400[16])
                {
                  v387 = (unint64_t)v1392;
                  if (v1392)
                    *v1392 += 2;
                  v1327.elementContext.var0.var2.m_identifier = v387;
                  *((_BYTE *)&v1327.elementContext.var0.var2 + 8) = v1393;
                  v388 = v1394;
                  if (v1394)
                  {
                    do
                      v389 = __ldaxr(v388);
                    while (__stlxr(v389 + 1, v388));
                  }
                  v1327.elementContext.var0.var1.webPageIdentifier.m_identifier = (unint64_t)v388;
                  v390 = v1395;
                  if (v1395)
                  {
                    do
                      v391 = __ldaxr(v390);
                    while (__stlxr(v391 + 1, v390));
                  }
                  *((_QWORD *)&v1327.elementContext.var0.var2 + 3) = v390;
                  v392 = v1396;
                  if (v1396)
                  {
                    do
                      v393 = __ldaxr(v392);
                    while (__stlxr(v393 + 1, v392));
                  }
                  *((_QWORD *)&v1327.elementContext.var0.var2 + 4) = v392;
                  v394 = v1397;
                  if (v1397)
                  {
                    do
                      v395 = __ldaxr(v394);
                    while (__stlxr(v395 + 1, v394));
                  }
                  v1327.elementContext.var0.var1.m_processIdentifier.m_identifier = (unint64_t)v394;
                  v396 = v1398;
                  if (v1398)
                    *v1398 += 2;
                  *(_QWORD *)&v1327.__engaged_ = v396;
                  v397 = (uint64_t)v1399;
                  if (v1399)
                    *v1399 += 2;
                  v1328 = v397;
                  WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v1329, (uint64_t)v1400);
                  LOBYTE(v1331) = 1;
                }
                WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v1332, (uint64_t)v1321);
                v381 = 1;
              }
              else
              {
                LOBYTE(v1327.request.point.m_x) = 0;
              }
              LOBYTE(v1337) = v381;
              std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v1321);
              if (v1401)
              {
                MEMORY[0x19AEB0A98](v1384);
                WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1382 + 8, v612);
                v614 = (WTF::StringImpl *)v1382;
                *(_QWORD *)&v1382 = 0;
                if (v614)
                {
                  if (*(_DWORD *)v614 == 2)
                    WTF::StringImpl::destroy(v614, v613);
                  else
                    *(_DWORD *)v614 -= 2;
                }
                v617 = (WTF::StringImpl *)*((_QWORD *)&v1377 + 1);
                *((_QWORD *)&v1377 + 1) = 0;
                if (v617)
                {
                  if (*(_DWORD *)v617 == 2)
                    WTF::StringImpl::destroy(v617, v613);
                  else
                    *(_DWORD *)v617 -= 2;
                }
                v618 = (WTF::StringImpl *)v1377;
                *(_QWORD *)&v1377 = 0;
                if (v618)
                {
                  if (*(_DWORD *)v618 == 2)
                    WTF::StringImpl::destroy(v618, v613);
                  else
                    *(_DWORD *)v618 -= 2;
                }
                WebCore::DragImage::~DragImage((WebCore::DragImage *)v1368);
              }
            }
            else
            {
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1337) = 0;
            }
            if ((_BYTE)v1337
              || (v968 = *(_QWORD *)p_includeSnapshot,
                  v969 = *((_QWORD *)p_includeSnapshot + 1),
                  *(_QWORD *)p_includeSnapshot = 0,
                  *((_QWORD *)p_includeSnapshot + 1) = 0,
                  (v970 = *((_QWORD *)p_includeSnapshot + 3)) != 0)
              && v969
              && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v970 + 16))(v970, v968), (_BYTE)v1337))
            {
              WebKit::WebPageProxy::startDrag(v13, (uint64_t)&v1327, (uint64_t)&v1332);
              if ((_BYTE)v1337)
              {
                if (BYTE8(v1334))
                {
                  v619 = (const void *)v1334;
                  *(_QWORD *)&v1334 = 0;
                  if (v619)
                    CFRelease(v619);
                }
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1332);
                MEMORY[0x19AEB0A98](&v1327.linkIndicator.contentImageScaleFactor);
                WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.linkIndicator.textRectsInBoundingRectCoordinates, v620);
                m_size = (WTF::StringImpl *)v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size;
                v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size = 0;
                if (m_size)
                {
                  if (*(_DWORD *)m_size == 2)
                    WTF::StringImpl::destroy(m_size, v621);
                  else
                    *(_DWORD *)m_size -= 2;
                }
                v623 = (WTF::StringImpl *)v1327.cursor.var0.__val_.m_hotSpot;
                v1327.cursor.var0.__val_.m_hotSpot = 0;
                if (v623)
                {
                  if (*(_DWORD *)v623 == 2)
                    WTF::StringImpl::destroy(v623, v621);
                  else
                    *(_DWORD *)v623 -= 2;
                }
                v624 = v1327.cursor.var0.__val_.m_image.m_ptr;
                v1327.cursor.var0.__val_.m_image.m_ptr = 0;
                if (v624)
                {
                  if (*(_DWORD *)v624 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v624, v621);
                  else
                    *(_DWORD *)v624 -= 2;
                }
                WebCore::DragImage::~DragImage((WebCore::DragImage *)&v1327);
              }
            }
            goto LABEL_1678;
          case 0x81C:
            goto LABEL_1678;
          case 0x821:
            IPC::Decoder::decode<WebKit::FocusedElementInformation>((unint64_t *)p_includeSnapshot, &v1327);
            if (LOBYTE(v1327.dataDetectorBounds.m_size.m_width))
            {
              std::__tuple_leaf<0ul,WebKit::FocusedElementInformation,false>::__tuple_leaf[abi:sn180100]<WebKit::FocusedElementInformation,void>((uint64_t)v1368, (__int128 *)&v1327.request.point);
              v1391 = 1;
              if (!LOBYTE(v1327.dataDetectorBounds.m_size.m_width))
                goto LABEL_1070;
              WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&v1327, v553);
              if (v1391)
                goto LABEL_1070;
            }
            else
            {
              v1368[0] = 0;
              v1391 = 0;
            }
            v962 = *(_QWORD *)p_includeSnapshot;
            v963 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v964 = *((_QWORD *)p_includeSnapshot + 3);
            if (!v964)
              goto LABEL_1678;
            if (!v963)
              goto LABEL_1678;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v964 + 16))(v964, v962);
            if (!v1391)
              goto LABEL_1678;
LABEL_1070:
            WebKit::WebPageProxy::updateFocusedElementInformation((WebKit::WebPageProxy *)v13, (const FocusedElementInformation *)v1368);
            if (!v1391)
              goto LABEL_1678;
            v555 = (InteractionInformationAtPosition *)v1368;
            goto LABEL_2058;
          case 0x822:
            WebKit::WebPageProxy::updateInputContextAfterBlurringAndRefocusingElement((WebKit::WebPageProxy *)v13);
            goto LABEL_1678;
          case 0x825:
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
            if (v1321[8])
            {
              IPC::Decoder::decode<WebCore::GrammarDetail>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
              LODWORD(v4) = v1368[40];
              if (v1368[40])
              {
                if (!v1321[8])
                  goto LABEL_2630;
                v556 = *(IntPoint *)v1321;
                *(_QWORD *)v1321 = 0;
                *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)v1368;
                v557 = *(_QWORD *)&v1368[16];
                memset(&v1368[16], 0, 24);
                v1327.request.point = v556;
                *(_QWORD *)&v1327.isLink = v557;
                *(_QWORD *)&v1327.isContentEditable = *(_QWORD *)&v1368[24];
                v12 = *(_QWORD *)&v1368[32];
                v558 = 1;
                v1327.containerScrollingNodeID.m_value.m_object.m_identifier = *(_QWORD *)&v1368[32];
              }
              else
              {
                v558 = 0;
                LOBYTE(v1327.request.point.m_x) = 0;
              }
              LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = v558;
              std::__optional_destruct_base<WebCore::GrammarDetail,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v33);
              if (v1321[8])
              {
                v616 = *(WTF::StringImpl **)v1321;
                *(_QWORD *)v1321 = 0;
                if (v616)
                {
                  if (*(_DWORD *)v616 == 2)
                    WTF::StringImpl::destroy(v616, v609);
                  else
                    *(_DWORD *)v616 -= 2;
                }
              }
              if ((_DWORD)v4)
              {
LABEL_1284:
                if (!v558)
                  goto LABEL_1678;
                if (!*(_BYTE *)(v13 + 1096))
                {
                  *(_QWORD *)(v13 + 1088) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
                  *(_BYTE *)(v13 + 1096) = 1;
                }
                v1327.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
                if (v12)
                {
                  if (*(_DWORD *)v12 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v12, v609);
                  else
                    *(_DWORD *)v12 -= 2;
                }
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.isLink, v609);
                goto LABEL_1150;
              }
            }
            else
            {
              v558 = 0;
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
            }
            v609 = *(WTF::StringImpl **)p_includeSnapshot;
            v610 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v611 = *((_QWORD *)p_includeSnapshot + 3);
            if (v611 && v610)
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v611 + 16))(v611, v609);
            goto LABEL_1284;
          case 0x826:
            IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
            if (!v1327.request.includeSnapshot)
              goto LABEL_1678;
            if (!*(_BYTE *)(v13 + 1096))
            {
              *(_QWORD *)(v13 + 1088) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
              *(_BYTE *)(v13 + 1096) = 1;
            }
            goto LABEL_1150;
          case 0x827:
            IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
            if (!v1327.request.includeSnapshot)
              goto LABEL_1678;
            WebKit::WebPageProxy::updateStringForFind((WTF::StringImpl **)v13, (const WTF::String *)&v1327);
            goto LABEL_1149;
          case 0x82B:
            WebKit::WebPageProxy::willReceiveEditDragSnapshot((WebKit::WebPageProxy *)v13);
            goto LABEL_1678;
          default:
            goto LABEL_1174;
        }
      }
      break;
  }
  switch(*((_WORD *)p_includeSnapshot + 25))
  {
    case 0x809:
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)p_includeSnapshot, (uint64_t)v1368);
      if (!v1368[16])
      {
LABEL_1892:
        v935 = *(_QWORD *)p_includeSnapshot;
        v936 = *((_QWORD *)p_includeSnapshot + 1);
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v937 = *((_QWORD *)p_includeSnapshot + 3);
        if (v937 && v936)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v937 + 16))(v937, v935);
        goto LABEL_1976;
      }
      v455 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
      if (!v456)
        goto LABEL_1976;
      v457 = v455;
      v1327.request = *(InteractionInformationRequest *)v1368;
      *(_QWORD *)&v1327.canBeValid = v455;
      v1327.isLink = 1;
      v458 = *(_QWORD *)(v13 + 40);
      if (v458)
        v459 = *(_QWORD *)(v458 + 8);
      else
        v459 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v459 + 1584))(v459);
      (*(void (**)(uint64_t, InteractionInformationAtPosition *, unint64_t))(*(_QWORD *)v459 + 808))(v459, &v1327, v457);
      (*(void (**)(uint64_t))(*(_QWORD *)v459 + 1592))(v459);
      goto LABEL_1678;
    case 0x80A:
      IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
      if (LOBYTE(v1327.url.m_pathEnd)
        || (v945 = *(_QWORD *)p_includeSnapshot,
            v946 = *((_QWORD *)p_includeSnapshot + 1),
            *(_QWORD *)p_includeSnapshot = 0,
            *((_QWORD *)p_includeSnapshot + 1) = 0,
            (v947 = *((_QWORD *)p_includeSnapshot + 3)) != 0)
        && v946
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v947 + 16))(v947, v945), LOBYTE(v1327.url.m_pathEnd)))
      {
        WebCore::Color::Color();
        WebCore::Color::Color();
        WebCore::Color::Color();
        WebCore::Color::Color();
        WebCore::Color::Color();
        v1368[40] = v1327.containerScrollingNodeID.m_value.m_object.m_identifier;
        v495 = v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
        memset(&v1327.containerScrollingNodeID.m_value.m_processIdentifier, 0, 48);
        *(_QWORD *)&v1368[48] = v495;
        *(_QWORD *)&v1368[56] = *(_QWORD *)&v1327.isDataDetectorLink;
        *(FloatPoint *)v1369 = v1327.adjustedPointForNodeRespondingToClickEvents;
        *(_QWORD *)&v1369[8] = v1327.url.m_string.m_impl.m_ptr;
        *(_QWORD *)&v1369[16] = *((_QWORD *)&v1327.url + 1);
        *(_QWORD *)&v1369[24] = *(_QWORD *)&v1327.url.m_userEnd;
        v1369[32] = v1327.url.m_hostEnd;
        v1369[40] = 1;
        if (!LOBYTE(v1327.url.m_pathEnd))
          goto LABEL_987;
        WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)&v1327, v494);
        if (v1369[40])
          goto LABEL_987;
      }
      else
      {
        v1368[0] = 0;
        v1369[40] = 0;
      }
      v948 = *(_QWORD *)p_includeSnapshot;
      v949 = *((_QWORD *)p_includeSnapshot + 1);
      *(_QWORD *)p_includeSnapshot = 0;
      *((_QWORD *)p_includeSnapshot + 1) = 0;
      v950 = *((_QWORD *)p_includeSnapshot + 3);
      if (!v950)
        goto LABEL_1678;
      if (!v949)
        goto LABEL_1678;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v950 + 16))(v950, v948);
      if (!v1369[40])
        goto LABEL_1678;
LABEL_987:
      WebKit::WebPageProxy::showInspectorHighlight((WebKit::WebPageProxy *)v13, (const InspectorOverlayHighlight *)v1368);
      if (v1369[40])
        WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)v1368, v496);
      goto LABEL_1678;
    case 0x80B:
      WebKit::WebPageProxy::showInspectorIndication((WebKit::WebPageProxy *)v13);
      goto LABEL_1678;
    case 0x80C:
    case 0x80D:
    case 0x80E:
    case 0x80F:
    case 0x810:
    case 0x811:
      goto LABEL_1174;
    case 0x812:
LABEL_983:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
LABEL_1149:
      if (v1327.request.includeSnapshot)
        goto LABEL_1150;
      goto LABEL_1678;
    default:
      if (v17 == 2044)
      {
        IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, &v1302);
        if (v1303)
        {
          IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)p_includeSnapshot, (uint64_t)v1321);
          if (v1321[16])
          {
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, &v1304);
            if (v1305)
            {
              IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, &v1306);
              if (v1307)
              {
                IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, &v1308);
                if (v1309)
                {
                  IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, &v1310);
                  if (v1311)
                  {
                    IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1300);
                    if (LOBYTE(v1300[1]))
                    {
                      IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)p_includeSnapshot, (uint64_t)v1368);
                      if (v1368[16])
                      {
                        IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1312);
                        v593 = (char)v1312[1];
                        if (LOBYTE(v1312[1]))
                        {
                          if (!v1303
                            || !v1321[16]
                            || !v1305
                            || !v1307
                            || !v1309
                            || !v1311
                            || !LOBYTE(v1300[1])
                            || !v1368[16])
                          {
                            goto LABEL_2630;
                          }
                          v594 = v1302;
                          v1302 = 0;
                          v1327.request.point = (IntPoint)v594;
                          WTF::MachSendRight::MachSendRight();
                          v595 = v1304;
                          v1304 = 0;
                          *(_QWORD *)&v1327.canBeValid = *(_QWORD *)&v1321[8];
                          *(_QWORD *)&v1327.isLink = v595;
                          v596 = v1306;
                          v1306 = 0;
                          v597 = v1308;
                          v1308 = 0;
                          *(_QWORD *)&v1327.isContentEditable = v596;
                          v1327.containerScrollingNodeID.m_value.m_object.m_identifier = (unint64_t)v597;
                          v598 = v1310;
                          v1310 = 0;
                          v599 = v1300[0];
                          v1300[0] = 0;
                          v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = (unint64_t)v598;
                          *(_QWORD *)&v1327.isDataDetectorLink = v599;
                          WTF::MachSendRight::MachSendRight();
                          v1327.url.m_string.m_impl.m_ptr = *(StringImpl **)&v1368[8];
                          *((WTF::StringImpl **)&v1327.url + 1) = v1312[0];
                          v593 = 1;
                        }
                        else
                        {
                          LOBYTE(v1327.request.point.m_x) = 0;
                        }
                        LOBYTE(v1327.url.m_userEnd) = v593;
                        if (v1368[16])
                          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v1368);
                      }
                      else
                      {
                        LOBYTE(v1327.request.point.m_x) = 0;
                        LOBYTE(v1327.url.m_userEnd) = 0;
                      }
                      if (LOBYTE(v1300[1]))
                      {
                        v878 = v1300[0];
                        v1300[0] = 0;
                        if (v878)
                        {
                          if (*(_DWORD *)v878 == 2)
                            WTF::StringImpl::destroy(v878, v33);
                          else
                            *(_DWORD *)v878 -= 2;
                        }
                      }
                    }
                    else
                    {
                      LOBYTE(v1327.request.point.m_x) = 0;
                      LOBYTE(v1327.url.m_userEnd) = 0;
                    }
                    if (v1311)
                    {
                      v879 = v1310;
                      v1310 = 0;
                      if (v879)
                      {
                        if (*(_DWORD *)v879 == 2)
                          WTF::StringImpl::destroy(v879, v33);
                        else
                          *(_DWORD *)v879 -= 2;
                      }
                    }
                  }
                  else
                  {
                    LOBYTE(v1327.request.point.m_x) = 0;
                    LOBYTE(v1327.url.m_userEnd) = 0;
                  }
                  if (v1309)
                  {
                    v880 = v1308;
                    v1308 = 0;
                    if (v880)
                    {
                      if (*(_DWORD *)v880 == 2)
                        WTF::StringImpl::destroy(v880, v33);
                      else
                        *(_DWORD *)v880 -= 2;
                    }
                  }
                }
                else
                {
                  LOBYTE(v1327.request.point.m_x) = 0;
                  LOBYTE(v1327.url.m_userEnd) = 0;
                }
                if (v1307)
                {
                  v881 = v1306;
                  v1306 = 0;
                  if (v881)
                  {
                    if (*(_DWORD *)v881 == 2)
                      WTF::StringImpl::destroy(v881, v33);
                    else
                      *(_DWORD *)v881 -= 2;
                  }
                }
              }
              else
              {
                LOBYTE(v1327.request.point.m_x) = 0;
                LOBYTE(v1327.url.m_userEnd) = 0;
              }
              if (v1305)
              {
                v882 = v1304;
                v1304 = 0;
                if (v882)
                {
                  if (*(_DWORD *)v882 == 2)
                    WTF::StringImpl::destroy(v882, v33);
                  else
                    *(_DWORD *)v882 -= 2;
                }
              }
            }
            else
            {
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.url.m_userEnd) = 0;
            }
            if (v1321[16])
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v1321);
          }
          else
          {
            LOBYTE(v1327.request.point.m_x) = 0;
            LOBYTE(v1327.url.m_userEnd) = 0;
          }
          if (v1303)
          {
            v883 = v1302;
            v1302 = 0;
            if (v883)
            {
              if (*(_DWORD *)v883 == 2)
                WTF::StringImpl::destroy(v883, v33);
              else
                *(_DWORD *)v883 -= 2;
            }
          }
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
          LOBYTE(v1327.url.m_userEnd) = 0;
        }
        if (!LOBYTE(v1327.url.m_userEnd))
        {
          v988 = *(_QWORD *)p_includeSnapshot;
          v989 = *((_QWORD *)p_includeSnapshot + 1);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v990 = *((_QWORD *)p_includeSnapshot + 3);
          if (!v990)
            goto LABEL_1678;
          if (!v989)
            goto LABEL_1678;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v990 + 16))(v990, v988);
          if (!LOBYTE(v1327.url.m_userEnd))
            goto LABEL_1678;
        }
        v884 = (WTF::StringImpl *)*((_QWORD *)&v1327.url + 1);
        *((_QWORD *)&v1327.url + 1) = 0;
        if (v884)
        {
          if (*(_DWORD *)v884 == 2)
            WTF::StringImpl::destroy(v884, v33);
          else
            *(_DWORD *)v884 -= 2;
        }
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1327.adjustedPointForNodeRespondingToClickEvents);
        v886 = *(WTF::StringImpl **)&v1327.isDataDetectorLink;
        *(_QWORD *)&v1327.isDataDetectorLink = 0;
        if (v886)
        {
          if (*(_DWORD *)v886 == 2)
            WTF::StringImpl::destroy(v886, v885);
          else
            *(_DWORD *)v886 -= 2;
        }
        v887 = (WTF::StringImpl *)v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
        v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
        if (v887)
        {
          if (*(_DWORD *)v887 == 2)
            WTF::StringImpl::destroy(v887, v885);
          else
            *(_DWORD *)v887 -= 2;
        }
        v888 = (WTF::StringImpl *)v1327.containerScrollingNodeID.m_value.m_object.m_identifier;
        v1327.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
        if (v888)
        {
          if (*(_DWORD *)v888 == 2)
            WTF::StringImpl::destroy(v888, v885);
          else
            *(_DWORD *)v888 -= 2;
        }
        v889 = *(WTF::StringImpl **)&v1327.isContentEditable;
        *(_QWORD *)&v1327.isContentEditable = 0;
        if (v889)
        {
          if (*(_DWORD *)v889 == 2)
            WTF::StringImpl::destroy(v889, v885);
          else
            *(_DWORD *)v889 -= 2;
        }
        v890 = *(WTF::StringImpl **)&v1327.isLink;
        *(_QWORD *)&v1327.isLink = 0;
        if (v890)
        {
          if (*(_DWORD *)v890 == 2)
            WTF::StringImpl::destroy(v890, v885);
          else
            *(_DWORD *)v890 -= 2;
        }
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1327.request.includeSnapshot);
        goto LABEL_1150;
      }
      if (v17 == 2054)
      {
        IPC::Decoder::decode<std::tuple<WebKit::InteractionInformationAtPosition>>(&v1327, (unint64_t *)p_includeSnapshot);
        if (v1344)
        {
          WebKit::WebPageProxy::showDataDetectorsUIForPositionInformation((WebKit::WebPageProxy *)v13, &v1327);
          if (v1344)
LABEL_29:
            WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)&v1327, v29);
        }
        goto LABEL_1678;
      }
LABEL_1174:
      if (*((unsigned __int16 *)p_includeSnapshot + 25) <= 0x7CDu)
      {
        if (*((unsigned __int16 *)p_includeSnapshot + 25) <= 0x77Fu)
        {
          switch(v17)
          {
            case 1851:
              IPC::Decoder::decode<WTF::URL>((uint64_t *)p_includeSnapshot, v1321);
              if ((_BYTE)v1322)
              {
                IPC::ArgumentCoder<WebCore::ContentRuleListResults,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
                if (v1368[56]
                  || (v33 = *(WTF::StringImpl **)p_includeSnapshot,
                      v1136 = *((_QWORD *)p_includeSnapshot + 1),
                      *(_QWORD *)p_includeSnapshot = 0,
                      *((_QWORD *)p_includeSnapshot + 1) = 0,
                      (v1137 = *((_QWORD *)p_includeSnapshot + 3)) != 0)
                  && v1136
                  && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1137 + 16))(v1137, v33),
                      v1368[56]))
                {
                  if (!(_BYTE)v1322)
                    goto LABEL_2630;
                  v651 = *(IntPoint *)v1321;
                  *(_QWORD *)v1321 = 0;
                  v1327.request.point = v651;
                  *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)&v1321[8];
                  *(_OWORD *)&v1327.isLink = *(_OWORD *)&v1321[24];
                  *(_DWORD *)&v1321[8] &= ~1u;
                  LODWORD(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = *(_DWORD *)v1368;
                  v652 = *(_QWORD *)&v1368[8];
                  memset(&v1368[8], 0, 48);
                  v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = v652;
                  *(_QWORD *)&v1327.isDataDetectorLink = *(_QWORD *)&v1368[16];
                  v1327.adjustedPointForNodeRespondingToClickEvents = *(FloatPoint *)&v1368[24];
                  v1327.url.m_string.m_impl.m_ptr = *(StringImpl **)&v1368[32];
                  *((_QWORD *)&v1327.url + 1) = *(_QWORD *)&v1368[40];
                  *(_QWORD *)&v1327.url.m_userEnd = *(_QWORD *)&v1368[48];
                  LOBYTE(v1327.url.m_hostEnd) = 1;
                  WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1368[40], v33);
                  WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1368[24], v653);
                  WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1368[8], v654);
                  v655 = 0;
                }
                else
                {
                  LOBYTE(v1327.request.point.m_x) = 0;
                  LOBYTE(v1327.url.m_hostEnd) = 0;
                  v655 = 1;
                }
                if ((_BYTE)v1322)
                {
                  v656 = *(WTF::StringImpl **)v1321;
                  *(_QWORD *)v1321 = 0;
                  if (v656)
                  {
                    if (*(_DWORD *)v656 == 2)
                      WTF::StringImpl::destroy(v656, v33);
                    else
                      *(_DWORD *)v656 -= 2;
                  }
                }
                if (!v655)
                {
                  (*(void (**)(_QWORD, unint64_t, InteractionInformationAtPosition *, Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>::MarkableTraits> *))(**(_QWORD **)(v13 + 72) + 312))(*(_QWORD *)(v13 + 72), v13, &v1327, &v1327.containerScrollingNodeID);
                  if (!LOBYTE(v1327.url.m_hostEnd))
                    goto LABEL_1678;
                  WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.url + 8, v891);
                  WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.adjustedPointForNodeRespondingToClickEvents, v892);
                  WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.containerScrollingNodeID.m_value.m_processIdentifier, v893);
                  goto LABEL_1150;
                }
              }
LABEL_1976:
              v913 = *(_QWORD *)p_includeSnapshot;
              v976 = *((_QWORD *)p_includeSnapshot + 1);
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v915 = *((_QWORD *)p_includeSnapshot + 3);
              if (!v915)
                goto LABEL_1678;
LABEL_1977:
              if (!v976)
                goto LABEL_1678;
LABEL_1978:
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v915 + 16))(v915, v913);
              goto LABEL_1678;
            case 1884:
              goto LABEL_1678;
            case 1913:
              v627 = *(_QWORD *)(v13 + 40);
              if (v627)
                v60 = *(_QWORD *)(v627 + 8);
              else
                v60 = 0;
              (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1584))(v60);
              (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1608))(v60);
              goto LABEL_618;
          }
        }
        else if (*((unsigned __int16 *)p_includeSnapshot + 25) > 0x796u)
        {
          if (v17 == 1943)
          {
            IPC::ArgumentCoder<WebCore::LinkIcon,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
            if (!v1369[16])
            {
              v1123 = *(_QWORD *)p_includeSnapshot;
              v1124 = *((_QWORD *)p_includeSnapshot + 1);
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1125 = *((_QWORD *)p_includeSnapshot + 3);
              if (!v1125
                || !v1124
                || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1125 + 16))(v1125, v1123), !v1369[16]))
              {
                LOBYTE(v1327.request.point.m_x) = 0;
                goto LABEL_1837;
              }
            }
            IPC::Decoder::decode<WebKit::CallbackID>((uint64_t *)p_includeSnapshot, v1321);
            v12 = v1321[8];
            if (v1321[8])
            {
              if (!v1369[16])
                goto LABEL_2630;
              v643 = *(IntPoint *)v1368;
              *(_QWORD *)v1368 = 0;
              v1327.request.point = v643;
              *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)&v1368[8];
              *(_OWORD *)&v1327.isLink = *(_OWORD *)&v1368[24];
              *(_DWORD *)&v1368[8] &= ~1u;
              LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = v1368[40];
              *(_OWORD *)&v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = *(_OWORD *)&v1368[48];
              v644 = *(FloatPoint *)v1369;
              *(_QWORD *)&v1368[48] = 0;
              *(_QWORD *)v1369 = 0;
              v1327.adjustedPointForNodeRespondingToClickEvents = v644;
              v645 = *(StringImpl **)&v1369[8];
              *(_QWORD *)&v1369[8] = 0;
              v1327.url.m_string.m_impl.m_ptr = v645;
              *((_QWORD *)&v1327.url + 1) = *(_QWORD *)v1321;
              LOBYTE(v1327.url.m_userEnd) = 1;
            }
            else
            {
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.url.m_userEnd) = 0;
              if (!v1369[16])
                goto LABEL_1837;
            }
            WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1369, v33);
            v759 = *(WTF::StringImpl **)&v1368[48];
            *(_QWORD *)&v1368[48] = 0;
            if (v759)
            {
              if (*(_DWORD *)v759 == 2)
                WTF::StringImpl::destroy(v759, v758);
              else
                *(_DWORD *)v759 -= 2;
            }
            v794 = *(WTF::StringImpl **)v1368;
            *(_QWORD *)v1368 = 0;
            if (v794)
            {
              if (*(_DWORD *)v794 == 2)
                WTF::StringImpl::destroy(v794, v758);
              else
                *(_DWORD *)v794 -= 2;
            }
            if ((_DWORD)v12)
            {
              *(_QWORD *)v1368 = *((_QWORD *)&v1327.url + 1);
              WebKit::WebPageProxy::getLoadDecisionForIcon(v13, (uint64_t)&v1327, (uint64_t *)v1368);
              if (!LOBYTE(v1327.url.m_userEnd))
                goto LABEL_1678;
              WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.adjustedPointForNodeRespondingToClickEvents, v795);
              v796 = (WTF::StringImpl *)v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
              v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
              if (!v796)
                goto LABEL_1150;
              goto LABEL_2476;
            }
            goto LABEL_1837;
          }
          if (v17 == 1958)
          {
            v1327.request.point = (IntPoint)IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)p_includeSnapshot);
            *(_DWORD *)&v1327.request.includeSnapshot = v632;
            if ((_BYTE)v632)
              (*(void (**)(_QWORD, InteractionInformationAtPosition *))(**(_QWORD **)(v13 + 104) + 528))(*(_QWORD *)(v13 + 104), &v1327);
            goto LABEL_1678;
          }
        }
        else
        {
          if (v17 == 1920)
            goto LABEL_1678;
          if (v17 == 1936)
          {
            v600 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)p_includeSnapshot);
            if (v601)
              *(_QWORD *)(*(_QWORD *)(v13 + 32) + 704) = v600;
            goto LABEL_1678;
          }
        }
        goto LABEL_1478;
      }
      if (*((unsigned __int16 *)p_includeSnapshot + 25) > 0x802u)
      {
        if (*((unsigned __int16 *)p_includeSnapshot + 25) > 0x81Cu)
        {
          if (v17 == 2077)
          {
            v646 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
            if (v647)
            {
              v648 = v646;
              v649 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
              if (v650)
              {
                WebKit::WebPageProxy::stopURLSchemeTask(v13, v12, v648, v649);
                goto LABEL_1678;
              }
            }
            v670 = *(_QWORD *)p_includeSnapshot;
            v675 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v672 = *((_QWORD *)p_includeSnapshot + 3);
            if (!v672)
              goto LABEL_1678;
            goto LABEL_1557;
          }
          if (v17 == 2088)
          {
            v633 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
            if (v633 >= 0x100u)
              *(_BYTE *)(v13 + 705) = v633 != 0;
            goto LABEL_1678;
          }
          goto LABEL_1478;
        }
        if (v17 != 2051)
        {
          if (v17 == 2075)
          {
            IPC::Decoder::decode<std::tuple<WebKit::URLSchemeTaskParameters>>((uint64_t *)p_includeSnapshot, &v1327);
            if ((_BYTE)v1332)
              WebKit::WebPageProxy::startURLSchemeTask(v13, (WebKit::AuxiliaryProcessProxy *)v12, (uint64_t *)&v1327.request.point);
            std::__optional_destruct_base<WebKit::URLSchemeTaskParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v605);
            goto LABEL_1678;
          }
          goto LABEL_1478;
        }
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
        if (!v1321[16])
        {
          LOBYTE(v1327.request.point.m_x) = 0;
          LOBYTE(v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width) = 0;
LABEL_2278:
          v1120 = *(_QWORD *)p_includeSnapshot;
          v1121 = *((_QWORD *)p_includeSnapshot + 1);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v1122 = *((_QWORD *)p_includeSnapshot + 3);
          if (!v1122)
            goto LABEL_1678;
          if (!v1121)
            goto LABEL_1678;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1122 + 16))(v1122, v1120);
          if (!LOBYTE(v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width))
            goto LABEL_1678;
LABEL_2307:
          v1143 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if ((_BYTE)v1144)
          {
            *(_QWORD *)v1368 = v1143;
            p_includeSnapshot = &v1368[8];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
            v1145 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v1145 = off_1E34FC0D8;
            v1145[1] = *(_QWORD *)v1368;
            v1146 = *(_QWORD *)&v1368[8];
            *(_QWORD *)&v1368[8] = 0;
            v1145[2] = v1146;
            *(_QWORD *)v1321 = v1145;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
            if (!LOBYTE(v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width))
              goto LABEL_2630;
            WebKit::WebPageProxy::shouldAllowDeviceOrientationAndMotionAccess(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (uint64_t)&v1327.canBeValid, SLOBYTE(v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_location.m_x), (unsigned int *)v1321);
            v1147 = *(_QWORD *)v1321;
            *(_QWORD *)v1321 = 0;
            if (v1147)
              (*(void (**)(uint64_t))(*(_QWORD *)v1147 + 8))(v1147);
          }
          if (LOBYTE(v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width))
          {
            v1148 = (WTF::StringImpl *)v1327.cursor.var0.__val_.m_hotSpot;
            v1327.cursor.var0.__val_.m_hotSpot = 0;
            if (v1148)
            {
              if (*(_DWORD *)v1148 == 2)
                WTF::StringImpl::destroy(v1148, v1144);
              else
                *(_DWORD *)v1148 -= 2;
            }
            if (LODWORD(v1327.cursor.var0.__val_.m_image.m_ptr) != -1)
              ((void (*)(_BYTE *, float *))off_1E34FBEB0[LODWORD(v1327.cursor.var0.__val_.m_image.m_ptr)])(v1368, &v1327.lineCaretExtent.m_location.m_y);
            LODWORD(v1327.cursor.var0.__val_.m_image.m_ptr) = -1;
            v1149 = *(const void **)&v1327.caretLength;
            *(_QWORD *)&v1327.caretLength = 0;
            if (v1149)
              CFRelease(v1149);
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v1327.isLink);
          }
          goto LABEL_1678;
        }
        IPC::Decoder::decode<WebKit::FrameInfoData>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
        v638 = LOBYTE(v1380.m_location.m_x);
        if (!LOBYTE(v1380.m_location.m_x))
          goto LABEL_2305;
        v30 = *((_QWORD *)p_includeSnapshot + 1);
        v33 = *(WTF::StringImpl **)p_includeSnapshot;
        v639 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
        if (v30 <= v639)
        {
          v1138 = 0;
          v1139 = 0;
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v1140 = *((_QWORD *)p_includeSnapshot + 3);
          if (v1140)
          {
            if (v30)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1140 + 16))(v1140);
              v1139 = *(_QWORD *)p_includeSnapshot;
              v1138 = *((_QWORD *)p_includeSnapshot + 1);
            }
            else
            {
              v1138 = 0;
              v1139 = 0;
            }
          }
        }
        else
        {
          v640 = (unsigned __int8 *)v33 + v639;
          *((_QWORD *)p_includeSnapshot + 2) = v640 + 1;
          if (v33)
          {
            v641 = *v640;
            if (v641 < 2)
            {
              if (!v1321[16])
                goto LABEL_2630;
              v642 = v641 != 0;
              v1327.request = *(InteractionInformationRequest *)v1321;
              std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v1327.canBeValid, (uint64_t)v1368);
              LOBYTE(v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_location.m_x) = v642;
              v638 = 1;
LABEL_2306:
              LOBYTE(v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width) = v638;
              std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v33);
              if (LOBYTE(v1327.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width))
                goto LABEL_2307;
              goto LABEL_2278;
            }
            goto LABEL_2303;
          }
          v1138 = v30;
          v1139 = 0;
        }
        v30 = 0;
        v33 = 0;
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v1141 = *((_QWORD *)p_includeSnapshot + 3);
        if (v1141)
        {
          if (v1138)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1141 + 16))(v1141, v1139, v1138);
            v33 = *(WTF::StringImpl **)p_includeSnapshot;
            v30 = *((_QWORD *)p_includeSnapshot + 1);
          }
          else
          {
            v30 = 0;
            v33 = 0;
          }
        }
LABEL_2303:
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v1142 = *((_QWORD *)p_includeSnapshot + 3);
        if (v1142 && v30)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1142 + 16))(v1142, v33);
        v638 = 0;
LABEL_2305:
        LOBYTE(v1327.request.point.m_x) = 0;
        goto LABEL_2306;
      }
      switch(v17)
      {
        case 1998:
          v657 = *(_QWORD *)(v13 + 224);
          {
            WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
          }
          if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v657 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v16) & 1) != 0)
          {
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1300);
            if (!LOBYTE(v1300[1]))
              goto LABEL_1837;
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1312);
            if (LOBYTE(v1312[1]))
            {
              IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
              if (v1321[8])
              {
                IPC::Decoder::decode<IPC::SharedBufferReference>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
                if (v1368[24])
                {
                  if (!LOBYTE(v1300[1]) || !LOBYTE(v1312[1]) || !v1321[8])
                    goto LABEL_2630;
                  v659 = v1300[0];
                  v1300[0] = 0;
                  v660 = v1312[0];
                  v1312[0] = 0;
                  v1327.request.point = (IntPoint)v659;
                  *(_QWORD *)&v1327.request.includeSnapshot = v660;
                  v661 = *(_QWORD *)v1321;
                  *(_QWORD *)v1321 = 0;
                  *(_QWORD *)&v1327.canBeValid = v661;
                  *(_QWORD *)&v1327.isLink = *(_QWORD *)v1368;
                  v662 = *(_OWORD *)&v1368[8];
                  *(_QWORD *)&v1368[8] = 0;
                  *(_QWORD *)&v1368[16] = 0;
                  v663 = 1;
                  *(_OWORD *)&v1327.isContentEditable = v662;
                }
                else
                {
                  v663 = 0;
                  LOBYTE(v1327.request.point.m_x) = 0;
                }
                LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = v663;
                std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v33);
                if (v1321[8])
                {
                  v909 = *(WTF::StringImpl **)v1321;
                  *(_QWORD *)v1321 = 0;
                  if (v909)
                  {
                    if (*(_DWORD *)v909 == 2)
                      WTF::StringImpl::destroy(v909, v658);
                    else
                      *(_DWORD *)v909 -= 2;
                  }
                }
              }
              else
              {
                v663 = 0;
                LOBYTE(v1327.request.point.m_x) = 0;
                LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
              }
              if (LOBYTE(v1312[1]))
              {
                v920 = v1312[0];
                v1312[0] = 0;
                if (v920)
                {
                  if (*(_DWORD *)v920 == 2)
                    WTF::StringImpl::destroy(v920, v658);
                  else
                    *(_DWORD *)v920 -= 2;
                }
              }
            }
            else
            {
              v663 = 0;
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
            }
            if (LOBYTE(v1300[1]))
            {
              v921 = v1300[0];
              v1300[0] = 0;
              if (v921)
              {
                if (*(_DWORD *)v921 == 2)
                  WTF::StringImpl::destroy(v921, v658);
                else
                  *(_DWORD *)v921 -= 2;
              }
            }
            if (!v663)
              goto LABEL_1837;
            WebKit::WebPageProxy::registerAttachmentIdentifierFromData((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, (const WTF::String *)&v1327, (const WTF::String *)&v1327.request.includeSnapshot, (const WTF::String *)&v1327.canBeValid, (const IPC::SharedBufferReference *)&v1327.isLink);
            if (!LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
              goto LABEL_1678;
            v922 = (unsigned int *)v1327.containerScrollingNodeID.m_value.m_object.m_identifier;
            v1327.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
            if (v922)
              WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v922);
            v923 = *(unsigned int **)&v1327.isContentEditable;
            *(_QWORD *)&v1327.isContentEditable = 0;
            if (v923)
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v923, v54);
LABEL_1865:
            v924 = *(WTF::StringImpl **)&v1327.canBeValid;
            *(_QWORD *)&v1327.canBeValid = 0;
            if (!v924)
              goto LABEL_2475;
            goto LABEL_1866;
          }
          v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
          break;
        case 2014:
          IPC::Decoder::decode<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>>((unint64_t *)p_includeSnapshot, &v1327);
          if (v1327.isLink)
          {
            v664 = *(_QWORD *)(v13 + 40);
            if (v664)
              v665 = *(_QWORD *)(v664 + 8);
            else
              v665 = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v665 + 1584))(v665);
            (*(void (**)(uint64_t, InteractionInformationAtPosition *, BOOL *))(*(_QWORD *)v665 + 1752))(v665, &v1327, &v1327.canBeValid);
            (*(void (**)(uint64_t))(*(_QWORD *)v665 + 1592))(v665);
          }
          goto LABEL_1678;
        case 2041:
          v628 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
          if (v628 < 0x100u)
            goto LABEL_1678;
          v629 = v628 != 0;
          *(_BYTE *)(v13 + 392) = v629;
          v317 = *(_QWORD *)(v13 + 384);
          if (!v317)
            goto LABEL_1678;
          v630 = *(_DWORD *)(v317 + 16);
          *(_DWORD *)(v317 + 16) = v630 + 1;
          *(_BYTE *)(v317 + 32) = v629;
          if (v630)
          {
            *(_DWORD *)(v317 + 16) = v630;
            goto LABEL_1678;
          }
          goto LABEL_521;
      }
LABEL_1478:
      if (v17 == 1999)
      {
        v755 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v755 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String>>((uint64_t *)p_includeSnapshot, &v1327);
          if (v1327.isLink)
            WebKit::WebPageProxy::registerAttachmentIdentifierFromFilePath((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, (const WTF::String *)&v1327, (const WTF::String *)&v1327.request.includeSnapshot, (const WTF::String *)&v1327.canBeValid);
          std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v756);
          goto LABEL_1678;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1997)
      {
        v757 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v757 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v16) & 1) != 0)
        {
          IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
          if (!v1327.request.includeSnapshot)
            goto LABEL_1678;
          WebKit::WebPageProxy::registerAttachmentIdentifier((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, (const WTF::String *)&v1327);
          goto LABEL_1782;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 2000)
      {
        v797 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v797 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)p_includeSnapshot, v15, (uint64_t)&v1327);
          if (v1327.canBeValid)
          {
            WebKit::WebPageProxy::registerAttachmentsFromSerializedData((_QWORD *)v13, v12, (unsigned int *)&v1327);
            if (v1327.canBeValid)
              WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327, v798);
          }
          goto LABEL_1678;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1845)
      {
        v864 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v864 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v16) & 1) != 0)
        {
          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((uint64_t *)p_includeSnapshot, &v1327);
          if (v1327.canBeValid)
            WebKit::WebPageProxy::cloneAttachmentData((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, (const WTF::String *)&v1327, (WTF::StringImpl **)&v1327.request.includeSnapshot);
LABEL_1117:
          std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v552);
          goto LABEL_1678;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1899)
      {
        v865 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v865 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
          if (!v1321[8])
          {
            v871 = 0;
            LOBYTE(v1327.request.point.m_x) = 0;
            v1327.isLink = 0;
            goto LABEL_1833;
          }
          IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1368);
          if (!v1368[8])
          {
            v871 = 0;
            LOBYTE(v1327.request.point.m_x) = 0;
            v1327.isLink = 0;
LABEL_2466:
            v869 = 1;
            goto LABEL_2467;
          }
          v30 = *((_QWORD *)p_includeSnapshot + 1);
          v33 = *(WTF::StringImpl **)p_includeSnapshot;
          v866 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
          if (v30 <= v866)
          {
            v1198 = 0;
            v1199 = 0;
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1200 = *((_QWORD *)p_includeSnapshot + 3);
            if (v1200)
            {
              if (v30)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v1200 + 16))(v1200);
                v1199 = *(_QWORD *)p_includeSnapshot;
                v1198 = *((_QWORD *)p_includeSnapshot + 1);
              }
              else
              {
                v1198 = 0;
                v1199 = 0;
              }
            }
          }
          else
          {
            v867 = (unsigned __int8 *)v33 + v866;
            *((_QWORD *)p_includeSnapshot + 2) = v867 + 1;
            if (v33)
            {
              v868 = *v867;
              if (v868 < 3)
              {
                if (v1321[8])
                {
                  v869 = 0;
                  v870 = *(IntPoint *)v1321;
                  *(_QWORD *)v1321 = 0;
                  v1327.request.point = v870;
                  *(_QWORD *)&v1327.request.includeSnapshot = *(_QWORD *)v1368;
                  v1327.canBeValid = v868;
                  v871 = 1;
                  v1327.isLink = 1;
LABEL_2467:
                  if (v1321[8])
                  {
                    v1204 = *(WTF::StringImpl **)v1321;
                    *(_QWORD *)v1321 = 0;
                    if (v1204)
                    {
                      if (*(_DWORD *)v1204 == 2)
                        WTF::StringImpl::destroy(v1204, v33);
                      else
                        *(_DWORD *)v1204 -= 2;
                    }
                  }
                  if (!v869)
                  {
LABEL_2473:
                    if (!v871)
                      goto LABEL_1678;
                    WebKit::WebPageProxy::didInsertAttachmentWithIdentifier((const WTF::String *)v13, v12, (const WTF::StringImpl *)&v1327, (uint64_t)&v1327.request.includeSnapshot, v1327.canBeValid);
                    if (!v1327.isLink)
                      goto LABEL_1678;
LABEL_2475:
                    v796 = *(WTF::StringImpl **)&v1327.request.includeSnapshot;
                    *(_QWORD *)&v1327.request.includeSnapshot = 0;
                    if (!v796)
                    {
LABEL_1150:
                      v58 = (WTF::StringImpl *)v1327.request.point;
                      v1327.request.point = 0;
                      if (!v58)
                        goto LABEL_1678;
LABEL_1151:
                      if (*(_DWORD *)v58 != 2)
                      {
                        *(_DWORD *)v58 -= 2;
                        goto LABEL_1678;
                      }
                      goto LABEL_968;
                    }
LABEL_2476:
                    if (*(_DWORD *)v796 == 2)
                      WTF::StringImpl::destroy(v796, v54);
                    else
                      *(_DWORD *)v796 -= 2;
                    goto LABEL_1150;
                  }
LABEL_1833:
                  v910 = *(_QWORD *)p_includeSnapshot;
                  v911 = *((_QWORD *)p_includeSnapshot + 1);
                  *(_QWORD *)p_includeSnapshot = 0;
                  *((_QWORD *)p_includeSnapshot + 1) = 0;
                  v912 = *((_QWORD *)p_includeSnapshot + 3);
                  if (v912 && v911)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v912 + 16))(v912, v910);
                  goto LABEL_2473;
                }
                goto LABEL_2630;
              }
LABEL_2459:
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1202 = *((_QWORD *)p_includeSnapshot + 3);
              if (v1202 && v30)
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1202 + 16))(v1202, v33);
              LOBYTE(v1327.request.point.m_x) = 0;
              v1327.isLink = 0;
              if (v1368[8])
              {
                v1203 = *(WTF::StringImpl **)v1368;
                *(_QWORD *)v1368 = 0;
                if (v1203)
                {
                  if (*(_DWORD *)v1203 != 2)
                  {
                    v871 = 0;
                    *(_DWORD *)v1203 -= 2;
                    goto LABEL_2466;
                  }
                  WTF::StringImpl::destroy(v1203, v33);
                }
              }
              v871 = 0;
              goto LABEL_2466;
            }
            v1198 = v30;
            v1199 = 0;
          }
          v30 = 0;
          v33 = 0;
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v1201 = *((_QWORD *)p_includeSnapshot + 3);
          if (v1201)
          {
            if (v1198)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1201 + 16))(v1201, v1199, v1198);
              v33 = *(WTF::StringImpl **)p_includeSnapshot;
              v30 = *((_QWORD *)p_includeSnapshot + 1);
            }
            else
            {
              v30 = 0;
              v33 = 0;
            }
          }
          goto LABEL_2459;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1911)
      {
        v894 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v894 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v16) & 1) != 0)
        {
          IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
          if (!v1327.request.includeSnapshot)
            goto LABEL_1678;
          WebKit::WebPageProxy::didRemoveAttachmentWithIdentifier((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, (const WTF::String *)&v1327);
LABEL_1782:
          if (!v1327.request.includeSnapshot)
            goto LABEL_1678;
          goto LABEL_1150;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 2093)
      {
        v898 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v898 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<WebCore::PromisedAttachmentInfo>((uint64_t *)p_includeSnapshot, (uint64_t)v1368);
          if (v1368[24])
          {
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
            if (v1321[8])
            {
              if (v1368[24])
              {
                v899 = *(InteractionInformationRequest *)v1368;
                memset(v1368, 0, 24);
                v1327.request = v899;
                *(_QWORD *)&v1327.canBeValid = *(_QWORD *)&v1368[16];
                *(_QWORD *)&v1327.isLink = *(_QWORD *)v1321;
                v1327.isContentEditable = 1;
                std::__optional_destruct_base<WebCore::PromisedAttachmentInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v33);
                WebKit::WebPageProxy::writePromisedAttachmentToPasteboard((WebKit::WebPageProxy *)v13, v12, (const WTF::StringImpl *)&v1327, (const WTF::StringImpl **)&v1327.isLink);
                if (!v1327.isContentEditable)
                  goto LABEL_1678;
                v901 = *(WTF::StringImpl **)&v1327.isLink;
                *(_QWORD *)&v1327.isLink = 0;
                if (v901)
                {
                  if (*(_DWORD *)v901 == 2)
                    WTF::StringImpl::destroy(v901, v900);
                  else
                    *(_DWORD *)v901 -= 2;
                }
                WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.request.includeSnapshot, v900);
                goto LABEL_1150;
              }
              goto LABEL_2630;
            }
          }
          LOBYTE(v1327.request.point.m_x) = 0;
          std::__optional_destruct_base<WebCore::PromisedAttachmentInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v33);
LABEL_1837:
          v913 = *(_QWORD *)p_includeSnapshot;
          v914 = *((_QWORD *)p_includeSnapshot + 1);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v915 = *((_QWORD *)p_includeSnapshot + 3);
          if (!v915)
            goto LABEL_1678;
          goto LABEL_1838;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 2007)
      {
        v902 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v902 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v16) & 1) != 0)
        {
          IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1300);
          if (!LOBYTE(v1300[1]))
            goto LABEL_1837;
          IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1312);
          if (!LOBYTE(v1312[1]))
          {
            v907 = 0;
            LOBYTE(v1327.request.point.m_x) = 0;
            LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
LABEL_2130:
            if (LOBYTE(v1300[1]))
            {
              v1083 = v1300[0];
              v1300[0] = 0;
              if (v1083)
              {
                if (*(_DWORD *)v1083 == 2)
                  WTF::StringImpl::destroy(v1083, v33);
                else
                  *(_DWORD *)v1083 -= 2;
              }
            }
            if (!v907)
              goto LABEL_1837;
            WebKit::WebPageProxy::requestAttachmentIcon((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, (const WTF::String *)&v1327, (const WTF::String *)&v1327.request.includeSnapshot, (const WTF::String *)&v1327.canBeValid, (const WTF::String *)&v1327.isLink, (const WebCore::FloatSize *)&v1327.isContentEditable);
            if (!LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier))
              goto LABEL_1678;
            v1084 = *(WTF::StringImpl **)&v1327.isLink;
            *(_QWORD *)&v1327.isLink = 0;
            if (v1084)
            {
              if (*(_DWORD *)v1084 == 2)
                WTF::StringImpl::destroy(v1084, v54);
              else
                *(_DWORD *)v1084 -= 2;
            }
            goto LABEL_1865;
          }
          IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
          if (!v1321[8])
          {
            v907 = 0;
            LOBYTE(v1327.request.point.m_x) = 0;
            LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
LABEL_2125:
            if (LOBYTE(v1312[1]))
            {
              v1082 = v1312[0];
              v1312[0] = 0;
              if (v1082)
              {
                if (*(_DWORD *)v1082 == 2)
                  WTF::StringImpl::destroy(v1082, v33);
                else
                  *(_DWORD *)v1082 -= 2;
              }
            }
            goto LABEL_2130;
          }
          IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1368);
          if (!v1368[8])
          {
            v907 = 0;
            LOBYTE(v1327.request.point.m_x) = 0;
            LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
            goto LABEL_2068;
          }
          v903 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)p_includeSnapshot);
          if (!(_BYTE)v33)
          {
            v33 = *(WTF::StringImpl **)p_includeSnapshot;
            v1245 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1246 = *((_QWORD *)p_includeSnapshot + 3);
            if (v1246 && v1245)
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1246 + 16))(v1246, v33);
            LOBYTE(v1327.request.point.m_x) = 0;
            LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
            if (v1368[8])
            {
              v1247 = *(WTF::StringImpl **)v1368;
              *(_QWORD *)v1368 = 0;
              if (v1247)
              {
                if (*(_DWORD *)v1247 != 2)
                {
                  v907 = 0;
                  *(_DWORD *)v1247 -= 2;
                  goto LABEL_2068;
                }
                WTF::StringImpl::destroy(v1247, v33);
              }
            }
            v907 = 0;
            goto LABEL_2068;
          }
          if (LOBYTE(v1300[1]) && LOBYTE(v1312[1]) && v1321[8] && v1368[8])
          {
            v904 = v1300[0];
            v1300[0] = 0;
            v905 = v1312[0];
            v1312[0] = 0;
            v1327.request.point = (IntPoint)v904;
            *(_QWORD *)&v1327.request.includeSnapshot = v905;
            v906 = *(_QWORD *)v1321;
            *(_QWORD *)v1321 = 0;
            *(_QWORD *)&v1327.canBeValid = v906;
            *(_QWORD *)&v1327.isLink = *(_QWORD *)v1368;
            *(_QWORD *)&v1327.isContentEditable = v903;
            v907 = 1;
            LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = 1;
LABEL_2068:
            if (v1321[8])
            {
              v1052 = *(WTF::StringImpl **)v1321;
              *(_QWORD *)v1321 = 0;
              if (v1052)
              {
                if (*(_DWORD *)v1052 == 2)
                  WTF::StringImpl::destroy(v1052, v33);
                else
                  *(_DWORD *)v1052 -= 2;
              }
            }
            goto LABEL_2125;
          }
LABEL_2630:
          __break(1u);
LABEL_2631:
          v1259 = 0;
          v1260 = 0;
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v1261 = *((_QWORD *)p_includeSnapshot + 3);
          if (v1261)
          {
            if (v30)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1261 + 16))(v1261);
              v1260 = *(_QWORD *)p_includeSnapshot;
              v1259 = *((_QWORD *)p_includeSnapshot + 1);
            }
            else
            {
              v1259 = 0;
              v1260 = 0;
            }
          }
LABEL_2632:
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v1262 = *((_QWORD *)p_includeSnapshot + 3);
          if (v1262 && v1259)
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1262 + 16))(v1262, v1260, v1259);
          goto LABEL_2633;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 > 2036)
      {
        switch(v17)
        {
          case 2067:
            v908 = *(_QWORD *)WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(v13 + 32));
            (*(void (**)(uint64_t))(*(_QWORD *)v908 + 40))(v908);
            goto LABEL_1678;
          case 2068:
            v1014 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
            if (!v1015)
              goto LABEL_1678;
            v1327.request.point = (IntPoint)v1014;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1327.request.includeSnapshot, (unsigned __int8 **)v12);
            v1016 = WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v1016 = off_1E34FC178;
            *(IntPoint *)(v1016 + 8) = v1327.request.point;
            v1017 = *(_QWORD *)&v1327.request.includeSnapshot;
            *(_QWORD *)&v1327.request.includeSnapshot = 0;
            *(_QWORD *)(v1016 + 16) = v1017;
            *(_QWORD *)v1368 = v1016;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1327.request.includeSnapshot);
            WebKit::WebPageProxy::speechSynthesisPause(v13, (uint64_t *)v1368);
            goto LABEL_520;
          case 2069:
            v1018 = *(_QWORD *)WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(v13 + 32));
            (*(void (**)(uint64_t))(*(_QWORD *)v1018 + 48))(v1018);
            goto LABEL_1678;
          case 2070:
            v1010 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
            if (!v1011)
              goto LABEL_1678;
            v1327.request.point = (IntPoint)v1010;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1327.request.includeSnapshot, (unsigned __int8 **)v12);
            v1012 = WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v1012 = off_1E34FC1A0;
            *(IntPoint *)(v1012 + 8) = v1327.request.point;
            v1013 = *(_QWORD *)&v1327.request.includeSnapshot;
            *(_QWORD *)&v1327.request.includeSnapshot = 0;
            *(_QWORD *)(v1012 + 16) = v1013;
            *(_QWORD *)v1368 = v1012;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1327.request.includeSnapshot);
            WebKit::WebPageProxy::speechSynthesisResume(v13, (uint64_t *)v1368);
            goto LABEL_520;
          case 2071:
            v1019 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
            if (!v1020)
              goto LABEL_1678;
            v1327.request.point = (IntPoint)v1019;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1327.request.includeSnapshot, (unsigned __int8 **)v12);
            v1021 = WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v1021 = off_1E34FC150;
            *(IntPoint *)(v1021 + 8) = v1327.request.point;
            v1022 = *(_QWORD *)&v1327.request.includeSnapshot;
            *(_QWORD *)&v1327.request.includeSnapshot = 0;
            *(_QWORD *)(v1021 + 16) = v1022;
            *(_QWORD *)v1368 = v1021;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1327.request.includeSnapshot);
            WebKit::WebPageProxy::speechSynthesisSetFinishedCallback(v13, (uint64_t *)v1368);
            goto LABEL_520;
          case 2072:
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, &v1310);
            if (!v1311)
              goto LABEL_1837;
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1300);
            if (!LOBYTE(v1300[1]))
            {
              v1008 = 0;
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.url.m_string.m_impl.m_ptr) = 0;
              goto LABEL_2639;
            }
            v30 = *((_QWORD *)p_includeSnapshot + 1);
            v33 = *(WTF::StringImpl **)p_includeSnapshot;
            v992 = ((*((_QWORD *)p_includeSnapshot + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)p_includeSnapshot;
            if (v30 < v992 || v30 - v992 <= 3)
              goto LABEL_2631;
            v993 = (float *)((char *)v33 + v992);
            *((_QWORD *)p_includeSnapshot + 2) = v993 + 1;
            if (!v33)
            {
              v1259 = v30;
              v1260 = 0;
              goto LABEL_2632;
            }
            v994 = (((unint64_t)v993 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v33;
            if (v30 < v994
              || v30 - v994 <= 3
              || (v6 = *v993,
                  *((_QWORD *)p_includeSnapshot + 2) = (((unint64_t)v993 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4,
                  LODWORD(v5) = *(_DWORD *)(((unint64_t)v993 + 7) & 0xFFFFFFFFFFFFFFFCLL),
                  v995 = (((((unint64_t)v993 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                       - (_QWORD)v33,
                  v30 < v995)
              || v30 - v995 <= 3)
            {
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1249 = *((_QWORD *)p_includeSnapshot + 3);
              if (v1249)
              {
                if (v30)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v1249 + 16))(v1249);
                  v33 = *(WTF::StringImpl **)p_includeSnapshot;
                  v1250 = *((_QWORD *)p_includeSnapshot + 1);
                  v1251 = *((_QWORD *)p_includeSnapshot + 3);
                  *(_QWORD *)p_includeSnapshot = 0;
                  *((_QWORD *)p_includeSnapshot + 1) = 0;
                  if (v1251)
                  {
                    if (v1250)
                      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1251 + 16))(v1251, v33);
                  }
                }
              }
LABEL_2633:
              v1008 = 0;
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.url.m_string.m_impl.m_ptr) = 0;
LABEL_2634:
              if (LOBYTE(v1300[1]))
              {
                v1263 = v1300[0];
                v1300[0] = 0;
                if (v1263)
                {
                  if (*(_DWORD *)v1263 == 2)
                    WTF::StringImpl::destroy(v1263, v33);
                  else
                    *(_DWORD *)v1263 -= 2;
                }
              }
LABEL_2639:
              if (v1311)
              {
                v1264 = v1310;
                v1310 = 0;
                if (v1264)
                {
                  if (*(_DWORD *)v1264 == 2)
                    WTF::StringImpl::destroy(v1264, v33);
                  else
                    *(_DWORD *)v1264 -= 2;
                }
              }
              if (v1008)
              {
                v1265 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
                if ((_BYTE)v54)
                {
                  *(_QWORD *)v1368 = v1265;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
                  v1266 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v1266 = off_1E34FC128;
                  v1266[1] = *(_QWORD *)v1368;
                  v1267 = *(_QWORD *)&v1368[8];
                  *(_QWORD *)&v1368[8] = 0;
                  v1266[2] = v1267;
                  *(_QWORD *)v1321 = v1266;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
                  WebKit::WebPageProxy::speechSynthesisSpeak(v13, (WTF::StringImpl *)&v1327, (WTF::StringImpl *)&v1327.request.includeSnapshot, (WebCore::PlatformSpeechSynthesisVoice *)&v1327.containerScrollingNodeID, (WTF::String *)&v1327.containerScrollingNodeID.m_value.m_processIdentifier, (WTF::String *)&v1327.isDataDetectorLink, (WTF::String *)(v4 != 0), v14 != 0, v6, *(float *)&v5, v7, (uint64_t *)v1321);
                  v1268 = *(_QWORD *)v1321;
                  *(_QWORD *)v1321 = 0;
                  if (v1268)
                    (*(void (**)(uint64_t))(*(_QWORD *)v1268 + 8))(v1268);
                  if (!LOBYTE(v1327.url.m_string.m_impl.m_ptr))
                    goto LABEL_1678;
                }
                v1269 = *(WTF::StringImpl **)&v1327.isDataDetectorLink;
                *(_QWORD *)&v1327.isDataDetectorLink = 0;
                if (v1269)
                {
                  if (*(_DWORD *)v1269 == 2)
                    WTF::StringImpl::destroy(v1269, v54);
                  else
                    *(_DWORD *)v1269 -= 2;
                }
                v1270 = (WTF::StringImpl *)v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
                v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
                if (v1270)
                {
                  if (*(_DWORD *)v1270 == 2)
                    WTF::StringImpl::destroy(v1270, v54);
                  else
                    *(_DWORD *)v1270 -= 2;
                }
                v924 = (WTF::StringImpl *)v1327.containerScrollingNodeID.m_value.m_object.m_identifier;
                v1327.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
                if (!v924)
                  goto LABEL_2475;
LABEL_1866:
                if (*(_DWORD *)v924 == 2)
                  WTF::StringImpl::destroy(v924, v54);
                else
                  *(_DWORD *)v924 -= 2;
                goto LABEL_2475;
              }
              goto LABEL_1837;
            }
            v996 = (float *)((char *)v33 + v995);
            v7 = *v996;
            *((_QWORD *)p_includeSnapshot + 2) = v996 + 1;
            v997 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)p_includeSnapshot);
            if (!(_BYTE)v33)
              goto LABEL_2633;
            v998 = v997;
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1312);
            if (!LOBYTE(v1312[1]))
            {
              v1008 = 0;
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.url.m_string.m_impl.m_ptr) = 0;
              goto LABEL_2634;
            }
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1321);
            if (!v1321[8])
            {
              v1008 = 0;
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.url.m_string.m_impl.m_ptr) = 0;
LABEL_2379:
              if (LOBYTE(v1312[1]))
              {
                v1174 = v1312[0];
                v1312[0] = 0;
                if (v1174)
                {
                  if (*(_DWORD *)v1174 == 2)
                    WTF::StringImpl::destroy(v1174, v33);
                  else
                    *(_DWORD *)v1174 -= 2;
                }
              }
              goto LABEL_2634;
            }
            IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1368);
            if (!v1368[8])
            {
              v1008 = 0;
              LOBYTE(v1327.request.point.m_x) = 0;
              LOBYTE(v1327.url.m_string.m_impl.m_ptr) = 0;
LABEL_2374:
              if (v1321[8])
              {
                v1173 = *(WTF::StringImpl **)v1321;
                *(_QWORD *)v1321 = 0;
                if (v1173)
                {
                  if (*(_DWORD *)v1173 == 2)
                    WTF::StringImpl::destroy(v1173, v33);
                  else
                    *(_DWORD *)v1173 -= 2;
                }
              }
              goto LABEL_2379;
            }
            v30 = *((_QWORD *)p_includeSnapshot + 1);
            v33 = *(WTF::StringImpl **)p_includeSnapshot;
            v999 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
            if (v30 <= v999)
            {
              v1271 = 0;
              v1272 = 0;
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1273 = *((_QWORD *)p_includeSnapshot + 3);
              if (v1273)
              {
                if (v30)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v1273 + 16))(v1273);
                  v1272 = *(_QWORD *)p_includeSnapshot;
                  v1271 = *((_QWORD *)p_includeSnapshot + 1);
                }
                else
                {
                  v1271 = 0;
                  v1272 = 0;
                }
              }
            }
            else
            {
              v1000 = (unsigned __int8 *)v33 + v999;
              *((_QWORD *)p_includeSnapshot + 2) = v1000 + 1;
              if (v33)
              {
                v1001 = *v1000;
                if (v1001 < 2)
                {
                  LOBYTE(v4) = v1001 != 0;
                  if (v30 <= v1000 + 1 - (unsigned __int8 *)v33)
                  {
                    v1276 = 0;
                    v1277 = 0;
                    *(_QWORD *)p_includeSnapshot = 0;
                    *((_QWORD *)p_includeSnapshot + 1) = 0;
                    v1278 = *((_QWORD *)p_includeSnapshot + 3);
                    if (v1278)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v1278 + 16))(v1278);
                      v1276 = 0;
                      v33 = *(WTF::StringImpl **)p_includeSnapshot;
                      v1298 = *((_QWORD *)p_includeSnapshot + 1);
                      v1299 = *((_QWORD *)p_includeSnapshot + 3);
                      *(_QWORD *)p_includeSnapshot = 0;
                      *((_QWORD *)p_includeSnapshot + 1) = 0;
                      v1277 = 0;
                      if (v1299)
                      {
                        if (v1298)
                        {
                          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1299 + 16))(v1299, v33);
                          v1277 = *(_QWORD *)p_includeSnapshot;
                          v1276 = *((_QWORD *)p_includeSnapshot + 1);
                        }
                      }
                    }
                  }
                  else
                  {
                    *((_QWORD *)p_includeSnapshot + 2) = v1000 + 2;
                    v1002 = v1000[1];
                    if (v1002 < 2)
                    {
                      LOBYTE(v14) = v1002 != 0;
                      if (!v1311 || !LOBYTE(v1300[1]) || !LOBYTE(v1312[1]) || !v1321[8])
                        goto LABEL_2630;
                      v1003 = v1310;
                      v1310 = 0;
                      v1004 = v1300[0];
                      v1300[0] = 0;
                      v1327.request.point = (IntPoint)v1003;
                      *(_QWORD *)&v1327.request.includeSnapshot = v1004;
                      *(float *)&v1327.canBeValid = v6;
                      *(_DWORD *)&v1327.isSelected = LODWORD(v5);
                      *(float *)&v1327.isLink = v7;
                      v1005 = v1312[0];
                      v1312[0] = 0;
                      *(_QWORD *)&v1327.isContentEditable = v998;
                      v1327.containerScrollingNodeID.m_value.m_object.m_identifier = (unint64_t)v1005;
                      v1006 = *(_QWORD *)v1321;
                      *(_QWORD *)v1321 = 0;
                      v1007 = *(_QWORD *)v1368;
                      *(_QWORD *)v1368 = 0;
                      v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = v1006;
                      *(_QWORD *)&v1327.isDataDetectorLink = v1007;
                      LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x) = v1001 != 0;
                      v1008 = 1;
                      BYTE1(v1327.adjustedPointForNodeRespondingToClickEvents.m_x) = (_BYTE)v14;
                      goto LABEL_2013;
                    }
                    v1276 = v30;
                    v1277 = (uint64_t)v33;
                  }
                  *(_QWORD *)p_includeSnapshot = 0;
                  *((_QWORD *)p_includeSnapshot + 1) = 0;
                  v1279 = *((_QWORD *)p_includeSnapshot + 3);
                  if (v1279 && v1276)
                    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1279 + 16))(v1279, v1277, v1276);
LABEL_2692:
                  v1008 = 0;
                  LOBYTE(v1327.request.point.m_x) = 0;
LABEL_2013:
                  LOBYTE(v1327.url.m_string.m_impl.m_ptr) = v1008;
                  if (v1368[8])
                  {
                    v1009 = *(WTF::StringImpl **)v1368;
                    *(_QWORD *)v1368 = 0;
                    if (v1009)
                    {
                      if (*(_DWORD *)v1009 == 2)
                        WTF::StringImpl::destroy(v1009, v33);
                      else
                        *(_DWORD *)v1009 -= 2;
                    }
                  }
                  goto LABEL_2374;
                }
LABEL_2687:
                *(_QWORD *)p_includeSnapshot = 0;
                *((_QWORD *)p_includeSnapshot + 1) = 0;
                v1275 = *((_QWORD *)p_includeSnapshot + 3);
                if (v1275 && v30)
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1275 + 16))(v1275, v33);
                goto LABEL_2692;
              }
              v1271 = v30;
              v1272 = 0;
            }
            v30 = 0;
            v33 = 0;
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1274 = *((_QWORD *)p_includeSnapshot + 3);
            if (v1274)
            {
              if (v1271)
              {
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1274 + 16))(v1274, v1272, v1271);
                v33 = *(WTF::StringImpl **)p_includeSnapshot;
                v30 = *((_QWORD *)p_includeSnapshot + 1);
              }
              else
              {
                v30 = 0;
                v33 = 0;
              }
            }
            goto LABEL_2687;
          case 2073:
          case 2074:
          case 2075:
          case 2076:
          case 2077:
          case 2078:
            goto LABEL_2080;
          case 2079:
            v991 = *(_QWORD *)(v13 + 224);
            {
              WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
              WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
            }
            if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v991 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16) & 1) == 0)
            {
              v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
              goto LABEL_2080;
            }
            IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
            if (v1327.canBeValid)
              WebKit::WebPageProxy::takeModelElementFullscreen((WTF::StringImpl *)v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot);
            goto LABEL_1678;
          default:
            if (v17 == 2037)
            {
              *(_BYTE *)(v13 + 1263) = 1;
              goto LABEL_1678;
            }
            if (v17 != 2042)
              goto LABEL_2080;
            IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
            if (LOBYTE(v1327.title.m_impl.m_ptr))
              goto LABEL_1872;
            v1248 = *(_QWORD *)p_includeSnapshot;
            v914 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v915 = *((_QWORD *)p_includeSnapshot + 3);
            if (v915)
            {
              if (v914)
              {
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v915 + 16))(v915, v1248);
                if (LOBYTE(v1327.title.m_impl.m_ptr))
                {
LABEL_1872:
                  v1368[0] = v1327.request.point.m_x;
                  v1368[8] = 0;
                  v1368[48] = 0;
                  if (LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
                  {
                    *(_WORD *)&v1368[8] = *(_WORD *)&v1327.request.includeSnapshot;
                    v926 = *(_OWORD *)&v1327.canBeValid;
                    v927 = *(_OWORD *)&v1327.isContentEditable;
                    memset(&v1327.canBeValid, 0, 32);
                    *(_OWORD *)&v1368[16] = v926;
                    *(_OWORD *)&v1368[32] = v927;
                    v1368[48] = 1;
                  }
                  v1368[56] = 0;
                  v1369[24] = 0;
                  if (LOBYTE(v1327.url.m_userEnd))
                  {
                    *(_QWORD *)&v1368[56] = *(_QWORD *)&v1327.isDataDetectorLink;
                    v928 = v1327.adjustedPointForNodeRespondingToClickEvents;
                    *(_QWORD *)&v1327.isDataDetectorLink = 0;
                    v1327.adjustedPointForNodeRespondingToClickEvents = 0;
                    *(FloatPoint *)v1369 = v928;
                    *(_QWORD *)&v1369[8] = v1327.url.m_string.m_impl.m_ptr;
                    *(_DWORD *)&v1369[15] = *(_DWORD *)((char *)&v1327.url.m_string.m_impl.m_ptr + 7);
                    v1369[24] = 1;
                  }
                  v1369[32] = 0;
                  v1370 = 0;
                  m_userEnd_low = LOBYTE(v1327.imageURL.m_userEnd);
                  if (LOBYTE(v1327.imageURL.m_userEnd))
                  {
                    v1369[32] = v1327.url.m_hostEnd;
                    v930 = *(_QWORD *)&v1327.url.m_pathEnd;
                    *(_QWORD *)&v1327.url.m_pathEnd = 0;
                    *(_QWORD *)&v1369[40] = v930;
                    v931 = v1327.imageURL.m_string.m_impl.m_ptr;
                    v1327.imageURL.m_string.m_impl.m_ptr = 0;
                    *(_QWORD *)&v1369[48] = v931;
                    *(_WORD *)&v1369[56] = *((_WORD *)&v1327.imageURL + 4);
                    v1370 = 1;
                  }
                  LOBYTE(v1371[0]) = 0;
                  v1372 = 0;
                  if (LOBYTE(v1327.imageMIMEType.m_impl.m_ptr))
                  {
                    v932 = *(_QWORD *)&v1327.imageURL.m_hostEnd;
                    *(_QWORD *)&v1327.imageURL.m_hostEnd = 0;
                    v1371[0] = v932;
                    v933 = *(_QWORD *)&v1327.imageURL.m_pathEnd;
                    *(_QWORD *)&v1327.imageURL.m_pathEnd = 0;
                    v1371[1] = v933;
                    v1372 = 1;
                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.imageURL.m_hostEnd, v925);
                    m_userEnd_low = LOBYTE(v1327.imageURL.m_userEnd);
                  }
                  v1373 = 1;
                  if (m_userEnd_low)
                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.url.m_pathEnd, v925);
                  if (LOBYTE(v1327.url.m_userEnd))
                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327.isDataDetectorLink, v925);
                  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327.request.includeSnapshot, (WTF::StringImpl *)v925);
                  WebKit::WebPageProxy::setMockWebAuthenticationConfiguration(v13, (uint64_t)v1368);
                  if (v1373)
                  {
                    if (v1372)
                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1371, v934);
                    if (v1370)
                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1369[40], v934);
                    if (v1369[24])
                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1368[56], v934);
                    std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1368[8], (WTF::StringImpl *)v934);
                  }
                  goto LABEL_1678;
                }
                v913 = *(_QWORD *)p_includeSnapshot;
                v914 = *((_QWORD *)p_includeSnapshot + 1);
                v915 = *((_QWORD *)p_includeSnapshot + 3);
LABEL_2588:
                *(_QWORD *)p_includeSnapshot = 0;
                *((_QWORD *)p_includeSnapshot + 1) = 0;
                if (!v915)
                  goto LABEL_1678;
LABEL_1838:
                if (!v914)
                  goto LABEL_1678;
                goto LABEL_1978;
              }
            }
            else
            {
              v914 = 0;
            }
            v913 = 0;
            goto LABEL_2588;
        }
      }
      if (v17 > 1873)
      {
        switch(v17)
        {
          case 1874:
            v942 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)p_includeSnapshot);
            if ((v942 & 0xFF00000000) != 0)
              WebKit::WebPageProxy::didCreateContextInWebProcessForVisibilityPropagation((WebKit::WebPageProxy *)v13, v942);
            goto LABEL_1678;
          case 1885:
            IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)p_includeSnapshot, v15, (uint64_t)&v1327);
            if (v1327.canBeValid)
            {
              v944 = *(_QWORD *)(v13 + 1144);
              if (!v944
                || ((*(void (**)(uint64_t, InteractionInformationAtPosition *))(*(_QWORD *)v944 + 16))(v944, &v1327), v1327.canBeValid))
              {
                WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327, v943);
              }
            }
            goto LABEL_1678;
          case 2006:
            IPC::Decoder::decode<std::tuple<WTF::UUID>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
            if (v1327.canBeValid)
              WebKit::WebPageProxy::removeTextAnimationForAnimationID((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, (const WTF::UUID *)&v1327);
            goto LABEL_1678;
        }
        goto LABEL_2080;
      }
      if (v17 == 1834)
      {
        IPC::Decoder::decode<WTF::UUID>((uint64_t *)p_includeSnapshot, (uint64_t)v1312);
        if ((_BYTE)v1313)
        {
          IPC::ArgumentCoder<WebKit::TextAnimationData,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
          if (v1321[32])
          {
            IPC::Decoder::decode<WebCore::TextIndicatorData>((unint64_t *)p_includeSnapshot, v1368);
            v938 = v1369[48];
            if (v1369[48])
            {
              if (!(_BYTE)v1313)
                goto LABEL_2630;
              v1327.request = *(InteractionInformationRequest *)v1312;
              *(_OWORD *)&v1327.canBeValid = *(_OWORD *)v1321;
              *(_OWORD *)&v1327.isContentEditable = *(_OWORD *)&v1321[16];
              *(_OWORD *)&v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = *(_OWORD *)v1368;
              *(_OWORD *)&v1327.adjustedPointForNodeRespondingToClickEvents.m_x = *(_OWORD *)&v1368[16];
              *(_OWORD *)((char *)&v1327.url + 8) = *(_OWORD *)&v1368[32];
              v939 = *(_QWORD *)&v1368[48];
              *(_QWORD *)&v1368[48] = 0;
              *(_QWORD *)&v1327.url.m_hostEnd = v939;
              v940 = *(_QWORD *)&v1368[56];
              *(_QWORD *)&v1368[56] = 0;
              *(_QWORD *)&v1327.url.m_pathEnd = v940;
              LODWORD(v1327.imageURL.m_string.m_impl.m_ptr) = *(_DWORD *)v1369;
              v941 = *(_OWORD *)&v1369[8];
              memset(&v1369[8], 0, 24);
              *(_OWORD *)((char *)&v1327.imageURL + 8) = v941;
              *(_QWORD *)&v1327.imageURL.m_hostEnd = *(_QWORD *)&v1369[24];
              WebCore::Color::Color();
              LODWORD(v1327.imageMIMEType.m_impl.m_ptr) = *(_DWORD *)&v1369[40];
              v938 = 1;
            }
            else
            {
              LOBYTE(v1327.request.point.m_x) = 0;
            }
            LOBYTE(v1327.title.m_impl.m_ptr) = v938;
            std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1368, v33);
            if (LOBYTE(v1327.title.m_impl.m_ptr))
            {
LABEL_2102:
              v1068 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
              if ((_BYTE)v86)
              {
                *(_QWORD *)v1368 = v1068;
                p_includeSnapshot = &v1368[8];
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
                v1069 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v1069 = off_1E34FC100;
                v1069[1] = *(_QWORD *)v1368;
                v1070 = *(_QWORD *)&v1368[8];
                *(_QWORD *)&v1368[8] = 0;
                v1069[2] = v1070;
                *(_QWORD *)v1321 = v1069;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
                if (!LOBYTE(v1327.title.m_impl.m_ptr))
                  goto LABEL_2630;
                WebKit::WebPageProxy::addTextAnimationForAnimationID(v13, v12, &v1327, (uint64_t)&v1327.canBeValid, (__int128 *)&v1327.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t *)v1321);
                v1071 = *(_QWORD *)v1321;
                *(_QWORD *)v1321 = 0;
                if (v1071)
                  (*(void (**)(uint64_t))(*(_QWORD *)v1071 + 8))(v1071);
              }
              if (LOBYTE(v1327.title.m_impl.m_ptr))
              {
                if ((*(_QWORD *)&v1327.imageURL.m_pathEnd & 0x8000000000000) != 0)
                {
                  v1234 = (unsigned int *)(*(_QWORD *)&v1327.imageURL.m_pathEnd & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v1235 = __ldaxr(v1234);
                    v1236 = v1235 - 1;
                  }
                  while (__stlxr(v1236, v1234));
                  if (!v1236)
                  {
                    atomic_store(1u, v1234);
                    WTF::fastFree((WTF *)v1234, v86);
                  }
                }
                v1072 = *(_DWORD **)&v1327.imageURL.m_hostEnd;
                *(_QWORD *)&v1327.imageURL.m_hostEnd = 0;
                if (v1072)
                {
                  if (v1072[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v1072 + 8))(v1072);
                  else
                    --v1072[2];
                }
                v1090 = *(_DWORD **)&v1327.imageURL.m_userEnd;
                *(_QWORD *)&v1327.imageURL.m_userEnd = 0;
                if (v1090)
                {
                  if (v1090[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v1090 + 8))(v1090);
                  else
                    --v1090[2];
                }
                v1091 = (_DWORD *)*((_QWORD *)&v1327.imageURL + 1);
                *((_QWORD *)&v1327.imageURL + 1) = 0;
                if (v1091)
                {
                  if (v1091[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v1091 + 8))(v1091);
                  else
                    --v1091[2];
                }
                v398 = *(unsigned int **)&v1327.url.m_hostEnd;
                if (*(_QWORD *)&v1327.url.m_hostEnd)
                {
                  *(_QWORD *)&v1327.url.m_hostEnd = 0;
                  v1327.url.m_pathEnd = 0;
LABEL_1539:
                  WTF::fastFree((WTF *)v398, v86);
                }
              }
              goto LABEL_1678;
            }
LABEL_2567:
            v1240 = *(_QWORD *)p_includeSnapshot;
            v1241 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1242 = *((_QWORD *)p_includeSnapshot + 3);
            if (!v1242)
              goto LABEL_1678;
            if (!v1241)
              goto LABEL_1678;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1242 + 16))(v1242, v1240);
            if (!LOBYTE(v1327.title.m_impl.m_ptr))
              goto LABEL_1678;
            goto LABEL_2102;
          }
          v1237 = *(_QWORD *)p_includeSnapshot;
          v1238 = *((_QWORD *)p_includeSnapshot + 1);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v1239 = *((_QWORD *)p_includeSnapshot + 3);
          if (v1239 && v1238)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1239 + 16))(v1239, v1237);
        }
        LOBYTE(v1327.request.point.m_x) = 0;
        LOBYTE(v1327.title.m_impl.m_ptr) = 0;
        goto LABEL_2567;
      }
      if (v17 == 1849)
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>>((uint64_t *)p_includeSnapshot, &v1327);
        if (!v1327.canBeValid)
          goto LABEL_1678;
        includeSnapshot = v1327.request.includeSnapshot;
        includeLinkIndicator = v1327.request.includeLinkIndicator;
        LogChannel = (BOOL *)WebKit::getLogChannel((WebKit *)&v1327, v916);
        if (LogChannel)
        {
          *LogChannel = includeSnapshot;
          LogChannel[16] = includeLinkIndicator;
        }
        if (!v1327.canBeValid)
          goto LABEL_1678;
        goto LABEL_1150;
      }
LABEL_2080:
      if (v17 == 1981)
      {
        v1055 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1055 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier,BOOL>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (v1327.isLink)
          {
            v1056 = *(_QWORD *)(v13 + 416);
            if (v1056)
            {
              canBeValid = v1327.canBeValid;
              v1058 = (void *)WebKit::ModelElementController::modelViewForModelIdentifier(v1056, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot);
              if (v1058)
                objc_msgSend(v1058, "setUserInteractionEnabled:", canBeValid);
            }
          }
          goto LABEL_1678;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1973)
      {
        v1059 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1059 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16) & 1) != 0)
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (!v1327.canBeValid)
            goto LABEL_1678;
          v1060 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1061)
            goto LABEL_1678;
          *(_QWORD *)v1368 = v1060;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1062 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1062 = off_1E34FC1C8;
          v1062[1] = *(_QWORD *)v1368;
          v1063 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1062[2] = v1063;
          *(_QWORD *)v1321 = v1062;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          WebKit::WebPageProxy::modelElementGetCamera(v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot, (uint64_t *)v1321);
LABEL_2349:
          v317 = *(_QWORD *)v1321;
          *(_QWORD *)v1321 = 0;
          if (!v317)
            goto LABEL_1678;
          goto LABEL_521;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1980)
      {
        v1073 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1073 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<WebKit::ModelIdentifier>(v1368, (uint64_t *)p_includeSnapshot);
          if (v1368[16])
          {
            IPC::Decoder::decode<WebCore::HTMLModelElementCamera>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
            if (v1327.isLink)
            {
              v1074 = *(_QWORD *)v1368;
              v1075 = *(const WTF::StringImpl **)&v1368[8];
              v1076 = v1327.request.point;
              v1077 = *(double *)&v1327.request.includeSnapshot;
              v1078 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
              if (!v1079)
                goto LABEL_1678;
              v1327.request.point = (IntPoint)v1078;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1327.request.includeSnapshot, (unsigned __int8 **)v12);
              v1080 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v1080 = off_1E34FC1F0;
              *(IntPoint *)(v1080 + 8) = v1327.request.point;
              v1081 = *(_QWORD *)&v1327.request.includeSnapshot;
              *(_QWORD *)&v1327.request.includeSnapshot = 0;
              *(_QWORD *)(v1080 + 16) = v1081;
              *(_QWORD *)v1368 = v1080;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1327.request.includeSnapshot);
              WebKit::WebPageProxy::modelElementSetCamera(v13, v1074, v1075, (uint64_t *)v1368, *(float64_t *)&v1076, v1077);
LABEL_520:
              v317 = *(_QWORD *)v1368;
              *(_QWORD *)v1368 = 0;
              if (!v317)
                goto LABEL_1678;
LABEL_521:
              (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
              goto LABEL_1678;
            }
          }
          goto LABEL_1556;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1977)
      {
        v1085 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1085 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16) & 1) != 0)
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (!v1327.canBeValid)
            goto LABEL_1678;
          v1086 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1087)
            goto LABEL_1678;
          *(_QWORD *)v1368 = v1086;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1088 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1088 = off_1E34FC218;
          v1088[1] = *(_QWORD *)v1368;
          v1089 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1088[2] = v1089;
          *(_QWORD *)v1321 = v1088;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          WebKit::WebPageProxy::modelElementIsPlayingAnimation(v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot, (uint64_t *)v1321);
          goto LABEL_2349;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1979)
      {
        v1092 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1092 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier,BOOL>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (!v1327.isLink)
            goto LABEL_1678;
          v1093 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1094)
            goto LABEL_1678;
          *(_QWORD *)v1368 = v1093;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1095 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1095 = off_1E34FC240;
          v1095[1] = *(_QWORD *)v1368;
          v1096 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1095[2] = v1096;
          *(_QWORD *)v1321 = v1095;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          WebKit::WebPageProxy::modelElementSetAnimationIsPlaying(v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot, v1327.canBeValid, (uint64_t *)v1321);
          goto LABEL_2349;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1975)
      {
        v1097 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1097 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16) & 1) != 0)
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (!v1327.canBeValid)
            goto LABEL_1678;
          v1098 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1099)
            goto LABEL_1678;
          *(_QWORD *)v1368 = v1098;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1100 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1100 = off_1E34FC268;
          v1100[1] = *(_QWORD *)v1368;
          v1101 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1100[2] = v1101;
          *(_QWORD *)v1321 = v1100;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          WebKit::WebPageProxy::modelElementIsLoopingAnimation(v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot, (uint64_t *)v1321);
          goto LABEL_2349;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1982)
      {
        v1105 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1105 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier,BOOL>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (!v1327.isLink)
            goto LABEL_1678;
          v1106 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1107)
            goto LABEL_1678;
          *(_QWORD *)v1368 = v1106;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1108 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1108 = off_1E34FC290;
          v1108[1] = *(_QWORD *)v1368;
          v1109 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1108[2] = v1109;
          *(_QWORD *)v1321 = v1108;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          WebKit::WebPageProxy::modelElementSetIsLoopingAnimation(v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot, v1327.canBeValid, (uint64_t *)v1321);
          goto LABEL_2349;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1972)
      {
        v1110 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1110 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16) & 1) != 0)
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (!v1327.canBeValid)
            goto LABEL_1678;
          v1111 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1112)
            goto LABEL_1678;
          *(_QWORD *)v1368 = v1111;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1113 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1113 = off_1E34FC2B8;
          v1113[1] = *(_QWORD *)v1368;
          v1114 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1113[2] = v1114;
          *(_QWORD *)v1321 = v1113;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          WebKit::WebPageProxy::modelElementAnimationDuration(v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot, (uint64_t *)v1321);
          goto LABEL_2349;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1971)
      {
        v1115 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1115 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (!v1327.canBeValid)
            goto LABEL_1678;
          v1116 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1117)
            goto LABEL_1678;
          *(_QWORD *)v1368 = v1116;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1118 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1118 = off_1E34FC2E0;
          v1118[1] = *(_QWORD *)v1368;
          v1119 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1118[2] = v1119;
          *(_QWORD *)v1321 = v1118;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          WebKit::WebPageProxy::modelElementAnimationCurrentTime(v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot, (uint64_t *)v1321);
          goto LABEL_2349;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1978)
      {
        v1126 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1126 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16) & 1) != 0)
        {
          IPC::Decoder::decode<WebKit::ModelIdentifier>(&v1327, (uint64_t *)p_includeSnapshot);
          if (v1327.canBeValid)
          {
            v1127 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)p_includeSnapshot);
            if (v1128)
            {
              v1129 = *(double *)&v1127;
              v1130 = (uint64_t)v1327.request.point;
              v1131 = *(const WTF::StringImpl **)&v1327.request.includeSnapshot;
              v1132 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
              if (!v1133)
                goto LABEL_1678;
              v1327.request.point = (IntPoint)v1132;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1327.request.includeSnapshot, (unsigned __int8 **)v12);
              v1134 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v1134 = off_1E34FC308;
              *(IntPoint *)(v1134 + 8) = v1327.request.point;
              v1135 = *(_QWORD *)&v1327.request.includeSnapshot;
              *(_QWORD *)&v1327.request.includeSnapshot = 0;
              *(_QWORD *)(v1134 + 16) = v1135;
              *(_QWORD *)v1368 = v1134;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1327.request.includeSnapshot);
              WebKit::WebPageProxy::modelElementSetAnimationCurrentTime(v13, v1130, v1131, (uint64_t *)v1368, v1129);
              goto LABEL_520;
            }
          }
LABEL_1556:
          v670 = *(_QWORD *)p_includeSnapshot;
          v675 = *((_QWORD *)p_includeSnapshot + 1);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v672 = *((_QWORD *)p_includeSnapshot + 3);
          if (!v672)
            goto LABEL_1678;
          goto LABEL_1557;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1974)
      {
        v1150 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1150 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (!v1327.canBeValid)
            goto LABEL_1678;
          v1151 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1152)
            goto LABEL_1678;
          *(_QWORD *)v1368 = v1151;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1153 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1153 = off_1E34FC330;
          v1153[1] = *(_QWORD *)v1368;
          v1154 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1153[2] = v1154;
          *(_QWORD *)v1321 = v1153;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          WebKit::WebPageProxy::modelElementHasAudio(v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot, (uint64_t *)v1321);
          goto LABEL_2349;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1976)
      {
        v1155 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1155 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16) & 1) != 0)
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (!v1327.canBeValid)
            goto LABEL_1678;
          v1156 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1157)
            goto LABEL_1678;
          *(_QWORD *)v1368 = v1156;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1158 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1158 = off_1E34FC358;
          v1158[1] = *(_QWORD *)v1368;
          v1159 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1158[2] = v1159;
          *(_QWORD *)v1321 = v1158;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          WebKit::WebPageProxy::modelElementIsMuted(v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot, (uint64_t *)v1321);
          goto LABEL_2349;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 == 1983)
      {
        v1160 = *(_QWORD *)(v13 + 224);
        {
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v1160 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v16))
        {
          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier,BOOL>>((uint64_t)&v1327, (uint64_t *)p_includeSnapshot);
          if (!v1327.isLink)
            goto LABEL_1678;
          v1161 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1162)
            goto LABEL_1678;
          *(_QWORD *)v1368 = v1161;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1163 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1163 = off_1E34FC380;
          v1163[1] = *(_QWORD *)v1368;
          v1164 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1163[2] = v1164;
          *(_QWORD *)v1321 = v1163;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          WebKit::WebPageProxy::modelElementSetIsMuted(v13, *(_QWORD *)&v1327.request.point, *(const WTF::StringImpl **)&v1327.request.includeSnapshot, v1327.canBeValid, (uint64_t *)v1321);
          goto LABEL_2349;
        }
        v17 = *((unsigned __int16 *)p_includeSnapshot + 25);
      }
      if (v17 > 1937)
      {
        if (v17 > 1992)
        {
          if (v17 <= 2028)
          {
            if (v17 == 1993)
            {
              IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>>((uint64_t *)p_includeSnapshot, &v1327);
              if (LOBYTE(v1327.url.m_pathEnd))
              {
                v1218 = (uint64_t)v1327.request.point;
                v1219 = *(_QWORD *)&v1327.request.includeSnapshot;
                v1220 = *(_QWORD *)&v1327.isLink;
                v1221 = *(_QWORD *)&v1327.isContentEditable;
                v1368[0] = 0;
                v1368[32] = 0;
                if (LOBYTE(v1327.url.m_string.m_impl.m_ptr))
                {
                  *(_DWORD *)&v1368[24] = -1;
                  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v1368, (uint64_t)&v1327.containerScrollingNodeID);
                  v1368[32] = 1;
                }
                WebKit::WebPageProxy::postMessageToRemote(v13, v1218, v1219, (uint64_t)&v1327.canBeValid, v1220, v1221, (uint64_t)v1368, (uint64_t)&v1327.url + 8);
                if (v1368[32] && *(_DWORD *)&v1368[24] != -1)
                  ((void (*)(_BYTE *, _BYTE *))off_1E34FBEB0[*(unsigned int *)&v1368[24]])(v1321, v1368);
              }
              std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v1217);
              goto LABEL_1678;
            }
            if (v17 == 2009)
            {
              v1194 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
              if (v1195)
              {
                v1327.request.point = (IntPoint)v1194;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1327.request.includeSnapshot, (unsigned __int8 **)v12);
                v1196 = WTF::fastMalloc((WTF *)0x18);
                *(_QWORD *)v1196 = off_1E34FC3F8;
                *(IntPoint *)(v1196 + 8) = v1327.request.point;
                v1197 = *(_QWORD *)&v1327.request.includeSnapshot;
                *(_QWORD *)&v1327.request.includeSnapshot = 0;
                *(_QWORD *)(v1196 + 16) = v1197;
                *(_QWORD *)v1368 = v1196;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1327.request.includeSnapshot);
                WebKit::WebPageProxy::requestCookieConsent(v13);
                goto LABEL_520;
              }
            }
          }
          else
          {
            switch(v17)
            {
              case 2029:
                v1213 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
                if (v1213 >= 0x100u)
                {
                  v1214 = v1213 != 0;
                  v1215 = *(_QWORD *)(v13 + 32);
                  if (*(unsigned __int8 *)(v1215 + 2592) != v1214)
                  {
                    *(_BYTE *)(v1215 + 2592) = v1214;
                    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 40) + 8) + 1872))(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 8));
                  }
                }
                goto LABEL_1678;
              case 2083:
                IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntPoint>>((uint64_t *)p_includeSnapshot, &v1327);
                if (v1327.isLink)
                {
                  *(InteractionInformationRequest *)v1312 = v1327.request;
                  v1310 = *(WTF::StringImpl **)&v1327.canBeValid;
                  *(InteractionInformationRequest *)v1368 = v1327.request;
                  v1300[0] = (WTF::StringImpl *)v1312;
                  v1300[1] = (WTF::StringImpl *)&v1310;
                  v1368[16] = 1;
                  *(_QWORD *)v1321 = v1300;
                  v1321[8] = 0;
                  WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::UpdateRemotePageAccessibilityOffset>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::UpdateRemotePageAccessibilityOffset &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::UpdateRemotePageAccessibilityOffset&)#1}>(v13, (uint64_t)v1368, (uint64_t)v1321);
                }
                goto LABEL_1678;
              case 2073:
                IPC::Decoder::decode<WTF::URL>((uint64_t *)p_includeSnapshot, v1368);
                if (v1368[40])
                {
                  IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
                  if (v1321[8])
                  {
                    if (v1368[40])
                    {
                      *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)&v1368[8];
                      *(_OWORD *)&v1327.isLink = *(_OWORD *)&v1368[24];
                      v1327.request.point = *(IntPoint *)v1368;
                      v1327.containerScrollingNodeID.m_value.m_object.m_identifier = *(_QWORD *)v1321;
                      LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 1;
                      v1179 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
                      if ((_BYTE)v54)
                      {
                        *(_QWORD *)v1368 = v1179;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
                        v1180 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                        *v1180 = off_1E34FC3A8;
                        v1180[1] = *(_QWORD *)v1368;
                        v1181 = *(_QWORD *)&v1368[8];
                        *(_QWORD *)&v1368[8] = 0;
                        v1180[2] = v1181;
                        *(_QWORD *)v1321 = v1180;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
                        WebKit::WebPageProxy::startApplePayAMSUISession(v13, (uint64_t)&v1327, &v1327.containerScrollingNodeID.m_value.m_object.m_identifier, (uint64_t *)v1321);
                        v1182 = *(_QWORD *)v1321;
                        *(_QWORD *)v1321 = 0;
                        if (v1182)
                          (*(void (**)(uint64_t))(*(_QWORD *)v1182 + 8))(v1182);
                        if (!LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
                          goto LABEL_1678;
                      }
                      v796 = (WTF::StringImpl *)v1327.containerScrollingNodeID.m_value.m_object.m_identifier;
                      v1327.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
                      if (!v796)
                        goto LABEL_1150;
                      goto LABEL_2476;
                    }
                    goto LABEL_2630;
                  }
                  v1283 = *(WTF::StringImpl **)p_includeSnapshot;
                  v1284 = *((_QWORD *)p_includeSnapshot + 1);
                  *(_QWORD *)p_includeSnapshot = 0;
                  *((_QWORD *)p_includeSnapshot + 1) = 0;
                  v1285 = *((_QWORD *)p_includeSnapshot + 3);
                  if (v1285 && v1284)
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1285 + 16))(v1285, v1283);
                  LOBYTE(v1327.request.point.m_x) = 0;
                  LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
                  if (v1368[40])
                  {
                    v1286 = *(WTF::StringImpl **)v1368;
                    *(_QWORD *)v1368 = 0;
                    if (v1286)
                    {
                      if (*(_DWORD *)v1286 == 2)
                        WTF::StringImpl::destroy(v1286, v1283);
                      else
                        *(_DWORD *)v1286 -= 2;
                    }
                  }
                }
                goto LABEL_1837;
            }
          }
          goto LABEL_1678;
        }
        if (v17 <= 1941)
        {
          if (v17 == 1938)
          {
            IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
            if (v1327.canBeValid)
              WebKit::WebPageProxy::focusRemoteFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot);
            goto LABEL_1678;
          }
          if (v17 == 1941)
          {
            IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>((uint64_t *)p_includeSnapshot, &v1327);
            if (v1327.isLink)
            {
              WebKit::WebPageProxy::frameNameChanged((_QWORD *)v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (uint64_t)&v1327.canBeValid);
              if (v1327.isLink)
              {
                v1185 = *(WTF::StringImpl **)&v1327.canBeValid;
                *(_QWORD *)&v1327.canBeValid = 0;
                if (v1185)
                  goto LABEL_2617;
              }
            }
          }
          goto LABEL_1678;
        }
        if (v17 == 1942)
        {
          PAL::HysteresisActivity::impulse((_BYTE *)(v13 + 1392));
          goto LABEL_1678;
        }
        if (v17 == 1952)
        {
          v1209 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)p_includeSnapshot);
          if (v1209 >= 0x100u)
          {
            v1210 = *(_QWORD *)(v13 + 40);
            if (v1210)
              v60 = *(_QWORD *)(v1210 + 8);
            else
              v60 = 0;
            v1233 = v1209 != 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1584))(v60);
            (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v60 + 1864))(v60, v1233);
            goto LABEL_618;
          }
          goto LABEL_1678;
        }
        if (v17 != 1986)
          goto LABEL_1678;
        IPC::Decoder::decode<WebCore::NowPlayingMetadata>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
        if (LOBYTE(v1327.adjustedPointForNodeRespondingToClickEvents.m_x))
        {
          v1167 = v1327.request;
          v1168 = *(_OWORD *)&v1327.canBeValid;
          memset(&v1327, 0, 32);
          *(InteractionInformationRequest *)v1368 = v1167;
          *(_OWORD *)&v1368[16] = v1168;
          v1368[32] = 0;
          v1368[56] = 0;
          if (v1327.isDataDetectorLink)
          {
            v1169 = *(_OWORD *)&v1327.isContentEditable;
            memset(&v1327.isContentEditable, 0, 24);
            *(_OWORD *)&v1368[32] = v1169;
            *(_QWORD *)&v1368[48] = v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
            v1368[56] = 1;
          }
          v1369[0] = 1;
          std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v1166);
          WebKit::WebPageProxy::nowPlayingMetadataChanged(v13, (uint64_t)v1368);
          if (!v1369[0])
            goto LABEL_1678;
          std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1368[32], v1170);
          v1172 = *(WTF::StringImpl **)&v1368[24];
          *(_QWORD *)&v1368[24] = 0;
          if (v1172)
          {
            if (*(_DWORD *)v1172 == 2)
              WTF::StringImpl::destroy(v1172, v1171);
            else
              *(_DWORD *)v1172 -= 2;
          }
          v1253 = *(WTF::StringImpl **)&v1368[16];
          *(_QWORD *)&v1368[16] = 0;
          if (v1253)
          {
            if (*(_DWORD *)v1253 == 2)
              WTF::StringImpl::destroy(v1253, v1171);
            else
              *(_DWORD *)v1253 -= 2;
          }
          v1254 = *(WTF::StringImpl **)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          if (v1254)
          {
            if (*(_DWORD *)v1254 == 2)
              WTF::StringImpl::destroy(v1254, v1171);
            else
              *(_DWORD *)v1254 -= 2;
          }
          v1185 = *(WTF::StringImpl **)v1368;
          *(_QWORD *)v1368 = 0;
          if (!v1185)
            goto LABEL_1678;
          goto LABEL_2617;
        }
        std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v1166);
LABEL_2577:
        v723 = *(_QWORD *)p_includeSnapshot;
        v1244 = *((_QWORD *)p_includeSnapshot + 1);
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v725 = *((_QWORD *)p_includeSnapshot + 3);
        if (!v725 || !v1244)
          goto LABEL_1678;
        goto LABEL_1548;
      }
      if (v17 > 1859)
      {
        if (v17 > 1878)
        {
          switch(v17)
          {
            case 1879:
              v1211 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
              if (v1212)
              {
                WebKit::WebPageProxy::didDestroySleepDisabler(v13, v1211);
                goto LABEL_1678;
              }
              goto LABEL_1556;
            case 1926:
              IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
              if (v1327.canBeValid)
                WebKit::WebPageProxy::dispatchLoadEventToFrameOwnerElement(v13, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot);
              goto LABEL_1678;
            case 1927:
              IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)p_includeSnapshot, (uint64_t)&v1327);
              if (v1327.canBeValid)
              {
                v1175 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
                if (v1176)
                {
                  *(_QWORD *)v1368 = v1175;
                  p_includeSnapshot = &v1368[8];
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
                  v1177 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v1177 = off_1E34FC420;
                  v1177[1] = *(_QWORD *)v1368;
                  v1178 = *(_QWORD *)&v1368[8];
                  *(_QWORD *)&v1368[8] = 0;
                  v1177[2] = v1178;
                  *(_QWORD *)v1321 = v1177;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
                  if (!v1327.canBeValid)
                    goto LABEL_2630;
                  WebKit::WebPageProxy::documentURLForConsoleLog(v13, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (uint64_t *)v1321);
                  goto LABEL_2349;
                }
              }
              break;
          }
          goto LABEL_1678;
        }
        if (v17 != 1860)
        {
          if (v17 != 1876)
            goto LABEL_1678;
          v1186 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
          if (!v1187)
            goto LABEL_2577;
          v1188 = v1186;
          IPC::Decoder::decode<WTF::String>((uint64_t *)p_includeSnapshot, v1368);
          if (!v1368[8])
          {
            LOBYTE(v1327.request.point.m_x) = 0;
            goto LABEL_2577;
          }
          v1189 = *((_QWORD *)p_includeSnapshot + 1);
          v1190 = *(WTF::StringImpl **)p_includeSnapshot;
          v1191 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
          if (v1189 <= v1191)
          {
            v1287 = 0;
            v1288 = 0;
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1289 = *((_QWORD *)p_includeSnapshot + 3);
            if (v1289)
            {
              if (v1189)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v1289 + 16))(v1289);
                v1288 = *(_QWORD *)p_includeSnapshot;
                v1287 = *((_QWORD *)p_includeSnapshot + 1);
              }
              else
              {
                v1287 = 0;
                v1288 = 0;
              }
            }
          }
          else
          {
            v1192 = (unsigned __int8 *)v1190 + v1191;
            *((_QWORD *)p_includeSnapshot + 2) = v1192 + 1;
            if (v1190)
            {
              v1193 = *v1192;
              if (v1193 < 2)
              {
                v1327.request.point = (IntPoint)v1188;
                *(_QWORD *)&v1327.request.includeSnapshot = *(_QWORD *)v1368;
                v1327.canBeValid = v1193 != 0;
                v1327.isLink = 1;
                WebKit::WebPageProxy::didCreateSleepDisabler(v13, v12, v1188, &v1327.request.includeSnapshot);
                if (!v1327.isLink)
                  goto LABEL_1678;
                v1185 = *(WTF::StringImpl **)&v1327.request.includeSnapshot;
                *(_QWORD *)&v1327.request.includeSnapshot = 0;
                if (!v1185)
                  goto LABEL_1678;
                goto LABEL_2617;
              }
              goto LABEL_2757;
            }
            v1287 = v1189;
            v1288 = 0;
          }
          v1189 = 0;
          v1190 = 0;
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v1290 = *((_QWORD *)p_includeSnapshot + 3);
          if (v1290)
          {
            if (v1287)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1290 + 16))(v1290, v1288, v1287);
              v1190 = *(WTF::StringImpl **)p_includeSnapshot;
              v1189 = *((_QWORD *)p_includeSnapshot + 1);
            }
            else
            {
              v1189 = 0;
              v1190 = 0;
            }
          }
LABEL_2757:
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v1291 = *((_QWORD *)p_includeSnapshot + 3);
          if (v1291 && v1189)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1291 + 16))(v1291, v1190);
          LOBYTE(v1327.request.point.m_x) = 0;
          if (v1368[8])
          {
            v1292 = *(WTF::StringImpl **)v1368;
            *(_QWORD *)v1368 = 0;
            if (v1292)
            {
              if (*(_DWORD *)v1292 == 2)
                WTF::StringImpl::destroy(v1292, v1190);
              else
                *(_DWORD *)v1292 -= 2;
            }
          }
          goto LABEL_2577;
        }
        IPC::Decoder::decode<WTF::URL>((uint64_t *)p_includeSnapshot, v1321);
        if ((_BYTE)v1322)
        {
          IPC::Decoder::decode<WTF::URL>((uint64_t *)p_includeSnapshot, v1368);
          v12 = v1368[40];
          if (v1368[40])
          {
            if (!(_BYTE)v1322)
              goto LABEL_2630;
            v1216 = *(IntPoint *)v1321;
            *(_QWORD *)v1321 = 0;
            *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)&v1321[8];
            *(_OWORD *)&v1327.isLink = *(_OWORD *)&v1321[24];
            *(_DWORD *)&v1321[8] &= ~1u;
            v1327.request.point = v1216;
            v1327.containerScrollingNodeID.m_value.m_object.m_identifier = *(_QWORD *)v1368;
            *(_OWORD *)&v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = *(_OWORD *)&v1368[8];
            *(_OWORD *)&v1327.adjustedPointForNodeRespondingToClickEvents.m_x = *(_OWORD *)&v1368[24];
            *((_BYTE *)&v1327.url + 8) = 1;
          }
          else
          {
            LOBYTE(v1327.request.point.m_x) = 0;
            *((_BYTE *)&v1327.url + 8) = 0;
            if (!(_BYTE)v1322)
              goto LABEL_2553;
          }
          v1243 = *(WTF::StringImpl **)v1321;
          *(_QWORD *)v1321 = 0;
          if (v1243)
          {
            if (*(_DWORD *)v1243 == 2)
              WTF::StringImpl::destroy(v1243, v33);
            else
              *(_DWORD *)v1243 -= 2;
          }
          if ((_DWORD)v12)
          {
LABEL_2592:
            (*(void (**)(_QWORD, unint64_t, InteractionInformationAtPosition *, Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>::MarkableTraits> *))(**(_QWORD **)(v13 + 72) + 152))(*(_QWORD *)(v13 + 72), v13, &v1327, &v1327.containerScrollingNodeID);
LABEL_2593:
            std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1327, v1230);
            goto LABEL_1678;
          }
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
          *((_BYTE *)&v1327.url + 8) = 0;
        }
LABEL_2553:
        v1230 = *(WTF::StringImpl **)p_includeSnapshot;
        v1231 = *((_QWORD *)p_includeSnapshot + 1);
        *(_QWORD *)p_includeSnapshot = 0;
        *((_QWORD *)p_includeSnapshot + 1) = 0;
        v1232 = *((_QWORD *)p_includeSnapshot + 3);
        if (!v1232)
          goto LABEL_2593;
        if (!v1231)
          goto LABEL_2593;
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1232 + 16))(v1232, v1230);
        if (!*((_BYTE *)&v1327.url + 8))
          goto LABEL_2593;
        goto LABEL_2592;
      }
      if (v17 > 1840)
      {
        if (v17 != 1841)
        {
          if (v17 != 1858)
          {
            if (v17 == 1859)
            {
              IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)p_includeSnapshot, v15, (uint64_t)&v1327);
              if (v1327.canBeValid)
              {
                (*(void (**)(_QWORD, unint64_t, InteractionInformationAtPosition *))(**(_QWORD **)(v13 + 104) + 640))(*(_QWORD *)(v13 + 104), v13, &v1327);
                if (v1327.canBeValid)
                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1327, v1165);
              }
            }
            goto LABEL_1678;
          }
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)p_includeSnapshot, (uint64_t)v1321);
          if (!v1321[16]
            || (IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)p_includeSnapshot, v1368), !v1368[32]))
          {
            LOBYTE(v1327.request.point.m_x) = 0;
            v1327.isDataDetectorLink = 0;
LABEL_2546:
            v1227 = *(_QWORD *)p_includeSnapshot;
            v1228 = *((_QWORD *)p_includeSnapshot + 1);
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1229 = *((_QWORD *)p_includeSnapshot + 3);
            if (!v1229)
              goto LABEL_1678;
            if (!v1228)
              goto LABEL_1678;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1229 + 16))(v1229, v1227);
            if (!v1327.isDataDetectorLink)
              goto LABEL_1678;
LABEL_2770:
            WebKit::WebPageProxy::didAccessWindowProxyPropertyViaOpenerForFrame(v13, v12, *(_QWORD *)&v1327.request.point, *(uint64_t *)&v1327.request.includeSnapshot, (const WebCore::SecurityOriginData *)&v1327.canBeValid, LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier));
            if (v1327.isDataDetectorLink && LODWORD(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) != -1)
              ((void (*)(_BYTE *, BOOL *))off_1E34FBEB0[LODWORD(v1327.containerScrollingNodeID.m_value.m_object.m_identifier)])(v1368, &v1327.canBeValid);
            goto LABEL_1678;
          }
          v30 = *((_QWORD *)p_includeSnapshot + 1);
          v33 = *(WTF::StringImpl **)p_includeSnapshot;
          v1205 = *((_QWORD *)p_includeSnapshot + 2) - *(_QWORD *)p_includeSnapshot;
          if (v30 <= v1205)
          {
            v1293 = 0;
            v1294 = 0;
            *(_QWORD *)p_includeSnapshot = 0;
            *((_QWORD *)p_includeSnapshot + 1) = 0;
            v1295 = *((_QWORD *)p_includeSnapshot + 3);
            if (v1295)
            {
              if (v30)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v1295 + 16))(v1295);
                v1294 = *(_QWORD *)p_includeSnapshot;
                v1293 = *((_QWORD *)p_includeSnapshot + 1);
              }
              else
              {
                v1293 = 0;
                v1294 = 0;
              }
            }
          }
          else
          {
            v1206 = (unsigned __int8 *)v33 + v1205;
            *((_QWORD *)p_includeSnapshot + 2) = v1206 + 1;
            if (v33)
            {
              v1207 = *v1206;
              if (v1207 <= 4 && ((1 << v1207) & 0x16) != 0)
              {
                if (!v1321[16])
                  goto LABEL_2630;
                v1327.request = *(InteractionInformationRequest *)v1321;
                v1327.canBeValid = 0;
                LODWORD(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1327.canBeValid, (uint64_t)v1368);
                LOBYTE(v1327.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = v1207;
                isDataDetectorLink = 1;
LABEL_2766:
                v1327.isDataDetectorLink = isDataDetectorLink;
                if (v1368[32] && *(_DWORD *)&v1368[24] != -1)
                {
                  ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34FBEB0[*(unsigned int *)&v1368[24]])(v1312, v1368);
                  isDataDetectorLink = v1327.isDataDetectorLink;
                }
                if (isDataDetectorLink)
                  goto LABEL_2770;
                goto LABEL_2546;
              }
LABEL_2764:
              *(_QWORD *)p_includeSnapshot = 0;
              *((_QWORD *)p_includeSnapshot + 1) = 0;
              v1297 = *((_QWORD *)p_includeSnapshot + 3);
              if (v1297 && v30)
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v1297 + 16))(v1297, v33);
              isDataDetectorLink = 0;
              LOBYTE(v1327.request.point.m_x) = 0;
              goto LABEL_2766;
            }
            v1293 = v30;
            v1294 = 0;
          }
          v30 = 0;
          v33 = 0;
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v1296 = *((_QWORD *)p_includeSnapshot + 3);
          if (v1296)
          {
            if (v1293)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1296 + 16))(v1296, v1294, v1293);
              v33 = *(WTF::StringImpl **)p_includeSnapshot;
              v30 = *((_QWORD *)p_includeSnapshot + 1);
            }
            else
            {
              v30 = 0;
              v33 = 0;
            }
          }
          goto LABEL_2764;
        }
        IPC::Decoder::decode<std::tuple<WTF::URL>>((uint64_t *)p_includeSnapshot, &v1327);
        if (!LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier))
          goto LABEL_1678;
        WebKit::WebPageProxy::broadcastMainFrameURLChangeToOtherProcesses((WebKit::WebPageProxy *)v13, (IPC::Connection *)v12, (const WTF::URL *)&v1327);
        if (!LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier))
          goto LABEL_1678;
        v1185 = (WTF::StringImpl *)v1327.request.point;
        v1327.request.point = 0;
        if (!v1185)
          goto LABEL_1678;
LABEL_2617:
        if (*(_DWORD *)v1185 == 2)
          WTF::StringImpl::destroy(v1185, v1171);
        else
          *(_DWORD *)v1185 -= 2;
        goto LABEL_1678;
      }
      if (v17 == 1833)
      {
        WebKit::WebPageProxy::abortApplePayAMSUISession((WebKit::WebPageProxy *)v13);
        goto LABEL_1678;
      }
      if (v17 == 1839)
      {
        IPC::Decoder::decode<WTF::URL>((uint64_t *)p_includeSnapshot, v1321);
        if ((_BYTE)v1322)
        {
          IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)p_includeSnapshot, v1312);
          if ((_BYTE)v1314)
          {
            IPC::Decoder::decode<WebCore::SystemPreviewInfo>((unint64_t *)p_includeSnapshot, (uint64_t)v1368);
            v1183 = v1369[48];
            if (v1369[48])
            {
              if (!(_BYTE)v1322 || !(_BYTE)v1314)
                goto LABEL_2630;
              v1184 = *(IntPoint *)v1321;
              *(_QWORD *)v1321 = 0;
              v1327.request.point = v1184;
              *(_OWORD *)&v1327.request.includeSnapshot = *(_OWORD *)&v1321[8];
              *(_OWORD *)&v1327.isLink = *(_OWORD *)&v1321[24];
              *(_DWORD *)&v1321[8] &= ~1u;
              LOBYTE(v1327.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
              v1327.adjustedPointForNodeRespondingToClickEvents.m_x = NAN;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1327.containerScrollingNodeID, (uint64_t)v1312);
              *(_OWORD *)&v1327.imageURL.m_pathEnd = *(_OWORD *)v1369;
              *(_OWORD *)&v1327.title.m_impl.m_ptr = *(_OWORD *)&v1369[16];
              v1327.bounds = *(IntRect *)&v1369[32];
              *(_OWORD *)((char *)&v1327.url + 8) = *(_OWORD *)v1368;
              *(_OWORD *)&v1327.url.m_hostEnd = *(_OWORD *)&v1368[16];
              v1183 = 1;
              *(_OWORD *)&v1327.imageURL.m_string.m_impl.m_ptr = *(_OWORD *)&v1368[32];
              *(_OWORD *)&v1327.imageURL.m_userEnd = *(_OWORD *)&v1368[48];
            }
            else
            {
              LOBYTE(v1327.request.point.m_x) = 0;
            }
            LOBYTE(v1327.image.m_ptr) = v1183;
            if ((_BYTE)v1314 && DWORD2(v1313) != -1)
              ((void (*)(_BYTE *, WTF::StringImpl **))off_1E34FBEB0[DWORD2(v1313)])(v1368, v1312);
          }
          else
          {
            LOBYTE(v1327.request.point.m_x) = 0;
            LOBYTE(v1327.image.m_ptr) = 0;
          }
          if ((_BYTE)v1322)
          {
            v1252 = *(WTF::StringImpl **)v1321;
            *(_QWORD *)v1321 = 0;
            if (v1252)
            {
              if (*(_DWORD *)v1252 == 2)
                WTF::StringImpl::destroy(v1252, v33);
              else
                *(_DWORD *)v1252 -= 2;
            }
          }
        }
        else
        {
          LOBYTE(v1327.request.point.m_x) = 0;
          LOBYTE(v1327.image.m_ptr) = 0;
        }
        if (!LOBYTE(v1327.image.m_ptr))
        {
          v1280 = *(_QWORD *)p_includeSnapshot;
          v1281 = *((_QWORD *)p_includeSnapshot + 1);
          *(_QWORD *)p_includeSnapshot = 0;
          *((_QWORD *)p_includeSnapshot + 1) = 0;
          v1282 = *((_QWORD *)p_includeSnapshot + 3);
          if (!v1282)
            goto LABEL_1678;
          if (!v1281)
            goto LABEL_1678;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1282 + 16))(v1282, v1280);
          if (!LOBYTE(v1327.image.m_ptr))
            goto LABEL_1678;
        }
        v1255 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)p_includeSnapshot);
        if ((_BYTE)v54)
        {
          *(_QWORD *)v1368 = v1255;
          p_includeSnapshot = &v1368[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v1368[8], (unsigned __int8 **)v12);
          v1256 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v1256 = off_1E34FC3D0;
          v1256[1] = *(_QWORD *)v1368;
          v1257 = *(_QWORD *)&v1368[8];
          *(_QWORD *)&v1368[8] = 0;
          v1256[2] = v1257;
          *(_QWORD *)v1321 = v1256;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v1368[8]);
          if (!LOBYTE(v1327.image.m_ptr))
            goto LABEL_2630;
          WebKit::WebPageProxy::beginSystemPreview(v13, (uint64_t)&v1327, (uint64_t)&v1327.containerScrollingNodeID, (uint64_t)&v1327.url + 8, (const void **)v1321);
          v1258 = *(_QWORD *)v1321;
          *(_QWORD *)v1321 = 0;
          if (v1258)
            (*(void (**)(uint64_t))(*(_QWORD *)v1258 + 8))(v1258);
        }
        if (!LOBYTE(v1327.image.m_ptr))
          goto LABEL_1678;
        if (LODWORD(v1327.adjustedPointForNodeRespondingToClickEvents.m_x) != -1)
          ((void (*)(_BYTE *, Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>::MarkableTraits> *))off_1E34FBEB0[LODWORD(v1327.adjustedPointForNodeRespondingToClickEvents.m_x)])(v1368, &v1327.containerScrollingNodeID);
        v1327.adjustedPointForNodeRespondingToClickEvents.m_x = NAN;
        goto LABEL_1150;
      }
LABEL_1678:
      CFRelease(*(CFTypeRef *)(v13 + 8));
      return;
  }
}

#error "196CAD2F4: too big function (funcsize=0)"

WebKit::RemoteWebInspectorUI *`non-virtual thunk to'WebKit::WebPage::didReceiveMessage(WebKit::WebPage *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebPage::didReceiveMessage((WebKit::WebPage *)((char *)this - 16), a2, a3);
}

WebKit::RemoteWebInspectorUI *WebKit::WebPage::didReceiveMessage(WebKit::WebPage *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v5;
  int v6;
  WebKit::RemoteWebInspectorUI *result;
  WebKit::WebFullScreenManager *v8;

  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 >= 0xE98)
    v5 = 3736;
  v6 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v5 + 2]);
  if (v6 <= 169)
  {
    if (v6 != 130)
    {
      if (v6 == 165)
      {
        v8 = WebKit::WebPage::fullScreenManager(this);
        return (WebKit::RemoteWebInspectorUI *)WebKit::WebFullScreenManager::didReceiveMessage(v8, a2, a3);
      }
      return (WebKit::RemoteWebInspectorUI *)WebKit::WebPage::didReceiveWebPageMessage(this, a2, a3);
    }
    result = WebKit::WebPage::remoteInspectorUI(this);
    if (result)
      return (WebKit::RemoteWebInspectorUI *)WebKit::RemoteWebInspectorUI::didReceiveMessage(result, a2, a3);
  }
  else
  {
    if (v6 != 170)
    {
      if (v6 == 172)
      {
        result = WebKit::WebPage::inspectorUI(this);
        if (result)
          return (WebKit::RemoteWebInspectorUI *)WebKit::WebInspectorUI::didReceiveMessage(result, a2, a3);
        return result;
      }
      return (WebKit::RemoteWebInspectorUI *)WebKit::WebPage::didReceiveWebPageMessage(this, a2, a3);
    }
    result = (WebKit::RemoteWebInspectorUI *)WebKit::WebPage::inspector(this, 1);
    if (result)
      return (WebKit::RemoteWebInspectorUI *)(*(uint64_t (**)(WebKit::RemoteWebInspectorUI *, IPC::Connection *, IPC::Decoder *))(*(_QWORD *)result + 16))(result, a2, a3);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::IntSize>>(unint64_t *a1)
{
  unint64_t result;
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<std::tuple<WebCore::IntSize>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

void `non-virtual thunk to'WebKit::WebUserContentController::didReceiveMessage(WebKit::WebUserContentController *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebUserContentController::didReceiveMessage((WebKit::WebUserContentController *)((char *)this - 48), a2, a3);
}

void WebKit::WebUserContentController::didReceiveMessage(WebKit::WebUserContentController *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;

  ++*((_DWORD *)this + 2);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xAF4:
      IPC::Decoder::decode<std::tuple<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
      {
        WebKit::WebUserContentController::addContentRuleLists((uint64_t)this, (uint64_t)&v6);
        if (v8)
          WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, a2);
      }
      break;
    case 0xAF5:
      IPC::Decoder::decode<std::tuple<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
      {
        WebKit::WebUserContentController::addContentWorlds(this, (uint64_t)&v6);
        if (v8)
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, a2);
      }
      break;
    case 0xAF6:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
      {
        WebKit::WebUserContentController::addUserScriptMessageHandlers(this, (uint64_t)&v6);
        if (v8)
          WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, a2);
      }
      break;
    case 0xAF7:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::InjectUserScriptImmediately>>((uint64_t)&v6, (uint64_t *)a3);
      if (v9)
      {
        WebKit::WebUserContentController::addUserScripts(this, &v6, v8);
        if (v9)
          WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v6, a2);
      }
      break;
    case 0xAF8:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
      {
        WebKit::WebUserContentController::addUserStyleSheets(this, (unsigned int *)&v6);
        if (v8)
          WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, a2);
      }
      break;
    case 0xAF9:
      WebKit::WebUserContentController::removeAllContentRuleLists(this);
      break;
    case 0xAFA:
      WebKit::WebUserContentController::removeAllUserScriptMessageHandlers(this, a2);
      break;
    case 0xAFB:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
      {
        WebKit::WebUserContentController::removeAllUserScriptMessageHandlersForWorlds(this, (uint64_t)&v6);
        goto LABEL_11;
      }
      break;
    case 0xAFC:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
      {
        WebKit::WebUserContentController::removeAllUserScripts(this, (uint64_t)&v6);
        goto LABEL_11;
      }
      break;
    case 0xAFD:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
      {
        WebKit::WebUserContentController::removeAllUserStyleSheets(this, (uint64_t)&v6);
        goto LABEL_11;
      }
      break;
    case 0xAFE:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v6);
      if ((_BYTE)v7)
      {
        WebKit::WebUserContentController::removeContentRuleList(this, (const WTF::String *)&v6);
        if ((_BYTE)v7)
        {
          v5 = v6;
          v6 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
      }
      break;
    case 0xAFF:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
      {
        WebKit::WebUserContentController::removeContentWorlds((uint64_t *)this, (uint64_t)&v6);
LABEL_11:
        if (v8)
        {
          v4 = v6;
          if (v6)
          {
            v6 = 0;
            LODWORD(v7) = 0;
            WTF::fastFree(v4, a2);
          }
        }
      }
      break;
    case 0xB00:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
        WebKit::WebUserContentController::removeUserScript((uint64_t *)this, (uint64_t)v6, v7);
      break;
    case 0xB01:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
        WebKit::WebUserContentController::removeUserScriptMessageHandler((uint64_t)this, (uint64_t)v6, v7);
      break;
    case 0xB02:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v8)
        WebKit::WebUserContentController::removeUserStyleSheet((uint64_t *)this, (uint64_t)v6, v7);
      break;
    default:
      break;
  }
  if (*((_DWORD *)this + 2) == 1)
    (*(void (**)(WebKit::WebUserContentController *, IPC::Connection *))(*(_QWORD *)this + 8))(this, a2);
  else
    --*((_DWORD *)this + 2);
}

void WebKit::DrawingArea::didReceiveMessage(WebKit::DrawingArea *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*((_WORD *)a3 + 25) == 25)
  {
    (*(void (**)(WebKit::DrawingArea *))(*(_QWORD *)this + 400))(this);
  }
  else
  {
    switch(*((_WORD *)a3 + 25))
    {
      case 0x14:
        IPC::handleMessage<Messages::DrawingArea::AcceleratedAnimationDidEnd,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&)>((uint64_t *)a3, (uint64_t)this);
        break;
      case 0x15:
        IPC::handleMessage<Messages::DrawingArea::AcceleratedAnimationDidStart,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::MonotonicTime)>((uint64_t *)a3, (uint64_t)this);
        break;
      case 0x16:
        IPC::handleMessage<Messages::DrawingArea::AdjustTransientZoom,WebKit::DrawingArea,WebKit::DrawingArea,void ()(double,WebCore::FloatPoint)>((unint64_t *)a3, (uint64_t)this);
        break;
      case 0x17:
        IPC::handleMessageAsync<Messages::DrawingArea::CommitTransientZoom,WebKit::DrawingArea,WebKit::DrawingArea,void ()(double,WebCore::FloatPoint,WTF::CompletionHandler<void ()(void)> &&)>(a2, (unint64_t *)a3, (uint64_t)this);
        break;
      case 0x18:
        v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v5)
          (*(void (**)(WebKit::DrawingArea *, unint64_t))(*(_QWORD *)this + 432))(this, v4);
        break;
      case 0x1A:
        IPC::handleMessage<Messages::DrawingArea::SetColorSpace,WebKit::DrawingArea,WebKit::DrawingArea,void ()(std::optional<WebCore::DestinationColorSpace>)>((uint64_t *)a3, (uint64_t)this);
        break;
      case 0x1B:
        v3 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
        if ((v3 & 0xFF00000000) != 0)
          (*(void (**)(WebKit::DrawingArea *, float))(*(_QWORD *)this + 416))(this, *(float *)&v3);
        break;
      case 0x1C:
        IPC::handleMessage<Messages::DrawingArea::SetViewExposedRect,WebKit::DrawingArea,WebKit::DrawingArea,void ()(std::optional<WebCore::FloatRect>)>((unint64_t *)a3, (uint64_t)this);
        break;
      case 0x1D:
        IPC::handleMessageAsync<Messages::DrawingArea::UpdateGeometry,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::IntSize const&,BOOL,WTF::MachSendRight const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (unint64_t *)a3, (uint64_t)this);
        break;
      default:
        return;
    }
  }
}

void `non-virtual thunk to'WebKit::WebUserContentControllerProxy::didReceiveMessage(CFTypeRef *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebUserContentControllerProxy::didReceiveMessage(this - 2, a2, a3);
}

void WebKit::RemoteLayerTreeDrawingArea::displayDidRefresh(WebKit::RemoteLayerTreeDrawingArea *this)
{
  int v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  void *v22;
  WebKit::WebProcess *v23;
  IPC::Encoder *v24;

  v2 = *((unsigned __int8 *)this + 227);
  *((_BYTE *)this + 227) = 0;
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v23);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  if (!*((_BYTE *)v3 + 761))
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  if (*((_BYTE *)this + 228)
    || *((_BYTE *)this + 360)
    && ((*((_QWORD *)this + 40) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*((_QWORD *)this + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
  {
    WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(this);
    *((_BYTE *)this + 228) = 0;
    *((_BYTE *)this + 360) = 0;
  }
  else
  {
    if (v2
      && (*((_QWORD *)this + 25) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*((_QWORD *)this + 25) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      *((_BYTE *)this + 228) = 1;
      return;
    }
    v4 = *((_QWORD *)this + 31);
    v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (v5)
      v6 = v5 - 16;
    else
      v6 = 0;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v7 = *((_QWORD *)this + 4);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1107;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v24 = (IPC::Encoder *)v8;
    v9 = *(_QWORD *)(v8 + 544);
    v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = v10 + 8;
    v12 = *(_QWORD *)(v8 + 552);
    if (v12 < v10 + 8)
    {
      v19 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v20 = v19;
        v19 *= 2;
      }
      while (v20 < v11);
      v21 = (char *)mmap(0, v20, 3, 4098, -1, 0);
      if (v21 == (char *)-1)
      {
        __break(0xC471u);
        return;
      }
      v13 = v21;
      memcpy(v21, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
      v22 = *(void **)(v8 + 528);
      if (v22 != (void *)(v8 + 16))
        munmap(v22, *(_QWORD *)(v8 + 552));
      *(_QWORD *)(v8 + 528) = v13;
      *(_QWORD *)(v8 + 552) = v20;
      v9 = *(_QWORD *)(v8 + 544);
    }
    else
    {
      v13 = *(char **)(v8 + 528);
    }
    bzero(&v13[v9], v10 - v9);
    *(_QWORD *)(v8 + 544) = v11;
    v14 = (_QWORD *)(*(_QWORD *)(v8 + 528) + v10);
    *(_QWORD *)(v8 + 536) = v14 + 1;
    *v14 = v4 + 1;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v6 + 32) + 32))(v6 + 32, &v24, 0);
    v16 = v24;
    v24 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v15);
      WTF::fastFree(v17, v18);
    }
    if (v5)
      CFRelease(*(CFTypeRef *)(v5 - 8));
  }
}

void sub_196CBDBDC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  uint64_t v10;
  WTF *v12;
  void *v13;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v12, v13);
  }
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 - 8));
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::String>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>>(_BYTE *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[32])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

unint64_t `non-virtual thunk to'WebKit::AuthenticationManager::didReceiveMessage(WebKit::AuthenticationManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::AuthenticationManager::didReceiveMessage((unint64_t)this - 8, a2, a3);
}

uint64_t WebKit::WebPageProxy::didChangeProgress(WebKit::WebPageProxy *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  _QWORD v14[2];

  v4 = *((_QWORD *)this + 5);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
  v8 = *((_QWORD *)this + 4);
  v9 = *(_QWORD *)(v8 + 960);
  v10 = v8;
  if (v9)
  {
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v10 = *((_QWORD *)this + 4);
  }
  v14[0] = v9;
  v14[1] = v8 + 944;
  ++*(_DWORD *)(v8 + 1316);
  *(_BYTE *)(v8 + 1312) = 1;
  *(double *)(v10 + 1280) = a2;
  WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(v10 + 944), v6, v7);
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v14, v11, v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebCore::LayoutMilestone>>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = IPC::Decoder::decode<WTF::OptionSet<WebCore::LayoutMilestone>>(a1);
  if ((v2 & 0xFF0000) != 0)
    return (unsigned __int16)v2 | 0x10000u;
  v4 = *a1;
  v5 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
    return 0;
  }
  return result;
}

void `non-virtual thunk to'WebKit::VisitedLinkTableController::didReceiveMessage(WebKit::VisitedLinkTableController *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::VisitedLinkTableController::didReceiveMessage((WebKit::VisitedLinkTableController *)((char *)this - 32), a2, a3);
}

void WebKit::VisitedLinkTableController::didReceiveMessage(WebKit::VisitedLinkTableController *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  int v10;
  unsigned int v11;
  char v12;

  ++*((_DWORD *)this + 2);
  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1522:
      IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, (uint64_t)&v9);
      if (v12)
      {
        if (!v11)
          goto LABEL_7;
        v6 = v9;
        v7 = 4 * v11;
        do
        {
          v6 = (WTF *)((char *)v6 + 4);
          WebCore::VisitedLinkStore::invalidateStylesForLink(this);
          v7 -= 4;
        }
        while (v7);
        if (v12)
        {
LABEL_7:
          v8 = v9;
          if (v9)
          {
            v9 = 0;
            v10 = 0;
            WTF::fastFree(v8, v5);
          }
        }
      }
      break;
    case 1521:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v9);
      if (v12)
      {
        WebKit::VisitedLinkTableController::setVisitedLinkTable(this);
        if (v12)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v9);
      }
      break;
    case 1519:
      WebKit::VisitedLinkTableController::allVisitedLinkStateChanged(this);
      break;
    case 1520:
      WebKit::VisitedLinkTableController::removeAllVisitedLinks(this);
      break;
  }
  if (*((_DWORD *)this + 2) == 1)
    (*(void (**)(WebKit::VisitedLinkTableController *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 2);
}

uint64_t WebKit::WebPage::setUserAgent(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v5;
  uint64_t result;

  v5 = this + 13;
  result = WTF::equal(this[13], *a2, a3);
  if ((result & 1) == 0)
  {
    WTF::String::operator=(v5, (WTF::StringImpl *)a2);
    result = (uint64_t)this[6];
    if (result)
      return WebCore::Page::userAgentChanged((WebCore::Page *)result);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(a1);
  if ((v3 & 0xFF00000000) == 0)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t WebKit::WebPage::setInsertionPointColor(uint64_t a1, WebCore::RenderThemeIOS *a2)
{
  return WebCore::RenderThemeIOS::setInsertionPointColor(a2, (const Color *)a2);
}

WebKit::WebProcess *WebKit::WebPage::setMediaEnvironment(WTF::StringImpl **this, const WTF::String *a2)
{
  WebKit::WebProcess *result;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebKit::WebProcess *v8;
  uint64_t *v9[2];
  WTF::StringImpl *v10;

  WTF::String::operator=(this + 308, a2);
  {
    result = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
  }
  v5 = *((_QWORD *)result + 42);
  if (v5)
  {
    v6 = this[5];
    v9[1] = (uint64_t *)a2;
    v10 = v6;
    v7 = *(_QWORD *)(v5 + 24);
    v9[0] = (uint64_t *)&v10;
    return (WebKit::WebProcess *)IPC::Connection::send<Messages::GPUConnectionToWebProcess::SetMediaEnvironment>(v7, v9, 0, 0, 0);
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::commitLayerTreeNotTriggered(WebKit::RemoteLayerTreeDrawingAreaProxy *a1, IPC::Connection *a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection(a1, a2);
  if (*(_QWORD *)(result + 8) < a3)
  {
    *(_DWORD *)result = 3;
    WebKit::RemoteLayerTreeDrawingAreaProxy::maybePauseDisplayRefreshCallbacks(a1);
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
    if (v6)
      v7 = v6 - 16;
    else
      v7 = 0;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 200) + 32))(*(_QWORD *)(v7 + 200));
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::Color>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::Color>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebCore::PlatformEventModifier>>>(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = (unsigned __int16)IPC::Decoder::decode<WTF::OptionSet<WebCore::PlatformEventModifier>>(a1);
  v3 = 256;
  if (v2 <= 0xFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
        v3 = 0;
        v2 = v8;
      }
      else
      {
        v3 = 0;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if (v2 <= 0x100)
    LOBYTE(v2) = 0;
  return v3 | v2;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::PlatformEventModifier>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WTF::OptionSet<WebCore::PlatformEventModifier>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::setUseIconLoadingClient(unsigned int *this, char a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int *v5;
  unsigned int v6;
  _BYTE *v7;

  v2 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v5 = (unsigned int *)(v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *(_BYTE **)(*(_QWORD *)(v2 + 280) + 16);
    if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 1072))(v7) & 1) == 0)
      v7[52] = a2;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  return this;
}

uint64_t WebKit::WebPage::preferencesDidChange(WebKit::WebPage *this, const WebKit::WebPreferencesStore *a2)
{
  WTF::StringImpl **v4;

  {
    v4 = (WTF::StringImpl **)WebKit::BOOLTestRunnerOverridesMap(void)::map;
    if (WebKit::BOOLTestRunnerOverridesMap(void)::map)
    {
      WebKit::BOOLTestRunnerOverridesMap(void)::map = 0;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
    }
  }
  else
  {
    WebKit::BOOLTestRunnerOverridesMap(void)::map = 0;
  }
  return WebKit::WebPage::updatePreferences(this, a2);
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebCore::Color>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::optional<WebCore::Color>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebPreferencesStore>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebKit::WebPreferencesStore>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::commitStateBeforeChildren(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  uint64_t v6;
  const void *PlatformLayerTyped;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  int v16;
  uint64_t v17;
  WebKit::ScrollingTreeScrollingNodeDelegateIOS *v18;
  uint64_t v20;

  v4 = WebCore::ScrollingTreeFrameScrollingNode::commitStateBeforeChildren();
  if (*(unsigned __int8 *)(a2 + 16) < 2u)
    v6 = v4;
  else
    v6 = 0;
  if ((_DWORD)v6 != 1)
    return v6;
  if ((*(_BYTE *)(a2 + 43) & 2) != 0)
  {
    PlatformLayerTyped = (const void *)WebCore::LayerRepresentation::makePlatformLayerTyped(*(WebCore::LayerRepresentation **)(a2 + 584), v5);
    v8 = PlatformLayerTyped;
    if (PlatformLayerTyped)
      CFRetain(PlatformLayerTyped);
    v9 = *(const void **)(a1 + 408);
    *(_QWORD *)(a1 + 408) = v8;
    if (v9)
      CFRelease(v9);
  }
  if ((*(_BYTE *)(a2 + 46) & 2) != 0)
  {
    v10 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTyped(*(WebCore::LayerRepresentation **)(a2 + 704), v5);
    v11 = v10;
    if (v10)
      CFRetain(v10);
    v12 = *(const void **)(a1 + 416);
    *(_QWORD *)(a1 + 416) = v11;
    if (v12)
      CFRelease(v12);
  }
  if ((*(_BYTE *)(a2 + 45) & 4) != 0)
  {
    v13 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTyped(*(WebCore::LayerRepresentation **)(a2 + 744), v5);
    v14 = v13;
    if (v13)
      CFRetain(v13);
    v15 = *(const void **)(a1 + 424);
    *(_QWORD *)(a1 + 424) = v14;
    if (v15)
      CFRelease(v15);
  }
  if ((*(_BYTE *)(a2 + 41) & 0x10) != 0)
  {
    v16 = *(_DWORD *)(a1 + 296);
    if (v16 == 1)
    {
      if (!*(_QWORD *)(a1 + 264))
        goto LABEL_25;
    }
    else if (v16 == 3)
    {
      if (!*(_QWORD *)(a1 + 280))
        goto LABEL_25;
    }
    else if (v16 != 2 || !*(_QWORD *)(a1 + 272))
    {
LABEL_25:
      v17 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = 0;
      if (!v17)
        goto LABEL_27;
      goto LABEL_26;
    }
    v20 = WTF::fastMalloc((WTF *)0x38);
    WebCore::ScrollingTreeScrollingNodeDelegate::ScrollingTreeScrollingNodeDelegate((WebCore::ScrollingTreeScrollingNodeDelegate *)v20, (WebCore::ScrollingTreeScrollingNode *)a1);
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)v20 = off_1E34CC038;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_WORD *)(v20 + 48) = 0;
    v17 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v20;
    if (v17)
LABEL_26:
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
LABEL_27:
  v18 = *(WebKit::ScrollingTreeScrollingNodeDelegateIOS **)(a1 + 96);
  if (v18)
    WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateBeforeChildren(v18, (WebCore::LayerRepresentation **)a2);
  return v6;
}

void sub_196CBE64C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ScrollingTreeOverflowScrollingNodeIOS::commitStateBeforeChildren(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t result;
  unsigned int v9;
  int v10;

  v2 = *(unsigned __int8 *)(a2 + 16);
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2B;
  if (v3 || v4 == 0)
    return 0;
  if ((*(_BYTE *)(a2 + 41) & 0x10) != 0)
    WebKit::ScrollingTreeScrollingNodeDelegateIOS::resetScrollViewDelegate(*(WebKit::ScrollingTreeScrollingNodeDelegateIOS **)(*(_QWORD *)(a1 + 96) + 24));
  result = WebCore::ScrollingTreeScrollingNode::commitStateBeforeChildren();
  if ((_DWORD)result)
  {
    v9 = *(unsigned __int8 *)(a2 + 16);
    v3 = v9 > 5;
    v10 = (1 << v9) & 0x2B;
    if (v3 || v10 == 0)
    {
      result = 96;
      __break(0xC471u);
    }
    else
    {
      WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateBeforeChildren(*(WebKit::ScrollingTreeScrollingNodeDelegateIOS **)(a1 + 96), (WebCore::LayerRepresentation **)a2);
      return 1;
    }
  }
  return result;
}

void WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateBeforeChildren(WebKit::ScrollingTreeScrollingNodeDelegateIOS *this, WebCore::LayerRepresentation **a2)
{
  const void *PlatformLayerTyped;
  const void *v4;
  const void *v5;

  if ((*((_BYTE *)a2 + 41) & 0x10) != 0)
  {
    PlatformLayerTyped = (const void *)WebCore::LayerRepresentation::makePlatformLayerTyped(a2[33], a2);
    v4 = PlatformLayerTyped;
    if (PlatformLayerTyped)
      CFRetain(PlatformLayerTyped);
    v5 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v4;
    if (v5)
      CFRelease(v5);
  }
}

void WebKit::WebLocalFrameLoaderClient::overrideContentSecurityPolicy(WebKit::WebFrame **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = WebKit::WebFrame::page(this[2]);
  if (v3)
  {
    v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    v5 = *(_DWORD **)(v4 + 2056);
    if (v5)
      *v5 += 2;
    *a2 = v5;
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WebKit::WebsitePoliciesData::applyToDocumentLoader(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  WebCore::DocumentLoader::setCustomHeaderFields();
  WTF::String::operator=((WTF::StringImpl **)(a2 + 3384), (WTF::StringImpl *)(a1 + 40));
  WTF::String::operator=((WTF::StringImpl **)(a2 + 3392), (WTF::StringImpl *)(a1 + 48));
  WTF::String::operator=((WTF::StringImpl **)(a2 + 3400), (WTF::StringImpl *)(a1 + 56));
  *(_BYTE *)(a2 + 3534) = *(_BYTE *)(a1 + 109);
  *(_BYTE *)(a2 + 3512) = *(_BYTE *)(a1 + 107);
  if (*(_BYTE *)(a2 + 3432))
  {
    v5 = *(_QWORD *)(a2 + 3440);
    if (!v5 || !*(_DWORD *)(v5 - 12))
    {
      *(_BYTE *)(a2 + 3432) = *(_BYTE *)(a1 + 80);
      v6 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = 0;
      v7 = *(WTF::StringImpl ***)(a2 + 3440);
      *(_QWORD *)(a2 + 3440) = v6;
      if (v7)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v4);
    }
  }
  WebCore::DocumentLoader::setActiveContentRuleListActionPatterns();
  v9 = *(unsigned int *)(a2 + 3460);
  if ((_DWORD)v9)
  {
    v20 = *(_QWORD *)(a2 + 3448);
    v21 = 16 * v9;
    do
    {
      v20 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20, v8)+ 16;
      v21 -= 16;
    }
    while (v21);
  }
  result = WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(a2 + 3448, (_DWORD *)(a1 + 24));
  *(_BYTE *)(a2 + 3521) = *(_BYTE *)(a1 + 74) & 0xF;
  v11 = *(unsigned __int8 *)(a1 + 96);
  if (v11 <= 3)
    *(_BYTE *)(a2 + 3520) = v11;
  v12 = *(unsigned __int8 *)(a1 + 97);
  if (v12 <= 2)
    *(_BYTE *)(a2 + 3522) = v12;
  v13 = *(unsigned __int8 *)(a1 + 98);
  if (v13 <= 2)
    *(_BYTE *)(a2 + 3523) = v13;
  v14 = *(unsigned __int8 *)(a1 + 99);
  if (v14 <= 2)
    *(_BYTE *)(a2 + 3524) = v14;
  v15 = *(unsigned __int8 *)(a1 + 100);
  if (v15 <= 2)
    *(_BYTE *)(a2 + 3525) = v15;
  v16 = *(unsigned __int8 *)(a1 + 101);
  if (v16 <= 2)
    *(_BYTE *)(a2 + 3526) = v16;
  v17 = *(unsigned __int8 *)(a1 + 103);
  if (v17 <= 1)
    *(_BYTE *)(a2 + 3527) = v17;
  *(_WORD *)(a2 + 3528) = *(_WORD *)(a1 + 104);
  *(_WORD *)(a2 + 3514) = *(_WORD *)(a1 + 72);
  if (!*(_BYTE *)(a2 + 3518))
  {
    v18 = *(_WORD *)(a1 + 72);
    *(_BYTE *)(a2 + 3518) = 1;
    *(_WORD *)(a2 + 3516) = v18;
  }
  *(_BYTE *)(a2 + 3531) = *(_BYTE *)(a1 + 108);
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
  {
    if (*(_QWORD *)(v19 + 8))
      return WebCore::DocumentLoader::applyPoliciesToSettings((WebCore::DocumentLoader *)a2);
  }
  return result;
}

uint64_t WebKit::LoadParameters::LoadParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)((char *)a2 + 17);
  *(_OWORD *)(a1 + 8) = v5;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 40, (uint64_t)(a2 + 5));
  v6 = a2[29];
  a2[29] = 0;
  *(_QWORD *)(a1 + 232) = v6;
  v7 = a2[30];
  a2[30] = 0;
  *(_QWORD *)(a1 + 240) = v7;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
  v8 = a2[33];
  a2[33] = 0;
  *(_QWORD *)(a1 + 264) = v8;
  v9 = a2[34];
  a2[34] = 0;
  *(_QWORD *)(a1 + 272) = v9;
  v10 = a2[35];
  a2[35] = 0;
  *(_QWORD *)(a1 + 280) = v10;
  v11 = a2[36];
  a2[36] = 0;
  *(_QWORD *)(a1 + 288) = v11;
  v12 = a2[37];
  a2[37] = 0;
  *(_QWORD *)(a1 + 296) = v12;
  std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 304), (uint64_t)(a2 + 38));
  *(_WORD *)(a1 + 424) = *((_WORD *)a2 + 212);
  v13 = a2[54];
  if (v13)
    CFRetain(*(CFTypeRef *)(v13 + 8));
  *(_QWORD *)(a1 + 432) = v13;
  v14 = *((_WORD *)a2 + 220);
  *(_BYTE *)(a1 + 442) = *((_BYTE *)a2 + 442);
  *(_WORD *)(a1 + 440) = v14;
  v15 = a2[56];
  a2[56] = 0;
  *(_QWORD *)(a1 + 448) = v15;
  *(_DWORD *)(a1 + 456) = *((_DWORD *)a2 + 114);
  std::__optional_move_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_move_base[abi:sn180100](a1 + 464, (uint64_t)(a2 + 58));
  v16 = *(_OWORD *)(a2 + 65);
  v17 = *(_OWORD *)(a2 + 67);
  v18 = *(_OWORD *)(a2 + 69);
  *(_QWORD *)(a1 + 565) = *(uint64_t *)((char *)a2 + 565);
  *(_OWORD *)(a1 + 536) = v17;
  *(_OWORD *)(a1 + 552) = v18;
  *(_OWORD *)(a1 + 520) = v16;
  return a1;
}

void sub_196CBEAD0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::ResourceRequestBase *v3;
  const char ***v4;
  WebKit::WebsitePoliciesData *v5;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v7 = *(WTF::StringImpl **)(v2 + 448);
  *(_QWORD *)(v2 + 448) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_QWORD *)(v2 + 432);
  *(_QWORD *)(v2 + 432) = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  if (*(_BYTE *)(v2 + 416))
    WebKit::WebsitePoliciesData::~WebsitePoliciesData(v5, a2);
  v9 = *(WTF::StringImpl **)(v2 + 296);
  *(_QWORD *)(v2 + 296) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)(v2 + 288);
  *(_QWORD *)(v2 + 288) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)(v2 + 280);
  *(_QWORD *)(v2 + 280) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)(v2 + 272);
  *(_QWORD *)(v2 + 272) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(WTF::StringImpl **)(v2 + 264);
  *(_QWORD *)(v2 + 264) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v4);
  v14 = *(const void **)(v2 + 232);
  *(_QWORD *)(v2 + 232) = 0;
  if (v14)
    CFRelease(v14);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v3);
  v16 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::GPUProcessCreationParameters::GPUProcessCreationParameters(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  v4 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(result + 16) = v4;
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = a2[4];
  v6 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v6;
  v7 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v7;
  v8 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = v8;
  v9 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(result + 64) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = 0;
  *(_DWORD *)(result + 72) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = 0;
  *(_DWORD *)(result + 76) = v9;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v10 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(result + 80) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = 0;
  *(_DWORD *)(result + 88) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = 0;
  *(_DWORD *)(result + 92) = v10;
  *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    v11 = a2[12];
    a2[12] = 0;
    *(_QWORD *)(result + 96) = v11;
    *(_BYTE *)(result + 104) = 1;
  }
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  v12 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(result + 112) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = 0;
  *(_DWORD *)(result + 120) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = 0;
  *(_DWORD *)(result + 124) = v12;
  v13 = a2[16];
  a2[16] = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 128) = v13;
  v14 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(result + 136) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = 0;
  *(_DWORD *)(result + 144) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = 0;
  *(_DWORD *)(result + 148) = v14;
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int16 v27;
  char v28;
  char v29;
  uint64_t v30;
  _BYTE v31[15];
  unsigned __int8 v32;
  const char **v33;
  unsigned __int8 v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  char v38;

  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::decode(a2, (uint64_t)v20);
  if (v38
    || ((v13 = *a2, v14 = a2[1], *a2 = 0, a2[1] = 0, (v15 = a2[3]) != 0) ? (v16 = v14 == 0) : (v16 = 1),
        !v16 && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13), v38)))
  {
    *(_OWORD *)a1 = v20[0];
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)v20 + 9);
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    v5 = v32;
    if (v32)
    {
      v6 = v21;
      v21 = 0u;
      *(_OWORD *)(a1 + 32) = v6;
      *(_QWORD *)&v6 = v22;
      v22 = 0;
      *(_QWORD *)(a1 + 48) = v6;
      v7 = v23;
      v23 = 0;
      *(_QWORD *)(a1 + 56) = v7;
      *(_QWORD *)&v6 = v24;
      v24 = 0;
      *(_QWORD *)(a1 + 64) = v6;
      *(_OWORD *)(a1 + 72) = v25;
      v8 = v26;
      v25 = 0u;
      v26 = 0u;
      *(_OWORD *)(a1 + 88) = v8;
      LOWORD(v7) = v27;
      *(_BYTE *)(a1 + 106) = v28;
      *(_WORD *)(a1 + 104) = v7;
      *(_BYTE *)(a1 + 112) = v29;
      *(_QWORD *)(a1 + 135) = *(_QWORD *)&v31[7];
      v9 = v30;
      v10 = *(_QWORD *)v31;
      v30 = 0;
      *(_QWORD *)(a1 + 120) = v9;
      *(_QWORD *)(a1 + 128) = v10;
      *(_BYTE *)(a1 + 144) = 1;
    }
    *(_BYTE *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 160) = 0;
    v11 = v34;
    if (v34)
    {
      v12 = v33;
      v33 = 0;
      *(_QWORD *)(a1 + 152) = v12;
      *(_BYTE *)(a1 + 160) = 1;
    }
    *(_BYTE *)(a1 + 168) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    if (v37)
    {
      *(_WORD *)(a1 + 168) = v35;
      *(_QWORD *)(a1 + 176) = v36;
      *(_BYTE *)(a1 + 184) = 1;
      v36 = 0;
    }
    *(_BYTE *)(a1 + 192) = 1;
    if (v11)
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v33);
      v5 = v32;
    }
    if (v5)
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v21, v4);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 192) = 0;
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19 && v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
  }
}

void IPC::ArgumentCoder<WebKit::PolicyDecision,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v2;
  int v3;
  char v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned __int8 v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  const char **v27;
  int v28;
  const char **v29;
  unint64_t v30;
  char v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  _BYTE v61[25];
  _BYTE v62[120];
  const char **v63;
  unsigned __int8 v64;
  __int16 v65;
  WTF::StringImpl *v66;
  char v67;
  __int16 v68;
  WTF::StringImpl *v69;
  char v70;
  char v71;
  const char **v72;
  char v73;
  char v74;
  _BYTE v75[120];
  char v76;

  v60 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(a1);
  v7 = a1[1];
  v8 = *a1;
  v9 = a1[2] - *a1;
  if (v7 <= v9)
  {
    v33 = 0;
    v34 = 0;
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v8);
        v34 = *a1;
        v33 = a1[1];
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
    }
    goto LABEL_60;
  }
  v10 = (unsigned __int8 *)(v8 + v9);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    v33 = v7;
    v34 = 0;
LABEL_60:
    v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36)
    {
      if (v33)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34, v33);
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
      }
    }
    goto LABEL_61;
  }
  LODWORD(v11) = *v10;
  if (v11 < 4)
  {
    v59 = 0;
    goto LABEL_5;
  }
LABEL_61:
  v37 = *a1;
  *a1 = 0;
  a1[1] = 0;
  v38 = a1[3];
  if (v38)
  {
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v37);
      LOBYTE(v11) = 0;
      v7 = a1[1];
    }
    else
    {
      LOBYTE(v11) = 0;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    v7 = 0;
  }
  v59 = 1;
LABEL_5:
  v12 = *a1;
  v13 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v7 >= v13 && v7 - v13 > 7)
  {
    v15 = (uint64_t *)(v12 + v13);
    a1[2] = (uint64_t)(v15 + 1);
    if (v12)
    {
      v58 = 0;
      v57 = *v15;
      goto LABEL_12;
    }
    v39 = v7;
    v40 = 0;
  }
  else
  {
    v39 = 0;
    v40 = 0;
    *a1 = 0;
    a1[1] = 0;
    v41 = a1[3];
    if (v41)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
        v40 = *a1;
        v39 = a1[1];
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v42 = a1[3];
  if (!v42 || !v39)
  {
    v12 = 0;
    v57 = 0;
    v7 = 0;
    v58 = 1;
LABEL_67:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v12);
        v44 = *a1;
        v7 = a1[1];
      }
      else
      {
        v44 = 0;
      }
    }
    else
    {
      v44 = 0;
      v7 = 0;
    }
    goto LABEL_69;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40, v39);
  v57 = 0;
  v12 = *a1;
  v7 = a1[1];
  v58 = 1;
LABEL_12:
  if (v7 <= a1[2] - v12)
    goto LABEL_67;
  v16 = (unsigned __int8 *)a1[2];
  a1[2] = (uint64_t)(v16 + 1);
  if (!v12)
  {
    v44 = 0;
LABEL_69:
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (v45)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v44);
        v12 = *a1;
        v7 = a1[1];
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v12 = 0;
      v7 = 0;
    }
LABEL_71:
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v12);
    goto LABEL_72;
  }
  v17 = *v16;
  if (v17 >= 2)
    goto LABEL_71;
  if (v17)
    goto LABEL_55;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v4 = 0;
  while (1)
  {
    IPC::Decoder::decode<std::optional<WebKit::WebsitePoliciesData>>((uint64_t)v75, a1);
    IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v72);
    v21 = a1[1];
    v22 = (WTF::StringImpl *)*a1;
    v23 = a1[2] - *a1;
    if (v21 <= v23)
    {
      v50 = 0;
      v51 = 0;
      *a1 = 0;
      a1[1] = 0;
      v52 = a1[3];
      if (v52)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
          v51 = *a1;
          v50 = a1[1];
        }
        else
        {
          v50 = 0;
          v51 = 0;
        }
      }
      goto LABEL_75;
    }
    v24 = (unsigned __int8 *)v22 + v23;
    a1[2] = (uint64_t)(v24 + 1);
    if (!v22)
    {
      v50 = v21;
      v51 = 0;
LABEL_75:
      v21 = 0;
      v22 = 0;
      *a1 = 0;
      a1[1] = 0;
      v53 = a1[3];
      if (v53)
      {
        if (v50)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51, v50);
          v22 = (WTF::StringImpl *)*a1;
          v21 = a1[1];
        }
        else
        {
          v21 = 0;
          v22 = 0;
        }
      }
LABEL_76:
      *a1 = 0;
      a1[1] = 0;
      v54 = a1[3];
      if (v54 && v21)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v54 + 16))(v54, v22);
      LOBYTE(v68) = 0;
      v71 = 0;
      goto LABEL_78;
    }
    v25 = *v24;
    if (v25 >= 2)
      goto LABEL_76;
    if (!v25)
    {
      v26 = 0;
      LOBYTE(v68) = 0;
      v70 = 0;
      v3 = 1;
      v71 = 1;
      goto LABEL_22;
    }
    IPC::Decoder::decode<WebKit::PolicyDecisionConsoleMessage>((uint64_t)v61, a1);
    if (v61[16])
    {
      v68 = *(_WORD *)v61;
      v2 = *(WTF::StringImpl **)&v61[8];
      *(_QWORD *)&v61[8] = 0;
      v69 = v2;
      v70 = 1;
      v71 = 1;
      std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v32);
      v26 = 0;
      v3 = 0;
      goto LABEL_22;
    }
    LOBYTE(v68) = 0;
    v71 = 0;
    std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v32);
LABEL_78:
    v22 = (WTF::StringImpl *)*a1;
    v55 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v56 = a1[3];
    if (v56 && v55)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v56 + 16))(v56, v22);
    v26 = 1;
LABEL_22:
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 192) = 0;
      goto LABEL_42;
    }
    if ((v60 & 0xFF0000) != 0)
    {
      *(_WORD *)v61 = v60;
      if (!v59)
      {
        v61[2] = (_BYTE)v11;
        if (!v58)
        {
          *(_QWORD *)&v61[8] = v57;
          if (!v19)
          {
            *(_QWORD *)&v61[16] = v20 | v18;
            v61[24] = v4;
            if (v76)
            {
              v11 = v62;
              std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100](v62, (uint64_t)v75);
              if (v74)
              {
                LOBYTE(v63) = 0;
                v64 = 0;
                if (v73)
                {
                  v27 = v72;
                  v72 = 0;
                  v63 = v27;
                  v64 = 1;
                }
                if (!v26)
                  break;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_55:
    v30 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
    if (v31)
    {
      v18 = v30;
      v19 = 0;
      v20 = v30 & 0xFFFFFFFFFFFFFF00;
      v4 = 1;
    }
    else
    {
LABEL_72:
      v47 = *a1;
      v48 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v49 = a1[3];
      if (v49 && v48)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v47);
      v18 = 0;
      v20 = 0;
      v19 = 1;
    }
  }
  LOBYTE(v65) = 0;
  v67 = 0;
  if ((v3 & 1) == 0)
  {
    v65 = v68;
    v69 = 0;
    v66 = v2;
    v67 = 1;
    v2 = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)v61;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)&v61[9];
  std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 32), (uint64_t)v62);
  *(_BYTE *)(a2 + 152) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v28 = v64;
  if (v64)
  {
    v29 = v63;
    v63 = 0;
    *(_QWORD *)(a2 + 152) = v29;
    *(_BYTE *)(a2 + 160) = 1;
  }
  *(_BYTE *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v67)
  {
    *(_WORD *)(a2 + 168) = v65;
    *(_QWORD *)(a2 + 176) = v66;
    *(_BYTE *)(a2 + 184) = 1;
    v66 = 0;
  }
  *(_BYTE *)(a2 + 192) = 1;
  if (v28)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v63);
  if (v62[112])
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v62, v22);
LABEL_42:
  if (((v26 | v3) & 1) == 0)
  {
    v69 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v22);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
  if (v74 && v73)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v72);
  if (v76)
  {
    if (v75[112])
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v75, v22);
  }
}

void sub_196CBF5B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  if (*(_BYTE *)(v37 - 224) && *(_BYTE *)(v37 - 232))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v37 - 240));
  if (*(_BYTE *)(v37 - 96))
  {
    if (*(_BYTE *)(v37 - 104))
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(v37 - 216), a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::WebsitePoliciesData>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;
  char v34;
  char v35;
  uint64_t v36;
  _BYTE v37[15];
  char v38;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v19 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v20 = *a2;
        v19 = a2[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_14;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v19 = v6;
    v20 = 0;
LABEL_14:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_15;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v5);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 120) = 0;
    goto LABEL_17;
  }
  if (v9)
  {
    IPC::Decoder::decode<WebKit::WebsitePoliciesData>(a2, (uint64_t)&v27);
    if (v38)
    {
      v11 = v27;
      v27 = 0u;
      *(_OWORD *)a1 = v11;
      *(_QWORD *)&v11 = v28;
      v28 = 0;
      *(_QWORD *)(a1 + 16) = v11;
      v12 = v29;
      v29 = 0;
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)&v11 = v30;
      v30 = 0;
      *(_QWORD *)(a1 + 32) = v11;
      v13 = v31;
      v31 = 0u;
      *(_OWORD *)(a1 + 40) = v13;
      v14 = v32;
      v32 = 0u;
      *(_OWORD *)(a1 + 56) = v14;
      LOWORD(v12) = v33;
      *(_BYTE *)(a1 + 74) = v34;
      *(_WORD *)(a1 + 72) = v12;
      *(_BYTE *)(a1 + 80) = v35;
      *(_QWORD *)(a1 + 103) = *(_QWORD *)&v37[7];
      v15 = v36;
      v16 = *(_QWORD *)v37;
      v36 = 0;
      *(_QWORD *)(a1 + 88) = v15;
      *(_QWORD *)(a1 + 96) = v16;
      v17 = 1;
      *(_BYTE *)(a1 + 112) = 1;
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v27, v10);
    }
    else
    {
      v17 = 0;
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 120) = v17;
  }
  else
  {
    LOBYTE(v27) = 0;
    v38 = 0;
    std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100]((_BYTE *)a1, (uint64_t)&v27);
    v17 = 1;
    *(_BYTE *)(a1 + 120) = 1;
    if (v38)
    {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v27, v18);
      v17 = *(unsigned __int8 *)(a1 + 120);
    }
  }
  if (!v17)
  {
LABEL_17:
    v24 = *a2;
    v25 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26)
    {
      if (v25)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
    }
  }
}

void sub_196CBF83C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  WebKit::WebsitePoliciesData *v23;

  if (*((_BYTE *)v23 + 120))
  {
    if (*((_BYTE *)v23 + 112))
      WebKit::WebsitePoliciesData::~WebsitePoliciesData(v23, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::WebsiteDataStoreParameters,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  const char **v5;
  const char **v6;
  const char **v7;
  const char **v8;
  const char **v9;
  const char **v10;
  WTF::StringImpl *v11;
  WTF *v12;
  const char **v13;
  char v14;
  char v15;
  const char **v16;
  char v17;
  char v18;
  const char **v19;
  char v20;
  char v21;
  const char **v22;
  char v23;
  char v24;
  const char **v25;
  char v26;
  WTF *v27;
  const char **v28;
  char v29;
  const char **v30[4];
  uint64_t v31;
  const char **v32;
  char v33;
  const char **v34;
  char v35;
  const char **v36;
  char v37;
  const char **v38;
  char v39;
  _BYTE v40[608];
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v27);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v25);
  IPC::Decoder::decode<WebKit::NetworkSessionCreationParameters>(v40, a1);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v22);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v19);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v16);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v13);
  if (!*a1)
    goto LABEL_39;
  if (!v29)
    goto LABEL_38;
  v30[0] = (const char **)v27;
  v5 = v28;
  v27 = 0;
  v28 = 0;
  v30[1] = v5;
  if (!v26)
    goto LABEL_38;
  v6 = v25;
  v25 = 0;
  v30[2] = v6;
  if (!v41)
    goto LABEL_38;
  WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters((uint64_t)&v31, (uint64_t)v40);
  if (!v24)
    goto LABEL_38;
  LOBYTE(v32) = 0;
  v33 = 0;
  if (v23)
  {
    v7 = v22;
    v22 = 0;
    v32 = v7;
    v33 = 1;
  }
  if (!v21)
    goto LABEL_38;
  LOBYTE(v34) = 0;
  v35 = 0;
  if (v20)
  {
    v8 = v19;
    v19 = 0;
    v34 = v8;
    v35 = 1;
  }
  if (!v18)
    goto LABEL_38;
  LOBYTE(v36) = 0;
  v37 = 0;
  if (v17)
  {
    v9 = v16;
    v16 = 0;
    v36 = v9;
    v37 = 1;
  }
  if (!v15)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    *a2 = 0;
    a2[704] = 0;
    goto LABEL_18;
  }
  LOBYTE(v38) = 0;
  v39 = 0;
  if (v14)
  {
    v10 = v13;
    v13 = 0;
    v38 = v10;
    v39 = 1;
  }
  WebKit::WebsiteDataStoreParameters::WebsiteDataStoreParameters((uint64_t)a2, (uint64_t *)v30);
  a2[704] = 1;
  WebKit::WebsiteDataStoreParameters::~WebsiteDataStoreParameters(v30, v11);
LABEL_18:
  if (v15 && v14)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v13);
  if (v18 && v17)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v16);
  if (v21 && v20)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v19);
  if (v24 && v23)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
  if (v41)
    WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)v40, v4);
  if (v26)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v25);
  if (v29)
  {
    v12 = v27;
    if (v27)
    {
      v27 = 0;
      LODWORD(v28) = 0;
      WTF::fastFree(v12, v4);
    }
  }
}

void sub_196CBFAF0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const char **a10, __int16 a11, int a12, __int16 a13, const char **a14, __int16 a15, int a16, __int16 a17, const char **a18, __int16 a19, int a20,__int16 a21,const char **a22,__int16 a23,int a24,__int16 a25,const char **a26,__int16 a27,WTF *a28,int a29,int a30,char a31,WTF *a32)
{
  WTF::StringImpl *v33;
  WTF *v34;

  WebKit::WebsiteDataStoreParameters::~WebsiteDataStoreParameters((const char ***)&a32, a2);
  if ((_BYTE)a13 && (_BYTE)a11)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a10);
  if ((_BYTE)a17 && (_BYTE)a15)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a14);
  if ((_BYTE)a21 && (_BYTE)a19)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a18);
  if ((_BYTE)a25 && (_BYTE)a23)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a22);
  if (LOBYTE(STACK[0x5B0]))
    WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)&STACK[0x350], v33);
  if ((_BYTE)a27)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a26);
  if (a31)
  {
    v34 = a28;
    if (a28)
    {
      a28 = 0;
      a29 = 0;
      WTF::fastFree(v34, v33);
    }
  }
  _Unwind_Resume(a1);
}

void sub_196CBFBCC()
{
  JUMPOUT(0x196CBFB58);
}

void sub_196CBFBD4()
{
  JUMPOUT(0x196CBFB70);
}

void sub_196CBFBDC()
{
  JUMPOUT(0x196CBFB88);
}

void sub_196CBFBE4()
{
  JUMPOUT(0x196CBFB98);
}

void sub_196CBFBEC()
{
  JUMPOUT(0x196CBFBA8);
}

void sub_196CBFBF4()
{
  JUMPOUT(0x196CBFBC4);
}

uint64_t WebKit::WebProcessCreationParameters::WebProcessCreationParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(a1 + 56) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = 0;
  *(_DWORD *)(a1 + 60) = v10;
  v11 = a2[8];
  if (v11)
    CFRetain(*(CFTypeRef *)(v11 + 8));
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(a1 + 72) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = 0;
  *(_DWORD *)(a1 + 80) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = 0;
  *(_DWORD *)(a1 + 84) = v12;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v13 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(a1 + 88) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = 0;
  *(_DWORD *)(a1 + 96) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 100) = v13;
  *(_QWORD *)(a1 + 112) = 0;
  v14 = a2[13];
  a2[13] = 0;
  *(_QWORD *)(a1 + 104) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = 0;
  *(_DWORD *)(a1 + 112) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = 0;
  *(_DWORD *)(a1 + 116) = v14;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v15 = a2[15];
  a2[15] = 0;
  *(_QWORD *)(a1 + 120) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = 0;
  *(_DWORD *)(a1 + 128) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = 0;
  *(_DWORD *)(a1 + 132) = v15;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v16 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(a1 + 136) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = 0;
  *(_DWORD *)(a1 + 144) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = 0;
  *(_DWORD *)(a1 + 148) = v16;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v17 = a2[19];
  a2[19] = 0;
  *(_QWORD *)(a1 + 152) = v17;
  LODWORD(v17) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = 0;
  *(_DWORD *)(a1 + 160) = v17;
  LODWORD(v17) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = 0;
  *(_DWORD *)(a1 + 164) = v17;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v18 = a2[21];
  a2[21] = 0;
  *(_QWORD *)(a1 + 168) = v18;
  LODWORD(v18) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = 0;
  *(_DWORD *)(a1 + 176) = v18;
  LODWORD(v18) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = 0;
  *(_DWORD *)(a1 + 180) = v18;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v19 = a2[23];
  a2[23] = 0;
  *(_QWORD *)(a1 + 184) = v19;
  LODWORD(v19) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = 0;
  *(_DWORD *)(a1 + 192) = v19;
  LODWORD(v19) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 196) = v19;
  *(_QWORD *)(a1 + 208) = 0;
  v20 = a2[25];
  a2[25] = 0;
  *(_QWORD *)(a1 + 200) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = 0;
  *(_DWORD *)(a1 + 208) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = 0;
  *(_DWORD *)(a1 + 212) = v20;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v21 = a2[27];
  a2[27] = 0;
  *(_QWORD *)(a1 + 216) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = 0;
  *(_DWORD *)(a1 + 224) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = 0;
  *(_DWORD *)(a1 + 228) = v21;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v22 = a2[29];
  a2[29] = 0;
  *(_QWORD *)(a1 + 232) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = 0;
  *(_DWORD *)(a1 + 240) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 244) = v22;
  *(_QWORD *)(a1 + 256) = 0;
  v23 = a2[31];
  a2[31] = 0;
  *(_QWORD *)(a1 + 248) = v23;
  LODWORD(v23) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = 0;
  *(_DWORD *)(a1 + 256) = v23;
  LODWORD(v23) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = 0;
  *(_DWORD *)(a1 + 260) = v23;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v24 = a2[33];
  a2[33] = 0;
  *(_QWORD *)(a1 + 264) = v24;
  LODWORD(v24) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = 0;
  *(_DWORD *)(a1 + 272) = v24;
  LODWORD(v24) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = 0;
  *(_DWORD *)(a1 + 276) = v24;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v25 = a2[35];
  a2[35] = 0;
  *(_QWORD *)(a1 + 280) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = 0;
  *(_DWORD *)(a1 + 288) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = 0;
  *(_DWORD *)(a1 + 292) = v25;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  v26 = a2[37];
  a2[37] = 0;
  *(_QWORD *)(a1 + 296) = v26;
  LODWORD(v26) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = 0;
  *(_DWORD *)(a1 + 304) = v26;
  LODWORD(v26) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = 0;
  *(_DWORD *)(a1 + 308) = v26;
  v27 = *(_OWORD *)(a2 + 39);
  v28 = *(_OWORD *)(a2 + 41);
  *(_WORD *)(a1 + 344) = *((_WORD *)a2 + 172);
  *(_OWORD *)(a1 + 312) = v27;
  *(_OWORD *)(a1 + 328) = v28;
  v29 = a2[44];
  a2[44] = 0;
  *(_QWORD *)(a1 + 352) = v29;
  *(_QWORD *)(a1 + 360) = a2[45];
  v30 = a2[46];
  a2[46] = 0;
  *(_QWORD *)(a1 + 368) = v30;
  *(_DWORD *)(a1 + 376) = *((_DWORD *)a2 + 94);
  WTF::MachSendRight::MachSendRight();
  v31 = a2[48];
  a2[48] = 0;
  *(_QWORD *)(a1 + 384) = v31;
  v32 = a2[49];
  a2[49] = 0;
  *(_QWORD *)(a1 + 392) = v32;
  LOWORD(v32) = *((_WORD *)a2 + 200);
  *(_BYTE *)(a1 + 402) = *((_BYTE *)a2 + 402);
  *(_WORD *)(a1 + 400) = v32;
  v33 = a2[51];
  a2[51] = 0;
  *(_QWORD *)(a1 + 408) = v33;
  *(_QWORD *)(a1 + 416) = 0;
  v34 = a2[52];
  a2[52] = 0;
  *(_QWORD *)(a1 + 416) = v34;
  v35 = a2[53];
  a2[53] = 0;
  *(_QWORD *)(a1 + 424) = v35;
  *(_OWORD *)(a1 + 432) = 0u;
  v36 = a2[54];
  a2[54] = 0;
  *(_QWORD *)(a1 + 432) = v36;
  LODWORD(v36) = *((_DWORD *)a2 + 110);
  *((_DWORD *)a2 + 110) = 0;
  *(_DWORD *)(a1 + 440) = v36;
  LODWORD(v36) = *((_DWORD *)a2 + 111);
  *((_DWORD *)a2 + 111) = 0;
  *(_DWORD *)(a1 + 444) = v36;
  *(_DWORD *)(a1 + 448) = *((_DWORD *)a2 + 112);
  *(_QWORD *)(a1 + 456) = 0;
  v37 = a2[57];
  a2[57] = 0;
  *(_QWORD *)(a1 + 456) = v37;
  *(_BYTE *)(a1 + 464) = *((_BYTE *)a2 + 464);
  std::__optional_move_base<WebKit::WebProcessDataStoreParameters,false>::__optional_move_base[abi:sn180100](a1 + 472, a2 + 59);
  *(_OWORD *)(a1 + 632) = 0u;
  v38 = a2[79];
  a2[79] = 0;
  *(_QWORD *)(a1 + 632) = v38;
  LODWORD(v38) = *((_DWORD *)a2 + 160);
  *((_DWORD *)a2 + 160) = 0;
  *(_DWORD *)(a1 + 640) = v38;
  LODWORD(v38) = *((_DWORD *)a2 + 161);
  *((_DWORD *)a2 + 161) = 0;
  *(_DWORD *)(a1 + 644) = v38;
  *(_BYTE *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  if (*((_BYTE *)a2 + 656))
  {
    v39 = a2[81];
    a2[81] = 0;
    *(_QWORD *)(a1 + 648) = v39;
    *(_BYTE *)(a1 + 656) = 1;
  }
  *(_BYTE *)(a1 + 664) = 0;
  *(_BYTE *)(a1 + 672) = 0;
  if (*((_BYTE *)a2 + 672))
  {
    v40 = a2[83];
    a2[83] = 0;
    *(_QWORD *)(a1 + 664) = v40;
    *(_BYTE *)(a1 + 672) = 1;
  }
  *(_WORD *)(a1 + 680) = *((_WORD *)a2 + 340);
  *(_OWORD *)(a1 + 688) = 0uLL;
  v41 = a2[86];
  a2[86] = 0;
  *(_QWORD *)(a1 + 688) = v41;
  LODWORD(v41) = *((_DWORD *)a2 + 174);
  *((_DWORD *)a2 + 174) = 0;
  *(_DWORD *)(a1 + 696) = v41;
  LODWORD(v41) = *((_DWORD *)a2 + 175);
  *((_DWORD *)a2 + 175) = 0;
  *(_DWORD *)(a1 + 700) = v41;
  *(_DWORD *)(a1 + 704) = *((_DWORD *)a2 + 176);
  *(_QWORD *)(a1 + 712) = 0;
  v42 = a2[89];
  a2[89] = 0;
  *(_QWORD *)(a1 + 712) = v42;
  WebCore::Color::Color();
  v43 = a2[91];
  a2[91] = 0;
  *(_QWORD *)(a1 + 728) = v43;
  v44 = a2[92];
  a2[92] = 0;
  *(_QWORD *)(a1 + 736) = v44;
  v45 = *(_OWORD *)(a2 + 93);
  v46 = *(_OWORD *)(a2 + 95);
  *(_OWORD *)(a1 + 769) = *(_OWORD *)((char *)a2 + 769);
  *(_OWORD *)(a1 + 744) = v45;
  *(_OWORD *)(a1 + 760) = v46;
  v47 = a2[99];
  a2[99] = 0;
  *(_QWORD *)(a1 + 792) = v47;
  *(_QWORD *)(a1 + 800) = 0;
  v48 = a2[100];
  a2[100] = 0;
  *(_QWORD *)(a1 + 800) = v48;
  *(_QWORD *)(a1 + 808) = 0;
  v49 = a2[101];
  a2[101] = 0;
  *(_QWORD *)(a1 + 808) = v49;
  *(_QWORD *)(a1 + 816) = a2[102];
  *(_OWORD *)(a1 + 824) = 0u;
  v50 = a2[103];
  a2[103] = 0;
  *(_QWORD *)(a1 + 824) = v50;
  LODWORD(v50) = *((_DWORD *)a2 + 208);
  *((_DWORD *)a2 + 208) = 0;
  *(_DWORD *)(a1 + 832) = v50;
  LODWORD(v50) = *((_DWORD *)a2 + 209);
  *((_DWORD *)a2 + 209) = 0;
  *(_DWORD *)(a1 + 836) = v50;
  return a1;
}

void sub_196CC0230(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const char ***a11, WTF::MachSendRight *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  const char ***v24;
  const char ***v25;
  const char ***v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char ***v30;
  uint64_t v31;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  const void *v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;

  v33 = *(_QWORD *)(v22 + 712);
  if (v33)
    WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(v33, a2);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, a2);
  if (*(_BYTE *)(v22 + 672))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v26);
  if (*(_BYTE *)(v22 + 656))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v25);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23, v34);
  if (*(_BYTE *)(v22 + 624))
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(v30);
  v36 = *(_QWORD *)(v22 + 456);
  if (v36)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v36, v35);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, v35);
  v38 = *(const void **)(v22 + 424);
  *(_QWORD *)(v22 + 424) = 0;
  if (v38)
    CFRelease(v38);
  v39 = *(WTF::StringImpl ***)(v22 + 416);
  if (v39)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v39, v37);
  v40 = *(_QWORD *)(v22 + 408);
  *(_QWORD *)(v22 + 408) = 0;
  if (v40)
    CFRelease(*(CFTypeRef *)(v40 + 8));
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(a11);
  v42 = *(WTF::StringImpl **)(v22 + 384);
  *(_QWORD *)(v22 + 384) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
  WTF::MachSendRight::~MachSendRight(a12);
  v44 = *(WTF::StringImpl **)(v22 + 368);
  *(_QWORD *)(v22 + 368) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = *(WTF::StringImpl **)(v22 + 352);
  *(_QWORD *)(v22 + 352) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v43);
    else
      *(_DWORD *)v45 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29 + 48, v43);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29 + 32, v46);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29 + 16, v47);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v48);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28, v49);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a13, v50);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a14, v51);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a15, v52);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a16, v53);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a17, v54);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a18, v55);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a19, v56);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a20, v57);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a21, v58);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a22, v59);
  v61 = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(v22 + 64) = 0;
  if (v61)
    CFRelease(*(CFTypeRef *)(v61 + 8));
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(*(_QWORD *)(v31 - 96), v60);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v24);
  v63 = *(WTF::StringImpl **)(v22 + 32);
  *(_QWORD *)(v22 + 32) = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v62);
    else
      *(_DWORD *)v63 -= 2;
  }
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100](*(WTF::StringImpl *****)(v31 - 88), 0);
  v65 = *(WTF::StringImpl **)(v22 + 16);
  *(_QWORD *)(v22 + 16) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v64);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = *(WTF::StringImpl **)(v22 + 8);
  *(_QWORD *)(v22 + 8) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v64);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = *(WTF::StringImpl **)v22;
  *(_QWORD *)v22 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v64);
    else
      *(_DWORD *)v67 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebsiteDataStoreParameters::WebsiteDataStoreParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  v5 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 12) = v4;
  WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters(a1 + 32, (uint64_t)(a2 + 4));
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  if (*((_BYTE *)a2 + 648))
  {
    v6 = a2[80];
    a2[80] = 0;
    *(_QWORD *)(a1 + 640) = v6;
    *(_BYTE *)(a1 + 648) = 1;
  }
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  if (*((_BYTE *)a2 + 664))
  {
    v7 = a2[82];
    a2[82] = 0;
    *(_QWORD *)(a1 + 656) = v7;
    *(_BYTE *)(a1 + 664) = 1;
  }
  *(_BYTE *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  if (*((_BYTE *)a2 + 680))
  {
    v8 = a2[84];
    a2[84] = 0;
    *(_QWORD *)(a1 + 672) = v8;
    *(_BYTE *)(a1 + 680) = 1;
  }
  *(_BYTE *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  if (*((_BYTE *)a2 + 696))
  {
    v9 = a2[86];
    a2[86] = 0;
    *(_QWORD *)(a1 + 688) = v9;
    *(_BYTE *)(a1 + 696) = 1;
  }
  return a1;
}

void sub_196CC05A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  const char ***v2;
  void *v4;
  WTF *v5;

  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v2);
  v5 = *(WTF **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)v1 = 0;
    *(_DWORD *)(v1 + 8) = 0;
    WTF::fastFree(v5, v4);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebProcessDataStoreParameters::WebProcessDataStoreParameters(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = v3;
  v4 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(result + 16) = v4;
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = a2[4];
  v6 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v6;
  v7 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v7;
  *(_BYTE *)(result + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(result + 64) = 0;
  v8 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(result + 64) = v8;
  *(_QWORD *)(result + 72) = 0;
  v9 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(result + 72) = v9;
  v10 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(result + 80) = v10;
  v11 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(result + 88) = v11;
  *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    v12 = a2[12];
    a2[12] = 0;
    *(_QWORD *)(result + 96) = v12;
    *(_BYTE *)(result + 104) = 1;
  }
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    v13 = a2[14];
    a2[14] = 0;
    *(_QWORD *)(result + 112) = v13;
    *(_BYTE *)(result + 120) = 1;
  }
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    v14 = a2[16];
    a2[16] = 0;
    *(_QWORD *)(result + 128) = v14;
    *(_BYTE *)(result + 136) = 1;
  }
  *(_BYTE *)(result + 144) = *((_BYTE *)a2 + 144);
  return result;
}

uint64_t WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  WTF::URL::URL(a1 + 80, (uint64_t *)(a2 + 80));
  WTF::URL::URL(a1 + 120, (uint64_t *)(a2 + 120));
  v9 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v9;
  v10 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v10;
  v11 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 176) = v11;
  v12 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 184) = v12;
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  v13 = *(_BYTE *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 208) = v13;
  *(_BYTE *)(a1 + 232) = 0;
  if (*(_BYTE *)(a2 + 232))
  {
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    v14 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a2 + 216) = 0;
    *(_QWORD *)(a1 + 216) = v14;
    LODWORD(v14) = *(_DWORD *)(a2 + 224);
    *(_DWORD *)(a2 + 224) = 0;
    *(_DWORD *)(a1 + 224) = v14;
    LODWORD(v14) = *(_DWORD *)(a2 + 228);
    *(_DWORD *)(a2 + 228) = 0;
    *(_DWORD *)(a1 + 228) = v14;
    *(_BYTE *)(a1 + 232) = 1;
  }
  v15 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v15;
  v16 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v16;
  v17 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a1 + 288) = v17;
  v18 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a1 + 296) = v18;
  v19 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v19;
  v20 = *(_OWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = v20;
  v21 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a1 + 336) = v21;
  v22 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a1 + 344) = v22;
  v23 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a1 + 352) = v23;
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  v24 = *(_OWORD *)(a2 + 376);
  v25 = *(_OWORD *)(a2 + 392);
  v26 = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 417) = *(_OWORD *)(a2 + 417);
  *(_OWORD *)(a1 + 392) = v25;
  *(_OWORD *)(a1 + 408) = v26;
  *(_OWORD *)(a1 + 376) = v24;
  v27 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = 0;
  *(_QWORD *)(a1 + 440) = v27;
  v28 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = 0;
  *(_QWORD *)(a1 + 448) = v28;
  v29 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a2 + 456) = 0;
  *(_QWORD *)(a1 + 456) = v29;
  v30 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 464) = 0;
  *(_QWORD *)(a1 + 464) = v30;
  v31 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a2 + 472) = 0;
  *(_QWORD *)(a1 + 472) = v31;
  v32 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a2 + 480) = 0;
  *(_QWORD *)(a1 + 480) = v32;
  v33 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a2 + 488) = 0;
  *(_QWORD *)(a1 + 488) = v33;
  v34 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 496) = 0;
  *(_QWORD *)(a1 + 496) = v34;
  v35 = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a2 + 504) = 0;
  *(_QWORD *)(a1 + 504) = v35;
  v36 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 512) = 0;
  *(_QWORD *)(a1 + 512) = v36;
  *(_DWORD *)(a1 + 520) = *(_DWORD *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  if (*(_BYTE *)(a2 + 544))
  {
    *(_QWORD *)(a1 + 528) = 0;
    *(_QWORD *)(a1 + 536) = 0;
    v37 = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a2 + 528) = 0;
    *(_QWORD *)(a1 + 528) = v37;
    LODWORD(v37) = *(_DWORD *)(a2 + 536);
    *(_DWORD *)(a2 + 536) = 0;
    *(_DWORD *)(a1 + 536) = v37;
    LODWORD(v37) = *(_DWORD *)(a2 + 540);
    *(_DWORD *)(a2 + 540) = 0;
    *(_DWORD *)(a1 + 540) = v37;
    *(_BYTE *)(a1 + 544) = 1;
  }
  v38 = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a2 + 552) = 0;
  *(_QWORD *)(a1 + 552) = v38;
  v39 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a2 + 560) = 0;
  *(_QWORD *)(a1 + 560) = v39;
  LODWORD(v39) = *(_DWORD *)(a2 + 568);
  *(_DWORD *)(a1 + 571) = *(_DWORD *)(a2 + 571);
  *(_DWORD *)(a1 + 568) = v39;
  v40 = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a2 + 576) = 0;
  *(_QWORD *)(a1 + 576) = v40;
  *(_QWORD *)(a1 + 584) = 0;
  v41 = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a2 + 584) = 0;
  *(_QWORD *)(a1 + 584) = v41;
  *(_QWORD *)(a1 + 592) = 0;
  v42 = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a2 + 592) = 0;
  *(_QWORD *)(a1 + 592) = v42;
  v43 = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a2 + 600) = 0;
  *(_QWORD *)(a1 + 600) = v43;
  return a1;
}

void sub_196CC09A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  _QWORD *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;
  WTF::StringImpl *v9;

  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)v2[8];
  v2[8] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)v2[7];
  v2[7] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (const void *)v2[6];
  v2[6] = 0;
  if (v8)
    CFRelease(v8);
  v9 = (WTF::StringImpl *)v2[4];
  v2[4] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<true,unsigned char,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196CC0AA8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<true,unsigned char,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;
  char *v5[2];
  char v6;

  result = (uint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5);
  v4 = v6;
  if (v6)
  {
    result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)a2, v5[0], (WTF *)v5[1]);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[16] = v4;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::NetworkSessionCreationParameters>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::NetworkSessionCreationParameters,void>::decode(a1, a2);
  if (!a1[608])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196CC0B74(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WebKit::NetworkSessionCreationParameters *v2;

  if (*((_BYTE *)v2 + 608))
    WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters(v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::WebsitePoliciesData>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::WebsitePoliciesData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 112))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WebKit::WebsitePoliciesData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  WTF::StringImpl *v9;
  int v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned __int16 v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unsigned int v64;
  unsigned __int16 v65;
  unint64_t v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  char v73;
  char v74;
  unint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  char v80;
  char v81;
  unint64_t v82;
  unsigned __int8 *v83;
  unsigned int v84;
  int v85;
  BOOL v86;
  WTF::StringImpl *v87;
  unsigned int v88;
  unsigned int v89;
  WTF::StringImpl *v90;
  unsigned int v91;
  unsigned int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  char v104;
  void *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  char *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  WTF::StringImpl *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  WTF::StringImpl *v202;
  uint64_t v203;
  unsigned __int16 v204;
  unsigned __int16 v205;
  unsigned __int16 v206;
  unsigned __int16 v207;
  uint64_t v208;
  unsigned __int16 v209;
  uint64_t v210;
  void *v211;
  unsigned __int16 v212;
  unsigned __int16 v213;
  unsigned __int16 v214;
  int v215;
  int v216;
  char v217;
  char v218;
  int v219;
  char v220;
  char v221;
  int v222;
  int v223;
  char v224;
  int v225;
  char v226;
  int v227;
  char v228;
  char v229;
  int v230;
  int v231;
  unsigned int v232;
  int v233;
  int v234;
  unsigned int v235;
  WTF::StringImpl **v236;
  char v237;
  WTF::StringImpl *v238;
  __int128 v239;
  unint64_t v240;
  WTF::StringImpl *v241;
  unint64_t v242;
  __int128 v243;
  __int128 v244;
  __int16 v245;
  char v246;
  char v247;
  WTF::StringImpl **v248;
  _BYTE v249[15];
  WTF::StringImpl *v250;
  char v251;
  WTF::StringImpl *v252;
  char v253;
  WTF::StringImpl *v254;
  char v255;
  WTF::StringImpl *v256;
  uint64_t v257;
  char v258;
  WTF::StringImpl *v259;
  unint64_t v260;
  char v261;
  WTF::StringImpl *v262;
  uint64_t v263;

  v2 = a1;
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v126 = 0;
    v127 = 0;
    *a1 = 0;
    a1[1] = 0;
    v128 = a1[3];
    if (v128)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v128 + 16))(v128, v5, v4);
        v127 = *v2;
        v126 = v2[1];
      }
      else
      {
        v126 = 0;
        v127 = 0;
      }
    }
    goto LABEL_187;
  }
  v8 = (int *)(v5 + v6);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v126 = v4;
    v127 = 0;
LABEL_187:
    *v2 = 0;
    v2[1] = 0;
    v129 = v2[3];
    if (v129 && v126)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v127);
LABEL_188:
    v130 = *v2;
    v131 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v132 = v2[3];
    if (v132 && v131)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v132 + 16))(v132, v130);
    v9 = 0;
    v235 = 1;
    goto LABEL_9;
  }
  v9 = 0;
  v10 = *v8;
  v262 = 0;
  if (v10)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(v2, &v256);
      if (!(_BYTE)v257)
        break;
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, v112, (uint64_t)&v239);
      if (!(_BYTE)v240)
        break;
      if (!(_BYTE)v257)
        goto LABEL_161;
      if ((unint64_t)v256 + 1 < 2)
        goto LABEL_360;
      WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)&v262, &v256, (const WTF::StringImpl *)&v239, (uint64_t)&v259);
      if (!v261)
      {
        if (!(_BYTE)v240)
          break;
LABEL_360:
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v239, v112);
        break;
      }
      if ((_BYTE)v240)
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v239, v112);
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v256, (WTF::StringImpl *)v112);
      if (!--v10)
      {
        v9 = v262;
        goto LABEL_8;
      }
    }
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v256, (WTF::StringImpl *)v112);
    if (v262)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v262, v211);
    goto LABEL_188;
  }
LABEL_8:
  v235 = 0;
LABEL_9:
  v238 = v9;
  v11 = IPC::Decoder::decode<unsigned long long>(v2);
  if (!(_BYTE)v12)
    goto LABEL_162;
  v13 = v11;
  v256 = 0;
  v257 = 0;
  if (v11 >= 0x8000)
  {
    do
    {
      IPC::Decoder::decode<WebCore::CustomHeaderFields>((uint64_t)&v239, v2);
      if (!(_BYTE)v242)
      {
LABEL_143:
        LOBYTE(v259) = 0;
        v261 = 0;
        std::__optional_destruct_base<WebCore::CustomHeaderFields,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v239, v105);
        WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v256, v109);
        goto LABEL_163;
      }
      if (HIDWORD(v257) == (_DWORD)v257)
      {
        WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomHeaderFields>((uint64_t)&v256, (unint64_t)&v239);
      }
      else
      {
        v106 = (char *)v256 + 32 * HIDWORD(v257);
        *(_QWORD *)v106 = 0;
        *((_QWORD *)v106 + 1) = 0;
        v107 = v239;
        *(_QWORD *)&v239 = 0;
        *(_QWORD *)v106 = v107;
        LODWORD(v107) = DWORD2(v239);
        DWORD2(v239) = 0;
        *((_DWORD *)v106 + 2) = v107;
        LODWORD(v107) = HIDWORD(v239);
        HIDWORD(v239) = 0;
        *((_DWORD *)v106 + 3) = v107;
        *((_QWORD *)v106 + 2) = 0;
        *((_QWORD *)v106 + 3) = 0;
        v108 = v240;
        v240 = 0;
        *((_QWORD *)v106 + 2) = v108;
        LODWORD(v108) = (_DWORD)v241;
        LODWORD(v241) = 0;
        *((_DWORD *)v106 + 6) = v108;
        LODWORD(v108) = HIDWORD(v241);
        HIDWORD(v241) = 0;
        *((_DWORD *)v106 + 7) = v108;
        ++HIDWORD(v257);
      }
      std::__optional_destruct_base<WebCore::CustomHeaderFields,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v239, v105);
      --v13;
    }
    while (v13);
    WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v256, HIDWORD(v257));
    v202 = v256;
    v256 = 0;
    v259 = v202;
    v15 = v257;
    v14 = HIDWORD(v257);
  }
  else
  {
    if (v11)
    {
      v119 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(32 * v11));
      LODWORD(v257) = v13;
      v256 = v119;
      do
      {
        IPC::Decoder::decode<WebCore::CustomHeaderFields>((uint64_t)&v239, v2);
        if (!(_BYTE)v242)
          goto LABEL_143;
        if (HIDWORD(v257) == (_DWORD)v257)
        {
          WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomHeaderFields>((uint64_t)&v256, (unint64_t)&v239);
        }
        else
        {
          v120 = (char *)v256 + 32 * HIDWORD(v257);
          *(_QWORD *)v120 = 0;
          *((_QWORD *)v120 + 1) = 0;
          v121 = v239;
          *(_QWORD *)&v239 = 0;
          *(_QWORD *)v120 = v121;
          LODWORD(v121) = DWORD2(v239);
          DWORD2(v239) = 0;
          *((_DWORD *)v120 + 2) = v121;
          LODWORD(v121) = HIDWORD(v239);
          HIDWORD(v239) = 0;
          *((_DWORD *)v120 + 3) = v121;
          *((_QWORD *)v120 + 2) = 0;
          *((_QWORD *)v120 + 3) = 0;
          v122 = v240;
          v240 = 0;
          *((_QWORD *)v120 + 2) = v122;
          LODWORD(v122) = (_DWORD)v241;
          LODWORD(v241) = 0;
          *((_DWORD *)v120 + 6) = v122;
          LODWORD(v122) = HIDWORD(v241);
          HIDWORD(v241) = 0;
          *((_DWORD *)v120 + 7) = v122;
          ++HIDWORD(v257);
        }
        std::__optional_destruct_base<WebCore::CustomHeaderFields,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v239, v105);
        --v13;
      }
      while (v13);
      v16 = v256;
      v15 = v257;
      v14 = HIDWORD(v257);
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
    }
    v256 = 0;
    v259 = v16;
  }
  v257 = 0;
  v260 = __PAIR64__(v14, v15);
  v261 = 1;
  WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v256, v12);
  while (1)
  {
    v17 = IPC::Decoder::decode<unsigned long long>(v2);
    if (!(_BYTE)v18)
    {
      LOBYTE(v256) = 0;
      v258 = 0;
      goto LABEL_167;
    }
    v19 = v17;
    v262 = 0;
    v263 = 0;
    if (v17 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::StringImpl *)v2, (uint64_t)&v239);
        if (!(_BYTE)v240)
          goto LABEL_151;
        if (HIDWORD(v263) == (_DWORD)v263)
        {
          WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v262, (unint64_t)&v239);
        }
        else
        {
          v110 = (char *)v262 + 16 * HIDWORD(v263);
          *(_QWORD *)v110 = 0;
          *((_QWORD *)v110 + 1) = 0;
          v111 = v239;
          *(_QWORD *)&v239 = 0;
          *(_QWORD *)v110 = v111;
          LODWORD(v111) = DWORD2(v239);
          DWORD2(v239) = 0;
          *((_DWORD *)v110 + 2) = v111;
          LODWORD(v111) = HIDWORD(v239);
          HIDWORD(v239) = 0;
          *((_DWORD *)v110 + 3) = v111;
          ++HIDWORD(v263);
        }
        if ((_BYTE)v240)
          WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v239, v18);
        if (!--v19)
        {
          WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v262, (WTF::StringImpl *)HIDWORD(v263));
          v256 = v262;
          v203 = v263;
          v262 = 0;
          v263 = 0;
          v257 = v203;
          goto LABEL_20;
        }
      }
    }
    if (v17)
    {
      v123 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v17));
      LODWORD(v263) = v19;
      v262 = v123;
      while (1)
      {
        IPC::Decoder::decode<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::StringImpl *)v2, (uint64_t)&v239);
        if (!(_BYTE)v240)
          break;
        if (HIDWORD(v263) == (_DWORD)v263)
        {
          WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v262, (unint64_t)&v239);
        }
        else
        {
          v124 = (char *)v262 + 16 * HIDWORD(v263);
          *(_QWORD *)v124 = 0;
          *((_QWORD *)v124 + 1) = 0;
          v125 = v239;
          *(_QWORD *)&v239 = 0;
          *(_QWORD *)v124 = v125;
          LODWORD(v125) = DWORD2(v239);
          DWORD2(v239) = 0;
          *((_DWORD *)v124 + 2) = v125;
          LODWORD(v125) = HIDWORD(v239);
          HIDWORD(v239) = 0;
          *((_DWORD *)v124 + 3) = v125;
          ++HIDWORD(v263);
        }
        if ((_BYTE)v240)
          WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v239, v18);
        if (!--v19)
        {
          v20 = v262;
          v21 = v263;
          goto LABEL_19;
        }
      }
LABEL_151:
      LOBYTE(v256) = 0;
      v258 = 0;
      WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v262, v18);
LABEL_167:
      v116 = *v2;
      v117 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v118 = v2[3];
      if (v118 && v117)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v118 + 16))(v118, v116);
      goto LABEL_21;
    }
    v20 = 0;
    v21 = 0;
LABEL_19:
    v262 = 0;
    v263 = 0;
    v256 = v20;
    v257 = v21;
LABEL_20:
    v258 = 1;
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v262, v18);
LABEL_21:
    IPC::Decoder::decode<WTF::String>(v2, &v262);
    IPC::Decoder::decode<WTF::String>(v2, &v254);
    IPC::Decoder::decode<WTF::String>(v2, &v252);
    IPC::Decoder::decode<WTF::String>(v2, &v250);
    v22 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(v2);
    v23 = v2[1];
    v24 = *v2;
    v25 = v2[2] - *v2;
    v234 = v22;
    if (v23 <= v25)
    {
      v133 = 0;
      v134 = 0;
      *v2 = 0;
      v2[1] = 0;
      v135 = v2[3];
      if (v135)
      {
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
          v134 = *v2;
          v133 = v2[1];
        }
        else
        {
          v133 = 0;
          v134 = 0;
        }
      }
      goto LABEL_191;
    }
    v26 = (unsigned __int8 *)(v24 + v25);
    v2[2] = (uint64_t)(v26 + 1);
    if (!v24)
    {
      v133 = v23;
      v134 = 0;
LABEL_191:
      v23 = 0;
      v24 = 0;
      *v2 = 0;
      v2[1] = 0;
      v136 = v2[3];
      if (v136)
      {
        if (v133)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v136 + 16))(v136, v134, v133);
          v24 = *v2;
          v23 = v2[1];
        }
        else
        {
          v23 = 0;
          v24 = 0;
        }
      }
      goto LABEL_192;
    }
    v27 = *v26;
    if (v27 < 0x10)
    {
      v232 = v27 | 0x100;
      goto LABEL_25;
    }
LABEL_192:
    *v2 = 0;
    v2[1] = 0;
    v137 = v2[3];
    if (v137 && v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 16))(v137, v24);
    v232 = 0;
LABEL_25:
    LOWORD(v239) = 0;
    IPC::Decoder::operator>><BOOL>(v2, &v239);
    if (BYTE1(v239))
    {
      v237 = v239;
      IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)v2, &v239);
      if (BYTE8(v239))
      {
        v28 = 0;
        v236 = (WTF::StringImpl **)v239;
        goto LABEL_28;
      }
    }
    else
    {
      v138 = *v2;
      v139 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v140 = v2[3];
      if (v140 && v139)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v140 + 16))(v140, v138);
    }
    v141 = *v2;
    v142 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v143 = v2[3];
    if (v143 && v142)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v143 + 16))(v143, v141);
    v237 = 0;
    v28 = 1;
LABEL_28:
    v29 = v2[1];
    v30 = *v2;
    v31 = v2[2] - *v2;
    v233 = v28;
    if (v29 <= v31)
    {
      v144 = 0;
      v145 = 0;
      *v2 = 0;
      v2[1] = 0;
      v146 = v2[3];
      if (v146)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 16))(v146, v30);
          v145 = *v2;
          v144 = v2[1];
        }
        else
        {
          v144 = 0;
          v145 = 0;
        }
      }
      goto LABEL_198;
    }
    v32 = (unsigned __int8 *)(v30 + v31);
    v2[2] = (uint64_t)(v32 + 1);
    if (!v30)
    {
      v144 = v29;
      v145 = 0;
LABEL_198:
      v29 = 0;
      *v2 = 0;
      v2[1] = 0;
      v147 = v2[3];
      if (v147)
      {
        if (v144)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v147 + 16))(v147, v145, v144);
          v29 = v2[1];
        }
        else
        {
          v29 = 0;
        }
      }
      goto LABEL_199;
    }
    v33 = *v32;
    if (v33 < 4)
    {
      v229 = v33;
      v231 = 0;
      goto LABEL_32;
    }
LABEL_199:
    v148 = *v2;
    *v2 = 0;
    v2[1] = 0;
    v149 = v2[3];
    if (!v149 || !v29)
    {
      v29 = 0;
      v229 = 0;
      v34 = *v2;
      v231 = 1;
LABEL_201:
      *v2 = 0;
      v2[1] = 0;
      v150 = v2[3];
      if (v150)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v150 + 16))(v150, v34);
          v151 = *v2;
          v29 = v2[1];
        }
        else
        {
          v151 = 0;
        }
      }
      else
      {
        v151 = 0;
        v29 = 0;
      }
LABEL_203:
      *v2 = 0;
      v2[1] = 0;
      v152 = v2[3];
      if (v152)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v152 + 16))(v152, v151);
          v29 = v2[1];
        }
      }
      else
      {
        v29 = 0;
      }
      goto LABEL_205;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v149 + 16))(v149, v148);
    v229 = 0;
    v29 = v2[1];
    v231 = 1;
LABEL_32:
    v34 = *v2;
    v35 = v2[2] - *v2;
    if (v29 <= v35)
      goto LABEL_201;
    v36 = (unsigned __int8 *)(v34 + v35);
    v2[2] = (uint64_t)(v36 + 1);
    if (!v34)
    {
      v151 = 0;
      goto LABEL_203;
    }
    v37 = *v36;
    if (v37 < 3)
    {
      v228 = v37;
      v230 = 0;
      goto LABEL_36;
    }
LABEL_205:
    v153 = *v2;
    *v2 = 0;
    v2[1] = 0;
    v154 = v2[3];
    if (!v154 || !v29)
    {
      v29 = 0;
      v228 = 0;
      v38 = *v2;
      v230 = 1;
LABEL_207:
      *v2 = 0;
      v2[1] = 0;
      v155 = v2[3];
      if (v155)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v155 + 16))(v155, v38);
          v156 = *v2;
          v29 = v2[1];
        }
        else
        {
          v156 = 0;
        }
      }
      else
      {
        v156 = 0;
        v29 = 0;
      }
LABEL_209:
      *v2 = 0;
      v2[1] = 0;
      v157 = v2[3];
      if (v157)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v157 + 16))(v157, v156);
          v29 = v2[1];
        }
      }
      else
      {
        v29 = 0;
      }
      goto LABEL_211;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v154 + 16))(v154, v153);
    v228 = 0;
    v29 = v2[1];
    v230 = 1;
LABEL_36:
    v38 = *v2;
    v39 = v2[2] - *v2;
    if (v29 <= v39)
      goto LABEL_207;
    v40 = (unsigned __int8 *)(v38 + v39);
    v2[2] = (uint64_t)(v40 + 1);
    if (!v38)
    {
      v156 = 0;
      goto LABEL_209;
    }
    v41 = *v40;
    if (v41 < 3)
    {
      v226 = v41;
      v227 = 0;
      goto LABEL_40;
    }
LABEL_211:
    v158 = *v2;
    *v2 = 0;
    v2[1] = 0;
    v159 = v2[3];
    if (!v159 || !v29)
    {
      v29 = 0;
      v42 = *v2;
      v226 = 0;
      v227 = 1;
LABEL_213:
      *v2 = 0;
      v2[1] = 0;
      v160 = v2[3];
      if (v160)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v160 + 16))(v160, v42);
          v161 = *v2;
          v29 = v2[1];
        }
        else
        {
          v161 = 0;
        }
      }
      else
      {
        v161 = 0;
        v29 = 0;
      }
LABEL_215:
      *v2 = 0;
      v2[1] = 0;
      v162 = v2[3];
      if (v162)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v162 + 16))(v162, v161);
          v29 = v2[1];
        }
      }
      else
      {
        v29 = 0;
      }
      goto LABEL_217;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v159 + 16))(v159, v158);
    v29 = v2[1];
    v226 = 0;
    v227 = 1;
LABEL_40:
    v42 = *v2;
    v43 = v2[2] - *v2;
    if (v29 <= v43)
      goto LABEL_213;
    v44 = (unsigned __int8 *)(v42 + v43);
    v2[2] = (uint64_t)(v44 + 1);
    if (!v42)
    {
      v161 = 0;
      goto LABEL_215;
    }
    v45 = *v44;
    if (v45 < 3)
    {
      v224 = v45;
      v225 = 0;
      goto LABEL_44;
    }
LABEL_217:
    v163 = *v2;
    *v2 = 0;
    v2[1] = 0;
    v164 = v2[3];
    if (!v164 || !v29)
    {
      v29 = 0;
      v46 = *v2;
      v224 = 0;
      v225 = 1;
LABEL_219:
      *v2 = 0;
      v2[1] = 0;
      v165 = v2[3];
      if (v165)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v165 + 16))(v165, v46);
          v166 = *v2;
          v29 = v2[1];
        }
        else
        {
          v166 = 0;
        }
      }
      else
      {
        v166 = 0;
        v29 = 0;
      }
LABEL_221:
      *v2 = 0;
      v2[1] = 0;
      v167 = v2[3];
      if (v167)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(v167, v166);
          v29 = v2[1];
        }
      }
      else
      {
        v29 = 0;
      }
      goto LABEL_223;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v164 + 16))(v164, v163);
    v29 = v2[1];
    v224 = 0;
    v225 = 1;
LABEL_44:
    v46 = *v2;
    v47 = v2[2] - *v2;
    if (v29 <= v47)
      goto LABEL_219;
    v48 = (unsigned __int8 *)(v46 + v47);
    v2[2] = (uint64_t)(v48 + 1);
    if (!v46)
    {
      v166 = 0;
      goto LABEL_221;
    }
    v49 = *v48;
    if (v49 < 3)
    {
      v221 = v49;
      v223 = 0;
      goto LABEL_48;
    }
LABEL_223:
    v168 = *v2;
    *v2 = 0;
    v2[1] = 0;
    v169 = v2[3];
    if (!v169 || !v29)
    {
      v29 = 0;
      v221 = 0;
      v50 = *v2;
      v223 = 1;
LABEL_225:
      *v2 = 0;
      v2[1] = 0;
      v170 = v2[3];
      if (v170)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v50);
          v171 = *v2;
          v29 = v2[1];
        }
        else
        {
          v171 = 0;
        }
      }
      else
      {
        v171 = 0;
        v29 = 0;
      }
LABEL_227:
      *v2 = 0;
      v2[1] = 0;
      v172 = v2[3];
      if (v172 && v29)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v172 + 16))(v172, v171);
      goto LABEL_228;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v169 + 16))(v169, v168);
    v221 = 0;
    v29 = v2[1];
    v223 = 1;
LABEL_48:
    v50 = *v2;
    v51 = v2[2] - *v2;
    if (v29 <= v51)
      goto LABEL_225;
    v52 = (unsigned __int8 *)(v50 + v51);
    v2[2] = (uint64_t)(v52 + 1);
    if (!v50)
    {
      v171 = 0;
      goto LABEL_227;
    }
    v53 = *v52;
    if (v53 < 3)
    {
      v220 = v53;
      v222 = 0;
      goto LABEL_52;
    }
LABEL_228:
    v173 = *v2;
    v174 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v175 = v2[3];
    if (v175 && v174)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v175 + 16))(v175, v173);
    v220 = 0;
    v222 = 1;
LABEL_52:
    LOWORD(v239) = 0;
    IPC::Decoder::operator>><BOOL>(v2, &v239);
    v219 = BYTE1(v239);
    if (BYTE1(v239))
    {
      v218 = v239;
    }
    else
    {
      v176 = *v2;
      v177 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v178 = v2[3];
      if (v178 && v177)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v178 + 16))(v178, v176);
      v218 = 0;
    }
    v54 = IPC::Decoder::decode<WebCore::PathRoundedRect::Strategy>(v2);
    LOWORD(v239) = 0;
    IPC::Decoder::operator>><BOOL>(v2, &v239);
    v55 = BYTE1(v239);
    v56 = v2[1];
    if (BYTE1(v239))
    {
      v217 = v239;
    }
    else
    {
      v179 = *v2;
      *v2 = 0;
      v2[1] = 0;
      v180 = v2[3];
      if (!v180 || !v56)
      {
        v217 = 0;
        v56 = 0;
        v57 = *v2;
LABEL_234:
        *v2 = 0;
        v2[1] = 0;
        v181 = v2[3];
        if (v181)
        {
          if (v56)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v181 + 16))(v181, v57);
            v182 = *v2;
            v56 = v2[1];
          }
          else
          {
            v182 = 0;
          }
        }
        else
        {
          v182 = 0;
          v56 = 0;
        }
LABEL_236:
        *v2 = 0;
        v2[1] = 0;
        v183 = v2[3];
        if (v183)
        {
          if (v56)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v183 + 16))(v183, v182);
            v56 = v2[1];
          }
        }
        else
        {
          v56 = 0;
        }
        goto LABEL_238;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v180 + 16))(v180, v179);
      v217 = 0;
      v56 = v2[1];
    }
    v57 = *v2;
    v58 = v2[2] - *v2;
    if (v56 <= v58)
      goto LABEL_234;
    v59 = (unsigned __int8 *)(v57 + v58);
    v2[2] = (uint64_t)(v59 + 1);
    if (!v57)
    {
      v182 = 0;
      goto LABEL_236;
    }
    v60 = *v59;
    if (v60 < 3)
    {
      v216 = 0;
      goto LABEL_60;
    }
LABEL_238:
    v184 = *v2;
    *v2 = 0;
    v2[1] = 0;
    v185 = v2[3];
    if (!v185 || !v56)
    {
      v56 = 0;
      LOBYTE(v60) = 0;
      v61 = *v2;
      v216 = 1;
LABEL_240:
      *v2 = 0;
      v2[1] = 0;
      v186 = v2[3];
      if (v186)
      {
        if (v56)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v186 + 16))(v186, v61);
          v187 = *v2;
          v56 = v2[1];
        }
        else
        {
          v187 = 0;
        }
      }
      else
      {
        v187 = 0;
        v56 = 0;
      }
LABEL_242:
      *v2 = 0;
      v2[1] = 0;
      v188 = v2[3];
      if (v188 && v56)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v188 + 16))(v188, v187);
      goto LABEL_243;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v185 + 16))(v185, v184);
    LOBYTE(v60) = 0;
    v56 = v2[1];
    v216 = 1;
LABEL_60:
    v61 = *v2;
    v62 = v2[2] - *v2;
    if (v56 <= v62)
      goto LABEL_240;
    v63 = (unsigned __int8 *)(v61 + v62);
    v2[2] = (uint64_t)(v63 + 1);
    if (!v61)
    {
      v187 = 0;
      goto LABEL_242;
    }
    v64 = *v63;
    if (v64 < 3)
    {
      v215 = 0;
      goto LABEL_64;
    }
LABEL_243:
    v189 = *v2;
    v190 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v191 = v2[3];
    if (v191 && v190)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v191 + 16))(v191, v189);
    LOBYTE(v64) = 0;
    v215 = 1;
LABEL_64:
    v65 = IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>(v2);
    v66 = v2[1];
    v67 = (WTF::StringImpl *)*v2;
    v68 = v2[2] - *v2;
    if (v66 <= v68)
    {
      v192 = 0;
      v193 = 0;
      *v2 = 0;
      v2[1] = 0;
      v194 = v2[3];
      if (v194)
      {
        v207 = v65;
        if (v66)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v194 + 16))(v2[3]);
          v193 = *v2;
          v192 = v2[1];
        }
        else
        {
          v192 = 0;
          v193 = 0;
        }
        v65 = v207;
      }
      goto LABEL_246;
    }
    v69 = (unsigned __int8 *)v67 + v68;
    v70 = (uint64_t)v67 + v68 + 1;
    v2[2] = v70;
    if (!v67)
    {
      v192 = v66;
      v193 = 0;
LABEL_246:
      *v2 = 0;
      v2[1] = 0;
      v195 = v2[3];
      if (v195)
      {
        v205 = v65;
        if (v192)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v195 + 16))(v2[3], v193, v192);
          v71 = 0;
          v67 = (WTF::StringImpl *)*v2;
          v66 = v2[1];
        }
        else
        {
          v66 = 0;
          v67 = 0;
          v71 = 0;
        }
        v65 = v205;
      }
      else
      {
        v66 = 0;
        v67 = 0;
        v71 = 0;
      }
      goto LABEL_248;
    }
    v71 = *v69;
    if (v71 < 2)
    {
      v72 = 0;
      v73 = 1;
      goto LABEL_68;
    }
LABEL_248:
    *v2 = 0;
    v2[1] = 0;
    v196 = v2[3];
    if (!v196)
    {
      v74 = 0;
      v67 = 0;
      v72 = 1;
      goto LABEL_250;
    }
    v204 = v65;
    if (!v66)
    {
      v74 = 0;
      v196 = 0;
      v67 = 0;
      v72 = 1;
LABEL_250:
      *v2 = 0;
      v2[1] = 0;
      v197 = v2[3];
      if (v197)
      {
        v206 = v65;
        if (v196)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v197 + 16))(v2[3], v67, v196);
          v78 = 0;
          v67 = (WTF::StringImpl *)*v2;
          v66 = v2[1];
        }
        else
        {
          v66 = 0;
          v67 = 0;
          v78 = 0;
        }
        v65 = v206;
      }
      else
      {
        v66 = 0;
        v67 = 0;
        v78 = 0;
      }
      goto LABEL_252;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v196 + 16))(v2[3], v67);
    v73 = 0;
    v67 = (WTF::StringImpl *)*v2;
    v66 = v2[1];
    v72 = 1;
    v70 = v2[2];
    v65 = v204;
LABEL_68:
    if (v71)
      v74 = v73;
    else
      v74 = 0;
    v75 = v70 - (_QWORD)v67;
    if (v66 <= v75)
    {
      v209 = v65;
      v196 = 0;
      v210 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v210 && v66)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v210 + 16))(v210);
        v67 = (WTF::StringImpl *)*v2;
        v196 = v2[1];
      }
      else
      {
        v67 = 0;
      }
      v65 = v209;
      goto LABEL_250;
    }
    v76 = (unsigned __int8 *)v67 + v75;
    v77 = (uint64_t)v67 + v75 + 1;
    v2[2] = v77;
    if (!v67)
    {
      v196 = v66;
      goto LABEL_250;
    }
    v78 = *v76;
    if (v78 < 2)
    {
      v79 = 0;
      v80 = 1;
      goto LABEL_75;
    }
LABEL_252:
    *v2 = 0;
    v2[1] = 0;
    v198 = v2[3];
    if (!v198)
    {
      v81 = 0;
      v67 = 0;
      v79 = 1;
      goto LABEL_254;
    }
    v212 = v65;
    if (!v66)
    {
      v81 = 0;
      v198 = 0;
      v67 = 0;
      v79 = 1;
LABEL_354:
      v65 = v212;
      goto LABEL_254;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v198 + 16))(v198, v67);
    v80 = 0;
    v67 = (WTF::StringImpl *)*v2;
    v66 = v2[1];
    v79 = 1;
    v77 = v2[2];
    v65 = v212;
LABEL_75:
    if (v78)
      v81 = v80;
    else
      v81 = 0;
    v82 = v77 - (_QWORD)v67;
    if (v66 <= v82)
    {
      v212 = v65;
      v198 = 0;
      v208 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v208 && v66)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v208 + 16))(v208);
        v67 = (WTF::StringImpl *)*v2;
        v198 = v2[1];
      }
      else
      {
        v67 = 0;
      }
      goto LABEL_354;
    }
    v83 = (unsigned __int8 *)v67 + v82;
    v2[2] = (uint64_t)(v83 + 1);
    if (!v67)
      break;
    v84 = *v83;
    if (v84 > 1)
      goto LABEL_256;
    v85 = 0;
    v86 = v84 != 0;
LABEL_82:
    v2 = (uint64_t *)v235;
    if (!v235)
    {
      *(_QWORD *)&v239 = v238;
      if (v261)
      {
        v87 = v259;
        *((_QWORD *)&v239 + 1) = v259;
        v88 = v260;
        v89 = HIDWORD(v260);
        v259 = 0;
        v260 = 0;
        v240 = __PAIR64__(v89, v88);
        if (v258)
        {
          v90 = v256;
          v241 = v256;
          v91 = v257;
          v92 = HIDWORD(v257);
          v256 = 0;
          v257 = 0;
          v242 = __PAIR64__(v92, v91);
          if ((_BYTE)v263)
          {
            v93 = v262;
            v262 = 0;
            *(_QWORD *)&v243 = v93;
            if (v255)
            {
              v94 = v254;
              v254 = 0;
              *((_QWORD *)&v243 + 1) = v94;
              if (v253)
              {
                v95 = v252;
                v252 = 0;
                *(_QWORD *)&v244 = v95;
                if (v251)
                {
                  v96 = v250;
                  v250 = 0;
                  *((_QWORD *)&v244 + 1) = v96;
                  if ((v234 & 0xFF0000) != 0)
                  {
                    v245 = v234;
                    if (v232 > 0xFF)
                    {
                      v246 = v232;
                      if (!v233)
                      {
                        v247 = v237;
                        v248 = v236;
                        if (!v231)
                        {
                          v249[0] = v229;
                          if (!v230)
                          {
                            v249[1] = v228;
                            if (!v227)
                            {
                              v249[2] = v226;
                              if (!v225)
                              {
                                v249[3] = v224;
                                if (!v223)
                                {
                                  v249[4] = v221;
                                  if (!v222)
                                  {
                                    v249[5] = v220;
                                    if (v219)
                                    {
                                      v249[6] = v218;
                                      if (v54 > 0xFFu)
                                      {
                                        v249[7] = v54;
                                        if (v55)
                                        {
                                          v249[8] = v217;
                                          if (!v216)
                                          {
                                            v249[9] = v60;
                                            if (!v215)
                                            {
                                              v249[10] = v64;
                                              if (v65 > 0xFFu)
                                              {
                                                v249[11] = v65;
                                                if (!v72)
                                                {
                                                  v249[12] = v74;
                                                  if (!v79)
                                                  {
                                                    v249[13] = v81;
                                                    if (!v85)
                                                    {
                                                      v249[14] = v86;
                                                      v239 = 0u;
                                                      *(_QWORD *)a2 = v238;
                                                      *(_QWORD *)(a2 + 8) = v87;
                                                      v240 = 0;
                                                      *(_DWORD *)(a2 + 16) = v88;
                                                      *(_DWORD *)(a2 + 20) = v89;
                                                      v241 = 0;
                                                      *(_QWORD *)(a2 + 24) = v90;
                                                      v242 = 0;
                                                      *(_DWORD *)(a2 + 32) = v91;
                                                      *(_DWORD *)(a2 + 36) = v92;
                                                      v243 = 0u;
                                                      *(_QWORD *)(a2 + 40) = v93;
                                                      *(_QWORD *)(a2 + 48) = v94;
                                                      v244 = 0u;
                                                      *(_QWORD *)(a2 + 56) = v95;
                                                      *(_QWORD *)(a2 + 64) = v96;
                                                      v97 = v245;
                                                      *(_BYTE *)(a2 + 74) = v246;
                                                      *(_WORD *)(a2 + 72) = v97;
                                                      *(_BYTE *)(a2 + 80) = v237;
                                                      v248 = 0;
                                                      v98 = *(_QWORD *)v249;
                                                      *(_QWORD *)(a2 + 88) = v236;
                                                      *(_QWORD *)(a2 + 96) = v98;
                                                      *(_QWORD *)(a2 + 103) = *(_QWORD *)&v249[7];
                                                      *(_BYTE *)(a2 + 112) = 1;
                                                      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v239, v95);
                                                      v99 = 0;
                                                      goto LABEL_108;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_161:
    __break(1u);
LABEL_162:
    LOBYTE(v259) = 0;
    v261 = 0;
LABEL_163:
    v113 = *v2;
    v114 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v115 = v2[3];
    if (v115 && v114)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 16))(v115, v113);
  }
  v198 = v66;
LABEL_254:
  *v2 = 0;
  v2[1] = 0;
  v199 = v2[3];
  if (v199)
  {
    v214 = v65;
    if (v198)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v199 + 16))(v199, v67, v198);
      v67 = (WTF::StringImpl *)*v2;
      v66 = v2[1];
    }
    else
    {
      v66 = 0;
      v67 = 0;
    }
    v65 = v214;
  }
  else
  {
    v66 = 0;
    v67 = 0;
  }
LABEL_256:
  *v2 = 0;
  v2[1] = 0;
  v200 = v2[3];
  if (v200)
  {
    if (v66)
    {
      v213 = v65;
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v200 + 16))(v200, v67);
      v65 = v213;
      if (*v2)
      {
        v86 = 0;
        v85 = 1;
        goto LABEL_82;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 112) = 0;
  v201 = v233;
  if (!v236)
    v201 = 1;
  if ((v201 & 1) == 0)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v236, v67);
  LOBYTE(v2) = v235;
  v99 = (uint64_t)v238;
LABEL_108:
  if (v251)
  {
    v100 = v250;
    v250 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
        WTF::StringImpl::destroy(v100, v67);
      else
        *(_DWORD *)v100 -= 2;
    }
  }
  if (v253)
  {
    v101 = v252;
    v252 = 0;
    if (v101)
    {
      if (*(_DWORD *)v101 == 2)
        WTF::StringImpl::destroy(v101, v67);
      else
        *(_DWORD *)v101 -= 2;
    }
  }
  if (v255)
  {
    v102 = v254;
    v254 = 0;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
        WTF::StringImpl::destroy(v102, v67);
      else
        *(_DWORD *)v102 -= 2;
    }
  }
  if ((_BYTE)v263)
  {
    v103 = v262;
    v262 = 0;
    if (v103)
    {
      if (*(_DWORD *)v103 == 2)
        WTF::StringImpl::destroy(v103, v67);
      else
        *(_DWORD *)v103 -= 2;
    }
  }
  if (v258)
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v256, v67);
  if (v261)
    WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v259, v67);
  if (v99)
    v104 = (char)v2;
  else
    v104 = 1;
  if ((v104 & 1) == 0)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v99, v67);
}

void sub_196CC21C8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, int a20,char a21,WTF::StringImpl **a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  if (!a22)
    a19 = 1;
  if ((a19 & 1) == 0)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a22, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v24 - 200, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v24 - 184, v27);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v24 - 168, v28);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v24 - 104, v29);
  if (*(_BYTE *)(v24 - 136))
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v24 - 152, v30);
  if (*(_BYTE *)(v24 - 112))
    WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v24 - 128, v30);
  if (!a24)
    a21 = 1;
  if ((a21 & 1) == 0)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a24, v30);
  _Unwind_Resume(a1);
}

void WebKit::WebsitePoliciesData::~WebsitePoliciesData(WebKit::WebsitePoliciesData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;
  void *v9;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 11);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, v8);
  if (*(_QWORD *)this)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(_QWORD *)this, v9);
}

uint64_t WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::CustomHeaderFields>::destruct(*(_QWORD *)a1, (void *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<WebCore::PathRoundedRect::Strategy,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v8 = v1;
    v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11 && v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 >= 2)
  {
LABEL_8:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t WebKit::WebUserContentController::forEachUserStyleSheet(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(result + 80);
  if (!v3)
  {
    v4 = 0;
    LODWORD(v5) = 0;
LABEL_3:
    v6 = v3 + 24 * v5;
    goto LABEL_4;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v6 = v3 + 24 * v5;
  if (!*(_DWORD *)(v3 - 12))
  {
    v4 = v3 + 24 * v5;
    goto LABEL_3;
  }
  v4 = *(_QWORD *)(result + 80);
  if ((_DWORD)v5)
  {
    v12 = 24 * v5;
    v4 = *(_QWORD *)(result + 80);
    while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
    {
      v4 += 24;
      v12 -= 24;
      if (!v12)
      {
        v4 = v6;
        break;
      }
    }
  }
LABEL_4:
  if (v3)
    v7 = v3 + 24 * *(unsigned int *)(v3 - 4);
  else
    v7 = 0;
  while (v4 != v7)
  {
    v8 = *(unsigned int *)(v4 + 20);
    if ((_DWORD)v8)
    {
      v9 = 120 * v8;
      v10 = *(_QWORD *)(v4 + 8) + 16;
      do
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v10);
        v10 += 120;
        v9 -= 120;
      }
      while (v9);
    }
    v11 = v4 + 24;
    v4 = v6;
    if (v11 != v6)
    {
      v4 = v11;
      while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
      {
        v4 += 24;
        if (v4 == v6)
        {
          v4 = v6;
          break;
        }
      }
    }
  }
  return result;
}

void ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke_2()
{
  if (qword_1EE341878 != -1)
    dispatch_once(&qword_1EE341878, &__block_literal_global_124);
}

uint64_t WebKit::WebPlatformStrategies::createLoaderStrategy(WebKit::WebPlatformStrategies *this)
{
  WebKit::WebProcess *v1;

  v1 = WebKit::WebProcess::singleton(this);
  return WebKit::WebProcess::webLoaderStrategy(v1);
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(WebKit::RemoteDisplayListRecorderProxy *this, WebCore::NativeImage *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  WebKit::RemoteResourceCacheProxy::recordNativeImageUse((WebKit::RemoteResourceCacheProxy *)(v3 + 64), a2);
  return 1;
}

WTF::MachSendRight *WebKit::RemoteResourceCacheProxy::recordNativeImageUse(WebKit::RemoteResourceCacheProxy *this, WebCore::NativeImage *a2)
{
  WTF::MachSendRight *result;
  uint64_t v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  WTF::ThreadSafeWeakPtrControlBlock *v13;
  int v14;
  WebCore::NativeImageBackend *v15;
  WebKit::RemoteNativeImageBackendProxy *v16;
  WTF::ThreadSafeWeakPtrControlBlock *v17;
  void *v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  WebKit::WebProcess *v21;
  uint64_t v22;
  WTF::ThreadSafeWeakPtrControlBlock *v23[2];
  _QWORD v24[9];
  WebCore::NativeImageBackend *v25[8];
  char v26;
  WTF::ThreadSafeWeakPtrControlBlock *v27;

  result = (WTF::MachSendRight *)WTF::isMainRunLoop(this);
  if ((_DWORD)result)
  {
    {
      result = (WTF::MachSendRight *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      result = WebKit::WebProcess::WebProcess(v21);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
    }
    if (*((_BYTE *)result + 584))
      goto LABEL_28;
  }
  while (1)
  {
    if (!*((_BYTE *)a2 + 40))
      goto LABEL_27;
    v6 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)a2 + 4);
    v27 = v6;
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v7 + 24 * v12);
      if (v13 == v6)
        return result;
      v14 = 1;
      while (v13)
      {
        v12 = (v12 + v14) & v8;
        v13 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v7 + 24 * v12);
        ++v14;
        if (v13 == v6)
          return result;
      }
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 6) + 48))(*((_QWORD *)a2 + 6), v5))
    {
      LOBYTE(v25[0]) = 0;
      v26 = 0;
      v16 = 0;
    }
    else
    {
      WebKit::RemoteNativeImageBackendProxy::create(v25);
      v15 = v25[0];
      LOBYTE(v25[0]) = 0;
      v26 = 0;
      v16 = v15;
      if (!v15)
        return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v25);
    }
    WebCore::ShareableBitmap::createHandle();
    std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>((WTF::MachSendRight *)v25, (uint64_t)v24);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v24);
    if (!v26)
      break;
    v17 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)a2 + 1);
    if (v17)
      v17 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v17);
    v23[0] = v17;
    v23[1] = a2;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::add<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>((uint64_t *)this + 3, (uint64_t *)&v27, (uint64_t *)v23, (uint64_t)v24);
    v19 = (unsigned __int8 *)v23[0];
    v23[0] = 0;
    if (v19)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v19, v18);
    result = (WTF::MachSendRight *)WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderingResourceObserver>((uint64_t)a2 + 16, this, (uint64_t)v24);
    if (v26)
    {
      result = (WTF::MachSendRight *)WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
      if (v16)
      {
        WebCore::NativeImage::replaceBackend();
        result = (WTF::MachSendRight *)(*(uint64_t (**)(WebKit::RemoteNativeImageBackendProxy *))(*(_QWORD *)v16 + 8))(v16);
      }
      if (v26)
      {
        v20 = (uint64_t *)*((_QWORD *)this + 7);
        v23[0] = v27;
        v24[0] = v25;
        v24[1] = v23;
        WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheNativeImage,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((WebKit::RemoteRenderingBackendProxy *)v20, (uint64_t)v24, v20[7]);
        return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v25);
      }
    }
LABEL_27:
    __break(1u);
LABEL_28:
    result = (WTF::MachSendRight *)WebCore::DeferrableOneShotTimer::restart((uint64_t)result + 520);
  }
  result = std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v25);
  if (v16)
  {
    WebKit::RemoteNativeImageBackendProxy::~RemoteNativeImageBackendProxy(v16);
    return (WTF::MachSendRight *)MEMORY[0x19AEB936C](v22, 0xE1C409BEC7236);
  }
  return result;
}

void IPC::Decoder::decode<std::optional<WebCore::DestinationColorSpace>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebCore::DestinationColorSpace>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::optional<WebCore::DestinationColorSpace>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        a1 = v15;
        v10 = *v15;
        v9 = v15[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        a1 = v14;
        v4 = *v14;
        v3 = v14[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::DestinationColorSpace>(a1, (uint64_t)&v16);
      v8 = v17;
      if (v17)
      {
        *(_QWORD *)a2 = v16;
        v8 = 1;
        *(_BYTE *)(a2 + 8) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 16) = v8;
    return;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13 && v3)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
}

void WebKit::PageClientImpl::clearAllEditCommands(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend((id)objc_msgSend(WeakRetained, "undoManager"), "removeAllActionsWithTarget:", this[6]);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196CC2B84(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::RemoteScrollingCoordinatorTransaction,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  char *v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  int v43;
  char i;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;

  v4 = a1[1];
  v5 = (char *)*a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v23 = 0;
    v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v24 = *a1;
        v23 = a1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
    goto LABEL_25;
  }
  v7 = &v5[v6];
  v8 = (uint64_t)&v5[v6 + 1];
  a1[2] = v8;
  if (!v5)
  {
    v23 = v4;
    v24 = 0;
LABEL_25:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
        v5 = (char *)*a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_26;
  }
  if (*v7 >= 2u)
  {
LABEL_26:
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27 && v4)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v27 + 16))(v27, v5);
LABEL_83:
    LOBYTE(v65) = 0;
    v66 = 0;
    v54 = *a1;
    v55 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v56 = a1[3];
    if (v56 && v55)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v54);
    v17 = 0;
    v10 = 1;
    goto LABEL_55;
  }
  if (*v7)
  {
    if (v4 <= v8 - (uint64_t)v5)
    {
      *a1 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v4 = 0;
        v59 = *a1;
        v60 = a1[1];
        v61 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        v5 = 0;
        if (v61 && v60)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v59, v60);
          v5 = (char *)*a1;
          v4 = a1[1];
        }
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    else
    {
      v9 = (unsigned __int8 *)(v7 + 2);
      a1[2] = (uint64_t)(v7 + 2);
      if (v7[1] < 2u)
      {
        v10 = 0;
        goto LABEL_8;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (!v29 || !v4)
    {
      v30 = 0;
      v5 = 0;
      v10 = 1;
      goto LABEL_33;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v29 + 16))(v29, v5);
    v5 = (char *)*a1;
    v4 = a1[1];
    v10 = 1;
    v9 = (unsigned __int8 *)a1[2];
LABEL_8:
    v11 = v9 - (unsigned __int8 *)v5;
    if (v4 <= v11)
    {
      v30 = 0;
      v57 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v4 && v57)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
        v5 = (char *)*a1;
        v30 = a1[1];
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v12 = &v5[v11];
      v13 = (uint64_t)&v5[v11 + 1];
      a1[2] = v13;
      if (v5)
      {
        v14 = *v12;
        if (v14 < 2)
        {
          v15 = 0;
          v16 = 1;
          goto LABEL_12;
        }
LABEL_35:
        *a1 = 0;
        a1[1] = 0;
        v32 = a1[3];
        if (v32)
        {
          if (v4)
          {
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v32 + 16))(v32, v5);
            v16 = 0;
            v5 = (char *)*a1;
            v4 = a1[1];
            v15 = 1;
            v13 = a1[2];
LABEL_12:
            if (v14)
              v17 = v16;
            else
              v17 = 0;
            v18 = v13 - (_QWORD)v5;
            if (v4 <= v18)
            {
              v58 = a1[3];
              *a1 = 0;
              a1[1] = 0;
              if (v58)
              {
                if (v4)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
                  v33 = *a1;
                  v4 = a1[1];
                }
                else
                {
                  v33 = 0;
                }
              }
              else
              {
                v33 = 0;
                v4 = 0;
              }
            }
            else
            {
              v19 = &v5[v18];
              a1[2] = (uint64_t)(v19 + 1);
              if (v5)
              {
                v20 = *v19;
                if (v20 < 2)
                {
                  if (!v20)
                  {
                    v21 = 0;
                    v71 = 0;
                    goto LABEL_23;
                  }
                  IPC::ArgumentCoder<WebCore::ScrollingStateFrameScrollingNode,void>::decode(&v62, a1);
                  LOBYTE(v71) = 0;
                  v72 = 0;
                  if ((_BYTE)v63)
                  {
                    v21 = 0;
                    v71 = v62;
LABEL_23:
                    v22 = 1;
                    v72 = 1;
                    goto LABEL_44;
                  }
LABEL_42:
                  v5 = (char *)*a1;
                  v4 = a1[1];
                  *a1 = 0;
                  a1[1] = 0;
                  v36 = a1[3];
                  if (v36 && v4)
                    (*(void (**)(uint64_t, char *))(*(_QWORD *)v36 + 16))(v36, v5);
                  v22 = 0;
                  v21 = 1;
LABEL_44:
                  if (*a1)
                  {
                    if (v10 || v15 || v21)
                      goto LABEL_70;
                    WebCore::ScrollingStateTree::createAfterReconstruction();
                    if (!v72)
                    {
LABEL_51:
                      if (v70
                        || (v51 = *a1, v52 = a1[1], *a1 = 0, a1[1] = 0, (v53 = a1[3]) != 0)
                        && v52
                        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51), v70))
                      {
                        v38 = WTF::fastMalloc((WTF *)0x50);
                        WebCore::ScrollingStateTree::ScrollingStateTree();
                        v65 = v38;
                        v66 = 1;
                        if (v70)
                          MEMORY[0x19AEB00FC](&v67);
                        v10 = 0;
                        v17 = 1;
                        goto LABEL_55;
                      }
                      goto LABEL_83;
                    }
                  }
                  else
                  {
                    LOBYTE(v67) = 0;
                    v70 = 0;
                    if (!v22)
                      goto LABEL_51;
                  }
                  v37 = v71;
                  v71 = 0;
                  if (v37)
                    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v37 + 8), v5);
                  goto LABEL_51;
                }
LABEL_40:
                *a1 = 0;
                a1[1] = 0;
                v35 = a1[3];
                if (v35 && v4)
                  (*(void (**)(uint64_t, char *))(*(_QWORD *)v35 + 16))(v35, v5);
                LOBYTE(v71) = 0;
                v72 = 0;
                goto LABEL_42;
              }
              v33 = 0;
            }
LABEL_38:
            *a1 = 0;
            a1[1] = 0;
            v34 = a1[3];
            if (v34)
            {
              if (v4)
              {
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v33);
                v5 = (char *)*a1;
                v4 = a1[1];
              }
              else
              {
                v5 = 0;
              }
            }
            else
            {
              v5 = 0;
              v4 = 0;
            }
            goto LABEL_40;
          }
          v17 = 0;
        }
        else
        {
          v17 = 0;
          v4 = 0;
        }
        v33 = 0;
        *a1 = 0;
        a1[1] = 0;
        v15 = 1;
        goto LABEL_38;
      }
      v30 = v4;
    }
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (v31 && v30)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v31 + 16))(v31, v5, v30);
      v14 = 0;
      v5 = (char *)*a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v14 = 0;
    }
    goto LABEL_35;
  }
  v10 = 0;
  v65 = 0;
  v17 = 1;
  v66 = 1;
LABEL_55:
  v4 = a1[1];
  v39 = *a1;
  v40 = a1[2] - *a1;
  if (v4 <= v40)
    goto LABEL_71;
  v41 = (unsigned __int8 *)(v39 + v40);
  a1[2] = (uint64_t)(v41 + 1);
  if (!v39)
  {
    v46 = v4;
    v47 = 0;
    goto LABEL_72;
  }
  v42 = *v41;
  if (v42 >= 2)
    goto LABEL_74;
  v43 = 0;
  for (i = 1; ; i = 0)
  {
    v45 = v42 ? i : 0;
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v62);
    if (!*a1)
      break;
    if (!v10 && !v43 && v64)
    {
      WebKit::RemoteScrollingCoordinatorTransaction::RemoteScrollingCoordinatorTransaction(&v67, &v65, v45, v62, v63, 1);
      *(_QWORD *)a2 = v67;
      *(_OWORD *)(a2 + 8) = v68;
      *(_QWORD *)(a2 + 24) = v69;
      *(_BYTE *)(a2 + 32) = 1;
      if (!v66)
        return;
      goto LABEL_67;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    v46 = 0;
    v47 = 0;
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (v48)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
        v47 = *a1;
        v46 = a1[1];
      }
      else
      {
        v46 = 0;
        v47 = 0;
      }
    }
LABEL_72:
    *a1 = 0;
    a1[1] = 0;
    v49 = a1[3];
    if (v49 && v46)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v47, v46);
      v42 = 0;
      v39 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v39 = 0;
      v42 = 0;
    }
LABEL_74:
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (v50 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v39);
    v43 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (!v17)
    return;
LABEL_67:
  if (v65)
    WebCore::ScrollingStateTree::operator delete(v65, 0x50uLL);
}

void sub_196CC322C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
    MEMORY[0x19AEB00FC](&a14);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, (uint64_t)a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  char v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v8);
  v6 = v9;
  if (!v9)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_4;
  }
  if (*((_BYTE *)a2 + 8))
  {
    v7 = *a2;
    *a2 = 0;
    *(_QWORD *)a3 = v7;
    *(_OWORD *)(a3 + 8) = v8;
    v6 = 1;
LABEL_4:
    *(_BYTE *)(a3 + 24) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::LaunchServicesDatabaseManager::handleEvent(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result;
  xpc_object_t value;
  NSObject *v6;
  int v7;
  xpc_object_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)xpc_dictionary_get_string(xdict, "message-name");
  if (result)
  {
    result = strcmp("update-launch-services-database-message", (const char *)result);
    if (!(_DWORD)result)
    {
      value = xpc_dictionary_get_value(xdict, "launch-services-database");
      v6 = qword_1ECE71320;
      if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 134217984;
        v8 = value;
        _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Received Launch Services database %p", (uint8_t *)&v7, 0xCu);
      }
      if (value)
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA58C0], "sharedDatabaseContext"), "observeDatabaseChange4WebKit:", value);
      result = WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(a1 + 25));
      atomic_store(1u, (unsigned __int8 *)(a1 + 24));
    }
  }
  return result;
}

void WebKit::LaunchServicesDatabaseObserver::handleEvent(uint64_t a1, void *a2, id a3)
{
  const char *string;
  id v7;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;

  if (object_getClass(a3) == (Class)MEMORY[0x1E0C81310])
  {
    if (a3 != (id)MEMORY[0x1E0C81260] && a3 != (id)MEMORY[0x1E0C81288])
      return;
    v9 = (unsigned __int8 *)(a1 + 40);
    if (__ldaxr((unsigned __int8 *)(a1 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
LABEL_18:
      v11 = *(unsigned int *)(a1 + 60);
      if ((_DWORD)v11)
      {
        v12 = 0;
        while (*(void **)(*(_QWORD *)(a1 + 48) + 8 * v12) != a2)
        {
          if (v11 == ++v12)
            goto LABEL_24;
        }
        WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t *)(a1 + 48), v12);
      }
LABEL_24:
      v13 = __ldxr(v9);
      if (v13 == 1)
      {
        if (!__stlxr(0, v9))
          return;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 40));
      return;
    }
    MEMORY[0x19AEABB3C](a1 + 40);
    goto LABEL_18;
  }
  if (object_getClass(a3) == (Class)MEMORY[0x1E0C812F8])
  {
    string = xpc_dictionary_get_string(a3, "message-name");
    if (string)
    {
      if (!strcmp("request-launch-services-database-update-message", string))
      {
        v14 = a2;
        if (a2)
          v7 = a2;
        WebKit::LaunchServicesDatabaseObserver::startObserving(a1, &v14);
        if (v14)

      }
    }
  }
}

void sub_196CC3868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

void WebKit::LaunchServicesDatabaseObserver::startObserving(uint64_t a1, void **a2)
{
  unsigned __int8 *v4;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD *v12;
  void *v13;
  id v14;

  v4 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](a1 + 40);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = (_QWORD *)(a1 + 48);
  v7 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 56))
  {
    WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>&>((uint64_t)v6, (unint64_t)a2);
  }
  else
  {
    v13 = *a2;
    *(_QWORD *)(*v6 + 8 * v7) = *a2;
    if (v13)
    {
      v14 = v13;
      LODWORD(v7) = *(_DWORD *)(a1 + 60);
    }
    *(_DWORD *)(a1 + 60) = v7 + 1;
  }
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v4))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v9 = (void *)objc_msgSend(MEMORY[0x1E0CA58C0], "sharedDatabaseContext");
  v10 = *a2;
  if (v10)
    v11 = v10;
  v12 = malloc_type_malloc(0x28uLL, 0x10E004086F20DB1uLL);
  *v12 = MEMORY[0x1E0C809A0];
  v12[1] = 50331650;
  v12[2] = WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*,NSError *)>::fromCallable<WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0>(WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*,NSError *)#1}::__invoke;
  v12[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*,NSError *)>::fromCallable<WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0>(WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0)::descriptor;
  v12[4] = v10;
  objc_msgSend(v9, "getSystemContentDatabaseObject4WebKit:", v12);
  _Block_release(v12);
}

void sub_196CC39A8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_196CC39E8()
{
  void *v0;

  if (v0)

  JUMPOUT(0x196CC39E0);
}

void **WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>&>(uint64_t a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  void *v5;

  result = (void **)WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *result;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  if (v5)
  {
    result = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  WTF *v9;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = 8 * v5;
        v8 = (_QWORD *)result;
        v9 = v4;
        do
        {
          *v8++ = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          v9 = (WTF *)((char *)v9 + 8);
          v7 -= 8;
        }
        while (v7);
      }
      if (v4)
      {
        if ((WTF *)result == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebChromeClient::shouldUseTiledBackingForFrameView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 72) + 224))(*(_QWORD *)(v4 + 72), a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  return v5;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::shouldUseTiledBackingForFrameView(WebKit::RemoteLayerTreeDrawingArea *this, const WebCore::LocalFrameView *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = WebCore::LocalFrameView::frame(a2);
  if (*(_QWORD *)(*(_QWORD *)(v3 + 632) + 8) == v3)
    return 1;
  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 112) + 664) >> 30) & 1;
}

uint64_t WebKit::VideoPresentationManagerProxy::mayAutomaticallyShowVideoPictureInPicture(WebKit::VideoPresentationManagerProxy *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 8);
  v3 = v2;
  v5 = v4;
  v6 = *((_QWORD *)this + 8);
  if (v6)
    v7 = (_QWORD *)(v6 + 24 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 == v2)
    return 0;
  while (1)
  {
    result = WebCore::VideoPresentationInterfaceAVKit::mayAutomaticallyShowVideoPictureInPicture((WebCore::VideoPresentationInterfaceAVKit *)v3[2]);
    if ((result & 1) != 0)
      return 1;
    while (1)
    {
      v3 += 3;
      if (v3 == v5)
        break;
      if ((unint64_t)(*v3 + 1) > 1)
        goto LABEL_10;
    }
    v3 = v5;
LABEL_10:
    if (v3 == v7)
      return result;
  }
}

BOOL WebKit::VideoPresentationManagerProxy::hasMode(WebKit::VideoPresentationManagerProxy *this, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _BOOL8 v9;

  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 8);
  v6 = *((_QWORD *)this + 8);
  if (v6)
    v7 = (_QWORD *)(v6 + 24 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 == v4)
    return 0;
  do
  {
    v8 = *(_DWORD *)(v4[2] + 156) & a2;
    v9 = v8 != 0;
    if (v8)
      break;
    while (1)
    {
      v4 += 3;
      if (v4 == v5)
        break;
      if ((unint64_t)(*v4 + 1) > 1)
        goto LABEL_10;
    }
    v4 = v5;
LABEL_10:
    ;
  }
  while (v4 != v7);
  return v9;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(void)>,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_196CC3DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::RemoteLayerBackingStoreCollection::*&)(void),WebKit::RemoteLayerBackingStoreCollection*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WebKit::WebChromeClient::wheelEventHandlersChanged(WebKit::WebChromeClient *this, int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  if (*(unsigned __int8 *)(v4 + 853) != a2)
  {
    *(_BYTE *)(v4 + 853) = a2;
    WebKit::WebPage::recomputeShortCircuitHorizontalWheelEventsState((IPC::Encoder *)v4);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::dispatchDisabledAdaptationsDidChange(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::WebPage::disabledAdaptationsDidChange(v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

unsigned __int8 *WebKit::WebPage::disabledAdaptationsDidChange(uint64_t a1)
{
  unsigned __int8 *result;

  result = (unsigned __int8 *)WebCore::ViewportConfiguration::setDisabledAdaptations();
  if ((_DWORD)result)
    return WebKit::WebPage::viewportConfigurationChanged(a1, 0);
  return result;
}

void WebKit::WebChromeClient::dispatchViewportPropertiesDidChange(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (WebCore::ViewportConfiguration::setViewportArguments())
    WebKit::WebPage::viewportConfigurationChanged(v2, 0);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

uint64_t WebKit::WebSQLiteDatabaseTracker::willBeginFirstTransaction(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v1 = this;
  v2 = (unsigned __int8 *)(this + 24);
  if (__ldaxr((unsigned __int8 *)(this + 24)))
  {
    __clrex();
LABEL_3:
    this = MEMORY[0x19AEABB3C](this + 24);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *(_QWORD *)(v1 + 32);
  if (v4)
  {
    *(_QWORD *)(v1 + 32) = v4 + 1;
  }
  else if (!*(_BYTE *)(v1 + 40))
  {
    this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), 1);
  }
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordFillPath(WTF::ApproximateTime *this, const WebCore::Path *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  WTF::ApproximateTime *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  WebKit::RemoteImageBufferProxy *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  int v68;
  IPC::Encoder *v69;
  WTF *v70;
  void *v71;
  NSObject *v72;
  const char *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  WebKit::RemoteImageBufferProxy *v77;
  IPC::StreamClientConnection *v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  _BYTE buf[24];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v78);
  if (!v78)
    return this;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)v3 + 479);
  if (v5)
    goto LABEL_112;
  v77 = 0;
  while (1)
  {
    v6 = v78;
    v7 = *((_QWORD *)v3 + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) == v7)
      goto LABEL_7;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
    if (!buf[16])
    {
      v44 = 15;
      goto LABEL_115;
    }
    v33 = *(_QWORD *)buf;
    v34 = *(_QWORD *)&buf[8];
    v35 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v36 = v35 - *(_QWORD *)buf;
    v37 = v35 >= *(_QWORD *)buf;
    v38 = v35 - *(_QWORD *)buf + 2;
    v40 = v36 < 0xFFFFFFFFFFFFFFFELL && v38 <= *(_QWORD *)&buf[8];
    if (v37 && v40)
      goto LABEL_61;
    if (!v37)
    {
      v38 = 0;
      goto LABEL_62;
    }
    v41 = 0;
    if (v36 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v38 = 0;
      goto LABEL_63;
    }
    v38 = 0;
    if (v36 + 2 <= *(_QWORD *)&buf[8])
    {
      v38 = v36 + 2;
LABEL_61:
      *(_WORD *)(*(_QWORD *)buf + v36) = 2822;
LABEL_62:
      v41 = v34;
    }
LABEL_63:
    v42 = (v33 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v42 >= v33 + v38)
    {
      v43 = v42 - v33;
      v44 = 17;
      if (v43 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_115;
      v38 = v43 + 8;
      if (v43 + 8 > v41)
        goto LABEL_115;
      *(_QWORD *)(v33 + v43) = v7;
    }
    if (!v41)
    {
      v44 = 17;
LABEL_115:
      v68 = v44;
LABEL_105:
      v72 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v73 = IPC::errorAsString(v68);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillPath";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v73;
        _os_log_impl(&dword_196BCC000, v72, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      v74 = *((_QWORD *)v3 + 481);
      if (v74)
      {
        v75 = *(_BYTE **)(v74 + 8);
        if (v75)
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v75);
      }
      goto LABEL_27;
    }
    v45 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = *((_QWORD *)v6 + 7);
    if (v45 + 16 >= v46)
      v45 = 0;
    if (v38 <= 0x10)
      v38 = 16;
    v47 = v45 + v38;
    if (v46 <= v47)
      v48 = 0;
    else
      v48 = v47;
    *((_QWORD *)v6 + 9) = v48;
    v49 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v48, v49));
    v51 = *((_DWORD *)v6 + 27);
    if (v50 == 0x80000000 || v51 != 0)
    {
      v53 = v51 + 1;
      *((_DWORD *)v6 + 27) = v53;
      if (v53 >= *((_DWORD *)v6 + 26))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
    }
    *((_QWORD *)v6 + 6) = v7;
LABEL_7:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, &v80, v9);
    if (!v82)
    {
      v68 = 15;
      goto LABEL_105;
    }
    *(_QWORD *)buf = v80;
    *(_QWORD *)&buf[8] = v81;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v80;
    v12 = v10 - v80;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v81)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v80 + v12) = 832;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
    if (*(_QWORD *)&buf[8])
    {
      v15 = *(_QWORD *)&buf[16];
      v16 = *((_QWORD *)v6 + 8);
      v17 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = *((_QWORD *)v6 + 7);
      if (v17 + 16 >= v18)
        v17 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v15 = 16;
      v19 = v17 + v15;
      if (v18 <= v19)
        v20 = 0;
      else
        v20 = v19;
      *((_QWORD *)v6 + 9) = v20;
      v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v20, v21));
      if (v22 == 0x80000000 || *((_DWORD *)v6 + 27))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
      goto LABEL_27;
    }
    v76 = v7;
    if (v82)
      break;
    __break(1u);
LABEL_112:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)v3 + 480), &v77);
    v5 = v77;
    if (v77)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v77);
  }
  v57 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v57 - v80;
  if (v57 < v80)
  {
    v59 = 0;
  }
  else
  {
    v59 = 0;
    if (v58 <= 0xFFFFFFFFFFFFFFFDLL && v58 + 2 <= v81)
    {
      *(_WORD *)(v80 + v58) = 2821;
      v59 = v58 + 2;
    }
  }
  v60 = *((_QWORD *)v6 + 8);
  v61 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v62 = *((_QWORD *)v6 + 7);
  if (v61 + 16 >= v62)
    v61 = 0;
  if (v59 <= 0x10)
    v59 = 16;
  v63 = v61 + v59;
  if (v62 <= v63)
    v63 = 0;
  *((_QWORD *)v6 + 9) = v63;
  v64 = (unint64_t *)(*(_QWORD *)(v60 + 16) + 128);
  do
    __ldaxr(v64);
  while (__stlxr(v63, v64));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v79, (uint64_t **)v6 + 1);
  v65 = v79;
  v66 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v66 = 832;
  *(_QWORD *)(v66 + 8) = v76;
  *(_QWORD *)(v66 + 528) = v66 + 16;
  *(_QWORD *)(v66 + 536) = v66 + 16;
  *(_OWORD *)(v66 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v66 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v66);
  *(_QWORD *)buf = v66;
  IPC::ArgumentCoder<WebCore::Path,void>::encode((IPC::Encoder *)v66, a2);
  v68 = IPC::Connection::sendMessageImpl((uint64_t)v65, (uint64_t *)buf, 1, 0);
  v69 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v69)
  {
    IPC::Encoder::~Encoder(v69, v67);
    WTF::fastFree(v70, v71);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v79);
  if (v68)
    goto LABEL_105;
LABEL_27:
  v23 = v77;
  v77 = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
      goto LABEL_30;
    }
    if (__stxr(1u, (unsigned __int8 *)v24))
LABEL_30:
      MEMORY[0x19AEABB3C](v24);
    v26 = *(_QWORD *)(v24 + 8);
    v27 = v26 - 1;
    *(_QWORD *)(v24 + 8) = v26 - 1;
    if (v26 == 1)
    {
      v56 = *(_QWORD *)(v24 + 16);
      v28 = *(_QWORD *)(v24 + 24);
      *(_QWORD *)(v24 + 24) = 0;
      v29 = v56 != 0;
    }
    else
    {
      v28 = 0;
      v29 = 1;
    }
    v30 = __ldxr((unsigned __int8 *)v24);
    if (v30 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v24))
      {
LABEL_35:
        if (!v27)
        {
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          if (!v29)
            WTF::fastFree((WTF *)v24, v14);
        }
        goto LABEL_36;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
    goto LABEL_35;
  }
LABEL_36:
  this = v78;
  v78 = 0;
  if (this)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)this);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)this));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v54, v55);
    }
  }
  return this;
}

void WebKit::RemoteDisplayListRecorderProxy::recordClipOutRoundedRect(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::FloatRoundedRect *a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  WebKit::RemoteImageBufferProxy *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  int *v57;
  WebKit::RemoteImageBufferProxy *v58;
  unsigned int *v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  _BYTE buf[24];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v57 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v59);
  if (!v59)
    return;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v5)
    goto LABEL_94;
  v58 = 0;
  while (1)
  {
    v6 = v59;
    v7 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_81:
        v42 = 15;
        goto LABEL_82;
      }
      v34 = *(_QWORD *)buf;
      v35 = *(_QWORD *)&buf[8];
      v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - *(_QWORD *)buf;
      if (v36 < *(_QWORD *)buf)
      {
        v39 = 0;
        v38 = *(_QWORD *)&buf[8];
      }
      else
      {
        v38 = 0;
        if (v37 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v39 = 0;
        }
        else
        {
          v39 = 0;
          if (v37 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
            v38 = v35;
            v39 = v37 + 2;
          }
        }
      }
      v40 = (_QWORD *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v40 >= v34 + v39)
      {
        v41 = (char *)v40 - v34;
        v42 = 17;
        if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_82;
        v39 = (unint64_t)(v41 + 8);
        if ((unint64_t)(v41 + 8) > v38)
          goto LABEL_82;
        *v40 = v7;
      }
      if (!v38)
      {
        v42 = 17;
        goto LABEL_82;
      }
      v43 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *((_QWORD *)v6 + 7);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *((_QWORD *)v6 + 9) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = v6[27];
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        v6[27] = v51;
        if (v51 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), &v60, v9);
    if (!v62)
      goto LABEL_81;
    *(_QWORD *)buf = v60;
    *(_QWORD *)&buf[8] = v61;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v60;
    v12 = v10 - v60;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v61)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v60 + v12) = 802;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)buf, v57);
    if (*(_QWORD *)&buf[8])
    {
      v15 = *(_QWORD *)&buf[16];
      v16 = *((_QWORD *)v6 + 8);
      v17 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = *((_QWORD *)v6 + 7);
      if (v17 + 16 >= v18)
        v17 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v15 = 16;
      v19 = v17 + v15;
      if (v18 <= v19)
        v20 = 0;
      else
        v20 = v19;
      *((_QWORD *)v6 + 9) = v20;
      v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v20, v21));
      if (v22 == 0x80000000 || v6[27])
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](v6[21]);
        v6[27] = 0;
      }
      goto LABEL_27;
    }
    if (v62)
      break;
    __break(1u);
LABEL_94:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)this + 480), &v58);
    v5 = v58;
    if (v58)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v58);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v60, v61);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipOutRoundedRect>(*(uint64_t *)buf, &v57, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v42)
    goto LABEL_27;
LABEL_82:
  v52 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v53 = IPC::errorAsString(v42);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ClipOutRoundedRect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v53;
    _os_log_impl(&dword_196BCC000, v52, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v54 = *((_QWORD *)this + 481);
  if (v54)
  {
    v55 = *(_BYTE **)(v54 + 8);
    if (v55)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v55);
  }
LABEL_27:
  v23 = v58;
  v58 = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
LABEL_31:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v56 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v56 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_35:
      if (!v27)
      {
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v14);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v24);
    goto LABEL_31;
  }
LABEL_36:
  v31 = v59;
  v59 = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      *(_QWORD *)buf = v31;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

uint64_t IPC::ArgumentCoder<WebCore::Path,void>::encode(uint64_t *a1, WebCore::Path *this)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF *v18;
  unsigned int v19;

  result = WebCore::Path::segments(this);
  v5 = v19;
  v6 = a1[2];
  v7 = *a1 + v6;
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (v9)
  {
    v11 = v10 + v6;
    v12 = v11 + 8;
    if (v11 > 0xFFFFFFFFFFFFFFF7 || v12 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v11) = v19;
      a1[2] = v12;
      v5 = v19;
    }
  }
  v14 = v18;
  if ((_DWORD)v5)
  {
    v15 = 56 * v5;
    do
    {
      v16 = *((unsigned __int8 *)v14 + 52);
      v17 = a1[2];
      if (v17 >= a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *(_BYTE *)(*a1 + v17) = v16;
        a1[2] = v17 + 1;
      }
      result = (uint64_t)IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(a1, v14, v16);
      v14 = (WTF *)((char *)v14 + 56);
      v15 -= 56;
    }
    while (v15);
    v14 = v18;
  }
  if (v14)
    return WTF::fastFree(v14, v4);
  return result;
}

void sub_196CC4BCC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v12;
  unint64_t v13;

  if (a3 == 1)
  {
    if (a2[13] != 1)
    {
LABEL_20:
      result = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
      result[1] = 0;
      goto LABEL_12;
    }
  }
  else
  {
    if (a3)
      return IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&,0ul,1ul>(result, a2, a3);
    if (a2[13])
      goto LABEL_20;
  }
  v3 = *result;
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v8 + v4 + 4;
    if (v9 <= 0xFFFFFFFFFFFFFFFBLL && v10 <= result[1])
    {
      *(_DWORD *)(v3 + v9) = *a2;
      result[2] = v10;
      v3 = *result;
      v4 = v10;
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_12:
  v12 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v12 >= v3 + v4)
  {
    v13 = (unint64_t)v12 - v3 + 4;
    if ((unint64_t)v12 - v3 > 0xFFFFFFFFFFFFFFFBLL || v13 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v12 = a2[1];
      result[2] = v13;
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::GraphicsDropShadow,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, (_DWORD *)a2);
  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 8);
      a1[2] = v10;
    }
  }
  result = IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));
  v13 = a1[2];
  if (v13 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v13++) = *(_BYTE *)(a2 + 24);
    a1[2] = v13;
  }
  v14 = *a1 + v13;
  v15 = (v14 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v15 >= v14;
  v16 = v15 - v14;
  if (v7)
  {
    v17 = v16 + v13;
    v18 = v17 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v17) = *(_DWORD *)(a2 + 28);
      a1[2] = v18;
    }
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordFillRoundedRect(WTF::ApproximateTime *result, int *a2, WebCore::Color *a3, char a4)
{
  uint64_t v4;
  WTF::ApproximateTime *v5;
  WTF::ApproximateTime *v9;
  IPC::StreamClientConnection *v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  WebKit::RemoteImageBufferProxy *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unsigned int v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  void *v72;
  IPC::Encoder *v73;
  WTF *v74;
  void *v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  _BYTE *v79;
  WebKit::RemoteImageBufferProxy *v80;
  IPC::StreamClientConnection *v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  _BYTE buf[24];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 481);
  if (!v4)
    return result;
  v5 = result;
  result = *(WTF::ApproximateTime **)(v4 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v81);
  if (!v81)
    return result;
  v9 = (WTF::ApproximateTime *)*((_QWORD *)v5 + 479);
  if (v9)
    goto LABEL_113;
  v80 = 0;
  while (1)
  {
    v10 = v81;
    v11 = *((_QWORD *)v5 + 478);
    WTF::ApproximateTime::now(v9);
    v13 = v12 + 15.0;
    if (*((_QWORD *)v10 + 6) == v11)
      goto LABEL_7;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, buf, v12 + 15.0);
    if (!buf[16])
    {
LABEL_111:
      v49 = 15;
LABEL_105:
      v76 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v77 = IPC::errorAsString(v49);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillRoundedRect";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v77;
        _os_log_impl(&dword_196BCC000, v76, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      v78 = *((_QWORD *)v5 + 481);
      if (v78)
      {
        v79 = *(_BYTE **)(v78 + 8);
        if (v79)
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v79);
      }
      goto LABEL_28;
    }
    v38 = *(_QWORD *)buf;
    v39 = *(_QWORD *)&buf[8];
    v40 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - *(_QWORD *)buf;
    v42 = v40 >= *(_QWORD *)buf;
    v43 = v40 - *(_QWORD *)buf + 2;
    v45 = v41 < 0xFFFFFFFFFFFFFFFELL && v43 <= *(_QWORD *)&buf[8];
    if (v42 && v45)
      goto LABEL_62;
    if (!v42)
    {
      v43 = 0;
      goto LABEL_63;
    }
    v46 = 0;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v43 = 0;
      goto LABEL_64;
    }
    v43 = 0;
    if (v41 + 2 <= *(_QWORD *)&buf[8])
    {
      v43 = v41 + 2;
LABEL_62:
      *(_WORD *)(*(_QWORD *)buf + v41) = 2822;
LABEL_63:
      v46 = v39;
    }
LABEL_64:
    v47 = (_QWORD *)((v38 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v47 >= v38 + v43)
    {
      v48 = (char *)v47 - v38;
      v49 = 17;
      if ((unint64_t)v47 - v38 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_105;
      v43 = (unint64_t)(v48 + 8);
      if ((unint64_t)(v48 + 8) > v46)
        goto LABEL_105;
      *v47 = v11;
    }
    if (!v46)
    {
      v49 = 17;
      goto LABEL_105;
    }
    v50 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = *((_QWORD *)v10 + 7);
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v43 <= 0x10)
      v43 = 16;
    v52 = v50 + v43;
    if (v51 <= v52)
      v53 = 0;
    else
      v53 = v52;
    *((_QWORD *)v10 + 9) = v53;
    v54 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v10 + 8) + 16) + 128);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v53, v54));
    v56 = *((_DWORD *)v10 + 27);
    if (v55 == 0x80000000 || v56 != 0)
    {
      v58 = v56 + 1;
      *((_DWORD *)v10 + 27) = v58;
      if (v58 >= *((_DWORD *)v10 + 26))
      {
        if (*((_BYTE *)v10 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
        *((_DWORD *)v10 + 27) = 0;
      }
    }
    *((_QWORD *)v10 + 6) = v11;
LABEL_7:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, &v83, v13);
    if (!v85)
      goto LABEL_111;
    *(_QWORD *)buf = v83;
    *(_QWORD *)&buf[8] = v84;
    *(_QWORD *)&buf[16] = 0;
    v14 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v15 = v14 >= v83;
    v16 = v14 - v83;
    if (v15)
    {
      if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v84)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v83 + v16) = 840;
        *(_QWORD *)&buf[16] = v16 + 2;
      }
    }
    IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)buf, a2);
    v9 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, a3);
    v19 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16] < *(_QWORD *)&buf[8])
    {
      v20 = *(_QWORD *)&buf[16] + 1;
      *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = a4;
      *(_QWORD *)&buf[16] = v19 + 1;
      if (*(_QWORD *)&buf[8])
      {
        v21 = *((_QWORD *)v10 + 8);
        v22 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *((_QWORD *)v10 + 7);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v20 <= 0x10)
          v20 = 16;
        v24 = v22 + v20;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *((_QWORD *)v10 + 9) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 == 0x80000000 || *((_DWORD *)v10 + 27))
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
        goto LABEL_28;
      }
    }
    if (v85)
      break;
    __break(1u);
LABEL_113:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v9, *((_QWORD *)v5 + 480), &v80);
    v9 = v80;
    if (v80)
      v9 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v80);
  }
  v62 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v62 - v83;
  if (v62 < v83)
  {
    v64 = 0;
  }
  else
  {
    v64 = 0;
    if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v63 + 2 <= v84)
    {
      *(_WORD *)(v83 + v63) = 2821;
      v64 = v63 + 2;
    }
  }
  v65 = *((_QWORD *)v10 + 8);
  v66 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v67 = *((_QWORD *)v10 + 7);
  if (v66 + 16 >= v67)
    v66 = 0;
  if (v64 <= 0x10)
    v64 = 16;
  v68 = v66 + v64;
  if (v67 <= v68)
    v68 = 0;
  *((_QWORD *)v10 + 9) = v68;
  v69 = (unint64_t *)(*(_QWORD *)(v65 + 16) + 128);
  do
    __ldaxr(v69);
  while (__stlxr(v68, v69));
  *((_DWORD *)v10 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v82, (uint64_t **)v10 + 1);
  v70 = v82;
  v71 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v71 = 840;
  *(_QWORD *)(v71 + 8) = v11;
  *(_QWORD *)(v71 + 528) = v71 + 16;
  *(_QWORD *)(v71 + 536) = v71 + 16;
  *(_OWORD *)(v71 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v71 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v71);
  *(_QWORD *)buf = v71;
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((IPC::Encoder *)v71, a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v71, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v71, 1uLL, 1) = a4;
  v49 = IPC::Connection::sendMessageImpl((uint64_t)v70, (uint64_t *)buf, 1, 0);
  v73 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v73)
  {
    IPC::Encoder::~Encoder(v73, v72);
    WTF::fastFree(v74, v75);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v82);
  if (v49)
    goto LABEL_105;
LABEL_28:
  v28 = v80;
  v80 = 0;
  if (v28)
  {
    v29 = *((_QWORD *)v28 + 1);
    if (__ldaxr((unsigned __int8 *)v29))
    {
      __clrex();
      goto LABEL_31;
    }
    if (__stxr(1u, (unsigned __int8 *)v29))
LABEL_31:
      MEMORY[0x19AEABB3C](v29);
    v31 = *(_QWORD *)(v29 + 8);
    v32 = v31 - 1;
    *(_QWORD *)(v29 + 8) = v31 - 1;
    if (v31 == 1)
    {
      v61 = *(_QWORD *)(v29 + 16);
      v33 = *(_QWORD *)(v29 + 24);
      *(_QWORD *)(v29 + 24) = 0;
      v34 = v61 != 0;
    }
    else
    {
      v33 = 0;
      v34 = 1;
    }
    v35 = __ldxr((unsigned __int8 *)v29);
    if (v35 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v29))
      {
LABEL_36:
        if (!v32)
        {
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          if (!v34)
            WTF::fastFree((WTF *)v29, v18);
        }
        goto LABEL_37;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
    goto LABEL_36;
  }
LABEL_37:
  result = v81;
  v81 = 0;
  if (result)
  {
    do
    {
      v36 = __ldaxr((unsigned int *)result);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)result));
    if (!v37)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v59, v60);
    }
  }
  return result;
}

void WebKit::RemoteDisplayListRecorderProxy::recordClipRoundedRect(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::FloatRoundedRect *a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  WebKit::RemoteImageBufferProxy *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  _BYTE *v56;
  int *v57;
  WebKit::RemoteImageBufferProxy *v58;
  unsigned int *v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  _BYTE buf[24];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v57 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v59);
  if (!v59)
    return;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v5)
    goto LABEL_93;
  v58 = 0;
  while (1)
  {
    v6 = v59;
    v7 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_83:
        v42 = 15;
        goto LABEL_86;
      }
      v34 = *(_QWORD *)buf;
      v35 = *(_QWORD *)&buf[8];
      v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - *(_QWORD *)buf;
      if (v36 < *(_QWORD *)buf)
      {
        v39 = 0;
        v38 = *(_QWORD *)&buf[8];
      }
      else
      {
        v38 = 0;
        if (v37 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v39 = 0;
        }
        else
        {
          v39 = 0;
          if (v37 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
            v38 = v35;
            v39 = v37 + 2;
          }
        }
      }
      v40 = (_QWORD *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v40 >= v34 + v39)
      {
        v41 = (char *)v40 - v34;
        v42 = 17;
        if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_86;
        v39 = (unint64_t)(v41 + 8);
        if ((unint64_t)(v41 + 8) > v38)
          goto LABEL_86;
        *v40 = v7;
      }
      if (!v38)
      {
        v42 = 17;
        goto LABEL_86;
      }
      v43 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *((_QWORD *)v6 + 7);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *((_QWORD *)v6 + 9) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = v6[27];
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        v6[27] = v51;
        if (v51 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), &v60, v9);
    if (!v62)
      goto LABEL_83;
    *(_QWORD *)buf = v60;
    *(_QWORD *)&buf[8] = v61;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v60;
    v12 = v10 - v60;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v61)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v60 + v12) = 805;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)buf, v57);
    if (*(_QWORD *)&buf[8])
    {
      v15 = *(_QWORD *)&buf[16];
      v16 = *((_QWORD *)v6 + 8);
      v17 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = *((_QWORD *)v6 + 7);
      if (v17 + 16 >= v18)
        v17 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v15 = 16;
      v19 = v17 + v15;
      if (v18 <= v19)
        v20 = 0;
      else
        v20 = v19;
      *((_QWORD *)v6 + 9) = v20;
      v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v20, v21));
      if (v22 == 0x80000000 || v6[27])
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](v6[21]);
        v6[27] = 0;
      }
      goto LABEL_27;
    }
    if (v62)
      break;
    __break(1u);
LABEL_93:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)this + 480), &v58);
    v5 = v58;
    if (v58)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v58);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v60, v61);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipRoundedRect>(*(uint64_t *)buf, &v57, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v42)
    goto LABEL_27;
LABEL_86:
  v53 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v54 = IPC::errorAsString(v42);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ClipRoundedRect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v54;
    _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v55 = *((_QWORD *)this + 481);
  if (v55)
  {
    v56 = *(_BYTE **)(v55 + 8);
    if (v56)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v56);
  }
LABEL_27:
  v23 = v58;
  v58 = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
LABEL_31:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v52 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v52 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_35:
      if (!v27)
      {
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v14);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v24);
    goto LABEL_31;
  }
LABEL_36:
  v31 = v59;
  v59 = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      *(_QWORD *)buf = v31;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

uint64_t *IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(uint64_t *result, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  _DWORD *v45;
  char *v46;

  v2 = a2[1];
  v3 = *result;
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v8 + v4 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v9) = *a2;
      result[2] = v10;
      v3 = *result;
      v4 = v10;
    }
  }
  v12 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = v12 - (v3 + v4);
  if (v12 >= v3 + v4)
  {
    v14 = v12 - v3;
    v15 = v13 + v4 + 4;
    if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v14) = v2;
      result[2] = v15;
      v3 = *result;
      v4 = v15;
    }
  }
  v17 = a2[3];
  v18 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = v18 - (v3 + v4);
  if (v18 >= v3 + v4)
  {
    v20 = v18 - v3;
    v21 = v19 + v4 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v20) = a2[2];
      result[2] = v21;
      v3 = *result;
      v4 = v21;
    }
  }
  v23 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v24 = v23 - (v3 + v4);
  if (v23 >= v3 + v4)
  {
    v25 = v23 - v3;
    v26 = v24 + v4 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v25) = v17;
      result[2] = v26;
      v3 = *result;
      v4 = v26;
    }
  }
  v28 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v29 = v28 - (v3 + v4);
  if (v28 >= v3 + v4)
  {
    v30 = v28 - v3;
    v31 = v29 + v4 + 4;
    if (v30 > 0xFFFFFFFFFFFFFFFBLL || v31 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v30) = a2[4];
      result[2] = v31;
      v3 = *result;
      v4 = v31;
    }
  }
  v33 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v33 >= v3 + v4)
  {
    v34 = (char *)v33 - v3;
    if ((unint64_t)v33 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v33 = a2[5];
      result[2] = (uint64_t)(v34 + 4);
      v3 = *result;
      v4 = (unint64_t)(v34 + 4);
    }
  }
  v35 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v35 >= v3 + v4)
  {
    v36 = (char *)v35 - v3;
    if ((unint64_t)v35 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v35 = a2[6];
      result[2] = (uint64_t)(v36 + 4);
      v3 = *result;
      v4 = (unint64_t)(v36 + 4);
    }
  }
  v37 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v37 >= v3 + v4)
  {
    v38 = (char *)v37 - v3;
    if ((unint64_t)v37 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v38 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v37 = a2[7];
      result[2] = (uint64_t)(v38 + 4);
      v3 = *result;
      v4 = (unint64_t)(v38 + 4);
    }
  }
  v39 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v39 >= v3 + v4)
  {
    v40 = (char *)v39 - v3;
    if ((unint64_t)v39 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v40 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v39 = a2[8];
      result[2] = (uint64_t)(v40 + 4);
      v3 = *result;
      v4 = (unint64_t)(v40 + 4);
    }
  }
  v41 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v41 >= v3 + v4)
  {
    v42 = (char *)v41 - v3;
    if ((unint64_t)v41 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v42 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v41 = a2[9];
      result[2] = (uint64_t)(v42 + 4);
      v3 = *result;
      v4 = (unint64_t)(v42 + 4);
    }
  }
  v43 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v43 >= v3 + v4)
  {
    v44 = (char *)v43 - v3;
    if ((unint64_t)v43 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v44 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v43 = a2[10];
      result[2] = (uint64_t)(v44 + 4);
      v3 = *result;
      v4 = (unint64_t)(v44 + 4);
    }
  }
  v45 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v45 >= v3 + v4)
  {
    v46 = (char *)v45 - v3;
    if ((unint64_t)v45 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v46 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v45 = a2[11];
      result[2] = (uint64_t)(v46 + 4);
    }
  }
  return result;
}

uint64_t ___ZN6WebKitL25initTCCTCCAccessPreflightEPK10__CFStringPK14__CFDictionary_block_invoke(WebKit *a1)
{
  void *v1;
  uint64_t result;

  v1 = (void *)WebKit::TCCLibrary(a1);
  result = (uint64_t)dlsym(v1, "TCCAccessPreflight");
  WebKit::softLinkTCCTCCAccessPreflight = (uint64_t (*)(WebKit *__hidden, const __CFString *, const __CFDictionary *))result;
  if (!result)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN6WebKit29get_TCC_kTCCServiceMicrophoneEv_block_invoke(WebKit *a1)
{
  void *v1;
  uint64_t result;

  v1 = (void *)WebKit::TCCLibrary(a1);
  result = (uint64_t)dlsym(v1, "kTCCServiceMicrophone");
  if (result)
  {
    qword_1ECE72130 = *(_QWORD *)result;
  }
  else
  {
    result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN6WebKit54get_TCC_kTCCServiceWebKitIntelligentTrackingPreventionEv_block_invoke(WebKit *a1)
{
  void *v1;
  uint64_t result;

  v1 = (void *)WebKit::TCCLibrary(a1);
  result = (uint64_t)dlsym(v1, "kTCCServiceWebKitIntelligentTrackingPrevention");
  if (result)
  {
    qword_1ECE72150 = *(_QWORD *)result;
  }
  else
  {
    result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::TCCLibrary(WebKit *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit10TCCLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = 0;
  if (qword_1ECE72118 != -1)
    dispatch_once(&qword_1ECE72118, block);
  return _MergedGlobals_54;
}

void sub_196CC609C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18)
{
  WTF *v19;

  PendingReply::~PendingReply((PendingReply *)&a13);
  v19 = a18;
  a18 = 0;
  if (v19)
    std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100]((int)&a18, v19);
  _Unwind_Resume(a1);
}

void sub_196CC6240(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_196CC64A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12)
{
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::~pair((uint64_t)&a10);
  v14 = a12;
  a12 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_196CC64DC()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
  JUMPOUT(0x196CC64B0);
}

void sub_196CC64F0()
{
  JUMPOUT(0x196CC64B0);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = v5;
    v10 = (WTF::StringImpl *)v4;
    do
    {
      if (*(_QWORD *)v10 != -1)
      {
        if (*(_QWORD *)v10)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v10);
        WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>::~KeyValuePair((uint64_t)v10, v8);
      }
      v10 = (WTF::StringImpl *)((char *)v10 + 24);
      --v9;
    }
    while (v9);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;
  WTF::StringImpl *v5;

  v3 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

const void **WTF::RetainPtr<NSURLSession>::operator=(const void **a1, CFTypeRef cf)
{
  const void *v4;

  if (cf)
    CFRetain(cf);
  v4 = *a1;
  *a1 = cf;
  if (v4)
    CFRelease(v4);
  return a1;
}

void sub_196CC6994(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void WebKit::InjectedBundle::extendClassesForParameterCoder(WebKit::InjectedBundle *this, API::Array *a2)
{
  unint64_t v4;
  void *v5;
  const void *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const char *v10;
  Class v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF *v15;

  v4 = *((unsigned int *)a2 + 7);
  v5 = (void *)objc_msgSend((id)WebKit::InjectedBundle::classesForCoder(this), "mutableCopy");
  if ((_DWORD)v4)
  {
    v7 = 0;
    while (API::Array::at<API::String>((uint64_t)a2, v7))
    {
      WTF::String::isolatedCopy();
      WTF::String::utf8();
      v9 = v14;
      v14 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      if (v15)
        v10 = (char *)v15 + 16;
      else
        v10 = 0;
      v11 = objc_lookUpClass(v10);
      if (v11)
        objc_msgSend(v5, "addObject:", v11);
      else
        WTFLogAlways();
      v13 = v15;
      v15 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, v12);
        else
          --*(_DWORD *)v13;
      }
      if (v11)
      {
        if (++v7 < v4)
          continue;
      }
      goto LABEL_2;
    }
    WTFLogAlways();
  }
LABEL_2:
  if (v5)
    CFRetain(v5);
  v6 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v5;
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

void sub_196CC6B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  const void *v11;

  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

void sub_196CC6B8C()
{
  JUMPOUT(0x196CC6B7CLL);
}

void sub_196CC6B94(int a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 != 1)
      JUMPOUT(0x196CC6BB0);
    WTF::fastFree(a12, a2);
  }
  JUMPOUT(0x196CC6B78);
}

uint64_t API::Array::at<API::String>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (*(unsigned int *)(a1 + 28) <= a2)
    goto LABEL_8;
  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
  if (!result)
    return result;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 16))(result) != 21)
    return 0;
  if (*(unsigned int *)(a1 + 28) <= a2)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x196CC6C2CLL);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
}

uint64_t *IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits> const&>(IPC::Encoder *this, _QWORD **a2)
{
  int v4;
  uint64_t *result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  if (*a2)
    v4 = *((_DWORD *)*a2 - 3);
  else
    v4 = 0;
  *(_DWORD *)IPC::Encoder::grow(this, 4uLL, 4) = v4;
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
  v6 = result;
  v8 = v7;
  if (*a2)
    v9 = (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)];
  else
    v9 = 0;
  if ((uint64_t *)v9 != result)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v6);
      result = (uint64_t *)IPC::ArgumentCoder<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,void>::encode<IPC::Encoder,API::Object>(this, v6 + 1);
      while (1)
      {
        v6 += 2;
        if (v6 == v8)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_11;
      }
      v6 = v8;
LABEL_11:
      ;
    }
    while (v6 != (uint64_t *)v9);
  }
  return result;
}

void IPC::ArgumentCoder<API::Object,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 32)
    {
      *IPC::Encoder::grow(a1, 1uLL, 1) = 1;
      v14 = *(_BYTE *)(a2 + 16);
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 8)
      {
        *IPC::Encoder::grow(a1, 1uLL, 1) = 2;
        v20 = *(const void **)(a2 + 16);
        v21 = *(_QWORD *)(a2 + 24);
        goto LABEL_40;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 9)
      {
        *IPC::Encoder::grow(a1, 1uLL, 1) = 3;
        IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits> const&>(a1, (_QWORD **)(a2 + 16));
        return;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 33)
      {
        *IPC::Encoder::grow(a1, 1uLL, 1) = 4;
        v13 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v13;
        return;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 10)
      {
        *IPC::Encoder::grow(a1, 1uLL, 1) = 5;
        IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(a1, (WebCore::ResourceError *)(a2 + 16));
        return;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 11)
      {
        *IPC::Encoder::grow(a1, 1uLL, 1) = 6;
        v17 = *(_QWORD *)(a2 + 16);
        v18 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v17;
        *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v18;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 12)
        {
          *IPC::Encoder::grow(a1, 1uLL, 1) = 7;
          IPC::ArgumentCoder<WebKit::WebImage,void>::encode(a1, (WebKit::WebImage *)a2);
          return;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 13)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 36)
          {
            *IPC::Encoder::grow(a1, 1uLL, 1) = 9;
            IPC::Encoder::operator<<<API::Point const&>(a1, a2);
            return;
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 38)
          {
            *IPC::Encoder::grow(a1, 1uLL, 1) = 10;
            IPC::ArgumentCoder<API::Rect,void>::encode(a1, (_QWORD *)a2);
            return;
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 20)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 37)
            {
              *IPC::Encoder::grow(a1, 1uLL, 1) = 12;
              IPC::Encoder::operator<<<API::Point const&>(a1, a2);
              return;
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 21)
            {
              *IPC::Encoder::grow(a1, 1uLL, 1) = 13;
              WTF::String::isolatedCopy();
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)&v23);
              v5 = v23;
              v23 = 0;
              if (v5)
              {
                if (*(_DWORD *)v5 == 2)
                  WTF::StringImpl::destroy(v5, v4);
                else
                  *(_DWORD *)v5 -= 2;
              }
              return;
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 24)
            {
              *IPC::Encoder::grow(a1, 1uLL, 1) = 14;
              v19 = (uint64_t *)(a2 + 16);
            }
            else
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 25)
              {
                *IPC::Encoder::grow(a1, 1uLL, 1) = 15;
                IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 16));
                return;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 26)
              {
                *IPC::Encoder::grow(a1, 1uLL, 1) = 16;
                IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, (WebCore::ResourceResponseBase *)(a2 + 16));
                return;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 34)
              {
                v6 = IPC::Encoder::grow(a1, 1uLL, 1);
                v7 = 17;
LABEL_26:
                *v6 = v7;
                v8 = *(_QWORD *)(a2 + 16);
                *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
                return;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 35)
              {
                v6 = IPC::Encoder::grow(a1, 1uLL, 1);
                v7 = 18;
                goto LABEL_26;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 27)
                return;
              *IPC::Encoder::grow(a1, 1uLL, 1) = 19;
              v19 = (uint64_t *)(a2 + 48);
            }
            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v19);
            return;
          }
          *IPC::Encoder::grow(a1, 1uLL, 1) = 11;
          v22 = *(_QWORD *)(a2 + 16);
          v20 = *(const void **)(v22 + 8);
          v21 = *(unsigned int *)(v22 + 20);
LABEL_40:
          IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, v20, v21);
          return;
        }
        *IPC::Encoder::grow(a1, 1uLL, 1) = 8;
        v15 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v15;
        v16 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v16;
      }
      v14 = *(_BYTE *)(a2 + 32);
    }
    *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
    return;
  }
  *IPC::Encoder::grow(a1, 1uLL, 1) = 0;
  v9 = *(unsigned int *)(a2 + 28);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = 8 * v10;
    do
    {
      IPC::ArgumentCoder<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,void>::encode<IPC::Encoder,API::Object>(a1, v11);
      v11 += 8;
      v12 -= 8;
    }
    while (v12);
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)22>::type()
{
  return 22;
}

uint64_t API::ObjectImpl<(API::Object::Type)10>::type()
{
  return 10;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WKStringCreateWithCFString(void *a1)
{
  Class Class;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  WebKit *v8;

  Class = object_getClass(a1);
  if (_MergedGlobals_56 != -1)
    dispatch_once(&_MergedGlobals_56, &__block_literal_global_12);
  if (Class == (Class)qword_1ECE721A8)
    return *(_QWORD *)(objc_msgSend((id)CFRetain(a1), "_apiObject") + 8);
  MEMORY[0x19AEABCC8](&v7, a1);
  API::String::create(&v8);
  if (v8)
    v4 = *((_QWORD *)v8 + 1);
  else
    v4 = 0;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

void sub_196CC74C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *API::String::create@<X0>(WebKit **a1@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  WTF::String::isolatedCopy();
  API::String::create(&v6, a1);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196CC754C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196CC7664(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebKit **createEncodedObject(WebKit **result, WKRemoteObjectEncoder *a2, NSError *a3)
{
  WebKit **v3;
  WebKit *v6;
  objc_class *currentDictionary;
  objc_class *Class;
  objc_class *v9;
  objc_object *p_objectsBeingEncoded;
  Class m_table;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  NSError *v17;
  int v18;
  NSObject *v19;
  void *v20;
  objc_class *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  NSError **v26;
  NSError *v27;
  Class isa;
  int v29;
  Class v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  Class v34;
  const char *Name;
  WebKit *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WebKit *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  Class v42;
  WebKit *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WebKit *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  NSError **v49;
  int v50;
  objc_class *v51;
  unint64_t v52;
  void *v53;
  unint64_t v54;
  const char *v55;
  const char *v56;
  int v57;
  double v58;
  _QWORD v59[2];
  char v60;
  WTF::StringImpl *v61;
  WebKit *v62;
  WebKit *v63;
  WTF::StringImpl *v64[2];
  __int128 buf;
  uint64_t v66;

  v3 = result;
  v66 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    *result = 0;
    return result;
  }
  v6 = (WebKit *)API::Object::newObject(0x18uLL, 9);
  *(_QWORD *)v6 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v6);
  *(_QWORD *)v6 = &off_1E34CC280;
  *((_QWORD *)v6 + 2) = 0;
  currentDictionary = (objc_class *)a2->_currentDictionary;
  a2->_currentDictionary = v6;
  if ((-[NSError conformsToProtocol:](a3, "conformsToProtocol:", &unk_1EE345A30) & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("%@ does not conform to NSSecureCoding"), a3);
  }
  Class = object_getClass(a3);
  if (class_isMetaClass(Class))
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Class objects may not be encoded"));
  v9 = (objc_class *)-[NSError classForCoder](a3, "classForCoder");
  if (!v9)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("-classForCoder returned nil for %@"), a3);
  p_objectsBeingEncoded = (objc_object *)&a2->_objectsBeingEncoded;
  m_table = (Class)a2->_objectsBeingEncoded.m_impl.var0.m_table;
  if (m_table)
  {
    v12 = *((_DWORD *)m_table - 2);
    v13 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = (NSError *)*((_QWORD *)m_table + v16);
    if (v17 == a3)
    {
LABEL_12:
      v19 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        v51 = object_getClass(a3);
        LODWORD(buf) = 136380675;
        *(_QWORD *)((char *)&buf + 4) = class_getName(v51);
        _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "WKRemoteObjectCode::encodeObject: Object of type '%{private}s' contains a cycle", (uint8_t *)&buf, 0xCu);
      }
      v20 = (void *)MEMORY[0x1E0C99DA0];
      v21 = object_getClass(a3);
      result = (WebKit **)objc_msgSend(v20, "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Object of type '%s' contains a cycle"), class_getName(v21));
      goto LABEL_50;
    }
    v18 = 1;
    while (v17)
    {
      v16 = (v16 + v18) & v12;
      v17 = (NSError *)*((_QWORD *)m_table + v16);
      ++v18;
      if (v17 == a3)
        goto LABEL_12;
    }
  }
  else
  {
    WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::expand((uint64_t *)&a2->_objectsBeingEncoded);
    m_table = p_objectsBeingEncoded->isa;
    if (p_objectsBeingEncoded->isa)
      v12 = *((_DWORD *)m_table - 2);
    else
      v12 = 0;
  }
  v22 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  v25 = v12 & ((v24 >> 31) ^ v24);
  v26 = (NSError **)((char *)m_table + 8 * v25);
  v27 = *v26;
  if (*v26)
  {
    v49 = 0;
    v50 = 1;
    while (v27 != a3)
    {
      if (v27 == (NSError *)-1)
        v49 = v26;
      v25 = (v25 + v50) & v12;
      v26 = (NSError **)((char *)m_table + 8 * v25);
      v27 = *v26;
      ++v50;
      if (!*v26)
      {
        if (v49)
        {
          *v49 = 0;
          --*((_DWORD *)p_objectsBeingEncoded->isa - 4);
          v26 = v49;
        }
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    *v26 = a3;
    isa = p_objectsBeingEncoded->isa;
    if (p_objectsBeingEncoded->isa)
      v29 = *((_DWORD *)isa - 3) + 1;
    else
      v29 = 1;
    *((_DWORD *)isa - 3) = v29;
    v30 = p_objectsBeingEncoded->isa;
    if (p_objectsBeingEncoded->isa)
      v31 = *((_DWORD *)v30 - 3);
    else
      v31 = 0;
    v32 = (*((_DWORD *)v30 - 4) + v31);
    v33 = *((unsigned int *)v30 - 1);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_27;
    }
    else if (3 * v33 > 4 * v32)
    {
      goto LABEL_27;
    }
    WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::expand((uint64_t *)&a2->_objectsBeingEncoded);
  }
LABEL_27:
  v59[0] = a2;
  v59[1] = a3;
  v60 = 1;
  v34 = (Class)a2->_currentDictionary;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v64[0] = (WTF::StringImpl *)buf;
  Name = class_getName(v9);
  WTF::String::String((WTF::String *)&v61, Name);
  API::String::create(&v61, &v62);
  v36 = v62;
  v62 = 0;
  v63 = v36;
  WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)v34 + 2, v64, (uint64_t *)&v63, (uint64_t)&buf);
  v38 = (uint64_t)v63;
  v63 = 0;
  if (v38)
    CFRelease(*(CFTypeRef *)(v38 + 8));
  v39 = v62;
  v62 = 0;
  if (v39)
    CFRelease(*((CFTypeRef *)v39 + 1));
  v40 = v61;
  v61 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v37);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v64[0];
  v64[0] = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v37);
    else
      *(_DWORD *)v41 -= 2;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (v9 == (objc_class *)objc_opt_class() || v9 == (objc_class *)objc_opt_class())
    {
      v42 = (Class)a2->_currentDictionary;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      MEMORY[0x19AEABCC8](&v61, a3);
      API::String::create(&v61, &v62);
      v43 = v62;
      v62 = 0;
      v63 = v43;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)v42 + 2, v64, (uint64_t *)&v63, (uint64_t)&buf);
      v45 = (uint64_t)v63;
      v63 = 0;
      if (v45)
        CFRelease(*(CFTypeRef *)(v45 + 8));
      v46 = v62;
      v62 = 0;
      if (v46)
        CFRelease(*((CFTypeRef *)v46 + 1));
      v47 = v61;
      v61 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v44);
        else
          *(_DWORD *)v47 -= 2;
      }
      v48 = v64[0];
      v64[0] = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v44);
        else
          *(_DWORD *)v48 -= 2;
      }
    }
    else if (v9 == (objc_class *)objc_opt_class())
    {
      encodeError(a2, a3);
    }
    else
    {
      -[NSError encodeWithCoder:](a3, "encodeWithCoder:", a2);
    }
    goto LABEL_49;
  }
  -[WKRemoteObjectEncoder encodeObject:forKey:](a2, "encodeObject:forKey:", objc_msgSend((id)-[NSError methodSignature](a3, "methodSignature"), "_typeString"), CFSTR("typeString"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v52 = 1;
    -[WKRemoteObjectEncoder encodeBool:forKey:](a2, "encodeBool:forKey:", 1, CFSTR("isReplyBlock"));
  }
  else
  {
    -[WKRemoteObjectEncoder encodeObject:forKey:](a2, "encodeObject:forKey:", NSStringFromSelector((SEL)-[NSError selector](a3, "selector")), CFSTR("selector"));
    v52 = 2;
  }
  v53 = (void *)-[NSError methodSignature](a3, "methodSignature");
  v54 = objc_msgSend(v53, "numberOfArguments");
  if (v54 > v52)
  {
    do
    {
      v55 = (const char *)objc_msgSend(v53, "getArgumentTypeAtIndex:", v52);
      v56 = v55;
      v57 = *v55;
      if (v57 == 64)
      {
        *(_QWORD *)&buf = 0;
        -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
        encodeToObjectStream((objc_object *)a2, (objc_object *)buf);
      }
      else
      {
        if (v57 > 82)
        {
          switch(*v55)
          {
            case 'c':
              LOBYTE(buf) = 0;
              -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
              encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithChar:", (char)buf));
              goto LABEL_70;
            case 'd':
              *(_QWORD *)&buf = 0;
              -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
              encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&buf));
              goto LABEL_70;
            case 'e':
            case 'g':
            case 'h':
            case 'j':
            case 'k':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'r':
              goto LABEL_93;
            case 'f':
              LODWORD(buf) = 0;
              -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
              LODWORD(v58) = buf;
              encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v58));
              goto LABEL_70;
            case 'i':
              LODWORD(buf) = 0;
              -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
              encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", buf));
              goto LABEL_70;
            case 'l':
              *(_QWORD *)&buf = 0;
              -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
              encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", (_QWORD)buf));
              goto LABEL_70;
            case 'q':
              *(_QWORD *)&buf = 0;
              -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
              encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (_QWORD)buf));
              goto LABEL_70;
            case 's':
              LOWORD(buf) = 0;
              -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
              encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)buf));
              goto LABEL_70;
            default:
              if (v57 == 83)
              {
                LOWORD(buf) = 0;
                -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
                encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", (unsigned __int16)buf));
              }
              else
              {
                if (v57 != 123)
                  goto LABEL_93;
                if (!strcmp(v55, "{_NSRange=QQ}"))
                {
                  -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
                  encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", (_QWORD)buf, *((_QWORD *)&buf + 1)));
                }
                else
                {
                  if (strcmp(v56, "{CGSize=dd}"))
                    goto LABEL_93;
                  -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
                  encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&buf));
                  encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)&buf + 1)));
                }
              }
              break;
          }
          goto LABEL_70;
        }
        if (v57 <= 66)
        {
          if (v57 != 66)
            goto LABEL_93;
          LOBYTE(buf) = 0;
          -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
          encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", buf));
        }
        else if (v57 > 75)
        {
          if (v57 == 76)
          {
            *(_QWORD *)&buf = 0;
            -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
            encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", (_QWORD)buf));
            goto LABEL_70;
          }
          if (v57 != 81)
            goto LABEL_93;
          *(_QWORD *)&buf = 0;
          -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
          encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", (_QWORD)buf));
        }
        else
        {
          if (v57 == 67)
          {
            LOBYTE(buf) = 0;
            -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
            encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", buf));
            goto LABEL_70;
          }
          if (v57 != 73)
          {
LABEL_93:
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Unsupported invocation argument type '%s'"), v56);
            goto LABEL_70;
          }
          LODWORD(buf) = 0;
          -[NSError getArgument:atIndex:](a3, "getArgument:atIndex:", &buf, v52);
          encodeToObjectStream((objc_object *)a2, (objc_object *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", buf));
        }
      }
LABEL_70:
      ++v52;
    }
    while (v54 != v52);
  }
LABEL_49:
  result = (WebKit **)WTF::ScopeExit<encodeObject(WKRemoteObjectEncoder *,objc_object *)::$_0>::~ScopeExit((uint64_t)v59);
LABEL_50:
  *v3 = v6;
  a2->_currentDictionary = currentDictionary;
  return result;
}

void sub_196CC8334(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (!*v15)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v15 = v12;
      }
      WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t)v15, (WTF::StringImpl *)a2, a3);
      v17 = *a1;
      if (*a1)
        v18 = *(_DWORD *)(v17 - 12) + 1;
      else
        v18 = 1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *a1;
      if (*a1)
        v20 = *(_DWORD *)(v19 - 12);
      else
        v20 = 0;
      v21 = (*(_DWORD *)(v19 - 16) + v20);
      v22 = *(unsigned int *)(v19 - 4);
      if (v22 > 0x400)
      {
        if (v22 > 2 * v21)
          goto LABEL_19;
      }
      else if (3 * v22 > 4 * v21)
      {
LABEL_19:
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v19 + 16 * v22;
        *(_BYTE *)(a4 + 16) = 1;
        return;
      }
      v15 = (WTF **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v15);
      v19 = *a1;
      if (*a1)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_19;
    }
    if (v16 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_10:
    v11 = i + v14;
  }
  if (!WTF::equal(v16, *a2, (const WTF::StringImpl *)a3))
    goto LABEL_10;
  v23 = *a1;
  if (*a1)
    v24 = *(unsigned int *)(v23 - 4);
  else
    v24 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v23 + 16 * v24;
  *(_BYTE *)(a4 + 16) = 0;
  v25 = v8 + 16 * v14;
  v26 = *a3;
  *a3 = 0;
  v27 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v26;
  if (v27)
    CFRelease(*(CFTypeRef *)(v27 + 8));
}

void WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;

  WTF::String::operator=((WTF::StringImpl **)a1, a2);
  v5 = *a3;
  *a3 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void API::String::create(_QWORD *a1@<X0>, WebKit **a2@<X8>)
{
  WebKit *v4;
  WebKit *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (WebKit *)API::Object::newObject(0x18uLL, 21);
  v5 = v4;
  if (*a1)
  {
    v4 = (WebKit *)WTF::String::isolatedCopy();
  }
  else
  {
    v6 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v7 = v6;
  }
  *(_QWORD *)v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v4);
  *(_QWORD *)v5 = &off_1E34AE7A0;
  *((_QWORD *)v5 + 2) = v7;
  *a2 = v5;
}

void sub_196CC8654(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = v6;
    do
    {
      v14 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13)
      {
        if (v14 != (WTF::StringImpl *)-1)
        {
          v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            CFRelease(*(CFTypeRef *)(v16 + 8));
          v17 = *(WTF::StringImpl **)v15;
          *(_QWORD *)v15 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v10);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v15 = v18;
          v19 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v15 + 8) = v19;
          v20 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v20)
            CFRelease(*(CFTypeRef *)(v20 + 8));
          v21 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v10);
            else
              *(_DWORD *)v21 -= 2;
          }
          if (v13 == a3)
            v11 = v15;
        }
      }
      else
      {
        v22 = *(_QWORD *)(v13 + 8);
        *(_QWORD *)(v13 + 8) = 0;
        if (v22)
        {
          CFRelease(*(CFTypeRef *)(v22 + 8));
          v14 = *(WTF::StringImpl **)v13;
        }
        *(_QWORD *)v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

IPC::Encoder *WebKit::RemoteObjectRegistry::sendInvocation(WebKit::RemoteObjectRegistry *this, const WebKit::RemoteObjectInvocation *a2)
{
  uint64_t *v4;
  uint64_t v5;
  void *v7;
  WebKit::ProcessThrottlerActivity *v8;
  WTF *v9;
  void *v10;
  const WebKit::RemoteObjectInvocation *v11;
  _QWORD v12[3];
  __int128 v13;

  v4 = (uint64_t *)*((_QWORD *)a2 + 2);
  if (v4)
  {
    (*(void (**)(__int128 *__return_ptr, WebKit::RemoteObjectRegistry *, const char *, uint64_t))(*(_QWORD *)this + 48))(&v13, this, "RemoteObjectRegistry invocation", 32);
    WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::ProcessThrottlerActivity>>((uint64_t *)this + 3, v4, (WebKit::ProcessThrottlerActivity **)&v13, (uint64_t)v12);
    v8 = (WebKit::ProcessThrottlerActivity *)v13;
    *(_QWORD *)&v13 = 0;
    if (v8)
    {
      WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(v8, v7);
      WTF::fastFree(v9, v10);
    }
  }
  v11 = a2;
  v12[0] = (*(uint64_t (**)(WebKit::RemoteObjectRegistry *))(*(_QWORD *)this + 56))(this);
  v12[1] = v5;
  *(_QWORD *)&v13 = &v11;
  *((_QWORD *)&v13 + 1) = this;
  return WTF::switchOn<std::variant<std::reference_wrapper<WebKit::WebProcessProxy>,std::reference_wrapper<WebKit::WebPage>>,void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>(Messages::RemoteObjectRegistry::InvokeMethod &&)::{lambda(Messages::RemoteObjectRegistry::InvokeMethod)#1}>((uint64_t)v12, &v13);
}

void sub_196CC8900(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebKit::ProcessThrottlerActivity *a13)
{
  WTF *v14;
  void *v15;

  if (a13)
  {
    WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(a13, a2);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebRemoteObjectRegistry::messageDestinationID(WebKit::WebRemoteObjectRegistry *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(_QWORD *)(v2 + 2120);
}

uint64_t WebKit::WebRemoteObjectRegistry::messageSender(WebKit::WebRemoteObjectRegistry *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v1)
    return v1 - 16;
  else
    return 0;
}

uint64_t WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = *(_QWORD *)(v4 + 8 * i);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          v18 = v16;
          v8 = *(void **)(v11 + 8 * v16);
          v16 = (v16 + v17++) & v12;
        }
        while (v8);
        *(_QWORD *)(v11 + 8 * v18) = v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::rehash(a1, v3);
}

uint64_t WebKit::WebPageProxy::windowScreenDidChange(WebKit::WebPageProxy *this, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int *v8;
  int *v9;
  int v10;
  char v11;

  v2 = a2;
  *((_DWORD *)this + 188) = a2;
  *((_BYTE *)this + 756) = 1;
  result = *((_QWORD *)this + 23);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 72))(result, a2);
  if (!*((_BYTE *)this + 729) && *((_BYTE *)this + 728))
  {
    LOBYTE(v10) = 0;
    v11 = 0;
    v5 = *((_QWORD *)this + 23);
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
      v10 = v6;
      v11 = BYTE4(v6);
    }
    v7 = (uint64_t *)(*((_QWORD *)this + 4) + 1896);
    LODWORD(v8) = v2;
    v9 = &v10;
    WebKit::AuxiliaryProcessProxy::send<Messages::EventDispatcher::PageScreenDidChange>(*((_QWORD *)this + 26), &v7, *v7, 0);
    LODWORD(v7) = v2;
    v8 = &v10;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WindowScreenDidChange>(*((_QWORD *)this + 26), (uint64_t)&v7, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
  }
  return result;
}

uint64_t WebKit::RemoteAudioSession::preferredBufferSize(WebKit::RemoteAudioSession *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 192))
    return *((_QWORD *)this + 20);
  result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((_BYTE *)this + 192))
    return *((_QWORD *)this + 20);
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::ensureConnection(WebKit::RemoteAudioSession *this)
{
  unsigned __int8 *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  WTF::StringImpl *v18;
  char v19;
  WTF::StringImpl *v20;
  unsigned int *v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WebKit::WebProcess *v34;
  WebKit::WebProcess *v35;
  unsigned int *v36;
  _BYTE v37[56];
  WTF::StringImpl *v38;
  char v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  _OWORD v43[3];
  WTF::StringImpl *v44;
  char v45;
  char v46;
  uint64_t *v47;
  int v48;
  IPC::Encoder *v49;
  uint64_t v50;

  v3 = (char *)this + 200;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 25);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v2, *((_QWORD *)this + 26), &v41);
    v5 = v41;
    if (v41)
    {
LABEL_41:
      v41 = 0;
      v32 = *(_QWORD *)(v5 + 24);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
      return v32;
    }
  }
  else
  {
    v41 = 0;
  }
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v34);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v8 = WebKit::WebProcess::ensureGPUProcessConnection(v6);
  v9 = *(_QWORD *)(v8 + 16);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEABB3C](v9);
LABEL_11:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v12 = v41;
  v41 = v8;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), v7);
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>((uint64_t)v3, &v41);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v41 + 176, (uint64_t)this + 64);
  LOBYTE(v42) = 56;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(v41 + 32), &v42, (uint64_t)this + 72, &v36);
  v13 = WebKit::RemoteAudioSession::ensureConnection(this);
  v50 = 0;
  IPC::Connection::createSyncMessageEncoder(3505, 0, &v50, (uint64_t *)&v49);
  IPC::Connection::sendSyncMessage(v13, v50, (uint64_t *)&v49, 0, (uint64_t)&v47, INFINITY);
  if (!v48)
  {
    LOBYTE(v42) = 0;
    v46 = 0;
    IPC::Decoder::decode<std::tuple<WebKit::RemoteAudioSessionConfiguration>>(v47, (uint64_t)&v36);
    if (v39)
    {
      v17 = v36;
      v43[0] = *(_OWORD *)v37;
      v43[1] = *(_OWORD *)&v37[16];
      *(_OWORD *)((char *)&v43[1] + 10) = *(_OWORD *)&v37[26];
      v18 = *(WTF::StringImpl **)&v37[48];
      v36 = 0;
      *(_QWORD *)&v37[48] = 0;
      v19 = (char)v38;
      v45 = (char)v38;
      v46 = 1;
      std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36, v16);
      if (v48)
        goto LABEL_43;
      v14 = 0;
      *(_OWORD *)&v37[8] = v43[0];
      *(_OWORD *)&v37[24] = v43[1];
      v21 = (unsigned int *)v47;
      v47 = 0;
      *(_OWORD *)&v37[34] = *(_OWORD *)((char *)&v43[1] + 10);
      v42 = 0;
      v44 = 0;
      v36 = v21;
      *(_QWORD *)v37 = v17;
      v38 = v18;
      v39 = v19;
    }
    else
    {
      std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36, v16);
      LOBYTE(v36) = 13;
      v14 = 1;
    }
    v40 = v14;
    std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v20);
    v15 = v48;
    if (v48 == -1)
    {
LABEL_27:
      v23 = v49;
      v49 = 0;
      if (v23)
      {
        IPC::Encoder::~Encoder(v23, v22);
        WTF::fastFree(v24, v25);
      }
      if (v14)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        LODWORD(v43[0]) = 0;
        memset((char *)v43 + 8, 0, 34);
      }
      else
      {
        v26 = *(WTF::StringImpl **)v37;
        v43[0] = *(_OWORD *)&v37[8];
        v43[1] = *(_OWORD *)&v37[24];
        *(_OWORD *)((char *)&v43[1] + 10) = *(_OWORD *)&v37[34];
        v27 = v38;
        *(_QWORD *)v37 = 0;
        v38 = 0;
        v28 = v39;
      }
      v42 = v26;
      v44 = v27;
      v45 = v28;
      std::optional<WebKit::RemoteAudioSessionConfiguration>::operator=[abi:sn180100]<WebKit::RemoteAudioSessionConfiguration,void>((uint64_t)this + 120, (uint64_t *)&v42);
      v30 = v44;
      v44 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v42;
      v42 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v29);
        else
          *(_DWORD *)v31 -= 2;
      }
      ((void (*)(WTF::StringImpl **, unsigned int **))off_1E34E6AB8[v14])(&v42, &v36);
      v5 = v41;
      goto LABEL_41;
    }
LABEL_26:
    ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E6B88[v15])(&v42, &v47);
    goto LABEL_27;
  }
  if (v48 == 1)
  {
    LOBYTE(v36) = (_BYTE)v47;
    v14 = 1;
    v40 = 1;
    v15 = 1;
    goto LABEL_26;
  }
LABEL_43:
  v35 = (WebKit::WebProcess *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebProcess::ensureGPUProcessConnection(v35);
}

uint64_t WebKit::WebProcess::ensureGPUProcessConnection(WebKit::WebProcess *this)
{
  WTF::RunLoop *v2;
  uint64_t result;
  void *v4;
  WebKit::GPUProcessConnection *v5;
  uint64_t v6;
  void *v7;
  WebKit::GPUProcessConnection *v8;
  unsigned __int8 **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  WebKit::WebPage *v16;
  void *v17;
  WebKit::GPUProcessConnection *v18;
  uint64_t v19;
  WebKit::GPUProcessConnection *v20[2];
  int v21;
  void *object;
  unsigned __int8 **v23;
  int v24;
  void *v25;
  uint64_t v26;
  char v27;

  v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_31;
  }
  result = *((_QWORD *)this + 42);
  if (result)
    return result;
  IPC::Connection::createConnectionIdentifierPair((uint64_t)&v24);
  if (!v27)
  {
    __break(0xC471u);
LABEL_30:
    __break(1u);
LABEL_31:
    JUMPOUT(0x196CC921CLL);
  }
  v21 = v24;
  object = v25;
  v25 = 0;
  IPC::Connection::createServerConnection((uint64_t)&v21, (mach_port_context_t *)&v23);
  if (object)
    os_release(object);
  WebKit::GPUProcessConnection::create((uint64_t *)&v23, (uint64_t *)v20);
  v5 = v20[0];
  v20[0] = 0;
  v6 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v5;
  if (v6)
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v4);
    v8 = v20[0];
    v20[0] = 0;
    if (v8)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((unsigned __int8 **)v8 + 2), v7);
  }
  v9 = (unsigned __int8 **)*((_QWORD *)this + 4);
  if (v9)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*((unsigned __int8 ***)this + 4));
  v19 = *(_QWORD *)(*((_QWORD *)this + 42) + 48);
  if (!v27)
    goto LABEL_30;
  v20[0] = (WebKit::GPUProcessConnection *)&v19;
  v20[1] = (WebKit::GPUProcessConnection *)&v26;
  IPC::Connection::send<Messages::WebProcessProxy::CreateGPUProcessConnection>((uint64_t)v9, (uint64_t **)v20);
  if (v9)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v9);
  v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v11 = v10;
  v13 = v12;
  v14 = *((_QWORD *)this + 14);
  if (v14)
    v15 = (_QWORD *)(v14 + 16 * *(unsigned int *)(v14 - 4));
  else
    v15 = 0;
  if (v15 != v10)
  {
    do
    {
      v16 = (WebKit::WebPage *)v11[1];
      if (v16)
      {
        WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(v20, *((_QWORD *)this + 42));
        WebKit::WebPage::gpuProcessConnectionDidBecomeAvailable(v16, v20[0]);
        v18 = v20[0];
        v20[0] = 0;
        if (v18)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((unsigned __int8 **)v18 + 2), v17);
      }
      while (1)
      {
        v11 += 2;
        if (v11 == v13)
          break;
        if ((unint64_t)(*v11 + 1) > 1)
          goto LABEL_24;
      }
      v11 = v13;
LABEL_24:
      ;
    }
    while (v11 != v15);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v23);
  std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24);
  return *((_QWORD *)this + 42);
}

uint64_t WebKit::WebPage::gpuProcessConnectionDidBecomeAvailable(WebKit::WebPage *this, WebKit::GPUProcessConnection *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8[2];
  uint64_t v9;

  result = WebKit::GPUProcessConnection::createVisibilityPropagationContextForPage(a2, this);
  v5 = *((_QWORD *)this + 308);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 4))
    {
      v6 = *((_QWORD *)this + 5);
      v8[1] = (uint64_t *)((char *)this + 2464);
      v9 = v6;
      v7 = *((_QWORD *)a2 + 3);
      v8[0] = &v9;
      return IPC::Connection::send<Messages::GPUConnectionToWebProcess::SetMediaEnvironment>(v7, v8, 0, 0, 0);
    }
  }
  return result;
}

uint64_t WebKit::GPUProcessConnection::createVisibilityPropagationContextForPage(WebKit::GPUProcessConnection *this, WebKit::WebPage *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;

  v2 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)a2 + 265);
  v4 = *((_QWORD *)a2 + 6);
  v6 = *((_QWORD *)a2 + 5);
  v7 = v3;
  if (v4)
    LOBYTE(v4) = *(_BYTE *)(v4 + 449) != 0;
  v8[0] = &v7;
  v8[1] = &v6;
  v9 = v4;
  return IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateVisibilityPropagationContextForPage>(v2, (uint64_t)v8, 0, 0, 0);
}

unsigned __int8 *WebKit::GPUProcessConnection::didReceiveMessage(unsigned int **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v6;
  unsigned __int8 *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];

  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v10, (uint64_t)this);
  v6 = *((unsigned __int16 *)a3 + 25);
  switch(v6)
  {
    case '7':
      result = (unsigned __int8 *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)v8)
        result = (unsigned __int8 *)WebKit::GPUProcessConnection::resetAudioMediaStreamTrackRendererInternalUnit((uint64_t)this, (uint64_t)result);
      break;
    case '6':
      result = (unsigned __int8 *)IPC::Decoder::decode<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>>((uint64_t *)a3, v11);
      if (v11[32])
      {
        WebCore::PlatformMediaSessionManager::sharedManager((WebCore::PlatformMediaSessionManager *)result);
        result = (unsigned __int8 *)WebCore::PlatformMediaSessionManager::processDidReceiveRemoteControlCommand();
      }
      break;
    case '5':
      result = (unsigned __int8 *)IPC::Decoder::decode<std::tuple<std::optional<WebKit::GPUProcessConnectionInfo>>>((uint64_t)v11, (uint64_t *)a3);
      if (v11[44])
        result = (unsigned __int8 *)WebKit::GPUProcessConnection::didInitialize((uint64_t)this, v11);
      break;
    default:
      result = (unsigned __int8 *)WebKit::GPUProcessConnection::dispatchMessage(this, a2, a3);
      break;
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v8);
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(unsigned __int8 *result, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v10[2];
  BOOL v11;

  v2 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEABB3C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v7 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = __ldxr(v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_8:
  if (!v5)
  {
    v10[0] = v2;
    v10[1] = v7;
    v11 = v6;
    return (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(void)const::{lambda(void)#1}::operator()((uint64_t)v10, a2);
  }
  return result;
}

void ___ZN6WebKit30isParentProcessAFullWebBrowserERNS_16AuxiliaryProcessE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint8_t buf[32];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  if (v1)
  {
    v2 = *(unsigned __int8 **)v1;
    if (__ldaxr(*(unsigned __int8 **)v1))
    {
      __clrex();
    }
    else if (!__stxr(1u, v2))
    {
LABEL_5:
      ++*((_QWORD *)v2 + 1);
      v4 = __ldxr(v2);
      if (v4 == 1)
      {
        if (!__stlxr(0, v2))
        {
LABEL_10:
          if (*(_QWORD *)(v1 + 352))
          {
            xpc_connection_get_audit_token();
            byte_1ECE721C3 = WTF::hasEntitlement();
          }
          else
          {
            v14 = off_1ECE71C40;
            if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "Unable to get parent process audit token", buf, 2u);
            }
          }
          v5 = *(unsigned __int8 **)v1;
          if (__ldaxr(v5))
          {
            __clrex();
          }
          else if (!__stxr(1u, v5))
          {
LABEL_15:
            v7 = *((_QWORD *)v5 + 1);
            v8 = v7 - 1;
            *((_QWORD *)v5 + 1) = v7 - 1;
            if (v7 == 1)
            {
              v16 = *((_QWORD *)v5 + 2);
              v9 = *((_QWORD *)v5 + 3);
              *((_QWORD *)v5 + 3) = 0;
              v10 = v16 == 0;
            }
            else
            {
              v9 = 0;
              v10 = 0;
            }
            v11 = __ldxr(v5);
            if (v11 == 1)
            {
              if (!__stlxr(0, v5))
                goto LABEL_19;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_19:
            if (!v8)
            {
              v12 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v12 = off_1E34ACA48;
              *(_QWORD *)(v12 + 8) = v5;
              *(_QWORD *)(v12 + 16) = v9;
              *(_BYTE *)(v12 + 24) = v10;
              *(_QWORD *)buf = v12;
              WTF::ensureOnMainRunLoop();
              v13 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            return;
          }
          MEMORY[0x19AEABB3C](v5);
          goto LABEL_15;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v2);
      goto LABEL_10;
    }
    MEMORY[0x19AEABB3C](v2);
    goto LABEL_5;
  }
  v15 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, "Unable to get parent process connection", buf, 2u);
  }
}

void sub_196CC96BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebKit::GPUProcessConnectionInfo>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  __int128 v9;
  _BYTE v10[28];
  char v11;

  result = IPC::Decoder::decode<std::optional<WebKit::GPUProcessConnectionInfo>>((uint64_t)&v9, a2);
  if (v11)
  {
    v5 = *(_OWORD *)v10;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 28) = *(_OWORD *)&v10[12];
    *(_BYTE *)(a1 + 44) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 44) = 0;
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::GPUProcessConnectionInfo>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::GPUProcessConnectionInfo>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 44))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::GPUProcessConnectionInfo>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  char v5;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 44) = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      result = IPC::Decoder::decode<WebKit::GPUProcessConnectionInfo>((uint64_t)v7, a2);
      v5 = v9;
      if (v9)
      {
        v6 = v7[1];
        *(_OWORD *)a1 = v7[0];
        *(_OWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 32) = v8;
        v5 = 1;
        *(_BYTE *)(a1 + 40) = 1;
      }
      else
      {
        *(_BYTE *)a1 = 0;
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 40) = 0;
      v5 = 1;
    }
    *(_BYTE *)(a1 + 44) = v5;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::GPUProcessConnectionInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::GPUProcessConnectionInfo,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 40))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::GPUProcessConnectionInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  uint64_t result;
  __int128 v6;
  int v7;
  _OWORD v8[2];
  char v9;
  char v10;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCAuditToken>>(v8, a1);
  v4 = IPC::Decoder::decode<BOOL>(a1);
  result = IPC::Decoder::decode<BOOL>(a1);
  if (!*a1)
    goto LABEL_8;
  if (!v10 || (v6 = v8[1], LOBYTE(v7) = v9, v4 <= 0xFFu) || (unsigned __int16)result <= 0xFFu)
  {
    __break(1u);
LABEL_8:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
    return result;
  }
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 36) = v4;
  *(_BYTE *)(a2 + 37) = result;
  *(_BYTE *)(a2 + 40) = 1;
  return result;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateVisibilityPropagationContextForPage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 40;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,BOOL>,0ul,1ul,2ul>(v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>(uint64_t a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  unsigned __int8 *v5;

  if (*(_QWORD *)a2)
  {
    v4 = *(WTF::ThreadSafeWeakPtrControlBlock **)(*(_QWORD *)a2 + 16);
    if (v4)
      v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  else
  {
    v4 = 0;
  }
  v5 = *(unsigned __int8 **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::RemoteAudioSessionConfiguration>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebKit::RemoteAudioSessionConfiguration>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 72))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::RemoteAudioSessionConfiguration>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::RemoteAudioSessionConfiguration,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 72))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::RemoteAudioSessionConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  char v29;
  char v30;
  WTF::StringImpl *result;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  WTF::StringImpl *v49;
  char v50;
  WTF::StringImpl *v51;
  char v52;

  IPC::Decoder::decode<WTF::String>(a1, &v51);
  v4 = IPC::Decoder::decode<float>(a1);
  v5 = IPC::Decoder::decode<unsigned long long>(a1);
  v7 = v6;
  v8 = IPC::Decoder::decode<unsigned long long>(a1);
  v10 = v9;
  v11 = IPC::Decoder::decode<unsigned long long>(a1);
  v13 = v12;
  v14 = IPC::Decoder::decode<unsigned long long>(a1);
  v46 = v8;
  v47 = v15;
  v16 = a1[1];
  v17 = *a1;
  v18 = a1[2] - *a1;
  v44 = v14;
  v45 = v11;
  v48 = v13;
  if (v16 <= v18)
    goto LABEL_34;
  v19 = v5;
  v20 = (unsigned __int8 *)(v17 + v18);
  v21 = v17 + v18 + 1;
  a1[2] = v21;
  if (!v17)
  {
    v35 = v16;
    v36 = 0;
    goto LABEL_35;
  }
  v22 = *v20;
  if (v22 < 2)
  {
    v23 = 0;
    v24 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (!v39 || !v16)
    {
      v5 = 0;
      v40 = 0;
      v17 = 0;
      v23 = 1;
LABEL_39:
      *a1 = 0;
      a1[1] = 0;
      v41 = a1[3];
      if (v41 && v40)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v17, v40);
        v27 = 0;
        v17 = *a1;
        v16 = a1[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v27 = 0;
      }
      goto LABEL_41;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v17);
    v24 = 0;
    v17 = *a1;
    v16 = a1[1];
    v23 = 1;
    v21 = a1[2];
LABEL_5:
    if (v22)
      v5 = v24;
    else
      v5 = 0;
    v25 = v21 - v17;
    if (v16 <= v25)
    {
      v40 = 0;
      v43 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v43 && v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
        v17 = *a1;
        v40 = a1[1];
      }
      else
      {
        v17 = 0;
      }
      goto LABEL_39;
    }
    v26 = (unsigned __int8 *)(v17 + v25);
    a1[2] = (uint64_t)(v26 + 1);
    if (!v17)
    {
      v40 = v16;
      goto LABEL_39;
    }
    v27 = *v26;
    if (v27 < 2)
    {
      v28 = 0;
      v29 = 1;
      goto LABEL_12;
    }
LABEL_41:
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42 && v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v17);
    v29 = 0;
    v28 = 1;
LABEL_12:
    v30 = v27 ? v29 : 0;
    IPC::Decoder::decode<WTF::String>(a1, &v49);
    result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a1);
    if (!*a1)
      break;
    if (v52)
    {
      v33 = v51;
      v51 = 0;
      if ((v4 & 0xFF00000000) != 0)
      {
        if (v7)
        {
          if (v10)
          {
            if (v48)
            {
              if (v47)
              {
                if (!v23 && !v28)
                {
                  if (v50)
                  {
                    v34 = v49;
                    v49 = 0;
                    if ((unsigned __int16)result > 0xFFu)
                    {
                      *(_QWORD *)a2 = v33;
                      *(_DWORD *)(a2 + 8) = v4;
                      *(_QWORD *)(a2 + 16) = v19;
                      *(_QWORD *)(a2 + 24) = v46;
                      *(_QWORD *)(a2 + 32) = v45;
                      *(_QWORD *)(a2 + 40) = v44;
                      *(_BYTE *)(a2 + 48) = v5;
                      *(_BYTE *)(a2 + 49) = v30;
                      *(_QWORD *)(a2 + 56) = v34;
                      *(_BYTE *)(a2 + 64) = (_BYTE)result;
                      *(_BYTE *)(a2 + 72) = 1;
                      goto LABEL_27;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_34:
    v35 = 0;
    v36 = 0;
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        v36 = *a1;
        v35 = a1[1];
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
    }
LABEL_35:
    v19 = v5;
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (v38 && v35)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
      v22 = 0;
      v17 = *a1;
      v16 = a1[1];
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v22 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (v50)
  {
    result = v49;
    v49 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_27:
  if (v52)
  {
    result = v51;
    v51 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196CC9EE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, char a18)
{
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::SetMediaEnvironment>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 49;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a2[1]);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

double WebKit::ProcessAssertion::remainingRunTimeInSeconds(WebKit::ProcessAssertion *this)
{
  int v1;
  uint64_t v2;
  void *v3;
  double result;
  NSObject *v5;
  const char *v6;
  int v7;
  int v8;
  uint64_t v9;

  v1 = (int)this;
  v9 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", this);
  if (!v2)
  {
    v5 = qword_1ECE71640;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_ERROR))
      return 0.0;
    v7 = 67109120;
    v8 = v1;
    v6 = "ProcessAssertion::remainingRunTimeInSeconds failed to get identifier for process with PID=%d";
LABEL_9:
    _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v7, 8u);
    return 0.0;
  }
  v3 = (void *)objc_msgSend(MEMORY[0x1E0D87D68], "handleForIdentifier:error:", v2, 0);
  if (v3)
  {
    objc_msgSend((id)objc_msgSend(v3, "activeLimitations"), "runTime");
    return result;
  }
  v5 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_ERROR))
  {
    v7 = 67109120;
    v8 = v1;
    v6 = "ProcessAssertion::remainingRunTimeInSeconds failed to get handle for process with PID=%d";
    goto LABEL_9;
  }
  return 0.0;
}

uint64_t WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(uint64_t a1, uint64_t a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  unsigned __int8 *v5;
  WTF::ThreadSafeWeakPtrControlBlock *v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 **v18;
  WTF::ThreadSafeWeakPtrControlBlock *v19;
  void *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v26;
  int v27;
  void *v28;
  int v29;
  _BYTE v30[24];
  uint64_t v31;
  WTF::ThreadSafeWeakPtrControlBlock *v32;

  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v4))
  {
    result = 98;
    __break(0xC471u);
    return result;
  }
  v5 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](a1 + 16);
LABEL_6:
  v7 = (WTF::ThreadSafeWeakPtrControlBlock *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakRef(v7);
  v32 = (WTF::ThreadSafeWeakPtrControlBlock *)result;
  if (!result)
    goto LABEL_37;
  v9 = *(_DWORD *)(a1 + 12);
  v10 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  if (v10 > v9)
  {
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v12 = *(_DWORD *)(v11 - 4);
      if (!v12)
        goto LABEL_29;
      v13 = 0;
      v14 = v12 - 1;
      do
      {
        v15 = v14;
        v16 = (_QWORD *)(v11 + 16 * v14);
        if ((unint64_t)(*v16 + 1) >= 2)
        {
          v17 = v11 + 16 * v14;
          v19 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v17 + 8);
          v18 = (unsigned __int8 **)(v17 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v19))
          {
            *v16 = -1;
            v21 = *v18;
            *v18 = 0;
            if (v21)
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v21, v20);
            ++v13;
          }
        }
        --v14;
      }
      while (v15);
      v11 = *(_QWORD *)a1;
      if (v13)
      {
        *(_DWORD *)(v11 - 16) += v13;
        v22 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v23 = *(_DWORD *)(v22 - 12);
        else
          v23 = 0;
        *(_DWORD *)(v22 - 12) = v23 - v13;
        v11 = *(_QWORD *)a1;
      }
      if (v11)
      {
        v24 = *(_DWORD *)(v11 - 4);
        if (v24 >= 9 && 6 * *(_DWORD *)(v11 - 12) < v24)
        {
          WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::shrinkToBestSize((uint64_t *)a1);
          v11 = *(_QWORD *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v11)
          {
            v26 = 0;
            goto LABEL_33;
          }
LABEL_30:
          v26 = *(_DWORD *)(v11 - 12);
          v27 = 0x7FFFFFFF;
          if (v26 >= 0x7FFFFFFF)
            goto LABEL_34;
          goto LABEL_33;
        }
LABEL_29:
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_30;
      }
    }
    v26 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_33:
    v27 = v26;
LABEL_34:
    *(_DWORD *)(a1 + 12) = 2 * v27;
  }
  v31 = a2;
  WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>((uint64_t *)a1, &v31, (uint64_t *)&v32, (uint64_t)v30);
  result = (uint64_t)v32;
  v32 = 0;
  if (result)
    result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, v28);
LABEL_37:
  v29 = __ldxr(v5);
  if (v29 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 16));
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 16));
  return result;
}

uint64_t `non-virtual thunk to'WebKit::RemoteAudioSession::controlBlock(WebKit::RemoteAudioSession *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebKit::ProcessAndUIAssertion::ProcessAndUIAssertion(uint64_t a1, _QWORD *a2, _DWORD **a3, char a4)
{
  uint64_t v5;

  v5 = WebKit::ProcessAssertion::ProcessAssertion(a1, a2, a3, a4);
  *(_QWORD *)v5 = off_1E34C9118;
  *(_QWORD *)(v5 + 176) = 0;
  *(_BYTE *)(v5 + 184) = 0;
  WebKit::ProcessAndUIAssertion::updateRunInBackgroundCount((_BYTE *)v5);
  return a1;
}

void sub_196CCA3E0(_Unwind_Exception *a1)
{
  WebKit::ProcessAssertion *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 22);
  *((_QWORD *)v1 + 22) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebKit::ProcessAssertion::~ProcessAssertion(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessAssertion::ProcessAssertion(uint64_t a1, _QWORD *a2, _DWORD **a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  WTF::ThreadSafeWeakPtrControlBlock *v14;
  WTF::ThreadSafeWeakPtrControlBlock *v15;
  WTF::ThreadSafeWeakPtrControlBlock *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  const void *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  void *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  const void *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  NSObject *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::ThreadSafeWeakPtrControlBlock *v48;
  _QWORD *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  _BYTE buf[32];
  void *aBlock[2];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)a1 = off_1E34C90D0;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = a4;
  v9 = a2[17];
  if (v9)
    LODWORD(v9) = *(_DWORD *)(v9 + 108);
  *(_DWORD *)(a1 + 20) = v9;
  v10 = *a3;
  if (*a3)
    *v10 += 2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v11 = a2[17];
  if (!v11)
    goto LABEL_93;
  std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100](buf, v11 + 40);
  if (!buf[16])
    goto LABEL_93;
  if (*(_DWORD *)&buf[8] != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34C9568[*(unsigned int *)&buf[8]])(&v53, buf);
  switch(*(_BYTE *)(a1 + 16))
  {
    case 1:
      v12 = "Background";
      goto LABEL_15;
    case 2:
      v12 = "UnboundedNetworking";
      v13 = 20;
      break;
    case 3:
      v12 = "Foreground";
LABEL_15:
      v13 = 11;
      break;
    case 4:
      v12 = "MediaPlayback";
      goto LABEL_19;
    case 5:
      v12 = "FinishTaskCanSleep";
      v13 = 19;
      break;
    case 6:
      v12 = "FinishTaskInterruptable";
      v13 = 24;
      break;
    case 7:
      v12 = "BoostedJetsam";
LABEL_19:
      v13 = 14;
      break;
    default:
      v12 = "Suspended";
      v13 = 10;
      break;
  }
  v14 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 8);
  if (v14)
  {
    v48 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v14);
    v15 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 8);
    if (v15)
    {
      v16 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v15);
      goto LABEL_23;
    }
  }
  else
  {
    v48 = 0;
  }
  v16 = 0;
LABEL_23:
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a2 + 120))(&v52, a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v51 = v53;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v50 = v53;
  v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v17 = &off_1E34C9A40;
  *((_QWORD *)v17 + 1) = v16;
  *((_QWORD *)v17 + 2) = a1;
  *((_QWORD *)v17 + 3) = v12;
  *((_QWORD *)v17 + 4) = v13;
  v53 = v17;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v18 = &off_1E34C9A90;
  v18[1] = v48;
  v18[2] = a1;
  v18[3] = v12;
  v18[4] = v13;
  v49 = v18;
  WebKit::AssertionCapability::AssertionCapability(buf, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v53, (uint64_t *)&v49);
  if (*(_BYTE *)(a1 + 128))
  {
    v20 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8])
      CFRetain(*(CFTypeRef *)&buf[8]);
    v21 = *(const void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v20;
    if (v21)
      CFRelease(v21);
    v22 = *(_QWORD *)&buf[16];
    *(_QWORD *)&buf[16] = 0;
    v23 = *(WTF::StringImpl **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v22;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v19);
      else
        *(_DWORD *)v23 -= 2;
    }
    v27 = *(_QWORD *)&buf[24];
    *(_QWORD *)&buf[24] = 0;
    v28 = *(WTF::StringImpl **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v27;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v19);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = aBlock[0];
    aBlock[0] = 0;
    v30 = *(WTF::StringImpl **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v19);
      else
        *(_DWORD *)v30 -= 2;
    }
    _Block_release(*(const void **)(a1 + 112));
    v31 = aBlock[1];
    aBlock[1] = 0;
    *(_QWORD *)(a1 + 112) = v31;
    _Block_release(*(const void **)(a1 + 120));
    v32 = v56;
    v56 = 0;
    *(_QWORD *)(a1 + 120) = v32;
  }
  else
  {
    v24 = *(const void **)&buf[8];
    *(_QWORD *)(a1 + 72) = off_1E34AB458;
    *(_QWORD *)(a1 + 80) = v24;
    if (v24)
      CFRetain(v24);
    *(_QWORD *)(a1 + 72) = &off_1E34AB430;
    v25 = *(_OWORD *)aBlock;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)&buf[16];
    *(_OWORD *)&buf[16] = 0u;
    *(_OWORD *)aBlock = 0u;
    *(_OWORD *)(a1 + 104) = v25;
    v26 = v56;
    v56 = 0;
    *(_QWORD *)(a1 + 120) = v26;
    *(_BYTE *)(a1 + 128) = 1;
  }
  _Block_release(0);
  _Block_release(aBlock[1]);
  v34 = (WTF::StringImpl *)aBlock[0];
  aBlock[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v33);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = *(WTF::StringImpl **)&buf[24];
  *(_QWORD *)&buf[24] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = *(WTF::StringImpl **)&buf[16];
  *(_QWORD *)&buf[16] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v33);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = *(const void **)&buf[8];
  *(_QWORD *)buf = off_1E34AB458;
  *(_QWORD *)&buf[8] = 0;
  if (v37)
    CFRelease(v37);
  if (v49)
    (*(void (**)(_QWORD *))(*v49 + 8))(v49);
  if (v53)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v53 + 8))(v53);
  v38 = v50;
  v50 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v33);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = v51;
  v51 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v33);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v52;
  v52 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v33);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = a2[17];
  if (v41)
  {
    std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100](buf, v41 + 40);
    LODWORD(v41) = buf[16];
  }
  else
  {
    buf[0] = 0;
    buf[16] = 0;
  }
  if (*(unsigned __int8 *)(a1 + 168) != (_DWORD)v41)
  {
    if (*(_BYTE *)(a1 + 168))
    {
      v42 = *(unsigned int *)(a1 + 160);
      if ((_DWORD)v42 != -1)
        ((void (*)(WTF::StringImpl **, uint64_t))off_1E34C9568[v42])(&v53, a1 + 152);
      v43 = 0;
      *(_DWORD *)(a1 + 160) = -1;
    }
    else
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 152, (uint64_t)buf);
      v43 = 1;
    }
    *(_BYTE *)(a1 + 168) = v43;
    goto LABEL_86;
  }
  if (*(_BYTE *)(a1 + 168))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>>(a1 + 152, (uint64_t)buf);
LABEL_86:
    if (buf[16] && *(_DWORD *)&buf[8] != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34C9568[*(unsigned int *)&buf[8]])(&v53, buf);
  }
  if (*(_BYTE *)(a1 + 128) && *(_QWORD *)(a1 + 80))
    return a1;
  v44 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v12;
    _os_log_impl(&dword_196BCC000, v44, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion() Failed to create capability %s", buf, 0x16u);
  }
LABEL_93:
  (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a2 + 120))(buf, a2);
  WebKit::ProcessAssertion::init((WebKit::ProcessAssertion *)a1, *(const WTF::String **)buf);
  v46 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v45);
    else
      *(_DWORD *)v46 -= 2;
  }
  return a1;
}

void sub_196CCAAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, WTF::ThreadSafeWeakPtrControlBlock *a10, const void **a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, CFTypeRef cf, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,void *a22,void *aBlock)
{
  uint64_t v23;
  uint64_t v24;
  WebKit::ExtensionCapabilityGrant *v25;
  const void **v26;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  const void *v33;
  WTF::StringImpl *v34;

  if ((_BYTE)a19 && (_DWORD)cf != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E34C9568[cf])(&a16, &a17);
  if (*(_BYTE *)(v23 + 168))
  {
    v28 = *(unsigned int *)(v23 + 160);
    if ((_DWORD)v28 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E34C9568[v28])(&a17, v24);
    *(_DWORD *)(v23 + 160) = -1;
  }
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v25);
  if (*(_BYTE *)(v23 + 128))
    WebKit::AssertionCapability::~AssertionCapability(a11);
  v30 = *(_QWORD *)(v23 + 64);
  *(_QWORD *)(v23 + 64) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *a9;
  *a9 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *(const void **)(v23 + 40);
  *(_QWORD *)(v23 + 40) = 0;
  if (v32)
    CFRelease(v32);
  v33 = *v26;
  *v26 = 0;
  if (v33)
    CFRelease(v33);
  v34 = *(WTF::StringImpl **)(v23 + 24);
  *(_QWORD *)(v23 + 24) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v29);
    else
      *(_DWORD *)v34 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WebKit::AssertionCapability::AssertionCapability(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  WTF *v24;
  uint8_t buf[4];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E34AB430;
  a1[1] = 0;
  v8 = *a2;
  *a2 = 0;
  a1[2] = v8;
  v9 = *a3;
  *a3 = 0;
  a1[3] = v9;
  v10 = *a4;
  *a4 = 0;
  a1[4] = v10;
  v11 = a1 + 4;
  v12 = MEMORY[0x1E0C809A0];
  v13 = *a5;
  if (*a5)
  {
    *a5 = 0;
    v14 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v14 = v12;
    v14[1] = 50331650;
    v14[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v14[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::descriptor;
    v14[4] = v13;
  }
  else
  {
    v14 = _Block_copy(0);
  }
  a1[5] = v14;
  v15 = *a6;
  if (*a6)
  {
    *a6 = 0;
    v16 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v16 = v12;
    v16[1] = 50331650;
    v16[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v16[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::descriptor;
    v16[4] = v15;
  }
  else
  {
    v16 = _Block_copy(0);
  }
  a1[6] = v16;
  v17 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    v18 = v24 ? (uint64_t)v24 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v26 = v18;
    _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "AssertionCapability::AssertionCapability: taking assertion %{public}s", buf, 0xCu);
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, v19);
      else
        --*(_DWORD *)v24;
    }
  }
  if (MEMORY[0x19AEABBCC](*v11, "Suspended", 9))
  {
    v20 = (const void *)objc_msgSend(MEMORY[0x1E0C926F0], "suspended");
    v21 = v20;
    if (!v20)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (MEMORY[0x19AEABBCC](*v11, "Background", 10))
  {
    v20 = (const void *)objc_msgSend(MEMORY[0x1E0C926F0], "background");
    v21 = v20;
    if (!v20)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!MEMORY[0x19AEABBCC](*v11, "Foreground", 10))
    return a1;
  v20 = (const void *)objc_msgSend(MEMORY[0x1E0C926F0], "foreground");
  v21 = v20;
  if (v20)
LABEL_23:
    CFRetain(v20);
LABEL_24:
  v22 = (const void *)a1[1];
  a1[1] = v21;
  if (v22)
    CFRelease(v22);
  return a1;
}

void sub_196CCB024(_Unwind_Exception *a1)
{
  uint64_t v1;
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;

  _Block_release(*(const void **)(v1 + 48));
  _Block_release(*(const void **)(v1 + 40));
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(const void **)(v1 + 8);
  *(_QWORD *)v1 = off_1E34AB458;
  *(_QWORD *)(v1 + 8) = 0;
  if (v8)
    CFRelease(v8);
  _Unwind_Resume(a1);
}

_BYTE *WebKit::ProcessAndUIAssertion::updateRunInBackgroundCount(_BYTE *this)
{
  char *v1;
  char v2;

  if (this[48])
  {
    v1 = this + 184;
    if (!this[184])
      return this;
  }
  else
  {
    v1 = this + 184;
    if (this[184] == (this[16] != 0))
      return this;
    if (this[16])
    {
      this = (_BYTE *)objc_msgSend(+[WKProcessAssertionBackgroundTaskManager shared](WKProcessAssertionBackgroundTaskManager, "shared"), "addAssertionNeedingBackgroundTask:", this);
      v2 = 1;
      goto LABEL_7;
    }
  }
  objc_msgSend(+[WKProcessAssertionBackgroundTaskManager shared](WKProcessAssertionBackgroundTaskManager, "shared"), "removeAssertionNeedingBackgroundTask:", this);
  this = (_BYTE *)objc_msgSend(+[WKProcessAssertionBackgroundTaskManager shared](WKProcessAssertionBackgroundTaskManager, "shared"), "_updateBackgroundTask");
  v2 = 0;
LABEL_7:
  *v1 = v2;
  return this;
}

void sub_196CCB4EC(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v5;

  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  goto LABEL_8;
}

void sub_196CCB7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

BOOL WTF::ThreadSafeWeakHashSet<WebKit::ProcessAndUIAssertion>::isEmptyIgnoringNullReferences(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  WTF::ThreadSafeWeakPtrControlBlock *v14;
  void *v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  unsigned int v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _BOOL8 HasStartedDeletion;
  int v29;

  v2 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 16);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD **)a1;
  if (v5 <= v4)
    goto LABEL_33;
  if (v6)
  {
    v7 = *((_DWORD *)v6 - 1);
    if (!v7)
      goto LABEL_27;
    v8 = 0;
    v9 = v7 - 1;
    do
    {
      v10 = v9;
      v11 = &v6[2 * v9];
      if ((unint64_t)(*v11 + 1) >= 2)
      {
        v12 = &v6[2 * v9];
        v14 = (WTF::ThreadSafeWeakPtrControlBlock *)v12[1];
        v13 = (unsigned __int8 **)(v12 + 1);
        if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v14))
        {
          *v11 = -1;
          v16 = *v13;
          *v13 = 0;
          if (v16)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, v15);
          ++v8;
        }
      }
      --v9;
    }
    while (v10);
    v6 = *(_QWORD **)a1;
    if (v8)
    {
      *((_DWORD *)v6 - 4) += v8;
      v17 = *(_QWORD **)a1;
      if (*(_QWORD *)a1)
        v18 = *((_DWORD *)v17 - 3);
      else
        v18 = 0;
      *((_DWORD *)v17 - 3) = v18 - v8;
      v6 = *(_QWORD **)a1;
    }
    if (v6)
    {
      v19 = *((_DWORD *)v6 - 1);
      if (v19 >= 9 && 6 * *((_DWORD *)v6 - 3) < v19)
      {
        WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::shrinkToBestSize((uint64_t *)a1);
        v6 = *(_QWORD **)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v6)
        {
          v21 = 0;
          goto LABEL_31;
        }
LABEL_28:
        v21 = *((_DWORD *)v6 - 3);
        v22 = 0x7FFFFFFF;
        if (v21 >= 0x7FFFFFFF)
          goto LABEL_32;
        goto LABEL_31;
      }
LABEL_27:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_28;
    }
  }
  v6 = 0;
  v21 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_31:
  v22 = v21;
LABEL_32:
  *(_DWORD *)(a1 + 12) = 2 * v22;
LABEL_33:
  v23 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v6);
  v24 = v23;
  v26 = v25;
  if (v6)
    v27 = &v6[2 * *((unsigned int *)v6 - 1)];
  else
    v27 = 0;
  if (v27 == v23)
  {
    HasStartedDeletion = 1;
  }
  else
  {
    do
    {
      HasStartedDeletion = WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion((WTF::ThreadSafeWeakPtrControlBlock *)v24[1]);
      if (!HasStartedDeletion)
        break;
      while (1)
      {
        v24 += 2;
        if (v24 == v26)
          break;
        if ((unint64_t)(*v24 + 1) > 1)
          goto LABEL_42;
      }
      v24 = v26;
LABEL_42:
      ;
    }
    while (v24 != v27);
  }
  v29 = __ldxr(v2);
  if (v29 == 1)
  {
    if (!__stlxr(0, v2))
      return HasStartedDeletion;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return HasStartedDeletion;
}

void sub_196CCBA18(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

BOOL WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(WTF::ThreadSafeWeakPtrControlBlock *this)
{
  uint64_t v3;
  int v4;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  v3 = *((_QWORD *)this + 3);
  v4 = __ldxr((unsigned __int8 *)this);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return v3 == 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(this);
  return v3 == 0;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[2 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v1];
  if ((_DWORD)v1)
  {
    v3 = 16 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v3 -= 16;
      if (!v3)
        return v2;
    }
  }
  return result;
}

_QWORD *WebKit::WebProcessProxy::environmentIdentifier@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  char v21;
  unsigned int v22;

  v2 = this;
  v4 = (_DWORD *)this[134];
  if (v4 && v4[1])
  {
LABEL_29:
    *v4 += 2;
    goto LABEL_30;
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  WTF::StringBuilder::append();
  v5 = v2[17];
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 108);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = -v6;
      v8 = 1;
      do
      {
        ++v8;
        v9 = v7 >= 0xA;
        v7 /= 0xAu;
      }
      while (v9);
      goto LABEL_11;
    }
  }
  else
  {
    v6 = 0;
  }
  v10 = 0;
  v11 = v6;
  do
  {
    ++v10;
    v12 = v11 > 9;
    v11 /= 0xAu;
  }
  while (v12);
LABEL_11:
  v13 = (void *)MEMORY[0x19AEAB398](&v18);
  if (v13)
  {
    v22 = v6;
    WTF::StringTypeAdapter<int,void>::writeTo<unsigned char>(&v22, v13);
  }
  v15 = v18;
  if (v18
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v18),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v18),
        (v15 = v18) != 0))
  {
    *(_DWORD *)v15 += 2;
  }
  v16 = (WTF::StringImpl *)v2[134];
  v2[134] = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  this = v18;
  v18 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v14);
    else
      *(_DWORD *)this -= 2;
  }
  v4 = (_DWORD *)v2[134];
  if (v4)
    goto LABEL_29;
LABEL_30:
  *a2 = v4;
  return this;
}

uint64_t WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (unsigned __int8 *)v23[1];
          v23[1] = 0;
          if (v24)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v24, v8);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(unsigned __int8 **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, v8);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(unsigned __int8 **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::rehash(a1, v3);
}

uint64_t *WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
    result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, a2);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      result = WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::expand(v6, v16);
      v16 = result;
      v24 = *v6;
      if (*v6)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  v29 = v24 + 16 * v27;
  v28 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

_QWORD *WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (_QWORD *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          v15 = (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::lookupForReinsert(a1, v13);
          v16 = (unsigned __int8 *)v15[1];
          v15[1] = 0;
          if (v16)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, v10);
          *v15 = *v13;
          v17 = v13[1];
          v13[1] = 0;
          v15[1] = v17;
          v18 = (unsigned __int8 *)v13[1];
          v13[1] = 0;
          if (v18)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, v10);
          if (v13 == a3)
            v11 = v15;
        }
        else
        {
          v14 = (unsigned __int8 *)v13[1];
          v13[1] = 0;
          if (v14)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v14, v10);
        }
      }
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

_QWORD *WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::rehash(a1, v5, a2);
}

void IPC::ArgumentCoder<std::optional<WebCore::ExceptionDetails>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionDetails> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  WebKit::WebFrame *v6;
  WebCore::DOMWrapperWorld *v7;

  v4 = *(unsigned __int8 *)(a2 + 32);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 32))
    {
      IPC::ArgumentCoder<WebCore::ExceptionDetails,void>::encode(a1, a2);
    }
    else
    {
      v6 = (WebKit::WebFrame *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::WebFrame::jsContextForWorld(v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

uint64_t WebKit::WebFrame::jsContextForWorld(WebKit::WebFrame *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 144))
    return 0;
  v6 = (unsigned int *)(v3 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v4 = *(_QWORD *)(WebCore::ScriptController::jsWindowProxy(*(WebCore::ScriptController **)(v3 + 304), a2) + 16);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  return v4;
}

void IPC::ArgumentCoder<WebCore::ExceptionDetails,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 24));
}

IPC::Encoder *WebKit::WebDeviceOrientationUpdateProvider::stopUpdatingDeviceMotion(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;
  IPC::Encoder *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;

  v4 = (unsigned int *)(a1 + 64);
  result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 64));
  if ((result & 1) == 0)
  {
    WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MotionManagerClient>(v4, a2);
    result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)v4);
    if ((_DWORD)result)
    {
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v9 = *(_QWORD *)(v7 + 16);
          v8 = v7 + 16;
          v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
          v11 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v11 = 1561;
          *(_QWORD *)(v11 + 8) = v10;
          *(_QWORD *)(v11 + 528) = v11 + 16;
          *(_QWORD *)(v11 + 536) = v11 + 16;
          *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v11 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
          v15 = (IPC::Encoder *)v11;
          (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v8 + 32))(v8, &v15, 0);
          result = v15;
          v15 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v12);
            return (IPC::Encoder *)WTF::fastFree(v13, v14);
          }
        }
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebDeviceOrientationUpdateProvider::stopUpdatingDeviceOrientation(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;
  IPC::Encoder *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;

  v4 = (unsigned int *)(a1 + 48);
  result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 48));
  if ((result & 1) == 0)
  {
    WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MotionManagerClient>(v4, a2);
    result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)v4);
    if ((_DWORD)result)
    {
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v9 = *(_QWORD *)(v7 + 16);
          v8 = v7 + 16;
          v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
          v11 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v11 = 1562;
          *(_QWORD *)(v11 + 8) = v10;
          *(_QWORD *)(v11 + 528) = v11 + 16;
          *(_QWORD *)(v11 + 536) = v11 + 16;
          *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v11 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
          v15 = (IPC::Encoder *)v11;
          (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v8 + 32))(v8, &v15, 0);
          result = v15;
          v15 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v12);
            return (IPC::Encoder *)WTF::fastFree(v13, v14);
          }
        }
      }
    }
  }
  return result;
}

BOOL WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[5];

  if (!*a1 || !*((_DWORD *)*a1 - 3))
    return 1;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v11, a1);
  v2 = *a1;
  if (*a1)
  {
    v3 = *((unsigned int *)v2 - 1);
    v4 = &v2[v3];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v6 = a1;
  v7 = v4;
  v8 = v4;
  v9 = v4;
  v10 = &v2[v3];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v6);
  return v11[1] == (_QWORD)v7;
}

uint64_t WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, _QWORD *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)&v8, (_QWORD **)a1);
  if (HIDWORD(v9))
  {
    v5 = v8;
    v6 = 8 * HIDWORD(v9);
    do
    {
      if (*v5)
      {
        if (*(_QWORD *)(*v5 + 8))
        {
          v10 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v10))(*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*v5 + 8));
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v4);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*(unsigned int **)a1, (void *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void WebKit::WebLocalFrameLoaderClient::createDocumentLoader(WebKit::WebFrame **this@<X0>, const WebCore::ResourceRequest *a2@<X1>, const WebCore::SubstituteData *a3@<X2>, uint64_t *a4@<X8>)
{
  WebKit::WebPage *v8;

  v8 = (WebKit::WebPage *)WebKit::WebFrame::page(this[2]);
  WebKit::WebPage::createDocumentLoader(v8, *((WebCore::LocalFrame **)this[11] + 1), a2, a3, a4);
}

uint64_t WTF::ThreadLikeAssertion::ThreadLikeAssertion(uint64_t a1)
{
  std::__compressed_pair_elem<std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>,1,true>::__compressed_pair_elem[abi:sn180100]();
  return a1;
}

{
  WTF::ThreadLikeAssertion::ThreadLikeAssertion(a1);
  return a1;
}

{
  WTF::ThreadLikeAssertion::operator=();
  return a1;
}

uint64_t WebKit::WebPreferences::setStorageBlockingPolicy(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setDataDetectorTypes(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setUserInterfaceDirectionPolicy(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

BOOL WebKit::WebPreferencesStore::setUInt32ValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, int a3)
{
  int v6;
  _BYTE v8[24];
  int v9;
  int v10;

  v6 = WebKit::valueForKey<unsigned int>((uint64_t)this, (uint64_t)this + 24, a2);
  if (v6 != a3)
  {
    v9 = a3;
    v10 = 2;
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)this, a2, (const WTF::StringImpl *)&v9, (uint64_t)v8);
    if (v10 != -1)
      ((void (*)(_BYTE *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v10])(v8, &v9);
  }
  return v6 != a3;
}

uint64_t WebKit::WebPreferences::platformUpdateUInt32ValueForKey(uint64_t this, const WTF::String **a2, unsigned int a3)
{
  uint64_t v5;
  void *v6;
  const WTF::String *v7;

  if (*(_QWORD *)(this + 16))
  {
    v5 = this;
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    return objc_msgSend(v6, "setInteger:forKey:", a3, WebKit::makeKey(*(WebKit **)(v5 + 16), *(const WTF::String **)(v5 + 24), *a2, v7));
  }
  return this;
}

void __destroy_helper_block_e8_32c89_ZTSKZ76__WKUserDefaults__notifyObserversOfChangeFromValuesForKeys_toValuesForKeys__E3__1(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[7];
  a1[7] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  a1[5] = 0;
  if (v4)
    CFRelease(v4);
}

WTF::StringImpl ***WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=(WTF::StringImpl ***a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;

  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  return a1;
}

void WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(WebKit::NetworkProcessProxy *this)
{
  WTF::RunLoop *v2;
  uint64_t isCurrent;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  void *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  void *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  void *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  char v29;
  void *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl ***v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WebCore::DeprecatedGlobalSettings *v45;
  void *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WebKit *v49;
  WebKit::NetworkProcessCreationParameters *v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  void *v56;
  WTF::StringImpl *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl ***v64;
  WTF::StringImpl *v65[2];
  WTF::StringImpl *v66[2];
  __int16 v67;
  WTF *v68[2];
  __int128 v69;
  char isFullWebBrowserOrRunningTest;
  WTF *v71[2];
  WTF *v72[2];
  WTF *v73[2];
  WTF *v74[2];
  __int16 v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  IPC::Encoder *v81;

  v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  isCurrent = WTF::RunLoop::isCurrent(v2);
  if ((isCurrent & 1) == 0)
  {
    v4 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34DD4A8;
    *((_QWORD *)v4 + 1) = this;
    v65[0] = v4;
    WTF::callOnMainRunLoopAndWait();
    isCurrent = (uint64_t)v65[0];
    v65[0] = 0;
    if (isCurrent)
      isCurrent = (*(uint64_t (**)(uint64_t))(*(_QWORD *)isCurrent + 8))(isCurrent);
  }
  v67 = 0;
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)v66 = 0u;
  *(_OWORD *)v68 = 0u;
  v69 = 0u;
  isFullWebBrowserOrRunningTest = 0;
  *(_OWORD *)v71 = 0u;
  *(_OWORD *)v72 = 0u;
  *(_OWORD *)v73 = 0u;
  *(_OWORD *)v74 = 0u;
  v75 = 1;
  v76 = 0;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0;
  WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters((WebKit::AuxiliaryProcessProxy *)isCurrent, &v61);
  v6 = v61;
  v61 = 0;
  v7 = v65[0];
  v65[0] = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v62;
  v62 = 0;
  v9 = v65[1];
  v65[1] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v63;
  v63 = 0;
  v11 = v66[0];
  v66[0] = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)v64;
  v64 = 0;
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100]((WTF::StringImpl ****)&v66[1], v12);
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100](&v64, 0);
  v14 = v63;
  v63 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v62;
  v62 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v61;
  v61 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v61 = 0;
  v62 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v61, &qword_1ECE73790);
  if (HIDWORD(v71[1]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v71[0], (WTF *)((char *)v71[0] + 8 * HIDWORD(v71[1])));
  v18 = v71[0];
  if (v71[0])
  {
    v71[0] = 0;
    LODWORD(v71[1]) = 0;
    WTF::fastFree(v18, v17);
  }
  v71[0] = v61;
  v19 = v62;
  v61 = 0;
  v62 = 0;
  v71[1] = v19;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v17);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v61 = 0;
  v62 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v61, &qword_1ECE73798);
  if (HIDWORD(v72[1]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v72[0], (WTF *)((char *)v72[0] + 8 * HIDWORD(v72[1])));
  v21 = v72[0];
  if (v72[0])
  {
    v72[0] = 0;
    LODWORD(v72[1]) = 0;
    WTF::fastFree(v21, v20);
  }
  v72[0] = v61;
  v22 = v62;
  v61 = 0;
  v62 = 0;
  v72[1] = v22;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v20);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v61 = 0;
  v62 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v61, &qword_1ECE737A0);
  if (HIDWORD(v73[1]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v73[0], (WTF *)((char *)v73[0] + 8 * HIDWORD(v73[1])));
  v24 = v73[0];
  if (v73[0])
  {
    v73[0] = 0;
    LODWORD(v73[1]) = 0;
    WTF::fastFree(v24, v23);
  }
  v73[0] = v61;
  v25 = v62;
  v61 = 0;
  v62 = 0;
  v73[1] = v25;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v23);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v61 = 0;
  v62 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v61, &qword_1ECE737A8);
  if (HIDWORD(v74[1]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v74[0], (WTF *)((char *)v74[0] + 8 * HIDWORD(v74[1])));
  v27 = v74[0];
  if (v74[0])
  {
    v74[0] = 0;
    LODWORD(v74[1]) = 0;
    WTF::fastFree(v27, v26);
  }
  v74[0] = v61;
  v28 = v62;
  v61 = 0;
  v62 = 0;
  v74[1] = v28;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v26);
  {
    v29 = WebKit::LegacyGlobalSettings::singleton(void)::properties;
  }
  else
  {
    v29 = 2;
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  LOBYTE(v67) = v29;
  {
    WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set = 0;
  }
  v61 = 0;
  v62 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v61, (uint64_t **)&WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set);
  if (HIDWORD(v68[1]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v68[0], (WTF *)((char *)v68[0] + 8 * HIDWORD(v68[1])));
  v31 = v68[0];
  if (v68[0])
  {
    v68[0] = 0;
    LODWORD(v68[1]) = 0;
    WTF::fastFree(v31, v30);
  }
  v68[0] = v61;
  v32 = v62;
  v61 = 0;
  v62 = 0;
  v68[1] = v32;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v30);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v33 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=((WTF::StringImpl ***)&v79, (_QWORD **)&qword_1ECE737B0);
  WebKit::WebsiteDataStore::parametersFromEachWebsiteDataStore((WebKit::WebsiteDataStore *)v33, (uint64_t *)&v61);
  if (HIDWORD(v77))
  {
    v35 = 0;
    v36 = v77;
    v37 = 704 * HIDWORD(v77);
    do
    {
      v38 = v36 + v35;
      if (*(_BYTE *)(v36 + v35 + 696))
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v38 + 688));
      if (*(_BYTE *)(v38 + 680))
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v36 + v35 + 672));
      v39 = v36 + v35;
      if (*(_BYTE *)(v36 + v35 + 664))
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v39 + 656));
      if (*(_BYTE *)(v39 + 648))
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v36 + v35 + 640));
      v40 = v36 + v35;
      WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)(v36 + v35 + 32), v34);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v36 + v35 + 16));
      v41 = *(WTF **)(v36 + v35);
      if (v41)
      {
        *(_QWORD *)v40 = 0;
        *(_DWORD *)(v40 + 8) = 0;
        WTF::fastFree(v41, v34);
      }
      v35 += 704;
    }
    while (v37 != v35);
  }
  v42 = (WTF *)v77;
  if ((_QWORD)v77)
  {
    *(_QWORD *)&v77 = 0;
    DWORD2(v77) = 0;
    WTF::fastFree(v42, v34);
  }
  *(_QWORD *)&v77 = v61;
  v43 = v62;
  v61 = 0;
  v62 = 0;
  *((_QWORD *)&v77 + 1) = v43;
  WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v34);
  v44 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v44 = off_1E34DD4D0;
  *((_QWORD *)v44 + 1) = this;
  v61 = v44;
  WebKit::WebsiteDataStore::forEachWebsiteDataStore((WebKit *)&v61);
  v45 = (WebCore::DeprecatedGlobalSettings *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v44 + 8))(v44);
  v76 = *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(v45) + 36);
  WebKit::WebProcessProxy::allowedFirstPartiesForCookies((uint64_t)&v61);
  if (HIDWORD(v78))
    WTF::VectorDestructor<true,std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>>::destruct((WTF::StringImpl *)v78, (WTF::StringImpl *)(v78 + 16 * HIDWORD(v78)));
  v47 = (WTF *)v78;
  if ((_QWORD)v78)
  {
    *(_QWORD *)&v78 = 0;
    DWORD2(v78) = 0;
    WTF::fastFree(v47, v46);
  }
  *(_QWORD *)&v78 = v61;
  v48 = v62;
  v61 = 0;
  v62 = 0;
  *((_QWORD *)&v78 + 1) = v48;
  v49 = (WebKit *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v46);
  isFullWebBrowserOrRunningTest = WebKit::isFullWebBrowserOrRunningTest(v49);
  {
    xmmword_1ECE73558 = 0u;
    unk_1ECE73568 = 0u;
    WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
  }
  WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v79 + 2, (uint64_t)&WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance + 8);
  WebKit::WebProcessPool::platformInitializeNetworkProcess((WebKit::WebProcessPool *)v65, v50);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v51 = (unsigned int *)*((_QWORD *)this + 1);
  if (v51)
  {
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 + 1, v51));
  }
  v53 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v53 = 400;
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v53 + 528) = v53 + 16;
  *(_QWORD *)(v53 + 536) = v53 + 16;
  *(_OWORD *)(v53 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v53 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v53);
  v81 = (IPC::Encoder *)v53;
  IPC::ArgumentCoder<WebKit::NetworkProcessCreationParameters,void>::encode((IPC::Encoder *)v53, (uint64_t)v65);
  v54 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v54 = &off_1E34DD4F8;
  *((_QWORD *)v54 + 1) = v51;
  v55 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v61 = v54;
  v62 = v55;
  LOBYTE(v63) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v81, 0, (uint64_t)&v61, 1);
  if ((_BYTE)v63)
  {
    v57 = v61;
    v61 = 0;
    if (v57)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v57 + 8))(v57);
  }
  v58 = v81;
  v81 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters((WebKit::NetworkProcessCreationParameters *)v65, v56);
}

void WebKit::WebProcessPool::initializeNewWebProcess(uint64_t a1, uint64_t a2, WebKit::WebsiteDataStore *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  WebKit::AuxiliaryProcessProxy *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  const char **v25;
  WTF *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  const char ***v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  char v36;
  void *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  void *v40;
  WTF *v41;
  WTF::StringImpl *v42;
  void *v43;
  WTF *v44;
  WTF::StringImpl *v45;
  void *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  void *v49;
  WTF *v50;
  WTF::StringImpl *v51;
  void *v52;
  WTF *v53;
  WTF::StringImpl *v54;
  void *v55;
  WTF *v56;
  WTF::StringImpl *v57;
  void *v58;
  WTF *v59;
  WTF::StringImpl *v60;
  void *v61;
  WTF *v62;
  WTF::StringImpl *v63;
  void *v64;
  WTF *v65;
  WTF::StringImpl *v66;
  void *v67;
  WTF *v68;
  WTF::StringImpl *v69;
  WebKit::WebExtensionMatchPattern *v70;
  uint64_t *v71;
  void *v72;
  WTF *v73;
  WTF::StringImpl *v74;
  WebKit *v75;
  WebKit::WebProcessProxy *v76;
  _BOOL8 v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl **v81;
  const char *v82;
  const char *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl **v86;
  uint64_t v87;
  uint64_t v88;
  const char **v89;
  const char **v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  const char **v104;
  WTF *v105;
  void *v106;
  WebKit::SandboxExtensionImpl *v107;
  WTF::StringImpl *v108;
  WebKit::SandboxExtensionImpl *v109;
  const char **v110;
  WTF *v111;
  void *v112;
  uint64_t v113;
  WTF::StringImpl **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  const char **v120;
  WTF *v121;
  void *v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  void *v128;
  WTF::StringImpl *v129;
  IPC::Encoder *v130;
  WTF *v131;
  void *v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  void *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  WebKit::WebProcessPool *v144;
  void *v145;
  const char **v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  WebKit::SandboxExtensionImpl *v155;
  unint64_t v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  uint64_t *v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  WTF *v163;
  const char **v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167[2];
  uint64_t v168;
  __int128 v169;
  char v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  char v178;
  char v179;
  WTF::StringImpl *v180[2];
  WTF::StringImpl *v181[2];
  WebKit::SandboxExtensionImpl *v182[2];
  WTF *v183[2];
  __int128 v184;
  WTF *v185[2];
  WTF *v186[2];
  WTF *v187[2];
  WTF *v188[2];
  WTF *v189[2];
  WTF *v190[2];
  WTF *v191[2];
  WTF *v192[2];
  WTF *v193[2];
  WTF *v194[2];
  WTF *v195[2];
  WTF *v196[2];
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  _BYTE v202[14];
  int v203;
  __int128 v204;
  __int128 v205;
  _BYTE v206[19];
  __int128 v207;
  _BYTE v208[28];
  uint64_t v209;
  char v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  __int128 v213;
  uint64_t v214;
  WebKit::SandboxExtensionImpl *v215[2];
  char v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  char v224;
  char v225;
  char v226;
  __int128 v227;
  char v228;
  char v229;
  char v230;
  char v231;
  __int16 v232;
  __int128 v233;
  int v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  __int16 v241;
  char v242;
  char v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  v8 = a2 + 200;
  v9 = WTF::fastMalloc((WTF *)0x28);
  v10 = (WebKit::AuxiliaryProcessProxy *)WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v9, v8, "WebProcess initialization", 26, 0, 0);
  v197 = 0u;
  v198 = 0u;
  *(_OWORD *)v195 = 0u;
  *(_OWORD *)v196 = 0u;
  *(_OWORD *)v193 = 0u;
  *(_OWORD *)v194 = 0u;
  *(_OWORD *)v191 = 0u;
  *(_OWORD *)v192 = 0u;
  *(_OWORD *)v189 = 0u;
  *(_OWORD *)v190 = 0u;
  *(_OWORD *)v187 = 0u;
  *(_OWORD *)v188 = 0u;
  *(_OWORD *)v185 = 0u;
  *(_OWORD *)v186 = 0u;
  *(_OWORD *)v183 = 0u;
  v184 = 0u;
  *(_OWORD *)v181 = 0u;
  *(_OWORD *)v182 = 0u;
  *(_OWORD *)v180 = 0u;
  v199 = 0;
  v201 = 0x41DFFFFFFFC00000;
  *(_QWORD *)&v202[5] = 0;
  *(_QWORD *)v202 = 0;
  v202[13] = 1;
  v203 = 0;
  v209 = 0;
  v210 = 0;
  LOBYTE(v211) = 0;
  v226 = 0;
  v229 = 0;
  v230 = 0;
  v231 = 0;
  v232 = 0;
  v207 = 0u;
  memset(v208, 0, sizeof(v208));
  v227 = 0u;
  v228 = 0;
  v234 = 0;
  v233 = 0u;
  v235 = 0u;
  v236 = 0u;
  v237 = 0;
  v204 = 0u;
  v205 = 0u;
  memset(v206, 0, sizeof(v206));
  v238 = -1;
  v239 = -1;
  v240 = -1;
  v241 = 1;
  v242 = 0;
  v243 = 0;
  v244 = 0u;
  v245 = 0u;
  v246 = 0u;
  WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters(v10, &v165);
  v12 = v165;
  v165 = 0;
  v13 = v180[0];
  v180[0] = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v166;
  v166 = 0;
  v15 = v180[1];
  v180[1] = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v167[0];
  v167[0] = 0;
  v17 = v181[0];
  v181[0] = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v11);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v167[1];
  v167[1] = 0;
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100]((WTF::StringImpl ****)&v181[1], v18);
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100]((WTF::StringImpl ****)&v167[1], 0);
  v20 = v167[0];
  v167[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v166;
  v166 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v165;
  v165 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::String::operator=(v182, (WTF::StringImpl *)(a1 + 688));
  if (v182[0])
  {
    v23 = *((unsigned int *)v182[0] + 1);
    if ((_DWORD)v23)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v182[0] + 1), (WebKit::SandboxExtensionImpl *)(v23 | ((unint64_t)((*((_DWORD *)v182[0] + 4) >> 2) & 1) << 32)), 0, (uint64_t)&v165);
      if ((_BYTE)v166)
      {
        v24 = v165;
        v165 = 0;
        v25 = (const char **)v182[1];
        v182[1] = v24;
        if (!v25 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v25), WTF::fastFree(v26, v27), (_BYTE)v166))
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v165);
      }
    }
  }
  v28 = 0;
  v162 = 0;
  v163 = 0;
  v29 = *(unsigned int *)(a1 + 716);
  if ((_DWORD)v29)
  {
    if (v29 >> 29)
    {
      __break(0xC471u);
      return;
    }
    LODWORD(v163) = *(_DWORD *)(a1 + 716);
    v162 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v29));
    v151 = *(unsigned int *)(a1 + 716);
    if ((_DWORD)v151)
    {
      v152 = *(uint64_t **)(a1 + 704);
      v153 = 8 * v151;
      do
      {
        v154 = *v152;
        if (*v152)
        {
          v155 = *(WebKit::SandboxExtensionImpl **)(v154 + 8);
          v156 = *(unsigned int *)(v154 + 4) | ((unint64_t)((*(_DWORD *)(v154 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v155 = 0;
          v156 = 0x100000000;
        }
        WebKit::SandboxExtension::createHandleWithoutResolvingPath(v155, (WebKit::SandboxExtensionImpl *)v156, 0, (uint64_t)&v165);
        if ((_BYTE)v166)
        {
          v157 = v165;
          v164 = (const char **)v165;
          v165 = 0;
          LODWORD(v158) = HIDWORD(v163);
          if (HIDWORD(v163) == (_DWORD)v163)
          {
            v159 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v162, HIDWORD(v163) + 1, (unint64_t)&v164);
            v158 = HIDWORD(v163);
            v160 = v162;
            v161 = *v159;
            *v159 = 0;
            *((_QWORD *)v160 + v158) = v161;
          }
          else
          {
            v164 = 0;
            *((_QWORD *)v162 + HIDWORD(v163)) = v157;
          }
          HIDWORD(v163) = v158 + 1;
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v164);
          if ((_BYTE)v166)
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v165);
        }
        ++v152;
        v153 -= 8;
      }
      while (v153);
      v28 = HIDWORD(v163);
    }
    else
    {
      v28 = 0;
    }
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v162, v28);
  if (HIDWORD(v183[1]))
  {
    v31 = (const char ***)v183[0];
    v32 = 8 * HIDWORD(v183[1]);
    do
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v31);
      v31 = (const char ***)(v33 + 8);
      v32 -= 8;
    }
    while (v32);
  }
  v34 = v183[0];
  if (v183[0])
  {
    v183[0] = 0;
    LODWORD(v183[1]) = 0;
    WTF::fastFree(v34, v30);
  }
  v183[0] = v162;
  v35 = v163;
  v162 = 0;
  v163 = 0;
  v183[1] = v35;
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v162, v30);
  WebKit::WebProcessPool::setJavaScriptConfigurationFileEnabledFromDefaults((WebKit::WebProcessPool *)a1);
  {
    v36 = WebKit::LegacyGlobalSettings::singleton(void)::properties;
  }
  else
  {
    v36 = 2;
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v200 = v36;
  {
    WebKit::overrideLanguagesStorage(void)::storage = 0;
    unk_1EE341DE8 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v198 + 2, (uint64_t)&WebKit::overrideLanguagesStorage(void)::storage);
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, (uint64_t **)(a1 + 344));
  if (HIDWORD(v186[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v185[1], (WTF *)((char *)v185[1] + 8 * HIDWORD(v186[0])));
  v38 = v185[1];
  if (v185[1])
  {
    v185[1] = 0;
    LODWORD(v186[0]) = 0;
    WTF::fastFree(v38, v37);
  }
  v185[1] = v165;
  v39 = v166;
  v165 = 0;
  v166 = 0;
  v186[0] = v39;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v37);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, &qword_1ECE73790);
  if (HIDWORD(v187[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v186[1], (WTF *)((char *)v186[1] + 8 * HIDWORD(v187[0])));
  v41 = v186[1];
  if (v186[1])
  {
    v186[1] = 0;
    LODWORD(v187[0]) = 0;
    WTF::fastFree(v41, v40);
  }
  v186[1] = v165;
  v42 = v166;
  v165 = 0;
  v166 = 0;
  v187[0] = v42;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v40);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, &qword_1ECE73798);
  if (HIDWORD(v188[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v187[1], (WTF *)((char *)v187[1] + 8 * HIDWORD(v188[0])));
  v44 = v187[1];
  if (v187[1])
  {
    v187[1] = 0;
    LODWORD(v188[0]) = 0;
    WTF::fastFree(v44, v43);
  }
  v187[1] = v165;
  v45 = v166;
  v165 = 0;
  v166 = 0;
  v188[0] = v45;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v43);
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, (uint64_t **)(a1 + 352));
  if (HIDWORD(v189[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v188[1], (WTF *)((char *)v188[1] + 8 * HIDWORD(v189[0])));
  v47 = v188[1];
  if (v188[1])
  {
    v188[1] = 0;
    LODWORD(v189[0]) = 0;
    WTF::fastFree(v47, v46);
  }
  v188[1] = v165;
  v48 = v166;
  v165 = 0;
  v166 = 0;
  v189[0] = v48;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v46);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, &qword_1ECE737A0);
  if (HIDWORD(v190[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v189[1], (WTF *)((char *)v189[1] + 8 * HIDWORD(v190[0])));
  v50 = v189[1];
  if (v189[1])
  {
    v189[1] = 0;
    LODWORD(v190[0]) = 0;
    WTF::fastFree(v50, v49);
  }
  v189[1] = v165;
  v51 = v166;
  v165 = 0;
  v166 = 0;
  v190[0] = v51;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v49);
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, &qword_1ECE737A8);
  if (HIDWORD(v191[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v190[1], (WTF *)((char *)v190[1] + 8 * HIDWORD(v191[0])));
  v53 = v190[1];
  if (v190[1])
  {
    v190[1] = 0;
    LODWORD(v191[0]) = 0;
    WTF::fastFree(v53, v52);
  }
  v190[1] = v165;
  v54 = v166;
  v165 = 0;
  v166 = 0;
  v191[0] = v54;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v52);
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, (uint64_t **)(a1 + 360));
  if (HIDWORD(v192[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v191[1], (WTF *)((char *)v191[1] + 8 * HIDWORD(v192[0])));
  v56 = v191[1];
  if (v191[1])
  {
    v191[1] = 0;
    LODWORD(v192[0]) = 0;
    WTF::fastFree(v56, v55);
  }
  v191[1] = v165;
  v57 = v166;
  v165 = 0;
  v166 = 0;
  v192[0] = v57;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v55);
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, (uint64_t **)(a1 + 368));
  if (HIDWORD(v193[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v192[1], (WTF *)((char *)v192[1] + 8 * HIDWORD(v193[0])));
  v59 = v192[1];
  if (v192[1])
  {
    v192[1] = 0;
    LODWORD(v193[0]) = 0;
    WTF::fastFree(v59, v58);
  }
  v192[1] = v165;
  v60 = v166;
  v165 = 0;
  v166 = 0;
  v193[0] = v60;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v58);
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, (uint64_t **)(a1 + 376));
  if (HIDWORD(v194[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v193[1], (WTF *)((char *)v193[1] + 8 * HIDWORD(v194[0])));
  v62 = v193[1];
  if (v193[1])
  {
    v193[1] = 0;
    LODWORD(v194[0]) = 0;
    WTF::fastFree(v62, v61);
  }
  v193[1] = v165;
  v63 = v166;
  v165 = 0;
  v166 = 0;
  v194[0] = v63;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v61);
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, (uint64_t **)(a1 + 384));
  if (HIDWORD(v195[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v194[1], (WTF *)((char *)v194[1] + 8 * HIDWORD(v195[0])));
  v65 = v194[1];
  if (v194[1])
  {
    v194[1] = 0;
    LODWORD(v195[0]) = 0;
    WTF::fastFree(v65, v64);
  }
  v194[1] = v165;
  v66 = v166;
  v165 = 0;
  v166 = 0;
  v195[0] = v66;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v64);
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, (uint64_t **)(a1 + 392));
  if (HIDWORD(v196[0]))
    WTF::VectorDestructor<true,WTF::String>::destruct(v195[1], (WTF *)((char *)v195[1] + 8 * HIDWORD(v196[0])));
  v68 = v195[1];
  if (v195[1])
  {
    v195[1] = 0;
    LODWORD(v196[0]) = 0;
    WTF::fastFree(v68, v67);
  }
  v195[1] = v165;
  v69 = v166;
  v165 = 0;
  v166 = 0;
  v196[0] = v69;
  v70 = (WebKit::WebExtensionMatchPattern *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v67);
  v71 = WebKit::WebExtensionMatchPattern::extensionSchemes(v70);
  v165 = 0;
  v166 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v165, (uint64_t **)v71);
  if (DWORD1(v197))
    WTF::VectorDestructor<true,WTF::String>::destruct(v196[1], (WTF *)((char *)v196[1] + 8 * DWORD1(v197)));
  v73 = v196[1];
  if (v196[1])
  {
    v196[1] = 0;
    LODWORD(v197) = 0;
    WTF::fastFree(v73, v72);
  }
  v196[1] = v165;
  v74 = v166;
  v165 = 0;
  v166 = 0;
  *(_QWORD *)&v197 = v74;
  v75 = (WebKit *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v72);
  v202[4] = *(_BYTE *)(a1 + 400);
  v202[7] = *(_BYTE *)(a1 + 401);
  v76 = (WebKit::WebProcessProxy *)WebKit::mutableState(v75);
  HIWORD(v203) = *(_WORD *)v76;
  v77 = WebKit::WebProcessProxy::fullKeyboardAccessEnabled(v76);
  v202[8] = v77;
  WebCore::ResourceRequestBase::defaultTimeoutInterval((WebCore::ResourceRequestBase *)v77);
  v201 = v78;
  *(_DWORD *)v202 = *(_DWORD *)(*(_QWORD *)(a1 + 760) + 16);
  if (a3)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)a3 + 49) + 56))(&v165);
    v80 = v165;
    v165 = 0;
    v81 = (WTF::StringImpl **)*((_QWORD *)&v207 + 1);
    *((_QWORD *)&v207 + 1) = v80;
    if (v81)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v81, v79);
      if (v165)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v165, v149);
    }
  }
  if (!*((_QWORD *)&v207 + 1) || !*(_DWORD *)(*((_QWORD *)&v207 + 1) - 12))
  {
    v165 = (WTF::StringImpl *)"WebNotificationManagerProxy";
    v166 = (WTF::StringImpl *)28;
    v82 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(a1 + 456), (WTF::ASCIILiteralHash *)&v165);
    v83 = v82 - 16;
    if (!v82)
      v83 = 0;
    (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)v83 + 4) + 64))(&v165);
    v85 = v165;
    v165 = 0;
    v86 = (WTF::StringImpl **)*((_QWORD *)&v207 + 1);
    *((_QWORD *)&v207 + 1) = v85;
    if (v86)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v86, v84);
      if (v165)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v165, v150);
    }
  }
  v202[11] = *(_BYTE *)(a1 + 505);
  v87 = *(_QWORD *)(a1 + 48);
  *(_WORD *)&v202[12] = *(_WORD *)(v87 + 74);
  LOBYTE(v203) = *(_BYTE *)(a2 + 780);
  BYTE1(v203) = *(_BYTE *)(a2 + 779);
  DWORD2(v205) = *(_DWORD *)(v87 + 80);
  WTF::String::operator=((WTF::StringImpl **)&v244, (WTF::StringImpl *)(v87 + 136));
  v88 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)&v245 + 1) = *(_QWORD *)(v88 + 144);
  WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v246, v88 + 152);
  WebKit::WebProcessPool::platformInitializeWebProcess((WebKit::WebProcessPool *)a1, (const WebKit::WebProcessProxy *)a2, (WebKit::WebProcessCreationParameters *)v180);
  (*(void (**)(const char ***__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 200) + 32))(&v164, *(_QWORD *)(a1 + 200), a1);
  v89 = v164;
  if (!v164)
  {
    v89 = *(const char ***)(a1 + 192);
    if (v89)
    {
      CFRetain(v89[1]);
      v90 = v164;
      v164 = v89;
      if (v90)
      {
        CFRelease(v90[1]);
        v89 = v164;
      }
    }
    else
    {
      v164 = 0;
    }
  }
  v165 = (WTF::StringImpl *)&off_1E34D7358;
  WebKit::UserData::transform(v89, (uint64_t)&v165, &v162);
  v91 = v162;
  v162 = 0;
  if (v91)
    CFRetain(*((CFTypeRef *)v91 + 1));
  v92 = v184;
  *(_QWORD *)&v184 = v91;
  if (v92)
    CFRelease(*(CFTypeRef *)(v92 + 8));
  if (v91)
    CFRelease(*((CFTypeRef *)v91 + 1));
  v93 = v162;
  v162 = 0;
  if (v93)
    CFRelease(*((CFTypeRef *)v93 + 1));
  if (a3)
  {
    WebKit::WebProcessPool::webProcessDataStoreParameters((WebKit::WebProcessPool *)&v165, (WebKit::WebProcessProxy *)a1, a3);
    v95 = v166;
    v211 = v165;
    v166 = 0;
    if (v226)
    {
      v96 = v212;
      v212 = v95;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy(v96, v94);
        else
          *(_DWORD *)v96 -= 2;
      }
      v101 = v167[0];
      v167[0] = 0;
      v102 = (WTF::StringImpl *)v213;
      *(_QWORD *)&v213 = v101;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
          WTF::StringImpl::destroy(v102, v94);
        else
          *(_DWORD *)v102 -= 2;
      }
      v103 = v167[1];
      v167[1] = 0;
      v104 = (const char **)*((_QWORD *)&v213 + 1);
      *((_QWORD *)&v213 + 1) = v103;
      if (v104)
      {
        WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v104);
        WTF::fastFree(v105, v106);
      }
      v107 = (WebKit::SandboxExtensionImpl *)v169;
      *(_QWORD *)&v169 = 0;
      v108 = v215[0];
      v214 = v168;
      v215[0] = v107;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2)
          WTF::StringImpl::destroy(v108, v94);
        else
          *(_DWORD *)v108 -= 2;
      }
      v109 = (WebKit::SandboxExtensionImpl *)*((_QWORD *)&v169 + 1);
      *((_QWORD *)&v169 + 1) = 0;
      v110 = (const char **)v215[1];
      v215[1] = v109;
      if (v110)
      {
        WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v110);
        WTF::fastFree(v111, v112);
      }
      v216 = v170;
      v113 = v171;
      *(_QWORD *)&v171 = 0;
      v114 = (WTF::StringImpl **)v217;
      *(_QWORD *)&v217 = v113;
      if (v114)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v114, v94);
      v115 = *((_QWORD *)&v171 + 1);
      *((_QWORD *)&v171 + 1) = 0;
      v116 = *((_QWORD *)&v217 + 1);
      *((_QWORD *)&v217 + 1) = v115;
      if (v116)
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v116, v94);
      v117 = v172;
      *(_QWORD *)&v172 = 0;
      v118 = (WTF::StringImpl *)v218;
      *(_QWORD *)&v218 = v117;
      if (v118)
      {
        if (*(_DWORD *)v118 == 2)
          WTF::StringImpl::destroy(v118, v94);
        else
          *(_DWORD *)v118 -= 2;
      }
      v119 = *((_QWORD *)&v172 + 1);
      *((_QWORD *)&v172 + 1) = 0;
      v120 = (const char **)*((_QWORD *)&v218 + 1);
      *((_QWORD *)&v218 + 1) = v119;
      if (v120)
      {
        WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v120);
        WTF::fastFree(v121, v122);
      }
      std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v219, (uint64_t)&v173);
      std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v221, (uint64_t)&v175);
      std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v223, (uint64_t)&v177);
      v225 = v179;
    }
    else
    {
      v213 = *(_OWORD *)v167;
      *(_OWORD *)v215 = v169;
      v97 = v172;
      v217 = v171;
      *(_OWORD *)v167 = 0u;
      v212 = v95;
      v214 = v168;
      v169 = 0u;
      v216 = v170;
      v171 = 0u;
      v172 = 0u;
      v218 = v97;
      LOBYTE(v219) = 0;
      v220 = 0;
      if (v174)
      {
        v98 = v173;
        v173 = 0;
        v219 = v98;
        v220 = 1;
      }
      LOBYTE(v221) = 0;
      v222 = 0;
      if (v176)
      {
        v99 = v175;
        v175 = 0;
        v221 = v99;
        v222 = 1;
      }
      LOBYTE(v223) = 0;
      v224 = 0;
      if (v178)
      {
        v100 = v177;
        v177 = 0;
        v223 = v100;
        v224 = 1;
      }
      v225 = v179;
      v226 = 1;
    }
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)&v165);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v123 = *(unsigned int **)(a2 + 8);
  if (v123)
  {
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 + 1, v123));
  }
  v125 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v125 = 2597;
  *(_QWORD *)(v125 + 8) = 0;
  *(_QWORD *)(v125 + 528) = v125 + 16;
  *(_QWORD *)(v125 + 536) = v125 + 16;
  *(_OWORD *)(v125 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v125 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v125);
  v162 = (WTF::StringImpl *)v125;
  IPC::ArgumentCoder<WebKit::WebProcessCreationParameters,void>::encode((IPC::Encoder *)v125, (uint64_t)v180);
  v126 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v126 = &off_1E34D7C68;
  *((_QWORD *)v126 + 1) = v123;
  v127 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v165 = v126;
  v166 = v127;
  LOBYTE(v167[0]) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v162, 0, (uint64_t)&v165, 1);
  if (LOBYTE(v167[0]))
  {
    v129 = v165;
    v165 = 0;
    if (v129)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v129 + 8))(v129);
  }
  v130 = v162;
  v162 = 0;
  if (v130)
  {
    IPC::Encoder::~Encoder(v130, v128);
    WTF::fastFree(v131, v132);
  }
  WebKit::WebProcessPool::setMediaAccessibilityPreferences((WebKit::WebProcessPool *)a1, (WebKit::WebProcessProxy *)a2);
  v133 = *(_QWORD *)(a1 + 320);
  if (v133)
  {
    v134 = *(WTF::StringImpl **)(v133 + 64);
    if (v134)
      *(_DWORD *)v134 += 2;
    v162 = v134;
    v165 = (WTF::StringImpl *)&v162;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::EnsureAutomationSessionProxy>(a2, (uint64_t **)&v165, 0, 0);
    v136 = v162;
    v162 = 0;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2)
      {
        WTF::StringImpl::destroy(v136, v135);
        if (a4)
          goto LABEL_167;
        goto LABEL_173;
      }
      *(_DWORD *)v136 -= 2;
    }
  }
  if (a4)
  {
LABEL_167:
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
    v138 = *(unsigned int **)(a2 + 8);
    if (v138)
    {
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 + 1, v138));
    }
    v140 = *(unsigned int **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v138;
    if (v140)
    {
      do
      {
        v141 = __ldaxr(v140);
        v142 = v141 - 1;
      }
      while (__stlxr(v142, v140));
      if (!v142)
      {
        atomic_store(1u, v140);
        WTF::fastFree((WTF *)v140, v137);
      }
    }
  }
LABEL_173:
  softLinkBKSDisplayBrightnessGetCurrent();
  LODWORD(v165) = v143;
  v144 = (WebKit::WebProcessPool *)WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::BacklightLevelDidChange>(a2, (int *)&v165, 0, 0);
  WebKit::WebProcessPool::registerHighDynamicRangeChangeCallback(v144);
  v146 = v164;
  v164 = 0;
  if (v146)
    CFRelease(v146[1]);
  WebKit::WebProcessCreationParameters::~WebProcessCreationParameters((WebKit::WebProcessCreationParameters *)v180, v145);
  v147 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v147 = off_1E34D7938;
  *((_QWORD *)v147 + 1) = v9;
  v180[0] = v147;
  WebKit::WebProcessProxy::isResponsive((_DWORD *)a2, (uint64_t *)v180);
  v148 = v180[0];
  v180[0] = 0;
  if (v148)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v148 + 8))(v148);
}

uint64_t *WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map(uint64_t *result, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;

  v3 = result;
  if (*a2)
  {
    v4 = *((unsigned int *)*a2 - 3);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      *((_DWORD *)v3 + 2) = v4;
      *v3 = v5;
    }
  }
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v7 = *a2;
  if (*a2)
    v7 += *((unsigned int *)v7 - 1);
  if (v7 != result)
  {
    v8 = *v3;
    v9 = *((_DWORD *)v3 + 3);
    do
    {
      v10 = (_DWORD *)*result;
      if (*result)
        *v10 += 2;
      *(_QWORD *)(v8 + 8 * v9) = v10;
      while (++result != v6)
      {
        if ((unint64_t)(*result + 1) > 1)
          goto LABEL_16;
      }
      result = v6;
LABEL_16:
      ++v9;
    }
    while (result != v7);
    *((_DWORD *)v3 + 3) = v9;
  }
  return result;
}

CFTypeRef WebKit::UserData::transform@<X0>(CFTypeRef result@<X0>, uint64_t a2@<X1>, WebKit **a3@<X8>)
{
  uint64_t v5;

  if (result)
  {
    v5 = (uint64_t)result;
    if ((WebKit::shouldTransform((uint64_t)result, a2) & 1) != 0)
    {
      return (CFTypeRef)WebKit::transformGraph(v5, a2, a3);
    }
    else
    {
      result = CFRetain(*(CFTypeRef *)(v5 + 8));
      *a3 = (WebKit *)v5;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

__int16 *WebKit::mutableState(WebKit *this)
{
  char v2;
  __int16 v3;

  if ((byte_1ECE72C40 & 1) == 0)
  {
    v2 = objc_opt_respondsToSelector();
    v3 = 1;
    if ((v2 & 1) != 0)
    {
      if (objc_msgSend(MEMORY[0x1E0CEAAA8], "grammarCheckingEnabled"))
        v3 = 257;
      else
        v3 = 1;
    }
    word_1ECE72C44 = v3;
    byte_1ECE72C40 = 1;
  }
  return &word_1ECE72C44;
}

BOOL WebKit::WebProcessProxy::fullKeyboardAccessEnabled(WebKit::WebProcessProxy *this)
{
  return +[WKFullKeyboardAccessWatcher fullKeyboardAccessEnabled](WKFullKeyboardAccessWatcher, "fullKeyboardAccessEnabled");
}

uint64_t WebKit::WebProcessPool::setJavaScriptConfigurationFileEnabledFromDefaults(WebKit::WebProcessPool *this)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("WebKitJavaScriptCoreUseConfigFile"));
  *((_BYTE *)this + 506) = result;
  return result;
}

unsigned int *WebKit::WebProcessPool::setMediaAccessibilityPreferences(WebKit::WebProcessPool *this, WebKit::WebProcessProxy *a2)
{
  NSObject *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *result;
  unsigned int v11;
  unsigned int v12;
  _QWORD block[4];
  WTF *v14;

  if (qword_1EE341870 != -1)
    dispatch_once(&qword_1EE341870, &__block_literal_global_25);
  v3 = qword_1EE341868;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyE_block_invoke_2;
  block[3] = &__block_descriptor_40_e8_32c92_ZTSKZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyEE3__0_e5_v8__0l;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v4 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 + 1, v4));
    v14 = (WTF *)v4;
    dispatch_async(v3, block);
    do
    {
      v8 = __ldaxr(v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v4));
    if (!v9)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v7);
    }
  }
  else
  {
    v14 = 0;
    dispatch_async(v3, block);
  }
  result = (unsigned int *)v14;
  v14 = 0;
  if (result)
  {
    do
    {
      v11 = __ldaxr(result);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, result));
    if (!v12)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  const char ***v8;
  uint64_t v9;
  WTF *v10;
  const char **v11;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = *(_QWORD *)result + 8 * a2;
      v5 = 8 * v4 - 8 * a2;
      do
      {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)result);
        result = v6 + 8;
        v5 -= 8;
      }
      while (v5);
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v7 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4)
      {
        v8 = (const char ***)result;
        if ((WTF *)result != v7)
        {
          v9 = 8 * v4;
          result = (uint64_t)v7;
          v10 = v7;
          do
          {
            v11 = *(const char ***)result;
            *(_QWORD *)v10 = 0;
            v10 = (WTF *)((char *)v10 + 8);
            *v8++ = v11;
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)result);
            result = (uint64_t)v10;
            v9 -= 8;
          }
          while (v9);
        }
      }
    }
    if (v7)
    {
      if (*(WTF **)v3 == v7)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v7, (void *)a2);
    }
  }
  return result;
}

void API::NotificationProvider::notificationPermissions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void API::InjectedBundleClient::getInjectedBundleInitializationUserData(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::WebProcessPool::webProcessDataStoreParameters(WebKit::WebProcessPool *this, WebKit::WebProcessProxy *a2, WebKit::WebsiteDataStore *a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char **v16;
  uint64_t v17;
  uint64_t v18;
  const char **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  WTF::StringImpl *v31;
  const char **v32;
  int v33;
  WTF::StringImpl *v34;
  BOOL HaveTrackingPreventionEnabled;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  const char **v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unsigned __int8 v43;
  const char **v44;
  char v45;
  const char **v46;
  const char **v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  char v50;
  const char **v51;

  v6 = WebKit::WebsiteDataStore::resolvedDirectories(a3);
  v7 = v6;
  v8 = *(_DWORD **)(v6 + 88);
  if (v8)
    *v8 += 2;
  v9 = *(_QWORD *)(v6 + 96);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 4);
    *(_DWORD *)v9 += 2;
    if ((_DWORD)v10
      && (WebKit::SandboxExtension::createHandleWithoutResolvingPath(*(WebKit::SandboxExtensionImpl **)(v9 + 8), (WebKit::SandboxExtensionImpl *)(v10 | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32)), 1, (uint64_t)&v49), v50))
    {
      v11 = (const char **)v49;
      v49 = 0;
      v51 = v11;
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v49);
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    v51 = 0;
  }
  v12 = WebKit::WebsiteDataStore::mediaKeysStorageSalt(a3);
  v48 = 0;
  v13 = *((_QWORD *)a2 + 64);
  if (v13 && *(_DWORD *)(v13 + 4))
  {
    WebKit::resolvePathForSandboxExtension(&v49);
    v48 = v49;
    v49 = 0;
  }
  else if (*((_BYTE *)a2 + 506))
  {
    WTF::String::operator=(&v48, (WTF::StringImpl *)(v7 + 72));
  }
  v38 = v11;
  if (v48
    && (v14 = *((unsigned int *)v48 + 1), (_DWORD)v14)
    && (WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v48 + 1), (WebKit::SandboxExtensionImpl *)(v14 | ((unint64_t)((*((_DWORD *)v48 + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v49), v50))
  {
    v15 = v12;
    v16 = (const char **)v49;
    v49 = 0;
    v47 = v16;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v49);
  }
  else
  {
    v15 = v12;
    v16 = 0;
  }
  v17 = *(_QWORD *)(v7 + 144);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 + 4);
    *(_DWORD *)v17 += 2;
    if ((_DWORD)v18
      && (WebKit::SandboxExtension::createHandleWithoutResolvingPath(*(WebKit::SandboxExtensionImpl **)(v17 + 8), (WebKit::SandboxExtensionImpl *)(v18 | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32)), 1, (uint64_t)&v49), v50))
    {
      v19 = (const char **)v49;
      v49 = 0;
      v46 = v19;
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v49);
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = 0;
    v46 = 0;
  }
  LOBYTE(v49) = 0;
  v50 = 0;
  WebKit::WebsiteDataStore::resolvedCookieStorageDirectory((uint64_t)a3, &v42);
  v21 = v42;
  if (v42)
  {
    v22 = *((unsigned int *)v42 + 1);
    if ((_DWORD)v22)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v42 + 1), (WebKit::SandboxExtensionImpl *)(v22 | ((unint64_t)((*((_DWORD *)v42 + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v44);
      std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v49, (uint64_t)&v44);
      if (v45)
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v44);
      v21 = v42;
      v42 = 0;
      if (!v21)
        goto LABEL_33;
    }
    else
    {
      v42 = 0;
    }
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
LABEL_33:
  LOBYTE(v44) = 0;
  v45 = 0;
  WebKit::WebsiteDataStore::resolvedContainerCachesWebContentDirectory((uint64_t)a3, &v39);
  v24 = v39;
  if (!v39)
    goto LABEL_43;
  v25 = *((unsigned int *)v39 + 1);
  if (!(_DWORD)v25)
  {
    v39 = 0;
LABEL_40:
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
    goto LABEL_43;
  }
  WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v39 + 1), (WebKit::SandboxExtensionImpl *)(v25 | ((unint64_t)((*((_DWORD *)v39 + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v42);
  std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v44, (uint64_t)&v42);
  if (v43)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v42);
  v24 = v39;
  v39 = 0;
  if (v24)
    goto LABEL_40;
LABEL_43:
  LOBYTE(v42) = 0;
  v43 = 0;
  WebKit::WebsiteDataStore::resolvedContainerTemporaryDirectory(a3, &v41);
  v27 = v41;
  if (v41)
  {
    v28 = *((unsigned int *)v41 + 1);
    if ((_DWORD)v28)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v41 + 1), (WebKit::SandboxExtensionImpl *)(v28 | ((unint64_t)((*((_DWORD *)v41 + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v39);
      std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v42, (uint64_t)&v39);
      if (v40)
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v39);
    }
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  *(_QWORD *)this = *((_QWORD *)a3 + 3);
  *((_QWORD *)this + 1) = v8;
  v51 = 0;
  *((_QWORD *)this + 2) = v9;
  *((_QWORD *)this + 3) = v38;
  v29 = v48;
  v47 = 0;
  v48 = 0;
  *((_QWORD *)this + 4) = v15;
  *((_QWORD *)this + 5) = v29;
  *((_QWORD *)this + 6) = v16;
  *((_BYTE *)this + 56) = WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(a3);
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)this + 8, (uint64_t *)a2 + 111);
  v30 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)this + 9, (uint64_t *)a2 + 112);
  v46 = 0;
  *((_QWORD *)this + 10) = v17;
  *((_QWORD *)this + 11) = v19;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  if (v50)
  {
    v31 = v49;
    v49 = 0;
    *((_QWORD *)this + 12) = v31;
    *((_BYTE *)this + 104) = 1;
  }
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 120) = 0;
  if (v45)
  {
    v32 = v44;
    v44 = 0;
    *((_QWORD *)this + 14) = v32;
    *((_BYTE *)this + 120) = 1;
  }
  *((_BYTE *)this + 128) = 0;
  *((_BYTE *)this + 136) = 0;
  v33 = v43;
  if (v43)
  {
    v34 = v42;
    v42 = 0;
    *((_QWORD *)this + 16) = v34;
    *((_BYTE *)this + 136) = 1;
  }
  if (*((_BYTE *)a3 + 265))
  {
    HaveTrackingPreventionEnabled = *((_BYTE *)a3 + 265) == 2;
  }
  else if (*(unsigned __int16 *)(*((_QWORD *)a3 + 26) + 536) >= 0x100u)
  {
    HaveTrackingPreventionEnabled = *(_WORD *)(*((_QWORD *)a3 + 26) + 536) != 0;
  }
  else
  {
    HaveTrackingPreventionEnabled = WebKit::doesAppHaveTrackingPreventionEnabled((WebKit *)v30);
    v33 = v43;
  }
  *((_BYTE *)this + 144) = HaveTrackingPreventionEnabled;
  if (v33)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v42);
  if (v45)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v44);
  if (v50)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v49);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v46);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v47);
  v37 = v48;
  v48 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v36);
    else
      *(_DWORD *)v37 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v51);
}

uint64_t WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(WebKit::WebsiteDataStore *this)
{
  __int16 v2;
  unint64_t v3;
  unsigned __int16 v4;

  if (*((_BYTE *)this + 425))
  {
    LOBYTE(v2) = *((_BYTE *)this + 424);
  }
  else
  {
      goto LABEL_11;
    while (1)
    {
      v4 = WebKit::optionalExperimentalFeatureEnabled(&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key, 0x100uLL);
      v3 = v4;
      if (v4 > 0xFFu)
        break;
      __break(1u);
LABEL_11:
      WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
      *(_BYTE *)(v3 + 3632) = 1;
    }
    if ((_BYTE)v4)
      v2 = 259;
    else
      v2 = 256;
    *((_WORD *)this + 212) = v2;
  }
  return v2;
}

uint64_t WebKit::WebsiteDataStore::resolvedCookieStorageDirectory@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v3 = *(WTF::StringImpl **)(this + 256);
  if (v3)
    goto LABEL_19;
  v4 = (WTF::StringImpl **)(this + 256);
  v5 = *(_QWORD *)(this + 24);
  if (v5 < 0 && v5 != -1)
  {
    this = (uint64_t)WTF::String::operator=((WTF::StringImpl **)(this + 256), MEMORY[0x1E0CBF738]);
    goto LABEL_18;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v16;
  v14 = v16;
  WebKit::WebsiteDataStore::cacheDirectoryInContainerOrHomeDirectory((WebKit::WebsiteDataStore *)&v14, &v15);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v7);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v15)
  {
    v8 = *((_QWORD *)v15 + 1);
    v9 = *((unsigned int *)v15 + 1) | ((unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v8, v9, &v16);
  v11 = v16;
  v16 = 0;
  v12 = *v4;
  *v4 = v11;
  if (v12)
  {
    v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 != 2)
      goto LABEL_13;
    WTF::StringImpl::destroy(v12, v10);
    v12 = v16;
    v16 = 0;
    if (!v12)
      goto LABEL_14;
    v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
LABEL_13:
      *(_DWORD *)v12 = v13;
  }
LABEL_14:
  this = (uint64_t)v15;
  v15 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_18:
  v3 = *v4;
  if (*v4)
LABEL_19:
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

void sub_196CCF148(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::ASCIICaseInsensitiveHash **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  const WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  _QWORD v24[2];

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(_DWORD *)(v3 - 12));
      v7 = WTF::fastZeroedMalloc((WTF *)(8 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v10 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, v8, v9);
      v12 = (WTF::ASCIICaseInsensitiveHash **)v10;
      v24[0] = v10;
      v24[1] = v11;
      v13 = *a2 ? *a2 + 8 * *(unsigned int *)(*a2 - 4) : 0;
      if (v13 != v10)
      {
        do
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::ASCIICaseInsensitiveHash::hash(*v12, v11);
          v18 = 0;
          do
          {
            v19 = v16 & v15;
            v20 = WTF::equal(*(WTF **)(v14 + 8 * v19), 0, v17);
            v16 = ++v18 + v19;
          }
          while (!v20);
          WTF::String::operator=((WTF::StringImpl **)(v14 + 8 * v19), (WTF::StringImpl *)v12);
          v24[0] += 8;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v24, v21, v22);
          v12 = (WTF::ASCIICaseInsensitiveHash **)v24[0];
        }
        while (v24[0] != v13);
      }
    }
  }
  return a1;
}

uint64_t WebKit::WebsiteDataStore::resolvedContainerCachesWebContentDirectory@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v4 = (WTF::StringImpl **)(this + 232);
  v3 = *(WTF::StringImpl **)(this + 232);
  if (v3)
    goto LABEL_19;
  v5 = *(_QWORD *)(this + 24);
  if (v5 < 0 && v5 != -1)
  {
    this = (uint64_t)WTF::String::operator=((WTF::StringImpl **)(this + 232), MEMORY[0x1E0CBF738]);
    goto LABEL_18;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v16;
  v14 = v16;
  WebKit::WebsiteDataStore::cacheDirectoryInContainerOrHomeDirectory((WebKit::WebsiteDataStore *)&v14, &v15);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v7);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v15)
  {
    v8 = *((_QWORD *)v15 + 1);
    v9 = *((unsigned int *)v15 + 1) | ((unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v8, v9, &v16);
  v11 = v16;
  v16 = 0;
  v12 = *v4;
  *v4 = v11;
  if (v12)
  {
    v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 != 2)
      goto LABEL_13;
    WTF::StringImpl::destroy(v12, v10);
    v12 = v16;
    v16 = 0;
    if (!v12)
      goto LABEL_14;
    v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
LABEL_13:
      *(_DWORD *)v12 = v13;
  }
LABEL_14:
  this = (uint64_t)v15;
  v15 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_18:
  v3 = *v4;
  if (*v4)
LABEL_19:
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

void sub_196CCF428(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::WebsiteDataStore::resolvedContainerTemporaryDirectory@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  v3 = (_DWORD *)this[31];
  if (v3)
    goto LABEL_6;
  v4 = this;
  WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory((uint64_t *)&v6);
  v3 = v6;
  this = (_QWORD *)v4[31];
  v4[31] = v6;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
      v3 = (_DWORD *)v4[31];
      if (!v3)
        goto LABEL_7;
      goto LABEL_6;
    }
    *(_DWORD *)this -= 2;
  }
  if (v3)
LABEL_6:
    *v3 += 2;
LABEL_7:
  *a2 = v3;
  return this;
}

void WebKit::WebsiteDataStoreClient::notificationPermissions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::BacklightLevelDidChange>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2571;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

void sub_196CCF5F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::WebProcessProxy::isResponsive(_DWORD *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = *a2;
  if (result[179])
  {
    v4 = (uint64_t)result;
    if (v3)
    {
      v5 = result[183];
      if ((_DWORD)v5 == result[182])
      {
        WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)>>((uint64_t)(result + 180), (unint64_t)a2);
      }
      else
      {
        v8 = *((_QWORD *)result + 90);
        *a2 = 0;
        *(_QWORD *)(v8 + 8 * v5) = v3;
        result[183] = v5 + 1;
      }
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
    v9 = *(unsigned int **)(v4 + 8);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E34D7DD0;
    v11[1] = v9;
    v12 = v11;
    WebKit::AuxiliaryProcessProxy::checkForResponsiveness(v4, (uint64_t *)&v12, 0);
    result = v12;
    if (v12)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  }
  else if (v3)
  {
    WTF::RunLoop::main((WTF::RunLoop *)result);
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34D7DA8;
    v7[1] = v6;
    v12 = v7;
    WTF::RunLoop::dispatch();
    result = v12;
    v12 = 0;
    if (result)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = 8 * v5;
      v10 = v4;
      do
      {
        v11 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *v8 = v11;
        v12 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        ++v8;
        v10 = (WTF *)((char *)v10 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::checkForResponsiveness(uint64_t a1, uint64_t *a2, int a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  char v15;
  IPC::Encoder *v16;

  WebKit::AuxiliaryProcessProxy::startResponsivenessTimer(a1, a3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *a2;
  *a2 = 0;
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 3;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = &off_1E34CFA30;
  v9[1] = v5;
  v9[2] = v7;
  v14[0] = v9;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v15 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, 0, (uint64_t)v14, 1);
  if (v15 && v14[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v14[0] + 8))(v14[0]);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::startResponsivenessTimer(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = result;
  if (*(_BYTE *)(result + 169))
  {
    result += 56;
    if (a2)
    {
      if (!*(_BYTE *)(v2 + 105))
      {
        result = WebKit::ResponsivenessTimer::start(result);
        *(_BYTE *)(v2 + 106) = 1;
      }
    }
    else
    {
      return WebKit::ResponsivenessTimer::start(result);
    }
  }
  else if (!*(_BYTE *)(result + 185))
  {
    *(_WORD *)(result + 184) = a2 | 0x100;
  }
  return result;
}

void WebKit::WebProcessPool::registerHighDynamicRangeChangeCallback(WebKit::WebProcessPool *this)
{
  _QWORD *v1;
  _QWORD *v2;

  {
    v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v1 = off_1E34CAF40;
    v2 = v1;
    WebCore::LowPowerModeNotifier::LowPowerModeNotifier();
    if (v2)
      (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  }
}

void sub_196CCFAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(uint64_t *a1@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  char v5;
  char **v6;
  char *v7;

  {
    WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::resolvedTemporaryDirectory = 0;
  }
  v3 = atomic_load(&WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::once);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::$_0 &&>>);
  }
  v4 = WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::resolvedTemporaryDirectory;
  if (WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::resolvedTemporaryDirectory)
    *(_DWORD *)WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::resolvedTemporaryDirectory += 2;
  *a1 = v4;
}

uint64_t WebKit::WebsiteDataStore::resolvedContainerCachesNetworkingDirectory@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v4 = (WTF::StringImpl **)(this + 240);
  v3 = *(WTF::StringImpl **)(this + 240);
  if (v3)
    goto LABEL_19;
  v5 = *(_QWORD *)(this + 24);
  if (v5 < 0 && v5 != -1)
  {
    this = (uint64_t)WTF::String::operator=((WTF::StringImpl **)(this + 240), MEMORY[0x1E0CBF738]);
    goto LABEL_18;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v16;
  v14 = v16;
  WebKit::WebsiteDataStore::cacheDirectoryInContainerOrHomeDirectory((WebKit::WebsiteDataStore *)&v14, &v15);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v7);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v15)
  {
    v8 = *((_QWORD *)v15 + 1);
    v9 = *((unsigned int *)v15 + 1) | ((unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v8, v9, &v16);
  v11 = v16;
  v16 = 0;
  v12 = *v4;
  *v4 = v11;
  if (v12)
  {
    v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 != 2)
      goto LABEL_13;
    WTF::StringImpl::destroy(v12, v10);
    v12 = v16;
    v16 = 0;
    if (!v12)
      goto LABEL_14;
    v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
LABEL_13:
      *(_DWORD *)v12 = v13;
  }
LABEL_14:
  this = (uint64_t)v15;
  v15 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_18:
  v3 = *v4;
  if (*v4)
LABEL_19:
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

void sub_196CCFD08(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebsiteDataStore::cacheDirectoryInContainerOrHomeDirectory@<X0>(WebKit::WebsiteDataStore *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v5;
  NSString *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  char v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  WebKit::pathForProcessContainer((uint64_t *)&v15, this);
  v5 = v15;
  if (v15 && *((_DWORD *)v15 + 1))
    goto LABEL_10;
  v6 = NSHomeDirectory();
  MEMORY[0x19AEABCC8](&v17, v6);
  v5 = v17;
  v17 = 0;
  v8 = v15;
  v15 = v5;
  if (!v8)
    goto LABEL_9;
  v9 = *(_DWORD *)v8 - 2;
  if (*(_DWORD *)v8 != 2)
  {
LABEL_7:
    *(_DWORD *)v8 = v9;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v8, v7);
  v8 = v17;
  v17 = 0;
  if (v8)
  {
    v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v10);
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  v5 = v15;
LABEL_9:
  if (v5)
  {
LABEL_10:
    v11 = 0;
    *(_DWORD *)v5 += 2;
    goto LABEL_11;
  }
  v11 = 1;
LABEL_11:
  v12 = *(WTF::StringImpl **)this;
  if (v12)
    *(_DWORD *)v12 += 2;
  v16 = v12;
  v17 = v5;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v17, (uint64_t *)&v16, a2);
  if (!*a2)
  {
    __break(0xC471u);
    return result;
  }
  if (!v12)
  {
LABEL_17:
    if ((v11 & 1) != 0)
      goto LABEL_23;
    goto LABEL_20;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v12, v14);
  if ((v11 & 1) != 0)
    goto LABEL_23;
LABEL_20:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v14);
  else
    *(_DWORD *)v5 -= 2;
LABEL_23:
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196CCFEB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;

  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  if ((v12 & 1) == 0)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::pathForProcessContainer(WebKit *this)
{
  char __s[1024];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  __s[0] = 0;
  getpid();
  sandbox_container_path_for_pid();
  strlen(__s);
  return WTF::String::fromUTF8();
}

WTF *WebKit::WebsiteDataStore::parametersFromEachWebsiteDataStore@<X0>(WebKit::WebsiteDataStore *this@<X0>, uint64_t *a2@<X8>)
{
  WTF *result;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  const char **v14;
  WTF::StringImpl *v15;
  const char **v16;
  unsigned int v17;
  uint64_t v18;
  const char **v19;
  uint64_t v20;
  int v21;
  const char **v22;
  uint64_t v23;
  const char **v24;
  void *v25;
  uint64_t *v26;
  WTF *v27;
  int v28;
  int v29;
  const char **v30;
  _BYTE v31[608];
  const char **v32;
  char v33;
  const char **v34;
  char v35;
  const char **v36;
  unsigned __int8 v37;
  const char **v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  result = (WTF *)WebKit::allDataStores(this);
  *a2 = 0;
  a2[1] = 0;
  v26 = a2;
  if (WebKit::allDataStores(void)::map && (v4 = *(_DWORD *)(WebKit::allDataStores(void)::map - 12)) != 0)
  {
    if (v4 >= 0x5D1746)
    {
      __break(0xC471u);
      return result;
    }
    v5 = 704 * v4;
    v6 = WTF::fastMalloc((WTF *)(704 * v4));
    *((_DWORD *)a2 + 2) = (v5 & 0xFFFFFFC0) / 0x2C0;
    *a2 = v6;
  }
  else
  {
    v6 = 0;
  }
  result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&WebKit::allDataStores(void)::map);
  v7 = result;
  v9 = v8;
  if (WebKit::allDataStores(void)::map)
    v10 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
  else
    v10 = 0;
  if ((WTF *)v10 != result)
  {
    v11 = 0;
    while (1)
    {
      WebKit::WebsiteDataStore::parameters(*(WebKit::WebsiteDataStore **)(*((_QWORD *)v7 + 1) + 8), (uint64_t)&v27);
      v12 = v6 + 704 * v11;
      v13 = v27;
      v27 = 0;
      *(_QWORD *)v12 = v13;
      LODWORD(v13) = v28;
      v28 = 0;
      *(_DWORD *)(v12 + 8) = (_DWORD)v13;
      LODWORD(v13) = v29;
      v29 = 0;
      *(_DWORD *)(v12 + 12) = (_DWORD)v13;
      v14 = v30;
      v30 = 0;
      *(_QWORD *)(v12 + 16) = v14;
      WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters(v12 + 32, (uint64_t)v31);
      *(_BYTE *)(v12 + 640) = 0;
      *(_BYTE *)(v12 + 648) = 0;
      if (v33)
      {
        v16 = v32;
        v32 = 0;
        *(_QWORD *)(v12 + 640) = v16;
        *(_BYTE *)(v12 + 648) = 1;
      }
      v17 = v11;
      v18 = v6 + 704 * v11;
      *(_BYTE *)(v18 + 656) = 0;
      *(_BYTE *)(v18 + 664) = 0;
      if (v35)
      {
        v19 = v34;
        v34 = 0;
        *(_QWORD *)(v18 + 656) = v19;
        *(_BYTE *)(v18 + 664) = 1;
      }
      v20 = v6 + 704 * v11;
      *(_BYTE *)(v20 + 672) = 0;
      *(_BYTE *)(v20 + 680) = 0;
      v21 = v37;
      if (v37)
      {
        v22 = v36;
        v36 = 0;
        *(_QWORD *)(v20 + 672) = v22;
        *(_BYTE *)(v20 + 680) = 1;
      }
      v23 = v6 + 704 * v11;
      *(_BYTE *)(v23 + 688) = 0;
      *(_BYTE *)(v23 + 696) = 0;
      if (v39)
        break;
      *((_DWORD *)v26 + 3) = ++v11;
      if (v21)
        goto LABEL_19;
LABEL_20:
      if (v35)
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v34);
      if (v33)
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v32);
      WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)v31, v15);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v30);
      result = v27;
      if (v27)
      {
        v27 = 0;
        v28 = 0;
        result = (WTF *)WTF::fastFree(result, v25);
      }
      while (1)
      {
        v7 = (WTF *)((char *)v7 + 16);
        if (v7 == v9)
          break;
        if ((unint64_t)(*(_QWORD *)v7 + 1) > 1)
          goto LABEL_30;
      }
      v7 = v9;
LABEL_30:
      if (v7 == (WTF *)v10)
        return result;
    }
    v24 = v38;
    v38 = 0;
    *(_QWORD *)(v23 + 688) = v24;
    *(_BYTE *)(v23 + 696) = 1;
    ++v11;
    *((_DWORD *)v26 + 3) = v17 + 1;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v38);
    if (!v37)
      goto LABEL_20;
LABEL_19:
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v36);
    goto LABEL_20;
  }
  return result;
}

void WebKit::WebsiteDataStore::forEachWebsiteDataStore(WebKit *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  WebKit::allDataStores(a1);
  v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&WebKit::allDataStores(void)::map);
  v3 = v2;
  v5 = v4;
  if (WebKit::allDataStores(void)::map)
    v6 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
  else
    v6 = 0;
  if ((_QWORD *)v6 != v2)
  {
    do
    {
      v7 = *(_QWORD *)(v3[1] + 8);
      CFRetain(*(CFTypeRef *)(v7 + 8));
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, v7);
      CFRelease(*(CFTypeRef *)(v7 + 8));
      while (1)
      {
        v3 += 2;
        if (v3 == v5)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_10;
      }
      v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != (_QWORD *)v6);
  }
}

uint64_t *WebKit::allDataStores(WebKit *this)
{
  if ((WTF::isUIThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196CD03A8);
  }
  {
    WebKit::allDataStores(void)::map = 0;
  }
  return &WebKit::allDataStores(void)::map;
}

unsigned __int8 **WebKit::AuxiliaryProcessProxy::setProcessSuppressionEnabled(unsigned __int8 **this, char a2)
{
  unsigned __int8 *v3;
  char v4;
  unsigned __int8 **v5;

  v3 = this[17];
  if (!v3 || !v3[104])
  {
    if (this[18])
    {
      WebKit::AuxiliaryProcessProxy::protectedConnection((uint64_t)this, &v5);
      v4 = a2;
      IPC::Connection::send<Messages::AuxiliaryProcess::SetProcessSuppressionEnabled>((uint64_t)v5, &v4, 0, 0, 0);
      this = v5;
      v5 = 0;
      if (this)
        return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(this);
    }
  }
  return this;
}

uint64_t WebKit::WebProcessProxy::allowedFirstPartiesForCookies@<X0>(uint64_t a1@<X8>)
{
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[5];
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  unsigned int v24;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  WebKit::WebProcessProxy::globalPages((uint64_t)&v23);
  if (v24)
  {
    v4 = v23;
    v5 = 8 * v24;
    do
    {
      v6 = *v4;
      CFRetain(*(CFTypeRef *)(*v4 + 8));
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 208) + 176);
      WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)v6, &v18);
      MEMORY[0x19AEABB0C](v19, &v18, 0);
      WebCore::RegistrableDomain::RegistrableDomain(&v20, (const WTF::URL *)v19);
      v9 = v20;
      v20 = 0;
      v21 = v7;
      v22 = v9;
      v10 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>>(a1, (unint64_t)&v21);
      }
      else
      {
        v11 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
        *v11 = v7;
        v12 = v22;
        v22 = 0;
        v11[1] = v12;
        ++*(_DWORD *)(a1 + 12);
      }
      v13 = v22;
      v22 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v8);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v8);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v19[0];
      v19[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v8);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v18;
      v18 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v8);
        else
          *(_DWORD *)v16 -= 2;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v3);
}

void WebKit::WebProcessProxy::globalPages(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  {
    v3 = WebKit::WebProcessProxy::globalPageMap(void)::pageMap;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v3 && (v4 = *(unsigned int *)(v3 - 12), (_DWORD)v4))
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      *(_DWORD *)(a1 + 8) = v4;
      *(_QWORD *)a1 = v5;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    WebKit::WebProcessProxy::globalPageMap(void)::pageMap = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&WebKit::WebProcessProxy::globalPageMap(void)::pageMap);
  v7 = v6;
  v9 = v8;
  if (WebKit::WebProcessProxy::globalPageMap(void)::pageMap)
    v10 = WebKit::WebProcessProxy::globalPageMap(void)::pageMap
        + 16 * *(unsigned int *)(WebKit::WebProcessProxy::globalPageMap(void)::pageMap - 4);
  else
    v10 = 0;
  if ((_QWORD *)v10 != v6)
  {
    v11 = 0;
    do
    {
      v12 = v11;
      v13 = *(_QWORD *)(v7[1] + 8);
      if (v13)
        v14 = v13 - 16;
      else
        v14 = 0;
      CFRetain(*(CFTypeRef *)(v14 + 8));
      v11 = v12 + 1;
      *(_QWORD *)(v5 + 8 * v12) = v14;
      *(_DWORD *)(a1 + 12) = v12 + 1;
      while (1)
      {
        v7 += 2;
        if (v7 == v9)
          break;
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_20;
      }
      v7 = v9;
LABEL_20:
      ;
    }
    while (v7 != (_QWORD *)v10);
  }
}

unsigned int *WebKit::WebProcessPool::platformInitializeNetworkProcess(WebKit::WebProcessPool *this, WebKit::NetworkProcessCreationParameters *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  const __CFString *v8;
  const __CFString *v9;
  char v10;
  const __CFString *v11;
  WebKit::StorageAccessPromptQuirkController *v12;
  const __CFString *v13;
  __int128 *v14;
  WTF::StringImpl *v16;

  WebCore::applicationBundleIdentifier(this);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v16;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v6 = MEMORY[0x19AEAA858]();
  v7 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v6;
  if (v7)
    CFRelease(v7);
  *((_BYTE *)this + 33) = objc_msgSend(v5, "BOOLForKey:", CFSTR("WebKitSuppressMemoryPressureHandler"));
  {
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
    goto LABEL_9;
  }
  if (WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key)
  {
LABEL_9:
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
    goto LABEL_10;
  }
  v8 = &stru_1E351F1B8;
LABEL_10:
  if (objc_msgSend(v5, "objectForKey:", v8))
  {
    {
      if (!WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key)
      {
        v9 = &stru_1E351F1B8;
        goto LABEL_14;
      }
    }
    else
    {
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
LABEL_14:
    v10 = objc_msgSend(v5, "BOOLForKey:", v9);
    goto LABEL_16;
  }
  v10 = 1;
LABEL_16:
  *((_BYTE *)this + 144) = v10;
  {
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
    goto LABEL_18;
  }
  if (WebKit::WebPreferencesKey::ftpEnabledKey(void)::key)
  {
LABEL_18:
    v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    goto LABEL_19;
  }
  v11 = &stru_1E351F1B8;
LABEL_19:
  v12 = (WebKit::StorageAccessPromptQuirkController *)objc_msgSend(v5, "objectForKey:", v11);
  if (v12)
  {
    {
      if (!WebKit::WebPreferencesKey::ftpEnabledKey(void)::key)
      {
        v13 = &stru_1E351F1B8;
        goto LABEL_23;
      }
    }
    else
    {
      WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
LABEL_23:
    v12 = (WebKit::StorageAccessPromptQuirkController *)objc_msgSend(v5, "BOOLForKey:", v13);
  }
  *((_BYTE *)this + 145) = (_BYTE)v12;
  v14 = WebKit::StorageAccessPromptQuirkController::shared(v12);
  return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 48, (uint64_t)v14 + 8);
}

void IPC::VectorArgumentCoder<false,WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = 32 * v5;
    do
    {
      IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::encode(a1, v6);
      v6 += 4;
      v7 -= 32;
    }
    while (v7);
  }
}

char *IPC::Connection::send<Messages::AuxiliaryProcess::SetProcessSuppressionEnabled>(uint64_t a1, char *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  char *result;
  unint64_t v24;
  size_t v25;
  void *v26;
  IPC::Encoder *v27;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 6;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v27 = (IPC::Encoder *)v10;
  v11 = *a2;
  v12 = *(_QWORD *)(v10 + 544);
  v13 = v12 + 1;
  v14 = *(_QWORD *)(v10 + 552);
  if (v14 < v12 + 1)
  {
    v24 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v25 = v24;
      v24 *= 2;
    }
    while (v25 < v13);
    result = (char *)mmap(0, v25, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v15 = result;
    memcpy(result, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
    v26 = *(void **)(v10 + 528);
    if (v26 != (void *)(v10 + 16))
      munmap(v26, *(_QWORD *)(v10 + 552));
    *(_QWORD *)(v10 + 528) = v15;
    *(_QWORD *)(v10 + 552) = v25;
    v16 = *(_QWORD *)(v10 + 544);
  }
  else
  {
    v15 = *(char **)(v10 + 528);
    v16 = *(_QWORD *)(v10 + 544);
  }
  bzero(&v15[v16], v12 - v16);
  *(_QWORD *)(v10 + 544) = v13;
  v17 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v12);
  *(_QWORD *)(v10 + 536) = v17 + 1;
  *v17 = v11;
  v19 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v27, a4, a5);
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v18);
    WTF::fastFree(v21, v22);
  }
  return (char *)v19;
}

uint64_t ___ZN6WebKit12SecureCodingL45internalClassNamesExemptFromSecureCodingCrashEv_block_invoke(WebCore *a1)
{
  uint64_t result;
  void *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl ***v11[3];
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = WebCore::isInAuxiliaryProcess(a1);
  if ((result & 1) == 0)
  {
    result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", CFSTR("WebKitCrashOnSecureCodingWithExemptClassesKey"));
    if (result)
    {
      v2 = (void *)result;
      v3 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v3 = 0;
      v11[0] = 0;
      std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100]((WTF::StringImpl ****)&qword_1ECE73440, v3);
      std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100](v11, 0);
      objc_opt_class();
      result = objc_opt_isKindOfClass();
      if ((result & 1) != 0)
      {
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16, v11[0]);
        v4 = result;
        if (result)
        {
          v5 = *(_QWORD *)v14;
          do
          {
            v6 = 0;
            do
            {
              if (*(_QWORD *)v14 != v5)
                objc_enumerationMutation(v2);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v7 = (uint64_t *)qword_1ECE73440;
                MEMORY[0x19AEABCC8](&v12, v2);
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v7, &v12, v8, (uint64_t)v11);
                v10 = v12;
                v12 = 0;
                if (v10)
                {
                  if (*(_DWORD *)v10 == 2)
                    WTF::StringImpl::destroy(v10, v9);
                  else
                    *(_DWORD *)v10 -= 2;
                }
              }
              ++v6;
            }
            while (v4 != v6);
            result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
            v4 = result;
          }
          while (result);
        }
      }
    }
  }
  return result;
}

void sub_196CD0CD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_OWORD *WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (~(*v13 << 32) + *v13) ^ ((~(*v13 << 32) + *v13) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = *(_QWORD *)(v14 + 16 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (v22);
        v23 = (_OWORD *)(v14 + 16 * v21);
        *v23 = *(_OWORD *)v13;
        if (v13 == a3)
          v12 = v23;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_OWORD *WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::rehash(a1, v5, a2);
}

_QWORD *WebKit::WebPreferences::setMockCaptureDevicesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setMediaCaptureRequiresSecureConnection(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setICECandidateFilteringEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setEnumeratingAllNetworkInterfacesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

void ___ZN6WebKit14WebProcessPool31startObservingPreferenceChangesEv_block_invoke()
{
  NSObject *global_queue;

  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_125);
}

void WebKit::NetworkStorageManager::didReceiveMessage(unsigned __int8 **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned __int8 **v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  WTF::StringImpl *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;

  v6 = this + 2;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x207:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier>>>((uint64_t)&v13, (uint64_t *)a3);
      if (v17)
        WebKit::NetworkStorageManager::abortOpenAndUpgradeNeeded((uint64_t)this, v13, (uint64_t)&v14);
      break;
    case 0x208:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier>>((uint64_t)&v13, (uint64_t *)a3);
      if ((_BYTE)v15)
        WebKit::NetworkStorageManager::abortTransaction((WebKit::NetworkStorageManager *)this, (const WebCore::IDBResourceIdentifier *)&v13);
      break;
    case 0x209:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageAllCaches,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x20A:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x20B:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)&v13, (uint64_t *)a3);
      if ((_BYTE)v15)
        WebKit::NetworkStorageManager::cacheStorageDereference((uint64_t)this, (uint64_t)a2, (uint64_t)v13, v14);
      break;
    case 0x20C:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageOpenCache,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x20D:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStoragePutRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x20E:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)&v13, (uint64_t *)a3);
      if ((_BYTE)v15)
        WebKit::NetworkStorageManager::cacheStorageReference((uint64_t)this, (uint64_t)a2, (uint64_t)v13, v14);
      break;
    case 0x20F:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRemoveCache,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error> const&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x210:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRemoveRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceRequest &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x211:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRepresentation,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x212:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::Error> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x213:
      IPC::handleMessage<Messages::NetworkStorageManager::CancelConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin const&)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x214:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Clear,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x215:
      IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,unsigned long long>>((uint64_t)&v13, (uint64_t *)a3);
      if ((_BYTE)v19)
        WebKit::NetworkStorageManager::clearObjectStore((WebKit::NetworkStorageManager *)this, (const WebCore::IDBRequestData *)&v13);
      break;
    case 0x216:
      v8 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)v7)
        WebKit::NetworkStorageManager::closeHandle((uint64_t)this, v8);
      break;
    case 0x217:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CloseSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x218:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,unsigned long long>>((uint64_t)&v13, (uint64_t *)a3);
      if (v16)
        WebKit::NetworkStorageManager::commitTransaction((WebKit::NetworkStorageManager *)this, (const WebCore::IDBResourceIdentifier *)&v13);
      break;
    case 0x219:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x21A:
      IPC::handleMessage<Messages::NetworkStorageManager::CreateIndex,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)>((uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x21B:
      IPC::handleMessage<Messages::NetworkStorageManager::CreateObjectStore,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)>((uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x21C:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x21D:
      v11 = (void *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)v7)
        WebKit::NetworkStorageManager::databaseConnectionClosed((uint64_t)this, v11);
      break;
    case 0x21E:
      v10 = (void *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)v7)
        WebKit::NetworkStorageManager::databaseConnectionPendingClose((uint64_t)this, v10);
      break;
    case 0x21F:
      IPC::handleMessage<Messages::NetworkStorageManager::DeleteDatabase,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBOpenRequestData const&)>((void **)a2, (uint64_t *)a3, (uint64_t **)this);
      break;
    case 0x220:
      IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,unsigned long long,WTF::String>>((uint64_t)&v13, (uint64_t *)a3);
      if ((_BYTE)v20)
      {
        WebKit::NetworkStorageManager::deleteIndex((WebKit::NetworkStorageManager *)this, (const WebCore::IDBRequestData *)&v13, (unint64_t)v18, (const WTF::String *)&v19);
        goto LABEL_56;
      }
      break;
    case 0x221:
      IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WTF::String>>((uint64_t)&v13, (uint64_t *)a3);
      if ((_BYTE)v19)
      {
        WebKit::NetworkStorageManager::deleteObjectStore((WebKit::NetworkStorageManager *)this, (const WebCore::IDBRequestData *)&v13, (const WTF::String *)&v18);
        if ((_BYTE)v19)
        {
          v12 = v18;
          v18 = 0;
          if (v12)
            goto LABEL_52;
        }
      }
      break;
    case 0x222:
      IPC::handleMessage<Messages::NetworkStorageManager::DeleteRecord,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x223:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier>>((uint64_t)&v13, (uint64_t *)a3);
      if (v16)
        WebKit::NetworkStorageManager::didFinishHandlingVersionChangeTransaction((uint64_t)this, v13, (const WebCore::IDBResourceIdentifier *)&v14);
      break;
    case 0x224:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer>>((uint64_t)&v13, (uint64_t *)a3);
      if (v17)
        WebKit::NetworkStorageManager::didFireVersionChangeEvent((uint64_t)this, v13);
      break;
    case 0x225:
      v9 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)v7)
        WebKit::NetworkStorageManager::disconnectFromStorageArea((uint64_t)this, (uint64_t)a2, v9);
      break;
    case 0x226:
      IPC::handleMessage<Messages::NetworkStorageManager::EstablishTransaction,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x227:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Estimate,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(std::optional<WebCore::StorageEstimate>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x228:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::FileSystemGetDirectory,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ClientOrigin &&::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WebCore::ClientOrigin &&::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x229:
      IPC::handleMessage<Messages::NetworkStorageManager::GetAllDatabaseNamesAndVersions,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)>((void **)a2, (uint64_t *)a3, (uint64_t **)this);
      break;
    case 0x22A:
      IPC::handleMessage<Messages::NetworkStorageManager::GetAllRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x22B:
      IPC::handleMessage<Messages::NetworkStorageManager::GetCount,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x22C:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x22D:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::GetFile,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x22E:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::GetFileHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x22F:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::GetHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x230:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::GetHandleNames,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x231:
      IPC::handleMessage<Messages::NetworkStorageManager::GetRecord,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x232:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::IsSameEntry,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x233:
      IPC::handleMessage<Messages::NetworkStorageManager::IterateCursor,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x234:
      IPC::handleMessage<Messages::NetworkStorageManager::LockCacheStorage,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin const&)>((IPC::Connection *)a2, (uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x235:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Move,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x236:
      IPC::handleMessage<Messages::NetworkStorageManager::OpenCursor,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x237:
      IPC::handleMessage<Messages::NetworkStorageManager::OpenDBRequestCancelled,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBOpenRequestData const&)>((uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x238:
      IPC::handleMessage<Messages::NetworkStorageManager::OpenDatabase,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBOpenRequestData const&)>((void **)a2, (uint64_t *)a3, (uint64_t **)this);
      break;
    case 0x239:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Persist,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x23A:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Persisted,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x23B:
      IPC::handleMessage<Messages::NetworkStorageManager::PutOrAdd,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x23C:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::RemoveEntry,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x23D:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::RemoveItem,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits,WTF::HashTableTraits> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x23E:
      IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,unsigned long long,unsigned long long,WTF::String>>((uint64_t)&v13, (uint64_t *)a3);
      if (v21)
      {
        WebKit::NetworkStorageManager::renameIndex((WebKit::NetworkStorageManager *)this, (const WebCore::IDBRequestData *)&v13, (unint64_t)v18, (unint64_t)v19, (const WTF::String *)&v20);
        if (v21)
        {
          v12 = v20;
          v20 = 0;
          if (v12)
            goto LABEL_52;
        }
      }
      break;
    case 0x23F:
      IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,unsigned long long,WTF::String>>((uint64_t)&v13, (uint64_t *)a3);
      if ((_BYTE)v20)
      {
        WebKit::NetworkStorageManager::renameObjectStore((WebKit::NetworkStorageManager *)this, (const WebCore::IDBRequestData *)&v13, (unint64_t)v18, (const WTF::String *)&v19);
LABEL_56:
        if ((_BYTE)v20)
        {
          v12 = v19;
          v19 = 0;
          if (v12)
          {
LABEL_52:
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v7);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
      }
      break;
    case 0x240:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::RequestNewCapacityForSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x241:
      IPC::handleMessage<Messages::NetworkStorageManager::ResetQuotaUpdatedBasedOnUsageForTesting,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin &&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x242:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Resolve,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x243:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::SetItem,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits,WTF::HashTableTraits> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x244:
      IPC::handleMessage<Messages::NetworkStorageManager::UnlockCacheStorage,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin const&)>((IPC::Connection *)a2, (uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    default:
      break;
  }
  if (this)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v6, v7);
}

WebCore::SecurityOriginData *WebKit::NetworkStorageManager::writeOriginToFileIfNecessary(WebCore::SecurityOriginData **this, const WebCore::ClientOrigin *a2, WebKit::StorageAreaBase *a3)
{
  WebCore::SecurityOriginData *result;
  uint64_t v5;

  result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>>,WebCore::ClientOrigin>(this[10], (uint64_t)a2);
  if (result)
  {
    v5 = *((_QWORD *)result + 8);
    if (v5)
      return WebKit::NetworkStorageManager::includeOriginInBackupIfNecessary((WTF::WallTime *)this, v5);
  }
  return result;
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>>,WebCore::ClientOrigin>(WebCore::SecurityOriginData *result, uint64_t a2)
{
  WebCore::SecurityOriginData *v2;
  int v3;
  unsigned int v4;
  WebCore::SecurityOriginData *v5;
  int v6;
  char v7;
  char v8;
  int v9;

  if (result)
  {
    v2 = result;
    v3 = *((_DWORD *)result - 2);
    v4 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v3;
    v5 = (WebCore::SecurityOriginData *)((char *)v2 + 72 * v4);
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) != 0)
    {
      return 0;
    }
    else
    {
      v6 = 1;
      do
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue(v5);
        if ((v7 & 1) == 0)
        {
          if (WebCore::operator==())
          {
            v8 = WebCore::operator==();
            result = v5;
            if ((v8 & 1) != 0)
              break;
          }
        }
        v4 = (v4 + v6) & v3;
        v5 = (WebCore::SecurityOriginData *)((char *)v2 + 72 * v4);
        v9 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
        result = 0;
        ++v6;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t WTF::computeHash<WebCore::ClientOrigin>(uint64_t a1)
{
  uint64_t v1;
  int v3;
  __int16 v4;
  char v5;

  v3 = -1640531527;
  v4 = 0;
  v5 = 0;
  v1 = a1 + 32;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v3, a1);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v3, v1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v3);
}

unsigned int *WTF::add<WTF::String,WTF::String,std::optional<unsigned short>>(unsigned int *result, uint64_t *a2, uint64_t *a3, unsigned __int16 *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;

  v4 = *a2;
  if (!*a2)
    goto LABEL_17;
  v5 = *(_DWORD *)(v4 + 4);
  v6 = v5 & 0xFFFFFFFE;
  if ((v5 & 0xFFFFFFFE) == 0)
  {
    if ((v5 & 1) == 0)
      goto LABEL_17;
    v16 = 1;
    goto LABEL_13;
  }
  v7 = 0;
  v8 = *result;
  do
  {
    v9 = *(unsigned int *)(v4 + 4);
    if (v7 >= v9)
    {
      v11 = 0;
    }
    else
    {
      v10 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
        v11 = *(unsigned __int8 *)(v10 + v7);
      else
        v11 = *(unsigned __int16 *)(v10 + 2 * v7);
    }
    v12 = v7 + 1;
    if (v7 + 1 >= v9)
    {
      v14 = 0;
    }
    else
    {
      v13 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
        v14 = *(unsigned __int8 *)(v13 + v7 + 1);
      else
        v14 = *(unsigned __int16 *)(v13 + 2 * v7 + 2);
    }
    v15 = (v11 << 11) ^ ((v8 + v14) << 16) ^ (v8 + v14);
    v8 = v15 + (v15 >> 11);
    *result = v8;
    v7 = v12 + 1;
  }
  while (v12 + 1 < v6);
  if ((v5 & 1) != 0)
  {
    v16 = *(_DWORD *)(v4 + 4);
LABEL_13:
    if (v16 <= v6)
    {
      v18 = 0;
    }
    else
    {
      v17 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
        v18 = *(unsigned __int8 *)(v17 + v6);
      else
        v18 = *(unsigned __int16 *)(v17 + 2 * v6);
    }
    *result = ((*result + v18) ^ ((*result + v18) << 16)) + (((*result + v18) ^ ((*result + v18) << 16)) >> 11);
  }
LABEL_17:
  v19 = *a3;
  if (!*a3)
    goto LABEL_33;
  v20 = *(_DWORD *)(v19 + 4);
  v21 = v20 & 0xFFFFFFFE;
  if ((v20 & 0xFFFFFFFE) == 0)
  {
    if ((v20 & 1) == 0)
      goto LABEL_33;
    v31 = 1;
    goto LABEL_29;
  }
  v22 = 0;
  v23 = *result;
  do
  {
    v24 = *(unsigned int *)(v19 + 4);
    if (v22 >= v24)
    {
      v26 = 0;
    }
    else
    {
      v25 = *(_QWORD *)(v19 + 8);
      if ((*(_BYTE *)(v19 + 16) & 4) != 0)
        v26 = *(unsigned __int8 *)(v25 + v22);
      else
        v26 = *(unsigned __int16 *)(v25 + 2 * v22);
    }
    v27 = v22 + 1;
    if (v22 + 1 >= v24)
    {
      v29 = 0;
    }
    else
    {
      v28 = *(_QWORD *)(v19 + 8);
      if ((*(_BYTE *)(v19 + 16) & 4) != 0)
        v29 = *(unsigned __int8 *)(v28 + v22 + 1);
      else
        v29 = *(unsigned __int16 *)(v28 + 2 * v22 + 2);
    }
    v30 = (v26 << 11) ^ ((v23 + v29) << 16) ^ (v23 + v29);
    v23 = v30 + (v30 >> 11);
    *result = v23;
    v22 = v27 + 1;
  }
  while (v27 + 1 < v21);
  if ((v20 & 1) != 0)
  {
    v31 = *(_DWORD *)(v19 + 4);
LABEL_29:
    if (v31 <= v21)
    {
      v33 = 0;
    }
    else
    {
      v32 = *(_QWORD *)(v19 + 8);
      if ((*(_BYTE *)(v19 + 16) & 4) != 0)
        v33 = *(unsigned __int8 *)(v32 + v21);
      else
        v33 = *(unsigned __int16 *)(v32 + 2 * v21);
    }
    *result = ((*result + v33) ^ ((*result + v33) << 16)) + (((*result + v33) ^ ((*result + v33) << 16)) >> 11);
  }
LABEL_33:
  v34 = *((unsigned __int8 *)a4 + 2);
  v35 = (*result + v34) ^ ((*result + v34) << 16);
  v36 = v35 + (v35 >> 11);
  *result = v36;
  if (v34)
    *result = ((v36 + *a4) ^ ((v36 + *a4) << 16)) + (((v36 + *a4) ^ ((v36 + *a4) << 16)) >> 11);
  return result;
}

WTF::WallTime *WebKit::NetworkStorageManager::includeOriginInBackupIfNecessary(WTF::WallTime *result, uint64_t a2)
{
  double v3;
  WTF::WallTime *v4;
  double v5;

  if (!*(_BYTE *)(a2 + 72))
  {
    v3 = *(double *)(a2 + 64);
    v4 = result;
    result = (WTF::WallTime *)WTF::WallTime::now(result);
    if (v5 - v3 >= *((double *)v4 + 43))
    {
      result = (WTF::WallTime *)WTF::FileSystemImpl::setExcludedFromBackup((WTF::FileSystemImpl *)(a2 + 16), 0);
      *(_BYTE *)(a2 + 72) = 1;
    }
  }
  return result;
}

void IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(IPC::Encoder *this, _QWORD **a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  if (*a2)
    v4 = *((_DWORD *)*a2 - 3);
  else
    v4 = 0;
  *(_DWORD *)IPC::Encoder::grow(this, 4uLL, 4) = v4;
  v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
  v6 = v5;
  v8 = v7;
  if (*a2)
    v9 = (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)];
  else
    v9 = 0;
  if ((uint64_t *)v9 != v5)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v6);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v6 + 1);
      while (1)
      {
        v6 += 2;
        if (v6 == v8)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_14;
      }
      v6 = v8;
LABEL_14:
      ;
    }
    while (v6 != (uint64_t *)v9);
  }
}

uint64_t WebKit::SQLiteStorageArea::prepareDatabase(uint64_t a1, const WTF::String *a2)
{
  int v2;
  WebCore::SQLiteDatabase *v4;
  int v5;
  char v6;
  uint64_t result;
  WebCore::SQLiteDatabase *v8;
  const WTF::String *v9;
  WebCore::SQLiteDatabase *v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *Error;
  WebCore::SQLiteDatabase *v16;
  uint64_t v17;
  WebCore::SQLiteDatabase *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  _BYTE buf[24];
  uint64_t v24;

  v2 = (int)a2;
  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(WebCore::SQLiteDatabase **)(a1 + 120);
  if (v4)
  {
    if (*((_QWORD *)v4 + 1))
      return 1;
    *(_QWORD *)(a1 + 120) = 0;
    WebCore::SQLiteDatabase::operator delete(v4, 0x40uLL);
  }
  else
  {
    *(_QWORD *)(a1 + 120) = 0;
  }
  v5 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)(a1 + 104), a2);
  v6 = v5;
  if ((v2 & 1) == 0 && !v5)
    return 1;
  v8 = (WebCore::SQLiteDatabase *)WTF::fastMalloc((WTF *)0x40);
  WebCore::SQLiteDatabase::SQLiteDatabase(v8);
  v10 = *(WebCore::SQLiteDatabase **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v8;
  if (v10)
    WebCore::SQLiteDatabase::operator delete(v10, 0x40uLL);
  WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)(a1 + 104), v9);
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)buf, v11);
  v13 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if ((WebCore::SQLiteDatabase::open() & 1) != 0)
  {
    if ((WebKit::SQLiteStorageArea::createTableIfNecessary((WebKit::SQLiteStorageArea *)a1) & 1) != 0)
    {
      if ((v6 & 1) == 0)
      {
LABEL_15:
        *(_QWORD *)buf = 0;
        std::optional<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>,void>(a1 + 152, (WTF::StringImpl *)buf);
        if (*(_QWORD *)buf)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(uint64_t *)buf, v14);
        if (!*(_BYTE *)(a1 + 172))
          *(_BYTE *)(a1 + 172) = 1;
        *(_DWORD *)(a1 + 168) = 0;
      }
      return 1;
    }
  }
  else
  {
    Error = (WTF::StringImpl *)WebCore::SQLiteDatabase::lastError(*(WebCore::SQLiteDatabase **)(a1 + 120));
    if (!WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded((WebKit::SQLiteStorageArea *)a1, Error))
      goto LABEL_30;
    if (!v2)
      return 1;
    v16 = (WebCore::SQLiteDatabase *)WTF::fastMalloc((WTF *)0x40);
    v17 = WebCore::SQLiteDatabase::SQLiteDatabase(v16);
    v18 = *(WebCore::SQLiteDatabase **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v17;
    if (v18)
      WebCore::SQLiteDatabase::operator delete(v18, 0x40uLL);
    if ((WebCore::SQLiteDatabase::open() & 1) != 0)
    {
      if ((WebKit::SQLiteStorageArea::createTableIfNecessary((WebKit::SQLiteStorageArea *)a1) & 1) != 0)
        goto LABEL_15;
    }
    else
    {
LABEL_30:
      v19 = qword_1ECE718E8;
      if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
      {
        WTF::String::utf8();
        v20 = v22 ? (uint64_t)v22 + 16 : 0;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v20;
        _os_log_error_impl(&dword_196BCC000, v19, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::prepareDatabase failed to open database at '%s'", buf, 0xCu);
        if (v22)
        {
          if (*(_DWORD *)v22 == 1)
            WTF::fastFree(v22, v21);
          else
            --*(_DWORD *)v22;
        }
      }
    }
  }
  result = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (result)
  {
    WebCore::SQLiteDatabase::operator delete((WebCore::SQLiteDatabase *)result, 0x40uLL);
    return 0;
  }
  return result;
}

void WebKit::SQLiteStorageArea::getItem(WebKit::SQLiteStorageArea *this, const WTF::String *a2, WTF::StringImpl **a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  if (!*((_BYTE *)a2 + 160))
    goto LABEL_7;
  v5 = (uint64_t *)((char *)a2 + 152);
  v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2 + 19, a3, (const WTF::StringImpl *)a3);
  if (*((_BYTE *)a2 + 160))
  {
    v7 = *v5;
    if (*v5)
      v7 += 24 * *(unsigned int *)(v7 - 4);
    if (v7 == v6)
    {
      *(_BYTE *)this = 1;
      *((_DWORD *)this + 2) = 1;
    }
    else
    {
      if (*(_DWORD *)(v6 + 16))
      {
LABEL_7:
        WebKit::SQLiteStorageArea::getItemFromDatabase(this, (WebCore::SQLiteDatabase **)a2);
        return;
      }
      v8 = *(_DWORD **)(v6 + 8);
      if (v8)
        *v8 += 2;
      *(_QWORD *)this = v8;
      *((_DWORD *)this + 2) = 0;
    }
  }
  else
  {
    __break(1u);
  }
}

WebCore::SQLiteTransaction *WebKit::SQLiteStorageArea::startTransactionIfNecessary(WebKit::SQLiteStorageArea *this)
{
  WebCore::SQLiteTransaction *v2;
  uint64_t *v3;
  WebCore::SQLiteDatabase *v4;
  WebCore::SQLiteTransaction *v5;
  WebCore::SQLiteTransaction *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::SQLiteTransaction *v10;
  WebCore::SQLiteTransaction *v11;

  v3 = (uint64_t *)((char *)this + 128);
  v2 = (WebCore::SQLiteTransaction *)*((_QWORD *)this + 16);
  if (!v2 || WebCore::SQLiteTransaction::wasRolledBackBySqlite(v2))
  {
    v4 = (WebCore::SQLiteDatabase *)*((_QWORD *)this + 15);
    v5 = (WebCore::SQLiteTransaction *)WTF::fastMalloc((WTF *)0x10);
    WebCore::SQLiteTransaction::SQLiteTransaction(v5, v4);
    std::unique_ptr<WebCore::SQLiteTransaction>::reset[abi:sn180100](v3, (uint64_t)v5);
  }
  result = (WebCore::SQLiteTransaction *)*v3;
  if (!*(_BYTE *)(*v3 + 8))
  {
    WebCore::SQLiteTransaction::begin(result);
    v7 = *((_QWORD *)this + 14);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    v10 = (WebCore::SQLiteTransaction *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v10 = &off_1E34C7A20;
    *((_QWORD *)v10 + 1) = v8;
    v11 = v10;
    (*(void (**)(uint64_t, WebCore::SQLiteTransaction **, double))(*(_QWORD *)v7 + 16))(v7, &v11, 0.5);
    result = v11;
    v11 = 0;
    if (result)
      return (WebCore::SQLiteTransaction *)(*(uint64_t (**)(WebCore::SQLiteTransaction *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::SQLiteStorageArea::cachedStatement(WebCore::SQLiteStatementAutoResetScope *this, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v7;
  int v8;
  WebCore::SQLiteStatement *v9;
  WebCore::SQLiteStatement *v11;
  int v12;
  char v13;

  v3 = *(_DWORD *)(a2 + 148);
  if (v3 <= a3)
    goto LABEL_13;
  v7 = a3;
  if (*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * a3))
    goto LABEL_9;
  WebCore::SQLiteDatabase::prepareHeapStatement();
  v8 = v12;
  if (!v12)
  {
    v9 = v11;
    v11 = 0;
    if (*(_DWORD *)(a2 + 148) > a3)
    {
      std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)(*(_QWORD *)(a2 + 136) + 8 * v7), v9);
      v8 = v12;
      goto LABEL_6;
    }
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x196CD24ECLL);
  }
LABEL_6:
  if (v8 != -1)
    ((void (*)(char *, WebCore::SQLiteStatement **))off_1E34C7888[v8])(&v13, &v11);
  v3 = *(_DWORD *)(a2 + 148);
LABEL_9:
  if (v3 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x196CD24F4);
  }
  return WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(this, *(WebCore::SQLiteStatement **)(*(_QWORD *)(a2 + 136) + 8 * v7));
}

WTF::StringImpl *WebKit::originFilePath(WTF::StringImpl *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;

  if (a2 && *((_DWORD *)a2 + 1))
  {
    WebKit::OriginStorageManager::originFileIdentifier((uint64_t *)&v4, this);
    WTF::FileSystemImpl::pathByAppendingComponent();
    this = v4;
    v4 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v2);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v3 += 2;
    *(_QWORD *)this = v3;
  }
  return this;
}

uint64_t WebKit::isEmptyOriginDirectory(WebKit *this, const WTF::String *a2)
{
  WebKit::OriginStorageManager *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  const WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t i;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  int v14;
  uint64_t v15[3];
  uint64_t v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v2 = (WebKit::OriginStorageManager *)WTF::FileSystemImpl::listDirectory(this, a2);
  if (v14)
  {
    if (v14 == 1)
    {
      WebKit::OriginStorageManager::originFileIdentifier(v16, v2);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = 0;
      v16[1] = v15[0];
      v12 = 0;
      do
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v12, (WTF::StringImpl **)&v16[v7++], v6, (uint64_t)v15);
      while (v7 != 2);
      for (i = 1; i != -1; --i)
      {
        v10 = (WTF::StringImpl *)v16[i];
        v16[i] = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v8);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
      v11 = WTF::allOf<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebKit::isEmptyOriginDirectory(WTF::String const&)::$_0>(v13, v14, (const WTF::StringImpl *)&v12);
      v4 = v11;
      if (v12)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v3);
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 1;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v3);
  return v4;
}

void WebKit::SQLiteStorageArea::allItems(WebKit::SQLiteStorageArea *this@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl ***v4;
  unsigned int v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  BOOL v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  int Error;
  uint64_t ErrorMsg;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WebCore::SQLiteStatement *v28;
  unsigned int v29;
  WTF::StringImpl **v30;
  uint8_t buf[8];
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (WebKit::SQLiteStorageArea::prepareDatabase((uint64_t)this, 0) && *((_QWORD *)this + 15))
  {
    v30 = 0;
    v4 = (WTF::StringImpl ***)((char *)this + 152);
    if (*((_BYTE *)this + 160))
    {
      if (*v4)
        v5 = *((_DWORD *)*v4 - 3);
      else
        v5 = 0;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(&v30, v5);
      if (!*((_BYTE *)this + 160))
        __break(1u);
      v6 = *v4;
      v7 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*v4);
      v8 = v7;
      v10 = v9;
      if (v6)
        v6 += 3 * *((unsigned int *)v6 - 1);
      if (v6 != v7)
      {
        do
        {
          if (*((_DWORD *)v8 + 4))
          {
            WebKit::SQLiteStorageArea::getItemFromDatabase((WebKit::SQLiteStorageArea *)&v28, (WebCore::SQLiteDatabase **)this);
            v11 = v29;
            if (!v29)
            {
              WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t *)&v30, v8, (WTF::StringImpl *)&v28, (uint64_t)buf);
              v11 = v29;
            }
            if (v11 != 0xFFFFFFFFLL)
              ((void (*)(uint8_t *, WebCore::SQLiteStatement **))off_1E34C7898[v11])(buf, &v28);
          }
          else
          {
            WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t *)&v30, v8, (WTF::StringImpl *)(v8 + 1), (uint64_t)buf);
          }
          while (1)
          {
            v8 += 3;
            if (v8 == v10)
              break;
            if ((unint64_t)*v8 + 1 > 1)
              goto LABEL_22;
          }
          v8 = v10;
LABEL_22:
          ;
        }
        while (v8 != v6);
      }
      *a2 = v30;
    }
    else
    {
      WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v28, (uint64_t)this, 4u);
      if (v28)
      {
        *(_QWORD *)buf = 0;
        std::optional<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>,void>((uint64_t)this + 152, (WTF::StringImpl *)buf);
        if (*(_QWORD *)buf)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(uint64_t *)buf, v12);
        if (!*((_BYTE *)this + 172))
          *((_BYTE *)this + 172) = 1;
        *((_DWORD *)this + 42) = 0;
        v13 = (WTF::StringImpl *)WebCore::SQLiteStatement::step(v28);
        while ((_DWORD)v13 == 100)
        {
          WebCore::SQLiteStatement::columnText(v28);
          WebCore::SQLiteStatement::columnBlobAsString(v28);
          if (v27)
            v14 = v26 == 0;
          else
            v14 = 1;
          if (!v14)
          {
            WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t *)&v30, &v27, (WTF::StringImpl *)&v26, (uint64_t)buf);
            WebKit::SQLiteStorageArea::updateCacheIfNeeded((uint64_t)this, &v27, (const WTF::String *)&v26);
          }
          v13 = (WTF::StringImpl *)WebCore::SQLiteStatement::step(v28);
          v16 = v26;
          v26 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v15);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = v27;
          v27 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v15);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        if ((_DWORD)v13 != 101)
        {
          v18 = qword_1ECE718E8;
          if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
          {
            Error = WebCore::SQLiteDatabase::lastError(*((WebCore::SQLiteDatabase **)this + 15));
            ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(*((WebCore::SQLiteDatabase **)this + 15));
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = Error;
            v32 = 2082;
            v33 = ErrorMsg;
            _os_log_error_impl(&dword_196BCC000, v18, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::allItems failed on executing statement (%d) - %{public}s", buf, 0x12u);
          }
          WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded(this, v13);
        }
        v19 = v30;
        v30 = 0;
      }
      else
      {
        v21 = qword_1ECE718E8;
        if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
        {
          v22 = WebCore::SQLiteDatabase::lastError(*((WebCore::SQLiteDatabase **)this + 15));
          v23 = WebCore::SQLiteDatabase::lastErrorMsg(*((WebCore::SQLiteDatabase **)this + 15));
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v22;
          v32 = 2082;
          v33 = v23;
          _os_log_error_impl(&dword_196BCC000, v21, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::allItems failed on creating statement (%d) - %{public}s", buf, 0x12u);
        }
        v19 = 0;
      }
      *a2 = v19;
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v28);
      if (v30)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v20);
    }
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  int i;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = (WTF::StringImpl **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    WTF::String::operator=(v15, (WTF::StringImpl *)a2);
    result = (uint64_t)WTF::String::operator=(v15 + 1, a3);
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (WTF::StringImpl **)result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    v26 = v22 + 16 * v25;
    v27 = 1;
    goto LABEL_31;
  }
  result = WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v27 = 0;
  v26 = v20 + 16 * v21;
LABEL_31:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

uint64_t WebKit::SQLiteStorageArea::updateCacheIfNeeded(uint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int i;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  int j;
  unsigned int v40;
  WTF::StringImpl **v41;
  WTF *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  uint64_t *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  _BYTE v78[4];
  unsigned int v79;
  unsigned int v80;
  uint8_t *v81;
  uint8_t buf[8];
  unsigned int *v83;
  unsigned int v84;
  __int16 v85;
  unsigned int v86;
  __int16 v87;
  unsigned int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 160))
    return this;
  v5 = this;
  v6 = (uint64_t *)(this + 152);
  v7 = (unsigned int *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(this + 152), a2, a3);
  if (!*(_BYTE *)(v5 + 160))
    goto LABEL_141;
  v9 = *v6;
  if (*v6)
    v9 += 24 * *(unsigned int *)(v9 - 4);
  v80 = 0;
  v10 = *a2 ? *((_DWORD *)*a2 + 1) << (((*((_DWORD *)*a2 + 4) >> 2) & 1) == 0) : 0;
  v11 = *(_QWORD *)a3 ? *(_DWORD *)(*(_QWORD *)a3 + 4) << (((*(_DWORD *)(*(_QWORD *)a3 + 16) >> 2) & 1) == 0) : 0;
  if ((unsigned int *)v9 == v7)
  {
    v13 = 0;
    v12 = v10;
  }
  else
  {
    if (*(_QWORD *)v7)
      v12 = *(_DWORD *)(*(_QWORD *)v7 + 4) << (((*(_DWORD *)(*(_QWORD *)v7 + 16) >> 2) & 1) == 0);
    else
      v12 = 0;
    *(_QWORD *)buf = &v80;
    v83 = &v80;
    v14 = v7[4];
    if ((_DWORD)v14 == -1)
LABEL_142:
      std::__throw_bad_variant_access[abi:sn180100]();
    v81 = buf;
    ((void (*)(uint8_t **, unsigned int *))off_1E34C7A38[v14])(&v81, v7 + 2);
    v13 = v12;
  }
  if (!*(_BYTE *)(v5 + 172))
    goto LABEL_141;
  v15 = *(_DWORD *)(v5 + 168);
  v78[0] = 0;
  if (!*(_QWORD *)a3)
  {
    if (!*(_BYTE *)(v5 + 160))
      goto LABEL_141;
    this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v6, a2, v8);
    v21 = this;
    if (*v6)
    {
      v22 = *v6 + 24 * *(unsigned int *)(*v6 - 4);
      if (v22 == this)
        goto LABEL_76;
    }
    else
    {
      if (!this)
        goto LABEL_76;
      v22 = 0;
    }
    if (v22 != this)
    {
      this = (uint64_t)WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)this, v20);
      v45 = *(unsigned int *)(v21 + 16);
      if ((_DWORD)v45 != -1)
        this = ((uint64_t (*)(uint8_t *, uint64_t))off_1E34C7878[v45])(buf, v21 + 8);
      v46 = -1;
      *(_DWORD *)(v21 + 16) = -1;
      ++*(_DWORD *)(*v6 - 16);
      v47 = *v6;
      if (*v6)
        v46 = *(_DWORD *)(v47 - 12) - 1;
      *(_DWORD *)(v47 - 12) = v46;
      v48 = *v6;
      if (*v6)
      {
        v49 = 6 * *(_DWORD *)(v48 - 12);
        v50 = *(_DWORD *)(v48 - 4);
        if (v49 < v50 && v50 >= 9)
          this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v6, v50 >> 1);
      }
    }
LABEL_76:
    if (v15 >= v13)
    {
      v51 = 0;
      v15 -= v13;
    }
    else
    {
      v51 = 1;
      v78[0] = 1;
    }
    v52 = v80;
    v53 = v15 - v80;
    if (v15 >= v80)
      goto LABEL_111;
    goto LABEL_80;
  }
  v77 = v11;
  v75 = v15;
  v76 = v13;
  v74 = v12;
  if (v11 >= 0x401)
  {
    if (*(_BYTE *)(v5 + 160))
    {
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v6),
            (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = *((_DWORD *)*a2 + 4);
      if (v18 >= 0x100)
        v19 = v18 >> 8;
      else
        v19 = WTF::StringImpl::hashSlowCase(*a2);
      v27 = 0;
      for (i = 1; ; ++i)
      {
        v29 = v19 & v17;
        v30 = v16 + 24 * (v19 & v17);
        v31 = *(WTF **)v30;
        if (*(_QWORD *)v30 == -1)
        {
          v27 = v16 + 24 * v29;
        }
        else
        {
          if (!v31)
          {
            v11 = v77;
            if (v27)
            {
              *(_QWORD *)v27 = 0;
              *(_QWORD *)(v27 + 8) = 0;
              *(_DWORD *)(v27 + 16) = 0;
              --*(_DWORD *)(*v6 - 16);
              v30 = v27;
            }
            this = (uint64_t)WTF::String::operator=((WTF::StringImpl **)v30, (WTF::StringImpl *)a2);
            v32 = *(unsigned int *)(v30 + 16);
            v33 = v75;
            v13 = v76;
            if ((_DWORD)v32 != -1)
            {
              v34 = (unsigned int *)(v30 + 8);
              if ((_DWORD)v32 == 1)
              {
                *v34 = v77;
                goto LABEL_90;
              }
              this = ((uint64_t (*)(uint8_t *, unsigned int *))off_1E34C7878[v32])(buf, v34);
            }
            *(_DWORD *)(v30 + 8) = v77;
            *(_DWORD *)(v30 + 16) = 1;
LABEL_90:
            v59 = *v6;
            if (*v6)
              v60 = *(_DWORD *)(v59 - 12) + 1;
            else
              v60 = 1;
            *(_DWORD *)(v59 - 12) = v60;
            v61 = *v6;
            if (*v6)
              v62 = *(_DWORD *)(v61 - 12);
            else
              v62 = 0;
            v63 = (*(_DWORD *)(v61 - 16) + v62);
            v64 = *(unsigned int *)(v61 - 4);
            if (v64 > 0x400)
            {
              if (v64 > 2 * v63)
                goto LABEL_102;
            }
            else if (3 * v64 > 4 * v63)
            {
              goto LABEL_102;
            }
            v58 = v6;
            goto LABEL_99;
          }
          this = WTF::equal(v31, *a2, v8);
          if ((_DWORD)this)
          {
            v35 = v16 + 24 * v29;
            v36 = (unsigned int *)(v35 + 8);
            v37 = *(unsigned int *)(v35 + 16);
            v11 = v77;
            v33 = v75;
            v13 = v76;
            if ((_DWORD)v37 != -1)
            {
              if ((_DWORD)v37 == 1)
              {
                *v36 = v77;
                goto LABEL_102;
              }
              this = ((uint64_t (*)(uint8_t *, unsigned int *))off_1E34C7878[v37])(buf, v36);
            }
            *v36 = v77;
            v36[2] = 1;
            goto LABEL_102;
          }
        }
        v19 = i + v29;
      }
    }
    goto LABEL_141;
  }
  if (!*(_BYTE *)(v5 + 160))
  {
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  v23 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v6),
        (v23 = *v6) != 0))
  {
    v24 = *(_DWORD *)(v23 - 8);
  }
  else
  {
    v24 = 0;
  }
  v25 = *((_DWORD *)*a2 + 4);
  v73 = v6;
  if (v25 >= 0x100)
    v26 = v25 >> 8;
  else
    v26 = WTF::StringImpl::hashSlowCase(*a2);
  v38 = 0;
  for (j = 1; ; ++j)
  {
    v40 = v26 & v24;
    v41 = (WTF::StringImpl **)(v23 + 24 * (v26 & v24));
    v42 = *v41;
    if (*v41 == (WTF::StringImpl *)-1)
    {
      v38 = v23 + 24 * v40;
      goto LABEL_60;
    }
    if (!v42)
      break;
    if (WTF::equal(v42, *a2, v8))
    {
      this = (uint64_t)std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,unsigned int>>::__assign_alt[abi:sn180100]<0ul,WTF::String,WTF::String const&>((WTF::StringImpl **)(v23 + 24 * v40 + 8), (WTF::StringImpl **)(v23 + 24 * v40 + 8), a3);
      v6 = v73;
      v11 = v77;
      v33 = v75;
      v13 = v76;
      goto LABEL_102;
    }
LABEL_60:
    v26 = j + v40;
  }
  v6 = v73;
  if (v38)
  {
    *(_QWORD *)v38 = 0;
    *(_QWORD *)(v38 + 8) = 0;
    *(_DWORD *)(v38 + 16) = 0;
    --*(_DWORD *)(*v73 - 16);
    v41 = (WTF::StringImpl **)v38;
  }
  WTF::String::operator=(v41, (WTF::StringImpl *)a2);
  this = (uint64_t)std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,unsigned int>>::__assign_alt[abi:sn180100]<0ul,WTF::String,WTF::String const&>(v41 + 1, v41 + 1, a3);
  v43 = *v73;
  v33 = v75;
  v13 = v76;
  if (*v73)
    v44 = *(_DWORD *)(v43 - 12) + 1;
  else
    v44 = 1;
  v11 = v77;
  *(_DWORD *)(v43 - 12) = v44;
  v54 = *v73;
  if (*v73)
    v55 = *(_DWORD *)(v54 - 12);
  else
    v55 = 0;
  v56 = (*(_DWORD *)(v54 - 16) + v55);
  v57 = *(unsigned int *)(v54 - 4);
  if (v57 > 0x400)
  {
    if (v57 > 2 * v56)
      goto LABEL_102;
  }
  else if (3 * v57 > 4 * v56)
  {
    goto LABEL_102;
  }
  v58 = v73;
LABEL_99:
  this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v58);
LABEL_102:
  if (v33 >= v13)
  {
    v51 = 0;
    v33 -= v13;
  }
  else
  {
    v51 = 1;
    v78[0] = 1;
  }
  v52 = v80;
  if (v33 >= v80)
  {
    v79 = v33 - v80;
    v33 -= v80;
  }
  else
  {
    v51 = 1;
    v78[0] = 1;
  }
  if (__CFADD__(v33, v74))
  {
    v51 = 1;
    v78[0] = 1;
  }
  else
  {
    v33 += v74;
  }
  v53 = v33 + v11;
  if (__CFADD__(v33, v11))
  {
LABEL_80:
    v78[0] = 1;
    goto LABEL_112;
  }
LABEL_111:
  v79 = v53;
  if (!v51)
    goto LABEL_125;
LABEL_112:
  v65 = qword_1ECE718E8;
  if (!os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
    goto LABEL_113;
  if (!*(_BYTE *)(v5 + 172))
    goto LABEL_141;
  v72 = *(_DWORD *)(v5 + 168);
  *(_DWORD *)buf = 67110144;
  *(_DWORD *)&buf[4] = v72;
  LOWORD(v83) = 1024;
  *(_DWORD *)((char *)&v83 + 2) = v13;
  HIWORD(v83) = 1024;
  v84 = v52;
  v85 = 1024;
  v86 = v10;
  v87 = 1024;
  v88 = v11;
  _os_log_error_impl(&dword_196BCC000, v65, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::updateCacheIfNeeded newCacheSize has overflowed: cacheSize - %u, oldKeySize - %u, oldValueSize - %u, keySize - %u, valueSize - %u, will recompute", buf, 0x20u);
LABEL_113:
  v78[0] = 0;
  v79 = 0;
  if (!*(_BYTE *)(v5 + 160))
    goto LABEL_141;
  v66 = *v6;
  this = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD *)*v6);
  v67 = this;
  v69 = v68;
  if (v66)
    v66 += 24 * *(unsigned int *)(v66 - 4);
  if (v66 == this)
  {
LABEL_125:
    v71 = 1;
    goto LABEL_126;
  }
  do
  {
    *(_QWORD *)buf = v78;
    v83 = (unsigned int *)v78;
    v70 = *(unsigned int *)(v67 + 16);
    if ((_DWORD)v70 == -1)
      goto LABEL_142;
    v81 = buf;
    this = ((uint64_t (*)(uint8_t **, uint64_t))off_1E34C7A58[v70])(&v81, v67 + 8);
    while (1)
    {
      v67 += 24;
      if (v67 == v69)
        break;
      if ((unint64_t)(*(_QWORD *)v67 + 1) > 1)
        goto LABEL_123;
    }
    v67 = v69;
LABEL_123:
    ;
  }
  while (v67 != v66);
  v71 = v78[0] == 0;
LABEL_126:
  if (*(_BYTE *)(v5 + 172))
  {
    if (v71)
    {
      *(_DWORD *)(v5 + 168) = v79;
      return this;
    }
LABEL_143:
    __break(0xC471u);
    JUMPOUT(0x196CD33FCLL);
  }
  if (!v71)
    goto LABEL_143;
  *(_DWORD *)(v5 + 168) = v79;
  *(_BYTE *)(v5 + 172) = 1;
  return this;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  WTF **v11;
  WTF *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 >= 0x100 ? v7 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v6;
    v11 = (WTF **)(v3 + 24 * (v8 & v6));
    v12 = *v11;
    if (*v11 == (WTF *)-1)
      continue;
    if (!v12)
      break;
    if ((WTF::equal(v12, *a2, a3) & 1) != 0)
      return (uint64_t)v11;
  }
  if (!*a1)
    return 0;
  return *a1 + 24 * *(unsigned int *)(*a1 - 4);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  char v39;
  char v40;
  char v41;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v8 = a2;
    v9 = result + 16;
    do
    {
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v9 += 24;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    while (1)
    {
      v12 = (WTF::StringImpl **)(v3 + 24 * v10);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *((_DWORD *)v13 + 4);
          if (v20 >= 0x100)
            v21 = v20 >> 8;
          else
            v21 = WTF::StringImpl::hashSlowCase(v13);
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v24 = (WTF::StringImpl **)(v18 + 24 * (v21 & v19));
            v21 = ++v22 + (v21 & v19);
          }
          while (*v24);
          v25 = v18 + 24 * v23;
          v28 = *(_DWORD *)(v25 + 16);
          v27 = (_DWORD *)(v25 + 16);
          v26 = v28;
          if (v28 == -1)
          {
            *v24 = 0;
          }
          else
          {
            ((void (*)(char *, uint64_t))off_1E34C7878[v26])(&v39, v18 + 24 * v23 + 8);
            v29 = *v24;
            *v27 = -1;
            *v24 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v7);
              else
                *(_DWORD *)v29 -= 2;
            }
          }
          v30 = *v12;
          *v12 = 0;
          *v24 = v30;
          v31 = v18 + 24 * v23;
          *(_BYTE *)(v31 + 8) = 0;
          v32 = v31 + 8;
          v33 = v3 + 24 * v10;
          *(_DWORD *)(v32 + 8) = -1;
          v34 = *(unsigned int *)(v33 + 16);
          if ((_DWORD)v34 != -1)
          {
            v35 = v33 + 8;
            ((void (*)(char *, uint64_t, uint64_t))off_1E34C7A48[v34])(&v41, v32, v33 + 8);
            *(_DWORD *)(v32 + 8) = v34;
            v36 = *(unsigned int *)(v3 + 24 * v10 + 16);
            if ((_DWORD)v36 != -1)
              ((void (*)(char *, uint64_t))off_1E34C7878[v36])(&v40, v35);
          }
          *(_DWORD *)(v3 + 24 * v10 + 16) = -1;
          v13 = *v12;
          *v12 = 0;
          if (!v13)
            goto LABEL_38;
          if (*(_DWORD *)v13 == 2)
            goto LABEL_37;
          *(_DWORD *)v13 -= 2;
        }
        else
        {
          v14 = v3 + 24 * v10;
          v17 = *(_DWORD *)(v14 + 16);
          v16 = (_DWORD *)(v14 + 16);
          v15 = v17;
          if (v17 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E34C7878[v15])(&v38, v3 + 24 * v10 + 8);
            v13 = *v12;
          }
          *v16 = -1;
          *v12 = 0;
          if (!v13)
            goto LABEL_38;
          if (*(_DWORD *)v13 == 2)
          {
LABEL_37:
            WTF::StringImpl::destroy(v13, v7);
            goto LABEL_38;
          }
          *(_DWORD *)v13 -= 2;
        }
      }
LABEL_38:
      if (++v10 == v11)
        return WTF::fastFree((WTF *)(v3 - 16), v7);
    }
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 32;
    do
    {
      v5 = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v4 - 32));
      if ((v6 & 1) == 0)
      {
        v7 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t, double))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v7])(&v10, v4, v5);
        *(_DWORD *)(v4 + 24) = -1;
        v8 = *(unsigned int *)(v4 - 8);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v8])(&v11, v4 - 32);
        *(_DWORD *)(v4 - 8) = -1;
      }
      v4 += 64;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

double WebCore::SecurityOriginData::isHashTableDeletedValue(WebCore::SecurityOriginData *this)
{
  uint64_t v1;
  double result;
  WKWebView *v3;
  SEL v4;
  id v5;
  double v6;
  char v7;
  char *v8;
  CGSize v9;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WKWebView *)std::__throw_bad_variant_access[abi:sn180100]();
    *(_QWORD *)&result = *(_OWORD *)&-[WKWebView scrollView:contentSizeForZoomScale:withProposedSize:](v3, v4, v5, v6, v9);
  }
  else
  {
    v8 = &v7;
    ((void (*)(char **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v8, this);
  }
  return result;
}

_QWORD *WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[2];
  v3 = (_QWORD *)(a1[1] + 8);
  a1[1] = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
    a1[1] = ++v3;
  WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
  ++*(_DWORD *)(*a1 + 8);
  return a1;
}

_QWORD *WebKit::WebSWOriginStore::importComplete(WebKit::WebSWOriginStore *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *((_BYTE *)this + 112) = 1;
  v2 = (char *)this + 120;
  WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v17, (_QWORD **)this + 15);
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v12 = v2;
  v13 = v5;
  v14 = v5;
  v15 = v5;
  v16 = v3 + 8 * v4;
  result = WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  v7 = v18;
  v8 = v13;
  while (v7 != v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    v10 = *(_QWORD *)(v9 + 56);
    v9 += 56;
    v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
    IPC::MessageSender::send<Messages::WebSWClientConnection::SetSWOriginTableIsImported>(v9, v11);
    result = WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
    v7 = v18;
  }
  return result;
}

_QWORD *WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  *a1 = a2;
  a1[1] = v4;
  a1[2] = v5;
  v6 = *a2;
  if (*a2)
  {
    v7 = *((unsigned int *)v6 - 1);
    v8 = &v6[v7];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  a1[3] = v8;
  a1[4] = &v6[v7];
  return WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebSWClientConnection::SetSWOriginTableIsImported>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2685;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::PageClientImpl::createDrawingAreaProxy(id *this@<X0>, WebKit::WebProcessProxy *a2@<X1>, _QWORD *a3@<X8>)
{
  id WeakRetained;
  const void *v6;

  WeakRetained = objc_loadWeakRetained(this + 5);
  if (WeakRetained)
  {
    v6 = WeakRetained;
    objc_msgSend(WeakRetained, "_createDrawingAreaProxy:", a2);
    CFRelease(v6);
  }
  else
  {
    *a3 = 0;
  }
}

void sub_196CD3C04(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_196CD3C84(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerTreeDrawingAreaProxy *WebKit::RemoteLayerTreeDrawingAreaProxy::RemoteLayerTreeDrawingAreaProxy(WebKit::RemoteLayerTreeDrawingAreaProxy *this, WebKit::WebPageProxy *a2, WebKit::WebProcessProxy *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::IOSurfacePool *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;

  v5 = (_QWORD *)WebKit::DrawingAreaProxy::DrawingAreaProxy((uint64_t)this, 0, (uint64_t)a2, (uint64_t)a3);
  *v5 = off_1E34CB4D0;
  v5[2] = &unk_1E34CB678;
  v6 = WTF::fastMalloc((WTF *)0x48);
  v7 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)v6 = v8;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 49) = 0u;
  *((_QWORD *)this + 9) = v6;
  *((_BYTE *)this + 80) = 0;
  *((_DWORD *)this + 22) = 3;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  v10 = (WebCore::IOSurfacePool *)WebCore::IOSurfacePool::sharedPool((WebCore::IOSurfacePool *)v7);
  WebCore::IOSurfacePool::setPoolSize(v10);
  v12 = *((_QWORD *)a2 + 28);
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v12 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, v11))WebKit::RemoteLayerTreeDrawingAreaProxy::initializeDebugIndicator(this);
  return this;
}

void sub_196CD3DCC(_Unwind_Exception *a1, void *a2)
{
  WebKit::DrawingAreaProxy *v2;
  WTF *v3;
  void *v5;

  WTF::fastFree(v3, a2);
  WebKit::DrawingAreaProxy::~DrawingAreaProxy(v2, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPreferences::setManagedMediaSourceLowThreshold(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setManagedMediaSourceHighThreshold(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setSampledPageTopColorMinHeight(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setSampledPageTopColorMaxDifference(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setIncrementalRenderingSuppressionTimeout(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

BOOL WebKit::WebPreferencesStore::setDoubleValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, double a3)
{
  double v6;
  _BYTE v8[24];
  double v9;
  int v10;

  v6 = WebKit::valueForKey<double>((uint64_t)this, (uint64_t)this + 24, a2);
  if (v6 != a3)
  {
    v9 = a3;
    v10 = 3;
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)this, a2, (const WTF::StringImpl *)&v9, (uint64_t)v8);
    if (v10 != -1)
      ((void (*)(_BYTE *, double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v10])(v8, &v9);
  }
  return v6 != a3;
}

uint64_t WebKit::WebPreferences::platformUpdateDoubleValueForKey(uint64_t this, const WTF::String **a2, double a3)
{
  uint64_t v5;
  void *v6;
  const WTF::String *v7;

  if (*(_QWORD *)(this + 16))
  {
    v5 = this;
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    return objc_msgSend(v6, "setDouble:forKey:", WebKit::makeKey(*(WebKit **)(v5 + 16), *(const WTF::String **)(v5 + 24), *a2, v7), a3);
  }
  return this;
}

WebKit::WebProcessPool *WebKit::WebProcessPool::WebProcessPool(WebKit::WebProcessPool *this, API::ProcessPoolConfiguration *a2)
{
  WebKit::WebPageGroup *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  WebKit::VisitedLinkStore *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  WTF::RunLoop *v19;
  _QWORD *v20;
  WTF::RunLoop *v21;
  WTF::RunLoop *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::RunLoop *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  WTF::RunLoop *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  const WTF::StringImpl *v38;
  int v39;
  WebCore::IOSApplication *v40;
  WTF *isMobileSafari;
  int v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  CFTypeRef *v50;
  const WTF::ASCIILiteral *v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  const char **v55;
  const char *v56;
  const char **v57;
  int v58;
  const char *v59;
  const char **v60;
  int v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  const WTF::ASCIILiteral *v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  const char **v74;
  const char *v75;
  const char **v76;
  int v77;
  const char *v78;
  const char **v79;
  int v80;
  const char *v81;
  char *v82;
  unsigned int *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int *v96;
  unsigned int **v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  WTF::StringImpl *v105;
  char *v106;
  WTF::StringImpl *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  WTF *v117;
  WTF::StringImpl *v118;
  WebCore::IOSApplication *updated;
  char *v120;
  char *v121;
  unsigned int *v122;
  unsigned int v123;
  CFTypeRef *v124;
  void *v125;
  char *v126;
  uint64_t v127;
  void *v128;
  char *v129;
  CFTypeRef *v130;
  unsigned int *v131;
  unsigned int v132;
  CFTypeRef *v133;
  void *v134;
  char *v135;
  uint64_t v136;
  void *v137;
  char *v138;
  CFTypeRef *v139;
  uint64_t *v141;
  _QWORD *v142;
  char *v143;
  char *__s2[2];
  CFTypeRef *v145;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 2) = &unk_1E34D6F98;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E34D6F50;
  *((_QWORD *)this + 4) = &unk_1E34D6FD0;
  *((_QWORD *)this + 5) = 0;
  API::ProcessPoolConfiguration::copy(a2, (API::ProcessPoolConfiguration **)this + 6);
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_BYTE *)this + 104) = 0;
  __s2[0] = 0;
  v4 = (WebKit::WebPageGroup *)API::Object::newObject(0x30uLL, 88);
  *((_QWORD *)this + 23) = WebKit::WebPageGroup::WebPageGroup(v4, (WTF::StringImpl **)__s2);
  v6 = (WTF::StringImpl *)__s2[0];
  __s2[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v143 = (char *)this + 48;
  *((_QWORD *)this + 24) = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = off_1E34D71E0;
  *((_QWORD *)this + 25) = v7;
  *((_QWORD *)this + 36) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = 0u;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = off_1E34D7218;
  *((_QWORD *)this + 37) = v8;
  *((_QWORD *)this + 38) = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v9 = off_1E34D7248;
  *((_QWORD *)this + 39) = v9;
  *((_QWORD *)this + 40) = 0;
  v10 = (WebKit::VisitedLinkStore *)API::Object::newObject(0x98uLL, 109);
  *((_QWORD *)this + 41) = WebKit::VisitedLinkStore::VisitedLinkStore(v10);
  *((_BYTE *)this + 336) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 386) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_BYTE *)this + 440) = 0;
  *((_QWORD *)this + 56) = 0x4095E00000000000;
  v11 = (uint64_t *)((char *)this + 456);
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_WORD *)this + 252) = 1;
  *((_BYTE *)this + 506) = 0;
  *((_QWORD *)this + 64) = 0;
  v12 = *((_QWORD *)this + 6);
  *((_BYTE *)this + 520) = *(_BYTE *)(v12 + 76);
  *(_WORD *)((char *)this + 521) = *(unsigned __int8 *)(v12 + 77);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = off_1E34D76E0;
  v13[1] = this;
  *((_QWORD *)this + 66) = v13;
  v14 = operator new();
  *(_QWORD *)v14 = (char *)this + 528;
  *(_QWORD *)(v14 + 8) = 0;
  *(_BYTE *)(v14 + 16) = 0;
  *((_QWORD *)this + 67) = v14;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = off_1E34D7708;
  v15[1] = this;
  *((_QWORD *)this + 68) = v15;
  v16 = operator new();
  *(_QWORD *)v16 = (char *)this + 544;
  *(_QWORD *)(v16 + 8) = 0;
  *(_BYTE *)(v16 + 16) = 0;
  *((_QWORD *)this + 69) = v16;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = off_1E34D7730;
  v17[1] = this;
  *((_QWORD *)this + 70) = v17;
  v18 = operator new();
  *(_QWORD *)v18 = (char *)this + 560;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 0;
  *((_QWORD *)this + 71) = v18;
  v19 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v18);
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v20 = off_1E34D7758;
  v20[1] = WebKit::WebProcessPool::updateHiddenPageThrottlingAutoIncreaseLimit;
  v20[2] = 0;
  v20[3] = this;
  v21 = (WTF::RunLoop *)WTF::RunLoop::TimerBase::TimerBase((WebKit::WebProcessPool *)((char *)this + 576), v19);
  *((_QWORD *)this + 72) = off_1E34ABE00;
  *((_QWORD *)this + 75) = v20;
  v22 = (WTF::RunLoop *)WTF::RunLoop::main(v21);
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v23 = off_1E34D7780;
  v23[1] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::WebProcessPool *)((char *)this + 608), v22);
  *((_QWORD *)this + 76) = off_1E34ABE00;
  *((_QWORD *)this + 79) = v23;
  *((_DWORD *)this + 160) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_BYTE *)this + 680) = 0;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_QWORD *)this + 90) = 0;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v24 = off_1E34D77A8;
  v24[1] = this;
  *((_QWORD *)this + 91) = v24;
  v25 = operator new();
  *(_QWORD *)v25 = (char *)this + 728;
  *(_QWORD *)(v25 + 8) = 0;
  *(_BYTE *)(v25 + 16) = 0;
  *((_QWORD *)this + 92) = v25;
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v26 = off_1E34D77D0;
  v26[1] = this;
  *((_QWORD *)this + 93) = v26;
  v27 = operator new();
  *(_QWORD *)v27 = (char *)this + 744;
  *(_QWORD *)(v27 + 8) = 0;
  *(_BYTE *)(v27 + 16) = 0;
  *((_QWORD *)this + 94) = v27;
  v28 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = this;
  *(_DWORD *)(v28 + 16) = 0;
  *(_OWORD *)(v28 + 24) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *((_QWORD *)this + 95) = v28;
  v29 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v29 = 0;
  *(_OWORD *)(v29 + 8) = 0u;
  v30 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v29);
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v31 = off_1E34D7668;
  v31[1] = WebKit::WebProcessCache::clear;
  v31[2] = 0;
  v31[3] = v29;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v29 + 24), v30);
  *(_QWORD *)(v29 + 24) = off_1E34ABE00;
  *(_QWORD *)(v29 + 48) = v31;
  WebKit::WebProcessCache::updateCapacity((WebKit::WebProcessCache *)v29, *((WebKit::WebProcessPool **)this + 6));
  WebKit::WebProcessCache::platformInitialize((WebKit::WebProcessCache *)v29);
  *((_QWORD *)this + 96) = v29;
  *(_OWORD *)((char *)this + 776) = 0u;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v32 = off_1E34D77F8;
  v32[1] = this;
  *((_QWORD *)this + 99) = v32;
  v33 = operator new();
  *(_QWORD *)v33 = (char *)this + 792;
  *(_QWORD *)(v33 + 8) = 0;
  *(_BYTE *)(v33 + 16) = 0;
  *((_QWORD *)this + 100) = v33;
  *((_BYTE *)this + 808) = 0;
  *((_BYTE *)this + 824) = 0;
  v34 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v33);
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v35 = off_1E34D7758;
  v35[1] = WebKit::WebProcessPool::clearAudibleActivity;
  v35[2] = 0;
  v35[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::WebProcessPool *)((char *)this + 832), v34);
  *((_QWORD *)this + 104) = off_1E34ABE00;
  *((_QWORD *)this + 107) = v35;
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v36 = off_1E34D7820;
  v36[1] = this;
  *((_QWORD *)this + 108) = v36;
  v37 = operator new();
  *(_QWORD *)v37 = (char *)this + 864;
  *(_QWORD *)(v37 + 8) = 0;
  *(_BYTE *)(v37 + 16) = 0;
  *((_QWORD *)this + 109) = v37;
  *((_WORD *)this + 440) = 0;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 929) = 0u;
  v141 = (uint64_t *)((char *)this + 952);
  *(_OWORD *)((char *)this + 952) = 0u;
  v39 = WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::s_needsGlobalStaticInitialization;
  WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::s_needsGlobalStaticInitialization = 1;
  if ((v39 & 1) == 0)
  {
    WTF::allPrivileges((WTF *)v37);
    WTF::setProcessPrivileges();
    WebCore::NetworkStorageSession::permitProcessToUseCookieAPI((WebCore::NetworkStorageSession *)1);
    WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
    v40 = (WebCore::IOSApplication *)WebCore::Process::setIdentifier();
    isMobileSafari = (WTF *)WebCore::IOSApplication::isMobileSafari(v40);
    if ((_DWORD)isMobileSafari)
      WTF::enableAllSDKAlignedBehaviors(isMobileSafari);
  }
  v42 = v39 ^ 1;
  v43 = *(_QWORD *)v143;
  v44 = *(unsigned int *)(*(_QWORD *)v143 + 52);
  if ((_DWORD)v44)
  {
    v45 = *(WTF::StringImpl ***)(v43 + 40);
    v46 = 8 * v44;
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 47, v45++, v38, (uint64_t)__s2);
      v46 -= 8;
    }
    while (v46);
    v43 = *(_QWORD *)v143;
  }
  v47 = *(unsigned int *)(v43 + 36);
  if ((_DWORD)v47)
  {
    v48 = *(WTF::StringImpl ***)(v43 + 24);
    v49 = 8 * v47;
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 48, v48++, v38, (uint64_t)__s2);
      v49 -= 8;
    }
    while (v49);
  }
  WebKit::WebProcessPool::platformInitialize((uint64_t)this, v42);
  LOBYTE(v145) = -69;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)this + 7, &v145, (uint64_t)this + 16, (unsigned int **)__s2);
  __s2[0] = "WebGeolocationManagerProxy";
  __s2[1] = (char *)27;
  v50 = (CFTypeRef *)API::Object::newObject(0x48uLL, 64);
  WebKit::WebGeolocationManagerProxy::WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)v50, this);
  v52 = *((_QWORD *)this + 57);
  if (v52
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)this + 57),
        (v52 = *v11) != 0))
  {
    v53 = *(_DWORD *)(v52 - 8);
  }
  else
  {
    v53 = 0;
  }
  v54 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)__s2, v51) & v53;
  v55 = (const char **)(v52 + 24 * v54);
  v56 = *v55;
  v142 = (_QWORD *)((char *)this + 456);
  if (*v55)
  {
    v57 = 0;
    v58 = 1;
    v59 = __s2[0];
    do
    {
      v60 = v57;
      v57 = v55;
      if (v56 != (const char *)-1)
      {
        if (v59)
        {
          v61 = strcmp(v56, v59);
          v57 = v60;
          if (!v61)
          {
LABEL_39:
            v11 = (uint64_t *)((char *)this + 456);
            v63 = (char *)this + 48;
            if (v50)
              CFRelease(v50[1]);
            goto LABEL_41;
          }
        }
        else
        {
          v57 = v60;
          if (!v56)
            goto LABEL_39;
        }
      }
      v54 = (v54 + v58) & v53;
      v55 = (const char **)(v52 + 24 * v54);
      v56 = *v55;
      ++v58;
    }
    while (*v55);
    v11 = (uint64_t *)((char *)this + 456);
    if (v57)
    {
      *v57 = 0;
      v57[1] = 0;
      v57[2] = 0;
      --*(_DWORD *)(*v142 - 16);
      v55 = v57;
    }
  }
  *(_OWORD *)v55 = *(_OWORD *)__s2;
  v62 = v55[2];
  v55[2] = (const char *)(v50 + 2);
  v63 = (char *)this + 48;
  if (v62)
    (*(void (**)(const char *))(*(_QWORD *)v62 + 32))(v62);
  v64 = *v11;
  if (*v11)
    v65 = *(_DWORD *)(v64 - 12) + 1;
  else
    v65 = 1;
  *(_DWORD *)(v64 - 12) = v65;
  v66 = *v11;
  if (*v11)
    v67 = *(_DWORD *)(v66 - 12);
  else
    v67 = 0;
  v68 = (*(_DWORD *)(v66 - 16) + v67);
  v69 = *(unsigned int *)(v66 - 4);
  if (v69 > 0x400)
  {
    if (v69 > 2 * v68)
      goto LABEL_41;
    goto LABEL_38;
  }
  if (3 * v69 <= 4 * v68)
LABEL_38:
    WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(v11);
LABEL_41:
  __s2[0] = "WebNotificationManagerProxy";
  __s2[1] = (char *)28;
  WebKit::WebNotificationManagerProxy::create(this, (WebKit **)&v145);
  v71 = *((_QWORD *)this + 57);
  if (v71
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(v11),
        (v71 = *v11) != 0))
  {
    v72 = *(_DWORD *)(v71 - 8);
  }
  else
  {
    v72 = 0;
  }
  v73 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)__s2, v70) & v72;
  v74 = (const char **)(v71 + 24 * v73);
  v75 = *v74;
  if (*v74)
  {
    v76 = 0;
    v77 = 1;
    v78 = __s2[0];
    do
    {
      v79 = v76;
      v76 = v74;
      if (v75 != (const char *)-1)
      {
        if (v78)
        {
          v80 = strcmp(v75, v78);
          v76 = v79;
          if (!v80)
          {
LABEL_65:
            v82 = (char *)this + 16;
            v83 = (unsigned int *)((char *)this + 24);
            if (v145)
              CFRelease(v145[1]);
            goto LABEL_67;
          }
        }
        else
        {
          v76 = v79;
          if (!v75)
            goto LABEL_65;
        }
      }
      v73 = (v73 + v77) & v72;
      v74 = (const char **)(v71 + 24 * v73);
      v75 = *v74;
      ++v77;
    }
    while (*v74);
    v11 = (uint64_t *)((char *)this + 456);
    if (v76)
    {
      *v76 = 0;
      v76[1] = 0;
      v76[2] = 0;
      --*(_DWORD *)(*v142 - 16);
      v74 = v76;
    }
  }
  *(_OWORD *)v74 = *(_OWORD *)__s2;
  v81 = v74[2];
  v74[2] = (const char *)(v145 + 2);
  v82 = (char *)this + 16;
  v83 = (unsigned int *)((char *)this + 24);
  if (v81)
    (*(void (**)(const char *))(*(_QWORD *)v81 + 32))(v81);
  v84 = *v11;
  if (*v11)
    v85 = *(_DWORD *)(v84 - 12) + 1;
  else
    v85 = 1;
  *(_DWORD *)(v84 - 12) = v85;
  v86 = *v11;
  if (*v11)
    v87 = *(_DWORD *)(v86 - 12);
  else
    v87 = 0;
  v88 = (*(_DWORD *)(v86 - 16) + v87);
  v89 = *(unsigned int *)(v86 - 4);
  if (v89 <= 0x400)
  {
    if (3 * v89 > 4 * v88)
      goto LABEL_67;
    goto LABEL_64;
  }
  if (v89 <= 2 * v88)
LABEL_64:
    WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(v11);
LABEL_67:
  {
    v91 = 0;
    LODWORD(v90) = 0;
    WebKit::processPools(void)::processPools = 0;
    *(_QWORD *)&dword_1ECE73860 = 0;
    goto LABEL_69;
  }
  v90 = dword_1ECE73864;
  v91 = (unsigned int *)WebKit::processPools(void)::processPools;
  if (dword_1ECE73864 == dword_1ECE73860)
  {
LABEL_69:
    v92 = v90;
    v93 = ((unint64_t)v90 >> 2) + v90;
    if (v93 >= 0x10)
      v94 = v93 + 1;
    else
      v94 = 16;
    if (v94 <= (unint64_t)v90 + 1)
      v95 = v90 + 1;
    else
      v95 = v94;
    if (v95 >> 29)
      goto LABEL_143;
    v96 = &v91[2 * v92];
    v97 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v95));
    dword_1ECE73860 = v95;
    WebKit::processPools(void)::processPools = (uint64_t)v97;
    WTF::VectorMover<false,WTF::WeakRef<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl>>::move(v91, v96, v97);
    v99 = WebKit::processPools(void)::processPools;
    if (v91)
    {
      if ((unsigned int *)WebKit::processPools(void)::processPools == v91)
      {
        WebKit::processPools(void)::processPools = 0;
        dword_1ECE73860 = 0;
      }
      WTF::fastFree((WTF *)v91, v98);
      v99 = WebKit::processPools(void)::processPools;
    }
    v100 = dword_1ECE73864;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v83, (uint64_t)v82);
    v101 = *(unsigned int **)v83;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 + 1, v101));
    *(_QWORD *)(v99 + 8 * v100) = v101;
    goto LABEL_86;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v83, (uint64_t)v82);
  v103 = *(unsigned int **)v83;
  do
    v104 = __ldaxr(v103);
  while (__stlxr(v104 + 1, v103));
  *(_QWORD *)&v91[2 * v90] = v103;
LABEL_86:
  ++dword_1ECE73864;
  WebKit::resolvePathForSandboxExtension((WTF::StringImpl **)__s2);
  v106 = __s2[0];
  __s2[0] = 0;
  v107 = (WTF::StringImpl *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = v106;
  if (!v107)
    goto LABEL_91;
  v108 = *(_DWORD *)v107 - 2;
  if (*(_DWORD *)v107 != 2)
    goto LABEL_90;
  WTF::StringImpl::destroy(v107, v105);
  v107 = (WTF::StringImpl *)__s2[0];
  __s2[0] = 0;
  if (!v107)
    goto LABEL_91;
  v108 = *(_DWORD *)v107 - 2;
  if (*(_DWORD *)v107 == 2)
    WTF::StringImpl::destroy(v107, v105);
  else
LABEL_90:
    *(_DWORD *)v107 = v108;
LABEL_91:
  v109 = *(_QWORD *)v63;
  v110 = *(unsigned int *)(*(_QWORD *)v63 + 68);
  if (!(_DWORD)v110)
  {
    v115 = 0;
    v111 = 0;
    goto LABEL_99;
  }
  if (v110 >> 29)
  {
LABEL_143:
    __break(0xC471u);
    JUMPOUT(0x196CD522CLL);
  }
  v111 = WTF::fastMalloc((WTF *)(8 * v110));
  v112 = *(unsigned int *)(v109 + 68);
  if ((_DWORD)v112)
  {
    v113 = 0;
    v114 = 8 * v112;
    do
    {
      WebKit::resolvePathForSandboxExtension((WTF::StringImpl **)__s2);
      v115 = v113 + 1;
      *(char **)(v111 + 8 * v113++) = __s2[0];
      v114 -= 8;
    }
    while (v114);
  }
  else
  {
    v115 = 0;
  }
LABEL_99:
  v116 = *((unsigned int *)this + 179);
  if ((_DWORD)v116)
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)this + 88), (WTF::StringImpl *)(*((_QWORD *)this + 88) + 8 * v116));
  v117 = (WTF *)*((_QWORD *)this + 88);
  if (v117)
  {
    *((_QWORD *)this + 88) = 0;
    *((_DWORD *)this + 178) = 0;
    WTF::fastFree(v117, v105);
  }
  __s2[0] = 0;
  __s2[1] = 0;
  *((_QWORD *)this + 88) = v111;
  *((_DWORD *)this + 178) = v110;
  *((_DWORD *)this + 179) = v115;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)__s2, v105);
  v118 = WebKit::WebProcessPool::platformResolvePathsForSandboxExtensions(this);
  WebKit::UIProcess::initializeLoggingIfNecessary(v118);
  updated = (WebCore::IOSApplication *)WebKit::WebProcessPool::updateBackForwardCacheCapacity((uint64_t)this);
  if ((WebCore::IOSApplication::isLutron(updated) & 1) != 0 && (WTF::linkedOnOrAfterSDKWithBehavior() & 1) == 0)
  {
    v120 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v120 = off_1E34D7848;
    __s2[0] = v120;
    WTF::callOnMainRunLoop();
    v121 = __s2[0];
    __s2[0] = 0;
    if (v121)
      (*(void (**)(char *))(*(_QWORD *)v121 + 8))(v121);
  }
  {
    qword_1ECE735A0 = 0;
    WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance = 0u;
    *(_OWORD *)algn_1ECE73590 = 0u;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v83, (uint64_t)v82);
  v122 = *(unsigned int **)v83;
  if (*(_QWORD *)v83)
  {
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 + 1, v122));
  }
  v124 = (CFTypeRef *)WTF::fastMalloc((WTF *)0x10);
  *v124 = &off_1E34D7870;
  v124[1] = v122;
  v145 = v124;
  WebKit::StorageAccessUserAgentStringQuirkController::observeUpdates((uint64_t)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance, (uint64_t *)&v145, (uint64_t *)__s2);
  v126 = __s2[0];
  __s2[0] = 0;
  v127 = *v141;
  *v141 = (uint64_t)v126;
  if (v127)
  {
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v127, v125);
    v129 = __s2[0];
    __s2[0] = 0;
    if (v129)
      WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref((uint64_t)v129, v128);
  }
  v130 = v145;
  v145 = 0;
  if (v130)
    (*((void (**)(CFTypeRef *))*v130 + 1))(v130);
  {
    xmmword_1ECE73558 = 0u;
    unk_1ECE73568 = 0u;
    WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v83, (uint64_t)v82);
  v131 = *(unsigned int **)v83;
  if (*(_QWORD *)v83)
  {
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 + 1, v131));
  }
  v133 = (CFTypeRef *)WTF::fastMalloc((WTF *)0x10);
  *v133 = &off_1E34D7898;
  v133[1] = v131;
  v145 = v133;
  WebKit::StorageAccessPromptQuirkController::observeUpdates((uint64_t)&WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance, (uint64_t *)&v145, (uint64_t *)__s2);
  v135 = __s2[0];
  __s2[0] = 0;
  v136 = *((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = v135;
  if (v136)
  {
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v136, v134);
    v138 = __s2[0];
    __s2[0] = 0;
    if (v138)
      WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref((uint64_t)v138, v137);
  }
  v139 = v145;
  v145 = 0;
  if (v139)
    (*((void (**)(CFTypeRef *))*v139 + 1))(v139);
  {
    if (DWORD1(xmmword_1ECE73558))
      goto LABEL_128;
  }
  else
  {
    xmmword_1ECE73558 = 0u;
    unk_1ECE73568 = 0u;
    WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
  }
  WebKit::StorageAccessPromptQuirkController::initialize(&WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance);
LABEL_128:
  {
    qword_1ECE735A0 = 0;
    WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance = 0u;
    *(_OWORD *)algn_1ECE73590 = 0u;
LABEL_131:
    WebKit::StorageAccessUserAgentStringQuirkController::initialize(&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance);
    return this;
  }
  if (!*((_QWORD *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance + 1)
    || !*(_DWORD *)(*((_QWORD *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance + 1)
                  - 12))
  {
    goto LABEL_131;
  }
  return this;
}

void WebKit::WebProcessCache::updateCapacity(WebKit::WebProcessCache *this, WebKit::WebProcessPool *a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  int v14;
  uint64_t v15;
  int v16;
  WebKit::WebProcessCache *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = 84;
  if (!*((_BYTE *)a2 + 85))
    v3 = 86;
  if (!*((_BYTE *)a2 + v3))
  {
    v5 = qword_1ECE71668;
    if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 134218240;
      v17 = this;
      v18 = 1024;
      v19 = 0;
      v7 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache is disabled because process swap on navigation is disabled";
      goto LABEL_17;
    }
LABEL_18:
    *((_DWORD *)this + 1) = 0;
    goto LABEL_19;
  }
  if (!*((_BYTE *)a2 + 91))
  {
    v5 = qword_1ECE71668;
    if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 134218240;
      v17 = this;
      v18 = 1024;
      v19 = 0;
      v7 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache is disabled by client";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  {
    if (WebKit::LegacyGlobalSettings::singleton(void)::properties != 2)
      goto LABEL_8;
  }
  else
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    unk_1ECE73790 = 0u;
    unk_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  if (*((_BYTE *)a2 + 96))
  {
LABEL_8:
    v4 = *((unsigned __int8 *)a2 + 96);
    v5 = qword_1ECE71668;
    v6 = os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        v16 = 134218240;
        v17 = this;
        v18 = 1024;
        v19 = 0;
        v7 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache is disabled because process-per-tab was disabled";
LABEL_17:
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v16, 0x12u);
        goto LABEL_18;
      }
    }
    else if (v6)
    {
      v16 = 134218240;
      v17 = this;
      v18 = 1024;
      v19 = 0;
      v7 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache is disabled because cache model is not PrimaryWebBrowser";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v8 = WTF::ramSizeDisregardingJetsamLimit(this);
  v9 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 134218496;
    v17 = this;
    v18 = 1024;
    v19 = 0;
    v20 = 2048;
    v21 = v8;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::memory size %zu bytes", (uint8_t *)&v16, 0x1Cu);
  }
  if (!(v8 >> 31))
  {
    *((_DWORD *)this + 1) = 0;
    v10 = qword_1ECE71668;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    v16 = 134218240;
    v17 = this;
    v18 = 1024;
    v19 = 0;
    v11 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache is disabled because device does not have enough RAM";
    v12 = v10;
    v13 = 18;
    goto LABEL_32;
  }
  if ((v8 >> 28) >= 0xA)
    v14 = 10;
  else
    v14 = v8 >> 28;
  *((_DWORD *)this + 1) = v14;
  v15 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 134218496;
    v17 = this;
    v18 = 1024;
    v19 = 0;
    v20 = 1024;
    LODWORD(v21) = v14;
    v11 = "%p - [PID=%d] WebProcessCache::updateCapacity: Cache has a capacity of %u processes";
    v12 = v15;
    v13 = 24;
LABEL_32:
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, v13);
  }
LABEL_19:
  if (!*((_DWORD *)this + 1))
    WebKit::WebProcessCache::clear((uint64_t)this);
}

uint64_t WebKit::WebProcessCache::clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v1 = this;
  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v4 = qword_1ECE71668;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
      {
LABEL_15:
        *(_QWORD *)(v1 + 8) = 0;
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v2, v5);
LABEL_16:
        this = *(_QWORD *)(v1 + 16);
        if (this)
        {
          *(_QWORD *)(v1 + 16) = 0;
          return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(this, (WTF::StringImpl *)v5);
        }
        return this;
      }
      v6 = *(_QWORD *)(v1 + 16);
      if (v6)
        v7 = *(_DWORD *)(v6 - 12);
      else
        v7 = 0;
      goto LABEL_13;
    }
  }
  v8 = *(_QWORD *)(this + 16);
  if (v8)
  {
    v7 = *(_DWORD *)(v8 - 12);
    if (v7)
    {
      v4 = qword_1ECE71668;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      if (v2)
        v3 = *(_DWORD *)(v2 - 12);
      else
        v3 = 0;
LABEL_13:
      v9 = 134218496;
      v10 = v1;
      v11 = 1024;
      v12 = 0;
      v13 = 1024;
      v14 = v7 + v3;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::clear: Evicting %u processes", (uint8_t *)&v9, 0x18u);
      v2 = *(_QWORD *)(v1 + 8);
LABEL_14:
      if (!v2)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  return this;
}

unsigned int *WebKit::StorageAccessPromptQuirkController::observeUpdates@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  unsigned int *result;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _BYTE v35[24];
  _QWORD v36[5];
  WTF *v37;

  if (!*(_QWORD *)a1)
  {
    v6 = (void *)objc_opt_new();
    v7 = *(const void **)a1;
    *(_QWORD *)a1 = v6;
    if (v7)
    {
      CFRelease(v7);
      v6 = *(void **)a1;
    }
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = ___ZN6WebKit34StorageAccessPromptQuirkController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke;
    v36[3] = &__block_descriptor_40_e5_v8__0l;
    v36[4] = a1;
    objc_msgSend(v6, "listenForStorageAccessPromptQuirkChanges:", v36);
  }
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 0;
  v10 = (unsigned int *)(v9 + 8);
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 16) = v11;
  *a3 = v9;
  v12 = (uint64_t *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 36);
  LODWORD(v11) = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v11;
  if (v11 > v13)
  {
    v14 = *v12;
    if (*v12)
    {
      v15 = *(_DWORD *)(v14 - 4);
      if (!v15)
        goto LABEL_29;
      v16 = 0;
      do
      {
        while (1)
        {
          v17 = *(_QWORD *)(v14 + 8 * --v15);
          if ((unint64_t)(v17 + 1) >= 2 && !*(_QWORD *)(v17 + 8))
            break;
          if (!v15)
            goto LABEL_18;
        }
        *(_QWORD *)(v14 + 8 * v15) = 0;
        do
        {
          v18 = __ldaxr((unsigned int *)v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, (unsigned int *)v17));
        if (!v19)
        {
          atomic_store(1u, (unsigned int *)v17);
          WTF::fastFree((WTF *)v17, v8);
        }
        *(_QWORD *)(v14 + 8 * v15) = -1;
        ++v16;
      }
      while (v15);
LABEL_18:
      v14 = *v12;
      if (v16)
      {
        *(_DWORD *)(v14 - 16) += v16;
        v20 = *v12;
        if (*v12)
          v21 = *(_DWORD *)(v20 - 12);
        else
          v21 = 0;
        *(_DWORD *)(v20 - 12) = v21 - v16;
        v14 = *v12;
      }
      if (v14)
      {
        v22 = *(_DWORD *)(v14 - 4);
        if (v22 >= 9 && 6 * *(_DWORD *)(v14 - 12) < v22)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 24));
          v14 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 32) = 0;
          if (!v14)
          {
            v24 = 0;
            goto LABEL_33;
          }
          goto LABEL_32;
        }
LABEL_29:
        *(_DWORD *)(a1 + 32) = 0;
LABEL_32:
        v24 = *(_DWORD *)(v14 - 12);
        v25 = 0x7FFFFFFF;
        if (v24 >= 0x7FFFFFFF)
        {
LABEL_34:
          *(_DWORD *)(a1 + 36) = 2 * v25;
          goto LABEL_35;
        }
LABEL_33:
        v25 = v24;
        goto LABEL_34;
      }
    }
    v24 = 0;
    *(_DWORD *)(a1 + 32) = 0;
    goto LABEL_33;
  }
LABEL_35:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v10, v9);
  v26 = *(unsigned int **)v10;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  do
    v28 = __ldaxr(v26);
  while (__stlxr(v28 + 1, v26));
  v37 = (WTF *)v26;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v12, &v37, (uint64_t)v35);
  result = (unsigned int *)v37;
  v37 = 0;
  if (result)
  {
    do
    {
      v33 = __ldaxr(result);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, result));
    if (!v34)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v29);
    }
  }
  if (v26)
  {
    do
    {
      v31 = __ldaxr(v26);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v26));
    if (!v32)
    {
      atomic_store(1u, v26);
      return (unsigned int *)WTF::fastFree((WTF *)v26, v29);
    }
  }
  return result;
}

void sub_196CD5974(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18)
{
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  if (a18)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)a18);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)a18));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)a18);
      WTF::fastFree(a18, a2);
    }
  }
  if (v20)
  {
    do
    {
      v22 = __ldaxr(v20);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v20));
    if (!v23)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  *v18 = 0;
  WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v19, a2);
  _Unwind_Resume(a1);
}

WebKit::VisitedLinkStore *WebKit::VisitedLinkStore::VisitedLinkStore(WebKit::VisitedLinkStore *this)
{
  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D2240;
  *((_QWORD *)this + 2) = &off_1E34B0558;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)this = &off_1E34D2198;
  *((_QWORD *)this + 2) = &unk_1E34D21D8;
  *((_QWORD *)this + 5) = &unk_1E34D2210;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  WebKit::SharedStringHashStore::SharedStringHashStore((uint64_t)this + 64, (uint64_t)this + 40);
  return this;
}

uint64_t WebKit::SharedStringHashStore::SharedStringHashStore(uint64_t a1, uint64_t a2)
{
  WTF::RunLoop::TimerBase *v3;
  WTF::RunLoop *v4;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (WTF::RunLoop::TimerBase *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::RunLoop::Timer::Timer<WebKit::SharedStringHashStore>(v3, v4, a1, (uint64_t)WebKit::SharedStringHashStore::processPendingOperations, 0);
  return a1;
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::SharedStringHashStore>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t result;

  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34CB110;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a3;
  result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E34ABE00;
  *((_QWORD *)a1 + 3) = v10;
  return result;
}

void WebKit::UIProcess::initializeLoggingIfNecessary(WebKit::UIProcess *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&WebKit::UIProcess::initializeLoggingIfNecessary(void)::onceFlag);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WebKit::UIProcess::initializeLoggingIfNecessary(void)::onceFlag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::UIProcess::initializeLoggingIfNecessary(void)::$_0 &&>>);
  }
}

unsigned int *WebKit::StorageAccessUserAgentStringQuirkController::observeUpdates@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  unsigned int *result;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _BYTE v35[24];
  _QWORD v36[5];
  WTF *v37;

  if (!*(_QWORD *)a1)
  {
    v6 = (void *)objc_opt_new();
    v7 = *(const void **)a1;
    *(_QWORD *)a1 = v6;
    if (v7)
    {
      CFRelease(v7);
      v6 = *(void **)a1;
    }
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = ___ZN6WebKit43StorageAccessUserAgentStringQuirkController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke;
    v36[3] = &__block_descriptor_40_e5_v8__0l;
    v36[4] = a1;
    objc_msgSend(v6, "listenForStorageAccessUserAgentStringQuirkChanges:", v36);
  }
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 0;
  v10 = (unsigned int *)(v9 + 8);
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 16) = v11;
  *a3 = v9;
  v12 = (uint64_t *)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 28);
  LODWORD(v11) = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v11;
  if (v11 > v13)
  {
    v14 = *v12;
    if (*v12)
    {
      v15 = *(_DWORD *)(v14 - 4);
      if (!v15)
        goto LABEL_29;
      v16 = 0;
      do
      {
        while (1)
        {
          v17 = *(_QWORD *)(v14 + 8 * --v15);
          if ((unint64_t)(v17 + 1) >= 2 && !*(_QWORD *)(v17 + 8))
            break;
          if (!v15)
            goto LABEL_18;
        }
        *(_QWORD *)(v14 + 8 * v15) = 0;
        do
        {
          v18 = __ldaxr((unsigned int *)v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, (unsigned int *)v17));
        if (!v19)
        {
          atomic_store(1u, (unsigned int *)v17);
          WTF::fastFree((WTF *)v17, v8);
        }
        *(_QWORD *)(v14 + 8 * v15) = -1;
        ++v16;
      }
      while (v15);
LABEL_18:
      v14 = *v12;
      if (v16)
      {
        *(_DWORD *)(v14 - 16) += v16;
        v20 = *v12;
        if (*v12)
          v21 = *(_DWORD *)(v20 - 12);
        else
          v21 = 0;
        *(_DWORD *)(v20 - 12) = v21 - v16;
        v14 = *v12;
      }
      if (v14)
      {
        v22 = *(_DWORD *)(v14 - 4);
        if (v22 >= 9 && 6 * *(_DWORD *)(v14 - 12) < v22)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 16));
          v14 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = 0;
          if (!v14)
          {
            v24 = 0;
            goto LABEL_33;
          }
          goto LABEL_32;
        }
LABEL_29:
        *(_DWORD *)(a1 + 24) = 0;
LABEL_32:
        v24 = *(_DWORD *)(v14 - 12);
        v25 = 0x7FFFFFFF;
        if (v24 >= 0x7FFFFFFF)
        {
LABEL_34:
          *(_DWORD *)(a1 + 28) = 2 * v25;
          goto LABEL_35;
        }
LABEL_33:
        v25 = v24;
        goto LABEL_34;
      }
    }
    v24 = 0;
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_33;
  }
LABEL_35:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v10, v9);
  v26 = *(unsigned int **)v10;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  do
    v28 = __ldaxr(v26);
  while (__stlxr(v28 + 1, v26));
  v37 = (WTF *)v26;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v12, &v37, (uint64_t)v35);
  result = (unsigned int *)v37;
  v37 = 0;
  if (result)
  {
    do
    {
      v33 = __ldaxr(result);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, result));
    if (!v34)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v29);
    }
  }
  if (v26)
  {
    do
    {
      v31 = __ldaxr(v26);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v26));
    if (!v32)
    {
      atomic_store(1u, v26);
      return (unsigned int *)WTF::fastFree((WTF *)v26, v29);
    }
  }
  return result;
}

void sub_196CD5E98(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18)
{
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  if (a18)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)a18);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)a18));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)a18);
      WTF::fastFree(a18, a2);
    }
  }
  if (v20)
  {
    do
    {
      v22 = __ldaxr(v20);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v20));
    if (!v23)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  *v18 = 0;
  WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v19, a2);
  _Unwind_Resume(a1);
}

WebKit::WebGeolocationManagerProxy *WebKit::WebGeolocationManagerProxy::WebGeolocationManagerProxy(WebKit::WebGeolocationManagerProxy *this, WebKit::WebProcessPool *a2)
{
  unsigned int *v5;
  char v6;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D3758;
  *((_QWORD *)this + 2) = &unk_1E34D37B8;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = &unk_1E34D37F0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &unk_1E34D3828;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v6 = -88;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)a2 + 7, &v6, (uint64_t)this + 32, &v5);
  return this;
}

uint64_t WebKit::WebProcessCache::platformInitialize(WebKit::WebProcessCache *this)
{
  double v1;
  uint64_t result;
  double v3;
  double v4;

  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "doubleForKey:", CFSTR("WebProcessCacheCachedProcessLifetimeInSeconds"));
  if (v1 > 0.0 && v1 <= 86400.0)
  {
    WebKit::WebProcessCache::cachedProcessLifetime = *(_QWORD *)&v1;
    v4 = v1;
    WTFLogAlways();
  }
  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults", *(_QWORD *)&v4), "doubleForKey:", CFSTR("WebProcessCacheClearingDelayAfterApplicationResignsActiveInSeconds"));
  if (v3 > 0.0 && v3 <= 3600.0)
  {
    WebKit::WebProcessCache::clearingDelayAfterApplicationResignsActive = *(_QWORD *)&v3;
    return WTFLogAlways();
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcessPool::platformResolvePathsForSandboxExtensions(WebKit::WebProcessPool *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  MEMORY[0x19AEABCC8](&v7, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "resourcePath"));
  WebKit::resolvePathForSandboxExtension(&v8);
  v3 = v8;
  v8 = 0;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v2);
      v5 = v8;
      v8 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v2);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v4 -= 2;
      v8 = 0;
    }
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196CD6124(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::resolvePathForSandboxExtension@<X0>(WTF::StringImpl **a1@<X8>)
{
  uint64_t result;
  NSObject *v3;
  char *v4;
  void *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  uint8_t buf[4];
  char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = WebKit::stringByResolvingSymlinksInPath();
  if (v7)
  {
    *a1 = v7;
  }
  else
  {
    v3 = qword_1ECE71780;
    result = os_log_type_enabled((os_log_t)qword_1ECE71780, OS_LOG_TYPE_ERROR);
    if ((result & 1) != 0)
    {
      WTF::String::utf8();
      if (v6)
        v4 = (char *)v6 + 16;
      else
        v4 = 0;
      *(_DWORD *)buf = 136315394;
      v9 = v4;
      v10 = 1024;
      v11 = 0;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Could not create a valid file system representation for the string '%s' of length %u", buf, 0x12u);
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, v5);
        else
          --*(_DWORD *)v6;
      }
      result = 0;
      *a1 = 0;
    }
    else
    {
      *a1 = 0;
    }
  }
  return result;
}

void sub_196CD6294(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessPool::updateBackForwardCacheCapacity(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;

  if (*(_BYTE *)(*(_QWORD *)(this + 48) + 92))
  {
    v1 = this;
    v6 = 0;
    v4 = 0;
    {
      v2 = WebKit::LegacyGlobalSettings::singleton(void)::properties;
    }
    else
    {
      v2 = 2;
      WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
      unk_1ECE73790 = 0u;
      unk_1ECE737A0 = 0u;
      qword_1ECE737B0 = 0;
    }
    WebKit::calculateMemoryCacheSizes((WTF *)v2, &v6, &v6, (unsigned int *)&v6, &v5, &v4);
    v3 = *(_DWORD **)(v1 + 760);
    ++*v3;
    this = WebKit::WebBackForwardCache::setCapacity((uint64_t)v3, v4);
    if (!*v3)
    {
      __break(0xC471u);
      JUMPOUT(0x196CD637CLL);
    }
    --*v3;
  }
  return this;
}

unint64_t WebKit::calculateMemoryCacheSizes(WTF *a1, int *a2, int *a3, unsigned int *a4, _QWORD *a5, _DWORD *a6)
{
  int v11;
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;

  v11 = (int)a1;
  result = WTF::ramSize(a1);
  switch(v11)
  {
    case 2:
      v13 = result >> 29;
      if (result >> 29)
      {
        *a6 = 2;
        v14 = result >> 31;
        if (result >> 30)
          v15 = 0x4000000;
        else
          v15 = 0x2000000;
        if (result >> 30)
          v16 = 0x1000000;
        else
          v16 = 0x800000;
        v17 = v13 > 2;
        if (v13 <= 2)
          v18 = v15;
        else
          v18 = 100663296;
        if (v17)
          v19 = 25165824;
        else
          v19 = v16;
        if (v14)
          v20 = 0x8000000;
        else
          v20 = v18;
        if (v14)
          v21 = 0x2000000;
        else
          v21 = v19;
      }
      else
      {
        *a6 = (result & 0xFFFFFFFFF0000000) != 0;
        v21 = 0x400000;
        v20 = 0x1000000;
      }
      *a2 = v20;
      *a3 = v21;
      v22 = *a2 >> 1;
      if (v22 <= 0x18)
        v22 = 24;
      *a4 = v22;
      *a5 = 0x404E000000000000;
      break;
    case 1:
      v27 = result >> 29;
      if (result >> 29)
      {
        *a6 = 2;
        v28 = result >> 31;
        if (result >> 30)
          v29 = 0x2000000;
        else
          v29 = 0x1000000;
        if (result >> 30)
          v30 = 0x400000;
        else
          v30 = 0x200000;
        v31 = v27 > 2;
        if (v27 <= 2)
          v32 = v29;
        else
          v32 = 0x4000000;
        if (v31)
          v33 = 0x800000;
        else
          v33 = v30;
        if (v28)
          v34 = 100663296;
        else
          v34 = v32;
        if (v28)
          v35 = 12582912;
        else
          v35 = v33;
      }
      else
      {
        *a6 = (result & 0xFFFFFFFFF0000000) != 0;
        v35 = 0x100000;
        v34 = 0x800000;
      }
      *a2 = v34;
      *a3 = v35;
      *a4 = *a2 >> 2;
      break;
    case 0:
      *a6 = 0;
      if (result >> 29)
        v23 = 0x1000000;
      else
        v23 = 0x800000;
      if (result >> 30)
        v24 = 0x2000000;
      else
        v24 = v23;
      if (result >> 29 <= 2)
        v25 = v24;
      else
        v25 = 0x4000000;
      if (result >> 31)
        v26 = 100663296;
      else
        v26 = v25;
      *a2 = v26;
      *a3 = 0;
      *a4 = 0;
      break;
  }
  return result;
}

uint64_t WebKit::WebBackForwardCache::setCapacity(uint64_t this, unsigned int a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v2 = (_DWORD *)(this + 16);
  if (*(_DWORD *)(this + 16) != a2)
  {
    v4 = this;
    *(_DWORD *)(this + 16) = a2;
    v5 = (uint64_t *)(this + 24);
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(this + 24);
    v6 = *(_QWORD *)(v4 + 24);
    if (v6)
    {
      do
      {
        if (*(_DWORD *)(v6 - 12) <= a2)
          break;
        v8 = WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::tryTakeFirst((uint64_t)v5);
        if (v8)
        {
          v9 = v8;
          CFRetain(*(CFTypeRef *)(v8 + 8));
          std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)(v9 + 416), 0);
          CFRelease(*(CFTypeRef *)(v9 + 8));
        }
        WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)v5);
        v6 = *v5;
      }
      while (*v5);
    }
    v7 = *(_QWORD *)(v4 + 8);
    v10 = v2;
    return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetBackForwardCacheCapacity>(v7, &v10, 0);
  }
  return this;
}

uint64_t WebKit::WebProcessPool::platformInitialize(uint64_t a1, int a2)
{
  WKProcessPoolWeakObserver *v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  const void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  unsigned int *v15;
  unsigned int v16;
  NSObject *global_queue;
  uint64_t i;
  const char **v19;
  const char *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  uint32_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  _DWORD *v32;
  int v33;
  int v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  unsigned int v38;
  unsigned int v39;
  WTF *v40;
  unsigned int *v41;
  unsigned int v42;
  WTF *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  void *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  WTF *v60;
  uint64_t v61;
  unsigned int *v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  const void *v67;
  const void *v68;
  uint64_t v69;
  const void **v70;
  uint64_t v71;
  const void *v72;
  WTF *v73;
  WTF *v74;
  void *v75;
  WTF *v76;
  unsigned int v77;
  unsigned int v78;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  const void *v84;
  const void *v85;
  const void *v86;
  void *v87;
  uint64_t v88;
  const void *v89;
  const void *v90;
  const void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  const void *v95;
  const void *v96;
  const void *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  __CFNotificationCenter *v101;
  const __CFString *v102;
  __CFNotificationCenter *v103;
  const __CFString *v104;
  __CFNotificationCenter *v105;
  const __CFString *v106;
  __CFNotificationCenter *v107;
  const __CFString *v108;
  __CFNotificationCenter *v109;
  const __CFString *v110;
  __CFNotificationCenter *v111;
  const __CFString *v112;
  __CFNotificationCenter *v113;
  const __CFString *v114;
  __CFNotificationCenter *v115;
  WebCore *v116;
  const __CFString *MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification;
  __CFNotificationCenter *v118;
  void *v119;
  void *v120;
  uint64_t result;
  void *v122;
  uint64_t v123;
  WebKit *v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int *v127;
  void *v128;
  const __CFString **v129;
  int v130;
  unsigned int *v131;
  WTF *v132;
  WTF *v133;
  uint64_t v134;
  PAL *(*v135)(PAL *);
  void *v136;
  uint64_t v137;
  WTF *v138[2];
  void (*v139)();
  void *v140;
  uint64_t v141;
  unsigned int *handler;
  uint64_t v143;
  void *v144;
  void *v145;
  WTF *v146;
  __int128 v147;
  int out_token[4];

  v4 = [WKProcessPoolWeakObserver alloc];
  v5 = (unsigned int **)(a1 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v6 = *(unsigned int **)(a1 + 24);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  handler = v6;
  v9 = -[WKProcessPoolWeakObserver initWithWeakPtr:](v4, "initWithWeakPtr:", &handler);
  v10 = *(const void **)(a1 + 496);
  *(_QWORD *)(a1 + 496) = v9;
  if (v10)
    CFRelease(v10);
  v11 = handler;
  handler = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v8);
    }
  }
  v14 = (char *)WTF::fastMalloc((WTF *)0x5F0);
  memcpy(v14, &off_1E34CA100, 0x5F0uLL);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v131 = (unsigned int *)(a1 + 24);
  v130 = a2;
  v15 = *v5;
  if (*v5)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v134 = 95;
  v133 = (WTF *)WTF::fastMalloc((WTF *)0x17C);
  global_queue = dispatch_get_global_queue(0, 0);
  for (i = 0; i != 95; ++i)
  {
    v19 = (const char **)&v14[16 * i];
    out_token[0] = 0;
    v20 = *v19;
    handler = (unsigned int *)MEMORY[0x1E0C809B0];
    v143 = 3321888768;
    v144 = ___ZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__1clERKN3WTF12ASCIILiteralE_block_invoke;
    v145 = &__block_descriptor_56_e8_32c102_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__1clERKN3WTF12ASCIILiteralEEUliE__e8_v12__0i8l;
    if (v15)
    {
      do
        v21 = __ldaxr(v15);
      while (__stlxr(v21 + 1, v15));
      *(_OWORD *)v138 = *(_OWORD *)v19;
      do
        v22 = __ldaxr(v15);
      while (__stlxr(v22 + 1, v15));
    }
    else
    {
      *(_OWORD *)v138 = *(_OWORD *)v19;
    }
    v146 = (WTF *)v15;
    v147 = *(_OWORD *)v138;
    v24 = notify_register_dispatch(v20, out_token, global_queue, &handler);
    if (v15)
    {
      do
      {
        v25 = __ldaxr(v15);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v15));
      if (!v26)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v23);
      }
    }
    v27 = out_token[0];
    v28 = (unsigned int *)v146;
    v146 = 0;
    if (!v28)
      goto LABEL_23;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v23);
      if (v24)
        continue;
    }
    else
    {
LABEL_23:
      if (v24)
        continue;
    }
    LODWORD(handler) = v27;
    v31 = HIDWORD(v134);
    if (HIDWORD(v134) == (_DWORD)v134)
    {
      v32 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v133, HIDWORD(v134) + 1, (unint64_t)&handler);
      v31 = HIDWORD(v134);
      *((_DWORD *)v133 + HIDWORD(v134)) = *v32;
    }
    else
    {
      *((_DWORD *)v133 + HIDWORD(v134)) = v27;
    }
    HIDWORD(v134) = v31 + 1;
  }
  v34 = v134;
  v33 = HIDWORD(v134);
  if (v134 > HIDWORD(v134))
  {
    v35 = v133;
    if (HIDWORD(v134))
    {
      LODWORD(v134) = HIDWORD(v134);
      v133 = (WTF *)WTF::fastRealloc(v133, (void *)(4 * HIDWORD(v134)));
      v34 = v33;
    }
    else if (v133)
    {
      v133 = 0;
      LODWORD(v134) = 0;
      WTF::fastFree(v35, v23);
      v34 = 0;
    }
  }
  v36 = *(WTF **)(a1 + 904);
  if (v36)
  {
    *(_QWORD *)(a1 + 904) = 0;
    *(_DWORD *)(a1 + 912) = 0;
    WTF::fastFree(v36, v23);
  }
  v37 = v133;
  v133 = 0;
  v134 = 0;
  *(_QWORD *)(a1 + 904) = v37;
  *(_DWORD *)(a1 + 912) = v34;
  *(_DWORD *)(a1 + 916) = v33;
  if (v15)
  {
    do
    {
      v38 = __ldaxr(v15);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v15));
    if (!v39)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v23);
    }
  }
  v40 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v40 = *MEMORY[0x1E0CB3048];
  v132 = v40;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v131, a1 + 16);
  v41 = *(unsigned int **)v131;
  if (*(_QWORD *)v131)
  {
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  v138[0] = 0;
  v138[1] = 0;
  v43 = (WTF *)WTF::fastMalloc((WTF *)8);
  LODWORD(v138[1]) = 1;
  v138[0] = v43;
  v44 = *(_QWORD *)v132;
  v45 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v46 = objc_msgSend(MEMORY[0x1E0CB3828], "currentQueue");
  handler = (unsigned int *)MEMORY[0x1E0C809B0];
  v143 = 3321888768;
  v144 = ___ZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__2clEP8NSString_block_invoke;
  v145 = &__block_descriptor_48_e8_32c106_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__2clEP8NSStringEUlP14NSNotificationE__e24_v16__0__NSNotification_8l;
  if (v41)
  {
    do
      v47 = __ldaxr(v41);
    while (__stlxr(v47 + 1, v41));
    do
      v48 = __ldaxr(v41);
    while (__stlxr(v48 + 1, v41));
  }
  v146 = (WTF *)v41;
  *(_QWORD *)&v147 = v44;
  v49 = (unsigned int *)objc_msgSend(v45, "addObserverForName:object:queue:usingBlock:", v44, 0, v46, &handler);
  v51 = v49;
  if (v49)
    CFRetain(v49);
  if (v41)
  {
    do
    {
      v52 = __ldaxr(v41);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v41));
    if (!v53)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v50);
    }
  }
  v54 = (unsigned int *)v146;
  v146 = 0;
  if (v54)
  {
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v54);
      WTF::fastFree((WTF *)v54, v50);
    }
  }
  v57 = v138[1];
  LODWORD(v58) = HIDWORD(v138[1]);
  if (v51)
  {
    handler = v51;
    if (HIDWORD(v138[1]) == LODWORD(v138[1]))
    {
      v59 = (uint64_t *)WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v138, HIDWORD(v138[1]) + 1, (unint64_t)&handler);
      v58 = HIDWORD(v138[1]);
      v60 = v138[0];
      v61 = *v59;
      *v59 = 0;
      *((_QWORD *)v60 + v58) = v61;
    }
    else
    {
      handler = 0;
      *((_QWORD *)v138[0] + HIDWORD(v138[1])) = v51;
    }
    LODWORD(v58) = v58 + 1;
    HIDWORD(v138[1]) = v58;
    v62 = handler;
    handler = 0;
    if (v62)
    {
      CFRelease(v62);
      LODWORD(v58) = HIDWORD(v138[1]);
    }
    v57 = v138[1];
  }
  if (v57 > v58)
  {
    v63 = v138[0];
    if ((_DWORD)v58)
    {
      if (v58 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x196CD71B4);
      }
      v64 = (WTF *)(8 * v58);
      v65 = (WTF *)WTF::fastMalloc(v64);
      LODWORD(v138[1]) = v58;
      v138[0] = v65;
      if (v65 != v63)
      {
        v66 = v63;
        do
        {
          v67 = *(const void **)v66;
          *(_QWORD *)v66 = 0;
          *(_QWORD *)v65 = v67;
          v68 = *(const void **)v66;
          *(_QWORD *)v66 = 0;
          if (v68)
            CFRelease(v68);
          v65 = (WTF *)((char *)v65 + 8);
          v66 = (WTF *)((char *)v66 + 8);
          v64 = (WTF *)((char *)v64 - 8);
        }
        while (v64);
      }
    }
    if (v63)
    {
      if (v138[0] == v63)
      {
        v138[0] = 0;
        LODWORD(v138[1]) = 0;
      }
      WTF::fastFree(v63, v50);
    }
  }
  v69 = *(unsigned int *)(a1 + 932);
  if ((_DWORD)v69)
  {
    v70 = *(const void ***)(a1 + 920);
    v71 = 8 * v69;
    do
    {
      v72 = *v70;
      *v70 = 0;
      if (v72)
        CFRelease(v72);
      ++v70;
      v71 -= 8;
    }
    while (v71);
  }
  v73 = *(WTF **)(a1 + 920);
  if (v73)
  {
    *(_QWORD *)(a1 + 920) = 0;
    *(_DWORD *)(a1 + 928) = 0;
    WTF::fastFree(v73, v50);
  }
  *(WTF **)(a1 + 920) = v138[0];
  v74 = v138[1];
  v138[0] = 0;
  v138[1] = 0;
  *(_QWORD *)(a1 + 928) = v74;
  WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v138, v50);
  v76 = v132;
  if (v41)
  {
    do
    {
      v77 = __ldaxr(v41);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v41));
    if (!v78)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v75);
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::backlightLevelDidChangeCallback, (CFStringRef)*MEMORY[0x1E0CEB398], 0, (CFNotificationSuspensionBehavior)1026);
  v80 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v80, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::remoteWebInspectorEnabledCallback, CFSTR("com.apple.webinspectord.enabled"), 0, (CFNotificationSuspensionBehavior)1026);
  v81 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v82 = *MEMORY[0x1E0DDDFE8];
  v83 = objc_msgSend(MEMORY[0x1E0CB3828], "currentQueue");
  handler = (unsigned int *)MEMORY[0x1E0C809B0];
  v143 = 3221225472;
  v144 = ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke;
  v145 = &__block_descriptor_40_e24_v16__0__NSNotification_8l;
  v146 = (WTF *)a1;
  v84 = (const void *)objc_msgSend(v81, "addObserverForName:object:queue:usingBlock:", v82, 0, v83, &handler);
  v85 = v84;
  if (v84)
    CFRetain(v84);
  v86 = *(const void **)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v85;
  if (v86)
    CFRelease(v86);
  v87 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v88 = objc_msgSend(MEMORY[0x1E0CB3828], "currentQueue");
  v138[0] = (WTF *)MEMORY[0x1E0C809B0];
  v138[1] = (WTF *)3221225472;
  v139 = ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke_2;
  v140 = &__block_descriptor_40_e24_v16__0__NSNotification_8l;
  v141 = a1;
  v89 = (const void *)objc_msgSend(v87, "addObserverForName:object:queue:usingBlock:", CFSTR("UIApplicationDidBecomeActiveNotification"), 0, v88, v138);
  v90 = v89;
  if (v89)
    CFRetain(v89);
  v91 = *(const void **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = v90;
  if (v91)
    CFRelease(v91);
  if (!objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"))
  {
    v92 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v93 = objc_msgSend(MEMORY[0x1E0CB3828], "currentQueue");
    v94 = *MEMORY[0x1E0CEB290];
    v133 = (WTF *)MEMORY[0x1E0C809B0];
    v134 = 3221225472;
    v135 = ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke_3;
    v136 = &__block_descriptor_40_e24_v16__0__NSNotification_8l;
    v137 = a1;
    v95 = (const void *)objc_msgSend(v92, "addObserverForName:object:queue:usingBlock:", v94, 0, v93, &v133);
    v96 = v95;
    if (v95)
      CFRetain(v95);
    v97 = *(const void **)(a1 + 488);
    *(_QWORD *)(a1 + 488) = v96;
    if (v97)
      CFRelease(v97);
  }
  v98 = WTF::fastMalloc((WTF *)0x18);
  v99 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v99 = off_1E34CA7D8;
  v99[1] = a1;
  *(_QWORD *)out_token = v99;
  MEMORY[0x19AEB03C0](v98, out_token);
  v100 = *(_QWORD *)out_token;
  *(_QWORD *)out_token = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  std::unique_ptr<WebCore::PowerSourceNotifier>::reset[abi:sn180100]((uint64_t *)(a1 + 464), v98);
  v101 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v101, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::lockdownModeConfigurationUpdateCallback, CFSTR("WKCaptivePortalModeContainerConfigurationChanged"), 0, (CFNotificationSuspensionBehavior)1026);
  v102 = (const __CFString *)*MEMORY[0x1E0DDE210];
  v103 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v103, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v102, 0, (CFNotificationSuspensionBehavior)1026);
  v104 = (const __CFString *)*MEMORY[0x1E0DDE148];
  v105 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v105, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v104, 0, (CFNotificationSuspensionBehavior)1026);
  v106 = (const __CFString *)*MEMORY[0x1E0DDE0A0];
  v107 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v107, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v106, 0, (CFNotificationSuspensionBehavior)1026);
  v108 = (const __CFString *)*MEMORY[0x1E0DDE078];
  v109 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v109, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v108, 0, (CFNotificationSuspensionBehavior)1026);
  v110 = (const __CFString *)*MEMORY[0x1E0DDE150];
  v111 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v111, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v110, 0, (CFNotificationSuspensionBehavior)1026);
  if (HIBYTE(word_1EE341858) == 1)
  {
    if (word_1EE341858 == 1)
    {
      v112 = (const __CFString *)qword_1EE3418C8;
      goto LABEL_107;
    }
  }
  else
  {
    if (byte_1EE341856 == 1)
    {
      v128 = (void *)qword_1EE3418B8;
    }
    else
    {
      v128 = dlopen("/usr/lib/libAccessibility.dylib", 2);
      qword_1EE3418B8 = (uint64_t)v128;
      byte_1EE341856 = 1;
    }
    v129 = (const __CFString **)dlsym(v128, "kAXSReduceMotionAutoplayAnimatedImagesChangedNotification");
    if (v129)
    {
      v112 = *v129;
      qword_1EE3418C8 = (uint64_t)*v129;
      word_1EE341858 = 257;
      v76 = v132;
LABEL_107:
      v113 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(v113, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v112, 0, (CFNotificationSuspensionBehavior)1026);
    }
    else
    {
      word_1EE341858 = 256;
      v76 = v132;
    }
  }
  v114 = (const __CFString *)*MEMORY[0x1E0DDE1D0];
  v115 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v115, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v114, 0, (CFNotificationSuspensionBehavior)1026);
  MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification = (const __CFString *)WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(v116);
  v118 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v118, *(const void **)(a1 + 496), (CFNotificationCallback)WebKit::WebProcessPool::mediaAccessibilityPreferencesChangedCallback, MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification, 0, (CFNotificationSuspensionBehavior)1026);
  WTF::fastFree(v76, v119);
  result = WTF::fastFree((WTF *)v14, v120);
  if (v130)
  {
    v122 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v123 = MEMORY[0x1E0C9AAB0];
    objc_msgSend(v122, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("WebKitJSCJITEnabledDefaultsKey"));
    objc_msgSend(v122, "setObject:forKey:", v123, CFSTR("WebKitJSCFTLJITEnabledDefaultsKey"));
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "registerDefaults:", v122);
    v124 = (WebKit *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("WebKitSuppressMemoryPressureHandler"));
    if ((v124 & 1) == 0)
      WebKit::installMemoryPressureHandler(v124);
    if ((_MGCacheValid() & 1) == 0)
      dispatch_async(global_queue, &__block_literal_global_101);
    v125 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v125 = off_1E34BDB18;
    *((_QWORD *)v125 + 1) = &__block_literal_global_104_0;
    handler = v125;
    PAL::registerNotifyCallback();
    v126 = handler;
    handler = 0;
    if (v126)
      (*(void (**)(unsigned int *))(*(_QWORD *)v126 + 8))(v126);
    v127 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v127 = off_1E34BDB18;
    *((_QWORD *)v127 + 1) = &__block_literal_global_106;
    handler = v127;
    PAL::registerNotifyCallback();
    result = (uint64_t)handler;
    handler = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_196CD71E0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF *a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef cf,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26)
{
  WTF *v26;
  unsigned int *v27;
  CFTypeRef v29;
  void *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;

  v29 = cf;
  cf = 0;
  if (v29)
    CFRelease(v29);
  WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  if (v27)
  {
    do
    {
      v31 = __ldaxr(v27);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v27));
    if (!v32)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v30);
    }
  }
  WTF::fastFree(a11, v30);
  WTF::fastFree(v26, v33);
  _Unwind_Resume(a1);
}

WebKit::WebPageGroup *WebKit::WebPageGroup::WebPageGroup(WebKit::WebPageGroup *this, WTF::StringImpl **a2)
{
  const WTF::StringImpl *v4;
  WTF::StringImpl *IdentifierInternal;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  int i;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF *v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  WebKit::WebPageGroup *result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WebKit::WebPreferences *v53[2];

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E34D3BB0;
  *((_QWORD *)this + 4) = 0;
  if ((byte_1ECE72D45 & 1) == 0)
  {
    qword_1ECE72D50 = 0;
    byte_1ECE72D45 = 1;
  }
  if ((unint64_t)*a2 + 1 < 2)
  {
    IdentifierInternal = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    goto LABEL_30;
  }
  v6 = qword_1ECE72D50;
  if (qword_1ECE72D50
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(0),
        (v6 = qword_1ECE72D50) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a2 + 4);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*a2);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = (WTF::StringImpl **)(v6 + 16 * (v9 & v7));
    v14 = *v13;
    if (*v13 == (WTF::StringImpl *)-1)
    {
      v10 = (WTF::StringImpl **)(v6 + 16 * v12);
      goto LABEL_17;
    }
    if (!v14)
      break;
    if ((WTF::equal(v14, *a2, v4) & 1) != 0)
      goto LABEL_29;
LABEL_17:
    v9 = i + v12;
  }
  if (v10)
  {
    *v10 = 0;
    v10[1] = 0;
    --*(_DWORD *)(qword_1ECE72D50 - 16);
    v13 = v10;
  }
  WTF::String::operator=(v13, (WTF::StringImpl *)a2);
  v13[1] = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  if (qword_1ECE72D50)
    v15 = *(_DWORD *)(qword_1ECE72D50 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(qword_1ECE72D50 - 12) = v15;
  if (qword_1ECE72D50)
    v16 = *(_DWORD *)(qword_1ECE72D50 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(qword_1ECE72D50 - 16) + v16);
  v18 = *(unsigned int *)(qword_1ECE72D50 - 4);
  if (v18 > 0x400)
  {
    if (v18 <= 2 * v17)
LABEL_28:
      v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v13);
  }
  else if (3 * v18 <= 4 * v17)
  {
    goto LABEL_28;
  }
LABEL_29:
  IdentifierInternal = v13[1];
LABEL_30:
  *((_QWORD *)this + 4) = IdentifierInternal;
  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    WTF::String::operator=((WTF::StringImpl **)this + 3, (WTF::StringImpl *)a2);
    goto LABEL_35;
  }
  v53[0] = (WebKit::WebPreferences *)"__uniquePageGroupID-";
  v53[1] = (WebKit::WebPreferences *)21;
  v52 = IdentifierInternal;
  result = (WebKit::WebPageGroup *)WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>((uint64_t *)v53, (unint64_t *)&v52, &v51);
  if (v51)
  {
    *((_QWORD *)this + 3) = v51;
LABEL_35:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::WebPreferences::createWithLegacyDefaults((WebKit::WebPageGroup *)((char *)this + 24), (const WTF::String *)&v52, (const WTF::String *)&v51, v53);
    *((WebKit::WebPreferences **)this + 5) = v53[0];
    v21 = v51;
    v51 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v52;
    v52 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v20);
      else
        *(_DWORD *)v22 -= 2;
    }
    if ((byte_1ECE72D46 & 1) != 0)
    {
      v23 = qword_1ECE72D58;
      v24 = (uint64_t *)((char *)this + 32);
      if (!qword_1ECE72D58)
        goto LABEL_45;
      goto LABEL_46;
    }
    qword_1ECE72D58 = 0;
    byte_1ECE72D46 = 1;
    v24 = (uint64_t *)((char *)this + 32);
LABEL_45:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand();
    v23 = qword_1ECE72D58;
    if (qword_1ECE72D58)
LABEL_46:
      v25 = *(_DWORD *)(v23 - 8);
    else
      v25 = 0;
    v26 = *v24;
    v27 = *v24 + ~(*v24 << 32);
    v28 = 9
        * (((v27 ^ (v27 >> 22)) + ~((v27 ^ (v27 >> 22)) << 13)) ^ (((v27 ^ (v27 >> 22)) + ~((v27 ^ (v27 >> 22)) << 13)) >> 8));
    v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
    v30 = v25 & ((v29 >> 31) ^ v29);
    v31 = (_QWORD *)(v23 + 16 * v30);
    v32 = *v31;
    if (!*v31)
    {
LABEL_55:
      *v31 = v26;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 4, (uint64_t)this);
      v36 = (unsigned int *)*((_QWORD *)this + 2);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v38 = (unsigned int *)v31[1];
      v31[1] = v36;
      if (v38)
      {
        do
        {
          v40 = __ldaxr(v38);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v38));
        if (!v41)
        {
          atomic_store(1u, v38);
          WTF::fastFree((WTF *)v38, v35);
        }
      }
      if (qword_1ECE72D58)
        v39 = *(_DWORD *)(qword_1ECE72D58 - 12) + 1;
      else
        v39 = 1;
      *(_DWORD *)(qword_1ECE72D58 - 12) = v39;
      if (qword_1ECE72D58)
        v48 = *(_DWORD *)(qword_1ECE72D58 - 12);
      else
        v48 = 0;
      v49 = (*(_DWORD *)(qword_1ECE72D58 - 16) + v48);
      v50 = *(unsigned int *)(qword_1ECE72D58 - 4);
      if (v50 > 0x400)
      {
        if (v50 > 2 * v49)
          return this;
      }
      else if (3 * v50 > 4 * v49)
      {
        return this;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand();
      return this;
    }
    v33 = 0;
    v34 = 1;
    while (v32 != v26)
    {
      if (v32 == -1)
        v33 = v31;
      v30 = (v30 + v34) & v25;
      v31 = (_QWORD *)(v23 + 16 * v30);
      v32 = *v31;
      ++v34;
      if (!*v31)
      {
        if (v33)
        {
          *v33 = 0;
          v33[1] = 0;
          --*(_DWORD *)(v23 - 16);
          v26 = *v24;
          v31 = v33;
        }
        goto LABEL_55;
      }
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 4, (uint64_t)this);
    v43 = (unsigned int *)*((_QWORD *)this + 2);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    v45 = (unsigned int *)v31[1];
    v31[1] = v43;
    if (v45)
    {
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WTF::fastFree((WTF *)v45, v42);
      }
    }
    return this;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WebKit::WebUserContentControllerProxy *WebKit::WebUserContentControllerProxy::WebUserContentControllerProxy(WebKit::WebUserContentControllerProxy *this)
{
  uint64_t IdentifierInternal;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34DED98;
  *((_QWORD *)this + 2) = &off_1E34B0558;
  *((_QWORD *)this + 3) = 0;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)this = &off_1E34DED30;
  *((_QWORD *)this + 2) = &unk_1E34DED60;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = IdentifierInternal;
  API::Array::create((WebKit **)this + 7);
  API::Array::create((WebKit **)this + 8);
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  {
    WebKit::webUserContentControllerProxies(void)::proxies = 0;
  }
  v5 = *((_QWORD *)this + 4);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebUserContentControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebUserContentControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebUserContentControllerProxy&>(&WebKit::webUserContentControllerProxies(void)::proxies, &v5, (uint64_t)this, (uint64_t)&v4);
  return this;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        CFRelease(*(CFTypeRef *)(v6 + 8));
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void API::Array::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(_QWORD *)v4 = &off_1E34CC2F8;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = 0;
  *(_DWORD *)(v4 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = 0;
  *(_DWORD *)(v4 + 28) = v5;
  *a2 = v4;
}

uint64_t WebKit::WebPreferences::registerDefaultUInt32ValueForKey(WebKit::WebPreferences *this, WTF::StringImpl **a2, int a3)
{
  WebKit::WebPreferencesStore *v5;
  uint64_t result;
  unsigned int v7;

  v5 = (WebKit::WebPreferences *)((char *)this + 40);
  WebKit::WebPreferencesStore::setOverrideDefaultsUInt32ValueForKey((WebKit::WebPreferences *)((char *)this + 40), a2, a3);
  v7 = 0;
  result = WebKit::WebPreferences::platformGetUInt32UserValueForKey(this, a2, &v7);
  if ((_DWORD)result)
    return WebKit::WebPreferencesStore::setUInt32ValueForKey(v5, a2, v7);
  return result;
}

WTF::StringImpl *WebKit::WebPreferencesStore::setOverrideDefaultsUInt32ValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, int a3)
{
  WTF::StringImpl *result;
  _BYTE v4[24];
  int v5;
  int v6;

  v5 = a3;
  v6 = 2;
  result = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)this + 24, a2, (const WTF::StringImpl *)&v5, (uint64_t)v4);
  if (v6 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v6])(v4, &v5);
  return result;
}

uint64_t WebKit::WebPreferences::createWithLegacyDefaults@<X0>(WebKit::WebPreferences *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, WebKit::WebPreferences **a4@<X8>)
{
  WebKit::WebPreferences *v9;
  WebKit::WebPreferences *v10;

  v9 = (WebKit::WebPreferences *)API::Object::newObject(0x70uLL, 92);
  v10 = WebKit::WebPreferences::WebPreferences(v9, this, a2, a3);
  *a4 = v10;
  {
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferences::registerDefaultUInt32ValueForKey(v10, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key, 0);
}

void sub_196CD7D24(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebPreferences *WebKit::WebPreferences::WebPreferences(WebKit::WebPreferences *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D6F28;
  v8 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v8 += 2;
  *((_QWORD *)this + 2) = v8;
  v9 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v9 += 2;
  *((_QWORD *)this + 3) = v9;
  v10 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v10 += 2;
  *((_QWORD *)this + 4) = v10;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_QWORD *)((char *)this + 101) = 0;
  WebKit::WebPreferences::platformInitializeStore((WebKit **)this);
  return this;
}

unsigned int *API::ProcessPoolConfiguration::copy@<X0>(API::ProcessPoolConfiguration *this@<X0>, API::ProcessPoolConfiguration **a2@<X8>)
{
  uint64_t v4;
  API::ProcessPoolConfiguration *v5;
  __int128 v6;
  __int128 v7;

  v4 = API::Object::newObject(0xA8uLL, 90);
  v5 = API::ProcessPoolConfiguration::ProcessPoolConfiguration((API::ProcessPoolConfiguration *)v4);
  *a2 = v5;
  WTF::String::operator=((WTF::StringImpl **)v5 + 2, (API::ProcessPoolConfiguration *)((char *)this + 16));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v4 + 24), (uint64_t)this + 24);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v4 + 40), (uint64_t)this + 40);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v4 + 56), (uint64_t)this + 56);
  *(_DWORD *)(v4 + 72) = *((_DWORD *)this + 18);
  *(_WORD *)(v4 + 76) = *((_WORD *)this + 38);
  *(_BYTE *)(v4 + 78) = *((_BYTE *)this + 78);
  *(_WORD *)(v4 + 94) = *((_WORD *)this + 47);
  *(_DWORD *)(v4 + 80) = *((_DWORD *)this + 20);
  *(_WORD *)(v4 + 84) = *((_WORD *)this + 42);
  *(_WORD *)(v4 + 86) = *((_WORD *)this + 43);
  *(_BYTE *)(v4 + 88) = *((_BYTE *)this + 88);
  *(_WORD *)(v4 + 89) = *(_WORD *)((char *)this + 89);
  *(_WORD *)(v4 + 91) = *(_WORD *)((char *)this + 91);
  *(_BYTE *)(v4 + 96) = *((_BYTE *)this + 96);
  v6 = *(_OWORD *)((char *)this + 116);
  v7 = *(_OWORD *)((char *)this + 100);
  *(_BYTE *)(v4 + 132) = *((_BYTE *)this + 132);
  *(_OWORD *)(v4 + 100) = v7;
  *(_OWORD *)(v4 + 116) = v6;
  WTF::String::operator=((WTF::StringImpl **)(v4 + 136), (API::ProcessPoolConfiguration *)((char *)this + 136));
  *(_QWORD *)(v4 + 144) = *((_QWORD *)this + 18);
  return WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v4 + 152), (uint64_t)this + 152);
}

API::ProcessPoolConfiguration *API::ProcessPoolConfiguration::ProcessPoolConfiguration(API::ProcessPoolConfiguration *this)
{
  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34DA028;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 59) = 0u;
  *(_DWORD *)((char *)this + 75) = 16842753;
  *((_DWORD *)this + 20) = getpid();
  *(_QWORD *)((char *)this + 84) = 0;
  *((_DWORD *)this + 23) = 16777217;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 100) = 0;
  *((_BYTE *)this + 132) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void WebKit::determineTrackingPreventionState(WebKit *this)
{
  char v2;
  WebCore *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;

  if (!atomic_load(WebKit::currentTrackingPreventionState))
  {
    v2 = WTF::linkedOnOrAfterSDKWithBehavior();
    v3 = (WebCore *)WTF::WorkQueue::create();
    {
      v3 = (WebCore *)WebKit::itpQueue(void)::itpQueue;
      WebKit::itpQueue(void)::itpQueue = v9;
      if (v3)
      {
        (*(void (**)(WebCore *))(*(_QWORD *)v3 + 56))(v3);
        v3 = 0;
      }
      {
        v4 = WebKit::itpQueue(void)::itpQueue;
      }
      else
      {
        v4 = 0;
        WebKit::itpQueue(void)::itpQueue = 0;
      }
    }
    else
    {
      v4 = v9;
      WebKit::itpQueue(void)::itpQueue = v9;
    }
    WebCore::applicationBundleIdentifier(v3);
    WTF::String::isolatedCopy();
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = &off_1E34B7A58;
    *(_BYTE *)(v5 + 8) = v2;
    v11 = v5;
    *(_QWORD *)(v5 + 16) = v10;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 32))(v4, &v11);
    v7 = v11;
    v11 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
}

void sub_196CD81BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::installMemoryPressureHandler(WebKit *this)
{
  WTF::MemoryPressureHandler *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (WTF::MemoryPressureHandler *)WTF::MemoryPressureHandler::singleton(this);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34D9050;
  v3 = *((_QWORD *)v1 + 6);
  *((_QWORD *)v1 + 6) = v2;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::MemoryPressureHandler::install(v1);
}

void sub_196CD82C4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_196CD8310(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::ProcessAssertion::acquireSync(WebKit::ProcessAssertion *this)
{
  NSObject *v2;
  char *v3;
  int v4;
  void *v5;
  WTF *v6;
  int v8;
  char v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  const char *v14;
  uint64_t v15;
  CFTypeRef v16;
  int v17;
  char v18;
  NSObject *v19;
  char *v20;
  int v21;
  void *v22;
  uint64_t v23;
  WTF::ThreadSafeWeakPtrControlBlock *v24;
  WTF::ThreadSafeWeakPtrControlBlock *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  WTF *v31;
  CFTypeRef cf;
  _BYTE buf[12];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  CFTypeRef v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    v3 = cf ? (char *)cf + 16 : 0;
    v4 = *((_DWORD *)this + 5);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = this;
    v34 = 2082;
    v35 = (uint64_t)v3;
    v36 = 1024;
    v37 = v4;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion::acquireSync Trying to take RBS assertion '%{public}s' for process with PID=%d", buf, 0x1Cu);
    v6 = (WTF *)cf;
    cf = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
        WTF::fastFree(v6, v5);
      else
        --*(_DWORD *)v6;
    }
  }
  if (!*((_BYTE *)this + 168) || !*((_BYTE *)this + 128) || !*((_QWORD *)this + 10))
    goto LABEL_41;
  if (__ldaxr(WebKit::ProcessAssertion::s_capabilityLock))
  {
    __clrex();
LABEL_15:
    MEMORY[0x19AEABB3C](WebKit::ProcessAssertion::s_capabilityLock);
    goto LABEL_16;
  }
  if (__stxr(1u, WebKit::ProcessAssertion::s_capabilityLock))
    goto LABEL_15;
LABEL_16:
  if (!*((_BYTE *)this + 168) || !*((_BYTE *)this + 128))
  {
    __break(1u);
    goto LABEL_64;
  }
  *(_QWORD *)buf = _Block_copy(*((const void **)this + 15));
  WebKit::ExtensionProcess::grantCapability((uint64_t)this + 152, (uint64_t)this + 80, (uint64_t)buf, &cf);
  _Block_release(*(const void **)buf);
  WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)this + 136, (uint64_t *)&cf);
  v8 = objc_msgSend(*((id *)this + 18), "isValid");
  v9 = v8;
  if (v8)
  {
    v10 = qword_1ECE71640;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    v11 = "%p - ProcessAssertion() Successfully granted capability";
    v12 = v10;
    v13 = 12;
    goto LABEL_32;
  }
  switch(*((_BYTE *)this + 16))
  {
    case 1:
      v14 = "Background";
      break;
    case 2:
      v14 = "UnboundedNetworking";
      break;
    case 3:
      v14 = "Foreground";
      break;
    case 4:
      v14 = "MediaPlayback";
      break;
    case 5:
      v14 = "FinishTaskCanSleep";
      break;
    case 6:
      v14 = "FinishTaskInterruptable";
      break;
    case 7:
      v14 = "BoostedJetsam";
      break;
    default:
      v14 = "Suspended";
      break;
  }
  v15 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = this;
    v34 = 2080;
    v35 = (uint64_t)v14;
    v11 = "%p - ProcessAssertion() Failed to grant capability %s";
    v12 = v15;
    v13 = 22;
LABEL_32:
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
  }
LABEL_33:
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  v17 = __ldxr(WebKit::ProcessAssertion::s_capabilityLock);
  if (v17 == 1)
  {
    if (!__stlxr(0, WebKit::ProcessAssertion::s_capabilityLock))
    {
      if ((v9 & 1) != 0)
        return;
      goto LABEL_41;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebKit::ProcessAssertion::s_capabilityLock);
  if ((v9 & 1) != 0)
    return;
LABEL_41:
  cf = 0;
  v18 = objc_msgSend(*((id *)this + 4), "acquireWithError:", &cf);
  v19 = qword_1ECE71640;
  if ((v18 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      if (v31)
        v20 = (char *)v31 + 16;
      else
        v20 = 0;
      v21 = *((_DWORD *)this + 5);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = this;
      v34 = 2082;
      v35 = (uint64_t)v20;
      v36 = 1024;
      v37 = v21;
      _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion::acquireSync Successfully took RBS assertion '%{public}s' for process with PID=%d", buf, 0x1Cu);
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          WTF::fastFree(v31, v22);
        else
          --*(_DWORD *)v31;
      }
    }
    return;
  }
  v23 = os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v28 = v31 ? (uint64_t)v31 + 16 : 0;
    v29 = *((_DWORD *)this + 5);
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = this;
    v34 = 2082;
    v35 = v28;
    v36 = 1024;
    v37 = v29;
    v38 = 2114;
    v39 = cf;
    _os_log_error_impl(&dword_196BCC000, v19, OS_LOG_TYPE_ERROR, "%p - ProcessAssertion::acquireSync Failed to acquire RBS assertion '%{public}s' for process with PID=%d, error: %{public}@", buf, 0x26u);
    v23 = (uint64_t)v31;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        v23 = WTF::fastFree(v31, v30);
      else
        --*(_DWORD *)v31;
    }
  }
  WTF::RunLoop::main((WTF::RunLoop *)v23);
  v24 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 1);
  if (v24)
  {
    v25 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v24);
    goto LABEL_52;
  }
LABEL_64:
  v25 = 0;
LABEL_52:
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v26 = &off_1E34C9B30;
  v26[1] = v25;
  v26[2] = this;
  *(_QWORD *)buf = v26;
  WTF::RunLoop::dispatch();
  v27 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
}

void sub_196CD880C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *aBlock)
{
  unsigned __int8 *v11;
  int v13;

  _Block_release(aBlock);
  v13 = __ldxr(v11);
  if (v13 == 1)
  {
    if (!__stlxr(0, v11))
LABEL_6:
      _Unwind_Resume(a1);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebKit::ProcessAssertion::s_capabilityLock);
  goto LABEL_6;
}

uint64_t WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    v2 = *(WTF **)result;
    if (*(_QWORD *)result)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

CGAffineTransform *WebKit::RemoteLayerBackingStore::enumerateRectsBeingDrawn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CGAffineTransform *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9[4];
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGAffineTransform v12;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGRect v16;
  CGRect v17;

  memset(&v15, 0, sizeof(v15));
  (*(void (**)(CGAffineTransform *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 672))(&v13, a2, 1);
  WebCore::AffineTransform::operator CGAffineTransform();
  CGAffineTransformInvert(&v15, &v14);
  v12 = v15;
  CGAffineTransformScale(&v13, &v12, *(float *)(a1 + 48), (float)-*(float *)(a1 + 48));
  v15 = v13;
  v11 = v13;
  result = CGAffineTransformTranslate(&v13, &v11, 0.0, (float)-*(float *)(a1 + 32));
  v15 = v13;
  v6 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 216);
    v8 = 16 * v6;
    do
    {
      memset(&v13, 0, 32);
      WebCore::FloatRect::operator CGRect();
      v10 = v15;
      v17 = CGRectApplyAffineTransform(v16, &v10);
      v13.a = v17.origin.x;
      v13.b = v17.origin.y;
      v13.c = v17.size.width;
      v13.d = v17.size.height;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v9, (const CGRect *)&v13);
      result = (CGAffineTransform *)(*(uint64_t (**)(uint64_t, float, float, float, float))(a3 + 16))(a3, v9[0], v9[1], v9[2], v9[3]);
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::NetworkLoadScheduler::HostContext **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::NetworkLoadScheduler::HostContext **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::NetworkLoadScheduler::HostContext *)-1)
      {
        std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>::reset[abi:sn180100](v4, 0);
        v5 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebKit::GraphicsLayerCARemote::~GraphicsLayerCARemote(WebKit::GraphicsLayerCARemote *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::GraphicsLayerCARemote::~GraphicsLayerCARemote(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  WebKit::RemoteLayerTreeContext *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *((_QWORD *)this + 113);
  if (v3)
  {
    v4 = *(WebKit::RemoteLayerTreeContext **)(v3 + 8);
    if (v4)
    {
      ++*((_DWORD *)v4 + 2);
      WebKit::RemoteLayerTreeContext::graphicsLayerWillLeaveContext(v4, this);
      if (*((_DWORD *)v4 + 2) == 1)
        (*(void (**)(WebKit::RemoteLayerTreeContext *))(*(_QWORD *)v4 + 8))(v4);
      else
        --*((_DWORD *)v4 + 2);
    }
    v5 = (unsigned int *)*((_QWORD *)this + 113);
    *((_QWORD *)this + 113) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 113) = 0;
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 112, a2);
  WebCore::GraphicsLayerCA::~GraphicsLayerCA(this);
}

void sub_196CD8B5C(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = v3;
  v6 = v4;
  v7 = v4[2] - 1;
  if (v7)
    v6[2] = v7;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  v8 = v2[113];
  v2[113] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2 + 112, a2);
  WebCore::GraphicsLayerCA::~GraphicsLayerCA((WebCore::GraphicsLayerCA *)v2);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::RemoteLayerTreeContext::graphicsLayerWillLeaveContext(WebKit::RemoteLayerTreeContext *this, WebKit::GraphicsLayerCARemote *a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  WebKit::GraphicsLayerCARemote *v7;

  v3 = (uint64_t *)((char *)this + 80);
  v7 = a2;
  result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>,WebKit::GraphicsLayerCARemote const*>((uint64_t *)this + 10, &v7);
  v5 = *((_QWORD *)this + 10);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::remove(v3, (unsigned int **)result);
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>,WebKit::GraphicsLayerCARemote const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 8 * v7);
    if (v10 == -1)
      goto LABEL_6;
    if (!v10)
      break;
    if (*(_QWORD *)(v10 + 8) == *a2)
      return v2 + 8 * v9;
LABEL_6:
    v7 = (v9 + i) & v3;
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::remove(uint64_t *result, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int **v11;
  uint64_t *v12;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v9 = __ldaxr(v2);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v2));
    if (!v10)
    {
      atomic_store(1u, v2);
      v11 = a2;
      v12 = result;
      WTF::fastFree((WTF *)v2, a2);
      a2 = v11;
      result = v12;
    }
  }
  *a2 = (unsigned int *)-1;
  ++*(_DWORD *)(*result - 16);
  v3 = *result;
  if (*result)
    v4 = *(_DWORD *)(v3 - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(v3 - 12) = v4;
  v5 = *result;
  if (*result)
  {
    v6 = 6 * *(_DWORD *)(v5 - 12);
    v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::rehash(result, v7 >> 1, 0);
  }
  return result;
}

void WebKit::WebsiteDataStoreConfiguration::copy(WebKit::WebsiteDataStoreConfiguration *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  const __CFDictionary *v12;
  CFDictionaryRef Copy;
  const void *v14;

  v4 = *((unsigned __int8 *)this + 16);
  v5 = API::Object::newObject(0x220uLL, 122);
  v6 = WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(v5, v4, 0);
  *(_QWORD *)a2 = v6;
  WTF::String::operator=((WTF::StringImpl **)(v6 + 48), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 48));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 56), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 64), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 64));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 72), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 72));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 80), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 80));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 88), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 88));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 96), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 96));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 104), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 104));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 112), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 112));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 120), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 120));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 128), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 128));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 136), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 136));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 144), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 144));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 152), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 152));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 160), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 160));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 168), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 168));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 176), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 176));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 184), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 184));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 192), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 192));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 200), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 200));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 208), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 208));
  *(_WORD *)(v5 + 413) = *(_WORD *)((char *)this + 413);
  *(_WORD *)(v5 + 288) = *((_WORD *)this + 144);
  *(_BYTE *)(v5 + 17) = *((_BYTE *)this + 17);
  *(_QWORD *)(v5 + 216) = *((_QWORD *)this + 27);
  v7 = *((_QWORD *)this + 28);
  *(_BYTE *)(v5 + 232) = *((_BYTE *)this + 232);
  *(_QWORD *)(v5 + 224) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 248);
  *(_QWORD *)(v5 + 240) = *((_QWORD *)this + 30);
  *(_BYTE *)(v5 + 248) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 264);
  *(_QWORD *)(v5 + 256) = *((_QWORD *)this + 32);
  *(_BYTE *)(v5 + 264) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 280);
  *(_QWORD *)(v5 + 272) = *((_QWORD *)this + 34);
  *(_BYTE *)(v5 + 280) = v7;
  WTF::String::operator=((WTF::StringImpl **)(v5 + 296), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 296));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 304), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 304));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 328), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 328));
  v8 = *((_OWORD *)this + 22);
  *(_OWORD *)(v5 + 336) = *((_OWORD *)this + 21);
  *(_OWORD *)(v5 + 352) = v8;
  WTF::String::operator=((WTF::StringImpl **)(v5 + 368), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 368));
  v9 = *(_OWORD *)((char *)this + 376);
  *(_OWORD *)(v5 + 392) = *(_OWORD *)((char *)this + 392);
  *(_OWORD *)(v5 + 376) = v9;
  *(_BYTE *)(v5 + 408) = *((_BYTE *)this + 408);
  *(_BYTE *)(v5 + 409) = *((_BYTE *)this + 409);
  *(_BYTE *)(v5 + 410) = *((_BYTE *)this + 410);
  WTF::String::operator=((WTF::StringImpl **)(v5 + 312), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 312));
  *(_WORD *)(v5 + 411) = *(_WORD *)((char *)this + 411);
  WTF::String::operator=((WTF::StringImpl **)(v5 + 320), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 320));
  *(_BYTE *)(v5 + 415) = *((_BYTE *)this + 415);
  *(_DWORD *)(v5 + 432) = *((_DWORD *)this + 108);
  *(_WORD *)(v5 + 416) = *((_WORD *)this + 208);
  *(_WORD *)(v5 + 419) = *(_WORD *)((char *)this + 419);
  v10 = *((_BYTE *)this + 428);
  *(_DWORD *)(v5 + 424) = *((_DWORD *)this + 106);
  *(_BYTE *)(v5 + 428) = v10;
  *(_BYTE *)(v5 + 418) = *((_BYTE *)this + 418);
  WTF::String::operator=((WTF::StringImpl **)(v5 + 440), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 440));
  v11 = *((_OWORD *)this + 29);
  *(_OWORD *)(v5 + 448) = *((_OWORD *)this + 28);
  *(_OWORD *)(v5 + 464) = v11;
  *(_BYTE *)(v5 + 480) = *((_BYTE *)this + 480);
  *(_BYTE *)(v5 + 481) = *((_BYTE *)this + 481);
  WTF::String::operator=((WTF::StringImpl **)(v5 + 488), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 488));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 496), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 496));
  WTF::String::operator=((WTF::StringImpl **)(v5 + 504), (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 504));
  *(_BYTE *)(v5 + 482) = *((_BYTE *)this + 482);
  *(_OWORD *)(v5 + 32) = *((_OWORD *)this + 2);
  v12 = (const __CFDictionary *)*((_QWORD *)this + 64);
  if (v12)
  {
    Copy = CFDictionaryCreateCopy(0, v12);
    v14 = *(const void **)(v5 + 512);
    *(_QWORD *)(v5 + 512) = Copy;
    if (v14)
      CFRelease(v14);
  }
  *(_BYTE *)(*(_QWORD *)a2 + 483) = *((_BYTE *)this + 483);
}

WebKit::DeviceIdHashSaltStorage *WebKit::DeviceIdHashSaltStorage::DeviceIdHashSaltStorage(WebKit::DeviceIdHashSaltStorage *this, const WTF::String *a2)
{
  char *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;

  *(_DWORD *)this = 1;
  WTF::WorkQueue::create();
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v4 = (char *)this + 48;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    *(_QWORD *)v4 = 0;
LABEL_15:
    *((_BYTE *)this + 24) = 1;
    return this;
  }
  WTF::String::number((WTF::String *)1);
  WTF::FileSystemImpl::pathByAppendingComponent();
  v6 = v14;
  v14 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (!*(_QWORD *)v4 || !*(_DWORD *)(*(_QWORD *)v4 + 4))
    goto LABEL_15;
  do
    v7 = __ldaxr((unsigned int *)this);
  while (__stlxr(v7 + 1, (unsigned int *)this));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E34CFAF8;
  v8[1] = this;
  v8[2] = this;
  v9 = *((_QWORD *)this + 1);
  do
    v10 = __ldaxr((unsigned int *)this);
  while (__stlxr(v10 + 1, (unsigned int *)this));
  v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v11 = &off_1E34CFB20;
  *((_QWORD *)v11 + 1) = this;
  *((_QWORD *)v11 + 2) = this;
  *((_QWORD *)v11 + 3) = v8;
  v14 = v11;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 32))(v9, &v14);
  v12 = v14;
  v14 = 0;
  if (v12)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
  return this;
}

WebKit::AuthenticatorManager *WebKit::AuthenticatorManager::AuthenticatorManager(WebKit::AuthenticatorManager *this)
{
  WebKit::AuthenticatorManager::AuthenticatorManager(this);
  return this;
}

{
  WTF::RunLoop *v2;
  WTF::RunLoop *v3;

  WebKit::AuthenticatorTransportServiceObserver::AuthenticatorTransportServiceObserver(this);
  WebKit::AuthenticatorObserver::AuthenticatorObserver((WebKit::AuthenticatorManager *)((char *)this + 16));
  *(_QWORD *)this = off_1E34ABCF8;
  *((_QWORD *)this + 2) = off_1E34ABDA0;
  WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData((WebKit::AuthenticatorManager *)((char *)this + 32));
  v2 = (WTF::RunLoop *)WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::CompletionHandler((_QWORD *)this + 97);
  v3 = (WTF::RunLoop *)WTF::RunLoop::main(v2);
  WTF::RunLoop::Timer::Timer<WebKit::AuthenticatorManager>((WebKit::AuthenticatorManager *)((char *)this + 784), v3, (uint64_t)this, (uint64_t)WebKit::AuthenticatorManager::timeOutTimerFired, 0);
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>((_QWORD *)this + 102);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 824);
  WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::HashSet((_QWORD *)this + 105);
  *((_DWORD *)this + 212) = 0;
  return this;
}

WebKit::WebAuthenticationRequestData *WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData(WebKit::WebAuthenticationRequestData *this)
{
  WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData(this);
  return this;
}

{
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this);
  std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)this + 16);
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((_QWORD *)this + 41);
  *((_BYTE *)this + 336) = 0;
  *((_QWORD *)this + 43) = 0;
  std::optional<WebCore::GlobalFrameIdentifier>::optional[abi:sn180100]((_BYTE *)this + 352);
  WebKit::FrameInfoData::FrameInfoData((WebKit::WebAuthenticationRequestData *)((char *)this + 384));
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((_QWORD *)this + 85);
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((_QWORD *)this + 86);
  std::optional<WebCore::MediationRequirement>::optional[abi:sn180100]((_BYTE *)this + 696);
  std::optional<WebCore::SecurityOriginData>::optional[abi:sn180100]((_BYTE *)this + 704);
  return this;
}

_BYTE *std::__optional_move_assign_base<WebCore::GlobalFrameIdentifier,true>::__optional_move_assign_base(_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::GlobalFrameIdentifier,true>::__optional_copy_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::MediationRequirement,true>::__optional_move_assign_base(_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::MediationRequirement,true>::__optional_copy_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::GlobalFrameIdentifier,true>::__optional_copy_assign_base(_BYTE *a1)
{
  std::__optional_move_base<WebCore::GlobalFrameIdentifier,true>::__optional_move_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::MediationRequirement,true>::__optional_copy_assign_base(_BYTE *a1)
{
  std::__optional_move_base<WebCore::MediationRequirement,true>::__optional_move_base(a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::GlobalFrameIdentifier,true>::__optional_move_base(_BYTE *a1)
{
  std::__optional_copy_base<WebCore::GlobalFrameIdentifier,true>::__optional_copy_base(a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::MediationRequirement,true>::__optional_move_base(_BYTE *a1)
{
  std::__optional_copy_base<WebCore::MediationRequirement,true>::__optional_copy_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::GlobalFrameIdentifier,true>::__optional_copy_base(_BYTE *a1)
{
  std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::GlobalFrameIdentifier,true>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::MediationRequirement,true>::__optional_copy_base(_BYTE *a1)
{
  std::__optional_storage_base<WebCore::MediationRequirement,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::MediationRequirement,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::MediationRequirement,true>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::SecurityOriginData,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::SecurityOriginData,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__implIJN7WebCore34PublicKeyCredentialCreationOptionsENS2_33PublicKeyCredentialRequestOptionsEEECI1NS0_6__baseILNS0_6_TraitE1EJS3_S4_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail6__implIJN7WebCore34PublicKeyCredentialCreationOptionsENS2_33PublicKeyCredentialRequestOptionsEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S4_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__implIJN7WebCore34PublicKeyCredentialCreationOptionsENS2_33PublicKeyCredentialRequestOptionsEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S4_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EECI2NS0_6__baseILS7_1EJS4_S5_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::__base[abi:sn180100]<0ul>(a1);
  return a1;
}

WebCore::PublicKeyCredentialCreationOptions::UserEntity *WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity(WebCore::PublicKeyCredentialCreationOptions::UserEntity *this)
{
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity(this);
  return this;
}

{
  WebCore::PublicKeyCredentialCreationOptions::Entity::Entity(this);
  WebCore::BufferSource::BufferSource((WebCore::PublicKeyCredentialCreationOptions::UserEntity *)((char *)this + 16));
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((_QWORD *)this + 4);
  return this;
}

WebCore::PublicKeyCredentialCreationOptions *WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(WebCore::PublicKeyCredentialCreationOptions *this)
{
  WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(this);
  return this;
}

{
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::RpEntity(this);
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 32));
  WebCore::BufferSource::BufferSource((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 72));
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 88);
  std::optional<unsigned int>::optional[abi:sn180100]((_BYTE *)this + 104);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 112);
  std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::optional[abi:sn180100]((_BYTE *)this + 128);
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100]((_BYTE *)this + 144);
  return this;
}

WebCore::BufferSource *WebCore::BufferSource::BufferSource(WebCore::BufferSource *this)
{
  WebCore::BufferSource::BufferSource(this);
  return this;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]<true,0>((uint64_t)this);
  return this;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__base[abi:sn180100]<0ul>(a1);
  return a1;
}

_BYTE *std::__optional_move_assign_base<unsigned int,true>::__optional_move_assign_base(_BYTE *a1)
{
  std::__optional_copy_assign_base<unsigned int,true>::__optional_copy_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_move_assign_base(_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_copy_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<unsigned int,true>::__optional_copy_assign_base(_BYTE *a1)
{
  std::__optional_move_base<unsigned int,true>::__optional_move_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_copy_assign_base(_BYTE *a1)
{
  std::__optional_move_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_move_base(a1);
  return a1;
}

_BYTE *std::__optional_move_base<unsigned int,true>::__optional_move_base(_BYTE *a1)
{
  std::__optional_copy_base<unsigned int,true>::__optional_copy_base(a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_move_base(_BYTE *a1)
{
  std::__optional_copy_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_copy_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_base<unsigned int,true>::__optional_copy_base(_BYTE *a1)
{
  std::__optional_storage_base<int,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_copy_base(_BYTE *a1)
{
  std::__optional_storage_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::PublicKeyCredentialCreationOptions::RpEntity *WebCore::PublicKeyCredentialCreationOptions::RpEntity::RpEntity(WebCore::PublicKeyCredentialCreationOptions::RpEntity *this)
{
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::RpEntity(this);
  return this;
}

{
  WebCore::PublicKeyCredentialCreationOptions::Entity::Entity(this);
  std::optional<WTF::String>::optional[abi:sn180100]((_BYTE *)this + 16);
  return this;
}

WebCore::PublicKeyCredentialCreationOptions::Entity *WebCore::PublicKeyCredentialCreationOptions::Entity::Entity(WebCore::PublicKeyCredentialCreationOptions::Entity *this)
{
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(this);
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((_QWORD *)this + 1);
  return this;
}

_BYTE *std::__optional_storage_base<WTF::String,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WTF::String,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebKit *WebKit::WebsiteDataStore::initializeAppBoundDomains(WebKit *result, int a2)
{
  char v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  WebKit *v6;

  v2 = a2;
  v3 = atomic_load(WebKit::hasInitializedAppBoundDomains);
  if ((v3 & 1) == 0 || a2)
  {
    v4 = WebKit::appBoundDomainQueue(result);
    v5 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E34CCD28;
    *(_BYTE *)(v5 + 8) = v2;
    v6 = (WebKit *)v5;
    (*(void (**)(uint64_t, WebKit **))(*(_QWORD *)v4 + 32))(v4, &v6);
    result = v6;
    v6 = 0;
    if (result)
      return (WebKit *)(*(uint64_t (**)(WebKit *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_196CD9ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::appBoundDomainQueue(WebKit *this)
{
  uint64_t result;
  uint64_t v2;

    return WebKit::appBoundDomainQueue(void)::queue;
  WTF::WorkQueue::create();
  result = v2;
  WebKit::appBoundDomainQueue(void)::queue = v2;
  return result;
}

WebKit *WebKit::WebsiteDataStore::initializeManagedDomains(WebKit *result, int a2)
{
  char v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  WebKit *v6;

  v2 = a2;
  v3 = atomic_load(WebKit::hasInitializedManagedDomains);
  if ((v3 & 1) == 0 || a2)
  {
    v4 = WebKit::managedDomainQueue(result);
    v5 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E34CCE68;
    *(_BYTE *)(v5 + 8) = v2;
    v6 = (WebKit *)v5;
    (*(void (**)(uint64_t, WebKit **))(*(_QWORD *)v4 + 32))(v4, &v6);
    result = v6;
    v6 = 0;
    if (result)
      return (WebKit *)(*(uint64_t (**)(WebKit *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_196CD9FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::managedDomainQueue(WebKit *this)
{
  uint64_t result;
  uint64_t v2;

    return WebKit::managedDomainQueue(void)::queue;
  WTF::WorkQueue::create();
  result = v2;
  WebKit::managedDomainQueue(void)::queue = v2;
  return result;
}

void WebKit::WebProcessProxy::getNetworkProcessConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;
  char v10;

  v3 = *(_QWORD *)(a1 + 752);
  if (v3)
  {
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebsiteDataStore::getNetworkProcessConnection((unsigned int *)v3, a1, a2, 1);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  else
  {
    v5 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v7) = 0;
      _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "WebProcessProxy should always have a WebsiteDataStore when used by a web process requesting a network process connection", (uint8_t *)&v7, 2u);
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 16))(v6, &v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v7);
  }
}

unsigned int *WebKit::WebsiteDataStore::getNetworkProcessConnection(unsigned int *a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v8 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v9 = (unsigned int *)(v8 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 4, (uint64_t)a1);
  v11 = (unsigned int *)*((_QWORD *)a1 + 2);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 8), v8);
  v13 = *(unsigned int **)(v8 + 8);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v15 = *(unsigned int **)(a2 + 8);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = *a3;
  *a3 = 0;
  v18 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v18 = &off_1E34DFB30;
  *(_QWORD *)(v18 + 8) = v11;
  *(_QWORD *)(v18 + 16) = v13;
  *(_QWORD *)(v18 + 24) = v15;
  *(_QWORD *)(v18 + 32) = v17;
  *(_BYTE *)(v18 + 40) = a4;
  v21 = v18;
  WebKit::NetworkProcessProxy::getNetworkProcessConnection(v8, a2, &v21);
  v19 = v21;
  v21 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
}

WTF *WebKit::NetworkProcessProxy::addSession(uint64_t a1, unsigned int *a2, int a3)
{
  WTF *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF **v10;
  _BYTE v11[24];
  WTF *v12;
  int v13;
  const char **v14;
  uint64_t v15;
  const char **v16;
  char v17;
  const char **v18;
  char v19;
  const char **v20;
  char v21;
  const char **v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  result = (WTF *)WTF::WeakHashSet<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebsiteDataStore>(a1 + 536, a2, (uint64_t)v11);
  if (v11[16])
  {
    if ((v7 = *(_QWORD *)(a1 + 136)) != 0 && *(_BYTE *)(v7 + 104) || *(_QWORD *)(a1 + 144))
    {
      if (a3)
      {
        WebKit::WebsiteDataStore::parameters((WebKit::WebsiteDataStore *)a2, (uint64_t)&v12);
        v10 = &v12;
        WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::AddWebsiteDataStore>(a1, (uint64_t *)&v10, 0, 1);
        if (v23)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
        if (v21)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v20);
        if (v19)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v18);
        if (v17)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v16);
        WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)&v15, v8);
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v14);
        result = v12;
        if (v12)
        {
          v12 = 0;
          v13 = 0;
          return (WTF *)WTF::fastFree(result, v9);
        }
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::NetworkProcessProxy::getNetworkProcessConnection(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *result;
  WTF *v18;
  void *v19;
  char v20;
  __int16 v21;
  IPC::Encoder *v22;
  __int128 buf;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy is taking a background assertion because a web process is requesting a connection", (uint8_t *)&buf, 0xCu);
  }
  if (*(_BYTE *)(a1 + 169))
  {
    WebKit::ResponsivenessTimer::start(a1 + 56);
  }
  else if (!*(_BYTE *)(a1 + 185))
  {
    *(_WORD *)(a1 + 184) = 256;
  }
  v20 = *(_BYTE *)(a2 + 1024);
  if (!*(_BYTE *)(a2 + 1097))
    __break(1u);
  v21 = *(_WORD *)(a2 + 1095);
  v7 = *(_QWORD *)(a2 + 176);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 752) + 24);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v9 = *(unsigned int **)(a1 + 8);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *a3;
  *a3 = 0;
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 374;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v22 = (IPC::Encoder *)v12;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v8;
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode((IPC::Encoder *)v12, &v20);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = &off_1E34DD548;
  v13[1] = a1;
  v13[2] = v9;
  v13[3] = v11;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&buf = v13;
  *((_QWORD *)&buf + 1) = v14;
  v24 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v22, 1, (uint64_t)&buf, 1);
  if (v24)
  {
    v16 = buf;
    *(_QWORD *)&buf = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

WebKit::FrameInfoData *WebKit::FrameInfoData::FrameInfoData(WebKit::FrameInfoData *this)
{
  WebKit::FrameInfoData::FrameInfoData(this);
  return this;
}

{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 1) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebKit::FrameInfoData *)((char *)this + 8));
  WebCore::SecurityOriginData::SecurityOriginData((WebKit::FrameInfoData *)((char *)this + 208));
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((_QWORD *)this + 30);
  WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::ProcessQualified((_QWORD *)this + 31);
  std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::optional[abi:sn180100]((_BYTE *)this + 264);
  *((_BYTE *)this + 292) = 0;
  *((_BYTE *)this + 293) = 0;
  return this;
}

WebCore::SecurityOriginData *WebCore::SecurityOriginData::SecurityOriginData(WebCore::SecurityOriginData *this)
{
  WebCore::SecurityOriginData::SecurityOriginData(this);
  return this;
}

{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::variant[abi:sn180100]<true,0>(this);
  return this;
}

WebCore::SecurityOriginData::Tuple *WebCore::SecurityOriginData::Tuple::Tuple(WebCore::SecurityOriginData::Tuple *this)
{
  WebCore::SecurityOriginData::Tuple::Tuple(this);
  return this;
}

{
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(this);
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((_QWORD *)this + 1);
  std::optional<unsigned short>::optional[abi:sn180100]((_BYTE *)this + 16);
  return this;
}

_BYTE *std::__optional_move_assign_base<unsigned short,true>::__optional_move_assign_base(_BYTE *a1)
{
  std::__optional_copy_assign_base<unsigned short,true>::__optional_copy_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<unsigned short,true>::__optional_copy_assign_base(_BYTE *a1)
{
  std::__optional_move_base<unsigned short,true>::__optional_move_base(a1);
  return a1;
}

_BYTE *std::__optional_move_base<unsigned short,true>::__optional_move_base(_BYTE *a1)
{
  std::__optional_copy_base<unsigned short,true>::__optional_copy_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_base<unsigned short,true>::__optional_copy_base(_BYTE *a1)
{
  std::__optional_storage_base<unsigned short,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<unsigned short,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<unsigned short,true>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v2 = qword_1ECE72E50;
  if (qword_1ECE72E50)
  {
    v3 = *(_DWORD *)(qword_1ECE72E50 - 4);
    v4 = *(_DWORD *)(qword_1ECE72E50 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v7 = (_DWORD *)v5;
  v8 = v5 + 16;
  if (a1)
    bzero((void *)(v5 + 16), 16 * a1);
  qword_1ECE72E50 = v8;
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE72E50 - 12) = v4;
  if (v3)
  {
    v9 = 0;
    v10 = v3;
    do
    {
      v11 = (WTF::StringImpl **)(v2 + 16 * v9);
      v12 = *v11;
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (v12)
        {
          v13 = qword_1ECE72E50;
          if (qword_1ECE72E50)
            v14 = *(_DWORD *)(qword_1ECE72E50 - 8);
          else
            v14 = 0;
          v15 = *((_DWORD *)v12 + 4);
          if (v15 >= 0x100)
            v16 = v15 >> 8;
          else
            v16 = WTF::StringImpl::hashSlowCase(v12);
          v17 = 0;
          do
          {
            v18 = v16 & v14;
            v16 = ++v17 + v18;
          }
          while (*(_QWORD *)(v13 + 16 * v18));
          v19 = (WTF::StringImpl **)(v13 + 16 * v18);
          v20 = *(WTF::StringImpl **)(v2 + 16 * v9 + 8);
          *v19 = 0;
          v21 = *v11;
          *v11 = 0;
          *v19 = v21;
          v19[1] = v20;
          v22 = *v11;
          *v11 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v6);
            else
              *(_DWORD *)v22 -= 2;
          }
        }
        else
        {
          *v11 = 0;
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v2)
  {
    return;
  }
  WTF::fastFree((WTF *)(v2 - 16), v6);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand()
{
  int v0;

  if (qword_1ECE72E50 && (v0 = *(_DWORD *)(qword_1ECE72E50 - 4)) != 0)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE72E50 - 12) >= (2 * v0)));
  else
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u);
}

void WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v2 = WebKit::allDataStores(void)::map;
  if (WebKit::allDataStores(void)::map)
  {
    v3 = *(_DWORD *)(WebKit::allDataStores(void)::map - 4);
    v4 = *(_DWORD *)(WebKit::allDataStores(void)::map - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v7 = v5;
  v8 = v5 + 16;
  if (a1)
    bzero((void *)(v5 + 16), 16 * a1);
  WebKit::allDataStores(void)::map = v8;
  *(_DWORD *)(v7 + 12) = a1;
  *(_DWORD *)(WebKit::allDataStores(void)::map - 8) = a1 - 1;
  *(_DWORD *)(WebKit::allDataStores(void)::map - 16) = 0;
  *(_DWORD *)(WebKit::allDataStores(void)::map - 12) = v4;
  if (v3)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v2 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          if (WebKit::allDataStores(void)::map)
            v16 = *(_DWORD *)(WebKit::allDataStores(void)::map - 8);
          else
            v16 = 0;
          v17 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(WebKit::allDataStores(void)::map + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(WebKit::allDataStores(void)::map + 16 * v22);
          v25 = (unsigned int *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            do
            {
              v28 = __ldaxr(v25);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v25));
            if (!v29)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v6);
            }
          }
          *v24 = *v10;
          v26 = v2 + 16 * v9;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v24[1] = v27;
          v13 = *(unsigned int **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (!v13)
            goto LABEL_21;
          do
          {
            v30 = __ldaxr(v13);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v13));
          if (v31)
            goto LABEL_21;
        }
        else
        {
          v12 = v2 + 16 * v9;
          v13 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (!v13)
            goto LABEL_21;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (v15)
            goto LABEL_21;
        }
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v6);
      }
LABEL_21:
      if (++v9 == v3)
        goto LABEL_30;
    }
  }
  if (v2)
LABEL_30:
    WTF::fastFree((WTF *)(v2 - 16), v6);
}

void WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand()
{
  int v0;

  if (WebKit::allDataStores(void)::map && (v0 = *(_DWORD *)(WebKit::allDataStores(void)::map - 4)) != 0)
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::allDataStores(void)::map - 12) >= (2 * v0)));
  else
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(8u);
}

uint64_t IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteRenderingBackendProxy::DidInitialize>(uint64_t a1, uint64_t a2, double a3)
{
  int v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;

  IPC::Connection::waitForMessage((unsigned __int8 ***)a1, 0x50Fu, a2, 0, (uint64_t)&v9, a3);
  v4 = v10;
  if (!v10)
  {
    v5 = atomic_load((unsigned __int8 *)(a1 + 33));
    v4 = v10;
    if ((v5 & 1) != 0)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1, v9);
      v6 = 0;
      v4 = v10;
    }
    else
    {
      v6 = 1;
    }
    if (v4 == -1)
      return v6;
    goto LABEL_5;
  }
  if (v10 == 1)
  {
    v6 = v9;
LABEL_5:
    ((void (*)(char *, uint64_t *))off_1E34E3480[v4])(&v11, &v9);
    return v6;
  }
  v8 = std::__throw_bad_variant_access[abi:sn180100]();
  return IPC::StreamClientConnection::DedicatedConnectionClient::didReceiveMessage(v8);
}

uint64_t IPC::StreamClientConnection::DedicatedConnectionClient::didReceiveMessage(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

void IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder>(_BYTE *a1, IPC::Decoder *a2)
{
  _BYTE v4[8];
  char v5;

  IPC::Decoder::decode<IPC::Semaphore>(a2, v4);
  if (v5)
  {
    IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder,IPC::Semaphore>(a1, a2, (uint64_t)v4);
    if (v5)
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)v4);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
    }
  }
  else
  {
    *a1 = 0;
    a1[16] = 0;
  }
}

void IPC::Decoder::decode<IPC::Semaphore>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<IPC::Semaphore,void>::decode(a1, a2);
  if (!a2[8])
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<IPC::Semaphore,void>::decode(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  _BYTE v5[4];
  char v6;

  IPC::Decoder::takeLastAttachment(a1, v5);
  if (*(_QWORD *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    IPC::Semaphore::Semaphore();
    IPC::Semaphore::Semaphore((uint64_t)a2, (uint64_t)&v4);
    a2[8] = 1;
    IPC::Semaphore::~Semaphore((IPC::Semaphore *)&v4);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  if (v6)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
}

void sub_196CDAEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  IPC::Semaphore::~Semaphore((IPC::Semaphore *)&a9);
  if (a12)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  _Unwind_Resume(a1);
}

void IPC::Semaphore::~Semaphore(IPC::Semaphore *this)
{
  IPC::Semaphore::destroy(this);
  WTF::MachSendRight::~MachSendRight(this);
}

uint64_t IPC::Semaphore::Semaphore(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;

  result = WTF::MachSendRight::MachSendRight();
  v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)(result + 4) = v4;
  return result;
}

_DWORD *IPC::Semaphore::Semaphore()
{
  _DWORD *result;

  result = (_DWORD *)WTF::MachSendRight::MachSendRight();
  result[1] = *result;
  return result;
}

_BYTE *IPC::handleMessage<Messages::RemoteRenderingBackendProxy::DidInitialize,WebKit::RemoteRenderingBackendProxy,WebKit::RemoteRenderingBackendProxy,void ()(IPC::Semaphore &&,IPC::Semaphore &)>(IPC::Decoder *a1, uint64_t a2)
{
  _BYTE v4[8];
  _BYTE v5[12];

  IPC::Decoder::decode<std::tuple<IPC::Semaphore,IPC::Semaphore>>(v4, a1);
  if (v5[8])
    WebKit::RemoteRenderingBackendProxy::didInitialize(a2, (uint64_t)v4, (uint64_t)v5);
  return std::__optional_destruct_base<std::tuple<IPC::Semaphore,IPC::Semaphore>,false>::~__optional_destruct_base[abi:sn180100](v4);
}

void WebKit::RemoteRenderingBackendProxy::didInitialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    IPC::StreamClientConnectionBuffer::setSemaphores(v3 + 56, a2, a3);
}

void IPC::Decoder::decode<std::tuple<IPC::Semaphore,IPC::Semaphore>>(_BYTE *a1, IPC::Decoder *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[16])
  {
    v4 = *(_QWORD *)a2;
    v5 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v6 = *((_QWORD *)a2 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::StreamClientConnectionBuffer::setSemaphores(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  _DWORD v8[4];

  WTF::MachSendRight::MachSendRight();
  v6 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = 0;
  v8[1] = v6;
  WTF::MachSendRight::MachSendRight();
  v7 = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(a3 + 4) = 0;
  v8[3] = v7;
  std::optional<IPC::StreamClientConnectionBuffer::Semaphores>::operator=[abi:sn180100]<IPC::StreamClientConnectionBuffer::Semaphores,void>((IPC::Semaphore *)(a1 + 24), v8);
  IPC::StreamClientConnectionBuffer::Semaphores::~Semaphores((IPC::StreamClientConnectionBuffer::Semaphores *)v8);
  if (*(_BYTE *)(a1 + 40))
    MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 28));
  else
    __break(1u);
}

void IPC::Semaphore::destroy(IPC::Semaphore *this)
{
  _DWORD *v2;
  int v3;

  if (*(_DWORD *)this)
  {
    v3 = 0;
    WTF::MachSendRight::operator=();
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v3);
    v2 = (_DWORD *)((char *)this + 4);
  }
  else
  {
    v2 = (_DWORD *)((char *)this + 4);
    if (!*((_DWORD *)this + 1))
      return;
    semaphore_destroy(*MEMORY[0x1E0C83DA0], *((_DWORD *)this + 1));
  }
  *v2 = 0;
}

void IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder,IPC::Semaphore>(_BYTE *a1, IPC::Decoder *a2, uint64_t a3)
{
  _BYTE v5[8];
  char v6;

  IPC::Decoder::decode<IPC::Semaphore>(a2, v5);
  if (v6)
  {
    IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder,IPC::Semaphore,IPC::Semaphore>((uint64_t)a1, a3, (uint64_t)v5);
    if (v6)
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)v5);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
    }
  }
  else
  {
    *a1 = 0;
    a1[16] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder,IPC::Semaphore,IPC::Semaphore>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_BYTE *)(a2 + 8) && *(_BYTE *)(a3 + 8))
  {
    v5 = result;
    v6 = WTF::MachSendRight::MachSendRight();
    v7 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(v6 + 4) = v7;
    result = WTF::MachSendRight::MachSendRight();
    v8 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = 0;
    *(_DWORD *)(v5 + 12) = v8;
    *(_BYTE *)(v5 + 16) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned __int8 ***IPC::Connection::waitForMessage@<X0>(unsigned __int8 ***result@<X0>, unsigned __int16 a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unsigned __int8 v7;
  unsigned __int8 ***v8;
  unsigned __int8 *v11;
  unint64_t v13;
  unsigned __int8 **v14;
  char v15;
  int v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL4 v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  char v26;
  int v27;
  int v28;
  char v29;
  IPC::Decoder *v30;
  WTF *v31;
  void *v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  NSObject *v38;
  unsigned int v39;
  char *v40;
  char v41;
  unsigned __int16 v42;
  uint64_t v43;
  int v44;
  char v45;
  IPC::Decoder *v46;
  unsigned __int8 **v47;
  uint64_t v48;
  unsigned __int16 v49;
  _BYTE buf[24];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v48 = a3;
  v7 = atomic_load((unsigned __int8 *)result + 33);
  if ((v7 & 1) == 0)
  {
    *(_BYTE *)a5 = 1;
    *(_DWORD *)(a5 + 8) = 1;
    return result;
  }
  v8 = result;
  if (!result[2])
  {
    __break(0xC471u);
    JUMPOUT(0x196CDB60CLL);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (unsigned __int8 **)result);
  if (*((_BYTE *)v8 + 97))
    a6 = INFINITY;
  v42 = v49;
  v43 = v48;
  v44 = a4;
  v45 = 0;
  v46 = 0;
  v11 = (unsigned __int8 *)v8 + 226;
  if (__ldaxr((unsigned __int8 *)v8 + 226))
  {
    __clrex();
LABEL_7:
    MEMORY[0x19AEABB3C]((char *)v8 + 226);
    goto LABEL_8;
  }
  if (__stxr(1u, v11))
    goto LABEL_7;
LABEL_8:
  if (v8[29])
  {
    v16 = 0;
    v37 = 6;
LABEL_67:
    *(_BYTE *)a5 = v37;
    *(_DWORD *)(a5 + 8) = 1;
    goto LABEL_15;
  }
  if (!*((_BYTE *)v8 + 242))
  {
    v16 = 0;
    v37 = 7;
    goto LABEL_67;
  }
  os_unfair_lock_lock((os_unfair_lock_t)v8 + 26);
  v13 = (unint64_t)v8[14];
  v14 = v8[15];
  if ((unsigned __int8 **)v13 == v14)
  {
    v15 = 0;
LABEL_12:
    os_unfair_lock_unlock((os_unfair_lock_t)v8 + 26);
    if ((v15 & 1) == 0 || (a4 & 1) == 0)
    {
      v8[29] = (unsigned __int8 **)&v42;
      v16 = 1;
      goto LABEL_15;
    }
    v16 = 0;
    v37 = 10;
    goto LABEL_67;
  }
  v15 = 0;
  v33 = v8[16];
  while (1)
  {
    v34 = v33[v13];
    v35 = *((unsigned __int16 *)v34 + 25);
    if (v35 == v49 && *((_QWORD *)v34 + 8) == v48)
      break;
    v36 = *((unsigned int *)v8 + 34);
    v13 += v36 + 1;
    do
      v13 -= v36;
    while (v13 >= v36);
    v15 |= v35 > 0xDB0;
    if (v14 == (unsigned __int8 **)v13)
      goto LABEL_12;
  }
  v33[v13] = 0;
  WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::remove((unint64_t *)v8 + 14, v13);
  *(_QWORD *)a5 = v34;
  *(_DWORD *)(a5 + 8) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)v8 + 26);
  v16 = 0;
LABEL_15:
  v17 = __ldxr(v11);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_53;
  }
  if (__stlxr(0, v11))
LABEL_53:
    WTF::Lock::unlockSlow((WTF::Lock *)((char *)v8 + 226));
  if (v16)
  {
    v18 = fabs(a6) != INFINITY;
    while (1)
    {
      v41 = 0;
      v19 = (uint64_t)v8[2];
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v20 = off_1E351EE48;
      v20[1] = &v41;
      v20[2] = &v49;
      v20[3] = &v48;
      *(_QWORD *)buf = v20;
      IPC::Connection::SyncMessageState::dispatchMessages(v19, buf);
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
      if (__ldaxr(v11))
        break;
      if (__stxr(1u, v11))
        goto LABEL_21;
LABEL_22:
      if (v41)
      {
        v8[29] = 0;
        v29 = 8;
LABEL_43:
        *(_BYTE *)a5 = v29;
        v27 = 1;
        goto LABEL_33;
      }
      if (*((_DWORD *)v8 + 21))
        v22 = v18;
      else
        v22 = 0;
      if (v22)
      {
        v38 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
        {
          v39 = v49;
          if (v49 >= 0xE98u)
            v39 = 3736;
          v40 = (&IPC::Detail::messageDescriptions)[3 * v39];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v40;
          _os_log_error_impl(&dword_196BCC000, v38, OS_LOG_TYPE_ERROR, "Connection::waitForMessage(%{public}s): Exiting immediately, since we're handling a sync message already", buf, 0xCu);
        }
        v8[29] = 0;
        v29 = 9;
        goto LABEL_43;
      }
      v23 = v8[29];
      v24 = v23[3];
      if (!v24)
      {
        v25 = atomic_load((unsigned __int8 *)v8 + 33);
        if ((v25 & 1) == 0)
        {
          v8[29] = 0;
          v27 = 1;
          *(_BYTE *)a5 = 1;
          goto LABEL_33;
        }
        *(double *)buf = a6;
        *(_DWORD *)&buf[8] = 2;
        if ((WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)v8 + 225, (unsigned __int8 *)v8 + 226, (WTF::TimeWithDynamicClockType *)buf) & 1) != 0)
        {
          if (!*((_BYTE *)v8[29] + 20))
          {
            v26 = 1;
            goto LABEL_34;
          }
          v8[29] = 0;
          if (*((_BYTE *)v8 + 242))
            v29 = 10;
          else
            v29 = 7;
        }
        else
        {
          v8[29] = 0;
          v29 = 4;
        }
        goto LABEL_43;
      }
      v27 = 0;
      v23[3] = 0;
      v8[29] = 0;
      *(_QWORD *)a5 = v24;
LABEL_33:
      v26 = 0;
      *(_DWORD *)(a5 + 8) = v27;
LABEL_34:
      v28 = __ldxr(v11);
      if (v28 != 1)
      {
        __clrex();
LABEL_39:
        WTF::Lock::unlockSlow((WTF::Lock *)((char *)v8 + 226));
        goto LABEL_36;
      }
      if (__stlxr(0, v11))
        goto LABEL_39;
LABEL_36:
      if ((v26 & 1) == 0)
        goto LABEL_49;
    }
    __clrex();
LABEL_21:
    MEMORY[0x19AEABB3C]((char *)v8 + 226);
    goto LABEL_22;
  }
LABEL_49:
  v30 = v46;
  v46 = 0;
  if (v30)
  {
    IPC::Decoder::~Decoder(v30);
    WTF::fastFree(v31, v32);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v47);
}

uint64_t WTF::Condition::waitUntilUnchecked<WTF::Lock>(uint64_t a1, unsigned __int8 *a2, WTF::TimeWithDynamicClockType *this)
{
  uint64_t *v5;
  uint64_t v6;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v13 = WTF::TimeWithDynamicClockType::nowWithSameClock(this);
  v14 = v5;
  if (!WTF::TimeWithDynamicClockType::operator<())
  {
    v10 = a2;
    v11 = a1;
    v13 = (uint64_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
    v14 = &v13;
    v15 = &v11;
    v12[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
    v12[1] = v12;
    v12[2] = &v10;
    v6 = WTF::ParkingLot::parkConditionallyImpl() & 1;
    goto LABEL_3;
  }
  v9 = __ldxr(a2);
  if (v9 == 1)
  {
    if (!__stlxr(0, a2))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)a2);
LABEL_14:
  v6 = 0;
LABEL_3:
  if (__ldaxr(a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, a2))
  {
    return v6;
  }
  MEMORY[0x19AEABB3C](a2);
  return v6;
}

unint64_t WebKit::WebCompiledContentRuleList::spanWithOffsetAndLength(unint64_t this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  if (a3 + a2 > v3)
  {
    this = 71;
    __break(0xC471u);
  }
  else if (v3 >= a2 && (a3 == -1 || v3 - a2 >= a3))
  {
    return *(_QWORD *)(this + 16) + a2;
  }
  __break(1u);
  return this;
}

void WebKit::XPCEndpointClient::setEndpoint(uint64_t a1, _xpc_endpoint_s *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  _xpc_connection_s *v7;
  void *v8;
  NSObject *global_queue;
  _xpc_connection_s *v10;
  int v11;
  _QWORD handler[5];

  v4 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](a1 + 8);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v7 = xpc_connection_create_from_endpoint(a2);
    v8 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    if (v8)
    {

      v7 = *(_xpc_connection_s **)(a1 + 16);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    xpc_connection_set_target_queue(v7, global_queue);
    v10 = *(_xpc_connection_s **)(a1 + 16);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = ___ZN6WebKit17XPCEndpointClient11setEndpointEPU24objcproto13OS_xpc_object8NSObject_block_invoke;
    handler[3] = &__block_descriptor_40_e33_v16__0__NSObject_OS_xpc_object__8l;
    handler[4] = a1;
    xpc_connection_set_event_handler(v10, handler);
    xpc_connection_resume(*(xpc_connection_t *)(a1 + 16));
  }
  v11 = __ldxr(v4);
  if (v11 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

void sub_196CDB968(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebKit::LaunchServicesDatabaseManager::didConnect(WebKit::LaunchServicesDatabaseManager *this)
{
  xpc_connection_t v2;
  xpc_object_t message;
  xpc_connection_t connection;

  message = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(message, "message-name", "request-launch-services-database-update-message");
  WebKit::XPCEndpointClient::connection((unsigned __int8 *)this, &connection);
  v2 = connection;
  if (connection)
  {
    xpc_connection_send_message(connection, message);

  }
  if (message)

}

void sub_196CDBA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  if (a9)
  _Unwind_Resume(a1);
}

unsigned __int8 *WebKit::XPCEndpointClient::connection@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  void *v6;
  int v7;

  v2 = this;
  v4 = this + 8;
  if (__ldaxr(this + 8))
  {
    __clrex();
LABEL_3:
    this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this + 8);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = (void *)*((_QWORD *)v2 + 2);
  *a2 = v6;
  if (v6)
    this = v6;
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

void sub_196CDBAE0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebKit::PlatformCAAnimationRemote::updateLayerAnimations(CALayer *a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const __CFString *v18;
  const void *v19;

  result = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a4);
  v9 = (_QWORD *)result;
  v11 = v10;
  if (*a4)
    v12 = (uint64_t)&(*a4)[*((unsigned int *)*a4 - 1)];
  else
    v12 = 0;
  if (v12 != result)
  {
    do
    {
      if (*v9)
        v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v13 = &stru_1E351F1B8;
      result = -[CALayer removeAnimationForKey:](a1, "removeAnimationForKey:", v13);
      while (++v9 != v11)
      {
        if ((unint64_t)(*v9 + 1) > 1)
          goto LABEL_11;
      }
      v9 = v11;
LABEL_11:
      ;
    }
    while (v9 != (_QWORD *)v12);
  }
  v14 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v14)
  {
    v15 = 144 * v14;
    v16 = *(_QWORD *)a3 + 8;
    do
    {
      result = WebCore::PlatformCAAnimation::isValidKeyPath();
      if ((_DWORD)result)
      {
        WebKit::createAnimation(&v19, a1, a2, v16);
        v17 = v19;
        if (*(_QWORD *)(v16 - 8))
          v18 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v18 = &stru_1E351F1B8;
        -[CALayer addAnimation:forKey:](a1, "addAnimation:forKey:", v17, v18);
        if (v17)
          CFRelease(v17);
        result = -[CALayer setInheritsTiming:](a1, "setInheritsTiming:", 0);
      }
      v16 += 144;
      v15 -= 144;
    }
    while (v15);
  }
  return result;
}

void sub_196CDBD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  NSException *v20;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v20 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v20);
  objc_end_catch();
}

uint64_t WebKit::createAnimation(_QWORD *a1, CALayer *a2, uint64_t *a3, uint64_t a4)
{
  void *v8;
  const __CFString *v9;
  void *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  void *v20;
  const __CFString *v21;
  CFTypeRef v22;
  CFTypeRef v23;
  double **v24;
  double *v25;
  void *v26;
  uint64_t v27;
  const WebKit::PlatformCAAnimationRemoteProperties *v28;
  uint64_t v29;
  CFTypeRef v30;
  void *v31;
  double v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  CALayer *v44;
  double v45;
  double v46;
  double v47;
  const void *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  _QWORD *v53;
  CFTypeRef v54;
  CFTypeRef v55;
  _QWORD *v56;
  int v57;
  const void *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  WKAnimationDelegate *v66;
  const void *v67;
  CFTypeRef cf[2];
  unsigned int v70;
  __int16 v71;
  char v72;

  *a1 = 0;
  switch(*(_BYTE *)(a4 + 8))
  {
    case 0:
      v8 = (void *)MEMORY[0x1E0CD2710];
      if (*(_QWORD *)a4)
        v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v9 = &stru_1E351F1B8;
      v10 = (void *)objc_msgSend(v8, "animationWithKeyPath:", v9);
      if (*(_DWORD *)(a4 + 84) < 2u)
        goto LABEL_10;
      WebKit::animationValueFromKeyframeValue((uint64_t)cf, *(_QWORD *)(a4 + 72));
      objc_msgSend(v10, "setFromValue:", cf[0]);
      v11 = cf[0];
      cf[0] = 0;
      if (v11)
        CFRelease(v11);
      if (*(_DWORD *)(a4 + 84) <= 1u)
        goto LABEL_117;
      WebKit::animationValueFromKeyframeValue((uint64_t)cf, *(_QWORD *)(a4 + 72) + 136);
      objc_msgSend(v10, "setToValue:", cf[0]);
      v12 = cf[0];
      cf[0] = 0;
      if (v12)
        CFRelease(v12);
LABEL_10:
      if (*(_DWORD *)(a4 + 116))
        objc_msgSend(v10, "setTimingFunction:", WebCore::toCAMediaTimingFunction());
      if (v10)
        goto LABEL_70;
      goto LABEL_71;
    case 1:
      v10 = (void *)objc_msgSend(MEMORY[0x1E0CD2700], "animation");
      if (*(_DWORD *)(a4 + 132))
      {
        v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a4 + 132));
        v27 = *(unsigned int *)(a4 + 132);
        if ((_DWORD)v27)
        {
          v28 = *(const WebKit::PlatformCAAnimationRemoteProperties **)(a4 + 120);
          v29 = 136 * v27;
          do
          {
            if (WebCore::PlatformCAAnimation::isValidKeyPath())
            {
              WebKit::createAnimation((WebKit *)cf, a2, (WebKit::RemoteLayerTreeHost *)a3, v28);
              v30 = cf[0];
              if (cf[0])
              {
                CFRelease(cf[0]);
                objc_msgSend(v26, "addObject:", v30);
              }
            }
            v28 = (const WebKit::PlatformCAAnimationRemoteProperties *)((char *)v28 + 136);
            v29 -= 136;
          }
          while (v29);
        }
        objc_msgSend(v10, "setAnimations:", v26);
        if (v26)
          CFRelease(v26);
      }
      if (v10)
        goto LABEL_70;
      goto LABEL_71;
    case 2:
      v13 = (void *)MEMORY[0x1E0CD2798];
      if (*(_QWORD *)a4)
        v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v14 = &stru_1E351F1B8;
      v10 = (void *)objc_msgSend(v13, "animationWithKeyPath:", v14);
      if (*(_DWORD *)(a4 + 84))
      {
        v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a4 + 84));
        v16 = *(unsigned int *)(a4 + 84);
        if ((_DWORD)v16)
        {
          v17 = *(_QWORD *)(a4 + 72);
          v18 = 136 * v16;
          do
          {
            WebKit::animationValueFromKeyframeValue((uint64_t)cf, v17);
            if (cf[0])
            {
              objc_msgSend(v15, "addObject:");
              v19 = cf[0];
              cf[0] = 0;
              if (v19)
                CFRelease(v19);
            }
            v17 += 136;
            v18 -= 136;
          }
          while (v18);
        }
        objc_msgSend(v10, "setValues:", v15);
        if (v15)
          CFRelease(v15);
      }
      if (*(_DWORD *)(a4 + 100))
      {
        v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a4 + 100));
        v33 = *(unsigned int *)(a4 + 100);
        if ((_DWORD)v33)
        {
          v34 = *(_DWORD **)(a4 + 88);
          v35 = 4 * v33;
          do
          {
            LODWORD(v32) = *v34;
            v36 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v32);
            if (v36)
              objc_msgSend(v31, "addObject:", v36);
            ++v34;
            v35 -= 4;
          }
          while (v35);
        }
        objc_msgSend(v10, "setKeyTimes:", v31);
        if (v31)
          CFRelease(v31);
      }
      if (*(_QWORD *)(a4 + 56))
        objc_msgSend(v10, "setTimingFunction:", WebCore::toCAMediaTimingFunction());
      if (*(_DWORD *)(a4 + 116))
      {
        v37 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a4 + 116));
        v38 = *(unsigned int *)(a4 + 116);
        if ((_DWORD)v38)
        {
          v39 = *(_QWORD *)(a4 + 104);
          v40 = 8 * v38;
          do
          {
            v41 = WebCore::toCAMediaTimingFunction();
            if (v41)
              objc_msgSend(v37, "addObject:", v41);
            v39 += 8;
            v40 -= 8;
          }
          while (v40);
        }
        objc_msgSend(v10, "setTimingFunctions:", v37);
        if (v37)
          CFRelease(v37);
      }
      if (v10)
        goto LABEL_70;
      goto LABEL_71;
    case 3:
      v20 = (void *)MEMORY[0x1E0CD2848];
      if (*(_QWORD *)a4)
        v21 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v21 = &stru_1E351F1B8;
      v10 = (void *)objc_msgSend(v20, "animationWithKeyPath:", v21);
      if (*(_DWORD *)(a4 + 84) < 2u)
        goto LABEL_32;
      WebKit::animationValueFromKeyframeValue((uint64_t)cf, *(_QWORD *)(a4 + 72));
      objc_msgSend(v10, "setFromValue:", cf[0]);
      v22 = cf[0];
      cf[0] = 0;
      if (v22)
        CFRelease(v22);
      if (*(_DWORD *)(a4 + 84) <= 1u)
      {
LABEL_117:
        __break(0xC471u);
        JUMPOUT(0x196CDC53CLL);
      }
      WebKit::animationValueFromKeyframeValue((uint64_t)cf, *(_QWORD *)(a4 + 72) + 136);
      objc_msgSend(v10, "setToValue:", cf[0]);
      v23 = cf[0];
      cf[0] = 0;
      if (v23)
        CFRelease(v23);
LABEL_32:
      if (*(_DWORD *)(a4 + 116))
      {
        v24 = *(double ***)(a4 + 104);
        if ((*(unsigned int (**)(double *))(*(_QWORD *)*v24 + 24))(*v24) == 3)
        {
          v25 = *v24;
          objc_msgSend(v10, "setMass:", v25[2]);
          objc_msgSend(v10, "setStiffness:", v25[3]);
          objc_msgSend(v10, "setDamping:", v25[4]);
          objc_msgSend(v10, "setInitialVelocity:", v25[5]);
        }
      }
      if (v10)
LABEL_70:
        CFRetain(v10);
LABEL_71:
      *a1 = v10;
LABEL_72:
      objc_msgSend(v10, "setBeginTime:", *(double *)(a4 + 16));
      objc_msgSend(v10, "setDuration:", *(double *)(a4 + 24));
      objc_msgSend(v10, "setTimeOffset:", *(double *)(a4 + 32));
      LODWORD(v42) = *(_DWORD *)(a4 + 40);
      objc_msgSend(v10, "setRepeatCount:", v42);
      LODWORD(v43) = *(_DWORD *)(a4 + 44);
      objc_msgSend(v10, "setSpeed:", v43);
      objc_msgSend(v10, "setAutoreverses:", *(unsigned __int8 *)(a4 + 64));
      objc_msgSend(v10, "setRemovedOnCompletion:", *(unsigned __int8 *)(a4 + 65));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v10, "setAdditive:", *(unsigned __int8 *)(a4 + 66));
        if (*(_BYTE *)(a4 + 49))
          objc_msgSend(v10, "setValueFunction:", objc_msgSend(MEMORY[0x1E0CD28D8], "functionWithName:", WebCore::toCAValueFunctionType()));
      }
      if (*(_BYTE *)(a4 + 48))
        objc_msgSend(v10, "setFillMode:", WebCore::toCAFillModeType());
      if (*(_BYTE *)(a4 + 68))
        objc_msgSend(v10, "setValue:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("WKPlatformCAAnimationExplicitBeginTimeFlag"));
      if (!a3)
        goto LABEL_107;
      cf[0] = (CFTypeRef)WebKit::RemoteLayerTreeNode::layerID((WebKit::RemoteLayerTreeNode *)a2, v44);
      cf[1] = v48;
      v49 = a3 + 6;
      v50 = a3[6];
      if (v50
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a3 + 6, 0), (v50 = *v49) != 0))
      {
        v51 = *(_DWORD *)(v50 - 8);
      }
      else
      {
        v51 = 0;
      }
      v70 = -1640531527;
      v71 = 0;
      v72 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v70, cf);
      v52 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v70) & v51;
      v53 = (_QWORD *)(v50 + 24 * v52);
      v55 = (CFTypeRef)*v53;
      v54 = (CFTypeRef)v53[1];
      if (*(_OWORD *)v53 == 0)
        goto LABEL_92;
      v56 = 0;
      v57 = 1;
      break;
    default:
      v10 = 0;
      goto LABEL_72;
  }
  do
  {
    if (v55 == cf[0] && v54 == cf[1])
      goto LABEL_103;
    if (v54 == (CFTypeRef)-1)
      v56 = v53;
    v52 = (v52 + v57) & v51;
    v53 = (_QWORD *)(v50 + 24 * v52);
    v55 = (CFTypeRef)*v53;
    v54 = (CFTypeRef)v53[1];
    ++v57;
  }
  while (*(_OWORD *)v53 != 0);
  if (v56)
  {
    *v56 = 0;
    v56[1] = 0;
    v56[2] = 0;
    --*(_DWORD *)(*v49 - 16);
    v53 = v56;
  }
LABEL_92:
  *(_OWORD *)v53 = *(_OWORD *)cf;
  v58 = (const void *)v53[2];
  v53[2] = 0;
  if (v58)
    CFRelease(v58);
  v59 = *v49;
  if (*v49)
    v60 = *(_DWORD *)(v59 - 12) + 1;
  else
    v60 = 1;
  *(_DWORD *)(v59 - 12) = v60;
  v61 = *v49;
  if (*v49)
    v62 = *(_DWORD *)(v61 - 12);
  else
    v62 = 0;
  v63 = (*(_DWORD *)(v61 - 16) + v62);
  v64 = *(unsigned int *)(v61 - 4);
  if (v64 <= 0x400)
  {
    if (3 * v64 > 4 * v63)
      goto LABEL_103;
    goto LABEL_102;
  }
  if (v64 <= 2 * v63)
LABEL_102:
    v53 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a3 + 6, v53);
LABEL_103:
  v65 = v53[2];
  if (!v65)
  {
    v66 = [WKAnimationDelegate alloc];
    v65 = -[WKAnimationDelegate initWithLayerID:layerTreeHost:](v66, "initWithLayerID:layerTreeHost:", cf[0], cf[1], a3);
    v67 = (const void *)v53[2];
    v53[2] = v65;
    if (v67)
    {
      CFRelease(v67);
      v65 = v53[2];
    }
  }
  objc_msgSend(v10, "setDelegate:", v65);
LABEL_107:
  if (byte_1ECE72DB9 == 1)
  {
    LODWORD(v45) = dword_1ECE72DBC;
    LODWORD(v46) = unk_1ECE72DC0;
    LODWORD(v47) = dword_1ECE72DC4;
  }
  else
  {
    *(CAFrameRateRange *)&v45 = CAFrameRateRangeMake(80.0, 120.0, 120.0);
    dword_1ECE72DBC = LODWORD(v45);
    unk_1ECE72DC0 = LODWORD(v46);
    dword_1ECE72DC4 = LODWORD(v47);
    byte_1ECE72DB9 = 1;
  }
  objc_msgSend(v10, "setPreferredFrameRateRange:", v45, v46, v47);
  return objc_msgSend(v10, "setHighFrameRateReason:", 2883585);
}

void sub_196CDC548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void **v10;
  const void *v12;

  if (cf)
    CFRelease(cf);
  v12 = *v10;
  *v10 = 0;
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeNode::layerID(WebKit::RemoteLayerTreeNode *this, CALayer *a2)
{
  uint64_t result;

  result = objc_msgSend((id)-[WebKit::RemoteLayerTreeNode valueForKey:](this, "valueForKey:", CFSTR("WKRemoteLayerTreeNode")), "pointerValue");
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    WebKit::CompletionHandlerCallChecker::~CompletionHandlerCallChecker((SEL *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

void WebKit::CompletionHandlerCallChecker::~CompletionHandlerCallChecker(SEL *this)
{
  objc_class *v2;
  void *v3;
  uint64_t v4;
  _BOOL4 isMetaClass;
  uint64_t v6;
  NSString *v7;
  NSString *v8;

  if (!*((_BYTE *)this + 24))
  {
    v2 = WebKit::CompletionHandlerCallChecker::classImplementingDelegateMethod((WebKit::CompletionHandlerCallChecker *)this);
    v3 = (void *)MEMORY[0x1E0C99DA0];
    v4 = *MEMORY[0x1E0C99768];
    isMetaClass = class_isMetaClass(v2);
    v7 = NSStringFromClass(v2);
    v8 = NSStringFromSelector(this[2]);
    v6 = 45;
    if (isMetaClass)
      v6 = 43;
    objc_msgSend(v3, "raise:format:", v4, CFSTR("Completion handler passed to %c[%@ %@] was not called"), v6, v7, v8);
  }
}

void WebKit::RemoteLayerWithRemoteRenderingBackingStore::~RemoteLayerWithRemoteRenderingBackingStore(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteLayerWithRemoteRenderingBackingStore::~RemoteLayerWithRemoteRenderingBackingStore(this, a2);
  WTF::fastFree(v2, v3);
}

{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)this = off_1E34B90C0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 40);
  if (v3)
    WebKit::RemoteImageBufferSetProxy::close(v3);
  if (*((_BYTE *)this + 448))
  {
    v4 = *((unsigned int *)this + 110);
    if ((_DWORD)v4 != -1)
      off_1E34B91A0[v4]((int)&v6, (WebKit::RemoteLayerWithRemoteRenderingBackingStore *)((char *)this + 376));
    *((_DWORD *)this + 110) = -1;
  }
  v5 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  WebKit::RemoteLayerBackingStore::~RemoteLayerBackingStore(this, a2);
}

unsigned __int8 *WebKit::RemoteImageBufferSetProxy::close(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  IPC::StreamClientConnection *v9;

  v1 = this;
  v2 = this + 97;
  if (__ldaxr(this + 97))
  {
    __clrex();
LABEL_3:
    this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this + 97);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v1[121] = 1;
  if (!v1[120])
  {
    this = (unsigned __int8 *)*((_QWORD *)v1 + 14);
    if (this)
    {
      this = (unsigned __int8 *)IPC::StreamClientConnection::removeWorkQueueMessageReceiver((uint64_t)this, 0x56u, *((_QWORD *)v1 + 3));
      v4 = (unsigned int *)*((_QWORD *)v1 + 14);
      *((_QWORD *)v1 + 14) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v9 = (IPC::StreamClientConnection *)v4;
          this = (unsigned __int8 *)WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v9);
        }
      }
    }
  }
  v7 = *((_QWORD *)v1 + 4);
  if (v7)
  {
    this = *(unsigned __int8 **)(v7 + 8);
    if (this)
      this = (unsigned __int8 *)WebKit::RemoteRenderingBackendProxy::releaseRemoteImageBufferSet((WebKit::RemoteRenderingBackendProxy *)this, (WebKit::RemoteImageBufferSetProxy *)v1);
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return this;
}

_QWORD *WebKit::RemoteRenderingBackendProxy::releaseRemoteImageBufferSet(WebKit::RemoteRenderingBackendProxy *this, WebKit::RemoteImageBufferSetProxy *a2)
{
  uint64_t *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (uint64_t *)((char *)this + 216);
  v9 = (uint64_t *)*((_QWORD *)a2 + 3);
  result = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 27, &v9);
  v6 = *((_QWORD *)this + 27);
  if (v6)
  {
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == result)
      goto LABEL_5;
  }
  else
  {
    if (!result)
      goto LABEL_5;
    v7 = 0;
  }
  if (v7 != result)
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v4, result);
LABEL_5:
  if (*((_QWORD *)this + 5))
  {
    v8 = *((_QWORD *)a2 + 3);
    v9 = &v8;
    return (_QWORD *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRemoteImageBufferSet,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(this, &v9, *((_QWORD *)this + 7));
  }
  return result;
}

void WebKit::RemoteLayerBackingStore::~RemoteLayerBackingStore(WebKit::RemoteLayerBackingStore *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v9;
  void *v10;
  const void *v11;
  char v12;

  *(_QWORD *)this = off_1E34B8980;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 832);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 88);
        if (v6)
          (*(void (**)(uint64_t, WebKit::RemoteLayerBackingStore *))(*(_QWORD *)v6 + 24))(v6, this);
      }
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 27);
  if ((WebKit::RemoteLayerBackingStore *)((char *)this + 232) != v7 && v7 != 0)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v7, a2);
  }
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 200, a2);
  if (*((_BYTE *)this + 176))
  {
    v9 = *((unsigned int *)this + 42);
    if ((_DWORD)v9 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v9]((int)&v12, (WebKit::RemoteLayerBackingStore *)((char *)this + 104));
    *((_DWORD *)this + 42) = -1;
  }
  WebCore::Region::~Region((WebKit::RemoteLayerBackingStore *)((char *)this + 56));
  v11 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
    CFRelease(v11);
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v10);
}

void sub_196CDCAA4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  WTF *v14;
  uint64_t v15;
  void *v16;
  const void *v17;

  v14 = *(WTF **)(v12 + 216);
  if ((WTF *)(v12 + 232) != v14 && v14)
  {
    *(_QWORD *)(v12 + 216) = 0;
    *(_DWORD *)(v12 + 224) = 0;
    WTF::fastFree(v14, a2);
  }
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 + 200, a2);
  if (*(_BYTE *)(v12 + 176))
  {
    v15 = *(unsigned int *)(v12 + 168);
    if ((_DWORD)v15 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v15]((int)&a12, (WTF::MachSendRight *)(v12 + 104));
    *(_DWORD *)(v12 + 168) = -1;
  }
  WebCore::Region::~Region((WebCore::Region *)(v12 + 56));
  v17 = *(const void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = 0;
  if (v17)
    CFRelease(v17);
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v12 + 8), v16);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDestroyed(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::RemoteLayerBackingStore>((unsigned int *)this + 6, a2);
  return WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::RemoteLayerBackingStore>((unsigned int *)this + 10, a2);
}

unsigned int *WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::RemoteLayerBackingStore>(unsigned int *result, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = result;
  v4 = result[3];
  v5 = result[2] + 1;
  result[2] = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v7 = *(unsigned int *)(v6 - 4);
      if (!(_DWORD)v7)
        goto LABEL_20;
      v8 = 0;
      do
      {
        v9 = --v7;
        result = *(unsigned int **)(v6 + 8 * v7);
        if ((unint64_t)result + 1 >= 2 && !*((_QWORD *)result + 1))
        {
          *(_QWORD *)(v6 + 8 * v7) = 0;
          do
          {
            v10 = __ldaxr(result);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, result));
          if (!v11)
          {
            atomic_store(1u, result);
            v20 = v7;
            v21 = v6;
            v19 = v8;
            v22 = v7;
            result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
            v6 = v21;
            v9 = v22;
            v7 = v20;
            v8 = v19;
          }
          *(_QWORD *)(v6 + 8 * v9) = -1;
          ++v8;
        }
      }
      while (v9);
      v6 = *(_QWORD *)v3;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        v17 = *(_QWORD *)v3;
        if (*(_QWORD *)v3)
          v18 = *(_DWORD *)(v17 - 12);
        else
          v18 = 0;
        *(_DWORD *)(v17 - 12) = v18 - v8;
        v6 = *(_QWORD *)v3;
      }
      if (v6)
      {
        v12 = *(_DWORD *)(v6 - 4);
        if (v12 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v12)
        {
          result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)v3);
          v6 = *(_QWORD *)v3;
          v3[2] = 0;
          if (!v6)
            goto LABEL_24;
LABEL_21:
          LODWORD(v6) = *(_DWORD *)(v6 - 12);
          v14 = 0x7FFFFFFF;
          if (v6 >= 0x7FFFFFFF)
            goto LABEL_25;
          goto LABEL_24;
        }
LABEL_20:
        v3[2] = 0;
        goto LABEL_21;
      }
    }
    LODWORD(v6) = 0;
    v3[2] = 0;
LABEL_24:
    v14 = v6;
LABEL_25:
    v3[3] = 2 * v14;
  }
  v15 = a2[1];
  if (v15 && *(_QWORD *)(v15 + 8))
  {
    v23 = a2[1];
    result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)v3, &v23);
    if (*(_QWORD *)v3)
    {
      v16 = *(_QWORD *)v3 + 8 * *(unsigned int *)(*(_QWORD *)v3 - 4);
      if ((unsigned int *)v16 == result)
        return result;
    }
    else
    {
      if (!result)
        return result;
      v16 = 0;
    }
    if ((unsigned int *)v16 != result)
      return (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)v3, (unsigned int **)result);
  }
  return result;
}

void ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke(uint64_t a1, id a2)
{
  Class Class;
  objc_class *v5;
  const char *string;
  const char *v7;
  xpc_object_t value;
  void *v9;
  _QWORD *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  NSObject *v14;
  const _xpc_type_s *v15;
  NSObject *v16;
  id v17;
  NSObject *v19;
  const char *v20;
  xpc_object_t v21;
  const char *v22;
  const char *v23;
  __CFString *v24;
  __CFBundle *BundleWithIdentifier;
  void *FunctionPointerForName;
  xpc_object_t reply;
  _xpc_connection_s *remote_connection;
  int v29;
  WTF::WorkQueue *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  uint32_t v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  uint8_t buf[16];
  _BYTE bufsize[1023];
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a2);
  v5 = (objc_class *)MEMORY[0x1E0C812F8];
  if (Class == (Class)MEMORY[0x1E0C812F8])
  {
    WebKit::handleXPCExitMessage(a2);
    string = xpc_dictionary_get_string(a2, "message-name");
    if (!string)
    {
      v38 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
        return;
      *(_WORD *)bufsize = 0;
      v39 = "XPCServiceEventHandler: 'message-name' is not present in the XPC dictionary";
      goto LABEL_61;
    }
    v7 = string;
    if (!strcmp(string, "bootstrap"))
    {
      if (xpc_dictionary_get_BOOL(a2, "disable-logging"))
      {
        os_trace_set_mode();
      }
      else
      {
        os_trace_set_mode();
        memset(bufsize, 32, sizeof(bufsize));
        v50 = 0;
        v14 = qword_1ECE71C68;
        if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = bufsize;
          _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "Initialized logd %s", buf, 0xCu);
        }
      }
      value = xpc_dictionary_get_value(a2, "OverrideLanguages");
      if (value)
      {
        *(_QWORD *)bufsize = 0;
        *(_QWORD *)&bufsize[8] = 0;
        v9 = (void *)MEMORY[0x19AEB9C30]();
        v10 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
        *v10 = MEMORY[0x1E0C809A0];
        v10[1] = 50331650;
        v10[2] = _ZZN3WTF8BlockPtrIFbmPU24objcproto13OS_xpc_object8NSObjectEE12fromCallableIZZN6WebKit22XPCServiceEventHandlerES3_EUb_E3__0EES5_T_ENUlPvmS3_E_8__invokeESA_mS3_;
        v10[3] = &_ZZN3WTF8BlockPtrIFbmPU24objcproto13OS_xpc_object8NSObjectEE12fromCallableIZZN6WebKit22XPCServiceEventHandlerES3_EUb_E3__0EES5_T_E10descriptor;
        v10[4] = bufsize;
        xpc_array_apply(value, v10);
        _Block_release(v10);
        objc_autoreleasePoolPop(v9);
        if ((_MergedGlobals_60 & 1) != 0)
        {
          if (HIDWORD(qword_1ECE723E8))
          {
            __break(0xC471u);
            JUMPOUT(0x196CDD428);
          }
          v12 = qword_1ECE723E8;
          v13 = qword_1ECE723E0;
        }
        else
        {
          v13 = 0;
          v12 = 0;
          qword_1ECE723E0 = 0;
          qword_1ECE723E8 = 0;
          _MergedGlobals_60 = 1;
        }
        qword_1ECE723E0 = *(_QWORD *)bufsize;
        *(_QWORD *)bufsize = v13;
        qword_1ECE723E8 = *(_QWORD *)&bufsize[8];
        *(_QWORD *)&bufsize[8] = v12;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)bufsize, v11);
      }
      if (os_variant_allows_internal_security_policies() && analytics_send_event_lazyPtr())
      {
        *(_DWORD *)bufsize = 1025;
        if (_NSGetExecutablePath(byte_1ECE723F0, (uint32_t *)bufsize) == -1)
        {
          v46 = byte_1ECE723F0;
          v47 = *(unsigned int *)bufsize;
          v45 = "void register_for_dlsym_callbacks()";
          WTFLogAlways();
        }
        else
        {
          v45 = byte_1ECE723F0;
          WTFLogAlways();
          _dyld_register_dlsym_notifier();
        }
      }
      v21 = xpc_dictionary_get_value(a2, "ContainerEnvironmentVariables");
      xpc_dictionary_apply(v21, &__block_literal_global_26_1);
      v22 = xpc_dictionary_get_string(a2, "service-name");
      v23 = v22;
      if (v22)
      {
        if (!strncmp(v22, "com.apple.WebKit.WebContent", 0x1BuLL))
        {
          v24 = CFSTR("WebContentServiceInitializer");
          goto LABEL_39;
        }
        if (!strcmp(v23, "com.apple.WebKit.Networking"))
        {
          v24 = CFSTR("NetworkServiceInitializer");
          goto LABEL_39;
        }
        if (!strcmp(v23, "com.apple.WebKit.GPU"))
        {
          v24 = CFSTR("GPUServiceInitializer");
          goto LABEL_39;
        }
        if (!strcmp(v23, "com.apple.WebKit.Model"))
        {
          v24 = CFSTR("ModelServiceInitializer");
LABEL_39:
          BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebKit"));
          FunctionPointerForName = CFBundleGetFunctionPointerForName(BundleWithIdentifier, v24);
          if (FunctionPointerForName)
          {
            reply = xpc_dictionary_create_reply(a2);
            xpc_dictionary_set_string(reply, "message-name", "process-finished-launching");
            remote_connection = xpc_dictionary_get_remote_connection(a2);
            xpc_connection_send_message(remote_connection, reply);
            v29 = xpc_dictionary_dup_fd(a2, "stdout");
            if (v29 != -1)
              dup2(v29, 1);
            v30 = (WTF::WorkQueue *)xpc_dictionary_dup_fd(a2, "stderr");
            if ((_DWORD)v30 != -1)
              v30 = (WTF::WorkQueue *)dup2((int)v30, 2);
            v31 = WTF::WorkQueue::main(v30);
            *(_QWORD *)bufsize = FunctionPointerForName;
            *(_QWORD *)&bufsize[8] = a2;
            if (a2)
              v32 = a2;
            v33 = *(void **)(a1 + 32);
            *(_QWORD *)&bufsize[16] = v33;
            if (v33)
              v34 = v33;
            v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *v35 = &off_1E34B8B10;
            v35[1] = FunctionPointerForName;
            *(_QWORD *)&bufsize[8] = 0;
            v35[2] = a2;
            v35[3] = v33;
            if (v33)
              v36 = v33;
            *(_QWORD *)buf = v35;
            (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v31 + 24))(v31, buf);
            v37 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v37)
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
            if (v33)

            if (reply)
          }
          else
          {
            v42 = off_1ECE71C40;
            if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
            {
              v44 = -[__CFString UTF8String](v24, "UTF8String");
              *(_DWORD *)bufsize = 136315138;
              *(_QWORD *)&bufsize[4] = v44;
              _os_log_fault_impl(&dword_196BCC000, v42, OS_LOG_TYPE_FAULT, "Exiting: Unable to find entry point in WebKit.framework with name: %s", bufsize, 0xCu);
            }
            objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E58], "mainRunLoop", v45, v46, v47), "performBlock:", &__block_literal_global_42);
          }
          return;
        }
        v43 = off_1ECE71C40;
        if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
          return;
        *(_DWORD *)bufsize = 136446210;
        *(_QWORD *)&bufsize[4] = v23;
        v39 = "XPCServiceEventHandler: Unexpected 'service-name': %{public}s";
        v40 = v43;
        v41 = 12;
LABEL_62:
        _os_log_error_impl(&dword_196BCC000, v40, OS_LOG_TYPE_ERROR, v39, bufsize, v41);
        return;
      }
      v38 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
        return;
      *(_WORD *)bufsize = 0;
      v39 = "XPCServiceEventHandler: 'service-name' is not present in the XPC dictionary";
LABEL_61:
      v40 = v38;
      v41 = 2;
      goto LABEL_62;
    }
    if (object_getClass(a2) != v5)
    {
      __break(0xC471u);
      JUMPOUT(0x196CDD448);
    }
    if (!strcmp(v7, "xpc-endpoint-launch-services-database-message"))
      WebKit::handleLaunchServiceDatabaseMessage(a2);
  }
  else
  {
    v15 = Class;
    v16 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)bufsize = 136446210;
      *(_QWORD *)&bufsize[4] = xpc_type_get_name(v15);
      _os_log_error_impl(&dword_196BCC000, v16, OS_LOG_TYPE_ERROR, "XPCServiceEventHandler: Received unexpected XPC event type: %{public}s", bufsize, 0xCu);
    }
    if (v15 == (const _xpc_type_s *)MEMORY[0x1E0C81310])
    {
      v17 = (id)MEMORY[0x1E0C81260];
      if (a2 == (id)MEMORY[0x1E0C81260] || a2 == (id)MEMORY[0x1E0C81288])
      {
        v19 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          v20 = "XPC_ERROR_TERMINATION_IMMINENT";
          if (a2 == v17)
            v20 = "XPC_ERROR_CONNECTION_INVALID";
          *(_DWORD *)bufsize = 136446210;
          *(_QWORD *)&bufsize[4] = v20;
          _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "Exiting: Received XPC event type: %{public}s", bufsize, 0xCu);
        }
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E58], "mainRunLoop"), "performBlock:", &__block_literal_global_16);
      }
    }
  }
}

void sub_196CDD470(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  WTF *v15;
  void *v16;
  WTF *v17;
  WTF *v19;
  void *v20;

  v17 = v15;
  v19 = v17;
  v20 = (void *)*((_QWORD *)v17 + 2);
  if (v20)

  WTF::fastFree(v19, a2);
  _ZZZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObjectEUb_EN3__1D1Ev((uint64_t)&a15);
  if (v16)

  _Unwind_Resume(a1);
}

uint64_t _ZZZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObjectEUb_EN3__1D1Ev(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 16);
  if (v2)

  v3 = *(void **)(a1 + 8);
  if (v3)

  return a1;
}

unsigned int *WebKit::NetworkCache::Cache::open@<X0>(WTF::FileSystemImpl *this@<X1>, uint64_t a2@<X0>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unsigned int *result;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;

  result = (unsigned int *)WTF::FileSystemImpl::makeAllDirectories(this, this);
  if ((result & 1) != 0
    && (v11 = WebKit::NetworkCache::computeCapacity(*(unsigned __int8 *)(a2 + 137), this),
        result = (unsigned int *)WebKit::NetworkCache::Storage::open((WTF::StringImpl **)this, (const WTF::String *)(a3 & 1), v11, (uint64_t *)&v14), v14))
  {
    v12 = WTF::fastMalloc((WTF *)0x50);
    v13 = v14;
    v14 = 0;
    *a5 = WebKit::NetworkCache::Cache::Cache(v12, a2, (_DWORD **)this, (uint64_t *)&v13, a3, a4);
    if (v13)
      WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v13);
    result = v14;
    v14 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(result);
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

uint64_t WebKit::calculateURLCacheDiskCapacity(int a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = 0x40000000;
  v3 = a2 >> 14;
  v4 = 524288000;
  v5 = a2 >> 13;
  v6 = 262144000;
  v7 = 209715200;
  v8 = 104857600;
  if (a2 > 0x3FF)
    v8 = 157286400;
  if (a2 <= 0x7FF)
    v7 = v8;
  if (a2 <= 0xFFF)
    v6 = v7;
  if (!v5)
    v4 = v6;
  if (!v3)
    v2 = v4;
  v9 = 20971520;
  if (a2 > 0xFFF)
    v9 = 31457280;
  if (v5)
    v10 = 41943040;
  else
    v10 = v9;
  if (v3)
    v11 = 78643200;
  else
    v11 = v10;
  if (a1 != 1)
    v11 = 0;
  if (a1 == 2)
    return v2;
  else
    return v11;
}

uint64_t WebKit::NetworkCache::computeCapacity(int a1, WTF::FileSystemImpl *this)
{
  unint64_t v3;
  char v4;

  v3 = WTF::FileSystemImpl::volumeFreeSpace(this, this);
  if (v4)
    return WebKit::calculateURLCacheDiskCapacity(a1, ((v3 >> 13) * (unsigned __int128)0x20C49BA5E353F7DuLL) >> 64);
  else
    return 0;
}

uint64_t WebKit::NetworkCache::Storage::open@<X0>(WTF::StringImpl **a1@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v5;
  WTF::StringImpl *v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  int AllDirectories;
  WTF::StringImpl *v11;
  const WTF::String *v12;
  uint64_t Salt;
  char v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v5 = (int)a2;
  v7 = *a1;
  if (*a1)
    *(_DWORD *)v7 += 2;
  v19 = v7;
  WebKit::NetworkCache::makeVersionedDirectoryPath((WebKit::NetworkCache *)&v19, a2);
  AllDirectories = WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v18, v8);
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (!AllDirectories)
    goto LABEL_19;
  WebKit::NetworkCache::makeSaltFilePath((WebKit::NetworkCache *)&v18, (const WTF::String *)&v19);
  Salt = WTF::FileSystemImpl::readOrMakeSalt((WTF::FileSystemImpl *)&v18, v12);
  v14 = (char)v9;
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v9);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v14)
  {
    v16 = WTF::fastMalloc((WTF *)0x170);
    result = WebKit::NetworkCache::Storage::Storage(v16, (WTF::String *)&v19, v5, Salt, a3);
  }
  else
  {
LABEL_19:
    result = 0;
  }
  *a4 = result;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, v9);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::makeSaltFilePath(WebKit::NetworkCache *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WebKit::NetworkCache::makeVersionedDirectoryPath(a2, a2);
  WTF::FileSystemImpl::pathByAppendingComponent();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::makeVersionedDirectoryPath(WebKit::NetworkCache *this, const WTF::String *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6[2];

  v6[0] = (uint64_t)"Version ";
  v6[1] = 9;
  v5 = 17;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>(v6, &v5, &v4);
  if (v4)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::Storage(uint64_t a1, WTF::String *a2, int a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;

  *(_DWORD *)a1 = 1;
  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v10 += 2;
  *(_QWORD *)(a1 + 8) = v10;
  WebKit::NetworkCache::makeRecordsDirectoryPath((WebKit::NetworkCache *)(a1 + 16), a2);
  *(_DWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  WebCore::Timer::Timer<WebKit::NetworkCache::Storage,WebKit::NetworkCache::Storage>((WebCore::TimerBase *)(a1 + 152), a1, (uint64_t)WebKit::NetworkCache::Storage::cancelAllReadOperations, 0);
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  WebCore::Timer::Timer<WebKit::NetworkCache::Storage,WebKit::NetworkCache::Storage>((WebCore::TimerBase *)(a1 + 248), a1, (uint64_t)WebKit::NetworkCache::Storage::dispatchPendingWriteOperations, 0);
  *(_QWORD *)(a1 + 304) = 0;
  WTF::ConcurrentWorkQueue::create();
  WTF::ConcurrentWorkQueue::create();
  WTF::WorkQueue::create();
  WebKit::NetworkCache::makeBlobDirectoryPath((WebKit::NetworkCache *)&v14, a2);
  WebKit::NetworkCache::BlobStorage::BlobStorage((_QWORD *)(a1 + 336), (_DWORD **)&v14, *(_QWORD *)(a1 + 28));
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(a1 + 360) = 0x3FF0000000000000;
  WebKit::NetworkCache::Storage::deleteOldVersions((WebKit::NetworkCache::Storage *)a1);
  WebKit::NetworkCache::Storage::synchronize(a1);
  return a1;
}

WTF::StringImpl *WebKit::NetworkCache::makeRecordsDirectoryPath(WebKit::NetworkCache *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WebKit::NetworkCache::makeVersionedDirectoryPath(a2, a2);
  WTF::FileSystemImpl::pathByAppendingComponent();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::makeBlobDirectoryPath(WebKit::NetworkCache *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WebKit::NetworkCache::makeVersionedDirectoryPath(a2, a2);
  WTF::FileSystemImpl::pathByAppendingComponent();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::deleteOldVersions(WebKit::NetworkCache::Storage *this)
{
  _QWORD *v1;
  WTF::StringImpl *v3;
  _QWORD *v4;

  WTF::String::isolatedCopy();
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = &off_1E34C4F58;
  v4 = v1;
  v1[1] = v3;
  WTF::ConcurrentWorkQueue::dispatch();
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return 0;
}

uint64_t WebKit::NetworkCache::Storage::synchronize(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;

  if (!*(_BYTE *)(this + 80))
  {
    v1 = this;
    if (!*(_BYTE *)(this + 81))
    {
      *(_BYTE *)(this + 80) = 1;
      do
        v2 = __ldaxr((unsigned int *)this);
      while (__stlxr(v2 + 1, (unsigned int *)this));
      v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v3 = &off_1E34C4AF8;
      v3[1] = v1;
      v3[2] = v1;
      v4 = (uint64_t)v3;
      WTF::ConcurrentWorkQueue::dispatch();
      this = v4;
      if (v4)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return this;
}

_QWORD *WebKit::NetworkCache::BlobStorage::BlobStorage(_QWORD *result, _DWORD **a2, uint64_t a3)
{
  _DWORD *v3;

  v3 = *a2;
  if (*a2)
    *v3 += 2;
  *result = v3;
  result[1] = a3;
  result[2] = 0;
  return result;
}

CFTypeRef __copy_helper_block_e8_32c89_ZTSKZ76__WKUserDefaults__notifyObserversOfChangeFromValuesForKeys_toValuesForKeys__E3__1(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  const void *v5;
  CFTypeRef result;

  v4 = (const void *)a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4)
    CFRetain(v4);
  v5 = (const void *)a2[6];
  a1[6] = v5;
  if (v5)
    CFRetain(v5);
  result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_196CDDDD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;

  v3 = *(const void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::RemoteResourceCacheProxy::finalizeRenderingUpdateForFonts(uint64_t *this, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  void **v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  WebKit::RemoteRenderingBackendProxy *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t *v42;

  v2 = this;
  v3 = this + 4;
  v4 = this[4];
  if (v4)
    v5 = *(_DWORD *)(v4 - 12);
  else
    v5 = 0;
  v6 = *((_DWORD *)this + 12);
  if (v6 > v5)
  {
    __break(0xC471u);
    JUMPOUT(0x196CDE074);
  }
  if (v5 == v6)
    goto LABEL_5;
  v41 = 0;
  if (v4)
  {
    v11 = *(unsigned int *)(v4 - 4);
    v12 = (uint64_t *)(v4 + 16 * v11);
    if (*(_DWORD *)(v4 - 12))
    {
      v13 = (uint64_t *)v4;
      if ((_DWORD)v11)
      {
        v14 = 16 * v11;
        v13 = (uint64_t *)v4;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          v13 += 2;
          v14 -= 16;
          if (!v14)
          {
            v13 = v12;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    v13 = (uint64_t *)(v4 + 16 * v11);
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  v12 = (uint64_t *)(v4 + 16 * v11);
LABEL_21:
  if (v4)
    v15 = (uint64_t *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v15 = 0;
  if (v15 != v13)
  {
    v16 = this[8];
    do
    {
      if ((unint64_t)(v16 - v13[1]) >= 4)
      {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add(v40, &v41, v13);
        this = (uint64_t *)v2[7];
        v40[0] = *v13;
        if (this[5])
        {
          v42 = v40;
          this = (uint64_t *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRenderingResource,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((WebKit::RemoteRenderingBackendProxy *)this, &v42, this[7]);
        }
      }
      v17 = v13 + 2;
      v13 = v12;
      if (v17 != v12)
      {
        v13 = v17;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          v13 += 2;
          if (v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
    }
    while (v13 != v15);
    v4 = *v3;
  }
  if (v4)
  {
    v18 = *(_DWORD *)(v4 - 4);
    v19 = v41;
    if (v18)
    {
      v20 = 0;
      v21 = v18 - 1;
      do
      {
        v22 = (void **)(v4 + 16 * v21);
        a2 = *v22;
        if ((unint64_t)*v22 + 1 >= 2)
        {
          this = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v19, (uint64_t)a2);
          if ((_DWORD)this)
          {
            *v22 = (void *)-1;
            ++v20;
          }
        }
      }
      while ((unint64_t)v21--);
      v24 = *v3;
      if (v20)
      {
        *(_DWORD *)(v24 - 16) += v20;
        v25 = *v3;
        if (*v3)
          v26 = *(_DWORD *)(v25 - 12);
        else
          v26 = 0;
        *(_DWORD *)(v25 - 12) = v26 - v20;
        v24 = *v3;
      }
      if (v24)
      {
        v27 = *(_DWORD *)(v24 - 4);
        v28 = 6 * *(_DWORD *)(v24 - 12);
        if (v27 >= 9 && v28 < v27)
          this = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::shrinkToBestSize(v3);
      }
    }
  }
  else
  {
    v19 = v41;
  }
  if (v19)
    this = (uint64_t *)WTF::fastFree((WTF *)(v19 - 16), a2);
LABEL_5:
  v7 = v2 + 5;
  v8 = (_QWORD *)v2[5];
  if (v8)
    v9 = *((_DWORD *)v8 - 3);
  else
    v9 = 0;
  v10 = *((_DWORD *)v2 + 13);
  if (v10 > v9)
  {
    __break(0xC471u);
    JUMPOUT(0x196CDE094);
  }
  if (v9 != v10)
  {
    v41 = 0;
    v30 = v2[8];
    v31 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(v8);
    v32 = v31;
    v33 = v8;
    v35 = v34;
    if (v33)
      v36 = &v33[2 * *((unsigned int *)v33 - 1)];
    else
      v36 = 0;
    if (v36 == v31)
    {
      return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::removeIf<WebKit::RemoteResourceCacheProxy::finalizeRenderingUpdateForFonts(void)::$_1>(v2 + 5, &v41);
    }
    else
    {
      do
      {
        if ((unint64_t)(v30 - v32[1]) >= 4)
        {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add(v40, &v41, v32);
          v37 = (WebKit::RemoteRenderingBackendProxy *)v2[7];
          v40[0] = *v32;
          if (*((_QWORD *)v37 + 5))
          {
            v42 = v40;
            WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRenderingResource,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v37, &v42, *((_QWORD *)v37 + 7));
          }
        }
        while (1)
        {
          v32 += 2;
          if (v32 == v35)
            break;
          if ((unint64_t)(*v32 + 1) > 1)
            goto LABEL_65;
        }
        v32 = v35;
LABEL_65:
        ;
      }
      while (v32 != v36);
      v38 = v41;
      this = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::removeIf<WebKit::RemoteResourceCacheProxy::finalizeRenderingUpdateForFonts(void)::$_1>(v7, &v41);
      if (v38)
        return (uint64_t *)WTF::fastFree((WTF *)(v38 - 16), v39);
    }
  }
  return this;
}

BOOL WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(SEL *this)
{
  int v1;
  unint64_t v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  _BOOL4 isMetaClass;
  uint64_t v8;
  NSString *v10;
  NSString *v11;
  char v12;
  char **v13;
  char *v14;

  v1 = *((unsigned __int8 *)this + 24);
  if (*((_BYTE *)this + 24))
  {
    v3 = atomic_load(&qword_1ECE721E8);
    if (v3 != -1)
    {
      v14 = &v12;
      v13 = &v14;
      std::__call_once(&qword_1ECE721E8, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::shouldThrowExceptionForDuplicateCompletionHandlerCall(void)::$_0 &&>>);
    }
    if (byte_1ECE721C4)
    {
      v4 = WebKit::CompletionHandlerCallChecker::classImplementingDelegateMethod((WebKit::CompletionHandlerCallChecker *)this);
      v5 = (void *)MEMORY[0x1E0C99DA0];
      v6 = *MEMORY[0x1E0C99768];
      isMetaClass = class_isMetaClass(v4);
      v10 = NSStringFromClass(v4);
      v11 = NSStringFromSelector(this[2]);
      v8 = 45;
      if (isMetaClass)
        v8 = 43;
      objc_msgSend(v5, "raise:format:", v6, CFSTR("Completion handler passed to %c[%@ %@] was called more than once"), v8, v10, v11);
    }
  }
  return v1 != 0;
}

unint64_t WebKit::toAuthenticationChallengeDisposition(unint64_t this, NSURLSessionAuthChallengeDisposition a2)
{
  if (this >= 4)
    LOBYTE(this) = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Invalid NSURLSessionAuthChallengeDisposition (%ld)"), this);
  return this;
}

uint64_t WebKit::isUnsupportedWebExtensionNavigation(_QWORD *a1, CFTypeRef **this)
{
  uint64_t v4;
  StringImpl *m_ptr;
  uint64_t v6;
  CFTypeRef *v7;
  const WTF::URL *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  const URL *v11;
  char v12;
  CFTypeRef *v13;
  char *v14;
  StringImpl *v15;
  URL v17;
  WTF *v18;

  v4 = a1[3];
  if (v4 && !*(_BYTE *)(v4 + 16))
    return 0;
  WebKit::WebPageProxy::cocoaView((WebKit::WebPageProxy *)this, &v17);
  m_ptr = v17.m_string.m_impl.m_ptr;
  v6 = -[StringImpl _requiredWebExtensionBaseURL](v17.m_string.m_impl.m_ptr, "_requiredWebExtensionBaseURL");
  if (m_ptr)
    CFRelease(m_ptr);
  if (v6)
  {
    v7 = this[30];
    if (v7)
    {
LABEL_7:
      CFRetain(v7[1]);
      v8 = (const WTF::URL *)(a1 + 30);
      if (!a1[30])
        v8 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 5));
      WebKit::WebExtensionController::extensionContext((WebKit::WebExtensionController *)v7, v8, &v18);
      v9 = v18;
      if (!v18)
        goto LABEL_23;
      MEMORY[0x19AEABB18](&v17, v6);
      v12 = (*((_BYTE *)&v17 + 8) & 1) != 0 ? WTF::protocolHostAndPortAreEqual((WTF *)((char *)v9 + 72), &v17, v11) : 0;
      v15 = v17.m_string.m_impl.m_ptr;
      v17.m_string.m_impl.m_ptr = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v15, v10);
        else
          *(_DWORD *)v15 -= 2;
      }
      CFRelease(*((CFTypeRef *)v9 + 1));
      if ((v12 & 1) != 0)
        v6 = 0;
      else
LABEL_23:
        v6 = 1;
      CFRelease(v7[1]);
      return v6;
    }
    v13 = this[31];
    if (v13)
    {
      v14 = (char *)v13[1];
      if (v14)
      {
        v7 = (CFTypeRef *)(v14 - 16);
        goto LABEL_7;
      }
    }
    return 0;
  }
  return v6;
}

void sub_196CDE410(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  uint64_t v9;
  uint64_t v10;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
  CFRelease(*(CFTypeRef *)(v9 + 8));
  _Unwind_Resume(a1);
}

void sub_196CDEC70(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_196CDEE94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::insertionPointColorDidChange(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::Color *v11;

  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 26);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 1136))(&v10, v3);
  v11 = (WebCore::Color *)&v10;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetInsertionPointColor>(v4, &v11, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
  if ((v10 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
}

void sub_196CDF188(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::isMarketplaceKitURL(WebKit *this, const WTF::URL *a2)
{
  if ((WTF::URL::protocolIs() & 1) != 0)
    return 1;
  else
    return WTF::URL::protocolIs();
}

void WebKit::WebFramePolicyListenerProxy::use(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v3 = a3;
  if (*(_BYTE *)(a1 + 48) && *(_BYTE *)(a1 + 58) && *(_BYTE *)(a1 + 60))
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
    {
      v6 = *(unsigned __int16 *)(a1 + 56);
      *(_QWORD *)(a1 + 64) = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0, a2, a3, a1 + 40, v6, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else if (!*(_BYTE *)(a1 + 32))
  {
    v7 = (uint64_t *)(a1 + 16);
    if (a2)
      CFRetain(*(CFTypeRef *)(a2 + 8));
    v9 = a2;
    v10 = v3;
    v11 = 1;
    std::__optional_storage_base<std::pair<WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>>,WebKit::ProcessSwapRequestedByClient>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::pair<WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>>,WebKit::ProcessSwapRequestedByClient>,false>>(v7, &v9);
    if (v11)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
}

WebKit::SOAuthorizationCoordinator *WebKit::WebsiteDataStore::soAuthorizationCoordinator(WebKit::WebsiteDataStore *this, const WebKit::WebPageProxy *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  WebKit::SOAuthorizationCoordinator *result;
  char *v6;
  WebKit::SOAuthorizationCoordinator *v7;
  WTF *v8;

  v4 = *((_QWORD *)a2 + 28);
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, a3) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196CDF67CLL);
  }
  result = (WebKit::SOAuthorizationCoordinator *)*((_QWORD *)this + 52);
  if (!result)
  {
    v6 = (char *)this + 416;
    v7 = (WebKit::SOAuthorizationCoordinator *)WTF::fastMalloc((WTF *)0x10);
    result = WebKit::SOAuthorizationCoordinator::SOAuthorizationCoordinator(v7);
    v8 = *(WTF **)v6;
    *(_QWORD *)v6 = result;
    if (v8)
    {
      std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v6, v8);
      return *(WebKit::SOAuthorizationCoordinator **)v6;
    }
  }
  return result;
}

WebKit::SOAuthorizationCoordinator *WebKit::SOAuthorizationCoordinator::SOAuthorizationCoordinator(WebKit::SOAuthorizationCoordinator *this)
{
  WKSOAuthorizationDelegate *v2;
  const void *v3;

  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 8) = ((uint64_t (*)(void))*MEMORY[0x1E0DCDFF8])() != 0;
  v2 = objc_alloc_init(WKSOAuthorizationDelegate);
  v3 = *(const void **)this;
  *(_QWORD *)this = v2;
  if (v3)
    CFRelease(v3);
  objc_msgSend(MEMORY[0x1E0C92C98], "_disableAppSSO");
  return this;
}

void sub_196CDF71C(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::GPUProcessConnection::didInitialize(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  _BOOL8 v5;
  WebKit::WebProcess *v6;
  WebKit::LibWebRTCCodecs *v7;
  WebKit::WebProcess *v8;
  WebKit::LibWebRTCCodecs *v9;
  uint64_t result;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2[40])
  {
    *(_BYTE *)(a1 + 56) = 1;
    v4 = qword_1ECE71C68;
    v5 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      v12 = 134217984;
      v13 = a1;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessConnection::didInitialize", (uint8_t *)&v12, 0xCu);
    }
    v6 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v5);
    v7 = WebKit::WebProcess::libWebRTCCodecs(v6);
    if (!a2[40]
      || (*((_BYTE *)v7 + 130) = a2[36],
          v8 = WebKit::WebProcess::singleton(v7),
          v9 = WebKit::WebProcess::libWebRTCCodecs(v8),
          !a2[40]))
    {
      __break(1u);
    }
    return WebKit::LibWebRTCCodecs::setHasAV1HardwareDecoder((uint64_t)v9, a2[37]);
  }
  else
  {
    v11 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      v12 = 134217984;
      v13 = a1;
      _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "%p - GPUProcessConnection::didInitialize - failed", (uint8_t *)&v12, 0xCu);
    }
    result = IPC::Connection::invalidate(*(_QWORD *)(a1 + 24));
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

WebKit::LibWebRTCCodecs *WebKit::WebProcess::libWebRTCCodecs(WebKit::WebProcess *this)
{
  WebKit::LibWebRTCCodecs *result;
  WebKit::LibWebRTCCodecs *v3;
  void *v4;
  uint64_t v5;

  result = (WebKit::LibWebRTCCodecs *)*((_QWORD *)this + 43);
  if (!result)
  {
    v3 = (WebKit::LibWebRTCCodecs *)WTF::fastMalloc((WTF *)0x90);
    result = WebKit::LibWebRTCCodecs::LibWebRTCCodecs(v3);
    v5 = *((_QWORD *)this + 43);
    *((_QWORD *)this + 43) = result;
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
      return (WebKit::LibWebRTCCodecs *)*((_QWORD *)this + 43);
    }
  }
  return result;
}

WebKit::LibWebRTCCodecs *WebKit::LibWebRTCCodecs::LibWebRTCCodecs(WebKit::LibWebRTCCodecs *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34B0558;
  *((_QWORD *)this + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v2 + 24) = this;
  *(_QWORD *)this = off_1E34E8760;
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 3) = &unk_1E34E87B8;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  WTF::WorkQueue::create();
  *((_BYTE *)this + 136) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return this;
}

uint64_t WebKit::NetworkProcess::NetworkProcess(uint64_t a1, const WebKit::AuxiliaryProcessInitializationParameters *a2)
{
  WebKit::AuxiliaryProcess *v4;
  _QWORD *v5;
  _QWORD *v6;
  WebCore::PlatformStrategies *v7;
  WebKit::NetworkProcess *v8;
  WebCore::NetworkStateNotifier *v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = WebKit::AuxiliaryProcess::AuxiliaryProcess((WebKit::AuxiliaryProcess *)a1);
  *((_QWORD *)v4 + 15) = 1;
  *(_QWORD *)v4 = off_1E34BDD38;
  *((_QWORD *)v4 + 2) = &unk_1E34BDE60;
  *((_QWORD *)v4 + 14) = &unk_1E34BDEB0;
  *((_QWORD *)v4 + 18) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 135) = 0;
  WebKit::DownloadManager::DownloadManager((uint64_t)v4 + 152, (uint64_t)v4 + 112);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  WebKit::NetworkContentRuleListManager::NetworkContentRuleListManager((WebKit::NetworkContentRuleListManager *)(a1 + 240), (WebKit::NetworkProcess *)a1);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34BE198;
  v5[1] = a1;
  v15 = v5;
  WebKit::WebSQLiteDatabaseTracker::WebSQLiteDatabaseTracker(a1 + 264, &v15);
  v6 = v15;
  v15 = 0;
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  WebCore::MessagePortChannelRegistry::MessagePortChannelRegistry((WebCore::MessagePortChannelRegistry *)(a1 + 336));
  *(_QWORD *)(a1 + 360) = 0x4051800000000000;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 1;
  *(_DWORD *)(a1 + 393) = 0;
  *(_DWORD *)(a1 + 400) = -1;
  *(_BYTE *)(a1 + 404) = 0;
  if ((_MergedGlobals_65 & 1) == 0)
  {
    unk_1ECE72920 = 0u;
    unk_1ECE72910 = 0u;
    unk_1ECE72900 = 0u;
    qword_1ECE728F8[0] = (uint64_t)&off_1E34BDF30;
    _MergedGlobals_65 = 1;
  }
  WebCore::setPlatformStrategies((WebCore *)qword_1ECE728F8, v7);
  WebKit::NetworkProcess::addSupplement<WebKit::AuthenticationManager>((WebKit::NetworkProcess *)a1);
  WebKit::NetworkProcess::addSupplement<WebKit::WebCookieManager>((WebKit::NetworkProcess *)a1);
  WebKit::NetworkProcess::addSupplement<WebKit::LegacyCustomProtocolManager>((WebKit::NetworkProcess *)a1);
  WebKit::NetworkProcess::addSupplement<WebKit::LaunchServicesDatabaseObserver>((WebKit::LaunchServicesDatabaseObserver *)a1);
  v9 = (WebCore::NetworkStateNotifier *)WebKit::LegacyCustomProtocolManager::networkProcessCreated((WebKit::LegacyCustomProtocolManager *)a1, v8);
  WebCore::NetworkStateNotifier::singleton(v9);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v10 = *(unsigned int **)(a1 + 8);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34BE1C0;
  v12[1] = v10;
  v15 = v12;
  WebCore::NetworkStateNotifier::addListener();
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  WebKit::AuxiliaryProcess::initialize((WebKit::AuxiliaryProcess *)a1, a2);
  return a1;
}

WebKit::AuxiliaryProcess *WebKit::AuxiliaryProcess::AuxiliaryProcess(WebKit::AuxiliaryProcess *this)
{
  *(_QWORD *)this = off_1E34B7AD0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &unk_1E34B7B98;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  MEMORY[0x19AEAD930]((char *)this + 56, "Process Suppression Disabled by UIProcess", 42);
  return this;
}

_QWORD *IPC::MessageReceiverMap::MessageReceiverMap(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

WebKit::NetworkContentRuleListManager *WebKit::NetworkContentRuleListManager::NetworkContentRuleListManager(WebKit::NetworkContentRuleListManager *this, WebKit::NetworkProcess *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v4 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 2) = v4;
  return this;
}

uint64_t WebKit::DownloadManager::DownloadManager(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  return a1;
}

WebKit::WebProcess *WebKit::WebProcess::WebProcess(WebKit::WebProcess *this)
{
  WebCore::WheelEventDeltaFilter *v2;
  WebKit::WebLoaderStrategy *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::WebCookieJar *v7;
  uint64_t v8;
  WebCore::PlatformStrategies *v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  const WTF::ASCIILiteral *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  const char **v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  const WTF::ASCIILiteral *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  const char **v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  const WTF::ASCIILiteral *v41;
  char *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  const char **v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  WebKit::UserMediaCaptureManager *v55;
  const WTF::ASCIILiteral *v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  const char **v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  const WTF::ASCIILiteral *v69;
  WebKit::RemoteCDMFactory *v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  const char **v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  const WTF::ASCIILiteral *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  const char **v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  const WTF::ASCIILiteral *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  void *v101;
  unsigned int v102;
  const char **v103;
  const char *v104;
  Gigacage *v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  unsigned int *v116;
  unsigned int *v117;
  const char **v119;
  int v120;
  const char *v121;
  const char **v122;
  int v123;
  WTF *v124;
  void *v125;
  const char **v126;
  int v127;
  const char *v128;
  const char **v129;
  int v130;
  WTF *v131;
  void *v132;
  const char **v133;
  int v134;
  const char *v135;
  const char **v136;
  int v137;
  WTF *v138;
  void *v139;
  const char **v140;
  int v141;
  const char **v142;
  int v143;
  const char **v144;
  int v145;
  const char **v146;
  int v147;
  const char **v148;
  int v149;
  const char **v150;
  int v151;
  const char **v152;
  int v153;
  const char **v154;
  int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  _QWORD *v162;
  char *v163[2];
  char v164;
  char *__s2[2];

  *(_QWORD *)this = off_1E34B7AD0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &unk_1E34B7B98;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  MEMORY[0x19AEAD930]((char *)this + 56, "Process Suppression Disabled by UIProcess", 42);
  *(_QWORD *)this = off_1E34DFDF0;
  *((_QWORD *)this + 2) = &unk_1E34DFEB8;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = &off_1E34F1288;
  *((_QWORD *)this + 18) = 0;
  v2 = (WebCore::WheelEventDeltaFilter *)WTF::WorkQueue::create();
  WebCore::WheelEventDeltaFilter::create(v2);
  *((_BYTE *)this + 168) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = &off_1E34F1BC8;
  *((_QWORD *)this + 24) = 0;
  WTF::WorkQueue::create();
  *((_BYTE *)this + 208) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = &off_1E34EAAB0;
  *((_QWORD *)this + 29) = 0;
  WTF::WorkQueue::create();
  *((_WORD *)this + 124) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_DWORD *)this + 63) = 0;
  *(_DWORD *)((char *)this + 255) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_WORD *)this + 140) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_BYTE *)this + 304) = 0;
  v3 = (WebKit::WebLoaderStrategy *)WTF::fastMalloc((WTF *)0x78);
  *((_QWORD *)this + 40) = WebKit::WebLoaderStrategy::WebLoaderStrategy(v3);
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  WebKit::RemoteVideoCodecFactory::RemoteVideoCodecFactory((WebKit::WebProcess *)((char *)this + 352), this);
  *((_QWORD *)this + 45) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E34E0128;
  *(_QWORD *)(v4 + 16) = 0;
  *((_QWORD *)this + 46) = v4;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E34EE550;
  *((_QWORD *)this + 47) = v5;
  WebKit::RemoteMediaPlayerManager::create((_QWORD *)this + 48);
  WebKit::RemoteImageDecoderAVFManager::create((_QWORD *)this + 49);
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E34EE580;
  *(_QWORD *)(v6 + 16) = 0;
  *((_QWORD *)this + 50) = v6;
  v7 = (WebKit::WebCookieJar *)WTF::fastMalloc((WTF *)0x60);
  *((_QWORD *)this + 51) = WebKit::WebCookieJar::WebCookieJar(v7);
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E34E0770;
  *(_QWORD *)(v8 + 8) = this;
  __s2[0] = (char *)v8;
  PAL::HysteresisActivity::HysteresisActivity((uint64_t)this + 440, (uint64_t *)__s2, 5.0);
  v10 = __s2[0];
  __s2[0] = 0;
  if (v10)
    (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 62) = 0;
  *((_BYTE *)this + 504) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_BYTE *)this + 584) = 0;
  *((_WORD *)this + 296) = 0;
  *((_BYTE *)this + 594) = 0;
  *((_DWORD *)this + 149) = 4;
  *((_BYTE *)this + 616) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_WORD *)((char *)this + 617) = 1;
  *((_BYTE *)this + 672) = 0;
  *((_BYTE *)this + 680) = 0;
  *((_BYTE *)this + 744) = 0;
  *((_QWORD *)this + 96) = 0;
  *((_BYTE *)this + 776) = 0;
  *((_DWORD *)this + 160) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_BYTE *)this + 664) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((_QWORD *)this + 88) = 0;
  *((_OWORD *)this + 43) = 0u;
  *((_BYTE *)this + 712) = 0;
  *((_QWORD *)this + 94) = 0;
  *((_DWORD *)this + 190) = 0;
  *((_BYTE *)this + 777) = 1;
  *((_QWORD *)this + 98) = 0;
  *(_DWORD *)((char *)this + 778) = 0;
  *((_OWORD *)this + 50) = 0u;
  {
    unk_1ECE73AD0 = 0uLL;
    unk_1ECE73AC0 = 0uLL;
    unk_1ECE73AB0 = 0uLL;
    WebKit::WebPlatformStrategies::initialize(void)::platformStrategies[0] = (uint64_t)&off_1E34F0180;
    qword_1ECE73AE0 = (uint64_t)&unk_1E34F02E0;
    unk_1ECE73AE8 = &unk_1E34F03F8;
  }
  WebCore::setPlatformStrategies((WebCore *)WebKit::WebPlatformStrategies::initialize(void)::platformStrategies, v9);
  v11 = (uint64_t *)((char *)this + 272);
  v163[0] = "WebGeolocationManager";
  v163[1] = (char *)22;
  v12 = (char *)WTF::fastMalloc((WTF *)0x30);
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 1) = &unk_1E34E9AD8;
  *(_QWORD *)v12 = off_1E34E9A98;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  v13 = (uint64_t *)((char *)this + 40);
  v164 = -89;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)this + 5, &v164, (uint64_t)(v12 + 8), (unsigned int **)__s2);
  v15 = *((_QWORD *)this + 34);
  if (v15
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)this + 34),
        (v15 = *v11) != 0))
  {
    v16 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)v163, v14) & v16;
  v18 = (const char **)(v15 + 24 * v17);
  v19 = *v18;
  if (*v18)
  {
    v140 = 0;
    v141 = 1;
    do
    {
      v142 = v140;
      v140 = v18;
      if (v19 != (const char *)-1)
      {
        if (v163[0])
        {
          v143 = strcmp(v19, v163[0]);
          v140 = v142;
          if (!v143)
          {
LABEL_127:
            (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
            v13 = (uint64_t *)((char *)this + 40);
            goto LABEL_17;
          }
        }
        else
        {
          v140 = v142;
          if (!v19)
            goto LABEL_127;
        }
      }
      v17 = (v17 + v141) & v16;
      v18 = (const char **)(v15 + 24 * v17);
      v19 = *v18;
      ++v141;
    }
    while (*v18);
    v13 = (uint64_t *)((char *)this + 40);
    if (v140)
    {
      *v140 = 0;
      v140[1] = 0;
      v140[2] = 0;
      --*(_DWORD *)(*v11 - 16);
      v18 = v140;
    }
  }
  *(_OWORD *)v18 = *(_OWORD *)v163;
  v20 = v18[2];
  v18[2] = v12;
  if (v20)
    (*(void (**)(const char *))(*(_QWORD *)v20 + 8))(v20);
  v21 = *v11;
  if (*v11)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_17;
LABEL_198:
    WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)this + 34);
    goto LABEL_17;
  }
  if (3 * v26 <= 4 * v25)
    goto LABEL_198;
LABEL_17:
  v163[0] = "WebNotificationManager";
  v163[1] = (char *)23;
  v27 = (char *)WTF::fastMalloc((WTF *)0x28);
  *((_QWORD *)v27 + 1) = &unk_1E34EC2A0;
  *(_QWORD *)v27 = off_1E34EC260;
  *((_QWORD *)v27 + 3) = 0;
  *((_QWORD *)v27 + 4) = 0;
  *((_QWORD *)v27 + 2) = 0;
  v164 = -79;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>(v13, &v164, (uint64_t)(v27 + 8), (unsigned int **)__s2);
  v29 = *v11;
  if (*v11
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)this + 34),
        (v29 = *v11) != 0))
  {
    v30 = *(_DWORD *)(v29 - 8);
  }
  else
  {
    v30 = 0;
  }
  v31 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)v163, v28) & v30;
  v32 = (const char **)(v29 + 24 * v31);
  v33 = *v32;
  if (*v32)
  {
    v144 = 0;
    v145 = 1;
    do
    {
      v146 = v144;
      v144 = v32;
      if (v33 != (const char *)-1)
      {
        if (v163[0])
        {
          v147 = strcmp(v33, v163[0]);
          v144 = v146;
          if (!v147)
          {
LABEL_137:
            (*(void (**)(char *))(*(_QWORD *)v27 + 8))(v27);
            goto LABEL_28;
          }
        }
        else
        {
          v144 = v146;
          if (!v33)
            goto LABEL_137;
        }
      }
      v31 = (v31 + v145) & v30;
      v32 = (const char **)(v29 + 24 * v31);
      v33 = *v32;
      ++v145;
    }
    while (*v32);
    if (v144)
    {
      *v144 = 0;
      v144[1] = 0;
      v144[2] = 0;
      --*(_DWORD *)(*v11 - 16);
      v32 = v144;
    }
  }
  *(_OWORD *)v32 = *(_OWORD *)v163;
  v34 = v32[2];
  v32[2] = v27;
  if (v34)
    (*(void (**)(const char *))(*(_QWORD *)v34 + 8))(v34);
  v35 = *v11;
  if (*v11)
    v36 = *(_DWORD *)(v35 - 12) + 1;
  else
    v36 = 1;
  *(_DWORD *)(v35 - 12) = v36;
  v37 = *v11;
  if (*v11)
    v38 = *(_DWORD *)(v37 - 12);
  else
    v38 = 0;
  v39 = (*(_DWORD *)(v37 - 16) + v38);
  v40 = *(unsigned int *)(v37 - 4);
  if (v40 > 0x400)
  {
    if (v40 > 2 * v39)
      goto LABEL_28;
LABEL_200:
    WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)this + 34);
    goto LABEL_28;
  }
  if (3 * v40 <= 4 * v39)
    goto LABEL_200;
LABEL_28:
  __s2[0] = "WebMediaKeyStorageManager";
  __s2[1] = (char *)26;
  v42 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v42 = off_1E34EAEE8;
  *((_QWORD *)v42 + 1) = 0;
  v43 = *v11;
  if (*v11
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)this + 34),
        (v43 = *v11) != 0))
  {
    v44 = *(_DWORD *)(v43 - 8);
  }
  else
  {
    v44 = 0;
  }
  v45 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)__s2, v41) & v44;
  v46 = (const char **)(v43 + 24 * v45);
  v47 = *v46;
  if (*v46)
  {
    v148 = 0;
    v149 = 1;
    do
    {
      v150 = v148;
      v148 = v46;
      if (v47 != (const char *)-1)
      {
        if (__s2[0])
        {
          v151 = strcmp(v47, __s2[0]);
          v148 = v150;
          if (!v151)
          {
LABEL_147:
            (*(void (**)(char *))(*(_QWORD *)v42 + 8))(v42);
            goto LABEL_39;
          }
        }
        else
        {
          v148 = v150;
          if (!v47)
            goto LABEL_147;
        }
      }
      v45 = (v45 + v149) & v44;
      v46 = (const char **)(v43 + 24 * v45);
      v47 = *v46;
      ++v149;
    }
    while (*v46);
    if (v148)
    {
      *v148 = 0;
      v148[1] = 0;
      v148[2] = 0;
      --*(_DWORD *)(*v11 - 16);
      v46 = v148;
    }
  }
  *(_OWORD *)v46 = *(_OWORD *)__s2;
  v48 = v46[2];
  v46[2] = v42;
  if (v48)
    (*(void (**)(const char *))(*(_QWORD *)v48 + 8))(v48);
  v49 = *v11;
  if (*v11)
    v50 = *(_DWORD *)(v49 - 12) + 1;
  else
    v50 = 1;
  *(_DWORD *)(v49 - 12) = v50;
  v51 = *v11;
  if (*v11)
    v52 = *(_DWORD *)(v51 - 12);
  else
    v52 = 0;
  v53 = (*(_DWORD *)(v51 - 16) + v52);
  v54 = *(unsigned int *)(v51 - 4);
  if (v54 > 0x400)
  {
    if (v54 > 2 * v53)
      goto LABEL_39;
LABEL_202:
    WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)this + 34);
    goto LABEL_39;
  }
  if (3 * v54 <= 4 * v53)
    goto LABEL_202;
LABEL_39:
  __s2[0] = "UserMediaCaptureManager";
  __s2[1] = (char *)24;
  v55 = (WebKit::UserMediaCaptureManager *)WTF::fastMalloc((WTF *)0xE8);
  WebKit::UserMediaCaptureManager::UserMediaCaptureManager(v55, this);
  v57 = *((_QWORD *)this + 34);
  if (v57
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)this + 34),
        (v57 = *v11) != 0))
  {
    v58 = *(_DWORD *)(v57 - 8);
  }
  else
  {
    v58 = 0;
  }
  v59 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)__s2, v56) & v58;
  v60 = (const char **)(v57 + 24 * v59);
  v61 = *v60;
  if (*v60)
  {
    v152 = 0;
    v153 = 1;
    do
    {
      v154 = v152;
      v152 = v60;
      if (v61 != (const char *)-1)
      {
        if (__s2[0])
        {
          v155 = strcmp(v61, __s2[0]);
          v152 = v154;
          if (!v155)
          {
LABEL_157:
            (*(void (**)(WebKit::UserMediaCaptureManager *))(*(_QWORD *)v55 + 8))(v55);
            goto LABEL_50;
          }
        }
        else
        {
          v152 = v154;
          if (!v61)
            goto LABEL_157;
        }
      }
      v59 = (v59 + v153) & v58;
      v60 = (const char **)(v57 + 24 * v59);
      v61 = *v60;
      ++v153;
    }
    while (*v60);
    if (v152)
    {
      *v152 = 0;
      v152[1] = 0;
      v152[2] = 0;
      --*(_DWORD *)(*v11 - 16);
      v60 = v152;
    }
  }
  *(_OWORD *)v60 = *(_OWORD *)__s2;
  v62 = v60[2];
  v60[2] = (const char *)v55;
  if (v62)
    (*(void (**)(const char *))(*(_QWORD *)v62 + 8))(v62);
  v63 = *v11;
  if (*v11)
    v64 = *(_DWORD *)(v63 - 12) + 1;
  else
    v64 = 1;
  *(_DWORD *)(v63 - 12) = v64;
  v65 = *v11;
  if (*v11)
    v66 = *(_DWORD *)(v65 - 12);
  else
    v66 = 0;
  v67 = (*(_DWORD *)(v65 - 16) + v66);
  v68 = *(unsigned int *)(v65 - 4);
  if (v68 > 0x400)
  {
    if (v68 > 2 * v67)
      goto LABEL_50;
LABEL_204:
    WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)this + 34);
    goto LABEL_50;
  }
  if (3 * v68 <= 4 * v67)
    goto LABEL_204;
LABEL_50:
  __s2[0] = "RemoteCDMFactory";
  __s2[1] = (char *)17;
  v70 = (WebKit::RemoteCDMFactory *)WTF::fastMalloc((WTF *)0x28);
  *((_QWORD *)v70 + 1) = &unk_1E34E67C0;
  *(_QWORD *)v70 = off_1E34E6790;
  *((_QWORD *)v70 + 3) = 0;
  *((_QWORD *)v70 + 4) = 0;
  *((_QWORD *)v70 + 2) = 0;
  v71 = *v11;
  if (*v11
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)this + 34),
        (v71 = *v11) != 0))
  {
    v72 = *(_DWORD *)(v71 - 8);
  }
  else
  {
    v72 = 0;
  }
  v73 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)__s2, v69) & v72;
  v74 = (const char **)(v71 + 24 * v73);
  v75 = *v74;
  v162 = (_QWORD *)((char *)this + 272);
  if (*v74)
  {
    v119 = 0;
    v120 = 1;
    v121 = __s2[0];
    do
    {
      v122 = v119;
      v119 = v74;
      if (v75 != (const char *)-1)
      {
        if (v121)
        {
          v123 = strcmp(v75, v121);
          v119 = v122;
          if (!v123)
          {
LABEL_97:
            WebKit::RemoteCDMFactory::~RemoteCDMFactory(v70);
            WTF::fastFree(v124, v125);
            v11 = (uint64_t *)((char *)this + 272);
            goto LABEL_61;
          }
        }
        else
        {
          v119 = v122;
          if (!v75)
            goto LABEL_97;
        }
      }
      v73 = (v73 + v120) & v72;
      v74 = (const char **)(v71 + 24 * v73);
      v75 = *v74;
      ++v120;
    }
    while (*v74);
    v11 = (uint64_t *)((char *)this + 272);
    if (v119)
    {
      *v119 = 0;
      v119[1] = 0;
      v119[2] = 0;
      --*(_DWORD *)(*v162 - 16);
      v74 = v119;
    }
  }
  *(_OWORD *)v74 = *(_OWORD *)__s2;
  v76 = v74[2];
  v74[2] = (char *)v70 + 8;
  if (v76)
    (*(void (**)(const char *))(*(_QWORD *)v76 + 8))(v76);
  v77 = *v11;
  if (*v11)
    v78 = *(_DWORD *)(v77 - 12) + 1;
  else
    v78 = 1;
  *(_DWORD *)(v77 - 12) = v78;
  v79 = *v11;
  if (*v11)
    v80 = *(_DWORD *)(v79 - 12);
  else
    v80 = 0;
  v81 = (*(_DWORD *)(v79 - 16) + v80);
  v82 = *(unsigned int *)(v79 - 4);
  if (v82 > 0x400)
  {
    if (v82 > 2 * v81)
      goto LABEL_61;
LABEL_206:
    WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(v11);
    goto LABEL_61;
  }
  if (3 * v82 <= 4 * v81)
    goto LABEL_206;
LABEL_61:
  __s2[0] = "RemoteLegacyCDMFactory";
  __s2[1] = (char *)23;
  v84 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v84 = off_1E34E69C8;
  *(_QWORD *)(v84 + 8) = 0;
  *(_OWORD *)(v84 + 16) = 0u;
  *(_OWORD *)(v84 + 32) = 0u;
  v85 = *v11;
  if (*v11
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(v11),
        (v85 = *v11) != 0))
  {
    v86 = *(_DWORD *)(v85 - 8);
  }
  else
  {
    v86 = 0;
  }
  v87 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)__s2, v83) & v86;
  v88 = (const char **)(v85 + 24 * v87);
  v89 = *v88;
  if (*v88)
  {
    v126 = 0;
    v127 = 1;
    v128 = __s2[0];
    do
    {
      v129 = v126;
      v126 = v88;
      if (v89 != (const char *)-1)
      {
        if (v128)
        {
          v130 = strcmp(v89, v128);
          v126 = v129;
          if (!v130)
          {
LABEL_105:
            WebKit::RemoteLegacyCDMFactory::~RemoteLegacyCDMFactory((WebKit::RemoteLegacyCDMFactory *)v84);
            WTF::fastFree(v131, v132);
            v11 = (uint64_t *)((char *)this + 272);
            goto LABEL_73;
          }
        }
        else
        {
          v126 = v129;
          if (!v89)
            goto LABEL_105;
        }
      }
      v87 = (v87 + v127) & v86;
      v88 = (const char **)(v85 + 24 * v87);
      v89 = *v88;
      ++v127;
    }
    while (*v88);
    v11 = (uint64_t *)((char *)this + 272);
    if (v126)
    {
      *v126 = 0;
      v126[1] = 0;
      v126[2] = 0;
      --*(_DWORD *)(*v162 - 16);
      v88 = v126;
    }
  }
  *(_OWORD *)v88 = *(_OWORD *)__s2;
  v90 = v88[2];
  v88[2] = (const char *)v84;
  if (v90)
    (*(void (**)(const char *))(*(_QWORD *)v90 + 8))(v90);
  v91 = *v11;
  if (*v11)
    v92 = *(_DWORD *)(v91 - 12) + 1;
  else
    v92 = 1;
  *(_DWORD *)(v91 - 12) = v92;
  v93 = *v11;
  if (*v11)
    v94 = *(_DWORD *)(v93 - 12);
  else
    v94 = 0;
  v95 = (*(_DWORD *)(v93 - 16) + v94);
  v96 = *(unsigned int *)(v93 - 4);
  if (v96 > 0x400)
  {
    if (v96 > 2 * v95)
      goto LABEL_73;
    goto LABEL_72;
  }
  if (3 * v96 <= 4 * v95)
LABEL_72:
    WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(v11);
LABEL_73:
  __s2[0] = "RemoteMediaEngineConfigurationFactory";
  __s2[1] = (char *)38;
  v98 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v98 = off_1E34E6D88;
  *(_QWORD *)(v98 + 8) = 0;
  v99 = *v11;
  if (*v11
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(v11),
        (v99 = *v11) != 0))
  {
    v100 = *(_DWORD *)(v99 - 8);
  }
  else
  {
    v100 = 0;
  }
  v102 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)__s2, v97) & v100;
  v103 = (const char **)(v99 + 24 * v102);
  v104 = *v103;
  if (*v103)
  {
    v133 = 0;
    v134 = 1;
    v135 = __s2[0];
    do
    {
      v136 = v133;
      v133 = v103;
      if (v104 != (const char *)-1)
      {
        if (v135)
        {
          v137 = strcmp(v104, v135);
          v133 = v136;
          if (!v137)
          {
LABEL_113:
            WebKit::RemoteMediaEngineConfigurationFactory::~RemoteMediaEngineConfigurationFactory((unsigned int **)v98, v101);
            v105 = (Gigacage *)WTF::fastFree(v138, v139);
            v106 = (uint64_t *)((char *)this + 40);
            goto LABEL_84;
          }
        }
        else
        {
          v133 = v136;
          if (!v104)
            goto LABEL_113;
        }
      }
      v102 = (v102 + v134) & v100;
      v103 = (const char **)(v99 + 24 * v102);
      v104 = *v103;
      ++v134;
    }
    while (*v103);
    v11 = (uint64_t *)((char *)this + 272);
    if (v133)
    {
      *v133 = 0;
      v133[1] = 0;
      v133[2] = 0;
      --*(_DWORD *)(*v162 - 16);
      v103 = v133;
    }
  }
  *(_OWORD *)v103 = *(_OWORD *)__s2;
  v105 = (Gigacage *)v103[2];
  v103[2] = (const char *)v98;
  v106 = (uint64_t *)((char *)this + 40);
  if (v105)
    v105 = (Gigacage *)(*(uint64_t (**)(Gigacage *))(*(_QWORD *)v105 + 8))(v105);
  v107 = *v11;
  if (*v11)
    v108 = *(_DWORD *)(v107 - 12) + 1;
  else
    v108 = 1;
  *(_DWORD *)(v107 - 12) = v108;
  v109 = *v11;
  if (*v11)
    v110 = *(_DWORD *)(v109 - 12);
  else
    v110 = 0;
  v111 = (*(_DWORD *)(v109 - 16) + v110);
  v112 = *(unsigned int *)(v109 - 4);
  if (v112 > 0x400)
  {
    if (v112 > 2 * v111)
      goto LABEL_84;
  }
  else if (3 * v112 > 4 * v111)
  {
    goto LABEL_84;
  }
  v105 = (Gigacage *)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(v11);
LABEL_84:
  Gigacage::forbidDisablingPrimitiveGigacage(v105);
  {
    WebKit::WebMockContentFilterManager::singleton(void)::manager = (uint64_t)off_1E34F9DA0;
    *(_QWORD *)algn_1EE342098 = 1;
  }
  WebKit::WebMockContentFilterManager::startObservingSettings((WebKit::WebMockContentFilterManager *)&WebKit::WebMockContentFilterManager::singleton(void)::manager);
  v113 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v113 + 8) = 1;
  *(_QWORD *)v113 = off_1E34EE218;
  *(_QWORD *)(v113 + 16) = &unk_1E34EE268;
  *(_QWORD *)(v113 + 24) = 0;
  *(_QWORD *)(v113 + 32) = 0;
  LOBYTE(v163[0]) = -124;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>(v106, v163, v113 + 16, (unsigned int **)__s2);
  __s2[0] = (char *)v113;
  WebCore::WebLockRegistry::setSharedRegistry();
  v114 = __s2[0];
  __s2[0] = 0;
  if (v114)
  {
    if (*((_DWORD *)v114 + 2) == 1)
      (*(void (**)(char *))(*(_QWORD *)v114 + 8))(v114);
    else
      --*((_DWORD *)v114 + 2);
  }
  WebKit::WebPermissionController::create(this, (uint64_t *)v163);
  v115 = v163[0];
  v163[0] = 0;
  __s2[0] = v115;
  WebCore::PermissionController::setSharedController();
  v116 = (unsigned int *)__s2[0];
  __s2[0] = 0;
  if (v116)
  {
    v156 = v116 + 2;
    do
    {
      v157 = __ldaxr(v156);
      v158 = v157 - 1;
    }
    while (__stlxr(v158, v156));
    if (!v158)
    {
      atomic_store(1u, v116 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v116 + 8))(v116);
    }
  }
  v117 = (unsigned int *)v163[0];
  v163[0] = 0;
  if (v117)
  {
    v159 = v117 + 2;
    do
    {
      v160 = __ldaxr(v159);
      v161 = v160 - 1;
    }
    while (__stlxr(v161, v159));
    if (!v161)
    {
      atomic_store(1u, v117 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v117 + 8))(v117);
    }
  }
  return this;
}

uint64_t WebKit::WebSQLiteDatabaseTracker::WebSQLiteDatabaseTracker(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WebCore::SQLiteDatabaseTrackerClient *v5;

  *(_QWORD *)a1 = off_1E34CBE40;
  *(_QWORD *)(a1 + 8) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  *(_QWORD *)a1 = &off_1E34CBDE0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  WebCore::SQLiteDatabaseTracker::setClient((WebCore::SQLiteDatabaseTracker *)a1, v5);
  return a1;
}

uint64_t WebKit::WebSQLiteDatabaseTracker::didFinishLastTransaction(WebKit::WebSQLiteDatabaseTracker *this)
{
  WebKit::WebSQLiteDatabaseTracker *v1;
  unsigned __int8 *v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = this;
  v2 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
LABEL_3:
    this = (WebKit::WebSQLiteDatabaseTracker *)MEMORY[0x19AEABB3C]((char *)this + 24);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  WTF::RunLoop::main(this);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v1 + 2, (uint64_t)v1);
  v4 = (unsigned int *)*((_QWORD *)v1 + 1);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *((_QWORD *)v1 + 4) + 1;
  *((_QWORD *)v1 + 4) = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34CBE70;
  v7[1] = v1;
  v7[2] = v4;
  v7[3] = v6;
  v13 = (uint64_t)v7;
  WTF::RunLoop::dispatchAfter();
  if (v14)
  {
    v8 = (unsigned int *)(v14 + 24);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v15 = v14 + 24;
      WTF::ThreadSafeRefCounted<WTF::RunLoop::DispatchTimer,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15);
    }
  }
  result = v13;
  if (v13)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v12 = __ldxr(v2);
  if (v12 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

double WebKit::RemoteImageDecoderAVFManager::create@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  double result;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v3 = off_1E34E6488;
  v3[1] = &off_1E34B0558;
  v3[2] = 0;
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v4 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v4 + 24) = v3;
  *v3 = off_1E34E86E0;
  v3[1] = &unk_1E34E8728;
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = v4;
  v3[4] = 0;
  *a1 = v3;
  return result;
}

WebKit::WebMockContentFilterManager *WebKit::WebMockContentFilterManager::startObservingSettings(WebKit::WebMockContentFilterManager *this)
{
  WebKit::WebMockContentFilterManager *result;

  WebCore::MockContentFilterManager::singleton(this);
  if (this)
    ++*((_DWORD *)this + 2);
  WebCore::MockContentFilterManager::setClient();
  result = this;
  if (this)
  {
    if (*((_DWORD *)this + 2) == 1)
      return (WebKit::WebMockContentFilterManager *)(*(uint64_t (**)(WebKit::WebMockContentFilterManager *))(*(_QWORD *)this + 8))(this);
    else
      --*((_DWORD *)this + 2);
  }
  return result;
}

double WebKit::RemoteMediaPlayerManager::create@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  double result;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v3 = off_1E34E6488;
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v4 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v4 + 24) = v3;
  *v3 = off_1E34E6DC0;
  v3[1] = v4;
  v3[3] = 0;
  v3[4] = 0;
  v3[2] = 0;
  *a1 = v3;
  return result;
}

unsigned int *WebKit::WebPermissionController::create@<X0>(WebKit::WebPermissionController *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  char v8;

  v5 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E34F0100;
  *(_QWORD *)(v5 + 16) = &unk_1E34F0148;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  v8 = -72;
  result = WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)this + 5, &v8, v5 + 16, &v7);
  *a2 = v5;
  return result;
}

WebKit::RemoteVideoCodecFactory *WebKit::RemoteVideoCodecFactory::RemoteVideoCodecFactory(WebKit::RemoteVideoCodecFactory *this, WebKit::WebProcess *a2)
{
  WebKit::WebProcess::libWebRTCCodecs(a2);
  WebCore::VideoDecoder::setCreatorCallback();
  WebCore::VideoEncoder::setCreatorCallback();
  return this;
}

WebKit::WebLoaderStrategy *WebKit::WebLoaderStrategy::WebLoaderStrategy(WebKit::WebLoaderStrategy *this)
{
  WTF::RunLoop::TimerBase *v2;
  WTF::RunLoop *v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_1E34EAFC0;
  *((_QWORD *)this + 1) = 0;
  v2 = (WebKit::WebLoaderStrategy *)((char *)this + 16);
  v3 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E34EB160;
  v4[1] = WebKit::WebLoaderStrategy::internallyFailedLoadTimerFired;
  v4[2] = 0;
  v4[3] = this;
  WTF::RunLoop::TimerBase::TimerBase(v2, v3);
  *((_QWORD *)this + 2) = off_1E34ABE00;
  *((_QWORD *)this + 5) = v4;
  *((_BYTE *)this + 104) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 112) = 1;
  return this;
}

WebKit::WebCookieJar *WebKit::WebCookieJar::WebCookieJar(WebKit::WebCookieJar *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = &off_1E34F1678;
  v8 = (unsigned int *)v2;
  WebCore::CookieJar::CookieJar();
  if (v8)
  {
    v5 = v8 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  *(_QWORD *)this = &off_1E34F1568;
  *((_QWORD *)this + 4) = off_1E34F15F8;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v3 = operator new();
  *(_QWORD *)v3 = (char *)this + 64;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = v3;
  return this;
}

const char *WebKit::UserMediaCaptureManager::supplementName(WebKit::UserMediaCaptureManager *this)
{
  return "UserMediaCaptureManager";
}

WebKit::UserMediaCaptureManager *WebKit::UserMediaCaptureManager::UserMediaCaptureManager(WebKit::UserMediaCaptureManager *this, WebKit::WebProcess *a2)
{
  char *v4;
  unsigned int *v6;
  char v7;

  *((_QWORD *)this + 1) = &unk_1E34F2E60;
  v4 = (char *)this + 8;
  *(_QWORD *)this = off_1E34F2E20;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = &off_1E34F2F38;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = &off_1E34F2EF8;
  *((_QWORD *)this + 8) = this;
  *((_BYTE *)this + 72) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = &off_1E34F2E98;
  *((_QWORD *)this + 13) = this;
  *((_BYTE *)this + 112) = 0;
  *((_QWORD *)this + 15) = &off_1E34F2EC8;
  *((_QWORD *)this + 16) = this;
  *((_BYTE *)this + 136) = 0;
  WebKit::RemoteCaptureSampleManager::RemoteCaptureSampleManager((WebKit::UserMediaCaptureManager *)((char *)this + 144));
  *((_BYTE *)this + 224) = 0;
  v7 = -112;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)a2 + 5, &v7, (uint64_t)v4, &v6);
  return this;
}

WebKit::RemoteCaptureSampleManager *WebKit::RemoteCaptureSampleManager::RemoteCaptureSampleManager(WebKit::RemoteCaptureSampleManager *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34B0558;
  *((_QWORD *)this + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v2 + 24) = this;
  *((_QWORD *)this + 2) = v2;
  *(_QWORD *)this = off_1E34F23F0;
  *((_BYTE *)this + 24) = 0;
  WTF::WorkQueue::create();
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 64) = 0;
  return this;
}

IPC::WorkQueueMessageReceiver *IPC::WorkQueueMessageReceiver::WorkQueueMessageReceiver(IPC::WorkQueueMessageReceiver *this)
{
  uint64_t v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E34B0558;
  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v2 + 24) = this;
  *((_QWORD *)this + 2) = v2;
  *(_QWORD *)this = off_1E34B02C0;
  return this;
}

void sub_196CE12E0(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v4;
  *v2 = v5;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LegacyCustomProtocolManager::networkProcessCreated(WebKit::LegacyCustomProtocolManager *this, WebKit::NetworkProcess *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const char *v9;
  _QWORD v10[2];

  if (byte_1EE341381 != 1)
    goto LABEL_12;
  if (qword_1EE341388)
  {
    v10[0] = "LegacyCustomProtocolManager";
    v10[1] = 28;
    v9 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(qword_1EE341388 + 192), (WTF::ASCIILiteralHash *)v10);
    if (WebKit::LegacyCustomProtocolManager::networkProcessCreated(WebKit::NetworkProcess &)::$_0::operator()<WebKit::LegacyCustomProtocolManager>((uint64_t)v9))
    {
      result = 58;
      __break(0xC471u);
      return result;
    }
    if ((byte_1EE341381 & 1) == 0)
    {
LABEL_12:
      qword_1EE341388 = 0;
      byte_1EE341381 = 1;
    }
  }
  v3 = (unsigned int *)((char *)this + 120);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  result = qword_1EE341388;
  qword_1EE341388 = (uint64_t)this;
  if (result)
  {
    v6 = (unsigned int *)(result + 120);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)(result + 120));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WebKit::XPCEndpoint *WebKit::NetworkProcess::addSupplement<WebKit::LaunchServicesDatabaseObserver>(WebKit::LaunchServicesDatabaseObserver *a1)
{
  uint64_t *v2;
  uint64_t v3;
  WebKit::LaunchServicesDatabaseObserver *v4;
  WebKit::XPCEndpoint *result;
  uint64_t v6;
  WebKit::XPCEndpoint *v7;
  _QWORD v8[2];

  v2 = (uint64_t *)((char *)a1 + 192);
  v8[0] = WebKit::LaunchServicesDatabaseObserver::supplementName(a1);
  v8[1] = v3;
  v4 = (WebKit::LaunchServicesDatabaseObserver *)WTF::fastMalloc((WTF *)0x40);
  v7 = WebKit::LaunchServicesDatabaseObserver::LaunchServicesDatabaseObserver(v4, a1);
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::LaunchServicesDatabaseObserver>>((uint64_t)&v6, v2, (WTF::ASCIILiteralHash *)v8, (uint64_t *)&v7);
  result = v7;
  if (v7)
    return (WebKit::XPCEndpoint *)(*(uint64_t (**)(WebKit::XPCEndpoint *))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

WebKit::XPCEndpoint *WebKit::LaunchServicesDatabaseObserver::LaunchServicesDatabaseObserver(WebKit::LaunchServicesDatabaseObserver *this, WebKit::NetworkProcess *a2)
{
  WebKit::XPCEndpoint *result;

  result = WebKit::XPCEndpoint::XPCEndpoint(this);
  *(_QWORD *)result = off_1E34B01B0;
  *((_QWORD *)result + 3) = &unk_1E34B01F8;
  *((_QWORD *)result + 4) = 0;
  *((_BYTE *)result + 40) = 0;
  *((_QWORD *)result + 6) = 0;
  *((_QWORD *)result + 7) = 0;
  return result;
}

const char *WebKit::LaunchServicesDatabaseObserver::supplementName(WebKit::LaunchServicesDatabaseObserver *this)
{
  return "LaunchServicesDatabaseObserverSupplement";
}

uint64_t WebKit::NetworkProcess::addSupplement<WebKit::LegacyCustomProtocolManager>(WebKit::NetworkProcess *a1)
{
  uint64_t *v2;
  WebKit::LegacyCustomProtocolManager *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v2 = (uint64_t *)((char *)a1 + 192);
  v7[0] = "LegacyCustomProtocolManager";
  v7[1] = 28;
  v3 = (WebKit::LegacyCustomProtocolManager *)WTF::fastMalloc((WTF *)0x40);
  v6 = WebKit::LegacyCustomProtocolManager::LegacyCustomProtocolManager(v3, a1);
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::WebCookieManager>>((uint64_t)&v5, v2, (WTF::ASCIILiteralHash *)v7, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

WebKit::LegacyCustomProtocolManager *WebKit::LegacyCustomProtocolManager::LegacyCustomProtocolManager(WebKit::LegacyCustomProtocolManager *this, WebKit::NetworkProcess *a2)
{
  char *v4;
  uint64_t v5;
  unsigned int v6;

  *((_QWORD *)this + 1) = &unk_1E34C0C80;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E34C0C48;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v5 = *((_QWORD *)a2 + 1);
  do
    v6 = __ldaxr((unsigned int *)v5);
  while (__stlxr(v6 + 1, (unsigned int *)v5));
  *((_QWORD *)this + 3) = v5;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 0;
  WebKit::AuxiliaryProcess::addMessageReceiver(*(_QWORD *)(v5 + 8), 17, (uint64_t)v4);
  return this;
}

uint64_t WebKit::NetworkProcess::addSupplement<WebKit::AuthenticationManager>(WebKit::NetworkProcess *a1)
{
  uint64_t *v2;
  WebKit::AuthenticationManager *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v2 = (uint64_t *)((char *)a1 + 192);
  v7[0] = "AuthenticationManager";
  v7[1] = 22;
  v3 = (WebKit::AuthenticationManager *)WTF::fastMalloc((WTF *)0x28);
  v6 = WebKit::AuthenticationManager::AuthenticationManager(v3, a1);
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::AuthenticationManager>>((uint64_t)&v5, v2, (WTF::ASCIILiteralHash *)v7, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

WebKit::AuthenticationManager *WebKit::AuthenticationManager::AuthenticationManager(WebKit::AuthenticationManager *this, WebKit::NetworkProcess *a2)
{
  char *v4;
  unsigned int *v5;
  unsigned int v6;

  *((_QWORD *)this + 1) = &unk_1E34CDCC8;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E34CDC90;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 3) = v5;
  *((_QWORD *)this + 4) = 0;
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)a2, 2, (uint64_t)v4);
  return this;
}

uint64_t WebKit::NetworkProcess::addSupplement<WebKit::WebCookieManager>(WebKit::NetworkProcess *a1)
{
  uint64_t *v2;
  WebKit::WebCookieManager *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v2 = (uint64_t *)((char *)a1 + 192);
  v7[0] = "WebCookieManager";
  v7[1] = 17;
  v3 = (WebKit::WebCookieManager *)WTF::fastMalloc((WTF *)0x20);
  v6 = WebKit::WebCookieManager::WebCookieManager(v3, a1);
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::WebCookieManager>>((uint64_t)&v5, v2, (WTF::ASCIILiteralHash *)v7, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

WebKit::WebCookieManager *WebKit::WebCookieManager::WebCookieManager(WebKit::WebCookieManager *this, WebKit::NetworkProcess *a2)
{
  char *v4;
  unsigned int *v5;
  unsigned int v6;

  *((_QWORD *)this + 1) = &unk_1E34C0C10;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E34C0BD8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 3) = v5;
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)a2, 157, (uint64_t)v4);
  return this;
}

WebKit::XPCEndpoint *WebKit::XPCEndpoint::XPCEndpoint(WebKit::XPCEndpoint *this)
{
  xpc_connection_t *v2;
  _xpc_connection_s *v3;
  xpc_connection_t v4;
  xpc_endpoint_t v5;
  void *v6;
  _xpc_connection_s *v7;
  _QWORD handler[5];

  *(_QWORD *)this = off_1E34B0248;
  *((_QWORD *)this + 1) = 0;
  v2 = (xpc_connection_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  v3 = xpc_connection_create(0, 0);
  v4 = *v2;
  *v2 = v3;
  if (v4)
  {

    v3 = *v2;
  }
  v5 = xpc_endpoint_create(v3);
  v6 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v5;
  if (v6)

  xpc_connection_set_target_queue(*v2, MEMORY[0x1E0C80D38]);
  v7 = (_xpc_connection_s *)*((_QWORD *)this + 1);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = ___ZN6WebKit11XPCEndpointC2Ev_block_invoke;
  handler[3] = &__block_descriptor_40_e33_v16__0__NSObject_OS_xpc_object__8l;
  handler[4] = this;
  xpc_connection_set_event_handler(v7, handler);
  xpc_connection_resume(*v2);
  return this;
}

void sub_196CE1860(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  id *v2;
  void *v4;

  v4 = *(void **)(v1 + 16);
  if (v4)

  if (*v2)
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::Timer::Timer<WebKit::GPUProcess,WebKit::GPUProcess>()
{
  _QWORD *result;

  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)qword_1ECE72370);
  qword_1ECE72370[0] = (uint64_t)off_1E34B3740;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E34B8050;
  result[1] = WebKit::GPUProcess::tryExitIfUnused;
  result[2] = 0;
  result[3] = &qword_1ECE722A8;
  qword_1ECE723A0 = (uint64_t)result;
  return result;
}

void ___ZN6WebKit9UIProcess21webCoreLogLevelStringEv_block_invoke()
{
  const void *v0;
  uint64_t v1;
  const void *v2;

  v0 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "stringForKey:", CFSTR("WebCoreLogging"));
  v1 = (uint64_t)v0;
  if (v0)
    CFRetain(v0);
  v2 = (const void *)qword_1EE3417C0;
  qword_1EE3417C0 = v1;
  if (v2)
    CFRelease(v2);
}

void ___ZN6WebKit9UIProcess20webKitLogLevelStringEv_block_invoke()
{
  const void *v0;
  uint64_t v1;
  const void *v2;

  v0 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "stringForKey:", CFSTR("WebKit2Logging"));
  v1 = (uint64_t)v0;
  if (v0)
    CFRetain(v0);
  v2 = (const void *)qword_1EE3417D0;
  qword_1EE3417D0 = v1;
  if (v2)
    CFRelease(v2);
}

void ___ZN6WebKit9UIProcess17wtfLogLevelStringEv_block_invoke()
{
  const void *v0;
  uint64_t v1;
  const void *v2;

  v0 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "stringForKey:", CFSTR("WTFLogging"));
  v1 = (uint64_t)v0;
  if (v0)
    CFRetain(v0);
  v2 = (const void *)qword_1EE3417B0;
  qword_1EE3417B0 = v1;
  if (v2)
    CFRelease(v2);
}

int8x16_t WebKit::PlatformCALayerRemote::setTransform(int8x16_t *this, const WebCore::TransformationMatrix *a2)
{
  void *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  WTF *v12;
  int8x16_t result;

  v5 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
  v6 = *((_OWORD *)a2 + 3);
  v8 = *(_OWORD *)a2;
  v7 = *((_OWORD *)a2 + 1);
  v5[2] = *((_OWORD *)a2 + 2);
  v5[3] = v6;
  *v5 = v8;
  v5[1] = v7;
  v9 = *((_OWORD *)a2 + 7);
  v11 = *((_OWORD *)a2 + 4);
  v10 = *((_OWORD *)a2 + 5);
  v5[6] = *((_OWORD *)a2 + 6);
  v5[7] = v9;
  v5[4] = v11;
  v5[5] = v10;
  v12 = (WTF *)this[5].i64[1];
  this[5].i64[1] = (uint64_t)v5;
  if (v12)
    WTF::fastFree(v12, v4);
  result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(2uLL));
  this[4] = result;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::LoadSchedulingMode>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::LoadSchedulingMode,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::LoadSchedulingMode,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  int v1;
  uint64_t result;
  int v3;
  __int16 v4;

  v4 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v4);
  v1 = HIBYTE(v4);
  if (!HIBYTE(v4))
    goto LABEL_7;
  result = WTF::isValidEnum<WebCore::LoadSchedulingMode,void>(v4);
  if (!(_DWORD)result)
  {
    v1 = 0;
LABEL_7:
    v3 = 0;
    return v1 | (v3 << 8);
  }
  if (HIBYTE(v4))
  {
    v3 = 1;
    v1 = v4;
    return v1 | (v3 << 8);
  }
  __break(1u);
  return result;
}

BOOL WTF::isValidEnum<WebCore::LoadSchedulingMode,void>(unsigned int a1)
{
  return a1 < 2;
}

void WebCore::NavigationRequester::~NavigationRequester(WebCore::NavigationRequester *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v8, v7);
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v9, v7);
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
}

_QWORD *WebKit::WebPreferences::setShouldPrintBackgrounds(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::RemoteRenderingBackendProxy::finalizeRenderingUpdate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t *v2;

  if (this[5])
  {
    v1 = this;
    v2 = this + 29;
    this = (_QWORD *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::FinalizeRenderingUpdate,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((WebKit::RemoteRenderingBackendProxy *)this, &v2, this[7]);
    ++v1[29];
  }
  return this;
}

uint64_t WebKit::RemoteLegacyCDMFactory::registerFactory(WebKit::RemoteLegacyCDMFactory *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  WebCore::LegacyCDM::clearFactories(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34E6D10;
  v4[1] = v2;
  v14 = (uint64_t)v4;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34E6D38;
  v7[1] = v5;
  v13 = v7;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34E6D60;
  v10[1] = v8;
  v12 = v10;
  WebCore::LegacyCDM::registerCDMFactory();
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

uint64_t WebKit::WebProcessPool::updateRemoteWorkerUserAgent(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = this + 21;
  result = WTF::equal(this[21], *a2, a3);
  if ((result & 1) == 0)
  {
    WTF::String::operator=(v4, (WTF::StringImpl *)a2);
    {
      WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
      *(_QWORD *)algn_1ECE73828 = 0;
    }
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v16);
    if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
    {
      v6 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
      v7 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v6;
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    v11 = &WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
    v12 = v7;
    v13 = v7;
    v14 = v7;
    v15 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v6;
    result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v11);
    while (v17 != v12)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      v9 = (unsigned int *)(v8 + 16);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      WebKit::WebProcessProxy::setRemoteWorkerUserAgent(v8, (const WTF::String *)v4);
      if (v8)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
      result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v16);
    }
  }
  return result;
}

void sub_196CE2064(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::setInjectedBundleFormClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34F9E98;
  }
  result = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebChromeClient::rootFrameAdded(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  result = *(_QWORD *)(v3 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 248))(result, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
  return result;
}

_QWORD *WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  *a2 = a1;
  a2[1] = v4;
  a2[2] = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = *((unsigned int *)v6 - 1);
    v8 = &v6[v7];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  a2[3] = v8;
  a2[4] = &v6[v7];
  return WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a2);
}

_QWORD *WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  if (!*a1)
    return 0;
  result = WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(a1, a2);
  v4 = *a1;
  if (!result)
  {
    if (v4)
      return (_QWORD *)(v4 + 48 * *(unsigned int *)(v4 - 4));
    else
      return 0;
  }
  return result;
}

void WebKit::WebLoaderStrategy::prioritizeResourceLoads(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  IPC::Encoder *v18;

  v2 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v2)
  {
    v5 = 0;
LABEL_8:
    LODWORD(v6) = 0;
    goto LABEL_9;
  }
  if (v2 >> 29)
  {
    __break(0xC471u);
    return;
  }
  v4 = WTF::fastMalloc((WTF *)(8 * v2));
  v5 = (WTF *)v4;
  if (!*(_DWORD *)(a2 + 12))
    goto LABEL_8;
  v6 = 0;
  do
  {
    *(_QWORD *)(v4 + 8 * v6) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * v6) + 744);
    ++v6;
  }
  while (v6 < *(unsigned int *)(a2 + 12));
LABEL_9:
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v7) + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 249;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v18 = (IPC::Encoder *)v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v6;
  if ((_DWORD)v6)
  {
    v10 = 8 * v6;
    v11 = v5;
    do
    {
      v12 = *(_QWORD *)v11;
      v11 = (WTF *)((char *)v11 + 8);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v12;
      v10 -= 8;
    }
    while (v10);
  }
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v18, 0, 0);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v13);
    WTF::fastFree(v15, v16);
  }
  if (v5)
    WTF::fastFree(v5, v13);
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordFillCompositedRect(WTF::ApproximateTime *result, int *a2, WebCore::Color *a3, char a4, char a5)
{
  uint64_t v5;
  WTF::ApproximateTime *v6;
  WTF::ApproximateTime *v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  WebKit::RemoteImageBufferProxy *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unsigned int v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  _BYTE *v69;
  int *v70;
  WebCore::Color *v71;
  char v72;
  char v73;
  WebKit::RemoteImageBufferProxy *v74;
  IPC::StreamClientConnection *v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  _BYTE buf[24];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v70 = a2;
  v71 = a3;
  v72 = a4;
  v73 = a5;
  v5 = *((_QWORD *)result + 481);
  if (!v5)
    return result;
  v6 = result;
  result = *(WTF::ApproximateTime **)(v5 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v75);
  if (!v75)
    return result;
  v7 = (WTF::ApproximateTime *)*((_QWORD *)v6 + 479);
  if (v7)
    goto LABEL_107;
  v74 = 0;
  while (1)
  {
    v8 = v75;
    v9 = *((_QWORD *)v6 + 478);
    WTF::ApproximateTime::now(v7);
    v11 = v10 + 15.0;
    if (*((_QWORD *)v8 + 6) != v9)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
      if (!buf[16])
      {
LABEL_104:
        v45 = 15;
LABEL_98:
        v66 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v67 = IPC::errorAsString(v45);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillCompositedRect";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v67;
          _os_log_impl(&dword_196BCC000, v66, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v68 = *((_QWORD *)v6 + 481);
        if (v68)
        {
          v69 = *(_BYTE **)(v68 + 8);
          if (v69)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v69);
        }
        goto LABEL_29;
      }
      v37 = *(_QWORD *)buf;
      v38 = *(_QWORD *)&buf[8];
      v39 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - *(_QWORD *)buf;
      if (v39 < *(_QWORD *)buf)
      {
        v42 = 0;
        v41 = *(_QWORD *)&buf[8];
      }
      else
      {
        v41 = 0;
        if (v40 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v42 = 0;
        }
        else
        {
          v42 = 0;
          if (v40 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v40) = 2822;
            v41 = v38;
            v42 = v40 + 2;
          }
        }
      }
      v43 = (_QWORD *)((v37 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v43 >= v37 + v42)
      {
        v44 = (char *)v43 - v37;
        v45 = 17;
        if ((unint64_t)v43 - v37 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_98;
        v42 = (unint64_t)(v44 + 8);
        if ((unint64_t)(v44 + 8) > v41)
          goto LABEL_98;
        *v43 = v9;
      }
      if (!v41)
      {
        v45 = 17;
        goto LABEL_98;
      }
      v46 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *((_QWORD *)v8 + 7);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v49 = 0;
      else
        v49 = v48;
      *((_QWORD *)v8 + 9) = v49;
      v50 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v49, v50));
      v52 = *((_DWORD *)v8 + 27);
      if (v51 == 0x80000000 || v52 != 0)
      {
        v54 = v52 + 1;
        *((_DWORD *)v8 + 27) = v54;
        if (v54 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v76, v11);
    if (!v78)
      goto LABEL_104;
    *(_QWORD *)buf = v76;
    *(_QWORD *)&buf[8] = v77;
    *(_QWORD *)&buf[16] = 0;
    v12 = (v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v13 = v12 >= v76;
    v14 = v12 - v76;
    if (v13)
    {
      if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v77)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v76 + v14) = 829;
        *(_QWORD *)&buf[16] = v14 + 2;
      }
    }
    IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v70);
    v7 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, v71);
    v17 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16] < *(_QWORD *)&buf[8])
    {
      v18 = *(_QWORD *)&buf[16] + 1;
      *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = v72;
      if ((unint64_t)(v17 + 1) < *(_QWORD *)&buf[8])
      {
        v19 = v17 + 2;
        *(_BYTE *)(*(_QWORD *)buf + v18) = v73;
        *(_QWORD *)&buf[16] = v19;
        if (*(_QWORD *)&buf[8])
        {
          v20 = *((_QWORD *)v8 + 8);
          v21 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v22 = *((_QWORD *)v8 + 7);
          if (v21 + 16 >= v22)
            v21 = 0;
          if (v19 <= 0x10)
            v19 = 16;
          v23 = v21 + v19;
          if (v22 <= v23)
            v24 = 0;
          else
            v24 = v23;
          *((_QWORD *)v8 + 9) = v24;
          v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v24, v25));
          if (v26 == 0x80000000 || *((_DWORD *)v8 + 27))
          {
            if (*((_BYTE *)v8 + 96))
              MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
            *((_DWORD *)v8 + 27) = 0;
          }
          goto LABEL_29;
        }
      }
    }
    if (v78)
      break;
    __break(1u);
LABEL_107:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v7, *((_QWORD *)v6 + 480), &v74);
    v7 = v74;
    if (v74)
      v7 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v74);
  }
  v58 = (v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v59 = v58 - v76;
  if (v58 < v76)
  {
    v60 = 0;
  }
  else
  {
    v60 = 0;
    if (v59 <= 0xFFFFFFFFFFFFFFFDLL && v59 + 2 <= v77)
    {
      *(_WORD *)(v76 + v59) = 2821;
      v60 = v59 + 2;
    }
  }
  v61 = *((_QWORD *)v8 + 8);
  v62 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = *((_QWORD *)v8 + 7);
  if (v62 + 16 >= v63)
    v62 = 0;
  if (v60 <= 0x10)
    v60 = 16;
  v64 = v62 + v60;
  if (v63 <= v64)
    v64 = 0;
  *((_QWORD *)v8 + 9) = v64;
  v65 = (unint64_t *)(*(_QWORD *)(v61 + 16) + 128);
  do
    __ldaxr(v65);
  while (__stlxr(v64, v65));
  *((_DWORD *)v8 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v8 + 1);
  v45 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillCompositedRect>(*(uint64_t *)buf, &v70, v9);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (v45)
    goto LABEL_98;
LABEL_29:
  v27 = v74;
  v74 = 0;
  if (v27)
  {
    v28 = *((_QWORD *)v27 + 1);
    if (__ldaxr((unsigned __int8 *)v28))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v28))
    {
LABEL_33:
      v30 = *(_QWORD *)(v28 + 8);
      v31 = v30 - 1;
      *(_QWORD *)(v28 + 8) = v30 - 1;
      if (v30 == 1)
      {
        v57 = *(_QWORD *)(v28 + 16);
        v32 = *(_QWORD *)(v28 + 24);
        *(_QWORD *)(v28 + 24) = 0;
        v33 = v57 != 0;
      }
      else
      {
        v32 = 0;
        v33 = 1;
      }
      v34 = __ldxr((unsigned __int8 *)v28);
      if (v34 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v28))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_37:
      if (!v31)
      {
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if (!v33)
          WTF::fastFree((WTF *)v28, v16);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v28);
    goto LABEL_33;
  }
LABEL_38:
  result = v75;
  v75 = 0;
  if (result)
  {
    do
    {
      v35 = __ldaxr((unsigned int *)result);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)result));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v55, v56);
    }
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::ResourceLoadStatisticsStore(uint64_t a1, uint64_t a2, WTF::WorkQueue *a3, char a4, uint64_t a5, uint64_t a6)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v17;
  uint64_t v18;
  int Error;
  uint64_t ErrorMsg;
  WTF::StringImpl *v21;
  _BYTE buf[12];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  WTF::FileSystemImpl::pathByAppendingComponent();
  WebKit::DatabaseUtilities::DatabaseUtilities((_QWORD *)a1, (uint64_t *)buf);
  v12 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)a1 = off_1E34C0920;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  WTF::WorkQueue::ref(a3);
  *(_QWORD *)(a1 + 112) = a3;
  *(_QWORD *)(a1 + 120) = &off_1E34C9C18;
  *(_WORD *)(a1 + 128) = 1;
  *(_OWORD *)(a1 + 136) = xmmword_1978CF790;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = xmmword_1978CF7A0;
  *(int64x2_t *)(a1 + 184) = vdupq_n_s64(0x4122750000000000uLL);
  *(_OWORD *)(a1 + 200) = xmmword_1978CF7B0;
  *(_QWORD *)(a1 + 216) = 10;
  *(_WORD *)(a1 + 224) = 256;
  *(_BYTE *)(a1 + 226) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_BYTE *)(a1 + 264) = 0;
  WTF::StringLiterals::operator"" _str("https://3rdpartytestwebkit.org", &v21);
  MEMORY[0x19AEABB0C](buf, &v21, 0);
  WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)(a1 + 280), (const WTF::URL *)buf);
  v14 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  *(_QWORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 648) = a6;
  *(_DWORD *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 660) = 0;
  *(_BYTE *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 676) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 692) = 0;
  *(_QWORD *)(a1 + 699) = 0;
  *(_BYTE *)(a1 + 707) = a4;
  *(_DWORD *)(a1 + 708) = 0;
  WebKit::ResourceLoadStatisticsStore::openAndUpdateSchemaIfNecessary((WebKit::ResourceLoadStatisticsStore *)a1, v13);
  WebKit::DatabaseUtilities::enableForeignKeys((WebKit::DatabaseUtilities *)a1);
  if ((WebCore::SQLiteDatabase::turnOnIncrementalAutoVacuum((WebCore::SQLiteDatabase *)(a1 + 16)) & 1) == 0)
  {
    v17 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 648);
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = a1;
      v23 = 2048;
      v24 = v18;
      v25 = 1024;
      v26 = Error;
      v27 = 2081;
      v28 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::ResourceLoadStatisticsStore: failed to turn on auto vacuum", buf, 0x26u);
    }
  }
  WebKit::ResourceLoadStatisticsStore::includeTodayAsOperatingDateIfNecessary((WebKit::ResourceLoadStatisticsStore *)a1);
  if ((byte_1ECE7295A & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE72970 = 0;
    qword_1ECE72968 = 0;
    byte_1ECE7295A = 1;
  }
  WTF::WeakHashSet<WebKit::ResourceLoadStatisticsStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ResourceLoadStatisticsStore>((uint64_t)buf, (unsigned int *)a1);
  return a1;
}

_QWORD *WebKit::DatabaseUtilities::DatabaseUtilities(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::SQLiteDatabase *v4;

  v3 = *a2;
  *a2 = 0;
  *a1 = &unk_1E34BC428;
  a1[1] = v3;
  v4 = (WebCore::SQLiteDatabase *)(a1 + 2);
  WebCore::SQLiteDatabase::SQLiteDatabase((WebCore::SQLiteDatabase *)(a1 + 2));
  WebCore::SQLiteTransaction::SQLiteTransaction((WebCore::SQLiteTransaction *)(a1 + 10), v4);
  return a1;
}

uint64_t WebKit::ResourceLoadStatisticsStore::openAndUpdateSchemaIfNecessary(WebKit::ResourceLoadStatisticsStore *this, const WTF::String *a2)
{
  void *v3;
  uint64_t v5;
  NSObject *v6;
  const WTF::String *v7;
  const WTF::String *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE buf[22];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 711) = WebKit::DatabaseUtilities::openDatabaseAndCreateSchemaIfNecessary(this, a2);
  WebKit::ResourceLoadStatisticsStore::addMissingTablesIfNecessary(this);
  WebKit::DatabaseUtilities::columnsForTable((uint64_t)this, "ObservedDomains", 16, (uint64_t)&v11);
  if (WebKit::vectorEqualsArray<WTF::String,WTF::ASCIILiteral,12ul>((uint64_t)&v11, (uint64_t)&off_1E34C0A38)&& WebKit::DatabaseUtilities::addMissingColumnToTable((uint64_t)this, "ObservedDomains", 16, "mostRecentWebPushInteractionTime REAL DEFAULT 0.0 NOT NULL", 59))
  {
    *(_QWORD *)buf = "mostRecentWebPushInteractionTime";
    *(_QWORD *)&buf[8] = 33;
    v5 = v13;
    if (v13 == v12)
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v11, (uint64_t *)buf);
    }
    else
    {
      v9 = v11;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)(v9 + 8 * v5) = v14;
      ++v13;
    }
  }
  if ((WebKit::vectorEqualsArray<WTF::String,WTF::ASCIILiteral,13ul>((uint64_t)&v11, (uint64_t)&off_1E34C0AF8) & 1) != 0)
  {
    WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(this);
    WebKit::DatabaseUtilities::migrateDataToNewTablesIfNecessary(this);
  }
  else
  {
    (*(void (**)(WebKit::ResourceLoadStatisticsStore *))(*(_QWORD *)this + 16))(this);
    if (*((_QWORD *)this + 3))
      WebCore::SQLiteDatabase::close((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
    v6 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v10 = *((_QWORD *)this + 81);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v10;
      _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::openAndUpdateSchemaIfNecessary: failed at scheme check, will create new database", buf, 0x16u);
    }
    WTF::FileSystemImpl::deleteFile((WebKit::ResourceLoadStatisticsStore *)((char *)this + 8), v7);
    *((_BYTE *)this + 711) = WebKit::DatabaseUtilities::openDatabaseAndCreateSchemaIfNecessary(this, v8);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v3);
}

uint64_t WebKit::vectorEqualsArray<WTF::String,WTF::ASCIILiteral,12ul>(uint64_t result, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_DWORD *)(result + 12) == 12)
  {
    v3 = result;
    v2 = 0;
    v4 = 0;
    v5 = (_QWORD *)(a2 + 8);
    while (v4 < *(unsigned int *)(v3 + 12))
    {
      if (*v5)
        v6 = *v5 - 1;
      else
        v6 = 0;
      result = MEMORY[0x19AEABBCC](*(_QWORD *)(*(_QWORD *)v3 + 8 * v4), *(v5 - 1), v6);
      if ((result & 1) != 0)
      {
        v2 = v4 > 0xA;
        v5 += 2;
        if (++v4 != 12)
          continue;
      }
      return v2;
    }
    __break(0xC471u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t WebKit::DatabaseUtilities::openDatabaseAndCreateSchemaIfNecessary(WebKit::DatabaseUtilities *this, const WTF::String *a2)
{
  WTF::FileSystemImpl *v3;
  const WTF::String *v4;
  int v5;
  uint64_t v6;
  NSObject *v8;
  uint64_t ErrorMsg;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  char AllDirectories;
  WTF::StringImpl *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  WTF *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28[2];
  unsigned int v29;
  _BYTE buf[12];
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = (WebKit::DatabaseUtilities *)((char *)this + 8);
  v5 = WTF::FileSystemImpl::fileExists((WebKit::DatabaseUtilities *)((char *)this + 8), a2);
  if ((v5 & 1) != 0)
    goto LABEL_2;
  WTF::FileSystemImpl::parentPath(v3, v4);
  AllDirectories = WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)buf, v10);
  v13 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if ((AllDirectories & 1) != 0)
  {
LABEL_2:
    v6 = v5 ^ 1u;
    if ((WebCore::SQLiteDatabase::open() & 1) != 0)
    {
      WebCore::SQLiteDatabase::prepareStatement();
      if (v29 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v28) != 100)
      {
        v8 = qword_1ECE715F0;
        if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
        {
          ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::DatabaseUtilities *)((char *)this + 16));
          *(_DWORD *)buf = 134218243;
          *(_QWORD *)&buf[4] = this;
          v31 = 2081;
          v32 = ErrorMsg;
          _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::setBusyTimeout failed, error message: %{private}s", buf, 0x16u);
        }
      }
      if ((v5 & 1) == 0 && ((**(uint64_t (***)(WebKit::DatabaseUtilities *))this)(this) & 1) == 0)
      {
        v20 = qword_1ECE715F0;
        if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
        {
          v21 = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::DatabaseUtilities *)((char *)this + 16));
          WTF::String::utf8();
          v22 = v27 ? (uint64_t)v27 + 16 : 0;
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = this;
          v31 = 2082;
          v32 = v21;
          v33 = 2082;
          v34 = v22;
          _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::createSchema failed, error message: %{public}s, database path: %{public}s", buf, 0x20u);
          if (v27)
          {
            if (*(_DWORD *)v27 == 1)
              WTF::fastFree(v27, v23);
            else
              --*(_DWORD *)v27;
          }
        }
      }
      if (v29 != -1)
        (*(&off_1E34BC698 + v29))((int)buf, (WebCore::SQLiteStatement *)v28);
    }
    else
    {
      v15 = qword_1ECE715F0;
      if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
      {
        v16 = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::DatabaseUtilities *)((char *)this + 16));
        WTF::String::utf8();
        v17 = v28[0] ? (char *)v28[0] + 16 : 0;
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = this;
        v31 = 2082;
        v32 = v16;
        v33 = 2082;
        v34 = (uint64_t)v17;
        _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::open failed, error message: %{public}s, database path: %{public}s", buf, 0x20u);
        v19 = v28[0];
        v28[0] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
            WTF::fastFree(v19, v18);
          else
            --*(_DWORD *)v19;
        }
      }
    }
  }
  else
  {
    v14 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      v24 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = this;
      v31 = 2082;
      v32 = (uint64_t)v24;
      _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::open failed, error message: Failed to create directory database path: %{public}s", buf, 0x16u);
      v26 = v28[0];
      v28[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v25);
        else
          --*(_DWORD *)v26;
      }
    }
    return 0;
  }
  return v6;
}

uint64_t WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t result;
  WebCore::SQLiteDatabase *v3;
  unsigned int v4;
  NSObject *v5;
  _BOOL4 v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  NSObject *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  unsigned __int8 **v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteDatabase *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE buf[24];
  _BYTE v56[25];
  _BYTE v57[136];
  _OWORD v58[2];
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (WebKit::ResourceLoadStatisticsStore::tableExists((uint64_t)this)
    || (result = WebKit::ResourceLoadStatisticsStore::tableExists((uint64_t)this), (_DWORD)result))
  {
    v53 = 0;
    v54 = 0;
    v3 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
    WebCore::SQLiteDatabase::prepareStatement();
    v4 = v52;
    if (v52)
    {
      v5 = qword_1ECE71758;
      v6 = os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR);
      v8 = v52;
      if (!v6)
        goto LABEL_5;
      v44 = *((_QWORD *)this + 81);
      v48 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v44;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v56 = WebCore::SQLiteDatabase::lastError((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
      *(_WORD *)&v56[4] = 2081;
      *(_QWORD *)&v56[6] = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary: failed to prepare unattributedScopedStatement", buf, 0x26u);
    }
    else
    {
      v48 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
      v3 = (WebCore::SQLiteDatabase *)v58;
      while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v51) == 100)
      {
        if (!v52)
        {
          WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase((WebCore::SQLiteStatement *)v51, (uint64_t)this, 0, (uint64_t)buf);
          v10 = HIDWORD(v54);
          if (HIDWORD(v54) == (_DWORD)v54)
          {
            WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PrivateClickMeasurement>((uint64_t)&v53, (unint64_t)buf);
          }
          else
          {
            v11 = v53;
            v12 = v53 + 312 * HIDWORD(v54);
            *(_BYTE *)v12 = buf[0];
            v13 = *(_QWORD *)&buf[8];
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)(v12 + 8) = v13;
            v14 = *(_QWORD *)&buf[16];
            *(_QWORD *)&buf[16] = 0;
            *(_QWORD *)(v12 + 16) = v14;
            v15 = *(_OWORD *)v56;
            v16 = *(_OWORD *)&v56[9];
            *(_BYTE *)(v12 + 56) = 0;
            v17 = v12 + 56;
            *(_OWORD *)(v17 - 23) = v16;
            *(_OWORD *)(v17 - 32) = v15;
            *(_BYTE *)(v17 + 128) = 0;
            v18 = (_BYTE *)(v17 + 128);
            if (v57[128])
            {
              std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v17, (uint64_t)v57);
              *v18 = 1;
            }
            v19 = v11 + 312 * v10;
            v20 = v58[0];
            v21 = v58[1];
            *(_BYTE *)(v19 + 224) = 0;
            v22 = v19 + 224;
            *(_OWORD *)(v22 - 32) = v20;
            *(_OWORD *)(v22 - 16) = v21;
            *(_BYTE *)(v22 + 8) = 0;
            if (v60)
            {
              v23 = v59;
              v59 = 0;
              *(_QWORD *)v22 = v23;
              *(_BYTE *)(v22 + 8) = 1;
            }
            v24 = v11 + 312 * v10;
            v25 = v61;
            v61 = 0;
            *(_QWORD *)(v24 + 240) = v25;
            v26 = v62;
            v62 = 0;
            *(_QWORD *)(v24 + 248) = v26;
            v27 = v63;
            v63 = 0;
            *(_QWORD *)(v24 + 256) = v27;
            v28 = v64;
            v64 = 0;
            *(_QWORD *)(v24 + 264) = v28;
            *(_BYTE *)(v24 + 272) = 0;
            *(_BYTE *)(v24 + 296) = 0;
            if (v68)
            {
              v29 = v65;
              v65 = 0;
              *(_QWORD *)(v24 + 272) = v29;
              v30 = v11 + 312 * v10;
              v31 = v66;
              v66 = 0;
              *(_QWORD *)(v30 + 280) = v31;
              v32 = v67;
              v67 = 0;
              *(_QWORD *)(v30 + 288) = v32;
              *(_BYTE *)(v24 + 296) = 1;
            }
            v33 = v69;
            v69 = 0;
            *(_QWORD *)(v11 + 312 * v10 + 304) = v33;
            ++HIDWORD(v54);
          }
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v9);
          if (!v52)
            continue;
        }
LABEL_22:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_23;
      }
    }
    v8 = v52;
    v3 = v48;
LABEL_5:
    if (v8 != -1)
      (*(&off_1E34C0CF8 + v8))((int)buf, (WebCore::SQLiteStatement *)v51);
    if (v4)
      return WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v7);
LABEL_23:
    v49 = 0;
    v50 = 0;
    WebCore::SQLiteDatabase::prepareStatement();
    v34 = v52;
    if (v52)
    {
      v35 = qword_1ECE71758;
      v36 = os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR);
      v38 = v34;
      if (!(_DWORD)v36)
        goto LABEL_25;
      v45 = *((_QWORD *)this + 81);
      Error = WebCore::SQLiteDatabase::lastError(v3);
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v3);
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v45;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v56 = Error;
      *(_WORD *)&v56[4] = 2081;
      *(_QWORD *)&v56[6] = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v35, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary: failed to prepare attributedScopedStatement", buf, 0x26u);
    }
    else
    {
      while (1)
      {
        v36 = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v51);
        if ((_DWORD)v36 != 100)
          break;
        if (!v52)
        {
          WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase((WebCore::SQLiteStatement *)v51, (uint64_t)this, 1, (uint64_t)buf);
          if (HIDWORD(v50) == (_DWORD)v50)
          {
            WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PrivateClickMeasurement>((uint64_t)&v49, (unint64_t)buf);
          }
          else
          {
            WebCore::PrivateClickMeasurement::PrivateClickMeasurement(v49 + 312 * HIDWORD(v50), (uint64_t)buf);
            ++HIDWORD(v50);
          }
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v39);
          if (!v52)
            continue;
        }
        goto LABEL_22;
      }
    }
    v38 = v52;
LABEL_25:
    if (v38 != -1)
      v36 = (*(&off_1E34C0CF8 + v38))((int)buf, (WebCore::SQLiteStatement *)v51);
    if (v34)
      goto LABEL_28;
    if (HIDWORD(v54) | HIDWORD(v50))
    {
      WTF::RunLoop::main((WTF::RunLoop *)v36);
      v40 = (unsigned __int8 **)*((_QWORD *)this + 13);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v40);
      *(_QWORD *)buf = v40;
      WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v53, (uint64_t)&buf[8]);
      WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v49, (uint64_t)v56);
      WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0,void>(v51, (uint64_t *)buf);
      WTF::RunLoop::dispatch();
      v42 = v51[0];
      v51[0] = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0::~$_0((unsigned __int8 ***)buf, v41);
    }
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)buf);
    WebKit::ResourceLoadStatisticsStore::deleteTable((uint64_t)this, (uint64_t)"UnattributedPrivateClickMeasurement", 0x100000023);
    WebKit::ResourceLoadStatisticsStore::deleteTable((uint64_t)this, (uint64_t)"AttributedPrivateClickMeasurement", 0x100000021);
    v43 = *(_QWORD *)buf;
    if (buf[8])
    {
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 16))(*(_QWORD *)buf);
    }
    else if (!*(_QWORD *)buf)
    {
      goto LABEL_28;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
LABEL_28:
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v37);
    return WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v7);
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::checkForMissingTablesInSchema(WebKit::ResourceLoadStatisticsStore *this, WebKit::ResourceLoadStatisticsStore *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  int v8;
  char v9;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  WebKit::ResourceLoadStatisticsStore::expectedTableAndIndexQueries(a2);
  if (HIDWORD(qword_1ECE72980))
  {
    if ((_DWORD)qword_1ECE72980)
    {
      v5 = 32 * qword_1ECE72980;
      v6 = (WTF::StringImpl **)qword_1ECE72978;
      while (!*v6)
      {
        v6 += 4;
        v5 -= 32;
        if (!v5)
          goto LABEL_14;
      }
    }
    else
    {
      v6 = (WTF::StringImpl **)qword_1ECE72978;
    }
    v7 = qword_1ECE72978 + 32 * qword_1ECE72980;
    if (v6 != (WTF::StringImpl **)v7)
    {
LABEL_9:
      if (!WebKit::ResourceLoadStatisticsStore::tableExists((uint64_t)a2))
      {
        v11 = *v6;
        if (*v6)
          *(_DWORD *)v11 += 2;
        v15 = v11;
        v12 = HIDWORD(v17);
        if (HIDWORD(v17) == (_DWORD)v17)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v16, (unint64_t)&v15);
        }
        else
        {
          v15 = 0;
          *(_QWORD *)(v16 + 8 * HIDWORD(v17)) = v11;
          HIDWORD(v17) = v12 + 1;
        }
        v13 = v15;
        v15 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v4);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      while (1)
      {
        v6 += 4;
        if (v6 == (WTF::StringImpl **)v7)
          break;
        if (*v6)
        {
          if (v6 != (WTF::StringImpl **)v7)
            goto LABEL_9;
          break;
        }
      }
      v8 = HIDWORD(v17);
      if (HIDWORD(v17))
      {
        *(_QWORD *)this = v16;
        v14 = v17;
        v16 = 0;
        v17 = 0;
        *((_DWORD *)this + 2) = v14;
        *((_DWORD *)this + 3) = v8;
        v9 = 1;
        goto LABEL_15;
      }
    }
  }
LABEL_14:
  v9 = 0;
  *(_BYTE *)this = 0;
LABEL_15:
  *((_BYTE *)this + 16) = v9;
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v4);
}

BOOL WebKit::ResourceLoadStatisticsStore::tableExists(uint64_t a1)
{
  _BOOL8 v2;
  NSObject *v4;
  uint64_t v5;
  int Error;
  uint64_t ErrorMsg;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WebCore::SQLiteStatement *v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 616), (uint64_t)"tableExists", (WebCore::SQLiteStatementAutoResetScope *)&v12);
  if (!v12)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      v2 = 0;
      goto LABEL_4;
    }
    v5 = *(_QWORD *)(a1 + 648);
    Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    *(_DWORD *)buf = 134218755;
    v14 = a1;
    v15 = 2048;
    v16 = v5;
    v17 = 1024;
    v18 = Error;
    v19 = 2081;
    v20 = ErrorMsg;
    v8 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::tableExists: failed to prepare statement";
LABEL_10:
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, v8, buf, 0x26u);
    goto LABEL_8;
  }
  if (WebCore::SQLiteStatement::bindText())
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    v9 = *(_QWORD *)(a1 + 648);
    v10 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
    v11 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    *(_DWORD *)buf = 134218755;
    v14 = a1;
    v15 = 2048;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    v19 = 2081;
    v20 = v11;
    v8 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::tableExists: failed to bind parameter";
    goto LABEL_10;
  }
  v2 = WebCore::SQLiteStatement::step(v12) == 100;
LABEL_4:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v12);
  return v2;
}

uint64_t WebKit::DatabaseUtilities::scopedStatement@<X0>(uint64_t a1@<X0>, WebCore::SQLiteStatement **a2@<X1>, uint64_t a3@<X4>, WebCore::SQLiteStatementAutoResetScope *a4@<X8>)
{
  WebCore::SQLiteStatement *v6;
  uint64_t result;
  WebCore::SQLiteDatabase *v10;
  int v11;
  WebCore::SQLiteStatement *v12;
  NSObject *v13;
  WebCore::SQLiteStatement *v14;
  int v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t ErrorMsg;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (v6)
    return WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(a4, v6);
  v10 = (WebCore::SQLiteDatabase *)(a1 + 16);
  WebCore::SQLiteDatabase::prepareHeapStatement();
  v11 = v15;
  if (v15)
  {
    v13 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v17 = a1;
      v18 = 2080;
      v19 = a3;
      v20 = 2082;
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v10);
      _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::%s failed to prepare statement, error message: %{public}s", buf, 0x20u);
    }
    result = WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(a4, 0);
  }
  else
  {
    v12 = v14;
    v14 = 0;
    result = (uint64_t)std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](a2, v12);
  }
  if (v15 != -1)
    result = ((uint64_t (*)(uint8_t *, WebCore::SQLiteStatement **))off_1E34BC688[v15])(buf, &v14);
  if (!v11)
  {
    v6 = *a2;
    return WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(a4, v6);
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::addMissingTablesIfNecessary(WebKit::ResourceLoadStatisticsStore *this)
{
  WebKit::ResourceLoadStatisticsStore *v1;
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl **v15;
  int v16;
  unsigned int v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  int Error;
  uint64_t ErrorMsg;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  WebKit::ResourceLoadStatisticsStore *v33;
  WebCore::SQLiteDatabase *v34;
  uint64_t v35;
  char v36;
  WTF::StringImpl **v37;
  int v38;
  char v39;
  uint8_t buf[4];
  WebKit::ResourceLoadStatisticsStore *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v1 = this;
  v48 = *MEMORY[0x1E0C80C00];
  result = WebKit::ResourceLoadStatisticsStore::checkForMissingTablesInSchema((WebKit::ResourceLoadStatisticsStore *)&v37, this);
  if (v39)
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(v1, (uint64_t)&v35);
    if (v38)
    {
      v3 = v37;
      v4 = &v37[v38];
      v34 = (WebKit::ResourceLoadStatisticsStore *)((char *)v1 + 16);
      v33 = v1;
      while (1)
      {
        WebKit::ResourceLoadStatisticsStore::expectedTableAndIndexQueries(v1);
        v6 = qword_1ECE72978;
        if (!qword_1ECE72978)
        {
          v20 = 0;
          v21 = 1;
          goto LABEL_18;
        }
        v7 = qword_1ECE72980;
        v8 = dword_1ECE72988;
        v9 = *((_DWORD *)*v3 + 4);
        if (v9 >= 0x100)
        {
          v10 = v9 >> 8;
        }
        else
        {
          v10 = WTF::StringImpl::hashSlowCase(*v3);
          v6 = qword_1ECE72978;
        }
        v11 = v7 - 1;
        v12 = (v10 ^ v8) & (v7 - 1);
        v13 = v6 + 32 * v12;
        v14 = *(WTF **)v13;
        if (!*(_QWORD *)v13)
          break;
        v15 = v4;
        v16 = -1;
        while (1)
        {
          v17 = *((_DWORD *)v14 + 4);
          if (v17 >= 0x100)
            v18 = v17 >> 8;
          else
            v18 = WTF::StringImpl::hashSlowCase(v14);
          if (++v16 > (((_DWORD)v12 + v7 - ((v18 ^ v8) & v11)) & v11))
          {
LABEL_27:
            v20 = 0;
            v21 = 1;
            v4 = v15;
            v1 = v33;
            goto LABEL_18;
          }
          if (v18 == v10 && (WTF::equal(*(WTF **)v13, *v3, v5) & 1) != 0)
            break;
          v12 = ((_DWORD)v12 + 1) & v11;
          v13 = qword_1ECE72978 + 32 * v12;
          v14 = *(WTF **)v13;
          if (!*(_QWORD *)v13)
            goto LABEL_27;
        }
        v20 = *(WTF::StringImpl **)(v13 + 8);
        if (v20)
          *(_DWORD *)v20 += 2;
        v4 = v15;
        v1 = v33;
        if (*(_BYTE *)(v13 + 24))
        {
          v24 = *(WTF::StringImpl **)(v13 + 16);
          if (v24)
          {
            v25 = *(_DWORD *)v24;
            *(_DWORD *)v24 += 2;
            if (v25)
              *(_DWORD *)v24 = v25;
            else
              WTF::StringImpl::destroy(v24, v19);
          }
        }
        if (!v20)
          goto LABEL_30;
        v21 = 0;
LABEL_18:
        if ((WebCore::SQLiteDatabase::executeCommandSlow() & 1) == 0)
        {
          v23 = qword_1ECE71758;
          if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
          {
            v26 = *((_QWORD *)v1 + 81);
            Error = WebCore::SQLiteDatabase::lastError(v34);
            ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v34);
            *(_DWORD *)buf = 134218755;
            v41 = v1;
            v42 = 2048;
            v43 = v26;
            v44 = 1024;
            v45 = Error;
            v46 = 2081;
            v47 = ErrorMsg;
            _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::addMissingTablesIfNecessary: failed to execute statement", buf, 0x26u);
          }
        }
        if ((v21 & 1) == 0)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v22);
          else
            *(_DWORD *)v20 -= 2;
        }
        if (++v3 == v4)
          goto LABEL_40;
      }
      v20 = 0;
LABEL_30:
      v21 = 1;
      goto LABEL_18;
    }
LABEL_40:
    if (!WebKit::ResourceLoadStatisticsStore::createUniqueIndices(v1))
    {
      v30 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v32 = *((_QWORD *)v1 + 81);
        *(_DWORD *)buf = 134218240;
        v41 = v1;
        v42 = 2048;
        v43 = v32;
        _os_log_error_impl(&dword_196BCC000, v30, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::addMissingTablesIfNecessary: failed to create unique indices", buf, 0x16u);
      }
    }
    v31 = v35;
    if (v36)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
    }
    else if (!v35)
    {
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v29);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v29);
  }
  return result;
}

uint64_t WebKit::vectorEqualsArray<WTF::String,WTF::ASCIILiteral,13ul>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_DWORD *)(result + 12) == 13)
  {
    v2 = result;
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)(a2 + 8);
    while (v4 < *(unsigned int *)(v2 + 12))
    {
      if (*v5)
        v6 = *v5 - 1;
      else
        v6 = 0;
      result = MEMORY[0x19AEABBCC](*(_QWORD *)(*(_QWORD *)v2 + 8 * v4), *(v5 - 1), v6);
      if ((result & 1) != 0)
      {
        v3 = v4 > 0xB;
        v5 += 2;
        if (++v4 != 13)
          continue;
      }
      return v3;
    }
    __break(0xC471u);
  }
  else
  {
    return 0;
  }
  return result;
}

void WebKit::ResourceLoadStatisticsStore::includeTodayAsOperatingDateIfNecessary(WebKit::ResourceLoadStatisticsStore *this)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  double v9;
  uint64_t v10;
  int Error;
  uint64_t ErrorMsg;
  _BYTE v13[16];
  unsigned int v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  uint8_t buf[4];
  WebKit::ResourceLoadStatisticsStore *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v17 = WebKit::OperatingDate::today(this, *((double *)this + 80));
  v18 = v2;
  if (!*((_DWORD *)this + 164)
    || (v9 = WebKit::OperatingDate::secondsSinceEpoch((WebKit::OperatingDate *)&v17),
        v9 > WebKit::OperatingDate::secondsSinceEpoch((WebKit::ResourceLoadStatisticsStore *)((char *)this + 692))))
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)&v15);
    if (*((_DWORD *)this + 164) - 29 >= 1)
    {
      WebCore::SQLiteDatabase::prepareStatement();
      if (v14 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v13))
        goto LABEL_25;
      if (v14)
        goto LABEL_32;
      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v13) != 101)
      {
LABEL_25:
        v4 = qword_1ECE71758;
        if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
        {
LABEL_12:
          if (v14 != -1)
            (*(&off_1E34C0CF8 + v14))((int)buf, (WebCore::SQLiteStatement *)v13);
          v3 = v15;
          if (v16)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
          }
          else if (!v15)
          {
            return;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
          return;
        }
        v10 = *((_QWORD *)this + 81);
        Error = WebCore::SQLiteDatabase::lastError((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
        *(_DWORD *)buf = 134218755;
        v20 = this;
        v21 = 2048;
        v22 = v10;
        v23 = 1024;
        v24 = Error;
        v25 = 2081;
        v26 = ErrorMsg;
        v8 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::includeTodayAsOperating"
             "DateIfNecessary: failed to step deleteLeastRecentOperatingDateStatement";
LABEL_21:
        _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, v8, buf, 0x26u);
        goto LABEL_12;
      }
      if (v14 != -1)
        (*(&off_1E34C0CF8 + v14))((int)buf, (WebCore::SQLiteStatement *)v13);
    }
    WebCore::SQLiteDatabase::prepareStatement();
    if (v14 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v13))
      goto LABEL_19;
    if (v14)
      goto LABEL_32;
    if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v13))
      goto LABEL_19;
    if (v14)
      goto LABEL_32;
    if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v13))
    {
LABEL_19:
      v4 = qword_1ECE71758;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
        goto LABEL_12;
      v5 = *((_QWORD *)this + 81);
      v6 = WebCore::SQLiteDatabase::lastError((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
      v7 = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
      *(_DWORD *)buf = 134218755;
      v20 = this;
      v21 = 2048;
      v22 = v5;
      v23 = 1024;
      v24 = v6;
      v25 = 2081;
      v26 = v7;
      v8 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::includeTodayAsOperatingDa"
           "teIfNecessary: failed to step insertOperatingDateStatement";
      goto LABEL_21;
    }
    if (!v14)
    {
      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v13) == 101)
      {
        WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters(this);
        goto LABEL_12;
      }
      goto LABEL_19;
    }
LABEL_32:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
}

void WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters(WebKit::ResourceLoadStatisticsStore *this)
{
  WebCore::SQLiteDatabase *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  int Error;
  uint64_t ErrorMsg;
  const char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE v19[16];
  unsigned int v20;
  _BYTE v21[16];
  unsigned int v22;
  _BYTE v23[16];
  unsigned int v24;
  _BYTE buf[22];
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  WebCore::SQLiteDatabase::prepareStatement();
  WebCore::SQLiteDatabase::prepareStatement();
  if (v24 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v23) != 100)
  {
    v8 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    v9 = *((_QWORD *)this + 81);
    Error = WebCore::SQLiteDatabase::lastError(v2);
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    *(_DWORD *)buf = 134218755;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v9;
    v26 = 1024;
    v27 = Error;
    v28 = 2081;
    v29 = ErrorMsg;
    v12 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateOperatingDatesParame"
          "ters: failed to step countOperatingDatesStatement";
    goto LABEL_20;
  }
  if (v24)
    goto LABEL_25;
  *((_DWORD *)this + 164) = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v23);
  if (!v22 && WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v21) == 100)
  {
    if (!v22)
    {
      v3 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
      if (!v22)
      {
        v4 = v3;
        v5 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
        if (!v22)
        {
          v6 = v5;
          v7 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
          *((_DWORD *)this + 173) = v4;
          *((_DWORD *)this + 174) = v6;
          *((_DWORD *)this + 175) = v7;
          if (!v20)
          {
            *(_QWORD *)buf = this;
            *(_QWORD *)&buf[8] = v19;
            WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters(void)::$_0::operator()<std::optional<WebKit::OperatingDate>,unsigned int>(buf, (uint64_t)this + 676, 7);
            WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters(void)::$_0::operator()<std::optional<WebKit::OperatingDate>,unsigned int>(buf, (uint64_t)this + 660, 30);
            goto LABEL_11;
          }
          v8 = qword_1ECE71758;
          if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
          {
            v16 = *((_QWORD *)this + 81);
            v17 = WebCore::SQLiteDatabase::lastError(v2);
            v18 = WebCore::SQLiteDatabase::lastErrorMsg(v2);
            *(_DWORD *)buf = 134218755;
            *(_QWORD *)&buf[4] = this;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v16;
            v26 = 1024;
            v27 = v17;
            v28 = 2081;
            v29 = v18;
            v12 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateOperatingDat"
                  "esParameters: failed to prepare getOperatingDateWindowStatement";
            goto LABEL_20;
          }
          goto LABEL_11;
        }
      }
    }
LABEL_25:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v8 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    v13 = *((_QWORD *)this + 81);
    v14 = WebCore::SQLiteDatabase::lastError(v2);
    v15 = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    *(_DWORD *)buf = 134218755;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v13;
    v26 = 1024;
    v27 = v14;
    v28 = 2081;
    v29 = v15;
    v12 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateOperatingDatesParame"
          "ters: failed to step getMostRecentOperatingDateStatement";
LABEL_20:
    _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, v12, buf, 0x26u);
  }
LABEL_11:
  if (v20 != -1)
    (*(&off_1E34C0CF8 + v20))((int)buf, (WebCore::SQLiteStatement *)v19);
  if (v22 != -1)
    (*(&off_1E34C0CF8 + v22))((int)buf, (WebCore::SQLiteStatement *)v21);
  if (v24 != -1)
    (*(&off_1E34C0CF8 + v24))((int)buf, (WebCore::SQLiteStatement *)v23);
}

void WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters(void)::$_0::operator()<std::optional<WebKit::OperatingDate>,unsigned int>(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  WebCore::SQLiteStatement *v6;
  WebCore::SQLiteStatement *v7;
  WebCore::SQLiteStatement *v8;
  WebCore::SQLiteStatement *v9;
  int v10;
  WebCore::SQLiteStatement *v11;
  int v12;
  WebCore::SQLiteStatement *v13;
  int v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int Error;
  __int16 v24;
  uint64_t ErrorMsg;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (*(_DWORD *)(*a1 + 656) <= (a3 - 1))
  {
    if (*(_BYTE *)(a2 + 12))
      *(_BYTE *)(a2 + 12) = 0;
  }
  else
  {
    v6 = (WebCore::SQLiteStatement *)a1[1];
    if (*((_DWORD *)v6 + 4))
      goto LABEL_17;
    WebCore::SQLiteStatement::reset(v6);
    v7 = (WebCore::SQLiteStatement *)a1[1];
    if (*((_DWORD *)v7 + 4))
      goto LABEL_17;
    if (!WebCore::SQLiteStatement::bindInt(v7))
    {
      v8 = (WebCore::SQLiteStatement *)a1[1];
      if (*((_DWORD *)v8 + 4))
        goto LABEL_17;
      if (WebCore::SQLiteStatement::step(v8) == 100)
      {
        v9 = (WebCore::SQLiteStatement *)a1[1];
        if (!*((_DWORD *)v9 + 4))
        {
          v10 = WebCore::SQLiteStatement::columnInt(v9);
          v11 = (WebCore::SQLiteStatement *)a1[1];
          if (!*((_DWORD *)v11 + 4))
          {
            v12 = WebCore::SQLiteStatement::columnInt(v11);
            v13 = (WebCore::SQLiteStatement *)a1[1];
            if (!*((_DWORD *)v13 + 4))
            {
              v14 = WebCore::SQLiteStatement::columnInt(v13);
              v15 = *(unsigned __int8 *)(a2 + 12);
              *(_DWORD *)a2 = v10;
              *(_DWORD *)(a2 + 4) = v12;
              *(_DWORD *)(a2 + 8) = v14;
              if (!v15)
                *(_BYTE *)(a2 + 12) = 1;
              return;
            }
          }
        }
LABEL_17:
        std::__throw_bad_variant_access[abi:sn180100]();
      }
    }
    v16 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(v4 + 648);
      v18 = 134218755;
      v19 = v4;
      v20 = 2048;
      v21 = v17;
      v22 = 1024;
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v4 + 16));
      v24 = 2081;
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v4 + 16));
      _os_log_error_impl(&dword_196BCC000, v16, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateOperatingDatesParameters: failed to step getOperatingDateWindowStatement", (uint8_t *)&v18, 0x26u);
    }
  }
}

uint64_t WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v2;
  unsigned __int8 **v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v2 = *((_QWORD *)this + 25);
  WTF::RunLoop::main(this);
  v3 = (unsigned __int8 **)*((_QWORD *)this + 13);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C0F48;
  v4[1] = v3;
  v4[2] = v2;
  v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::didCreateNetworkProcess(unsigned __int8 ***this)
{
  _QWORD *v2;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34C1088;
  v4 = v2;
  WebKit::ResourceLoadStatisticsStore::updateCookieBlocking((uint64_t)this, (uint64_t *)&v4);
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(this);
  return WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap((WebKit::ResourceLoadStatisticsStore *)this);
}

uint64_t WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(unsigned __int8 ***this)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WTF::RunLoop::main((WTF::RunLoop *)this);
  v2 = this[13];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2);
  v3 = this[23];
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C0EF8;
  v4[1] = v2;
  v4[2] = v3;
  v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *WebKit::DatabaseUtilities::beginTransactionIfNecessary@<X0>(WebKit::DatabaseUtilities *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;

  if (*((_BYTE *)this + 88))
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *result = &unk_1E34BC790;
  }
  else
  {
    WebCore::SQLiteTransaction::begin((WebKit::DatabaseUtilities *)((char *)this + 80));
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *result = off_1E34BC7B8;
    result[1] = this;
  }
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

void WebKit::DatabaseUtilities::enableForeignKeys(WebKit::DatabaseUtilities *this)
{
  WebCore::SQLiteDatabase *v2;
  NSObject *v3;
  uint64_t ErrorMsg;
  _BYTE v5[16];
  unsigned int v6;
  uint8_t buf[4];
  WebKit::DatabaseUtilities *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (WebKit::DatabaseUtilities *)((char *)this + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  if (v6 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v5) != 101)
  {
    v3 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
      *(_DWORD *)buf = 134218243;
      v8 = this;
      v9 = 2081;
      v10 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::enableForeignKeys failed, error message: %{private}s", buf, 0x16u);
    }
  }
  if (v6 != -1)
    (*(&off_1E34BC698 + v6))((int)buf, (WebCore::SQLiteStatement *)v5);
}

unint64_t WebKit::OperatingDate::today(WTF::WallTime *a1, double a2)
{
  WTF *v3;
  double v4;

  v3 = (WTF *)WTF::WallTime::now(a1);
  return WebKit::OperatingDate::fromWallTime(v3, a2 + v4);
}

unint64_t WebKit::OperatingDate::fromWallTime(WTF *a1, double a2)
{
  double v2;
  WTF *v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  _BOOL4 v7;
  int v8;
  int v9;
  WTF *v10;
  uint64_t v11;

  v2 = a2 * 1000.0;
  v3 = (WTF *)WTF::msToYear(a1, a2 * 1000.0);
  v4 = v3;
  HIDWORD(v6) = -1030792151 * (_DWORD)v3 + 85899344;
  LODWORD(v6) = HIDWORD(v6);
  v5 = v6 >> 4;
  LODWORD(v6) = HIDWORD(v6);
  v7 = (v6 >> 2) > 0x28F5C28;
  v8 = v5 < 0xA3D70B || v7;
  if ((v3 & 3) != 0)
    v9 = 0;
  else
    v9 = v8;
  v10 = (WTF *)WTF::dayInYear(v3, v2);
  v11 = WTF::monthFromDayInYear(v10, v9);
  WTF::dayInMonthFromDayInYear(v10, v9);
  return v4 | (unint64_t)(v11 << 32);
}

uint64_t WTF::dayInYear(WTF *this, double a2)
{
  return (int)(floor(a2 / 86400000.0)
                           - (floor(((double)(int)this + -1.0) / 400.0)
                            + -4.0
                            + floor(((double)(int)this + -1.0) * 0.25)
                            + -492.0
                            + ((double)(int)this + -1970.0) * 365.0
                            - (floor(((double)(int)this + -1.0) / 100.0)
                             + -19.0)));
}

uint64_t WTF::msToYear(WTF *this, double a2)
{
  uint64_t result;
  double v3;
  double v4;
  unsigned int v5;
  unint64_t v6;
  BOOL v7;

  result = (int)(floor(a2 / 3.1556952e10) + 1970.0);
  v3 = 365.0;
  v4 = (floor(((double)(int)result + -1.0) / 400.0)
      + -4.0
      + floor(((double)(int)result + -1.0) * 0.25)
      + -492.0
      + ((double)(int)result + -1970.0) * 365.0
      - (floor(((double)(int)result + -1.0) / 100.0)
       + -19.0))
     * 86400000.0;
  if (v4 > a2)
    return (result - 1);
  if ((result & 3) == 0)
  {
    HIDWORD(v6) = -1030792151 * result + 85899344;
    LODWORD(v6) = HIDWORD(v6);
    v5 = v6 >> 4;
    LODWORD(v6) = HIDWORD(v6);
    v7 = (v6 >> 2) <= 0x28F5C28 && v5 >= 0xA3D70B;
    v3 = 365.0;
    if (!v7)
      v3 = 366.0;
  }
  if (v4 + v3 * 86400000.0 <= a2)
    return (result + 1);
  return result;
}

uint64_t WTF::dayInMonthFromDayInYear(WTF *this, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if ((int)this <= 30)
    return ((_DWORD)this + 1);
  if (a2)
    v2 = 59;
  else
    v2 = 58;
  if (v2 >= this)
  {
    v2 = 30;
  }
  else if (v2 + 31 < this)
  {
    if (v2 + 61 >= this)
    {
      v2 += 31;
    }
    else if (v2 + 92 >= this)
    {
      v2 += 61;
    }
    else
    {
      v3 = v2 + 122;
      if (v2 + 122 >= this)
      {
        v2 += 92;
      }
      else
      {
        v4 = v2 + 153;
        v5 = v2 + 184;
        v6 = v2 + 214;
        v7 = v2 + 245;
        v2 += 275;
        if (v2 >= this)
          v2 = v7;
        if (v7 >= this)
          v2 = v6;
        if (v6 >= this)
          v2 = v5;
        if (v5 >= this)
          v2 = v4;
        if (v4 >= this)
          v2 = v3;
      }
    }
  }
  return this - v2;
}

uint64_t WTF::monthFromDayInYear(WTF *this, int a2)
{
  unsigned int v2;

  if ((int)this < 31)
    return 0;
  if (a2)
    v2 = 60;
  else
    v2 = 59;
  if (v2 > this)
    return 1;
  if (v2 + 31 > this)
    return 2;
  if (v2 + 61 > this)
    return 3;
  if (v2 + 92 > this)
    return 4;
  if (v2 + 122 > this)
    return 5;
  if (v2 + 153 > this)
    return 6;
  if (v2 + 184 > this)
    return 7;
  if (v2 + 214 > this)
    return 8;
  if (v2 + 245 > this)
    return 9;
  if (v2 + 275 > this)
    return 10;
  return 11;
}

void WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, _DWORD *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*((_DWORD *)a1 + 3))
  {
    v3 = (WTF::StringImpl *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v4 = (WTF::StringImpl *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::String>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void WebKit::WebPage::setLinkDecorationFilteringData(uint64_t a1, _DWORD *a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl **v10;
  NSObject *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  _OWORD *v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t buf[24];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a1 + 2432);
  v5 = *(_QWORD *)(a1 + 2432);
  if (v5)
  {
    *v4 = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  v6 = a2[3];
  if (!v6)
    return;
  v7 = *(_QWORD *)a2;
  v8 = v7 + 24 * v6;
  v9 = &unk_1ECE71000;
  do
  {
    v10 = (WTF::StringImpl **)(v7 + 16);
    if ((unint64_t)(*(_QWORD *)(v7 + 16) + 1) <= 1)
    {
      v11 = *((_QWORD *)v9 + 235);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v36 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v36;
        _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "%p - [webPageID=%llu] WebPage::Unable to set link decoration filtering data (invalid key)", buf, 0x16u);
      }
      goto LABEL_8;
    }
    v12 = *v4;
    if (*v4
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v4, 0), (v12 = *v4) != 0))
    {
      v13 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = *((_DWORD *)*v10 + 4);
    if (v14 >= 0x100)
      v15 = v14 >> 8;
    else
      v15 = WTF::StringImpl::hashSlowCase(*v10);
    v16 = 0;
    for (i = 1; ; ++i)
    {
      v18 = v15 & v13;
      v19 = v12 + 32 * v18;
      v20 = *(WTF **)v19;
      if (*(_QWORD *)v19 == -1)
      {
        v16 = (_OWORD *)(v12 + 32 * v18);
        goto LABEL_21;
      }
      if (!v20)
        break;
      if ((WTF::equal(v20, *v10, a3) & 1) != 0)
        goto LABEL_39;
LABEL_21:
      v15 = i + v18;
    }
    if (v16)
    {
      *v16 = 0u;
      v16[1] = 0u;
      --*(_DWORD *)(*v4 - 16);
      v19 = (uint64_t)v16;
    }
    WTF::String::operator=((WTF::StringImpl **)v19, (WTF::StringImpl *)(v7 + 16));
    memset(buf, 0, sizeof(buf));
    v22 = *(WTF::StringImpl ***)(v19 + 8);
    *(_QWORD *)(v19 + 8) = 0;
    if (v22)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v22, v21);
    v23 = *(unsigned int *)(v19 + 28);
    if ((_DWORD)v23)
      WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(v19 + 16), (WTF::StringImpl *)(*(_QWORD *)(v19 + 16) + 8 * v23));
    v24 = *(WTF **)(v19 + 16);
    if (v24)
    {
      *(_QWORD *)(v19 + 16) = 0;
      *(_DWORD *)(v19 + 24) = 0;
      WTF::fastFree(v24, v21);
    }
    *(_QWORD *)(v19 + 16) = *(_QWORD *)&buf[8];
    v25 = *(_QWORD *)&buf[16];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)(v19 + 24) = v25;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf[8], v21);
    if (*(_QWORD *)buf)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v26);
    v27 = *v4;
    if (*v4)
      v28 = *(_DWORD *)(v27 - 12) + 1;
    else
      v28 = 1;
    *(_DWORD *)(v27 - 12) = v28;
    v29 = *v4;
    if (*v4)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 <= 2 * v31)
LABEL_38:
        v19 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v4, v19);
    }
    else if (3 * v32 <= 4 * v31)
    {
      goto LABEL_38;
    }
LABEL_39:
    if (*(_QWORD *)v7
      && *(_DWORD *)(*(_QWORD *)v7 + 4)
      && (MEMORY[0x19AEABBCC]() & 1) == 0
      && *(_QWORD *)v7 != -1
      && (WTF::equal(*(WTF **)v7, 0, a3) & 1) == 0)
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v19 + 8), (WTF::ASCIICaseInsensitiveHash **)v7, (uint64_t)buf);
    }
    v33 = *(_DWORD **)(v7 + 8);
    v9 = &unk_1ECE71000;
    if (v33 && v33[1])
    {
      v34 = *(unsigned int *)(v19 + 28);
      if ((_DWORD)v34 == *(_DWORD *)(v19 + 24))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(v19 + 16, v7 + 8);
      }
      else
      {
        v35 = *(_QWORD *)(v19 + 16);
        *v33 += 2;
        *(_QWORD *)(v35 + 8 * v34) = v33;
        *(_DWORD *)(v19 + 28) = v34 + 1;
      }
    }
LABEL_8:
    v7 += 24;
  }
  while (v7 != v8);
}

WTF *WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2)
{
  WTF *result;
  uint64_t v5;

  result = *(WTF **)a1;
  if (result)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v5;
  LODWORD(v5) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  uint64_t result;
  uint64_t v38;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_4:
  v6 = WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 32 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = 0;
    v38 = v3;
    do
    {
      v12 = v2 + 32 * v10;
      v13 = *(WTF::StringImpl **)v12;
      if (*(_QWORD *)v12)
      {
        if (v13 != (WTF::StringImpl *)-1)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v13 + 4);
          if (v16 >= 0x100)
            v17 = v16 >> 8;
          else
            v17 = WTF::StringImpl::hashSlowCase(v13);
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v14 + 32 * v19));
          v20 = v14 + 32 * v19;
          v21 = (_QWORD *)(v20 + 16);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 + 16, v7);
          v24 = (_QWORD *)(v20 + 8);
          v23 = *(WTF::StringImpl ***)(v20 + 8);
          if (v23)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v22);
          v25 = *(WTF::StringImpl **)v20;
          *(_QWORD *)v20 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v22);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)v20 = v26;
          v27 = v2 + 32 * v10;
          *v24 = 0;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *v24 = v28;
          *v21 = 0;
          *(_QWORD *)(v20 + 24) = 0;
          v29 = *(_QWORD *)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          *v21 = v29;
          LODWORD(v28) = *(_DWORD *)(v27 + 24);
          *(_DWORD *)(v27 + 24) = 0;
          v30 = v14 + 32 * v19;
          *(_DWORD *)(v30 + 24) = v28;
          LODWORD(v28) = *(_DWORD *)(v27 + 28);
          *(_DWORD *)(v27 + 28) = 0;
          *(_DWORD *)(v30 + 28) = v28;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 + 16, v22);
          v31 = *(WTF::StringImpl ***)(v27 + 8);
          if (v31)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, (WTF::StringImpl *)v7);
          v32 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v7);
            else
              *(_DWORD *)v32 -= 2;
          }
          if (v12 == a2)
            v11 = v14 + 32 * v19;
        }
      }
      else
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 + 16, v7);
        v33 = *(WTF::StringImpl ***)(v12 + 8);
        if (v33)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, (WTF::StringImpl *)v7);
        v34 = *(WTF::StringImpl **)v12;
        *(_QWORD *)v12 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v7);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      ++v10;
    }
    while (v10 != v38);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v2)
      return result;
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

uint64_t WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(unsigned int *a1)
{
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1)
       + 8 * a1[3];
}

WTF::StringImpl *WTF::VectorTypeOperations<WTF::String>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  return WTF::VectorDestructor<true,WTF::String>::destruct(a1, a2);
}

void WebKit::DatabaseUtilities::columnsForTable(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  uint64_t v6;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  _QWORD v18[2];
  unsigned int v19;
  _BYTE buf[12];
  __int16 v21;
  uint64_t ErrorMsg;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a3)
    v5 = a3 - 1;
  else
    v5 = 0;
  if (v5 >> 31
    || __OFADD__((_DWORD)v5, 1)
    || (v6 = (v5 + 19), __OFADD__(v5 + 1, 18))
    || (WTF::tryFastCompactMalloc((WTF *)(v6 + 20)), (v9 = v18[0]) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x196CE5A30);
  }
  *(_DWORD *)v18[0] = 2;
  *(_DWORD *)(v9 + 4) = v6;
  *(_QWORD *)(v9 + 8) = v9 + 20;
  *(_DWORD *)(v9 + 16) = 4;
  *(_WORD *)(v9 + 36) = 10351;
  *(_OWORD *)(v9 + 20) = *(_OWORD *)"PRAGMA table_info(";
  v10 = (_BYTE *)(v9 + 38);
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
      *v10 = *a2;
    else
      memcpy((void *)(v9 + 38), a2, v5);
  }
  v10[v5] = 41;
  WebCore::SQLiteDatabase::prepareStatementSlow();
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v9, v11);
  else
    *(_DWORD *)v9 -= 2;
  if (v19)
  {
    v17 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218243;
      *(_QWORD *)&buf[4] = a1;
      v21 = 2081;
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "%p - Database::columnsForTable Unable to prepare statement to fetch schema for table, error message: %{private}s", buf, 0x16u);
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v18) == 100)
    {
      if (!v19)
      {
        WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v18);
        v13 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v13 == *(_DWORD *)(a4 + 8))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(a4, (unint64_t)buf);
        }
        else
        {
          v14 = *(_QWORD *)a4;
          v15 = *(_QWORD *)buf;
          if (*(_QWORD *)buf)
            **(_DWORD **)buf += 2;
          *(_QWORD *)(v14 + 8 * v13) = v15;
          *(_DWORD *)(a4 + 12) = v13 + 1;
        }
        v16 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v12);
          else
            *(_DWORD *)v16 -= 2;
        }
        if (!v19)
          continue;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
  }
  if (v19 != -1)
    (*(&off_1E34BC698 + v19))((int)buf, (WebCore::SQLiteStatement *)v18);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(uint64_t a1, unint64_t a2)
{
  _DWORD **v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::determineTrackingPreventionState(void)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  int v2;
  uint64_t isFullWebBrowserOrRunningTest;
  BOOL v4;
  unsigned __int8 v5;
  WebKit *TCC_kTCCServiceWebKitIntelligentTrackingPrevention;
  const __CFDictionary *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  v2 = *(unsigned __int8 *)(a1 + 8);
  isFullWebBrowserOrRunningTest = WebKit::isFullWebBrowserOrRunningTest((WebKit *)(a1 + 16), a2);
  if (v2)
    v4 = 0;
  else
    v4 = (_DWORD)isFullWebBrowserOrRunningTest == 0;
  if (v4)
    goto LABEL_10;
  if ((isFullWebBrowserOrRunningTest & 1) == 0)
  {
    if ((byte_1ECE721C1 & 1) == 0)
    {
      isFullWebBrowserOrRunningTest = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "objectForInfoDictionaryKey:", CFSTR("NSCrossWebsiteTrackingUsageDescription"));
      _MergedGlobals_57 = isFullWebBrowserOrRunningTest != 0;
      byte_1ECE721C1 = 1;
    }
    v5 = atomic_load((unsigned __int8 *)&_MergedGlobals_57);
    if ((v5 & 1) == 0)
      goto LABEL_11;
  }
  TCC_kTCCServiceWebKitIntelligentTrackingPrevention = (WebKit *)WebKit::get_TCC_kTCCServiceWebKitIntelligentTrackingPrevention((WebKit *)isFullWebBrowserOrRunningTest);
  isFullWebBrowserOrRunningTest = WebKit::softLinkTCCTCCAccessPreflight(TCC_kTCCServiceWebKitIntelligentTrackingPrevention, 0, v7);
  if ((_DWORD)isFullWebBrowserOrRunningTest == 1)
LABEL_10:
    v8 = 2;
  else
LABEL_11:
    v8 = 1;
  atomic_store(v8, WebKit::currentTrackingPreventionState);
  WTF::RunLoop::main((WTF::RunLoop *)isFullWebBrowserOrRunningTest);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E34B7A80;
  v11 = v9;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v11;
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

void sub_196CE5C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

const void **WebKit::SessionWrapper::initialize(uint64_t a1, WebKit::AuxiliaryProcess *a2, WebKit **a3, int a4)
{
  int isParentProcessAFullWebBrowser;
  WKNetworkSessionDelegate *v9;
  const void *v10;

  isParentProcessAFullWebBrowser = WebKit::isParentProcessAFullWebBrowser(a3[4], a2);
  if (!-[WebKit::AuxiliaryProcess _sourceApplicationSecondaryIdentifier](a2, "_sourceApplicationSecondaryIdentifier")
    && isParentProcessAFullWebBrowser)
  {
    -[WebKit::AuxiliaryProcess set_sourceApplicationSecondaryIdentifier:](a2, "set_sourceApplicationSecondaryIdentifier:", CFSTR("com.apple.WebKit.InAppBrowser"));
  }
  WebKit::NetworkSessionCocoa::applyProxyConfigurationToSessionConfiguration((WebKit::NetworkSessionCocoa *)a3, (NSURLSessionConfiguration *)a2);
  v9 = -[WKNetworkSessionDelegate initWithNetworkSession:wrapper:withCredentials:]([WKNetworkSessionDelegate alloc], "initWithNetworkSession:wrapper:withCredentials:", a3, a1, a4 == 1);
  v10 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  if (v10)
  {
    CFRelease(v10);
    v9 = *(WKNetworkSessionDelegate **)(a1 + 16);
  }
  return WTF::RetainPtr<NSURLSession>::operator=((const void **)(a1 + 8), (CFTypeRef)objc_msgSend(MEMORY[0x1E0C92C98], "sessionWithConfiguration:delegate:delegateQueue:", a2, v9, objc_msgSend(MEMORY[0x1E0CB3828], "mainQueue")));
}

void WebKit::NetworkSessionCocoa::applyProxyConfigurationToSessionConfiguration(WebKit::NetworkSessionCocoa *this, NSURLSessionConfiguration *a2)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (*((_DWORD *)this + 233))
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 233));
    v5 = *((unsigned int *)this + 233);
    if ((_DWORD)v5)
    {
      v6 = (_QWORD *)*((_QWORD *)this + 115);
      v7 = 8 * v5;
      do
      {
        objc_msgSend(v4, "addObject:", *v6++);
        v7 -= 8;
      }
      while (v7);
    }
    -[NSURLSessionConfiguration setProxyConfigurations:](a2, "setProxyConfigurations:", v4);
    if (v4)
      CFRelease(v4);
  }
  else
  {
    -[NSURLSessionConfiguration setProxyConfigurations:](a2, "setProxyConfigurations:", MEMORY[0x1E0C9AA60]);
  }
}

void sub_196CE5DF0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::NetworkDataTaskCocoa *WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(WebKit::NetworkDataTaskCocoa *this, WebKit::NetworkSession *a2, WebKit::NetworkDataTaskClient *a3, const WebKit::NetworkLoadParameters *a4)
{
  WebCore::ResourceRequestBase *v7;
  WebKit::NetworkTaskCocoa *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  char *v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  const void *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  const void *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  const WebCore::Credential *v49;
  int v50;
  int shouldBlockCookies;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  WTF::URL *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::URL *PartyForCookies;
  unsigned __int8 *v61;
  uint64_t v62;
  NSURLSession *v63;
  NSURLRequest *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  CFTypeRef v75;
  const void *v77;
  const void *v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t v110;
  unsigned __int8 **v111;
  uint64_t *v112;
  int v113;
  WTF::ThreadSafeWeakPtrControlBlock *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  NSObject *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  double v128;
  _DWORD *v129;
  const WebCore::ResourceRequest *v130;
  NSObject *v131;
  uint64_t v132;
  char *v133;
  unsigned int v134;
  char *v135;
  float *v136;
  float v137;
  int v138;
  void *v139;
  unsigned __int8 *v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t *v144;
  NSObject *v145;
  NSObject *v146;
  const void *v147;
  os_signpost_id_t v148;
  const void *host_with_numeric_port;
  char *v150;
  unsigned int v151;
  char *v152;
  float *v153;
  float v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  int i;
  WTF *v159;
  WTF *v160;
  WTF::StringImpl *v161;
  __int128 v162;
  __int128 v163;
  NSURLSessionTask v164;
  char v165;
  _DWORD *v166;
  _DWORD *v167;
  _DWORD *v168;
  uint64_t v169;
  char v170;
  CFTypeRef cf;
  _BYTE buf[24];
  _BYTE v173[10];
  _BYTE v174[10];
  _BYTE v175[10];
  __int16 v176;
  double v177;
  __int16 v178;
  int v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  v7 = (const WebKit::NetworkLoadParameters *)((char *)a4 + 88);
  v8 = (WebKit::NetworkTaskCocoa *)(WebKit::NetworkDataTask::NetworkDataTask((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (const WebKit::NetworkLoadParameters *)((char *)a4 + 88), *((_BYTE *)a4 + 290), *((_BYTE *)a4 + 292), *((_BYTE *)a4 + 294))+ 552);
  WebKit::NetworkTaskCocoa::NetworkTaskCocoa((uint64_t)v8, (uint64_t)a2, *((_BYTE *)a4 + 2880));
  *(_QWORD *)this = off_1E34B5930;
  *((_QWORD *)this + 69) = &unk_1E34B59C0;
  v9 = (unsigned int *)WebKit::NetworkSessionCocoa::sessionWrapperForTask((uint64_t)a2, *(WebKit::AuxiliaryProcess **)a4, v7, *((unsigned __int8 *)a4 + 290), *((_WORD *)a4 + 1472));
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v9, (uint64_t)v9);
  v10 = *(unsigned int **)v9;
  if (*(_QWORD *)v9)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *((_QWORD *)this + 74) = v10;
  *(_OWORD *)((char *)this + 600) = 0u;
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebKit::NetworkDataTaskCocoa *)((char *)this + 616));
  *(_OWORD *)((char *)this + 744) = *((_OWORD *)a4 + 1);
  *((_QWORD *)this + 95) = *((_QWORD *)a4 + 1);
  *((_QWORD *)this + 96) = *(_QWORD *)a4;
  *((_BYTE *)this + 776) = *((_BYTE *)a4 + 2864);
  v12 = (unsigned int *)*((_QWORD *)a4 + 5);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  *((_QWORD *)this + 98) = v12;
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v164, v7);
  v14 = (_DWORD *)*((_QWORD *)a4 + 30);
  if (v14)
    *v14 += 2;
  v166 = v14;
  v15 = (_DWORD *)*((_QWORD *)a4 + 31);
  if (v15)
    *v15 += 2;
  v167 = v15;
  v16 = (_DWORD *)*((_QWORD *)a4 + 32);
  if (v16)
    ++*v16;
  v17 = *((_QWORD *)a4 + 33);
  v168 = v16;
  v169 = v17;
  v170 = *((_BYTE *)a4 + 272);
  v18 = (const void *)*((_QWORD *)a4 + 35);
  cf = v18;
  if (v18)
    CFRetain(v18);
  v19 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v164);
  v20 = *(WTF::StringImpl **)v19;
  if (*(_QWORD *)v19)
    *(_DWORD *)v20 += 2;
  v161 = v20;
  v21 = *(_OWORD *)(v19 + 24);
  v162 = *(_OWORD *)(v19 + 8);
  v163 = v21;
  if (*((_BYTE *)this + 104) == 1 && (v162 & 2) != 0)
  {
    WTF::URL::user((WTF::URL *)&v161);
    v24 = (char *)this + 48;
    v23 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    v25 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    *((_QWORD *)this + 6) = v25;
    if (v23)
    {
      v26 = *(_DWORD *)v23 - 2;
      if (*(_DWORD *)v23 != 2)
      {
LABEL_21:
        *(_DWORD *)v23 = v26;
        goto LABEL_22;
      }
      WTF::StringImpl::destroy(v23, v22);
      v23 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v23)
      {
        v26 = *(_DWORD *)v23 - 2;
        if (*(_DWORD *)v23 == 2)
        {
          WTF::StringImpl::destroy(v23, v27);
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
LABEL_22:
    WTF::URL::password((WTF::URL *)&v161);
    v30 = (char *)this + 56;
    v29 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    v31 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    *((_QWORD *)this + 7) = v31;
    if (!v29)
      goto LABEL_27;
    v32 = *(_DWORD *)v29 - 2;
    if (*(_DWORD *)v29 != 2)
      goto LABEL_26;
    WTF::StringImpl::destroy(v29, v28);
    v29 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (!v29)
      goto LABEL_27;
    v32 = *(_DWORD *)v29 - 2;
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v33);
    else
LABEL_26:
      *(_DWORD *)v29 = v32;
LABEL_27:
    WebCore::ResourceRequestBase::removeCredentials((WebCore::ResourceRequestBase *)&v164);
    v34 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v164);
    WTF::String::operator=(&v161, (WTF::StringImpl *)v34);
    v35 = *(_OWORD *)(v34 + 24);
    v162 = *(_OWORD *)(v34 + 8);
    v163 = v35;
    v36 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 32);
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 24);
    v37 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v36 + 216), buf);
    if (!v37)
      goto LABEL_54;
    v38 = v37;
    if (*(_QWORD *)v24 && *(_DWORD *)(*(_QWORD *)v24 + 4) || *(_QWORD *)v30 && *(_DWORD *)(*(_QWORD *)v30 + 4))
    {
      WebCore::CredentialBase::CredentialBase();
      *(_QWORD *)v173 = 0;
      WebCore::CredentialStorage::set((WebCore::CredentialStorage *)(v38 + 96), (WebKit::NetworkDataTaskCocoa *)((char *)this + 64), (const WebCore::Credential *)buf, (const WTF::URL *)&v161);
    }
    else
    {
      WebCore::CredentialStorage::get((WebCore::CredentialStorage *)(v37 + 96), (WebKit::NetworkDataTaskCocoa *)((char *)this + 64), (const WTF::URL *)&v161);
      v41 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      v42 = (WTF::StringImpl *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v41;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v39);
        else
          *(_DWORD *)v42 -= 2;
      }
      v43 = *(_QWORD *)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      v44 = (WTF::StringImpl *)*((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = v43;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v39);
        else
          *(_DWORD *)v44 -= 2;
      }
      *((_BYTE *)this + 88) = buf[16];
      v45 = *(_QWORD *)v173;
      *(_QWORD *)v173 = 0;
      v46 = (const void *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v45;
      if (!v46)
        goto LABEL_46;
      CFRelease(v46);
    }
    v40 = *(const void **)v173;
    *(_QWORD *)v173 = 0;
    if (v40)
      CFRelease(v40);
LABEL_46:
    v47 = *(WTF::StringImpl **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v39);
      else
        *(_DWORD *)v47 -= 2;
    }
    v48 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v39);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
LABEL_54:
  if ((WebCore::Credential::isEmpty((WebKit::NetworkDataTaskCocoa *)((char *)this + 72)) & 1) == 0
    && (WebCore::ResourceRequestBase::hasHTTPHeaderField() & 1) == 0)
  {
    WebKit::applyBasicAuthorizationHeader((WebKit *)&v164, (WebKit::NetworkDataTaskCocoa *)((char *)this + 72), v49);
  }
  v50 = *((unsigned __int8 *)this + 104);
  shouldBlockCookies = v50 == 2;
  v52 = *((_QWORD *)a2 + 4);
  *(_QWORD *)buf = *((_QWORD *)a2 + 3);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v52 + 216), buf)&& v50 != 2)
  {
    shouldBlockCookies = WebCore::NetworkStorageSession::shouldBlockCookies();
  }
  WebKit::NetworkDataTask::restrictRequestReferrerToOriginIfNeeded((uint64_t)this, (WebCore::ResourceRequest *)&v164);
  v53 = (void *)WebCore::ResourceRequest::nsURLRequest();
  v54 = v53;
  if (v53)
    CFRetain(v53);
  v55 = (void *)objc_msgSend(v54, "mutableCopy");
  if (*((unsigned __int8 *)a4 + 294) | *((unsigned __int8 *)a4 + 2946)
    || (v56 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v164),
        v57 = (unsigned __int8 *)WTF::URL::host(v56),
        v59 = v58,
        PartyForCookies = (WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies((WebCore::ResourceRequestBase *)&v164),
        v61 = (unsigned __int8 *)WTF::URL::host(PartyForCookies),
        WTF::operator==(v57, v59, v61, v62)))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v55, "_setPrivacyProxyFailClosedForUnreachableNonMainHosts:", 1);
  }
  if (!*((_BYTE *)a4 + 2947))
    objc_msgSend(v55, "_setProhibitPrivacyProxy:", 1);
  v64 = (NSURLRequest *)*((unsigned __int16 *)a4 + 1474);
  if ((v64 & 1) != 0 && *((_BYTE *)a4 + 294))
    WebKit::configureForAdvancedPrivacyProtections(*(WebKit **)(*(_QWORD *)(*((_QWORD *)this + 74) + 8) + 8), v63);
  WebKit::enableAdvancedPrivacyProtections((WebKit *)v55, v64);
  if (!(((v64 & 0x10) == 0) | ((objc_opt_respondsToSelector() & 1) == 0)))
    objc_msgSend(v55, "_setPrivacyProxyFailClosedForUnreachableHosts:", 1);
  if (!(((v64 & 0x20) == 0) | ((objc_opt_respondsToSelector() & 1) == 0)))
    objc_msgSend(v55, "_setWebSearchContent:", 1);
  if ((objc_opt_respondsToSelector() & 1) != 0 && (*((_BYTE *)a4 + 236) & 0x40) != 0)
    objc_msgSend(v55, "_setAllowPrivateAccessTokensForThirdParty:", 1);
  objc_msgSend(v55, "setAttribution:", (v165 & 4) == 0);
  if (v55)
    CFRetain(v55);
  if (v54)
    CFRelease(v54);
  v65 = *((_QWORD *)this + 2);
  if (v65)
    v66 = *(_QWORD *)(v65 + 8);
  else
    v66 = 0;
  v67 = objc_msgSend(v55, "attribution");
  v68 = 816;
  if (v67)
    v68 = 817;
  *(_BYTE *)(v66 + v68) = 1;
  if (*((_BYTE *)a4 + 288))
    v69 = 0;
  else
    v69 = WTF::URL::protocolIs() ^ 1;
  v70 = *((_QWORD *)this + 2);
  if (!v70)
  {
    v71 = 0;
    if (v69)
      goto LABEL_91;
LABEL_95:
    v72 = (void *)objc_msgSend(v55, "mutableCopy");
    objc_msgSend(v72, "_setProperty:forKey:", MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0C93088]);
    goto LABEL_96;
  }
  v71 = *(_QWORD *)(v70 + 8);
  if (!v69)
    goto LABEL_95;
LABEL_91:
  v72 = v55;
  if (!*(_QWORD *)(v71 + 888))
    goto LABEL_100;
  v72 = (void *)objc_msgSend(v55, "mutableCopy");
LABEL_96:
  if (*(_QWORD *)(v71 + 888))
    objc_msgSend(v72, "setBoundInterfaceIdentifier:", WTF::StringImpl::operator NSString *());
  if (v55)
    CFRelease(v55);
LABEL_100:
  if ((WTF::URL::protocolIs() & 1) != 0 || WTF::URL::protocolIs())
  {
    WebKit::NetworkDataTask::scheduleFailure((uint64_t)this, 2);
    goto LABEL_103;
  }
  v77 = (const void *)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 74) + 8) + 8), "dataTaskWithRequest:", v72);
  v78 = v77;
  if (v77)
    CFRetain(v77);
  v79 = (const void *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = v78;
  if (v79)
    CFRelease(v79);
  v80 = *((_QWORD *)a2 + 4);
  v81 = WTF::URL::host((WTF::URL *)&v161);
  v83 = *(_QWORD *)(v80 + 384);
  if (v83)
  {
    v140 = (unsigned __int8 *)v81;
    v141 = v82;
    v156 = *(_DWORD *)(v83 - 8);
    v142 = WTF::StringViewHashTranslator::hash(v81, v82);
    for (i = 0; ; v142 = i + v143)
    {
      v143 = v142 & v156;
      v144 = (uint64_t *)(v83 + 8 * (v142 & v156));
      if (*v144 != -1)
      {
        if (!*v144)
          goto LABEL_119;
        if (WTF::StringViewHashTranslator::equal(v144, v140, v141))
          break;
      }
      ++i;
    }
    WTF::URL::port((WTF::URL *)&v161);
    host_with_numeric_port = (const void *)nw_endpoint_create_host_with_numeric_port();
    objc_msgSend(*((id *)this + 76), "set_hostOverride:", host_with_numeric_port);
    if (host_with_numeric_port)
      CFRelease(host_with_numeric_port);
  }
LABEL_119:
  if (!kdebug_is_enabled())
    goto LABEL_120;
  if (*MEMORY[0x1E0CBE150])
  {
    v131 = WTFSignpostLogHandle();
    if (!os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
      goto LABEL_120;
    v157 = *((_QWORD *)this + 76);
    v132 = WTFCurrentContinuousTime();
    WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)&v164);
    WTF::String::utf8();
    if (v160)
      v133 = (char *)v160 + 16;
    else
      v133 = 0;
    WTF::String::utf8();
    v134 = WebCore::ResourceRequestBase::priority((WebCore::ResourceRequestBase *)&v164);
    v135 = (char *)v159 + 16;
    if (!v159)
      v135 = 0;
    v136 = (float *)((char *)&unk_1978CF0DC + 4 * (char)v134);
    if (v134 >= 5)
      v136 = (float *)MEMORY[0x1E0C92BC8];
    v137 = *v136;
    v138 = *((unsigned __int8 *)a4 + 2904);
    *(_DWORD *)buf = 67110915;
    *(_DWORD *)&buf[4] = 1;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = 0;
    *(_WORD *)&buf[14] = 2048;
    *(_QWORD *)&buf[16] = v157;
    *(_WORD *)v173 = 2048;
    *(_QWORD *)&v173[2] = v132;
    *(_WORD *)v174 = 2082;
    *(_QWORD *)&v174[2] = v133;
    *(_WORD *)v175 = 2081;
    *(_QWORD *)&v175[2] = v135;
    v176 = 2048;
    v177 = v137;
    v178 = 1024;
    v179 = v138;
    _os_log_impl(&dword_196BCC000, v131, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu %{public}s %{private}s pri: %.2f preconnect: %d", buf, 0x46u);
    goto LABEL_208;
  }
  v145 = WTFSignpostLogHandle();
  v146 = v145;
  v147 = (const void *)*((_QWORD *)this + 76);
  if (v147)
  {
    v148 = os_signpost_id_make_with_pointer(v145, v147);
    if (v148 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_120;
  }
  else
  {
    v148 = 0xEEEEB0B5B2B2EEEELL;
  }
  if (os_signpost_enabled(v146))
  {
    WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)&v164);
    WTF::String::utf8();
    if (v160)
      v150 = (char *)v160 + 16;
    else
      v150 = 0;
    WTF::String::utf8();
    v151 = WebCore::ResourceRequestBase::priority((WebCore::ResourceRequestBase *)&v164);
    v152 = (char *)v159 + 16;
    if (!v159)
      v152 = 0;
    v153 = (float *)((char *)&unk_1978CF0DC + 4 * (char)v151);
    if (v151 >= 5)
      v153 = (float *)MEMORY[0x1E0C92BC8];
    v154 = *v153;
    v155 = *((unsigned __int8 *)a4 + 2904);
    *(_DWORD *)buf = 136446979;
    *(_QWORD *)&buf[4] = v150;
    *(_WORD *)&buf[12] = 2081;
    *(_QWORD *)&buf[14] = v152;
    *(_WORD *)&buf[22] = 2048;
    *(double *)v173 = v154;
    *(_WORD *)&v173[8] = 1024;
    *(_DWORD *)v174 = v155;
    _os_signpost_emit_with_name_impl(&dword_196BCC000, v146, OS_SIGNPOST_INTERVAL_BEGIN, v148, "DataTask", "%{public}s %{private}s pri: %.2f preconnect: %d", buf, 0x26u);
LABEL_208:
    if (v159)
    {
      if (*(_DWORD *)v159 == 1)
        WTF::fastFree(v159, v139);
      else
        --*(_DWORD *)v159;
    }
    if (v160)
    {
      if (*(_DWORD *)v160 == 1)
        WTF::fastFree(v160, v139);
      else
        --*(_DWORD *)v160;
    }
  }
LABEL_120:
  if (!*((_BYTE *)a4 + 290))
  {
    v84 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 74) + 8) + 8), "configuration");
    v85 = v84;
    if (v84)
      CFRetain(v84);
    objc_msgSend(v85, "setURLCredentialStorage:", 0);
    objc_msgSend(*((id *)this + 76), "_adoptEffectiveConfiguration:", v85);
    if (v85)
      CFRelease(v85);
  }
  v86 = *((_QWORD *)this + 74);
  if (v86)
    v87 = *(_QWORD *)(v86 + 8);
  else
    v87 = 0;
  v88 = objc_msgSend(*((id *)this + 76), "taskIdentifier");
  v89 = *(_QWORD *)(v87 + 24);
  if (v89)
  {
    v90 = *(_DWORD *)(v89 - 8);
    v91 = (v88 + ~(v88 << 32)) ^ ((unint64_t)(v88 + ~(v88 << 32)) >> 22);
    v92 = 9 * ((v91 + ~(v91 << 13)) ^ ((v91 + ~(v91 << 13)) >> 8));
    v93 = (v92 ^ (v92 >> 15)) + ~((v92 ^ (v92 >> 15)) << 27);
    v94 = v90 & ((v93 >> 31) ^ v93);
    v95 = *(_QWORD *)(v89 + 24 * v94);
    if (v95 == v88)
    {
LABEL_132:
      __break(0xC471u);
      JUMPOUT(0x196CE6824);
    }
    v96 = 1;
    while (v95)
    {
      v94 = (v94 + v96) & v90;
      v95 = *(_QWORD *)(v89 + 24 * v94);
      ++v96;
      if (v95 == v88)
        goto LABEL_132;
    }
  }
  v97 = *((_QWORD *)this + 74);
  if (v97)
    v98 = *(_QWORD *)(v97 + 8);
  else
    v98 = 0;
  v100 = objc_msgSend(*((id *)this + 76), "taskIdentifier");
  v103 = *(_QWORD *)(v98 + 24);
  v102 = (uint64_t *)(v98 + 24);
  v101 = v103;
  if (v103
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v102),
        (v101 = *v102) != 0))
  {
    v104 = *(_DWORD *)(v101 - 8);
  }
  else
  {
    v104 = 0;
  }
  v105 = (v100 + ~(v100 << 32)) ^ ((unint64_t)(v100 + ~(v100 << 32)) >> 22);
  v106 = 9 * ((v105 + ~(v105 << 13)) ^ ((v105 + ~(v105 << 13)) >> 8));
  v107 = (v106 ^ (v106 >> 15)) + ~((v106 ^ (v106 >> 15)) << 27);
  v108 = v104 & ((v107 >> 31) ^ v107);
  v109 = (uint64_t *)(v101 + 24 * v108);
  v110 = *v109;
  if (*v109)
  {
    v112 = 0;
    v113 = 1;
    while (v110 != v100)
    {
      if (v110 == -1)
        v112 = v109;
      v108 = (v108 + v113) & v104;
      v109 = (uint64_t *)(v101 + 24 * v108);
      v110 = *v109;
      ++v113;
      if (!*v109)
      {
        if (v112)
        {
          *v112 = 0;
          v112[1] = 0;
          v112[2] = 0;
          --*(_DWORD *)(*v102 - 16);
          v109 = v112;
        }
        *v109 = v100;
        v111 = (unsigned __int8 **)(v109 + 1);
        if (!this)
        {
          v114 = 0;
          goto LABEL_149;
        }
        goto LABEL_147;
      }
    }
    goto LABEL_157;
  }
  *v109 = v100;
  v111 = (unsigned __int8 **)(v101 + 24 * v108 + 8);
LABEL_147:
  v114 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 1);
  if (v114)
    v114 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v114);
LABEL_149:
  v115 = *v111;
  *v111 = (unsigned __int8 *)v114;
  if (v115)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v115, v99);
  v109[2] = (uint64_t)this;
  v116 = *v102;
  if (*v102)
    v117 = *(_DWORD *)(v116 - 12) + 1;
  else
    v117 = 1;
  *(_DWORD *)(v116 - 12) = v117;
  v118 = *v102;
  if (*v102)
    v119 = *(_DWORD *)(v118 - 12);
  else
    v119 = 0;
  v120 = (*(_DWORD *)(v118 - 16) + v119);
  v121 = *(unsigned int *)(v118 - 4);
  if (v121 > 0x400)
  {
    if (v121 > 2 * v120)
      goto LABEL_157;
LABEL_172:
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v102);
    goto LABEL_157;
  }
  if (3 * v121 <= 4 * v120)
    goto LABEL_172;
LABEL_157:
  if (*((_BYTE *)a4 + 2904))
    objc_msgSend(*((id *)this + 76), "set_preconnect:", 1);
  if (!*((_BYTE *)this + 544))
    WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(v8, (const WebCore::ResourceRequest *)&v164);
  if (shouldBlockCookies)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 88))(*(_QWORD *)(*((_QWORD *)this + 2) + 8)))
    {
      if (*((_BYTE *)this + 584))
      {
        v122 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        {
          v123 = *((_QWORD *)this + 95);
          v124 = *((_QWORD *)this + 93);
          v125 = objc_msgSend(*((id *)this + 76), "taskIdentifier");
          v126 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v72, "URL"), "absoluteString"), "UTF8String");
          *(_DWORD *)buf = 134219010;
          *(_QWORD *)&buf[4] = this;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v123;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)v173 = v124;
          *(_WORD *)&v173[8] = 2048;
          *(_QWORD *)v174 = v125;
          *(_WORD *)&v174[8] = 2080;
          *(_QWORD *)v175 = v126;
          _os_log_impl(&dword_196BCC000, v122, OS_LOG_TYPE_DEFAULT, "%p - NetworkDataTaskCocoa::logCookieInformation: pageID=%llu, frameID=%llu, taskID=%lu: Blocking cookies for URL %s", buf, 0x34u);
        }
      }
    }
    WebKit::NetworkTaskCocoa::blockCookies(v8);
  }
  v127 = WebCore::ResourceRequestBase::priority((WebCore::ResourceRequestBase *)&v164);
  v129 = (_DWORD *)((char *)&unk_1978CF0DC + 4 * (char)v127);
  if (v127 >= 5)
    v129 = (_DWORD *)MEMORY[0x1E0C92BC8];
  LODWORD(v128) = *v129;
  objc_msgSend(*((id *)this + 76), "setPriority:", v128);
  WebKit::NetworkTaskCocoa::updateTaskWithFirstPartyForSameSiteCookies(*((void **)this + 76), &v164, v130);
  if (*((_BYTE *)a4 + 2936))
    objc_msgSend(*((id *)this + 76), "set_nw_activity:", *((_QWORD *)a4 + 366));
LABEL_103:
  if (v55)
    CFRelease(v55);
  if (v72)
    CFRelease(v72);
  v74 = v161;
  v161 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v73);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = cf;
  cf = 0;
  if (v75)
    CFRelease(v75);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v164);
  return this;
}

void sub_196CE6E70(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const char ****a12, WTF *a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,CFTypeRef cf)
{
  WebKit::NetworkDataTask *v48;
  WebKit::NetworkTaskCocoa *v49;
  const void *v50;
  const void *v51;
  CFTypeRef v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v56;
  WTF::StringImpl *v57;
  const void *v58;
  const char ***v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  WTF::StringImpl *v63;

  if (a13)
  {
    if (*(_DWORD *)a13 == 1)
      WTF::fastFree(a13, a2);
    else
      --*(_DWORD *)a13;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 1)
      WTF::fastFree(a14, a2);
    else
      --*(_DWORD *)a14;
  }
  if (v50)
    CFRelease(v50);
  if (v51)
    CFRelease(v51);
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  v53 = cf;
  cf = 0;
  if (v53)
    CFRelease(v53);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a24);
  v55 = *((_QWORD *)v48 + 98);
  *((_QWORD *)v48 + 98) = 0;
  if (v55)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v55, v54);
  v56 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)v48 + 92);
  *((_QWORD *)v48 + 92) = 0;
  if (v56)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v56);
  v57 = (WTF::StringImpl *)*((_QWORD *)v48 + 88);
  *((_QWORD *)v48 + 88) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v54);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = (const void *)*((_QWORD *)v48 + 76);
  *((_QWORD *)v48 + 76) = 0;
  if (v58)
    CFRelease(v58);
  v59 = *a12;
  *a12 = 0;
  if (v59)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v59);
  v60 = (unsigned int *)*((_QWORD *)v48 + 74);
  *((_QWORD *)v48 + 74) = 0;
  if (v60)
  {
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, v60);
      WTF::fastFree((WTF *)v60, v54);
    }
  }
  WebKit::NetworkTaskCocoa::~NetworkTaskCocoa(v49, v54);
  WebKit::NetworkDataTask::~NetworkDataTask(v48, v63);
  _Unwind_Resume(a1);
}

WebKit *WebKit::enableAdvancedPrivacyProtections(WebKit *this, NSURLRequest *a2)
{
  WebKit *v2;
  char v3;

  v2 = this;
  v3 = (char)a2;
  if ((a2 & 0x80) != 0)
    this = (WebKit *)-[WebKit _setUseEnhancedPrivacyMode:](this, "_setUseEnhancedPrivacyMode:", 1);
  if ((v3 & 1) != 0)
  {
    this = (WebKit *)WebKit::shouldBlockTrackersForThirdPartyCloaking(v2, a2);
    if ((_DWORD)this)
      return (WebKit *)-[WebKit _setBlockTrackers:](v2, "_setBlockTrackers:", 1);
  }
  return this;
}

uint64_t WebKit::NetworkTaskCocoa::NetworkTaskCocoa(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E34B61D0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v6 = *(unsigned int **)(a2 + 8);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x4122750000000000;
  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v14 = v9;
  v11 = *(_QWORD *)(v8 + 200);
  v10 = (uint64_t *)(v8 + 200);
  if (v11)
  {
    if (WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(v10, &v14))
    {
      v12 = 1;
      goto LABEL_7;
    }
    v9 = *(_QWORD *)(a2 + 24);
  }
  v12 = v9 >= 0 || v9 == -1;
LABEL_7:
  *(_BYTE *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 33) = a3;
  return a1;
}

uint64_t WebKit::NetworkDataTask::NetworkDataTask(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, char a5, char a6, char a7)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;
  WTF *v21;
  const URL *v22;
  WebCore *v23;
  const WTF::URL *v24;
  WTF::URL *v25;
  uint64_t v26;
  uint64_t v28;
  char v29;

  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v14 = 0;
  *(_OWORD *)(v14 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v14 + 24) = a1;
  *(_QWORD *)a1 = off_1E34BDB70;
  *(_QWORD *)(a1 + 8) = v14;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v15 = *(unsigned int **)(a2 + 8);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 16) = v15;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v17 = *(unsigned int **)(a3 + 8);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 24) = v17;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v19 = (_DWORD *)*((_QWORD *)a4 + 20);
  if (v19)
    *v19 += 2;
  *(_QWORD *)(a1 + 64) = v19;
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)(a1 + 72));
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = a5;
  v20 = *(_DWORD **)WebCore::ResourceRequestBase::httpMethod(a4);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(a1 + 112) = v20;
  *(_QWORD *)(a1 + 120) = 0;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 128), a4);
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 328));
  *(_BYTE *)(a1 + 528) = a6;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = a7;
  *(_BYTE *)(a1 + 545) = 0;
  if ((*(_BYTE *)(WebCore::ResourceRequestBase::url(a4) + 8) & 1) == 0)
  {
    v28 = a1;
    v29 = 1;
    goto LABEL_19;
  }
  v21 = (WTF *)WebCore::ResourceRequestBase::url(a4);
  if (!WTF::portAllowed(v21, v22)
    || (v23 = (WebCore *)WebCore::ResourceRequestBase::url(a4), WebCore::isIPAddressDisallowed(v23, v24)))
  {
    v28 = a1;
    v29 = 0;
LABEL_19:
    WebKit::NetworkDataTask::scheduleFailure(v28, v29);
    return a1;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 393))
  {
    v25 = (WTF::URL *)WebCore::ResourceRequestBase::url(a4);
    if (WTF::URL::protocolIsInFTPFamily(v25))
    {
      v28 = a1;
      v29 = 3;
      goto LABEL_19;
    }
  }
  v26 = *(_QWORD *)(a1 + 16);
  if (v26)
    v26 = *(_QWORD *)(v26 + 8);
  WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::add<WebKit::NetworkDataTask,(void *)0>(v26 + 40, a1);
  return a1;
}

uint64_t WTF::URL::protocolIsInFTPFamily(WTF::URL *this)
{
  if ((WTF::URL::protocolIs() & 1) != 0)
    return 1;
  else
    return WTF::URL::protocolIs();
}

uint64_t WebKit::NetworkDataTask::restrictRequestReferrerToOriginIfNeeded(uint64_t this, WebCore::ResourceRequest *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(this + 16) + 8);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 < 0 && v4 != -1 || *(_QWORD *)(v3 + 72))
  {
    if (*(_BYTE *)(v3 + 97))
    {
      this = WebCore::ResourceRequestBase::isThirdParty(a2);
      if ((_DWORD)this)
        return WebCore::ResourceRequestBase::setExistingHTTPReferrerToOriginString(a2);
    }
  }
  return this;
}

unsigned __int8 *WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::add<WebKit::NetworkDataTask,(void *)0>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *result;
  void *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 **v34;
  WTF::ThreadSafeWeakPtrControlBlock *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;

  if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(*(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 8)))
  {
    __break(0xC471u);
    JUMPOUT(0x196CE77B8);
  }
  v4 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::weakRef(*(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 8));
  if (!result)
    goto LABEL_25;
  v8 = result;
  v9 = *(_DWORD *)(a1 + 12);
  v10 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  v11 = *(_QWORD *)a1;
  if (v10 > v9)
  {
    if (v11)
    {
      v28 = *(_DWORD *)(v11 - 4);
      if (!v28)
        goto LABEL_49;
      v29 = 0;
      v30 = v28 - 1;
      do
      {
        v31 = v30;
        v32 = (_QWORD *)(v11 + 16 * v30);
        if ((unint64_t)(*v32 + 1) >= 2)
        {
          v33 = v11 + 16 * v30;
          v35 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v33 + 8);
          v34 = (unsigned __int8 **)(v33 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v35))
          {
            *v32 = -1;
            v36 = *v34;
            *v34 = 0;
            if (v36)
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v36, v7);
            ++v29;
          }
        }
        --v30;
      }
      while (v31);
      v11 = *(_QWORD *)a1;
      if (v29)
      {
        *(_DWORD *)(v11 - 16) += v29;
        v41 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v42 = *(_DWORD *)(v41 - 12);
        else
          v42 = 0;
        *(_DWORD *)(v41 - 12) = v42 - v29;
        v11 = *(_QWORD *)a1;
      }
      if (v11)
      {
        v37 = *(_DWORD *)(v11 - 4);
        if (v37 >= 9 && 6 * *(_DWORD *)(v11 - 12) < v37)
        {
          WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::shrinkToBestSize((uint64_t *)a1);
          v11 = *(_QWORD *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v11)
          {
            v39 = 0;
            goto LABEL_51;
          }
LABEL_50:
          v39 = *(_DWORD *)(v11 - 12);
          v40 = 0x7FFFFFFF;
          if (v39 >= 0x7FFFFFFF)
          {
LABEL_52:
            *(_DWORD *)(a1 + 12) = 2 * v40;
            goto LABEL_7;
          }
LABEL_51:
          v40 = v39;
          goto LABEL_52;
        }
LABEL_49:
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_50;
      }
    }
    v11 = 0;
    v39 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_51;
  }
LABEL_7:
  if (v11
    || (WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::expand((uint64_t *)a1),
        (v11 = *(_QWORD *)a1) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (_QWORD *)(v11 + 16 * v16);
  v18 = *v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      if (v18 == a2)
      {
        result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v8, v7);
        goto LABEL_25;
      }
      if (v18 == -1)
        v19 = v17;
      v16 = (v16 + v20) & v12;
      v17 = (_QWORD *)(v11 + 16 * v16);
      v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      *v19 = 0;
      v19[1] = 0;
      --*(_DWORD *)(*(_QWORD *)a1 - 16);
      v17 = v19;
    }
  }
  result = (unsigned __int8 *)v17[1];
  *v17 = a2;
  v17[1] = v8;
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v7);
  v21 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_25;
  }
  else if (3 * v26 > 4 * v25)
  {
    goto LABEL_25;
  }
  result = (unsigned __int8 *)WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::expand((uint64_t *)a1);
LABEL_25:
  v27 = __ldxr(v4);
  if (v27 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 16));
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 16));
  return result;
}

uint64_t WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(uint64_t a1, int a2, int a3)
{
  WebKit *v6;
  WebKit *isFullWebBrowserOrRunningTest;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v15;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DF2E8;
  *(_BYTE *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 17) = 2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v6 = (WebKit *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 216) = 1048576000;
  isFullWebBrowserOrRunningTest = (WebKit *)WebKit::isFullWebBrowserOrRunningTest(v6);
  v8 = 0x3FC3333333333333;
  if ((_DWORD)isFullWebBrowserOrRunningTest)
    v8 = 0x3FE3333333333333;
  *(_QWORD *)(a1 + 224) = v8;
  *(_QWORD *)(a1 + 232) = 1;
  v9 = WebKit::isFullWebBrowserOrRunningTest(isFullWebBrowserOrRunningTest);
  v10 = 0x3FC999999999999ALL;
  if (v9)
    v10 = 0x3FE999999999999ALL;
  *(_QWORD *)(a1 + 240) = v10;
  *(_OWORD *)(a1 + 248) = xmmword_1978D0C20;
  *(_BYTE *)(a1 + 264) = 1;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 256;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 328));
  *(_QWORD *)(a1 + 368) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 368));
  *(_QWORD *)(a1 + 408) = 0x1000101000000;
  *(_DWORD *)(a1 + 416) = 256;
  *(_BYTE *)(a1 + 420) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 428) = 0;
  *(_DWORD *)(a1 + 432) = 1;
  *(_QWORD *)(a1 + 440) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 440));
  *(_DWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_WORD *)(a1 + 536) = 0;
  if (a2)
  {
    if (a3)
    {
      WebKit::WebsiteDataStoreConfiguration::initializePaths((WebKit::WebsiteDataStoreConfiguration *)a1, v11);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = *(WTF::StringImpl **)(a1 + 488);
      *(_QWORD *)(a1 + 488) = v15;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WebKit::isFullWebBrowserOrRunningTest(WebKit *this)
{
  const WTF::String *v1;
  WTF::StringImpl *v2;
  uint64_t isFullWebBrowserOrRunningTest;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  WebCore::applicationBundleIdentifier(this);
  isFullWebBrowserOrRunningTest = WebKit::isFullWebBrowserOrRunningTest((WebKit *)&v6, v1);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return isFullWebBrowserOrRunningTest;
}

void sub_196CE7A14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::isFullWebBrowserOrRunningTest(WebKit *this, const WTF::String *a2)
{
  {
    WebKit::isFullWebBrowserOrRunningTest(WTF::String const&)::fullWebBrowser = WTF::processHasEntitlement();
  }
  if ((WebKit::isRunningTest(this, a2) & 1) != 0)
    return 1;
  if (WebKit::isFullWebBrowserOrRunningTest(WTF::String const&)::fullWebBrowser)
    return MEMORY[0x19AEABBCC](*(_QWORD *)this, "inAppBrowserPrivacyTestIdentifier", 33) ^ 1;
  return 0;
}

uint64_t WebKit::isParentProcessAFullWebBrowser(WebKit *this, WebKit::AuxiliaryProcess *a2)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit30isParentProcessAFullWebBrowserERNS_16AuxiliaryProcessE_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  if (qword_1ECE721D0 != -1)
    dispatch_once(&qword_1ECE721D0, block);
  WebCore::applicationBundleIdentifier(this);
  if ((WebKit::isRunningTest((WebKit *)&v7, v2) & 1) != 0)
  {
    v4 = 1;
  }
  else if (byte_1ECE721C3)
  {
    v4 = MEMORY[0x19AEABBCC](v7, "inAppBrowserPrivacyTestIdentifier", 33) ^ 1;
  }
  else
  {
    v4 = 0;
  }
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

void sub_196CE7BB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::isRunningTest(WebKit *this, const WTF::String *a2)
{
  if ((MEMORY[0x19AEABBCC](*(_QWORD *)this, "com.apple.WebKit.TestWebKitAPI", 30) & 1) == 0
    && (MEMORY[0x19AEABBCC](*(_QWORD *)this, "com.apple.WebKit.WebKitTestRunner", 33) & 1) == 0)
  {
    JUMPOUT(0x19AEABBCCLL);
  }
  return 1;
}

void *WebKit::NetworkTaskCocoa::updateTaskWithFirstPartyForSameSiteCookies(void *this, NSURLSessionTask *a2, const WebCore::ResourceRequest *a3)
{
  void *v4;
  uint64_t v5;

  if (BYTE1(a2[18].super.isa))
  {
    v4 = this;
    if ((byte_1EE341542 & 1) == 0)
    {
      qword_1EE341568 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", &stru_1E351F1B8);
      byte_1EE341542 = 1;
    }
    if (WebCore::ResourceRequestBase::isSameSite((WebCore::ResourceRequestBase *)a2))
      v5 = objc_msgSend((id)objc_msgSend(v4, "currentRequest"), "URL");
    else
      v5 = qword_1EE341568;
    objc_msgSend(v4, "set_siteForCookies:", v5);
    return (void *)objc_msgSend(v4, "set_isTopLevelNavigation:", WebCore::ResourceRequestBase::isTopSite((WebCore::ResourceRequestBase *)a2));
  }
  return this;
}

WTF::StringImpl *WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebKit::NetworkTaskCocoa *this, const WebCore::ResourceRequest *a2)
{
  WTF::StringImpl *result;
  uint64_t PartyForCookies;
  WTF::StringImpl *v6;
  __int128 v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  const WTF::StringImpl *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  void *v20;
  uint64_t v21;
  WebCore::NetworkStorageSession *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  char v44;
  _BYTE v45[20];
  char v46;
  WTF::StringImpl *v47;
  char v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  char v52;
  __int128 v53;
  int v54;
  char v55;
  WTF::StringImpl *v56;
  char v57;
  uint64_t v58;
  id v59;
  WTF::StringImpl *v60;
  char v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  char v70;
  WTF::StringImpl *v71;
  char v72;
  id v73;
  WTF::StringImpl *v74;

  result = (WTF::StringImpl *)WebKit::NetworkTaskCocoa::shouldApplyCookiePolicyForThirdPartyCloaking(this);
  if ((_DWORD)result)
  {
    if (WebCore::ResourceRequestBase::isThirdParty(a2))
    {
      return (WTF::StringImpl *)objc_msgSend((id)(*(uint64_t (**)(WebKit::NetworkTaskCocoa *))(*(_QWORD *)this + 32))(this), "set_cookieTransformCallback:", 0);
    }
    else
    {
      PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies(a2);
      v6 = *(WTF::StringImpl **)PartyForCookies;
      if (*(_QWORD *)PartyForCookies)
        *(_DWORD *)v6 += 2;
      v63 = v6;
      v7 = *(_OWORD *)(PartyForCookies + 24);
      v64 = *(_OWORD *)(PartyForCookies + 8);
      v65 = v7;
      WTF::URL::host((WTF::URL *)&v63);
      if ((v8 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      WebCore::ResourceRequestBase::url(a2);
      WTF::URL::isolatedCopy();
      WTF::URL::isolatedCopy();
      v10 = *((_QWORD *)this + 1);
      if (v10)
        v11 = *(WTF **)(v10 + 8);
      else
        v11 = 0;
      WebKit::NetworkSession::firstPartyHostCNAMEDomain(v11, &v62, v9, &v47);
      v13 = v48;
      if (v48)
      {
        WebCore::RegistrableDomain::isolatedCopy((WTF::StringImpl **)&v66);
        v51 = (WTF::StringImpl *)v66;
        v13 = 1;
      }
      else
      {
        LOBYTE(v51) = 0;
      }
      v52 = v13;
      v14 = *((_QWORD *)this + 1);
      if (v14)
        v15 = *(_QWORD *)(v14 + 8);
      else
        v15 = 0;
      WebKit::NetworkSession::firstPartyHostIPAddress(v15, &v62, v12, (uint64_t)v45);
      v16 = v46;
      if (v46)
      {
        WebCore::IPAddress::isolatedCopy((WebCore::IPAddress *)v45);
        v53 = v66;
        v54 = v67;
        v16 = 1;
      }
      else
      {
        LOBYTE(v53) = 0;
      }
      v55 = v16;
      v17 = *((_QWORD *)this + 1);
      if (v17)
        v17 = *(_QWORD *)(v17 + 8);
      LOBYTE(v43) = 0;
      v44 = 0;
      if (*(_BYTE *)(v17 + 136))
      {
        v18 = *(WTF::StringImpl **)(v17 + 128);
        if (v18)
          *(_DWORD *)v18 += 2;
        v43 = v18;
        v44 = 1;
        WebCore::RegistrableDomain::isolatedCopy((WTF::StringImpl **)&v66);
        v56 = (WTF::StringImpl *)v66;
        v19 = 1;
      }
      else
      {
        v19 = 0;
        LOBYTE(v56) = 0;
      }
      v57 = v19;
      v58 = *((_QWORD *)this + 3);
      v20 = (void *)(*(uint64_t (**)(WebKit::NetworkTaskCocoa *))(*(_QWORD *)this + 32))(this);
      v59 = 0;
      objc_initWeak(&v59, v20);
      WebCore::RegistrableDomain::RegistrableDomain(&v42, (const WTF::URL *)&v63);
      WTF::String::isolatedCopy();
      v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 32);
      *(_QWORD *)&v66 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
      v22 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v21 + 216), &v66);
      v61 = WebCore::NetworkStorageSession::trackingPreventionDebugLoggingEnabled(v22);
      WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0::$_0((uint64_t)&v66, (uint64_t)&v49);
      v23 = malloc_type_malloc(0xC8uLL, 0x10E204090C785D2uLL);
      *v23 = MEMORY[0x1E0C809A0];
      v23[1] = 50331650;
      v23[2] = WTF::BlockPtr<NSArray<NSHTTPCookie *> * ()(NSArray<NSHTTPCookie *> *)>::fromCallable<WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0>(WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0)::{lambda(void *,NSArray<NSHTTPCookie *> *)#1}::__invoke;
      v23[3] = &WTF::BlockPtr<NSArray<NSHTTPCookie *> * ()(NSArray<NSHTTPCookie *> *)>::fromCallable<WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0>(WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0)::descriptor;
      WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0::$_0((uint64_t)(v23 + 4), (uint64_t)&v66);
      v25 = v74;
      v74 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      objc_destroyWeak(&v73);
      if (v72)
      {
        v27 = v71;
        v71 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v26);
          else
            *(_DWORD *)v27 -= 2;
        }
      }
      if (v70)
      {
        v28 = v69;
        v69 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v26);
          else
            *(_DWORD *)v28 -= 2;
        }
      }
      v29 = v68;
      v68 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v26);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = (WTF::StringImpl *)v66;
      *(_QWORD *)&v66 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v26);
        else
          *(_DWORD *)v30 -= 2;
      }
      objc_msgSend((id)(*(uint64_t (**)(WebKit::NetworkTaskCocoa *))(*(_QWORD *)this + 32))(this), "set_cookieTransformCallback:", v23);
      _Block_release(v23);
      v32 = v60;
      v60 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
      objc_destroyWeak(&v59);
      if (v57)
      {
        v34 = v56;
        v56 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      if (v52)
      {
        v35 = v51;
        v51 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v33);
          else
            *(_DWORD *)v35 -= 2;
        }
      }
      v36 = v50;
      v50 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v33);
        else
          *(_DWORD *)v36 -= 2;
      }
      v37 = v49;
      v49 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = v42;
      v42 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v33);
        else
          *(_DWORD *)v38 -= 2;
      }
      if (v44)
      {
        v39 = v43;
        v43 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v33);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
      if (v48)
      {
        v40 = v47;
        v47 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v33);
          else
            *(_DWORD *)v40 -= 2;
        }
      }
      v41 = v62;
      v62 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v33);
        else
          *(_DWORD *)v41 -= 2;
      }
      result = v63;
      v63 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_196CE8250(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,WTF::StringImpl *a39)
{
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15, a2);
  v41 = a22;
  a22 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = a17;
  a17 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = a38;
  a38 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v40);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = a39;
  a39 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v40);
    else
      *(_DWORD *)v44 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_196CE83E8(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = *(WTF::StringImpl **)(v2 - 48);
  *(_QWORD *)(v2 - 48) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  objc_destroyWeak((id *)(v2 - 56));
  if (*(_BYTE *)(v2 - 72))
  {
    v5 = *(WTF::StringImpl **)(v2 - 80);
    *(_QWORD *)(v2 - 80) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  if (*(_BYTE *)(v2 - 112))
  {
    v6 = *(WTF::StringImpl **)(v2 - 120);
    *(_QWORD *)(v2 - 120) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  v7 = *(WTF::StringImpl **)(v2 - 160);
  *(_QWORD *)(v2 - 160) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(v2 - 200);
  *(_QWORD *)(v2 - 200) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  JUMPOUT(0x196CE835CLL);
}

void sub_196CE84C0()
{
  JUMPOUT(0x196CE82C4);
}

void sub_196CE84C8()
{
  JUMPOUT(0x196CE83ACLL);
}

void sub_196CE84D0()
{
  JUMPOUT(0x196CE8390);
}

uint64_t `non-virtual thunk to'WebKit::NetworkDataTaskCocoa::task(WebKit::NetworkDataTaskCocoa *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t WebKit::NetworkTaskCocoa::shouldApplyCookiePolicyForThirdPartyCloaking(WebKit::NetworkTaskCocoa *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  WebCore::NetworkStorageSession *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v2 + 216), &v6);
  if (result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 32);
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
    v5 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 216), &v6);
    return WebCore::NetworkStorageSession::trackingPreventionEnabled(v5);
  }
  return result;
}

WTF *WebKit::NetworkSession::firstPartyHostCNAMEDomain@<X0>(WTF *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  char v5;
  WTF *v6;
  WTF *v7;
  _DWORD *v8;

  if ((unint64_t)*a2 + 1 <= 1)
    goto LABEL_2;
  v6 = this;
  this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 14, a2, a3);
  v7 = (WTF *)*((_QWORD *)v6 + 14);
  if (v7)
    v7 = (WTF *)((char *)v7 + 16 * *((unsigned int *)v7 - 1));
  if (v7 == this)
  {
LABEL_2:
    v5 = 0;
    *a4 = 0;
  }
  else
  {
    v8 = (_DWORD *)*((_QWORD *)this + 1);
    if (v8)
      *v8 += 2;
    *(_QWORD *)a4 = v8;
    v5 = 1;
  }
  a4[8] = v5;
  return this;
}

uint64_t WebKit::NetworkSession::firstPartyHostIPAddress@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (!*a2 || !*((_DWORD *)*a2 + 1))
    goto LABEL_8;
  v5 = this;
  this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(this + 120), a2, a3);
  v6 = *(_QWORD *)(v5 + 120);
  if (v6)
    v6 += 32 * *(unsigned int *)(v6 - 4);
  if (v6 != this)
  {
    *(_OWORD *)a4 = *(_OWORD *)(this + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(this + 24);
    v7 = 1;
  }
  else
  {
LABEL_8:
    v7 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 20) = v7;
  return this;
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (a2)
    bzero((void *)(v6 + 16), 24 * a2);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    do
    {
      v12 = (uint64_t *)(v3 + 24 * v10);
      v13 = *v12;
      if (*v12)
      {
        if (v13 != -1)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = (uint64_t *)(v14 + 24 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (*v22);
          v23 = v21;
          v24 = v14 + 24 * v21;
          v27 = *(unsigned __int8 **)(v24 + 8);
          v26 = (_QWORD *)(v24 + 8);
          v25 = v27;
          *v26 = 0;
          if (v27)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v25, v7);
          *v22 = *v12;
          v28 = v3 + 24 * v10;
          *v26 = *(_QWORD *)(v28 + 8);
          v29 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)(v28 + 16) = 0;
          *(_QWORD *)(v14 + 24 * v23 + 16) = v29;
          v30 = *(unsigned __int8 **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v30, v7);
        }
      }
      else
      {
        v31 = v3 + 24 * v10;
        v32 = *(unsigned __int8 **)(v31 + 8);
        *(_QWORD *)(v31 + 8) = 0;
        if (v32)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v32, v7);
      }
      ++v10;
    }
    while (v10 != v11);
    goto LABEL_21;
  }
  if (v3)
LABEL_21:
    WTF::fastFree((WTF *)(v3 - 16), v7);
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 32 * v10);
    if (!v11)
      break;
    if (v11 != (WTF *)-1 && (WTF::equal(v11, *a2, a3) & 1) != 0)
      return v3 + 32 * v10;
    ++i;
  }
  if (*a1)
    return *a1 + 32 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

WTF::StringImpl *WebCore::RegistrableDomain::isolatedCopy@<X0>(_QWORD *a1@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WTF::String::isolatedCopy();
  WebCore::RegistrableDomain::RegistrableDomain(a1, (uint64_t *)&v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebsiteDataStoreConfiguration::initializePaths(WebKit::WebsiteDataStoreConfiguration *this, const WTF::String *a2)
{
  WebKit::WebsiteDataStore *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *result;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;

  v3 = (WebKit::WebsiteDataStoreConfiguration *)((char *)this + 48);
  WebKit::WebsiteDataStore::defaultApplicationCacheDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 48), a2);
  v5 = v79;
  v79 = 0;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v5;
  if (v6)
  {
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2)
      goto LABEL_5;
    WTF::StringImpl::destroy(v6, v4);
    v6 = v79;
    v79 = 0;
    if (!v6)
      goto LABEL_6;
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
LABEL_5:
      *(_DWORD *)v6 = v7;
  }
LABEL_6:
  WebKit::WebsiteDataStore::defaultCacheStorageDirectory(v3, v4);
  v9 = v79;
  v79 = 0;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v9;
  if (v10)
  {
    v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2)
    {
LABEL_10:
      *(_DWORD *)v10 = v11;
      goto LABEL_11;
    }
    WTF::StringImpl::destroy(v10, v8);
    v10 = v79;
    v79 = 0;
    if (v10)
    {
      v11 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  WebKit::WebsiteDataStore::defaultNetworkCacheDirectory(v3, v8);
  v13 = v79;
  v79 = 0;
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v13;
  if (!v14)
    goto LABEL_16;
  v15 = *(_DWORD *)v14 - 2;
  if (*(_DWORD *)v14 != 2)
    goto LABEL_15;
  WTF::StringImpl::destroy(v14, v12);
  v14 = v79;
  v79 = 0;
  if (!v14)
    goto LABEL_16;
  v15 = *(_DWORD *)v14 - 2;
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v12);
  else
LABEL_15:
    *(_DWORD *)v14 = v15;
LABEL_16:
  WebKit::WebsiteDataStore::defaultMediaCacheDirectory(v3, v12);
  v17 = v79;
  v79 = 0;
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v17;
  if (v18)
  {
    v19 = *(_DWORD *)v18 - 2;
    if (*(_DWORD *)v18 != 2)
    {
LABEL_20:
      *(_DWORD *)v18 = v19;
      goto LABEL_21;
    }
    WTF::StringImpl::destroy(v18, v16);
    v18 = v79;
    v79 = 0;
    if (v18)
    {
      v19 = *(_DWORD *)v18 - 2;
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v16);
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
LABEL_21:
  WebKit::WebsiteDataStore::defaultHSTSStorageDirectory(v3, v16);
  v21 = v79;
  v79 = 0;
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v21;
  if (!v22)
    goto LABEL_26;
  v23 = *(_DWORD *)v22 - 2;
  if (*(_DWORD *)v22 != 2)
    goto LABEL_25;
  WTF::StringImpl::destroy(v22, v20);
  v22 = v79;
  v79 = 0;
  if (!v22)
    goto LABEL_26;
  v23 = *(_DWORD *)v22 - 2;
  if (*(_DWORD *)v22 == 2)
    WTF::StringImpl::destroy(v22, v20);
  else
LABEL_25:
    *(_DWORD *)v22 = v23;
LABEL_26:
  WebKit::WebsiteDataStore::defaultModelElementCacheDirectory(MEMORY[0x1E0CBF6F0], v20);
  v25 = v79;
  v79 = 0;
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v25;
  if (v26)
  {
    v27 = *(_DWORD *)v26 - 2;
    if (*(_DWORD *)v26 != 2)
    {
LABEL_30:
      *(_DWORD *)v26 = v27;
      goto LABEL_31;
    }
    WTF::StringImpl::destroy(v26, v24);
    v26 = v79;
    v79 = 0;
    if (v26)
    {
      v27 = *(_DWORD *)v26 - 2;
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::destroy(v26, v24);
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
LABEL_31:
  WebKit::WebsiteDataStore::defaultAlternativeServicesDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v24);
  v29 = v79;
  v79 = 0;
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v29;
  if (!v30)
    goto LABEL_36;
  v31 = *(_DWORD *)v30 - 2;
  if (*(_DWORD *)v30 != 2)
    goto LABEL_35;
  WTF::StringImpl::destroy(v30, v28);
  v30 = v79;
  v79 = 0;
  if (!v30)
    goto LABEL_36;
  v31 = *(_DWORD *)v30 - 2;
  if (*(_DWORD *)v30 == 2)
    WTF::StringImpl::destroy(v30, v28);
  else
LABEL_35:
    *(_DWORD *)v30 = v31;
LABEL_36:
  WebKit::WebsiteDataStore::defaultIndexedDBDatabaseDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v28);
  v33 = v79;
  v79 = 0;
  v34 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v33;
  if (v34)
  {
    v35 = *(_DWORD *)v34 - 2;
    if (*(_DWORD *)v34 != 2)
    {
LABEL_40:
      *(_DWORD *)v34 = v35;
      goto LABEL_41;
    }
    WTF::StringImpl::destroy(v34, v32);
    v34 = v79;
    v79 = 0;
    if (v34)
    {
      v35 = *(_DWORD *)v34 - 2;
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::destroy(v34, v32);
        goto LABEL_41;
      }
      goto LABEL_40;
    }
  }
LABEL_41:
  WebKit::WebsiteDataStore::defaultServiceWorkerRegistrationDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v32);
  v37 = v79;
  v79 = 0;
  v38 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v37;
  if (!v38)
    goto LABEL_46;
  v39 = *(_DWORD *)v38 - 2;
  if (*(_DWORD *)v38 != 2)
    goto LABEL_45;
  WTF::StringImpl::destroy(v38, v36);
  v38 = v79;
  v79 = 0;
  if (!v38)
    goto LABEL_46;
  v39 = *(_DWORD *)v38 - 2;
  if (*(_DWORD *)v38 == 2)
    WTF::StringImpl::destroy(v38, v36);
  else
LABEL_45:
    *(_DWORD *)v38 = v39;
LABEL_46:
  WebKit::WebsiteDataStore::defaultWebSQLDatabaseDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v36);
  v41 = v79;
  v79 = 0;
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v41;
  if (v42)
  {
    v43 = *(_DWORD *)v42 - 2;
    if (*(_DWORD *)v42 != 2)
    {
LABEL_50:
      *(_DWORD *)v42 = v43;
      goto LABEL_51;
    }
    WTF::StringImpl::destroy(v42, v40);
    v42 = v79;
    v79 = 0;
    if (v42)
    {
      v43 = *(_DWORD *)v42 - 2;
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::destroy(v42, v40);
        goto LABEL_51;
      }
      goto LABEL_50;
    }
  }
LABEL_51:
  WebKit::WebsiteDataStore::defaultLocalStorageDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v40);
  v45 = v79;
  v79 = 0;
  v46 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v45;
  if (!v46)
    goto LABEL_56;
  v47 = *(_DWORD *)v46 - 2;
  if (*(_DWORD *)v46 != 2)
    goto LABEL_55;
  WTF::StringImpl::destroy(v46, v44);
  v46 = v79;
  v79 = 0;
  if (!v46)
    goto LABEL_56;
  v47 = *(_DWORD *)v46 - 2;
  if (*(_DWORD *)v46 == 2)
    WTF::StringImpl::destroy(v46, v44);
  else
LABEL_55:
    *(_DWORD *)v46 = v47;
LABEL_56:
  WebKit::WebsiteDataStore::defaultMediaKeysStorageDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v44);
  v49 = v79;
  v79 = 0;
  v50 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v49;
  if (v50)
  {
    v51 = *(_DWORD *)v50 - 2;
    if (*(_DWORD *)v50 != 2)
    {
LABEL_60:
      *(_DWORD *)v50 = v51;
      goto LABEL_61;
    }
    WTF::StringImpl::destroy(v50, v48);
    v50 = v79;
    v79 = 0;
    if (v50)
    {
      v51 = *(_DWORD *)v50 - 2;
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::destroy(v50, v48);
        goto LABEL_61;
      }
      goto LABEL_60;
    }
  }
LABEL_61:
  WebKit::WebsiteDataStore::defaultResourceLoadStatisticsDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v48);
  v53 = v79;
  v79 = 0;
  v54 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v53;
  if (!v54)
    goto LABEL_66;
  v55 = *(_DWORD *)v54 - 2;
  if (*(_DWORD *)v54 != 2)
    goto LABEL_65;
  WTF::StringImpl::destroy(v54, v52);
  v54 = v79;
  v79 = 0;
  if (!v54)
    goto LABEL_66;
  v55 = *(_DWORD *)v54 - 2;
  if (*(_DWORD *)v54 == 2)
    WTF::StringImpl::destroy(v54, v52);
  else
LABEL_65:
    *(_DWORD *)v54 = v55;
LABEL_66:
  WebKit::WebsiteDataStore::defaultDeviceIdHashSaltsStorageDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v52);
  v57 = v79;
  v79 = 0;
  v58 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v57;
  if (v58)
  {
    v59 = *(_DWORD *)v58 - 2;
    if (*(_DWORD *)v58 != 2)
    {
LABEL_70:
      *(_DWORD *)v58 = v59;
      goto LABEL_71;
    }
    WTF::StringImpl::destroy(v58, v56);
    v58 = v79;
    v79 = 0;
    if (v58)
    {
      v59 = *(_DWORD *)v58 - 2;
      if (*(_DWORD *)v58 == 2)
      {
        WTF::StringImpl::destroy(v58, v56);
        goto LABEL_71;
      }
      goto LABEL_70;
    }
  }
LABEL_71:
  WebKit::WebsiteDataStore::defaultJavaScriptConfigurationDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v56);
  v61 = v79;
  v79 = 0;
  v62 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v61;
  if (!v62)
    goto LABEL_76;
  v63 = *(_DWORD *)v62 - 2;
  if (*(_DWORD *)v62 != 2)
    goto LABEL_75;
  WTF::StringImpl::destroy(v62, v60);
  v62 = v79;
  v79 = 0;
  if (!v62)
    goto LABEL_76;
  v63 = *(_DWORD *)v62 - 2;
  if (*(_DWORD *)v62 == 2)
    WTF::StringImpl::destroy(v62, v64);
  else
LABEL_75:
    *(_DWORD *)v62 = v63;
LABEL_76:
  WebKit::WebsiteDataStore::defaultGeneralStorageDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), &v79);
  v66 = v79;
  v79 = 0;
  v67 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v66;
  if (v67)
  {
    v68 = *(_DWORD *)v67 - 2;
    if (*(_DWORD *)v67 != 2)
    {
LABEL_80:
      *(_DWORD *)v67 = v68;
      goto LABEL_81;
    }
    WTF::StringImpl::destroy(v67, v65);
    v67 = v79;
    v79 = 0;
    if (v67)
    {
      v68 = *(_DWORD *)v67 - 2;
      if (*(_DWORD *)v67 == 2)
      {
        WTF::StringImpl::destroy(v67, v69);
        goto LABEL_81;
      }
      goto LABEL_80;
    }
  }
LABEL_81:
  WebKit::WebsiteDataStore::defaultCookieStorageFile((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), &v79);
  v71 = v79;
  v79 = 0;
  v72 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v71;
  if (!v72)
    goto LABEL_86;
  v73 = *(_DWORD *)v72 - 2;
  if (*(_DWORD *)v72 != 2)
    goto LABEL_85;
  WTF::StringImpl::destroy(v72, v70);
  v72 = v79;
  v79 = 0;
  if (!v72)
    goto LABEL_86;
  v73 = *(_DWORD *)v72 - 2;
  if (*(_DWORD *)v72 == 2)
    WTF::StringImpl::destroy(v72, v70);
  else
LABEL_85:
    *(_DWORD *)v72 = v73;
LABEL_86:
  WebKit::WebsiteDataStore::defaultSearchFieldHistoryDirectory((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 56), v70);
  v75 = v79;
  v79 = 0;
  result = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v75;
  if (!result)
    return result;
  v77 = *(_DWORD *)result - 2;
  if (*(_DWORD *)result == 2)
  {
    WTF::StringImpl::destroy(result, v74);
    result = v79;
    v79 = 0;
    if (!result)
      return result;
    v77 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v78);
  }
  *(_DWORD *)result = v77;
  return result;
}

void WebKit::WebsiteDataStore::defaultServiceWorkerRegistrationDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE9060(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultDeviceIdHashSaltsStorageDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE9140(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultJavaScriptConfigurationDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v5;
    v4 = v5;
    WebKit::WebsiteDataStore::tempDirectoryFileSystemRepresentation(&v4, 0);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v3);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE9220(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultResourceLoadStatisticsDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE9300(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultAlternativeServicesDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v5, v3, 0);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE93E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultSearchFieldHistoryDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE94C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultModelElementCacheDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v5;
    v4 = v5;
    WebKit::WebsiteDataStore::tempDirectoryFileSystemRepresentation(&v4, 0);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v3);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE95A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultIndexedDBDatabaseDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE9680(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultMediaKeysStorageDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE9760(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultApplicationCacheDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  uint64_t isMobileSafari;
  NSString *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    return;
  }
  isMobileSafari = WebCore::IOSApplication::isMobileSafari(this);
  if ((isMobileSafari & 1) != 0
    || WebCore::IOSApplication::isWebBookmarksD((WebCore::IOSApplication *)isMobileSafari))
  {
    v3 = -[NSString stringByStandardizingPath](-[NSString stringByAppendingPathComponent:](NSHomeDirectory(), "stringByAppendingPathComponent:", CFSTR("Library/Caches/com.apple.WebAppCache")), "stringByStandardizingPath");
    MEMORY[0x19AEABCC8](&v9, v3);
    WebKit::stringByResolvingSymlinksInPath();
    v5 = v9;
    v9 = 0;
    if (!v5)
      return;
    if (*(_DWORD *)v5 != 2)
    {
      *(_DWORD *)v5 -= 2;
      return;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v9;
    v8 = v9;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v8, v7, 0);
    if (!v6)
      return;
    if (*(_DWORD *)v6 != 2)
    {
      *(_DWORD *)v6 -= 2;
      return;
    }
    v5 = v6;
  }
  WTF::StringImpl::destroy(v5, v4);
}

void sub_196CE98C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WTF::StringImpl *v10;

  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultWebSQLDatabaseDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 0);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE99C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebsiteDataStore::defaultGeneralStorageDirectory@<X0>(WebKit::WebsiteDataStore *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _QWORD block[4];
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
    return (WTF::StringImpl *)WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v11;
  v10 = v11;
  WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v10, v6, 1);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN6WebKit16WebsiteDataStore30defaultGeneralStorageDirectoryERKN3WTF6StringE_block_invoke;
  block[3] = &__block_descriptor_40_e8_32c17_ZTSN3WTF6StringE_e5_v8__0l;
  result = *a2;
  if (*a2)
    *(_DWORD *)result += 2;
  v9 = result;
  if (WebKit::WebsiteDataStore::defaultGeneralStorageDirectory(WTF::String const&)::onceToken == -1)
  {
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&WebKit::WebsiteDataStore::defaultGeneralStorageDirectory(WTF::String const&)::onceToken, block);
    result = v9;
    if (!v9)
      return result;
  }
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  *(_DWORD *)result -= 2;
  return result;
}

void sub_196CE9B34(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultNetworkCacheDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE9C14(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultLocalStorageDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE9CF4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultCacheStorageDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE9DD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::defaultHSTSStorageDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v6;
    v5 = v6;
    WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v5, v3, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v4);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196CE9EB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebsiteDataStore::defaultCookieStorageFile@<X0>(WTF *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  WTF *v4;
  int v5;
  __int128 v6;
  const char *v7;
  int v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    *(_QWORD *)&v6 = "Cookies";
    DWORD2(v6) = 7;
    BYTE12(v6) = 1;
    v7 = "Cookies.binarycookies";
    v8 = 21;
    v9 = 1;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v4, &v6, 2uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    this = v4;
    if (v4)
    {
      v4 = 0;
      v5 = 0;
      return (WTF *)WTF::fastFree(this, v3);
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void sub_196CE9FC8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10)
      {
        if (v11 != -1)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (uint64_t *)(v12 + 16 * v19);
          v22 = (unsigned __int8 *)v21[1];
          v21[1] = 0;
          if (v22)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v22, v8);
          *v21 = *v10;
          v23 = v4 + 16 * i;
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          v21[1] = v24;
          v25 = *(unsigned __int8 **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v25)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v25, v8);
        }
      }
      else
      {
        v26 = (unsigned __int8 *)v10[1];
        v10[1] = 0;
        if (v26)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v26, v8);
      }
    }
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::rehash(a1, v3);
}

void __destroy_helper_block_e8_32c65_ZTSKZ52__WKMouseDeviceObserver_startWithCompletionHandler__E3__0(uint64_t a1)
{
  const void *v2;

  _Block_release(*(const void **)(a1 + 40));
  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::postMessageToRemote(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebKit::WebProcess *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebKit::WebProcess *v18;
  uint64_t *v19[2];

  v6 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>((uint64_t *)(a1 + 16), a3);
  v7 = *(uint64_t **)(a1 + 16);
  if (v7)
    v7 += 4 * *((unsigned int *)v7 - 1);
  if (v7 == v6)
  {
    v10 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(a2 + 8);
      v12 = 32 * v10;
      do
      {
        v6 = (uint64_t *)WebKit::WebMessagePortChannelProvider::messagePortSentToRemote(a1, v11);
        v11 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    v13 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v6);
    v14 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v13) + 24);
    v19[0] = (uint64_t *)a2;
    v19[1] = a3;
    return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::PostMessageToRemote>(v14, v19);
  }
  else
  {
    v8 = *((_DWORD *)v6 + 7);
    if (v8 == *((_DWORD *)v6 + 6))
    {
      WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessageWithMessagePorts>((uint64_t)(v6 + 2), a2);
    }
    else
    {
      v15 = v6[2] + 24 * v8;
      v16 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)v15 = v16;
      v17 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(v15 + 8) = v17;
      LODWORD(v17) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 0;
      *(_DWORD *)(v15 + 16) = v17;
      LODWORD(v17) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a2 + 20) = 0;
      *(_DWORD *)(v15 + 20) = v17;
      ++*((_DWORD *)v6 + 7);
    }
    {
      v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v18);
    }
    return (IPC::Encoder *)WebCore::MessagePort::notifyMessageAvailable();
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::createNewMessagePortChannel(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v4;
  _BYTE v6[24];

  v4 = (uint64_t *)(a1 + 264);
  WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::add((uint64_t *)(a1 + 264), a2, (uint64_t)v6);
  WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::add(v4, a3, (uint64_t)v6);
  return WebCore::MessagePortChannelRegistry::didCreateMessagePortChannel();
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::add@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v25 = -1640531527;
  v26 = 0;
  v27 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(&v25, a2, a2 + 1);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
  v9 = result & v7;
  v10 = (_QWORD *)(v6 + 16 * (result & v7));
  v11 = *v10;
  v12 = v10[1];
  if (*(_OWORD *)v10 != 0)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v11 == *a2 && v12 == a2[1])
      {
        v23 = *a1;
        if (*a1)
          v24 = *(unsigned int *)(v23 - 4);
        else
          v24 = 0;
        v20 = 0;
        v19 = v23 + 16 * v24;
        goto LABEL_11;
      }
      if (v11 == -1)
        v21 = v10;
      v9 = (v9 + v22) & v7;
      v10 = (_QWORD *)(v6 + 16 * v9);
      v11 = *v10;
      v12 = v10[1];
      ++v22;
    }
    while (*(_OWORD *)v10 != 0);
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = v21;
    }
  }
  *(_OWORD *)v10 = *(_OWORD *)a2;
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_10;
LABEL_21:
    result = WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(a1, (uint64_t)v10);
    v10 = (_QWORD *)result;
    v15 = *a1;
    if (*a1)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_10;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_21;
LABEL_10:
  v19 = v15 + 16 * v18;
  v20 = 1;
LABEL_11:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v20;
  return result;
}

uint64_t *WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v15;
  __int16 v16;
  char v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v15 = -1640531527;
  v16 = 0;
  v17 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(&v15, a2, a2 + 1);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  v7 = a2[1];
  v8 = v6 & v5;
  result = (uint64_t *)(v2 + 32 * v8);
  v10 = *result;
  v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    v13 = 1;
    while (v10 | v11)
    {
      v8 = ((_DWORD)v8 + v13) & v5;
      result = (uint64_t *)(v2 + 32 * v8);
      v10 = *result;
      v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 32 * *(unsigned int *)(*a1 - 4));
    else
      return 0;
  }
  return result;
}

void WebKit::WebFrame::invalidatePolicyListeners(CFTypeRef *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  CFRetain(this[1]);
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 64) = 0;
  v8 = this[6];
  this[6] = 0;
  v3 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::begin(&v8);
  v4 = v2;
  v5 = 0;
  v6 = v8;
  if (v8)
    v5 = &v8[3 * *((unsigned int *)v8 - 1)];
  if (v5 != v3)
  {
    do
    {
      v7 = v3[2];
      v3[2] = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 2);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      while (1)
      {
        v3 += 3;
        if (v3 == v4)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_13;
      }
      v3 = v4;
LABEL_13:
      ;
    }
    while (v3 != v5);
    v6 = v8;
  }
  if (v6)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable((uint64_t)v6, v2);
  if (this)
    CFRelease(this[1]);
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[3 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v2];
  if ((_DWORD)v2)
  {
    v4 = 24 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v4 -= 24;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebKit::WebProcessPool::registerURLSchemeAsSecure(WebKit::WebProcessPool *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  void *v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::StringImpl **v13;
  uint64_t *v14;
  int v15;

  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&qword_1ECE73790, a2, a3, (uint64_t)&v14);
  v14 = (uint64_t *)a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsSecure>((uint64_t)this, &v14, 0);
  WebKit::NetworkProcessProxy::allNetworkProcesses(v5, (uint64_t)&v14);
  if (v15)
  {
    v7 = v14;
    v8 = &v14[v15];
    do
    {
      v9 = *v7;
      v10 = (unsigned int *)(*v7 + 16);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v13 = a2;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::RegisterURLSchemeAsSecure>(v9, (uint64_t **)&v13, 0, 0);
      if (v9)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
      ++v7;
    }
    while (v7 != v8);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
}

uint64_t WebKit::WebProcessPool::registerURLSchemeAsBypassingContentSecurityPolicy(WebKit::WebProcessPool *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  void *v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::StringImpl **v13;
  uint64_t *v14;
  int v15;

  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&qword_1ECE73798, a2, a3, (uint64_t)&v14);
  v14 = (uint64_t *)a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>((uint64_t)this, &v14, 0);
  WebKit::NetworkProcessProxy::allNetworkProcesses(v5, (uint64_t)&v14);
  if (v15)
  {
    v7 = v14;
    v8 = &v14[v15];
    do
    {
      v9 = *v7;
      v10 = (unsigned int *)(*v7 + 16);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v13 = a2;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>(v9, (uint64_t **)&v13, 0, 0);
      if (v9)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
      ++v7;
    }
    while (v7 != v8);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
}

void sub_196CEAD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemote::animationStarted(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 816), a2, a3);
  v8 = *(_QWORD *)(a1 + 816);
  if (v8)
    v8 += 16 * *(unsigned int *)(v8 - 4);
  if (v8 != v7)
  {
    v9 = *(_QWORD **)(v7 + 8);
    if (((*(uint64_t (**)(_QWORD *))(*v9 + 32))(v9) & 1) == 0)
    {
      result = 96;
      __break(0xC471u);
      return result;
    }
    WebCore::PlatformCALayer::currentTimeToMediaTime();
    v9[4] = v10;
  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, WTF::StringImpl **, double))(*(_QWORD *)result + 32))(result, a2, a4);
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::removeAnimationForKey(int8x16_t *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *i64;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int8x16_t result;
  const WTF::StringImpl **v11[3];

  i64 = this[51].i64;
  v6 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(this[51].i64, a2, a3);
  v8 = this[51].i64[0];
  if (v8)
  {
    v9 = (WTF::StringImpl *)(v8 + 16 * *(unsigned int *)(v8 - 4));
    if (v9 == v6)
      goto LABEL_3;
  }
  else
  {
    if (!v6)
      goto LABEL_3;
    v9 = 0;
  }
  if (v9 != v6)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(i64, v6);
  v11[0] = a2;
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<WebKit::PlatformCALayerRemote::removeAnimationForKey(WTF::String const&)::$_0>((uint64_t)this[8].i64, v11, v7);
LABEL_3:
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(this[9].i64, a2, v7, (uint64_t)v11);
  result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x20uLL));
  this[4] = result;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 >= 0x100 ? v7 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 16 * v10);
    if (!v11)
      break;
    if (v11 != (WTF *)-1 && (WTF::equal(v11, *a2, a3) & 1) != 0)
      return v3 + 16 * v10;
  }
  if (*a1)
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::registerCustomURLScheme(uint64_t *a1)
{
  WTF::StringImpl *v2;
  WebKit::WebExtensionMatchPattern *v3;
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  WebKit::WebExtensionMatchPattern *v6;
  const WTF::StringImpl *v7;
  WebKit::WebExtensionMatchPattern *v8;
  const WTF::StringImpl *v9;
  void *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  char v18;
  uint64_t *v19;
  unsigned int v20;

  v2 = (WTF::StringImpl *)*a1;
  if (*a1)
    *(_DWORD *)v2 += 2;
  v3 = (WebKit::WebExtensionMatchPattern *)WTF::URLParser::maybeCanonicalizeScheme();
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      v3 = (WebKit::WebExtensionMatchPattern *)WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  WebKit::WebExtensionMatchPattern::extensionSchemes(v3);
  if (v18
    && (v6 = (WebKit::WebExtensionMatchPattern *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&WebKit::WebExtensionMatchPattern::extensionSchemes(void)::schemes, &v17, v5, (uint64_t)&v19), WebKit::WebExtensionMatchPattern::validSchemes(v6), v18)&& (v8 = (WebKit::WebExtensionMatchPattern *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes, &v17, v7, (uint64_t)&v19), WebKit::WebExtensionMatchPattern::supportedSchemes(v8), v18))
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&qword_1ECE73280, &v17, v9, (uint64_t)&v19);
    WebKit::WebProcessPool::allProcessPools((uint64_t)&v19);
    if (v20)
    {
      v13 = v19;
      v14 = 8 * v20;
      do
      {
        v15 = *v13;
        v16 = a1;
        WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsWebExtension>(*(IPC::Encoder **)(v15 + 72), *(_DWORD *)(v15 + 84), &v16);
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    result = (WTF::StringImpl *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v10);
    if (v18)
    {
      result = v17;
      v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    result = (WTF::StringImpl *)std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_196CEB138(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _BYTE v7[24];

  *a1 = 0;
  if (a3)
  {
    v5 = 8 * (_QWORD)a3;
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a1, a2++, a3, (uint64_t)v7);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_196CEB1E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl ***v2;

  if (*v2)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100)
    v10 = v9 >> 8;
  else
    v10 = WTF::StringImpl::hashSlowCase(*a2);
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl **)(v7 + 8 * (v10 & v8));
    v15 = *v14;
    if (!*v14)
    {
      if (v11)
      {
        *v11 = 0;
        --*(_DWORD *)(*a1 - 16);
        v14 = v11;
      }
      result = (uint64_t)WTF::String::operator=(v14, (WTF::StringImpl *)a2);
      v21 = *a1;
      if (*a1)
        v22 = *(_DWORD *)(v21 - 12) + 1;
      else
        v22 = 1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *a1;
      if (*a1)
        v24 = *(_DWORD *)(v23 - 12);
      else
        v24 = 0;
      v25 = (*(_DWORD *)(v23 - 16) + v24);
      v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
      {
        if (v26 > 2 * v25)
          goto LABEL_23;
      }
      else if (3 * v26 > 4 * v25)
      {
LABEL_23:
        v20 = v23 + 8 * v26;
        v19 = 1;
        goto LABEL_13;
      }
      result = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, v14);
      v14 = (WTF::StringImpl **)result;
      v23 = *a1;
      if (*a1)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_23;
    }
    if (v15 != (WTF *)-1)
      break;
    v11 = (WTF::StringImpl **)(v7 + 8 * v13);
LABEL_9:
    v10 = i + v13;
  }
  result = WTF::equal(v15, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_9;
  v17 = *a1;
  if (*a1)
    v18 = *(unsigned int *)(v17 - 4);
  else
    v18 = 0;
  v19 = 0;
  v20 = v17 + 8 * v18;
LABEL_13:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v20;
  *(_BYTE *)(a4 + 16) = v19;
  return result;
}

{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100)
    v10 = v9 >> 8;
  else
    v10 = WTF::StringImpl::hashSlowCase(*a2);
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl **)(v7 + 8 * (v10 & v8));
    v15 = *v14;
    if (!*v14)
    {
      if (v11)
      {
        *v11 = 0;
        --*(_DWORD *)(*a1 - 16);
        v14 = v11;
      }
      result = (uint64_t)WTF::String::operator=(v14, (WTF::StringImpl *)a2);
      v17 = *a1;
      if (*a1)
        v18 = *(_DWORD *)(v17 - 12) + 1;
      else
        v18 = 1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *a1;
      if (*a1)
        v20 = *(_DWORD *)(v19 - 12);
      else
        v20 = 0;
      v21 = (*(_DWORD *)(v19 - 16) + v20);
      v22 = *(unsigned int *)(v19 - 4);
      if (v22 > 0x400)
      {
        if (v22 > 2 * v21)
          goto LABEL_16;
      }
      else if (3 * v22 > 4 * v21)
      {
LABEL_16:
        v23 = v19 + 8 * v22;
        v24 = 1;
        goto LABEL_17;
      }
      result = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, v14);
      v14 = (WTF::StringImpl **)result;
      v19 = *a1;
      if (*a1)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_16;
    }
    if (v15 == (WTF *)-1)
    {
      v11 = (WTF::StringImpl **)(v7 + 8 * v13);
      goto LABEL_24;
    }
    result = WTF::equal(v15, *a2, a3);
    if ((_DWORD)result)
      break;
LABEL_24:
    v10 = i + v13;
  }
  v25 = *a1;
  if (*a1)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  v24 = 0;
  v23 = v25 + 8 * v26;
LABEL_17:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (WTF::StringImpl **)v6;
    do
    {
      if (*v13)
      {
        if (*v13 != (WTF::StringImpl *)-1)
        {
          v14 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, v13);
          v15 = *v14;
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v10);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = *v13;
          *v13 = 0;
          *v14 = v16;
          v17 = *v13;
          *v13 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v10);
            else
              *(_DWORD *)v17 -= 2;
          }
          if (v13 == a3)
            v11 = v14;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t *WebKit::WebExtensionMatchPattern::supportedSchemes(WebKit::WebExtensionMatchPattern *this)
{
  WTF::StringImpl *v2;
  uint64_t i;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[5];

  v6[4] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_121 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[1] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[2] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[3] = v5;
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet(&qword_1ECE73280, v6, (const WTF::StringImpl *)4);
    for (i = 3; i != -1; --i)
    {
      v4 = v6[i];
      v6[i] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v2);
        else
          *(_DWORD *)v4 -= 2;
      }
    }
    _MergedGlobals_121 = 1;
  }
  return &qword_1ECE73280;
}

void sub_196CEB65C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF::StringImpl *v5;

  v4 = 24;
  while (1)
  {
    v5 = *(WTF::StringImpl **)(v2 + v4);
    *(_QWORD *)(v2 + v4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v4 -= 8;
    if (v4 == -8)
      _Unwind_Resume(exception_object);
  }
}

void sub_196CEB6A4(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  while (1)
  {
    v12 = (WTF::StringImpl *)*((_QWORD *)v10 - 1);
    v10 -= 8;
    v11 = v12;
    *(_QWORD *)v10 = 0;
    if (v12)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (v10 == &a10)
      JUMPOUT(0x196CEB69CLL);
  }
}

uint64_t *WebKit::WebExtensionMatchPattern::validSchemes(WebKit::WebExtensionMatchPattern *this)
{
  WTF::StringImpl *v2;
  uint64_t i;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[7];

  v6[6] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[1] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[2] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[3] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[4] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[5] = v5;
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet(&WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes, v6, (const WTF::StringImpl *)6);
    for (i = 5; i != -1; --i)
    {
      v4 = v6[i];
      v6[i] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v2);
        else
          *(_DWORD *)v4 -= 2;
      }
    }
  }
  return &WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes;
}

void sub_196CEB860(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF::StringImpl *v5;

  v4 = 40;
  while (1)
  {
    v5 = *(WTF::StringImpl **)(v2 + v4);
    *(_QWORD *)(v2 + v4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v4 -= 8;
    if (v4 == -8)
      _Unwind_Resume(exception_object);
  }
}

void sub_196CEB8A8(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  while (1)
  {
    v12 = (WTF::StringImpl *)*((_QWORD *)v10 - 1);
    v10 -= 8;
    v11 = v12;
    *(_QWORD *)v10 = 0;
    if (v12)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (v10 == &a10)
      JUMPOUT(0x196CEB8A0);
  }
}

void ___ZN6WebKit11XPCEndpointC2Ev_block_invoke(uint64_t a1, id a2)
{
  uint64_t v2;
  Class Class;
  _xpc_connection_s *v4;
  id v5;
  pid_t pid;
  id v7;
  _QWORD handler[5];
  id v10;

  v2 = *(_QWORD *)(a1 + 32);
  Class = object_getClass(a2);
  WebKit::handleXPCExitMessage(a2);
  if (Class == (Class)MEMORY[0x1E0C812E0])
  {
    v4 = (_xpc_connection_s *)a2;
    if (a2)
    {
      v5 = a2;
      v4 = (_xpc_connection_s *)a2;
    }
    pid = xpc_connection_get_pid(v4);
    if (pid == getpid() || (WTF::hasEntitlement() & 1) != 0)
    {
      xpc_connection_set_target_queue((xpc_connection_t)a2, MEMORY[0x1E0C80D38]);
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 3321888768;
      handler[2] = ___ZN6WebKit11XPCEndpointC2Ev_block_invoke_2;
      handler[3] = &__block_descriptor_48_e8_40c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE_e33_v16__0__NSObject_OS_xpc_object__8l;
      handler[4] = v2;
      v10 = a2;
      if (a2)
        v7 = a2;
      xpc_connection_set_event_handler((xpc_connection_t)a2, handler);
      xpc_connection_resume((xpc_connection_t)a2);
      if (v10)

      if (a2)
    }
    else
    {
      WTFLogAlways();
      if (a2)

    }
  }
}

void sub_196CEBA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16)

  if (a10)
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::PlatformCALayerRemoteTiledBacking::setBorderColor(WebKit::PlatformCALayerRemoteTiledBacking *this, const Color *a2)
{
  WebCore::TileController *v2;
  Color v3;
  unsigned int *result;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v2 = (WebCore::TileController *)*((_QWORD *)this + 105);
  WebCore::Color::Color((WebCore::Color *)&v8, a2);
  v3.m_colorAndFlags = (unint64_t)&v8;
  result = (unsigned int *)WebCore::TileController::setTileDebugBorderColor(v2, v3);
  if ((v8 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::scrollingTreeNodeDidScroll(uint64_t a1, uint64_t a2, char a3)
{
  int v3;
  uint64_t result;
  uint64_t v8;
  WebKit::WebPageProxy **v9;
  char v10;
  int v11;
  unsigned int v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  WebKit::RemoteLayerTreeScrollingPerformanceData *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  void *v23;
  CALayer v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  char v29;
  char v30;

  result = WebCore::ScrollingTree::scrollingTreeNodeDidScroll();
  v8 = *(_QWORD *)(a1 + 344);
  if (v8)
  {
    v9 = *(WebKit::WebPageProxy ***)(v8 + 8);
    if (v9)
    {
      if (*(unsigned __int8 *)(a2 + 40) <= 1u)
      {
        v3 = *(_DWORD *)(a2 + 348);
        v12 = *(_DWORD *)(a2 + 344) & 0xFFFFFF00;
        v11 = *(_DWORD *)(a2 + 344);
        v10 = 1;
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
      }
      v13 = *(void **)(a2 + 48);
      v14 = *(_QWORD **)(a2 + 56);
      v15 = *(_QWORD *)(a2 + 144);
      result = (*((uint64_t (**)(WebKit::WebPageProxy **))*v9 + 9))(v9);
      if ((result & 1) != 0
        || ((v22 = (_QWORD *)*((_QWORD *)v9[3] + 2)) == 0
          ? (v23 = 0)
          : (v23 = (void *)v22[6], v22 = (_QWORD *)v22[7]),
            v13 != v23 || v14 != v22))
      {
        result = WebKit::WebPageProxy::scrollingUpdatesDisabledForTesting(v9[2]);
        if ((result & 1) == 0)
        {
          WebKit::WebPageProxy::scrollingNodeScrollViewDidScroll((uint64_t)v9[2], (uint64_t)v13, (uint64_t)v14);
          result = (uint64_t)v9[3];
          if (!*(_BYTE *)(result + 336))
          {
            v24._attr.layer = v13;
            v24._attr._objc_observation_info = v14;
            v25 = v15;
            v26 = v12 | v11;
            v27 = v3;
            v28 = v10;
            v29 = 0;
            v30 = a3;
            result = WebCore::ScrollingTree::addPendingScrollUpdate();
            v16 = (WebKit::RemoteLayerTreeScrollingPerformanceData *)*((_QWORD *)v9[2] + 114);
            if (v16)
            {
              WebCore::ScrollingTree::layoutViewport(v9[3]);
              v24.super.isa = (Class)__PAIR64__(v18, v17);
              v24._attr.refcount = v19;
              v24._attr.magic = v20;
              v21 = WebKit::RemoteLayerTreeScrollingPerformanceData::blankPixelCount(v16, &v24);
              result = WebKit::RemoteLayerTreeScrollingPerformanceData::appendBlankPixelCount(v16, 1, v21);
            }
            if (!*((_BYTE *)v9 + 128))
              return (uint64_t)WebKit::RemoteScrollingCoordinatorProxy::sendScrollingTreeNodeDidScroll((WebKit::RemoteScrollingCoordinatorProxy *)v9);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::propagatesMainFrameScrolls(WebKit::RemoteScrollingCoordinatorProxyIOS *this)
{
  return 0;
}

BOOL WebKit::FullscreenClient::isType(uint64_t a1, int a2)
{
  return a2 == 1;
}

_QWORD *IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(_QWORD *result, _BYTE *a2)
{
  unint64_t v2;

  v2 = result[2];
  if (v2 >= result[1])
    goto LABEL_7;
  *(_BYTE *)(*result + v2) = a2[1] & 0xF;
  result[2] = v2 + 1;
  if (v2 + 1 >= result[1]
    || (*(_BYTE *)(*result + v2 + 1) = *a2 & 0x1F, result[2] = v2 + 2, v2 + 2 >= result[1])
    || (*(_BYTE *)(*result + v2 + 2) = *a2 >> 5, result[2] = v2 + 3, v2 + 3 >= result[1])
    || (*(_BYTE *)(*result + v2 + 3) = *(unsigned __int16 *)a2 >> 12, result[2] = v2 + 4, v2 + 4 >= result[1]))
  {
LABEL_7:
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2 + 4) = a2[2] & 0xF;
    result[2] = v2 + 5;
  }
  return result;
}

uint64_t WebKit::WebProcessPool::pageEndUsingWebsiteDataStore(WebKit::WebProcessPool *this, WebKit::WebPageProxy *a2, WebKit::WebsiteDataStore *a3)
{
  WTF::RunLoop *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  int v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  const WTF::StringImpl *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  _DWORD *v31;
  uint64_t v32;

  v6 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v6) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  v7 = (WTF::StringImpl **)*((_QWORD *)a3 + 3);
  if ((unint64_t)v7 - 1 >= 0xFFFFFFFFFFFFFFFELL)
  {
    __break(0xC471u);
    JUMPOUT(0x196CEBF84);
  }
  v8 = *((_QWORD *)this + 90);
  if (!v8)
    goto LABEL_38;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(WTF::StringImpl ***)(v8 + 16 * v13);
  if (v14 != v7)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(WTF::StringImpl ***)(v8 + 16 * v13);
      ++v15;
      if (v14 == v7)
        goto LABEL_10;
    }
    v13 = *(unsigned int *)(v8 - 4);
  }
LABEL_10:
  if (v13 == *(_DWORD *)(v8 - 4))
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x196CEBFDCLL);
  }
  v16 = (_QWORD *)(v8 + 16 * v13);
  v32 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  v17 = v16 + 1;
  v18 = (_QWORD *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(v16 + 1, &v32);
  v20 = v18;
  v21 = v16[1];
  if (v21)
  {
    if ((_QWORD *)(v21 + 8 * *(unsigned int *)(v21 - 4)) == v18)
    {
LABEL_16:
      if (*(_DWORD *)(v21 - 12))
        goto LABEL_32;
      goto LABEL_19;
    }
  }
  else if (!v18)
  {
    v21 = 0;
    goto LABEL_19;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v16 + 1, v18);
  v21 = *v17;
  if (*v17)
    goto LABEL_16;
LABEL_19:
  v22 = (uint64_t *)((char *)this + 720);
  v23 = (_QWORD *)*((_QWORD *)this + 90);
  if (!v23 || (v23 += 2 * *((unsigned int *)v23 - 1), v23 != v16))
  {
    if (v23 != v16)
    {
      *v16 = -1;
      if (v21)
        WTF::fastFree((WTF *)(v21 - 16), v20);
      ++*(_DWORD *)(*v22 - 16);
      v24 = *v22;
      if (*v22)
        v25 = *(_DWORD *)(v24 - 12) - 1;
      else
        v25 = -1;
      *(_DWORD *)(v24 - 12) = v25;
      v26 = *v22;
      if (*v22)
      {
        v27 = 6 * *(_DWORD *)(v26 - 12);
        v28 = *(_DWORD *)(v26 - 4);
        if (v27 < v28 && v28 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)this + 90, v28 >> 1, 0);
      }
    }
  }
  if (((unint64_t)v7 & 0x8000000000000000) != 0 && v7 != (WTF::StringImpl **)-1)
  {
    v31 = (_DWORD *)*((_QWORD *)this + 96);
    ++*v31;
    WebKit::WebProcessCache::clearAllProcessesForSession((uint64_t)v31, v7, v19);
    if (*v31)
    {
      --*v31;
      goto LABEL_32;
    }
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x196CEBF64);
  }
LABEL_32:
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)a3 + 328, a2);
  return WebKit::WebsiteDataStore::updateServiceWorkerInspectability(a3, v29);
}

uint64_t WebKit::WebProcessPool::pageBeginUsingWebsiteDataStore(WebKit::WebProcessPool *this, WebKit::WebPageProxy *a2, WebKit::WebsiteDataStore *a3)
{
  WTF::RunLoop *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _QWORD v15[3];

  v6 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v6) & 1) == 0
    || (v7 = *((_QWORD *)a3 + 3), (unint64_t)(v7 - 1) >= 0xFFFFFFFFFFFFFFFELL))
  {
    __break(0xC471u);
    JUMPOUT(0x196CEC0CCLL);
  }
  v12 = 0;
  v13 = v7;
  WTF::HashMap<PAL::SessionID,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>((uint64_t *)this + 90, &v13, &v12, (uint64_t)v15);
  v11 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add((uint64_t *)(v15[0] + 8), &v11, (uint64_t)v14);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 16), v8);
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)a3 + 328, (unsigned int *)a2, (uint64_t)v15);
  return WebKit::WebsiteDataStore::updateServiceWorkerInspectability(a3, v9);
}

uint64_t WebKit::WebsiteDataStore::updateServiceWorkerInspectability(WebKit::WebsiteDataStore *this, void *a2)
{
  _QWORD **v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Inspector::RemoteInspectionTarget *v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;
  _QWORD **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v3 = (_QWORD **)((char *)this + 328);
  result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 328, a2);
  if ((_DWORD)result)
  {
    v5 = *((unsigned __int8 *)this + 456);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v3, &v21);
    v6 = *((_QWORD *)this + 41);
    if (v6)
    {
      v7 = *(unsigned int *)(v6 - 4);
      v8 = v6 + 8 * v7;
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    v16 = v3;
    v17 = v8;
    v18 = v8;
    v19 = v8;
    v20 = v6 + 8 * v7;
    for (result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v16);
          ;
          result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v21))
    {
      if (v22 == v17)
      {
        v12 = 0;
        goto LABEL_15;
      }
      v9 = *(_QWORD *)(*(_QWORD *)v22 + 8);
      v10 = v9 ? v9 - 16 : 0;
      v11 = *(Inspector::RemoteInspectionTarget **)(v10 + 1080);
      if (v11)
      {
        result = Inspector::RemoteInspectionTarget::inspectable(v11);
        if ((result & 1) != 0)
          break;
      }
    }
    v12 = 1;
LABEL_15:
    *((_BYTE *)this + 456) = v12;
    if (v5 != v12)
    {
      result = *((_QWORD *)this + 51);
      if (result)
      {
        v13 = (unsigned int *)(result + 16);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        v15 = *((_BYTE *)this + 456);
        v21 = (char *)this + 24;
        LOBYTE(v22) = v15;
        WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetInspectionForServiceWorkersAllowed>(result, (uint64_t)&v21, 0, 0);
        return (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
      }
    }
  }
  return result;
}

void WebKit::WebProcessProxy::getLaunchOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE v29[24];
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;

  v2 = a2;
  *(_DWORD *)a2 = 0;
  WebKit::AuxiliaryProcessProxy::getLaunchOptions(a1, (uint64_t)a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 512) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  v6 = &_MergedGlobals_106;
    goto LABEL_47;
  while (1)
  {
    if (WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>((uint64_t)&WebKit::allInspectorProcessPools(void)::allInspectorProcessPools, v5))
    {
      v32 = "inspector-process";
      v33 = 18;
      v30 = "1";
      v31 = 2;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral>(v2 + 2, (uint64_t *)&v32, (uint64_t)&v30, (uint64_t)v29);
    }
    *((_BYTE *)v2 + 24) = 0;
    if (*(_BYTE *)(a1 + 778))
    {
      v32 = "is-prewarmed";
      v33 = 13;
      v30 = "1";
      v31 = 2;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral>(v2 + 2, (uint64_t *)&v32, (uint64_t)&v30, (uint64_t)v29);
    }
    v7 = *(_QWORD *)(a1 + 512);
    if (!v7)
    {
      if (!MEMORY[0x20A])
        goto LABEL_18;
      v9 = 0;
LABEL_17:
      CFRetain(*(CFTypeRef *)(v9 + 8));
      *(_BYTE *)(v9 + 522) = 0;
      CFRelease(*(CFTypeRef *)(v9 + 8));
      *((_BYTE *)v2 + 25) = 1;
      goto LABEL_18;
    }
    v8 = *(_QWORD *)(v7 + 8);
    v9 = v8 - 16;
    if (v8)
      v10 = v8 - 16;
    else
      v10 = 0;
    if (*(_BYTE *)(v10 + 522))
      goto LABEL_17;
LABEL_18:
    if (!*(_BYTE *)(a1 + 872))
      return;
    v2 += 2;
    v32 = "service-worker-process";
    v33 = 23;
    v30 = "1";
    v31 = 2;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral>(v2, (uint64_t *)&v32, (uint64_t)&v30, (uint64_t)v29);
    v6 = (char *)*(unsigned __int8 *)(a1 + 704);
    if (*(_BYTE *)(a1 + 704))
      break;
    __break(1u);
LABEL_47:
    WebKit::allInspectorProcessPools(void)::allInspectorProcessPools = 0;
    *(_QWORD *)algn_1ECE73928 = 0;
    v6[2352] = 1;
  }
  v11 = (WTF::StringImpl *)(a1 + 696);
  v12 = *v2;
  if (*v2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v2, 0), (v12 = *v2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = WTF::HashTranslatorASCIILiteral::hash((uint64_t)"registrable-domain", 19);
  v15 = 0;
  v16 = 0;
  v17 = v14;
  while (2)
  {
    v18 = v17 & v13;
    v19 = (_QWORD *)(v12 + 16 * (v17 & v13));
    v20 = *v19;
    if (*v19 == -1)
    {
LABEL_27:
      v17 = ++v15 + v18;
      v16 = v19;
      continue;
    }
    break;
  }
  if (v20)
  {
    v21 = MEMORY[0x19AEABBCC](v20, "registrable-domain", 18);
    v19 = v16;
    if ((v21 & 1) != 0)
      return;
    goto LABEL_27;
  }
  if (v16)
    v22 = (WTF::StringImpl **)v16;
  else
    v22 = (WTF::StringImpl **)(v12 + 16 * v18);
  if (*v22 == (WTF::StringImpl *)-1)
  {
    *v22 = 0;
    v22[1] = 0;
    --*(_DWORD *)(*v2 - 16);
  }
  WTF::HashTranslatorASCIILiteral::translate(v22, (WTF::StringImpl *)"registrable-domain", 19, v14);
  WTF::String::operator=(v22 + 1, v11);
  v23 = *v2;
  if (*v2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v2;
  if (*v2)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
LABEL_41:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v2, v22);
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_41;
  }
}

BOOL API::WebsitePolicies::lockdownModeEnabled(API::WebsitePolicies *this)
{
  int v1;
  _BOOL8 result;

  if (*((_BYTE *)this + 153))
  {
    v1 = *((unsigned __int8 *)this + 152);
  }
  else
  {
    if (!HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
    {
      result = WebKit::isLockdownModeEnabledBySystemIgnoringCaching(this);
      WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = result | 0x100;
      return result;
    }
    v1 = WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally;
  }
  return v1 != 0;
}

BOOL API::PageConfiguration::delaysWebProcessLaunchUntilFirstLoad(API::PageConfiguration *this)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL8 v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  NSObject *v11;
  int v12;
  API::PageConfiguration *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    CFRetain(*(CFTypeRef *)(v2 + 8));
    {
      WebKit::allInspectorProcessPools(void)::allInspectorProcessPools = 0;
      *(_QWORD *)algn_1ECE73928 = 0;
    }
    if (WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>((uint64_t)&WebKit::allInspectorProcessPools(void)::allInspectorProcessPools, v2))
    {
      v3 = qword_1ECE71C68;
      if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 134217984;
        v13 = this;
        _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - PageConfiguration::delaysWebProcessLaunchUntilFirstLoad() -> false because of WebInspector pool", (uint8_t *)&v12, 0xCu);
      }
      CFRelease(*(CFTypeRef *)(v2 + 8));
      return 0;
    }
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*((_BYTE *)this + 202))
  {
    v5 = qword_1ECE71C68;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
      return *((_BYTE *)this + 201) != 0;
    v6 = "true";
    if (!*((_BYTE *)this + 201))
      v6 = "false";
    v12 = 134218242;
    v13 = this;
    v14 = 2082;
    v15 = v6;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - PageConfiguration::delaysWebProcessLaunchUntilFirstLoad() -> %{public}s because of explicit client value", (uint8_t *)&v12, 0x16u);
    if (*((_BYTE *)this + 202))
      return *((_BYTE *)this + 201) != 0;
    __break(1u);
    goto LABEL_24;
  }
  v7 = *((_QWORD *)this + 3);
  if (!v7)
  {
LABEL_24:
    v11 = qword_1ECE71C68;
    v4 = 0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
      return v4;
    v12 = 134218242;
    v13 = this;
    v14 = 2082;
    v15 = "false";
    _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - PageConfiguration::delaysWebProcessLaunchUntilFirstLoad() -> %{public}s because of global default value", (uint8_t *)&v12, 0x16u);
    return 0;
  }
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v9 = "true";
    if (!*(_BYTE *)(v7 + 881))
      v9 = "false";
    v12 = 134218242;
    v13 = this;
    v14 = 2082;
    v15 = v9;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - PageConfiguration::delaysWebProcessLaunchUntilFirstLoad() -> %{public}s because of associated processPool value", (uint8_t *)&v12, 0x16u);
  }
  v4 = *(_BYTE *)(v7 + 881) != 0;
  CFRelease(*(CFTypeRef *)(v7 + 8));
  return v4;
}

uint64_t WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  ++*(_DWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a2 + 24);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return 0;
  v4 = *(_QWORD *)(a2 + 24);
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v4);
}

BOOL API::PageConfiguration::lockdownModeEnabled(API::PageConfiguration *this)
{
  CFTypeRef *v1;
  _BOOL8 v2;
  _BOOL8 result;

  v1 = (CFTypeRef *)*((_QWORD *)this + 7);
  if (v1)
  {
    CFRetain(v1[1]);
    v2 = API::WebsitePolicies::lockdownModeEnabled((API::WebsitePolicies *)v1);
    CFRelease(v1[1]);
    return v2;
  }
  else if (HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
  {
    return (_BYTE)WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally != 0;
  }
  else
  {
    result = WebKit::isLockdownModeEnabledBySystemIgnoringCaching(this);
    WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = result | 0x100;
  }
  return result;
}

uint64_t WebKit::WebPageProxy::updateHiddenPageThrottlingAutoIncreases(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v4 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, a3);
  v6 = *((_QWORD *)this + 4);
  v7 = *(_QWORD *)(v6 + 736);
  if ((result & 1) != 0)
  {
    if (v7)
      return result;
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 512) + 8);
    if (v8)
      v9 = v8 - 16;
    else
      v9 = 0;
    v10 = *(_QWORD *)(v9 + 568);
    if (!v10 || (v11 = *(uint64_t **)v10, ++*(_QWORD *)(v10 + 8), !v11) || (result = *v11) == 0)
    {
      *(_QWORD *)(v6 + 736) = v10;
      return result;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1);
    v12 = *((_QWORD *)this + 4);
    v7 = *(_QWORD *)(v12 + 736);
    *(_QWORD *)(v12 + 736) = v10;
    if (!v7)
      return result;
  }
  else
  {
    *(_QWORD *)(v6 + 736) = 0;
    if (!v7)
      return result;
  }
  v13 = *(uint64_t **)v7;
  v14 = *(_QWORD *)(v7 + 8) - 1;
  *(_QWORD *)(v7 + 8) = v14;
  if (!v13)
    goto LABEL_18;
  result = *v13;
  if (*v13)
  {
    v15 = *(_BYTE *)(v7 + 16);
    *(_BYTE *)(v7 + 16) = 1;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
    *(_BYTE *)(v7 + 16) = v15;
    if (!*(_QWORD *)v7)
    {
      v14 = *(_QWORD *)(v7 + 8);
LABEL_18:
      if (!v14)
        JUMPOUT(0x19AEB936CLL);
    }
  }
  return result;
}

unsigned int *WebKit::LinkDecorationFilteringController::observeUpdates@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  unsigned int *result;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _BYTE v35[24];
  _QWORD v36[5];
  WTF *v37;

  if (!*(_QWORD *)a1)
  {
    v6 = (void *)objc_opt_new();
    v7 = *(const void **)a1;
    *(_QWORD *)a1 = v6;
    if (v7)
    {
      CFRelease(v7);
      v6 = *(void **)a1;
    }
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = ___ZN6WebKit33LinkDecorationFilteringController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke;
    v36[3] = &__block_descriptor_40_e5_v8__0l;
    v36[4] = a1;
    objc_msgSend(v6, "listenForLinkFilteringDataChanges:", v36);
  }
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 0;
  v10 = (unsigned int *)(v9 + 8);
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 16) = v11;
  *a3 = v9;
  v12 = (uint64_t *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 36);
  LODWORD(v11) = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v11;
  if (v11 > v13)
  {
    v14 = *v12;
    if (*v12)
    {
      v15 = *(_DWORD *)(v14 - 4);
      if (!v15)
        goto LABEL_29;
      v16 = 0;
      do
      {
        while (1)
        {
          v17 = *(_QWORD *)(v14 + 8 * --v15);
          if ((unint64_t)(v17 + 1) >= 2 && !*(_QWORD *)(v17 + 8))
            break;
          if (!v15)
            goto LABEL_18;
        }
        *(_QWORD *)(v14 + 8 * v15) = 0;
        do
        {
          v18 = __ldaxr((unsigned int *)v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, (unsigned int *)v17));
        if (!v19)
        {
          atomic_store(1u, (unsigned int *)v17);
          WTF::fastFree((WTF *)v17, v8);
        }
        *(_QWORD *)(v14 + 8 * v15) = -1;
        ++v16;
      }
      while (v15);
LABEL_18:
      v14 = *v12;
      if (v16)
      {
        *(_DWORD *)(v14 - 16) += v16;
        v20 = *v12;
        if (*v12)
          v21 = *(_DWORD *)(v20 - 12);
        else
          v21 = 0;
        *(_DWORD *)(v20 - 12) = v21 - v16;
        v14 = *v12;
      }
      if (v14)
      {
        v22 = *(_DWORD *)(v14 - 4);
        if (v22 >= 9 && 6 * *(_DWORD *)(v14 - 12) < v22)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 24));
          v14 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 32) = 0;
          if (!v14)
          {
            v24 = 0;
            goto LABEL_33;
          }
          goto LABEL_32;
        }
LABEL_29:
        *(_DWORD *)(a1 + 32) = 0;
LABEL_32:
        v24 = *(_DWORD *)(v14 - 12);
        v25 = 0x7FFFFFFF;
        if (v24 >= 0x7FFFFFFF)
        {
LABEL_34:
          *(_DWORD *)(a1 + 36) = 2 * v25;
          goto LABEL_35;
        }
LABEL_33:
        v25 = v24;
        goto LABEL_34;
      }
    }
    v24 = 0;
    *(_DWORD *)(a1 + 32) = 0;
    goto LABEL_33;
  }
LABEL_35:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v10, v9);
  v26 = *(unsigned int **)v10;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  do
    v28 = __ldaxr(v26);
  while (__stlxr(v28 + 1, v26));
  v37 = (WTF *)v26;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v12, &v37, (uint64_t)v35);
  result = (unsigned int *)v37;
  v37 = 0;
  if (result)
  {
    do
    {
      v33 = __ldaxr(result);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, result));
    if (!v34)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v29);
    }
  }
  if (v26)
  {
    do
    {
      v31 = __ldaxr(v26);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v26));
    if (!v32)
    {
      atomic_store(1u, v26);
      return (unsigned int *)WTF::fastFree((WTF *)v26, v29);
    }
  }
  return result;
}

void sub_196CECC94(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18)
{
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  if (a18)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)a18);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)a18));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)a18);
      WTF::fastFree(a18, a2);
    }
  }
  if (v20)
  {
    do
    {
      v22 = __ldaxr(v20);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v20));
    if (!v23)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  *v18 = 0;
  WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v19, a2);
  _Unwind_Resume(a1);
}

WebKit::WebPageInspectorController *WebKit::WebPageInspectorController::WebPageInspectorController(Inspector::BackendDispatcher **this, WebKit::WebPageProxy *a2)
{
  WTF *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  Inspector::FrontendRouter *v8;
  Inspector::BackendDispatcher *v9;
  Inspector::InspectorTargetAgent *v10;
  uint64_t v11;
  uint64_t v13;
  WTF *v14;

  Inspector::FrontendRouter::create((Inspector::FrontendRouter *)this);
  v4 = *this;
  *(_DWORD *)v4 = *(_DWORD *)*this + 1;
  v14 = v4;
  Inspector::BackendDispatcher::create();
  if (v14)
    WTF::RefCounted<Inspector::FrontendRouter>::deref((uint64_t)v14, v5);
  Inspector::AgentRegistry::AgentRegistry((Inspector::AgentRegistry *)(this + 2));
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v6 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  this[4] = (Inspector::BackendDispatcher *)v6;
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  *((_BYTE *)this + 64) = 0;
  v8 = *this;
  v9 = this[1];
  v10 = (Inspector::InspectorTargetAgent *)WTF::fastMalloc((WTF *)0x40);
  v11 = Inspector::InspectorTargetAgent::InspectorTargetAgent(v10, v8, v9);
  this[5] = (Inspector::BackendDispatcher *)v11;
  v13 = v11;
  Inspector::AgentRegistry::append();
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return (WebKit::WebPageInspectorController *)this;
}

WTF::StringImpl *WebKit::WebPageInspectorController::init(WebKit::WebPageInspectorController *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 1896), &v6);
  WebKit::WebPageInspectorController::createInspectorTarget((uint64_t)this, (_DWORD **)&v6, 0);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebPageInspectorController::createInspectorTarget(uint64_t a1, _DWORD **a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  WebKit::InspectorTargetProxy *v11;
  WTF *v12;
  void *v13;
  WebKit::InspectorTargetProxy *v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = WTF::fastMalloc((WTF *)0x40);
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = off_1E34DCE38;
  *(_QWORD *)(v8 + 32) = v7;
  v9 = *a2;
  if (*a2)
    *v9 += 2;
  *(_QWORD *)(v8 + 40) = v9;
  *(_BYTE *)(v8 + 48) = a3;
  *(_QWORD *)(v8 + 56) = 0;
  v14 = (WebKit::InspectorTargetProxy *)v8;
  WebKit::WebPageInspectorController::addTarget(a1, &v14);
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    WebKit::InspectorTargetProxy::~InspectorTargetProxy(v11, v10);
    WTF::fastFree(v12, v13);
  }
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

WTF::StringImpl *WebKit::WebPageInspectorController::addTarget(uint64_t a1, Inspector::InspectorTarget **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;

  Inspector::InspectorTargetAgent::targetCreated(*(Inspector::InspectorTargetAgent **)(a1 + 40), *a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)*a2 + 5);
  if (v4)
    *(_DWORD *)v4 += 2;
  v8 = v4;
  WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>((uint64_t *)(a1 + 48), &v8, (const WTF::StringImpl *)a2, (uint64_t)&v7);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::InspectorTargetProxy::create@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  _DWORD *v9;

  result = WTF::fastMalloc((WTF *)0x40);
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1E34DCE38;
  *(_QWORD *)(result + 32) = a1;
  v9 = *a2;
  if (*a2)
    *v9 += 2;
  *(_QWORD *)(result + 40) = v9;
  *(_BYTE *)(result + 48) = a3;
  *(_QWORD *)(result + 56) = 0;
  *a4 = result;
  return result;
}

WebKit::WebInspectorUIProxy *WebKit::WebInspectorUIProxy::WebInspectorUIProxy(WebKit::WebInspectorUIProxy *this, WebKit::WebPageProxy *a2)
{
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _QWORD v14[2];

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 2) = &unk_1E34DCEC8;
  *(_QWORD *)this = &off_1E34DCE88;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1E34DCF00;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v4 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 5) = v4;
  *((_QWORD *)this + 6) = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = off_1E34DCFC0;
  *((_QWORD *)this + 7) = v6;
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = v7;
  v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v8)
    v9 = v8 - 16;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v9 + 208);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 1896);
  v14[0] = 175;
  v14[1] = v11;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v10 + 160), (unsigned __int8 *)v14, (uint64_t)this + 16, &v13);
  return this;
}

WebKit::PageLoadState *WebKit::PageLoadState::PageLoadState(WebKit::PageLoadState *this, WebKit::WebPageProxy *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = 2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  WTF::URL::invalidate((WebKit::PageLoadState *)((char *)this + 120));
  *((_WORD *)this + 80) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 2;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  WTF::URL::invalidate((WebKit::PageLoadState *)((char *)this + 288));
  *((_WORD *)this + 164) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_BYTE *)this + 344) = 0;
  *((_DWORD *)this + 93) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_BYTE *)this + 368) = 0;
  return this;
}

unsigned int *WebKit::WebPageProxy::addAllMessageReceivers(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  _QWORD v10[2];

  v2 = *((_QWORD *)this + 26);
  v3 = (unsigned int *)(v2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages((unsigned __int8 *)(*((_QWORD *)this + 4) + 1928), v2, *(unsigned int **)(*((_QWORD *)this + 4) + 1896), (uint64_t)this + 16);
  v5 = *((_QWORD *)this + 4);
  v6 = v5 + 880;
  v7 = *(_QWORD *)(v5 + 1896);
  v10[0] = 44;
  v10[1] = v7;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v2 + 160), (unsigned __int8 *)v10, v6, &v9);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
}

unsigned __int8 *WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;

  if (this[16])
  {
    v1 = *(_QWORD *)this;
    v2 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    this[16] = 0;
    this = IPC::MessageReceiverMap::removeMessageReceiver(v2 + 152, 0xB3u, v1);
    if (v2)
      return (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  }
  return this;
}

uint64_t WebKit::TextChecker::isSmartInsertDeleteEnabled(WebKit::TextChecker *this)
{
  return objc_msgSend(MEMORY[0x1E0CEA6E8], "smartInsertDeleteIsEnabled");
}

WebKit::InspectorTargetProxy *WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl **v12;
  int i;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF *v16;
  WebKit::InspectorTargetProxy *v17;
  WebKit::InspectorTargetProxy *result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  WebKit::InspectorTargetProxy *v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = (WTF::StringImpl **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    WTF::String::operator=(v15, (WTF::StringImpl *)a2);
    v17 = *(WebKit::InspectorTargetProxy **)a3;
    *(_QWORD *)a3 = 0;
    result = std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](v15 + 1, v17);
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_26:
        result = (WebKit::InspectorTargetProxy *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (WTF::StringImpl **)result;
        v23 = *a1;
        if (*a1)
          v26 = *(unsigned int *)(v23 - 4);
        else
          v26 = 0;
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_26;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v23 + 16 * v26;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v21 = *a1;
  if (*a1)
    v22 = *(unsigned int *)(v21 - 4);
  else
    v22 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v21 + 16 * v22;
  *(_BYTE *)(a4 + 16) = 0;
  v27 = *(WebKit::InspectorTargetProxy **)a3;
  *(_QWORD *)a3 = 0;
  return std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100]((WebKit::InspectorTargetProxy **)(v8 + 16 * v14 + 8), v27);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebKit::InspectorTargetProxy **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = *((_DWORD *)v14 + 4);
          if (v18 >= 0x100)
            v19 = v18 >> 8;
          else
            v19 = WTF::StringImpl::hashSlowCase(v14);
          v20 = 0;
          do
          {
            v21 = v19 & v17;
            v19 = ++v20 + v21;
          }
          while (*(_QWORD *)(v16 + 16 * v21));
          v22 = (WTF::StringImpl **)(v16 + 16 * v21);
          std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](v22 + 1, 0);
          v24 = *v22;
          *v22 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = *v13;
          *v13 = 0;
          *v22 = v25;
          v26 = (WebKit::InspectorTargetProxy **)(v6 + 16 * v11);
          v27 = v26[1];
          *++v26 = 0;
          v22[1] = v27;
          std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](v26, 0);
          v28 = *v13;
          *v13 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v10);
            else
              *(_DWORD *)v28 -= 2;
          }
          if (v13 == a3)
            v12 = v22;
        }
        else
        {
          std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100]((WebKit::InspectorTargetProxy **)(v6 + 16 * v11 + 8), 0);
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v10);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

void WebKit::WebProcessPool::processForRegistrableDomain(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::ASCIICaseInsensitiveHash **a3@<X2>, int a4@<W3>, WebKit::WebPreferences **a5@<X4>, unsigned int **a6@<X8>)
{
  uint64_t ReusableSuspendedPageProcess;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  NSObject *v21;
  IPC::Encoder *v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  NSObject *v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _BOOL4 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  __int16 v46;
  __int16 v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  WebKit::NetworkProcessProxy *v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  WebKit::WebProcessProxy *v59;
  uint64_t v60;
  void *v61;
  IPC::Encoder *v62;
  IPC::Encoder *v63;
  WTF *v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  IPC::Encoder *v73;
  WTF *v74;
  void *v75;
  void *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  IPC::Encoder *v86;
  IPC::Encoder *v87[2];
  char v88;
  IPC::Encoder *v89;
  _BYTE buf[12];
  __int16 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  ReusableSuspendedPageProcess = (uint64_t)*a3;
  if (!*a3)
    goto LABEL_38;
  if (!*(_DWORD *)(ReusableSuspendedPageProcess + 4))
    goto LABEL_38;
  ReusableSuspendedPageProcess = MEMORY[0x19AEABBCC]();
  if ((ReusableSuspendedPageProcess & 1) != 0)
    goto LABEL_38;
  v13 = *(_QWORD *)(a1 + 768);
  v14 = (_QWORD *)(v13 + 16);
  v15 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v13 + 16), a3);
  v16 = v15;
  v17 = *(_QWORD *)(v13 + 16);
  if (v17)
    v17 += 16 * *(unsigned int *)(v17 - 4);
  if (v17 != v15)
  {
    v18 = **(_QWORD **)(v15 + 8);
    if (*(_QWORD *)(v18 + 752) == a2
      && (((*(_BYTE *)(v18 + 779) != 0) ^ a4) & 1) == 0
      && WebKit::WebProcessProxy::hasSameGPUAndNetworkProcessPreferencesAs((WebKit::WebProcessProxy *)v18, a5))
    {
      v19 = *(uint64_t **)(v16 + 8);
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v19 + 1));
      WebKit::WebProcessProxy::setIsInProcessCache(*v19, 0, 0);
      v86 = (IPC::Encoder *)*v19;
      *v19 = 0;
      if (*v14)
      {
        v20 = *v14 + 16 * *(unsigned int *)(*v14 - 4);
        if (v20 == v16)
          goto LABEL_17;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v20 = 0;
      }
      if (v20 != v16)
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove((uint64_t *)(v13 + 16), (WTF::StringImpl **)v16);
LABEL_17:
      v21 = qword_1ECE71668;
      v22 = v86;
      if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *((_QWORD *)v86 + 17);
        if (v23)
          v85 = *(_DWORD *)(v23 + 108);
        else
          v85 = 0;
        if (*v14)
          v84 = *(_DWORD *)(*v14 - 12);
        else
          v84 = 0;
        v24 = *(_DWORD *)(v13 + 4);
        v22 = v86;
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = v13;
        v91 = 1024;
        LODWORD(v92) = v85;
        WORD2(v92) = 1024;
        *(_DWORD *)((char *)&v92 + 6) = v84;
        WORD5(v92) = 1024;
        HIDWORD(v92) = v24;
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = WebKit::AuxiliaryProcessProxy::wasTerminated(v86);
        _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::takeProcess: Taking process from WebProcess cache (size=%u, capacity=%u, processWasTerminated=%d)", buf, 0x24u);
      }
      if (WebKit::AuxiliaryProcessProxy::wasTerminated(v22))
      {
        if (v22)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v22 + 4);
      }
      else if (v22)
      {
        v25 = qword_1ECE71668;
        if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
        {
          v26 = *((_QWORD *)v22 + 17);
          if (v26)
            LODWORD(v26) = *(_DWORD *)(v26 + 108);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = a1;
          v91 = 2048;
          *(_QWORD *)&v92 = v22;
          WORD4(v92) = 1024;
          *(_DWORD *)((char *)&v92 + 10) = v26;
          _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processForRegistrableDomain: Using WebProcess from WebProcess cache (process=%p, PID=%i)", buf, 0x1Cu);
        }
        goto LABEL_123;
      }
    }
  }
  ReusableSuspendedPageProcess = WebKit::SuspendedPageProxy::findReusableSuspendedPageProcess(a1, a3, a2, a4, a5, v87);
  v22 = v87[0];
  if (v87[0])
  {
    v27 = qword_1ECE71668;
    if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
    {
      v28 = *((_QWORD *)v22 + 17);
      if (v28)
        LODWORD(v28) = *(_DWORD *)(v28 + 108);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = a1;
      v91 = 2048;
      *(_QWORD *)&v92 = v22;
      WORD4(v92) = 1024;
      *(_DWORD *)((char *)&v92 + 10) = v28;
      _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processForRegistrableDomain: Using WebProcess from a SuspendedPage (process=%p, PID=%i)", buf, 0x1Cu);
      v22 = v87[0];
    }
LABEL_123:
    *a6 = (unsigned int *)v22;
    return;
  }
LABEL_38:
  v29 = *(_QWORD *)(a1 + 88);
  if (v29)
  {
    v22 = *(IPC::Encoder **)(v29 + 8);
    if (v22)
    {
      v30 = (unsigned int *)((char *)v22 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
      if (WebKit::AuxiliaryProcessProxy::wasTerminated(v22))
      {
        v32 = qword_1ECE71C68;
        if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
        {
          v82 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
          v83 = *(_QWORD *)(v82 + 136);
          if (v83)
            LODWORD(v83) = *(_DWORD *)(v83 + 108);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = a1;
          v91 = 2048;
          *(_QWORD *)&v92 = v82;
          WORD4(v92) = 1024;
          *(_DWORD *)((char *)&v92 + 10) = v83;
          _os_log_error_impl(&dword_196BCC000, v32, OS_LOG_TYPE_ERROR, "%p - WebProcessPool::tryTakePrewarmedProcess: Not using prewarmed process because it has been terminated (process=%p, PID=%d)", buf, 0x1Cu);
        }
        v34 = *(unsigned int **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = 0;
        if (v34)
        {
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v33);
          }
        }
      }
      else if ((((*((_BYTE *)v22 + 779) != 0) ^ a4) & 1) == 0)
      {
        v47 = API::PageConfiguration::preferencesForNetworkProcess(a5);
        if (!*((_BYTE *)v22 + 1097))
          *((_BYTE *)v22 + 1097) = 1;
        *(_WORD *)((char *)v22 + 1095) = v47;
        v48 = qword_1ECE71C68;
        if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
        {
          v49 = *((_QWORD *)v22 + 17);
          if (v49)
            LODWORD(v49) = *(_DWORD *)(v49 + 108);
          v50 = *(_QWORD *)(a2 + 24);
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = v22;
          v91 = 1024;
          LODWORD(v92) = v49;
          WORD2(v92) = 2048;
          *(_QWORD *)((char *)&v92 + 6) = a2;
          HIWORD(v92) = 2048;
          v93 = v50;
          _os_log_impl(&dword_196BCC000, v48, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::setWebsiteDataStore() dataStore=%p, sessionID=%llu", buf, 0x26u);
        }
        if (!*((_QWORD *)v22 + 94))
        {
          v51 = (WebKit::NetworkProcessProxy *)WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a2);
          v52 = (unsigned int *)((char *)v51 + 16);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 + 1, v52));
          WebKit::NetworkProcessProxy::sendXPCEndpointToProcess(v51, v22);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v52);
        }
        CFRetain(*(CFTypeRef *)(a2 + 8));
        v54 = *((_QWORD *)v22 + 94);
        *((_QWORD *)v22 + 94) = a2;
        if (v54)
          CFRelease(*(CFTypeRef *)(v54 + 8));
        v55 = WebKit::WebProcessProxy::logger(v22);
        v56 = *(_QWORD *)(a2 + 24);
        v57 = (v56 & 0x8000000000000000) == 0 || v56 == -1;
        if (*(IPC::Encoder **)(v55 + 16) == v22)
          *(_BYTE *)(v55 + 12) = v57;
        WebKit::WebProcessProxy::updateRegistrationWithDataStore(v22);
        v58 = *(_QWORD *)(*((_QWORD *)v22 + 64) + 8);
        if (v58)
          v59 = (WebKit::WebProcessProxy *)(v58 - 16);
        else
          v59 = 0;
        WebKit::WebProcessPool::webProcessDataStoreParameters((WebKit::WebProcessPool *)buf, v59, (WebKit::WebsiteDataStore *)a2);
        v60 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v60 = 2650;
        *(_QWORD *)(v60 + 8) = 0;
        *(_QWORD *)(v60 + 528) = v60 + 16;
        *(_QWORD *)(v60 + 536) = v60 + 16;
        *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v60 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
        v89 = (IPC::Encoder *)v60;
        IPC::ArgumentCoder<WebKit::WebProcessDataStoreParameters,void>::encode((IPC::Encoder *)v60, (uint64_t *)buf);
        LOBYTE(v87[0]) = 0;
        v88 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)v22, &v89, 0, (uint64_t)v87, 1);
        if (v88)
        {
          v62 = v87[0];
          v87[0] = 0;
          if (v62)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v62 + 8))(v62);
        }
        v63 = v89;
        v89 = 0;
        if (v63)
        {
          IPC::Encoder::~Encoder(v63, v61);
          WTF::fastFree(v64, v65);
        }
        WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)buf);
        v66 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v66 = off_1E34D3B00;
        *(_QWORD *)(v66 + 8) = 0;
        *(_QWORD *)(v66 + 16) = v22;
        *(_BYTE *)(v66 + 24) = 0;
        LOBYTE(v87[0]) = -80;
        WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)v22 + 19, v87, v66, (unsigned int **)buf);
        std::unique_ptr<WebKit::WebLockRegistryProxy>::reset[abi:sn180100]((uint64_t *)v22 + 131, v66);
        v67 = qword_1ECE71C68;
        if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
        {
          v68 = *((_QWORD *)v22 + 17);
          if (v68)
            LODWORD(v68) = *(_DWORD *)(v68 + 108);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v22;
          v91 = 1024;
          LODWORD(v92) = v68;
          _os_log_impl(&dword_196BCC000, v67, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::markIsNoLongerInPrewarmedPool:", buf, 0x12u);
        }
        *((_BYTE *)v22 + 778) = 0;
        v69 = *((_QWORD *)v22 + 64);
        if (!v69 || !*(_QWORD *)(v69 + 8))
        {
          __break(0xC471u);
          JUMPOUT(0x196CEE030);
        }
        *((_BYTE *)v22 + 504) = 0;
        WebKit::WebProcessProxy::WeakOrStrongPtr<WebKit::WebProcessPool>::updateStrongReference((uint64_t)v22 + 504);
        v70 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v70 = 2599;
        *(_QWORD *)(v70 + 8) = 0;
        *(_QWORD *)(v70 + 528) = v70 + 16;
        *(_QWORD *)(v70 + 536) = v70 + 16;
        *(_OWORD *)(v70 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v70 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v70);
        v87[0] = (IPC::Encoder *)v70;
        buf[0] = 0;
        BYTE2(v92) = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)v22, v87, 0, (uint64_t)buf, 1);
        if (BYTE2(v92))
        {
          v72 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v72)
            (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
        }
        v73 = v87[0];
        v87[0] = 0;
        if (v73)
        {
          IPC::Encoder::~Encoder(v73, v71);
          WTF::fastFree(v74, v75);
        }
        WebKit::WebProcessProxy::updateRuntimeStatistics((uint64_t)v22);
        v77 = *(unsigned int **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = 0;
        if (v77)
        {
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (!v79)
          {
            atomic_store(1u, v77);
            WTF::fastFree((WTF *)v77, v76);
          }
        }
        v80 = qword_1ECE71668;
        if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
        {
          v81 = *((_QWORD *)v22 + 17);
          if (v81)
            LODWORD(v81) = *(_DWORD *)(v81 + 108);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = a1;
          v91 = 2048;
          *(_QWORD *)&v92 = v22;
          WORD4(v92) = 1024;
          *(_DWORD *)((char *)&v92 + 10) = v81;
          _os_log_impl(&dword_196BCC000, v80, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processForRegistrableDomain: Using prewarmed process (process=%p, PID=%i)", buf, 0x1Cu);
        }
        if (*a3 && *((_DWORD *)*a3 + 1) && (MEMORY[0x19AEABBCC]() & 1) == 0)
          WebKit::WebProcessPool::tryPrewarmWithDomainInformation(*(_QWORD *)(a1 + 784), v22, a3);
        goto LABEL_123;
      }
      ReusableSuspendedPageProcess = (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v22 + 4);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 96))
  {
    {
      if (WebKit::globalDefaultDataStore(void)::globalDefaultDataStore
        && *(_QWORD *)(WebKit::globalDefaultDataStore(void)::globalDefaultDataStore + 8))
      {
        WebKit::WebsiteDataStore::defaultDataStore((WebKit::WebsiteDataStore *)ReusableSuspendedPageProcess, (WebKit::WebsiteDataStore **)buf);
        v37 = *(_QWORD *)buf != a2;
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
      }
      else
      {
        v37 = 0;
      }
    }
    else
    {
      v37 = 0;
      WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = 0;
    }
    v38 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v38)
    {
      v39 = *(_QWORD **)(a1 + 72);
      v40 = &v39[v38];
      do
      {
        v41 = *v39;
        v42 = (unsigned int *)(*v39 + 16);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
        *a6 = (unsigned int *)v41;
        v44 = *(_QWORD *)(a1 + 88);
        if (v44)
          v44 = *(_QWORD *)(v44 + 8);
        if (v41 == v44 || WebKit::WebProcessProxy::isDummyProcessProxy((WebKit::WebProcessProxy *)v41))
        {
          *a6 = 0;
          if (!v41)
            goto LABEL_72;
        }
        else
        {
          if (!*(_BYTE *)(v41 + 872) && (!v37 || *(_QWORD *)(v41 + 752) == a2))
            return;
          *a6 = 0;
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v42);
LABEL_72:
        ++v39;
      }
      while (v39 != v40);
    }
  }
  WebKit::WebProcessPool::createNewWebProcess(a1, (WebKit::WebsiteDataStore *)a2, a4, 0, 0, a6);
  v45 = *a6;
  v46 = API::PageConfiguration::preferencesForNetworkProcess(a5);
  if (!*((_BYTE *)v45 + 1097))
    *((_BYTE *)v45 + 1097) = 1;
  *(_WORD *)((char *)v45 + 1095) = v46;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetInspectionForServiceWorkersAllowed>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 450;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_196CEE1A0(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::wasTerminated(WebKit::AuxiliaryProcessProxy *this)
{
  uint64_t v1;
  uint64_t result;
  pid_t v3;

  v1 = *((_QWORD *)this + 17);
  if (!v1)
    return 1;
  if (*(_BYTE *)(v1 + 104))
    return 0;
  if (!*((_QWORD *)this + 18))
    return 1;
  v3 = *(_DWORD *)(v1 + 108);
  if (!v3)
    return 1;
  result = kill(v3, 0);
  if ((_DWORD)result)
    return *__error() == 3;
  return result;
}

void WebKit::WebScreenOrientationManagerProxy::~WebScreenOrientationManagerProxy(WebKit::WebScreenOrientationManagerProxy *this)
{
  void *v2;
  uint64_t v3;

  WebKit::WebScreenOrientationManagerProxy::unlockIfNecessary(this);
  IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(*((_QWORD *)this + 2) + 208) + 152, 0xC5u, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 1896));
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebScreenOrientationManagerProxy::~WebScreenOrientationManagerProxy(this);
  WTF::fastFree(v1, v2);
}

_BYTE *WebKit::WebScreenOrientationManagerProxy::unlockIfNecessary(_BYTE *this)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  char v4[8];
  WTF::StringImpl *v5;
  char v6;

  v1 = this;
  if (this[26])
    this = (_BYTE *)WebKit::WebScreenOrientationManagerProxy::unlock((uint64_t)this);
  if (*((_QWORD *)v1 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4[0] = 16;
    v6 = 1;
    v2 = *((_QWORD *)v1 + 4);
    *((_QWORD *)v1 + 4) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, v4);
    this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (v6)
    {
      this = v5;
      v5 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v3);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

uint64_t WebKit::WebProcessProxy::logger(WebKit::WebProcessProxy *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  if (!*((_QWORD *)this + 99))
  {
    v2 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v2 + 8) = 1;
    v3 = (unsigned int *)(v2 + 8);
    *(_QWORD *)v2 = off_1E34B8110;
    *(_BYTE *)(v2 + 12) = 1;
    *(_QWORD *)(v2 + 16) = this;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = (unsigned int *)*((_QWORD *)this + 99);
    *((_QWORD *)this + 99) = v2;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    v9 = *((_QWORD *)this + 94);
    if (v9)
    {
      v9 = *(_QWORD *)(v9 + 24);
      LOBYTE(v9) = v9 >= 0 || v9 == -1;
    }
    if (*(WebKit::WebProcessProxy **)(v2 + 16) == this)
      *(_BYTE *)(v2 + 12) = v9;
    do
    {
      v10 = __ldaxr(v3);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v3));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return *((_QWORD *)this + 99);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = WTF::HashTranslatorASCIILiteral::hash(*a2, a2[1]);
  v10 = 0;
  v11 = 0;
  for (i = v9; ; i = v10 + v13)
  {
    v13 = i & v8;
    v14 = v7 + 16 * (i & v8);
    if (*(_QWORD *)v14 != -1)
      break;
    v11 = v7 + 16 * v13;
LABEL_10:
    ++v10;
  }
  if (!*(_QWORD *)v14)
  {
    if (v11)
      v14 = v11;
    if (*(_QWORD *)v14 == -1)
    {
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      --*(_DWORD *)(*a1 - 16);
    }
    result = (uint64_t)WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>::translate<WTF::KeyValuePair<WTF::String,WTF::String>,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringImpl **)v14, (uint64_t)a2, a3, v9);
    v16 = *a1;
    if (*a1)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
      {
LABEL_25:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v14);
        v14 = result;
        v20 = *a1;
        if (*a1)
          v23 = *(unsigned int *)(v20 - 4);
        else
          v23 = 0;
      }
    }
    else if (3 * v23 <= 4 * v22)
    {
      goto LABEL_25;
    }
    v24 = v20 + 16 * v23;
    v25 = 1;
    goto LABEL_30;
  }
  result = MEMORY[0x19AEABBCC]();
  if ((result & 1) == 0)
    goto LABEL_10;
  v18 = *a1;
  if (*a1)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  v25 = 0;
  v24 = v18 + 16 * v19;
LABEL_30:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v25;
  return result;
}

WTF::StringImpl *WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>::translate<WTF::KeyValuePair<WTF::String,WTF::String>,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::StringImpl **a1, uint64_t a2, uint64_t a3, int a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  WTF::HashTranslatorASCIILiteral::translate(a1, *(WTF::StringImpl **)a2, *(_QWORD *)(a2 + 8), a4);
  v7 = *(WTF::StringImpl **)(a3 + 8);
  if (v7)
  {
    v6 = (WTF::StringImpl *)((char *)v7 - 1);
    if (v7 == (WTF::StringImpl *)1)
    {
      v7 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = v9;
    }
  }
  result = a1[1];
  a1[1] = v7;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (uint64_t *)(v4 + 16 * v11);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 16 * v25);
          v28 = (unsigned int *)v27[1];
          v27[1] = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v8);
            }
          }
          *v27 = *v12;
          v31 = v4 + 16 * v11;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v27[1] = v32;
          v15 = *(unsigned int **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (!v15)
            goto LABEL_27;
          do
          {
            v33 = __ldaxr(v15);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v15));
          if (v34)
            goto LABEL_27;
        }
        else
        {
          v14 = v4 + 16 * v11;
          v15 = *(unsigned int **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (!v15)
            goto LABEL_27;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (v17)
            goto LABEL_27;
        }
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v8);
      }
LABEL_27:
      if (++v11 == v5)
        goto LABEL_30;
    }
  }
  if (v4)
LABEL_30:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v3);
}

void WebKit::XPCEndpoint::sendEndpointToConnection(xpc_object_t *a1, _xpc_connection_s *a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  xpc_object_t xdict;

  if (a2)
  {
    xdict = xpc_dictionary_create(0, 0, 0);
    v4 = (const char *)(*((uint64_t (**)(xpc_object_t *))*a1 + 2))(a1);
    v5 = (const char *)(*((uint64_t (**)(xpc_object_t *))*a1 + 3))(a1);
    xpc_dictionary_set_string(xdict, v4, v5);
    v6 = (const char *)(*((uint64_t (**)(xpc_object_t *))*a1 + 4))(a1);
    xpc_dictionary_set_value(xdict, v6, a1[2]);
    xpc_connection_send_message(a2, xdict);
    if (xdict)

  }
}

void sub_196CEE9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

const char *WebKit::LaunchServicesDatabaseObserver::xpcEndpointMessageNameKey(WebKit::LaunchServicesDatabaseObserver *this)
{
  return "message-name";
}

const char *WebKit::LaunchServicesDatabaseObserver::xpcEndpointMessageName(WebKit::LaunchServicesDatabaseObserver *this)
{
  return "xpc-endpoint-launch-services-database-message";
}

const char *WebKit::LaunchServicesDatabaseObserver::xpcEndpointNameKey(WebKit::LaunchServicesDatabaseObserver *this)
{
  return "xpc-endpoint-launch-services-database";
}

void WTF::Detail::CallableWrapper<WebKit::determineTrackingPreventionState(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call()
{
  uint64_t v0;

  {
    v0 = WebKit::itpQueue(void)::itpQueue;
    WebKit::itpQueue(void)::itpQueue = 0;
    if (v0)
      (*(void (**)(uint64_t))(*(_QWORD *)v0 + 56))(v0);
  }
  else
  {
    WebKit::itpQueue(void)::itpQueue = 0;
  }
}

void WebKit::WebChromeClient::didFinishLoadingImageForElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::didFinishLoadingImageForElement(v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

uint64_t *WebKit::WebPage::didFinishLoadingImageForElement(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = (uint64_t *)(a1 + 800);
  v9 = a2;
  result = (uint64_t *)WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>>,WKDeferringGestureRecognizer const*>((uint64_t *)(a1 + 800), &v9);
  v5 = *(_QWORD *)(a1 + 800);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
  {
    WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::remove(v3, result);
    v5 = *v3;
  }
  if (v5)
    v7 = *(_DWORD *)(v5 - 12) == 0;
  else
    v7 = 1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v8 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v8 = &off_1E34D8DD8;
  *(_QWORD *)(v8 + 8) = a1;
  *(_BYTE *)(v8 + 16) = v7;
  v9 = (uint64_t *)v8;
  WebCore::DragController::finalizeDroppedImagePlaceholder();
  result = v9;
  v9 = 0;
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  return result;
}

void sub_196CEEBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>>,WKDeferringGestureRecognizer const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 8 * v7);
  if (v8 == *a2)
    return v2 + 8 * v7;
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 8 * v7);
    ++v9;
    if (v8 == *a2)
      return v2 + 8 * v7;
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

unint64_t IPC::handleMessageAsync<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  _QWORD *v16;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    v14 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E34ACA20;
    v11[1] = v14;
    v12 = v15;
    v15 = 0;
    v16 = v11;
    v11[2] = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
    v13 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _QWORD **))(*v13 + a4);
    a4(v13, &v16);
    result = (unint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcess::mainThreadPing(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16AuxiliaryProcess14MainThreadPingEN6WebKit16AuxiliaryProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34ACA20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16AuxiliaryProcess14MainThreadPingEN6WebKit16AuxiliaryProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2825;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v7 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidClearWindowObjectInWorld(WebKit::WebLocalFrameLoaderClient *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  WebKit::WebProcess *v10;
  WebKit::WebAutomationSessionProxy *v11;
  WebKit::WebProcess *v12;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v8 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8) & 1) == 0)
          {
            v9 = *(_QWORD *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              (*(void (**)(_QWORD, uint64_t, _QWORD, WebCore::DOMWrapperWorld *))(**(_QWORD **)(v9 + 344)
                                                                                          + 168))(*(_QWORD *)(v9 + 344), v9 - 16, *((_QWORD *)this + 2), a2);
              {
                v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
              }
              else
              {
                v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                v10 = WebKit::WebProcess::WebProcess(v12);
                WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
              }
              v11 = (WebKit::WebAutomationSessionProxy *)*((_QWORD *)v10 + 62);
              if (v11)
              {
                if (!*((_DWORD *)a2 + 12))
                  WebKit::WebAutomationSessionProxy::didClearWindowObjectForFrame(v11, *((WebKit::WebFrame **)this + 2));
              }
              CFRelease(*(CFTypeRef *)(v9 - 8));
            }
          }
        }
      }
    }
  }
}

WTF::StringImpl **WebKit::PlatformCAAnimationRemote::create(uint64_t *a1, char a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  WTF::StringImpl **result;

  v6 = WTF::fastMalloc((WTF *)0x98);
  *(_DWORD *)(v6 + 8) = 1;
  *(_BYTE *)(v6 + 12) = a2;
  *(_QWORD *)v6 = off_1E34D66E0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v6 + 56) = _D0;
  *(_WORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_DWORD *)(v6 + 80) = 256;
  *(_BYTE *)(v6 + 84) = 0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  result = WTF::String::operator=((WTF::StringImpl **)(v6 + 16), a3);
  *(_BYTE *)(v6 + 24) = a2;
  *a1 = v6;
  return result;
}

void sub_196CEEFFC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF *v2;
  WebKit::PlatformCAAnimationRemoteProperties *v3;
  void *v5;

  WebKit::PlatformCAAnimationRemoteProperties::~PlatformCAAnimationRemoteProperties(v3, a2);
  WTF::fastFree(v2, v5);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::didChangeIsLoading(id *this)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  WebKit::ProcessThrottlerActivity **v6;
  NSObject *v7;
  uint64_t v8;
  WebKit::ProcessThrottlerActivity *v9;
  NSObject *v10;
  int v11;
  id *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(this + 2);
  v3 = WeakRetained;
  if (!WeakRetained
    || (v4 = *(_QWORD *)(WeakRetained[53] + 32), !*(_QWORD *)(v4 + 984)) && *(unsigned __int8 *)(v4 + 968) > 1u)
  {
    if (this[7])
    {
      v10 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 134217984;
        v12 = this;
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - NavigationState will release its process network assertion soon because the page load completed", (uint8_t *)&v11, 0xCu);
      }
      WTF::RunLoop::TimerBase::start();
    }
LABEL_17:
    objc_msgSend(v3, "didChangeValueForKey:", CFSTR("loading"));
    if (!v3)
      return;
    goto LABEL_18;
  }
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"), "isSuspendedUnderLock") & 1) == 0)
  {
    if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 8)))
    {
      v5 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 134217984;
        v12 = this;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - NavigationState keeps its process network assertion because a new page load started", (uint8_t *)&v11, 0xCu);
      }
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 8));
    }
    v6 = (WebKit::ProcessThrottlerActivity **)(this + 7);
    if (!this[7])
    {
      v7 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 134217984;
        v12 = this;
        _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - NavigationState is taking a process network assertion because a page load started", (uint8_t *)&v11, 0xCu);
      }
      v8 = *(_QWORD *)(v3[53] + 208);
      v9 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
      WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v9, v8 + 200, "Page Load", 10, 0, 0);
      std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v6, v9);
    }
    goto LABEL_17;
  }
LABEL_18:
  CFRelease(v3);
}

void sub_196CEF240(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::tuple<WebKit::WebProcessDataStoreParameters>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebKit::WebProcessDataStoreParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[152])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebProcessDataStoreParameters>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  int v3;
  const char **v4[19];
  unsigned __int8 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::WebProcessDataStoreParameters>(a2, v4);
  if (v5)
  {
    WebKit::WebProcessDataStoreParameters::WebProcessDataStoreParameters((uint64_t)a1, (uint64_t *)v4);
    v3 = v5;
    a1[152] = 1;
    if (v3)
      WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(v4);
  }
  else
  {
    *a1 = 0;
    a1[152] = 0;
  }
}

uint64_t WebKit::WebPage::synchronizeCORSDisablingPatternsWithNetworkProcess(WebKit::WebPage *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  _QWORD v5[2];

  v2 = WebKit::WebProcess::singleton(this);
  v3 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v2) + 24);
  v5[0] = (char *)this + 40;
  v5[1] = (char *)this + 2368;
  return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::SetCORSDisablingPatterns>(v3, (uint64_t)v5, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::SetCORSDisablingPatterns>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 266;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::RemoteMediaPlayerManager::initialize(uint64_t this, const WebKit::WebProcessCreationParameters *a2)
{
  WebKit::RemoteMediaPlayerMIMETypeCache *v3;
  const WTF::StringImpl *v4;

  if (*((_DWORD *)a2 + 111))
  {
    v3 = WebKit::RemoteMediaPlayerManager::typeCache(this, 0);
    this = WebKit::RemoteMediaPlayerMIMETypeCache::isEmpty(v3);
    if ((_DWORD)this)
      return WebKit::RemoteMediaPlayerMIMETypeCache::addSupportedTypes((uint64_t)v3, (uint64_t)a2 + 432, v4);
  }
  return this;
}

WTF::StringImpl **WebKit::WebNotificationManager::initialize(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **result;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;

  v3 = *((_QWORD *)a2 + 52);
  if (v3 && (v4 = *(_DWORD *)(v3 - 12)) != 0)
  {
    v6 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(_DWORD *)(v3 - 12));
    v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
    v8 = v7 + 4;
    v7[2] = v6 - 1;
    v7[3] = v6;
    *v7 = 0;
    v7[1] = v4;
    v9 = (_QWORD *)*((_QWORD *)a2 + 52);
    v10 = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(v9);
    v11 = v10;
    v12 = a2;
    if (v9)
      v13 = (WTF::StringImpl *)&v9[2 * *((unsigned int *)v9 - 1)];
    else
      v13 = 0;
    if (v13 != v10)
    {
      do
      {
        v15 = v7[2];
        v16 = *(_DWORD *)(*(_QWORD *)v11 + 16);
        if (v16 >= 0x100)
          v17 = v16 >> 8;
        else
          v17 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v11);
        v18 = 0;
        do
        {
          v19 = v17 & v15;
          v17 = ++v18 + v19;
        }
        while (*(_QWORD *)&v8[4 * v19]);
        v20 = (WTF::StringImpl **)&v8[4 * v19];
        WTF::String::operator=(v20, v11);
        *((_BYTE *)v20 + 8) = *((_BYTE *)v11 + 8);
        while (1)
        {
          v11 = (WTF::StringImpl *)((char *)v11 + 16);
          if (v11 == v12)
            break;
          if ((unint64_t)(*(_QWORD *)v11 + 1) > 1)
            goto LABEL_17;
        }
        v11 = v12;
LABEL_17:
        ;
      }
      while (v11 != v13);
    }
  }
  else
  {
    v8 = 0;
  }
  result = *(WTF::StringImpl ***)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (result)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  return result;
}

uint64_t WebKit::WebProcess::updateDomainsWithStorageAccessQuirks(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  WTF::StringImpl **v5;
  uint64_t result;
  WTF::ASCIICaseInsensitiveHash **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  _BYTE v12[24];
  _QWORD v13[2];

  v4 = (uint64_t *)(a1 + 808);
  v5 = *(WTF::StringImpl ***)(a1 + 808);
  if (v5)
  {
    *v4 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)a2, (uint64_t)a2, a3);
  v7 = (WTF::ASCIICaseInsensitiveHash **)result;
  v13[0] = result;
  v13[1] = v8;
  if (*(_QWORD *)a2)
    v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)a2 - 4);
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v4, v7, (uint64_t)v12);
      v13[0] += 8;
      result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v13, v10, v11);
      v7 = (WTF::ASCIICaseInsensitiveHash **)v13[0];
    }
    while (v13[0] != v9);
  }
  return result;
}

WebCore::MemoryCache *WebKit::WebProcess::setMemoryCacheDisabled(WebKit::WebProcess *this, int a2)
{
  WebCore::MemoryCache *result;

  result = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(this);
  if ((*(_BYTE *)result != 0) != a2)
    return (WebCore::MemoryCache *)WebCore::MemoryCache::setDisabled(result);
  return result;
}

uint64_t WebKit::WebProcess::setCacheModel(uint64_t result, WTF *a2)
{
  WebCore::MemoryCache *v2;
  WebCore::MemoryCache *v3;
  WebCore::BackForwardCache *v4;
  WebCore::BackForwardCache *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;

  if (!*(_BYTE *)(result + 248) || *(unsigned __int8 *)(result + 249) != (_DWORD)a2)
  {
    *(_BYTE *)(result + 248) = 1;
    *(_BYTE *)(result + 249) = (_BYTE)a2;
    v10 = 0;
    v8 = 0;
    v9 = 0;
    v7 = 0;
    v6 = 0;
    v2 = (WebCore::MemoryCache *)WebKit::calculateMemoryCacheSizes(a2, &v10, &v9, &v8, &v7, &v6);
    v3 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(v2);
    v4 = (WebCore::BackForwardCache *)WebCore::MemoryCache::setCapacities(v3);
    *((_QWORD *)v3 + 2) = v7;
    v5 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v4);
    return WebCore::BackForwardCache::setMaxSize(v5);
  }
  return result;
}

uint64_t IPC::Connection::getAuditToken@<X0>(IPC::Connection *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  __int128 v5;
  __int128 v6;

  result = *((_QWORD *)this + 44);
  if (result)
  {
    result = xpc_connection_get_audit_token();
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v4;
  return result;
}

uint64_t WebKit::WebProcess::setWebsiteDataStoreParameters(WebKit::WebProcess *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::ResourceLoadObserver *v6;
  WebCore::ResourceLoadObserver *v7;
  uint64_t v8;
  char v9;
  WebCore::ResourceLoadObserver *Observer;
  WebCore::ResourceLoadObserver *v11;
  uint64_t v12;
  WebCore::ResourceLoadObserver *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD *v24;

  v4 = *(_QWORD *)a2;
  if (!*((_BYTE *)this + 672))
    *((_BYTE *)this + 672) = 1;
  *((_QWORD *)this + 83) = v4;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 && *(_DWORD *)(v5 + 4))
    WebCore::HTMLMediaElement::setMediaCacheDirectory((WebCore::HTMLMediaElement *)(a2 + 8), (const WTF::String *)a2);
  v6 = WebKit::WebProcess::setTrackingPreventionEnabled(this, (WebCore::DeprecatedGlobalSettings *)*(unsigned __int8 *)(a2 + 144));
  *((_BYTE *)this + 680) = *(_BYTE *)(a2 + 56);
  if (*(_BYTE *)(a2 + 144))
  {
    v7 = (WebCore::ResourceLoadObserver *)WebCore::ResourceLoadObserver::sharedIfExists(v6);
    if (!v7)
    {
      v8 = WTF::fastMalloc((WTF *)0x70);
      v9 = *(uint64_t *)a2 < 0 && *(_QWORD *)a2 != -1;
      Observer = (WebCore::ResourceLoadObserver *)WebKit::WebResourceLoadObserver::WebResourceLoadObserver(v8, v9);
      v7 = (WebCore::ResourceLoadObserver *)WebCore::ResourceLoadObserver::setShared(Observer, v11);
    }
    v12 = WebCore::ResourceLoadObserver::shared(v7);
    v13 = (WebCore::ResourceLoadObserver *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 120))(v12, a2 + 64);
    if ((*(_QWORD *)a2 & 0x8000000000000000) == 0 || *(_QWORD *)a2 == -1)
    {
      v14 = WebCore::ResourceLoadObserver::shared(v13);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = off_1E34E0888;
      v24 = v15;
      (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v14 + 128))(v14, a2 + 72, &v24);
      v16 = v24;
      v24 = 0;
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    }
  }
  WTF::String::operator=((WTF::StringImpl **)this + 98, (WTF::StringImpl *)(a2 + 16));
  *((_QWORD *)this + 99) = *(_QWORD *)(a2 + 32);
  v17 = (_QWORD *)*((_QWORD *)this + 34);
  v18 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(v17);
  v19 = v18;
  v21 = v20;
  if (v17)
    v17 += 3 * *((unsigned int *)v17 - 1);
  if (v17 != v18)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2], a2);
      while (1)
      {
        v19 += 3;
        if (v19 == v21)
          break;
        if (*v19)
          v22 = *v19 == -1;
        else
          v22 = 1;
        if (!v22)
          goto LABEL_24;
      }
      v19 = v21;
LABEL_24:
      ;
    }
    while (v19 != v17);
  }
  WebKit::WebProcess::platformSetWebsiteDataStoreParameters((uint64_t)this, a2);
  return WebKit::WebProcess::ensureNetworkProcessConnection(this);
}

WTF::StringImpl **WebKit::WebMediaKeyStorageManager::setWebsiteDataStore(uint64_t a1, uint64_t a2)
{
  return WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 16));
}

WTF::StringImpl **WebKit::WebResourceLoadObserver::setDomainsWithUserInteraction(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **result;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl ***)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v3;
  if (result)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  return result;
}

WebCore::ResourceLoadObserver *WebKit::WebProcess::setTrackingPreventionEnabled(WebKit::WebProcess *this, WebCore::DeprecatedGlobalSettings *a2)
{
  WebCore::ResourceLoadObserver *result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  WebCore::ResourceLoadObserver *Observer;
  WebCore::ResourceLoadObserver *v9;

  result = (WebCore::ResourceLoadObserver *)WebCore::DeprecatedGlobalSettings::shared(this);
  if ((*((_BYTE *)result + 19) != 0) != (_DWORD)a2)
  {
    result = (WebCore::ResourceLoadObserver *)WebCore::DeprecatedGlobalSettings::setTrackingPreventionEnabled(a2);
    if ((_DWORD)a2)
    {
      result = (WebCore::ResourceLoadObserver *)WebCore::ResourceLoadObserver::sharedIfExists(result);
      if (!result)
      {
        v5 = WTF::fastMalloc((WTF *)0x70);
        if (*((_BYTE *)this + 672))
        {
          v6 = *((_QWORD *)this + 83);
          v7 = v6 < 0 && v6 != -1;
        }
        else
        {
          v7 = 0;
        }
        Observer = (WebCore::ResourceLoadObserver *)WebKit::WebResourceLoadObserver::WebResourceLoadObserver(v5, v7);
        return (WebCore::ResourceLoadObserver *)WebCore::ResourceLoadObserver::setShared(Observer, v9);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadObserver::WebResourceLoadObserver(uint64_t a1, char a2)
{
  WebCore::TimerBase *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = off_1E34F0578;
  *(_BYTE *)(a1 + 8) = a2;
  v3 = (WebCore::TimerBase *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34F09C0;
  v4[1] = a1;
  WebCore::TimerBase::TimerBase(v3);
  *(_QWORD *)(a1 + 32) = off_1E34B3740;
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

uint64_t WebKit::InjectedBundle::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char ***v9;

  kdebug_trace();
  v6 = API::Object::newObject(0x40uLL, 129);
  WebKit::InjectedBundle::InjectedBundle((WebKit *)v6, a1);
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v7 = 1;
    v8 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(v7 + 8) = v8;
    *(_QWORD *)(v7 + 16) = 0;
  }
  else
  {
    v7 = 0;
  }
  v9 = *(const char ****)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v7;
  if (v9)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v9);
  if ((WebKit::InjectedBundle::initialize(v6, a1, a2) & 1) == 0)
  {
    CFRelease(*(CFTypeRef *)(v6 + 8));
    v6 = 0;
  }
  *a3 = v6;
  return kdebug_trace();
}

uint64_t WebKit::SandboxExtension::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (*a1)
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    v5 = *a1;
    *a1 = 0;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

WebKit *WebKit::InjectedBundle::InjectedBundle(WebKit *a1, uint64_t a2)
{
  _DWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(a1);
  *(_QWORD *)a1 = &off_1E34E9B10;
  v4 = *(_DWORD **)(a2 + 32);
  if (v4)
    *v4 += 2;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 2) = v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v5 = off_1E34E9C18;
  *((_QWORD *)a1 + 5) = v5;
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 7) = 0;
  return a1;
}

uint64_t WebKit::InjectedBundle::initialize(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const char ***v6;
  id v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  API::Object *v14;
  void (*FunctionPointerForName)(uint64_t, uint64_t);
  uint64_t v16;
  API::Object *v17;
  uint64_t v18;
  API::Object *v19;
  uint64_t v20;
  API::Object *v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;
  WTF *v26;
  void *v27;
  objc_class *v28;
  objc_class *v29;
  id v30;
  void *v31;
  void *v32;
  WTF *v33;

  v6 = *(const char ****)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v6)
  {
    if (!WebKit::SandboxExtension::consumePermanently((WebKit::SandboxExtensionImpl **)v6))
    {
      WTF::String::utf8();
      WTFLogAlways();
      v26 = v33;
      v33 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v25);
        else
          --*(_DWORD *)v26;
      }
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v6);
      return 0;
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v6);
  }
  v7 = objc_alloc(MEMORY[0x1E0CB34D0]);
  if (*(_QWORD *)(a1 + 16))
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E351F1B8;
  v9 = (void *)objc_msgSend(v7, "initWithPath:", v8);
  *(_QWORD *)(a1 + 24) = v9;
  if (!v9)
    goto LABEL_23;
  v10 = (void *)objc_msgSend(v9, "executablePath");
  v11 = v10;
  if (v10)
  {
    if (dlopen_preflight((const char *)objc_msgSend(v10, "fileSystemRepresentation"))
      && (v12 = dlopen((const char *)objc_msgSend(v11, "fileSystemRepresentation"), 265)) != 0)
    {
      v13 = v12;
      v11 = dlsym(v12, "WKBundleAdditionalClassesForParameterCoder");
      FunctionPointerForName = (void (*)(uint64_t, uint64_t))dlsym(v13, "WKBundleInitialize");
      if (FunctionPointerForName)
        goto LABEL_11;
    }
    else
    {
      v11 = 0;
    }
  }
  v33 = 0;
  if ((objc_msgSend(*(id *)(a1 + 24), "preflightAndReturnError:", &v33) & 1) == 0)
  {
    NSLog(CFSTR("InjectedBundle::load failed - preflightAndReturnError failed, error: %@"), v33);
    return 0;
  }
  if ((objc_msgSend(*(id *)(a1 + 24), "loadAndReturnError:", &v33) & 1) == 0)
  {
    NSLog(CFSTR("InjectedBundle::load failed - loadAndReturnError failed, error: %@"), v33);
    return 0;
  }
  FunctionPointerForName = (void (*)(uint64_t, uint64_t))CFBundleGetFunctionPointerForName((CFBundleRef)objc_msgSend(*(id *)(a1 + 24), "_cfBundle"), CFSTR("WKBundleInitialize"));
LABEL_11:
  if (v11)
  {
LABEL_12:
    v16 = API::Object::wrap(a1, v14);
    v18 = API::Object::wrap(*a3, v17);
    ((void (*)(uint64_t, uint64_t))v11)(v16, v18);
    goto LABEL_13;
  }
  v27 = CFBundleGetFunctionPointerForName((CFBundleRef)objc_msgSend(*(id *)(a1 + 24), "_cfBundle"), CFSTR("WKBundleAdditionalClassesForParameterCoder"));
  if (v27)
  {
    v11 = v27;
    goto LABEL_12;
  }
LABEL_13:
  if (FunctionPointerForName)
  {
    if (WebKit::InjectedBundle::decodeBundleParameters((WebKit::InjectedBundle *)a1, *(API::Data **)(a2 + 408)))
    {
      v20 = API::Object::wrap(a1, v19);
      v22 = API::Object::wrap(*a3, v21);
      FunctionPointerForName(v20, v22);
      return 1;
    }
    return 0;
  }
  v28 = (objc_class *)objc_msgSend(*(id *)(a1 + 24), "principalClass");
  if (!v28
    || (v29 = v28, (-[objc_class conformsToProtocol:](v28, "conformsToProtocol:", &unk_1EE3C7360) & 1) == 0)
    || (v30 = objc_alloc_init(v29)) == 0)
  {
LABEL_23:
    WTFLogAlways();
    return 0;
  }
  v31 = v30;
  v32 = *(void **)(a1 + 8);
  objc_msgSend(v32, "_setPrincipalClassInstance:", v30);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v32, "extendClassesForParameterCoder:", objc_msgSend(v31, "additionalClassesForParameterCoder"));
  v23 = WebKit::InjectedBundle::decodeBundleParameters((WebKit::InjectedBundle *)a1, *(API::Data **)(a2 + 408));
  if ((_DWORD)v23 && (objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v31, "webProcessPlugIn:initializeWithObject:", v32, 0);
  CFRelease(v31);
  return v23;
}

void sub_196CF000C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  const void *v10;

  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::SandboxExtension::~SandboxExtension(const char ***this)
{
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0);
}

BOOL WebKit::SandboxExtension::consumePermanently(WebKit::SandboxExtensionImpl **this)
{
  const char ***v1;
  _BOOL8 v2;

  v1 = (const char ***)(this + 1);
  v2 = WebKit::SandboxExtensionImpl::consume(this[1]);
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](v1, 0);
  return v2;
}

uint64_t WebKit::InjectedBundle::decodeBundleParameters(WebKit::InjectedBundle *this, API::Data *a2)
{
  id v3;
  uint64_t v4;
  WKWebProcessBundleParameters *v5;
  const void *v6;
  uint64_t v7;
  id v9;

  if (!a2)
    return 1;
  WebKit::createUnarchiver(&v9, *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3));
  v3 = v9;
  v4 = objc_msgSend(v9, "decodeObjectOfClasses:forKey:", WebKit::InjectedBundle::classesForCoder(this), CFSTR("parameters"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = -[WKWebProcessBundleParameters initWithDictionary:]([WKWebProcessBundleParameters alloc], "initWithDictionary:", v4);
    v6 = (const void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v5;
    if (v6)
      CFRelease(v6);
    v7 = 1;
  }
  else
  {
    WTFLogAlways();
    v7 = 0;
  }
  if (v3)
    CFRelease(v3);
  return v7;
}

void sub_196CF01A0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

const void *WebKit::InjectedBundle::classesForCoder(WebKit::InjectedBundle *this)
{
  const void *v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v1 = (const void *)*((_QWORD *)this + 7);
  if (!v1)
  {
    v17 = (void *)MEMORY[0x1E0C99E60];
    v16 = objc_opt_class();
    v15 = objc_opt_class();
    v4 = objc_opt_class();
    v5 = objc_opt_class();
    v6 = objc_opt_class();
    v7 = objc_opt_class();
    v8 = objc_opt_class();
    v9 = objc_opt_class();
    v10 = objc_opt_class();
    v11 = objc_opt_class();
    v12 = objc_opt_class();
    v13 = (const void *)objc_msgSend(v17, "setWithObjects:", v16, v15, v4, v5, v6, v7, v8, v9, v10, v11, v12, objc_opt_class(), 0);
    v1 = v13;
    if (v13)
      CFRetain(v13);
    v14 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v1;
    if (v14)
    {
      CFRelease(v14);
      return (const void *)*((_QWORD *)this + 7);
    }
  }
  return v1;
}

void WebKit::NavigationState::willChangeEstimatedProgress(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("estimatedProgress"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196CF03C4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *WKBundleSetClient(void *a1, __int128 *a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 5) = 0u;
  result[7] = 0;
  *result = off_1E34E9B38;
  if (!a2)
    goto LABEL_4;
  v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1)
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    result[7] = *((_QWORD *)a2 + 6);
LABEL_8:
    *(_OWORD *)(result + 3) = v7;
    *(_OWORD *)(result + 5) = v8;
    *(_OWORD *)(result + 1) = v6;
    goto LABEL_4;
  }
  if (v5 <= 0)
  {
    if (v5)
    {
      __break(1u);
      return result;
    }
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    goto LABEL_8;
  }
LABEL_4:
  v9 = result;
  WebKit::InjectedBundle::setClient(v3, &v9);
  result = v9;
  if (v9)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::InjectedBundle::setClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34E9C18;
  }
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::GPUProcess::initializeGPUProcess(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  WebCore *IsUserInitiated;
  WTF::MemoryPressureHandler *v6;
  WTF::MemoryPressureHandler *v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  WebCore::CoreAudioSharedUnit *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  const WebKit::SandboxExtensionHandle *v16;
  _QWORD *v17;
  uint64_t v18;
  const WebKit::SandboxExtensionHandle *v19;
  const WebKit::SandboxExtensionHandle *v20;
  const WebKit::SandboxExtensionHandle *v21;
  const WebKit::SandboxExtensionHandle *v22;
  void *v23;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WebKit::AuxiliaryProcess::applyProcessCreationParameters((WebKit::AuxiliaryProcess *)a1, (WTF::StringImpl **)a2);
  v4 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v25) = 134217984;
    *(_QWORD *)((char *)&v25 + 4) = a1;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::initializeGPUProcess:", (uint8_t *)&v25, 0xCu);
  }
  IsUserInitiated = (WebCore *)WTF::Thread::setCurrentThreadIsUserInitiated(0);
  v6 = (WTF::MemoryPressureHandler *)WebCore::initializeCommonAtomStrings(IsUserInitiated);
  v7 = (WTF::MemoryPressureHandler *)WTF::MemoryPressureHandler::singleton(v6);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v8 = *(unsigned int **)(a1 + 8);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34B8078;
  v10[1] = v8;
  v11 = *((_QWORD *)v7 + 6);
  *((_QWORD *)v7 + 6) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WTF::MemoryPressureHandler::install(v7);
  WebCore::DeprecatedGlobalSettings::setShouldManageAudioSessionCategory((WebCore::DeprecatedGlobalSettings *)1);
  v12 = (WebCore::CoreAudioSharedUnit *)WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled((WebCore::MockRealtimeMediaSourceCenter *)*(unsigned __int8 *)(a2 + 32));
  v13 = WebCore::CoreAudioSharedUnit::unit(v12);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v14 = *(unsigned int **)(a1 + 8);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = &off_1E34B80A0;
  v17[1] = v14;
  v18 = *(_QWORD *)(v13 + 624);
  *(_QWORD *)(v13 + 624) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 40), v16);
  WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 48), v19);
  WebKit::SandboxExtension::consumePermanently(a2 + 64, v20);
  WebKit::SandboxExtension::consumePermanently(a2 + 80, v21);
  WebKit::AuxiliaryProcess::populateMobileGestaltCache(a1, a2 + 96);
  WebKit::SandboxExtension::consumePermanently(a2 + 112, v22);
  v25 = 0uLL;
  WebCore::setImageSourceAllowableTypes();
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v23);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 264), (WTF::StringImpl *)(a2 + 128));
  WTF::Thread::setCurrentThreadIsUserInteractive(0);
  WebCore::setPresentingApplicationPID((WebCore *)*(unsigned int *)(a2 + 36));
  if (*(_DWORD *)(a2 + 148))
    WTF::overrideUserPreferredLanguages();
  WebKit::AuxiliaryProcess::registerWithStateDumper();
  return WebKit::GPUProcess::platformInitializeGPUProcess(a1, a2);
}

void WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcess *this, WebKit::WebProcessCreationParameters *a2)
{
  NSObject *v4;
  uint64_t v5;
  const WTF::String *v6;
  const WebKit::SandboxExtensionHandle *v7;
  const WebKit::SandboxExtensionHandle *v8;
  int v9;
  int v10;
  char v11;
  PAL *v12;
  void *v13;
  WTF *v14;
  const void *v15;
  WebCore *v16;
  const WTF::String *v17;
  const WTF::String *v18;
  WebCore::DeprecatedGlobalSettings *v19;
  uint64_t v20;
  WebCore::DeprecatedGlobalSettings *v21;
  uint64_t v22;
  WebCore::AVAssetMIMETypeCache *v23;
  WebCore::AVAssetMIMETypeCache *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  const WebKit::SandboxExtensionHandle *v29;
  const WebKit::SandboxExtensionHandle *v30;
  const Color *v31;
  WebCore *v32;
  WebCore::SystemSoundManager **v33;
  WebCore::SystemSoundManager *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  PAL *v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  uint8_t v43[16];
  uint8_t v44[4];
  WebKit::WebProcess *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  _BYTE buf[22];
  _BYTE *v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 672))
      v5 = *((_QWORD *)this + 83);
    else
      v5 = 0;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v5;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::WebProcess::platformInitializeWebProcess", buf, 0x16u);
  }
  unsetenv("BSServiceDomains");
  WebKit::AuxiliaryProcess::applyProcessCreationParameters(this, (WTF::StringImpl **)a2);
  WebKit::AuxiliaryProcess::populateMobileGestaltCache((uint64_t)this, (uint64_t)a2 + 648);
  WTF::String::operator=((WTF::StringImpl **)this + 36, (WebKit::WebProcessCreationParameters *)((char *)a2 + 352));
  WebCore::setPresentingApplicationBundleIdentifier((WebKit::WebProcessCreationParameters *)((char *)a2 + 368), v6);
  WebKit::SandboxExtension::consumePermanently((const char ***)a2 + 49, v7);
  atomic_store(WebKit::SandboxExtension::consumePermanently((uint64_t)a2 + 72, v8) ^ 1, MEMORY[0x1E0CC0200]);
  if (*((_BYTE *)a2 + 680))
  {
    WebCore::ProcessCapabilities::setHEICDecodingEnabled((WebCore::ProcessCapabilities *)1);
    v9 = 8;
  }
  else
  {
    v9 = 0;
  }
  v10 = *((unsigned __int8 *)a2 + 681);
  if (*((_BYTE *)a2 + 681))
  {
    WebCore::ProcessCapabilities::setAVIFDecodingEnabled((WebCore::ProcessCapabilities *)1);
    v9 |= 0x10u;
    v10 = *((unsigned __int8 *)a2 + 681);
  }
  if (*((_BYTE *)a2 + 680) || v10)
  {
    v11 = WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::restricted;
    WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::restricted = 1;
    if ((v11 & 1) == 0)
      CGImageSourceEnableRestrictedDecoding();
  }
  if (v9)
  {
    v12 = (PAL *)PAL::VideoToolboxLibrary((PAL *)1);
    if (v12)
    {
      if (PAL::canLoad_VideoToolbox_VTRestrictVideoDecoders(v12))
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        if ((v9 & 8) != 0)
        {
          *(_DWORD *)v44 = 1752589105;
          WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)buf, v44);
          *(_DWORD *)v44 = 1836415073;
          if (*(_DWORD *)&buf[12] != *(_DWORD *)&buf[8])
          {
            *(_DWORD *)(*(_QWORD *)buf + 4 * *(unsigned int *)&buf[12]) = 1836415073;
            ++*(_DWORD *)&buf[12];
            if ((v9 & 0x10) == 0)
              goto LABEL_27;
LABEL_24:
            *(_DWORD *)v44 = 1635135537;
            if (*(_DWORD *)&buf[12] == *(_DWORD *)&buf[8])
            {
              WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)buf, v44);
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)buf + 4 * *(unsigned int *)&buf[12]) = 1635135537;
              ++*(_DWORD *)&buf[12];
            }
LABEL_27:
            ((void (*)(uint64_t, _QWORD, _QWORD))*MEMORY[0x1E0DCE2B0])(15, *(_QWORD *)buf, *(unsigned int *)&buf[12]);
            v14 = *(WTF **)buf;
            if (*(_QWORD *)buf)
            {
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              WTF::fastFree(v14, v13);
            }
            goto LABEL_29;
          }
          WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)buf, v44);
        }
        if ((v9 & 0x10) == 0)
          goto LABEL_27;
        goto LABEL_24;
      }
    }
  }
LABEL_29:
  v15 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C50]), "initWithMemoryCapacity:diskCapacity:diskPath:", 0, 0, 0);
  objc_msgSend(MEMORY[0x1E0C92C50], "setSharedURLCache:", v15);
  v16 = (WebCore *)WTF::MachSendRight::operator=();
  WebCore::registerMemoryReleaseNotifyCallbacks(v16);
  *MEMORY[0x1E0CBF9A8] = *((_BYTE *)a2 + 333);
  WebCore::AXObjectCache::setEnhancedUserInterfaceAccessibility((WebCore::AXObjectCache *)*((unsigned __int8 *)a2 + 402));
  PAL::setCurrentUserInterfaceIdiom();
  WebCore::setLocalizedDeviceModel((WebKit::WebProcessCreationParameters *)((char *)a2 + 728), v17);
  WebCore::setContentSizeCategory((WebKit::WebProcessCreationParameters *)((char *)a2 + 736), v18);
  WebCore::setSupportsPictureInPicture((WebCore *)*((unsigned __int8 *)a2 + 707));
  v19 = (WebCore::DeprecatedGlobalSettings *)pthread_set_fixedpriority_self();
  v20 = WebCore::DeprecatedGlobalSettings::shared(v19);
  v21 = (WebCore::DeprecatedGlobalSettings *)WebCore::PlatformMediaSessionManager::setVorbisDecoderEnabled((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(v20 + 33));
  v22 = WebCore::DeprecatedGlobalSettings::shared(v21);
  v23 = (WebCore::AVAssetMIMETypeCache *)WebCore::PlatformMediaSessionManager::setOpusDecoderEnabled((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(v22 + 34));
  if (*((_DWORD *)a2 + 111))
  {
    v24 = (WebCore::AVAssetMIMETypeCache *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v43, (uint64_t)a2 + 432);
    WebKit::WebProcess::setMediaMIMETypes(v24);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v25);
    goto LABEL_36;
  }
  v26 = WebCore::AVAssetMIMETypeCache::singleton(v23);
  *(_QWORD *)buf = &off_1E34D9C68;
  *(_QWORD *)&buf[8] = this;
  v51 = buf;
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100]((_QWORD *)(v26 + 40), (uint64_t)buf);
  v27 = v51;
  if (v51 == buf)
  {
    v28 = 4;
    v27 = buf;
  }
  else
  {
    if (!v51)
      goto LABEL_36;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_36:
  WebCore::setScreenProperties();
  WebKit::SandboxExtension::consumePermanently((uint64_t)a2 + 632, v29);
  WebKit::SandboxExtension::consumePermanently((uint64_t)a2 + 688, v30);
  WebCore::setSystemHasBattery((WebCore *)*((unsigned __int8 *)a2 + 704));
  WebCore::setSystemHasAC((WebCore *)*((unsigned __int8 *)a2 + 705));
  WebCore::RenderThemeIOS::setCSSValueToSystemColorMap();
  WebCore::RenderThemeIOS::setFocusRingColor((WebKit::WebProcessCreationParameters *)((char *)a2 + 720), v31);
  v32 = (WebCore *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v32 = off_1E34E0DA0;
  v33 = (WebCore::SystemSoundManager **)WebCore::sleepDisablerClient(v32);
  v34 = *v33;
  *v33 = v32;
  if (v34)
    v34 = (WebCore::SystemSoundManager *)(*(uint64_t (**)(WebCore::SystemSoundManager *))(*(_QWORD *)v34 + 8))(v34);
  WebCore::SystemSoundManager::singleton(v34);
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v35 = off_1E34E0DD0;
  *(_QWORD *)buf = v35;
  WebCore::SystemSoundManager::setSystemSoundDelegate();
  v36 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v37 = off_1E34F0D58;
  *(_QWORD *)buf = v37;
  WebCore::CaptionUserPreferencesMediaAF::setCaptionPreferencesDelegate();
  v38 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  WebCore::IOSurface::setMaximumSize();
  WebCore::IOSurface::setBytesPerRowAlignment(*((WebCore::IOSurface **)a2 + 94));
  WebKit::WebProcess::accessibilityPreferencesDidChange((uint64_t)this, (uint64_t)a2 + 760);
  v39 = (PAL *)_AXSApplicationAccessibilitySetEnabled();
  if (PAL::canLoad_DataDetectorsCore_DDResultDisableURLSchemeChecking(v39))
    ((void (*)(void))*MEMORY[0x1E0DCE360])();
  if (*(_QWORD *)(*((_QWORD *)this + 4) + 352))
  {
    xpc_connection_get_audit_token();
    if (WTF::hasEntitlementValueInArray())
    {
      WebKit::WebProcess::auditTokenForSelf(this, (uint64_t)buf);
      if (!v52)
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
        return;
      }
      v40 = sandbox_enable_state_flag();
      v41 = qword_1ECE71780;
      if (os_log_type_enabled((os_log_t)qword_1ECE71780, OS_LOG_TYPE_DEFAULT))
      {
        if (*((_BYTE *)this + 672))
          v42 = *((_QWORD *)this + 83);
        else
          v42 = 0;
        *(_DWORD *)v44 = 134218496;
        v45 = this;
        v46 = 2048;
        v47 = v42;
        v48 = 1024;
        v49 = v40;
        _os_log_impl(&dword_196BCC000, v41, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::Enabling ParentProcessCanEnableQuickLookStateFlag state flag, status = %d", v44, 0x1Cu);
      }
    }
  }
  if (v15)
    CFRelease(v15);
}

void sub_196CF0D70(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  WTF *v19;

  v19 = *(WTF **)(v17 - 80);
  if (v19)
  {
    *(_QWORD *)(v17 - 80) = 0;
    *(_DWORD *)(v17 - 72) = 0;
    WTF::fastFree(v19, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::SandboxExtension::consumePermanently(uint64_t a1, const WebKit::SandboxExtensionHandle *a2)
{
  uint64_t v2;
  int v3;
  const char ***v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2)
  {
    v5 = *(const char ****)a1;
    v6 = 8 * v2;
    v3 = 1;
    do
    {
      if (*v5)
        v3 &= WebKit::SandboxExtension::consumePermanently(v5, a2);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  else
  {
    LOBYTE(v3) = 1;
  }
  return v3 & 1;
}

void WebKit::AuxiliaryProcess::populateMobileGestaltCache(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v4;
  WebKit::SandboxExtensionImpl *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;

  if (*(_BYTE *)(a2 + 8))
    v2 = *(_QWORD *)a2 == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v4 = 1;
    v5 = *(WebKit::SandboxExtensionImpl **)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(v4 + 8) = v5;
    *(_QWORD *)(v4 + 16) = 1;
    WebKit::SandboxExtensionImpl::consume(v5);
    MGGetFloat32Answer();
    MGGetSInt32Answer();
    MGGetSInt32Answer();
    MGGetBoolAnswer();
    MGGetBoolAnswer();
    v6 = (const void *)MGCopyAnswer();
    MGGetSInt32Answer();
    MGGetBoolAnswer();
    MGGetFloat32Answer();
    MGGetBoolAnswer();
    v7 = (const void *)MGCopyAnswer();
    v8 = (const void *)MGCopyAnswer();
    v9 = v8;
    if (v8)
      CFRetain(v8);
    if (v7)
      CFRelease(v7);
    v10 = (const void *)MGCopyAnswer();
    v11 = v10;
    if (v10)
      CFRetain(v10);
    if (v9)
      CFRelease(v9);
    v12 = (const void *)MGCopyAnswer();
    v13 = v12;
    if (v12)
      CFRetain(v12);
    if (v11)
      CFRelease(v11);
    v14 = (const void *)MGCopyAnswer();
    v15 = v14;
    if (v14)
      CFRetain(v14);
    if (v13)
      CFRelease(v13);
    v16 = (const void *)MGCopyAnswer();
    v17 = v16;
    if (v16)
      CFRetain(v16);
    if (v15)
      CFRelease(v15);
    v18 = *(_QWORD *)(v4 + 16) - 1;
    *(_QWORD *)(v4 + 16) = v18;
    if (!v18)
    {
      *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) = 0;
      sandbox_extension_release();
    }
    if (v17)
      CFRelease(v17);
    if (v6)
      CFRelease(v6);
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v4);
  }
}

void sub_196CF10D4(_Unwind_Exception *a1)
{
  const char ***v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  WTF::RefCounted<WebKit::SandboxExtension>::deref(v1);
  _Unwind_Resume(a1);
}

WebKit::WebPage **WebKit::WebProcess::accessibilityPreferencesDidChange(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  WebKit::WebPage **result;
  WebKit::WebPage **v11;
  WebKit::WebPage **v12;
  WebKit::WebPage **v13;
  uint64_t v14;
  WebKit::WebPage **v15;

  if ((*(_DWORD *)a2 + 1) >= 3)
    v4 = -2;
  else
    v4 = *(_DWORD *)a2;
  if (_AXSReduceMotionEnabledApp() != v4)
    _AXSSetReduceMotionEnabledApp();
  if ((*(_DWORD *)(a2 + 4) + 1) >= 3)
    v5 = -2;
  else
    v5 = *(_DWORD *)(a2 + 4);
  if (_AXSIncreaseButtonLegibilityApp() != v5)
    _AXSSetIncreaseButtonLegibilityApp();
  if ((*(_DWORD *)(a2 + 8) + 1) >= 3)
    v6 = -2;
  else
    v6 = *(_DWORD *)(a2 + 8);
  if (_AXSEnhanceTextLegibilityEnabledApp() != v6)
    _AXSSetEnhanceTextLegibilityEnabledApp();
  if ((*(_DWORD *)(a2 + 12) + 1) >= 3)
    v7 = -2;
  else
    v7 = *(_DWORD *)(a2 + 12);
  if (_AXDarkenSystemColorsApp() != v7)
    _AXSSetDarkenSystemColorsApp();
  if ((*(_DWORD *)(a2 + 16) + 1) >= 3)
    v8 = -2;
  else
    v8 = *(_DWORD *)(a2 + 16);
  if (_AXSInvertColorsEnabledApp() != v8)
    _AXSInvertColorsSetEnabledApp();
  WebCore::setOverrideEnhanceTextLegibility((WebCore *)*(unsigned __int8 *)(a2 + 21));
  WebCore::FontCache::invalidateAllFontCaches();
  v9 = *(unsigned __int8 *)(a2 + 20);
  *(_BYTE *)(a1 + 777) = v9;
  *(_BYTE *)(a1 + 781) = *(_BYTE *)(a2 + 22);
  WebCore::Image::setSystemAllowsAnimationControls((WebCore::Image *)(v9 == 0));
  result = (WebKit::WebPage **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 112));
  v11 = result;
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 112);
  if (v14)
    v15 = (WebKit::WebPage **)(v14 + 16 * *(unsigned int *)(v14 - 4));
  else
    v15 = 0;
  if (v15 != result)
  {
    do
    {
      WebKit::WebPage::updateImageAnimationEnabled(v11[1]);
      result = (WebKit::WebPage **)WebKit::WebPage::updatePrefersNonBlinkingCursor(v11[1]);
      while (1)
      {
        v11 += 2;
        if (v11 == v13)
          break;
        if ((unint64_t)*v11 + 1 > 1)
          goto LABEL_36;
      }
      v11 = v13;
LABEL_36:
      ;
    }
    while (v11 != v15);
  }
  return result;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 30))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 4 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WebKit::NetworkProcess::platformInitializeNetworkProcessCocoa(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl **v4;
  const void *v5;
  _OWORD v6[2];
  char v7;
  __int128 v8;
  __int128 v9;

  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 72);
  _CFNetworkSetATSContext();
  v4 = WTF::String::operator=((WTF::StringImpl **)(a1 + 144), (WTF::StringImpl *)(a2 + 56));
  WebKit::initializeNetworkSettings((WebKit *)v4);
  WTF::FileSystemImpl::setAllowsMaterializingDatalessFiles();
  *(_BYTE *)(a1 + 328) = 2;
  v5 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C50]), "initWithMemoryCapacity:diskCapacity:diskPath:", 0, 0, 0);
  objc_msgSend(MEMORY[0x1E0C92C50], "setSharedURLCache:", v5);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 352))
  {
    xpc_connection_get_audit_token();
    v6[0] = v8;
    v6[1] = v9;
    v7 = 1;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(MEMORY[0x1E0CD0800], "setDelegation:", v6);
  }
  if (v5)
    CFRelease(v5);
}

void sub_196CF1458(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::initializeNetworkSettings(WebKit *this)
{
  int AppBooleanValue;
  Boolean keyExistsAndHasValidFormat;

  _CFNetworkHTTPConnectionCacheSetLimit();
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("WebKitEnableHTTPPipelining"), (CFStringRef)*MEMORY[0x1E0C9B248], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    WebCore::ResourceRequest::setHTTPPipeliningEnabled((WebCore::ResourceRequest *)(AppBooleanValue != 0));
  _CFNetworkHTTPConnectionCacheSetLimit();
  _CFNetworkHTTPConnectionCacheSetLimit();
  return _CFNetworkHTTPConnectionCacheSetLimit();
}

uint64_t WebKit::GPUProcess::platformInitializeGPUProcess(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 56))
    WTF::StringImpl::operator NSString *();
  return MTLSetShaderCachePath();
}

void IPC::ArgumentCoder<std::tuple<IPC::Semaphore const&,IPC::Semaphore const&>,void>::encode<IPC::Encoder,std::tuple<IPC::Semaphore const&,IPC::Semaphore const&>,0ul,1ul>(uint64_t a1, IPC::Semaphore **a2)
{
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(a1, *a2);
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(a1, a2[1]);
}

IPC::Encoder *IPC::MessageSender::send<Messages::RemoteRenderingBackendProxy::DidInitialize>(uint64_t a1, IPC::Semaphore **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1295;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<IPC::Semaphore const&,IPC::Semaphore const&>,void>::encode<IPC::Encoder,std::tuple<IPC::Semaphore const&,IPC::Semaphore const&>,0ul,1ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void IPC::ArgumentCoder<IPC::Semaphore,void>::encode(uint64_t a1, IPC::Semaphore *this)
{
  uint64_t v3;

  IPC::Semaphore::createSendRight(&v3, this);
  IPC::Encoder::addAttachment(a1, (unint64_t)&v3);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v3);
}

uint64_t IPC::Semaphore::createSendRight(IPC::Semaphore *this)
{
  return WTF::MachSendRight::create((WTF::MachSendRight *)*((unsigned int *)this + 1));
}

void sub_196CF1C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  const void *v32;

  if (v32)
    CFRelease(v32);
  _Unwind_Resume(exception_object);
}

void sub_196CF222C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18)
{
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  if (a17)
    WTF::fastFree(a17, a2);
  if ((a16 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::postTask(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C0D18;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t ___ZN6WebKitL29desktopClassBrowsingSupportedEv_block_invoke(PAL *a1)
{
  uint64_t result;

  result = PAL::currentUserInterfaceIdiomIsSmallScreen(a1);
  byte_1EE341943 = result ^ 1;
  return result;
}

unsigned __int8 ***WebKit::StorageAreaImpl::prewarm(unsigned __int8 ***this)
{
  unsigned __int8 **v1;

  v1 = this[3];
  if (v1)
  {
    this = (unsigned __int8 ***)v1[1];
    if (this)
    {
      if (!*((_BYTE *)this + 64))
        return WebKit::StorageAreaMap::sendConnectMessage((uint64_t)this, 0);
    }
  }
  return this;
}

void *__copy_helper_block_e8_32c65_ZTSKZ52__WKMouseDeviceObserver_startWithCompletionHandler__E3__0(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_196CF23E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

unint64_t WebKit::WebPage::fixedLayoutSize(WebKit::WebPage *this)
{
  _DWORD *v1;
  _DWORD *v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;

  v1 = (_DWORD *)WebKit::WebPage::localMainFrameView(this);
  if (v1)
  {
    v2 = v1;
    ++v1[2];
    v3 = WebCore::ScrollView::fixedLayoutSize((WebCore::ScrollView *)v1);
    v4 = v3;
    v5 = HIDWORD(v3);
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  else
  {
    v4 = 0;
    LODWORD(v5) = 0;
  }
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::usesDelegatedPageScaling(WebKit::RemoteLayerTreeDrawingArea *this)
{
  return 1;
}

__n128 WebKit::RemoteLayerTreeDrawingArea::viewExposedRect@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[9];
  *a2 = result;
  a2[1].n128_u32[0] = this[10].n128_u32[0];
  return result;
}

IPC::Encoder *WebKit::NetworkLoad::didReceiveChallenge(uint64_t a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  int v8;
  WebCore::ProtectionSpaceBase *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const char *v13;
  IPC::Encoder *result;
  uint64_t *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  CFTypeRef cf;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  v8 = *(unsigned __int8 *)(WebCore::AuthenticationChallengeBase::protectionSpace(a2) + 21);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16)) & 1) != 0
    || (v8 - 7) < 2
    || (v9 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace(a2),
        (WebCore::ProtectionSpaceBase::isProxy(v9) & 1) != 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 2992) + 32);
    if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 192);
      v23 = (WTF::StringImpl *)"AuthenticationManager";
      v24 = (WTF::StringImpl *)22;
      v13 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v12, (WTF::ASCIILiteralHash *)&v23);
      return WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v13, v11 + 8, a2, a4);
    }
    else
    {
      v15 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 192);
      v23 = (WTF::StringImpl *)"AuthenticationManager";
      v24 = (WTF::StringImpl *)22;
      v16 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v15, (WTF::ASCIILiteralHash *)&v23);
      v17 = *(_QWORD *)(a1 + 64);
      if (v17)
        v18 = v17 + 8;
      else
        v18 = 0;
      return (IPC::Encoder *)WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2992) + 16) + 8) + 24), *(_QWORD *)(a1 + 32), v18, a2, a3, a4);
    }
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v23);
    cf = 0;
    v19 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v19 + 16))(v19, 0, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v21 = cf;
    cf = 0;
    if (v21)
      CFRelease(v21);
    v22 = v24;
    v24 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v20);
      else
        *(_DWORD *)v22 -= 2;
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (IPC::Encoder *)WTF::StringImpl::destroy(result, v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196CF2748(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LegacyCustomProtocolManager::supportsScheme(WebKit::LegacyCustomProtocolManager *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;

  if (!*a2)
    return 0;
  v4 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 56);
LABEL_5:
  v6 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>((uint64_t *)this + 6, a2);
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v6;
}

void sub_196CF2810(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  int i;
  int v7;
  uint64_t result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  for (i = 0; ; v5 = i + v7)
  {
    v7 = v5 & v4;
    result = *(_QWORD *)(v2 + 8 * (v5 & v4));
    if (!result)
      break;
    if (result != -1 && WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(result, (uint64_t)*a2))
      return 1;
    ++i;
  }
  return result;
}

uint64_t WebKit::PreconnectTask::isAllowedToAskUserForCredentials(WebKit::PreconnectTask *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::AuxiliaryProcess::messageSenderDestinationID(WebKit::AuxiliaryProcess *this)
{
  return 0;
}

void IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(IPC::Encoder *a1, WebCore::ResourceError *this)
{
  CFTypeRef v3;
  uint64_t v4;
  CFTypeRef cf;
  char v6;

  WebCore::ResourceError::ipcData(this);
  IPC::ArgumentCoder<std::optional<WebCore::ResourceError::IPCData>,void>::encode<IPC::Encoder,std::optional<WebCore::ResourceError::IPCData>>(a1, (uint64_t)&v4);
  if (v6)
  {
    v3 = cf;
    cf = 0;
    if (v3)
      CFRelease(v3);
  }
}

void sub_196CF2924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, char a12)
{
  if (a12)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::continueDidReceiveChallenge(uint64_t a1, uint64_t a2, WebCore::AuthenticationChallengeBase *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::SecurityOriginData *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  const void *v45;
  const void *v46;
  WebCore::ProtectionSpaceBase *v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  const void *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const WebCore::ProtectionSpace *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const WebCore::ProtectionSpace *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  const WebCore::Credential *v67;
  char v68;
  WebCore::ResourceResponseBase *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const WebCore::ProtectionSpace *v73;
  WebCore::ResourceResponseBase *v74;
  const WTF::URL *v75;
  uint64_t v76;
  const void *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WebCore::Credential *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const void *v84;
  WTF::StringImpl *v85;
  CFTypeRef v86;
  CFTypeRef v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  NSObject *v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  const void *v99;
  const void *v100;
  WTF::StringImpl *v101;
  CFTypeRef v102;
  CFTypeRef v103;
  WTF::StringImpl *v104;
  CFTypeRef v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  const void *v108;
  os_signpost_id_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  CFTypeRef v113;
  CFTypeRef v114;
  CFTypeRef cf;
  WTF::StringImpl *v116;
  uint8_t buf[8];
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[3];

  v120[2] = *MEMORY[0x1E0C80C00];
  if (!*a6)
  {
    WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>((unsigned int **)&v111, *(_QWORD *)(a2 + 40), a5);
    v24 = (unsigned int *)v111;
    if (v111)
    {
      v25 = *((_QWORD *)v111 + 1);
      v111 = 0;
      do
      {
        v26 = __ldaxr(v24);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v24));
      if (v27)
      {
        if (v25)
        {
LABEL_17:
          v28 = *(WTF::StringImpl **)(a1 + 32);
          v29 = (unsigned int *)((char *)v28 + 120);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
          v111 = v28;
          v31 = *(_QWORD *)(a1 + 24);
          v32 = *(WTF::StringImpl **)(v25 + 128);
          if (v32)
            *(_DWORD *)v32 += 2;
          v116 = v32;
          WebKit::createChallengeCompletionHandler(buf, (uint64_t *)&v111, v31, a3, &v116, 0, a7);
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v33);
            else
              *(_DWORD *)v32 -= 2;
          }
          v34 = (unsigned int *)v111;
          v111 = 0;
          if (v34)
          {
            v35 = v34 + 30;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v34 + 30);
              (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
            }
          }
          v38 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 192);
          v111 = (WTF::StringImpl *)"AuthenticationManager";
          v112 = (WTF::StringImpl *)22;
          v39 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v38, (WTF::ASCIILiteralHash *)&v111);
          v40 = *(_QWORD *)(a1 + 24);
          v41 = *(_QWORD *)(v25 + 72);
          v42 = (WebCore::SecurityOriginData *)(v25 + 144);
          if (WebCore::SecurityOriginData::isNull(v42))
            v43 = 0;
          else
            v43 = (uint64_t)v42;
          WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v39, v40, v41, v43, a3, a4, (uint64_t *)buf);
          v44 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v44)
            goto LABEL_110;
          return;
        }
      }
      else
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v23);
        if (v25)
          goto LABEL_17;
      }
    }
    v95 = (WTF::StringImpl *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a2 + 32), a5);
    if (!v95
      || (v96 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 176),
          v111 = v95,
          (v97 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v96, &v111)) == 0))
    {
      WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v111);
      v113 = 0;
      v21 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, 2, &v111);
      goto LABEL_128;
    }
    v98 = v97;
    WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v111, a3);
    v99 = (const void *)*((_QWORD *)a3 + 52);
    v114 = v99;
    if (v99)
      CFRetain(v99);
    v100 = (const void *)*((_QWORD *)a3 + 53);
    cf = v100;
    if (v100)
      CFRetain(v100);
    WebKit::Download::didReceiveChallenge(v98, (WebCore::AuthenticationChallengeBase *)&v111, a7);
    v102 = cf;
    cf = 0;
    if (v102)
      CFRelease(v102);
    v103 = v114;
    v114 = 0;
    if (v103)
      CFRelease(v103);
    WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v111, v101);
    return;
  }
  v13 = *(WTF::StringImpl **)(a1 + 32);
  v14 = (unsigned int *)((char *)v13 + 120);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v111 = v13;
  WebKit::createChallengeCompletionHandler(&v110, (uint64_t *)&v111, *(_QWORD *)(a1 + 24), a3, (WTF::StringImpl **)(*a6 + 64), a5, a7);
  v16 = (unsigned int *)v111;
  v111 = 0;
  if (v16)
  {
    v17 = v16 + 30;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
      if ((a4 & 1) != 0)
        goto LABEL_9;
LABEL_36:
      v20 = *a6;
      goto LABEL_37;
    }
  }
  if ((a4 & 1) == 0)
    goto LABEL_36;
LABEL_9:
  v20 = *a6;
  if (*(_BYTE *)(a1 + 947) && !*(_BYTE *)(v20 + 544))
  {
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v111);
    v113 = 0;
    v21 = v110;
    v110 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, 2, &v111);
LABEL_128:
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v105 = v113;
    v113 = 0;
    if (v105)
      CFRelease(v105);
    v106 = v112;
    v112 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, v104);
      else
        *(_DWORD *)v106 -= 2;
    }
    v107 = v111;
    v111 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
        WTF::StringImpl::destroy(v107, v104);
      else
        *(_DWORD *)v107 -= 2;
    }
    return;
  }
LABEL_37:
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v111, a3);
  v45 = (const void *)*((_QWORD *)a3 + 52);
  v114 = v45;
  if (v45)
    CFRetain(v45);
  v46 = (const void *)*((_QWORD *)a3 + 53);
  cf = v46;
  if (v46)
    CFRetain(v46);
  if (kdebug_is_enabled())
  {
    v90 = *MEMORY[0x1E0CBE150];
    v91 = WTFSignpostLogHandle();
    v92 = v91;
    if (v90)
    {
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
      {
        v93 = *(_QWORD *)(v20 + 608);
        v94 = WTFCurrentContinuousTime();
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = 0;
        v118 = 0x800000000000400;
        v119 = v93;
        LOWORD(v120[0]) = 2048;
        *(_QWORD *)((char *)v120 + 2) = v94;
        _os_log_impl(&dword_196BCC000, v92, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu received challenge", buf, 0x22u);
      }
    }
    else
    {
      v108 = *(const void **)(v20 + 608);
      if (v108)
      {
        v109 = os_signpost_id_make_with_pointer(v91, v108);
        if (v109 - 1 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_42;
      }
      else
      {
        v109 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v92))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_196BCC000, v92, OS_SIGNPOST_EVENT, v109, "DataTask", "received challenge", buf, 2u);
      }
    }
  }
LABEL_42:
  v47 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)&v111);
  if (!WebCore::ProtectionSpaceBase::isPasswordBased(v47))
    goto LABEL_92;
  v49 = (WTF::StringImpl **)(v20 + 48);
  v48 = *(_QWORD *)(v20 + 48);
  if (v48 && *(_DWORD *)(v48 + 4) || (v50 = *(_QWORD *)(v20 + 56)) != 0 && *(_DWORD *)(v50 + 4))
  {
    v51 = (WTF::StringImpl **)(v20 + 56);
    WebCore::CredentialBase::CredentialBase();
    v120[0] = 0;
    v52 = v110;
    v110 = 0;
    (*(void (**)(uint64_t, _QWORD, uint8_t *))(*(_QWORD *)v52 + 16))(v52, 0, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    v54 = (const void *)v120[0];
    v120[0] = 0;
    if (v54)
      CFRelease(v54);
    v55 = (WTF::StringImpl *)v118;
    v118 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v53);
      else
        *(_DWORD *)v55 -= 2;
    }
    v64 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v53);
      else
        *(_DWORD *)v64 -= 2;
    }
    v65 = *v49;
    *v49 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v53);
      else
        *(_DWORD *)v65 -= 2;
    }
    v66 = *v51;
    *v51 = 0;
    if (!v66)
      goto LABEL_105;
LABEL_102:
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v53);
    else
      *(_DWORD *)v66 -= 2;
    goto LABEL_105;
  }
  if (*(_BYTE *)(v20 + 104) != 1)
    goto LABEL_90;
  if (!WebCore::Credential::isEmpty((WebCore::Credential *)(v20 + 72))
    || WebCore::AuthenticationChallengeBase::previousFailureCount((WebCore::AuthenticationChallengeBase *)&v111))
  {
    v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8) + 32);
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8) + 24);
    v57 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v56 + 216), buf);
    if (v57)
    {
      v58 = v57;
      v59 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)&v111);
      WebCore::CredentialStorage::remove((WebCore::CredentialStorage *)(v58 + 96), (const WTF::String *)(v20 + 64), v59);
    }
  }
  if (WebCore::AuthenticationChallengeBase::previousFailureCount((WebCore::AuthenticationChallengeBase *)&v111))
    goto LABEL_90;
  v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8) + 32);
  v116 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8) + 24);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v60 + 216), &v116))
  {
    v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8) + 32);
    v116 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8) + 24);
    v62 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v61 + 216), &v116);
    v63 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)&v111);
    WebCore::CredentialStorage::get((WebCore::CredentialStorage *)(v62 + 96), (const WTF::String *)(v20 + 64), v63);
  }
  else
  {
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)buf);
    v120[0] = 0;
  }
  if ((WebCore::Credential::isEmpty((WebCore::Credential *)buf) & 1) != 0
    || (WebCore::CredentialBase::compare((WebCore::CredentialBase *)buf, (const WebCore::Credential *)(v20 + 72), v67) & 1) != 0)
  {
    v68 = 1;
  }
  else
  {
    v69 = (WebCore::ResourceResponseBase *)WebCore::AuthenticationChallengeBase::failureResponse((WebCore::AuthenticationChallengeBase *)&v111);
    if (WebCore::ResourceResponseBase::httpStatusCode(v69) == 401)
    {
      v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8) + 32);
      v116 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8) + 24);
      v71 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v70 + 216), &v116);
      if (v71)
      {
        v72 = v71;
        v73 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)&v111);
        v74 = (WebCore::ResourceResponseBase *)WebCore::AuthenticationChallengeBase::failureResponse((WebCore::AuthenticationChallengeBase *)&v111);
        v75 = (const WTF::URL *)WebCore::ResourceResponseBase::url(v74);
        WebCore::CredentialStorage::set((WebCore::CredentialStorage *)(v72 + 96), (const WTF::String *)(v20 + 64), (const WebCore::Credential *)buf, v73, v75);
      }
    }
    v76 = v110;
    v110 = 0;
    (*(void (**)(uint64_t, _QWORD, uint8_t *))(*(_QWORD *)v76 + 16))(v76, 0, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    v68 = 0;
  }
  v77 = (const void *)v120[0];
  v120[0] = 0;
  if (v77)
    CFRelease(v77);
  v78 = (WTF::StringImpl *)v118;
  v118 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v53);
    else
      *(_DWORD *)v78 -= 2;
  }
  v79 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v53);
    else
      *(_DWORD *)v79 -= 2;
  }
  if ((v68 & 1) != 0)
  {
LABEL_90:
    v80 = (WebCore::Credential *)WebCore::AuthenticationChallengeBase::proposedCredential((WebCore::AuthenticationChallengeBase *)&v111);
    if ((WebCore::Credential::isEmpty(v80) & 1) == 0
      && !WebCore::AuthenticationChallengeBase::previousFailureCount((WebCore::AuthenticationChallengeBase *)&v111))
    {
      v88 = WebCore::AuthenticationChallengeBase::proposedCredential((WebCore::AuthenticationChallengeBase *)&v111);
      v89 = v110;
      v110 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v89 + 16))(v89, 0, v88);
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
      goto LABEL_105;
    }
LABEL_92:
    v81 = *(_QWORD *)(v20 + 24);
    if (v81)
    {
      v82 = *(_QWORD *)(v81 + 8);
      if (v82)
      {
        (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, uint64_t *))(*(_QWORD *)v82 + 8))(v82, &v111, a4, &v110);
        goto LABEL_105;
      }
    }
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)buf);
    v120[0] = 0;
    v83 = v110;
    v110 = 0;
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v83 + 16))(v83, 1, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
    v84 = (const void *)v120[0];
    v120[0] = 0;
    if (v84)
      CFRelease(v84);
    v85 = (WTF::StringImpl *)v118;
    v118 = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v53);
      else
        *(_DWORD *)v85 -= 2;
    }
    v66 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v66)
      goto LABEL_102;
  }
LABEL_105:
  v86 = cf;
  cf = 0;
  if (v86)
    CFRelease(v86);
  v87 = v114;
  v114 = 0;
  if (v87)
    CFRelease(v87);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v111, v53);
  v44 = (WTF::StringImpl *)v110;
  v110 = 0;
  if (v44)
LABEL_110:
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v44 + 8))(v44);
}

void sub_196CF32E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, CFTypeRef a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,CFTypeRef a62,CFTypeRef cf)
{
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v66;
  const void *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  CFTypeRef v70;
  CFTypeRef v71;

  (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v67 = *(const void **)(v64 - 88);
  *(_QWORD *)(v64 - 88) = 0;
  if (v67)
    CFRelease(v67);
  v68 = *(WTF::StringImpl **)(v64 - 104);
  *(_QWORD *)(v64 - 104) = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v66);
    else
      *(_DWORD *)v68 -= 2;
  }
  v69 = *(WTF::StringImpl **)(v64 - 112);
  *(_QWORD *)(v64 - 112) = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v66);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = cf;
  cf = 0;
  if (v70)
    CFRelease(v70);
  v71 = a62;
  a62 = 0;
  if (v71)
    CFRelease(v71);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a10, v66);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(a1);
}

WebCore::AuthenticationChallengeBase *WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(WebCore::AuthenticationChallengeBase *this, const WebCore::AuthenticationChallengeBase *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  const void *v7;
  _DWORD *v8;
  _DWORD *v9;
  const void *v10;
  const void *v11;

  *(_BYTE *)this = *(_BYTE *)a2;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 1) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 2) = v5;
  v6 = *((_DWORD *)a2 + 6);
  *(_DWORD *)((char *)this + 27) = *(_DWORD *)((char *)a2 + 27);
  *((_DWORD *)this + 6) = v6;
  v7 = (const void *)*((_QWORD *)a2 + 4);
  *((_QWORD *)this + 4) = v7;
  if (v7)
    CFRetain(v7);
  v8 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 5) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 6) = v9;
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  v10 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)this + 8) = v10;
  if (v10)
    CFRetain(v10);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::AuthenticationChallengeBase *)((char *)this + 80), (const WebCore::AuthenticationChallengeBase *)((char *)a2 + 80));
  v11 = (const void *)*((_QWORD *)a2 + 40);
  *((_QWORD *)this + 40) = v11;
  if (v11)
    CFRetain(v11);
  *((_BYTE *)this + 328) = *((_BYTE *)a2 + 328);
  WebCore::ResourceError::ResourceError((uint64_t)this + 336, (uint64_t)a2 + 336);
  return this;
}

void sub_196CF36B0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  _QWORD *v2;
  WebCore::ResourceResponseBase *v3;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = (const void *)v2[8];
  v2[8] = 0;
  if (v6)
    CFRelease(v6);
  v7 = (WTF::StringImpl *)v2[6];
  v2[6] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)v2[5];
  v2[5] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (const void *)v2[4];
  v2[4] = 0;
  if (v9)
    CFRelease(v9);
  v10 = (WTF::StringImpl *)v2[2];
  v2[2] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)v2[1];
  v2[1] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::ResourceError::ResourceError(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  int v8;
  const void *v9;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_DWORD **)(a2 + 48);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v8;
  v9 = *(const void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
    CFRetain(v9);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  int v8;
  const void *v9;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_DWORD **)(a2 + 48);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v8;
  v9 = *(const void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
    CFRetain(v9);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

void sub_196CF3848(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v4 = v2[6];
  v2[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v2[1];
  v2[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 27) = *(_DWORD *)(a2 + 27);
  *(_DWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v9;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v10 = a2 + 80;
  WTF::URL::URL(a1 + 80, (uint64_t *)(a2 + 80));
  v12 = *(_QWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = v13;
  v14 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 136) = v14;
  v15 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 144) = v15;
  v16 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = v16;
  v17 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 168) = 0;
  *(_DWORD *)(a1 + 168) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a2 + 172) = 0;
  *(_DWORD *)(a1 + 172) = v17;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v18 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 176) = v18;
  LODWORD(v18) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a2 + 184) = 0;
  *(_DWORD *)(a1 + 184) = v18;
  LODWORD(v18) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a2 + 188) = 0;
  *(_DWORD *)(a1 + 188) = v18;
  v19 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 192) = v19;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    v20 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a1 + 200) = v20;
    *(_BYTE *)(a1 + 208) = 1;
  }
  v21 = *(_OWORD *)(a2 + 216);
  v22 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v22;
  *(_OWORD *)(a1 + 216) = v21;
  v23 = *(_OWORD *)(v10 + 184);
  v24 = *(_OWORD *)(v10 + 200);
  v25 = *(_OWORD *)(v10 + 216);
  *(_DWORD *)(v11 + 231) = *(_DWORD *)(v10 + 231);
  *(_OWORD *)(v11 + 216) = v25;
  *(_OWORD *)(v11 + 200) = v24;
  *(_OWORD *)(v11 + 184) = v23;
  v26 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a1 + 320) = v26;
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  v27 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a1 + 336) = v27;
  WTF::URL::URL(a1 + 344, (uint64_t *)(a2 + 344));
  v28 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a1 + 384) = v28;
  LODWORD(v28) = *(_DWORD *)(a2 + 392);
  *(_WORD *)(a1 + 396) = *(_WORD *)(a2 + 396);
  *(_DWORD *)(a1 + 392) = v28;
  v29 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 400) = 0;
  *(_QWORD *)(a1 + 400) = v29;
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  return a1;
}

void IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      goto LABEL_14;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 0;
    return;
  }
  *v10 = 1;
  if (*(_BYTE *)(a2 + 32))
  {
    IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)a1, a2);
    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_14:
  __break(0xC471u);
}

void IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::encode(IPC::Encoder *a1, WebCore::AuthenticationChallengeBase *this)
{
  uint64_t v4;
  WebCore::Credential *v5;
  int v6;
  WebCore::ResourceResponseBase *v7;
  WebCore::ResourceError *v8;

  v4 = WebCore::AuthenticationChallengeBase::protectionSpace(this);
  IPC::ArgumentCoder<WebCore::ProtectionSpace,void>::encode(a1, v4);
  v5 = (WebCore::Credential *)WebCore::AuthenticationChallengeBase::proposedCredential(this);
  IPC::ArgumentCoder<WebCore::Credential,void>::encode(a1, v5);
  v6 = WebCore::AuthenticationChallengeBase::previousFailureCount(this);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = (WebCore::ResourceResponseBase *)WebCore::AuthenticationChallengeBase::failureResponse(this);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, v7);
  v8 = (WebCore::ResourceError *)WebCore::AuthenticationChallengeBase::error(this);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(a1, v8);
}

void IPC::ArgumentCoder<WebCore::Credential,void>::encode(IPC::Encoder *a1, WebCore::Credential *this)
{
  uint64_t v3;
  char v4;
  _BYTE v5[24];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  WebCore::Credential::ipcData(this);
  v3 = v6;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,void>::encode<IPC::Encoder,std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>>(a1, (uint64_t)v5, v3);
  if (v6 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v6])(&v4, v5);
}

void sub_196CF3D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a16 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[a16])(&a12, &a13);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ProtectionSpace,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  CFTypeRef v5;
  CFTypeRef cf;
  char v7;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 20);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  LOBYTE(v4) = *(_BYTE *)(a2 + 21);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  WebCore::ProtectionSpace::getPlatformDataToSerialize((WebCore::ProtectionSpace *)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProtectionSpace::PlatformData>,void>::encode<IPC::Encoder,std::optional<WebCore::ProtectionSpace::PlatformData>>(a1, (uint64_t)&cf);
  if (v7)
  {
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
  }
}

void sub_196CF3E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebCore::ProtectionSpace::PlatformData>,void>::encode<IPC::Encoder,std::optional<WebCore::ProtectionSpace::PlatformData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  WebKit::RemoteLayerTreeDrawingArea *v6;

  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      IPC::encodeObjectDirectly<NSURLProtectionSpace>(a1, *(objc_object **)a2);
    }
    else
    {
      v6 = (WebKit::RemoteLayerTreeDrawingArea *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::RemoteLayerTreeDrawingArea::delegatedScrollingMode(v6);
    }
  }
  else
  {
    *v5 = 0;
  }
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::delegatedScrollingMode(WebKit::RemoteLayerTreeDrawingArea *this)
{
  return 1;
}

uint64_t WebKit::WebPage::shouldUseCustomContentProviderForResponse(WebKit::WebPage *this, const WebCore::ResourceResponse *a2)
{
  WTF::ASCIICaseInsensitiveHash **v3;

  v3 = (WTF::ASCIICaseInsensitiveHash **)WebCore::ResourceResponseBase::mimeType(a2);
  if (*v3)
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>((uint64_t *)this + 224, v3);
  else
    return 0;
}

_QWORD *IPC::ArgumentCoder<WebCore::AcceleratedEffectValues,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  char v5;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::TransformOperationData>,void>::encode<IPC::Encoder,std::optional<WebCore::TransformOperationData> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<WebCore::Length,void>::encode(a1, (WebCore::Length *)(a2 + 24));
  IPC::ArgumentCoder<WebCore::Length,void>::encode(a1, (WebCore::Length *)(a2 + 26));
  v5 = *((_BYTE *)a2 + 112);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 30));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,void>::encode<IPC::Encoder,WebCore::TransformOperation>(a1, (uint64_t *)a2 + 17);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,void>::encode<IPC::Encoder,WebCore::TransformOperation>(a1, (uint64_t *)a2 + 18);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,void>::encode<IPC::Encoder,WebCore::TransformOperation>(a1, (uint64_t *)a2 + 19);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::PathOperation,WTF::RawPtrTraits<WebCore::PathOperation>,WTF::DefaultRefDerefTraits<WebCore::PathOperation>>,void>::encode<IPC::Encoder,WebCore::PathOperation>(a1, (uint64_t *)a2 + 20);
  IPC::ArgumentCoder<WebCore::Length,void>::encode(a1, (WebCore::Length *)(a2 + 42));
  IPC::ArgumentCoder<WebCore::Length,void>::encode(a1, (WebCore::Length *)(a2 + 44));
  IPC::ArgumentCoder<WebCore::Length,void>::encode(a1, (WebCore::Length *)(a2 + 46));
  IPC::ArgumentCoder<WebCore::Length,void>::encode(a1, (WebCore::Length *)(a2 + 48));
  IPC::ArgumentCoder<WebCore::Length,void>::encode(a1, (WebCore::Length *)(a2 + 50));
  IPC::ArgumentCoder<WebCore::OffsetRotation,void>::encode(a1, a2 + 52);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 54));
  return IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 58));
}

_BYTE *IPC::ArgumentCoder<WebCore::Length,void>::encode(IPC::Encoder *a1, WebCore::Length *this)
{
  uint64_t v3;
  int v4;
  _BYTE *result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _BYTE v9[4];
  int v10;
  int v11;
  char v12;
  int v13;

  WebCore::Length::ipcData(this);
  v3 = v13;
  v4 = v13;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v13;
  switch(v4)
  {
    case 0:
      if (v13)
        goto LABEL_13;
      return result;
    case 1:
      if (v13 != 1)
        goto LABEL_13;
      return result;
    case 2:
      if (v13 != 2)
        goto LABEL_13;
      goto LABEL_9;
    case 3:
      if (v13 != 3)
        goto LABEL_13;
LABEL_9:
      result = IPC::ArgumentCoder<WebCore::Length::RelativeData,void>::encode(a1, (uint64_t)&v10);
      break;
    case 4:
      if (v13 == 4)
      {
        v6 = v11;
        *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
        IPC::ArgumentCoder<std::variant<float,int>,void>::encode<IPC::Encoder,std::variant<float,int> const&>(a1, &v10, v6);
        v7 = v12;
        result = IPC::Encoder::grow(a1, 1uLL, 1);
        *result = v7;
      }
      else
      {
LABEL_13:
        v8 = std::__throw_bad_variant_access[abi:sn180100]();
        result = (_BYTE *)IPC::ArgumentCoder<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,void>::encode<IPC::Encoder,WebCore::TransformOperation>(v8);
      }
      break;
    default:
      result = IPC::ArgumentCoder<std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData>,void>::encode<IPC::Encoder,std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)a1, (uint64_t)v9, v3);
      break;
  }
  return result;
}

char *IPC::ArgumentCoder<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,void>::encode<IPC::Encoder,WebCore::TransformOperation>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *result;

  v4 = *a2;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    return IPC::ArgumentCoder<WebCore::TransformOperation,void>::encode((char *)a1, *a2);
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::OffsetRotation,void>::encode(IPC::Encoder *a1, int *a2)
{
  char v4;
  int v5;
  char *result;

  v4 = *((_BYTE *)a2 + 4);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *a2;
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v5;
  return result;
}

char *IPC::ArgumentCoder<WTF::RefPtr<WebCore::PathOperation,WTF::RawPtrTraits<WebCore::PathOperation>,WTF::DefaultRefDerefTraits<WebCore::PathOperation>>,void>::encode<IPC::Encoder,WebCore::PathOperation>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *result;

  v4 = *a2;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    return (char *)IPC::ArgumentCoder<WebCore::PathOperation,void>::encode(a1, *a2);
  }
  else
  {
    *result = 0;
  }
  return result;
}

void WebKit::WebSWServerConnection::didReceiveMessage(WebKit::WebSWServerConnection *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  void *v5;
  char v6;
  __int128 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;
  __int128 v23;
  char v24;
  WTF::StringImpl *v25;
  char v26;
  uint64_t v27[2];
  char v28;
  int v29;
  _BYTE v30[24];
  int v31;
  _OWORD v32[2];
  __int16 v33;
  WTF::StringImpl *v34;
  __int128 v35;
  __int128 v36;
  WTF::StringImpl *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD v44[2];
  __int128 v45;
  WTF::StringImpl *v46;
  char v47;
  _BYTE v48[32];
  uint64_t v49;
  char v50;
  _OWORD v51[2];
  __int16 v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  WTF::StringImpl *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  switch(*((_WORD *)a3 + 25))
  {
    case 0xAA1:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::AbortBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAA2:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v21)
        WebCore::SWServer::Connection::addServiceWorkerRegistrationInServer();
      break;
    case 0xAA3:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::BackgroundFetchIdentifiers,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAA4:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::BackgroundFetchInformation,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAA5:
      IPC::handleMessage<Messages::WebSWServerConnection::DidResolveRegistrationPromise,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::ServiceWorkerRegistrationKey const&)>((uint64_t *)a3, this);
      break;
    case 0xAA6:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::DisableNavigationPreload,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAA7:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::EnableNavigationPreload,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAA8:
      IPC::handleMessage<Messages::WebSWServerConnection::FinishFetchingScriptInServer,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::ServiceWorkerJobDataIdentifier const&,WebCore::ServiceWorkerRegistrationKey const&,WebCore::WorkerFetchResult &&)>((uint64_t *)a3);
      break;
    case 0xAA9:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::NavigationPreloadState,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAAA:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, this);
      break;
    case 0xAAB:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, this);
      break;
    case 0xAAC:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::GetRegistrations,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAAD:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::MatchBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAAE:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::MatchRegistration,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)>(a2, (uint64_t *)a3, this);
      break;
    case 0xAAF:
      IPC::handleMessage<Messages::WebSWServerConnection::PostMessageToServiceWorker,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAB0:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, v48);
      if (v50)
      {
        IPC::Decoder::decode<WebCore::ServiceWorkerClientData>((uint64_t *)a3, v51);
        if (v65
          && (IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, &v23), v24))
        {
          IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v25);
          v6 = v26;
          if (v26)
          {
            if (!v50 || !v65 || !v24)
            {
              __break(1u);
              goto LABEL_34;
            }
            LOBYTE(v27[0]) = 0;
            v29 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v27, (uint64_t)v48);
            v30[0] = 0;
            v31 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v30, (uint64_t)&v49);
            v32[0] = v51[0];
            v32[1] = v51[1];
            v33 = v52;
            v7 = v54;
            LODWORD(v54) = v54 & 0xFFFFFFFE;
            v8 = v53;
            v9 = v56;
            v53 = 0;
            v35 = v7;
            v36 = v55;
            v56 = 0;
            v34 = v8;
            v37 = v9;
            v38 = v57;
            v39 = v58;
            LODWORD(v57) = v57 & 0xFFFFFFFE;
            v42 = v61;
            v41 = v60;
            v40 = v59;
            v10 = v63;
            v63 = 0;
            v43 = v62;
            v44[0] = v10;
            *(_QWORD *)&v7 = v64;
            v64 = 0;
            v44[1] = v7;
            v45 = v23;
            v6 = 1;
            v46 = v25;
          }
          else
          {
            LOBYTE(v27[0]) = 0;
          }
          v47 = v6;
        }
        else
        {
          LOBYTE(v27[0]) = 0;
          v47 = 0;
        }
        std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51, v5);
      }
      else
      {
        LOBYTE(v27[0]) = 0;
        v47 = 0;
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v48);
      if (v47
        || (v17 = *(_QWORD *)a3,
            v18 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v19 = *((_QWORD *)a3 + 3)) != 0)
        && v18
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17), v47))
      {
        WebKit::WebSWServerConnection::registerServiceWorkerClient((uint64_t)this, (WebCore::SecurityOriginData *)v27, (uint64_t)v32, (uint64_t)&v45, (uint64_t)&v46);
        if (v47)
        {
          v12 = v46;
          v46 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v11);
            else
              *(_DWORD *)v12 -= 2;
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v11);
          v14 = v37;
          v37 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v34;
          v34 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v13);
            else
              *(_DWORD *)v15 -= 2;
          }
          if (v31 != -1)
            ((void (*)(_OWORD *, _BYTE *))off_1E3506090[v31])(v51, v30);
          v31 = -1;
          if (v29 != -1)
            ((void (*)(_OWORD *, uint64_t *))off_1E3506090[v29])(v51, v27);
        }
      }
      break;
    case 0xAB1:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v22)
        WebCore::SWServer::Connection::removeServiceWorkerRegistrationInServer();
      break;
    case 0xAB2:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ResourceResponse,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAB3:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v27, (uint64_t *)a3);
      if (v28)
        WebKit::WebSWServerConnection::retrieveRecordResponseBody((uint64_t)this, v27[0], v27[1]);
      break;
    case 0xAB4:
      IPC::Decoder::decode<std::tuple<WebCore::ServiceWorkerJobData>>((uint64_t)v27, (uint64_t *)a3);
      if ((_BYTE)v46)
      {
        WebKit::WebSWServerConnection::scheduleJobInServer((uint64_t)this, (uint64_t)v27);
        if ((_BYTE)v46)
          WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)v27, v20);
      }
      break;
    case 0xAB5:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAB6:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::SetNavigationPreloadHeaderValue,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAB7:
LABEL_34:
      v16 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v16 >= 0x100u)
        WebKit::WebSWServerConnection::setThrottleState(this, v16 != 0);
      break;
    case 0xAB8:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAB9:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::StoreRegistrationsOnDisk,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xABA:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xABB:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::TerminateWorkerFromClient,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xABC:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::UUID>>>((uint64_t *)a3, (uint64_t)v27);
      if (v30[0])
        WebKit::WebSWServerConnection::unregisterServiceWorkerClient((uint64_t)this, v27);
      break;
    case 0xABD:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::UnsubscribeFromPushService,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, this);
      break;
    case 0xABE:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::WhenRegistrationReady,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xABF:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::WhenServiceWorkerIsTerminatedForTesting,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    default:
      return;
  }
}

WebKit::AuxiliaryProcess *WebKit::AuxiliaryProcess::didReceiveMessage(WebKit::AuxiliaryProcess *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::AuxiliaryProcess *v3;

  v3 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 3:
      this = (WebKit::AuxiliaryProcess *)IPC::handleMessageAsync<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD **))WebKit::AuxiliaryProcess::mainThreadPing, 0);
      break;
    case 4:
      this = IPC::handleMessage<Messages::AuxiliaryProcess::PreferenceDidUpdate,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::String const&,WTF::String const&,std::optional<WTF::String> const&)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))0x40, 1);
      break;
    case 5:
      this = IPC::handleMessage<Messages::AuxiliaryProcess::PreferencesDidUpdate,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **))WebKit::AuxiliaryProcess::preferencesDidUpdate, 0);
      break;
    case 6:
      this = (WebKit::AuxiliaryProcess *)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if ((unsigned __int16)this >= 0x100u)
        this = (WebKit::AuxiliaryProcess *)WebKit::AuxiliaryProcess::setProcessSuppressionEnabled(v3, this != 0);
      break;
    case 7:
      this = (WebKit::AuxiliaryProcess *)WebKit::AuxiliaryProcess::shutDown(this);
      break;
    default:
      return this;
  }
  return this;
}

void WebKit::GPUProcessProxy::didReceiveMessage(WebKit::GPUProcessProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unint64_t v8;
  char v9;
  uint64_t v10[2];
  unsigned int v11;
  char v12;

  v4 = (unsigned int *)((char *)this + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  switch(*((_WORD *)a3 + 25))
  {
    case '8':
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>>((uint64_t *)a3, v10);
      if (v12)
        WebKit::GPUProcessProxy::didCreateContextForVisibilityPropagation((uint64_t)this, v10[0], v10[1], v11);
      break;
    case '9':
      WebKit::GPUProcessProxy::processIsReadyToExit(this);
      break;
    case ':':
      v6 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v6 >= 0x100u)
        WebKit::GPUProcessProxy::s_hasAV1HardwareDecoder = (v6 != 0) | 0x100;
      break;
    case ';':
      v7 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v7 >= 0x100u)
        WebKit::GPUProcessProxy::s_hasVP9HardwareDecoder = (v7 != 0) | 0x100;
      break;
    case '<':
      IPC::handleMessageAsync<Messages::GPUProcessProxy::StatusBarWasTapped,WebKit::GPUProcessProxy,WebKit::GPUProcessProxy,void ()(WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD **))WebKit::GPUProcessProxy::statusBarWasTapped, 0);
      break;
    case '=':
      v8 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v9)
        WebKit::GPUProcessProxy::terminateWebProcess((uint64_t)this, v8);
      break;
    default:
      break;
  }
  if (this)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

void WebKit::NetworkProcessConnection::didReceiveNetworkProcessConnectionMessage(WebKit::NetworkProcessConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t *v4;
  unsigned __int16 v5;
  char v6;
  unsigned __int16 v7;
  char v8;
  unsigned __int8 **v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  void *v15;
  unint64_t v16;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  const void *v28;
  char v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int16 v33;
  char v34;
  WebKit::WebProcess *v35;
  uint64_t v36;
  CFTypeRef v37;
  CFTypeRef v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  CFTypeRef v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebKit::WebProcess *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48[2];
  __int128 v49;
  __int128 v50;
  WTF::StringImpl *v51;
  int v52;
  __int16 v53;
  CFTypeRef v54;
  char v55;
  _BYTE v56[17];
  CFTypeRef cf;
  _BYTE v58[24];
  char v59;
  CFTypeRef v60;
  char v61;
  _BYTE v62[32];
  __int128 v63;
  WTF::StringImpl *v64;
  int v65;
  __int16 v66;
  const void *v67;
  char v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  WTF::StringImpl *v73;
  int v74;
  __int16 v75;
  const void *v76;
  char v77;
  char v78;
  char v79;
  char v80;

  ++*((_DWORD *)this + 4);
  v4 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x11F:
      WebKit::NetworkProcessConnection::allCookiesDeleted(this);
      goto LABEL_85;
    case 0x120:
      v5 = IPC::Decoder::decode<JSC::MessageSource>((uint64_t *)a3);
      if (v5 < 0x100u)
        goto LABEL_53;
      v6 = v5;
      v7 = IPC::Decoder::decode<JSC::MessageLevel>(v4);
      if (v7 < 0x100u)
        goto LABEL_53;
      v8 = v7;
      IPC::Decoder::decode<WTF::String>(v4, &v70);
      if (!BYTE8(v70))
        goto LABEL_53;
      BYTE1(v47) = v8;
      v48[0] = (WTF::StringImpl *)v70;
      LOBYTE(v47) = v6;
      LOBYTE(v48[1]) = 1;
      WebKit::NetworkProcessConnection::broadcastConsoleMessage((uint64_t)this, v6, v8, (uint64_t)v48);
      if (LOBYTE(v48[1]))
        goto LABEL_73;
      goto LABEL_85;
    case 0x121:
      v9 = (unsigned __int8 **)a2;
      IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>>((uint64_t *)a3, &v47);
      if (BYTE8(v49))
      {
        v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
        if ((_BYTE)a2)
        {
          *(_QWORD *)&v70 = v10;
          v4 = (uint64_t *)&v70 + 1;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v70 + 1, v9);
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v11 = off_1E34B0D38;
          v11[1] = v70;
          v12 = *((_QWORD *)&v70 + 1);
          *((_QWORD *)&v70 + 1) = 0;
          v11[2] = v12;
          *(_QWORD *)v62 = v11;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v70 + 1);
          if (!BYTE8(v49))
            goto LABEL_89;
          WebKit::NetworkProcessConnection::connectToRTCDataChannelRemoteSource(this, (uint64_t)v47, (uint64_t)v48[0], (uint64_t)v48[1], v49, (uint64_t *)v62);
          v13 = *(_QWORD *)v62;
          *(_QWORD *)v62 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
      }
      goto LABEL_85;
    case 0x122:
      v14 = IPC::Decoder::decode<std::tuple<WebCore::HTTPCookieAcceptPolicy>>((uint64_t *)a3);
      if (v14 >= 0x100u)
        WebKit::NetworkProcessConnection::cookieAcceptPolicyChanged((uint64_t)this, v14);
      goto LABEL_85;
    case 0x123:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v47, (uint64_t *)a3);
      if ((_BYTE)v49)
        WebKit::NetworkProcessConnection::cookiesAdded((uint64_t)this, &v47, (const WTF::StringImpl *)v48);
      goto LABEL_19;
    case 0x124:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v47, (uint64_t *)a3);
      if ((_BYTE)v49)
        WebKit::NetworkProcessConnection::cookiesDeleted((uint64_t)this, &v47, (const WTF::StringImpl *)v48);
LABEL_19:
      std::__optional_destruct_base<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v15);
      goto LABEL_85;
    case 0x125:
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)a3, (uint64_t)&v70);
      if (v79 && (IPC::Decoder::decode<WebCore::ShareableResourceHandle>((IPC::Decoder *)v4, (uint64_t)v62), v62[24]))
      {
        if (!v79)
          goto LABEL_89;
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v47, (uint64_t)&v70);
        WTF::MachSendRight::MachSendRight();
        *(_OWORD *)&v58[8] = *(_OWORD *)&v62[8];
        v59 = 1;
        if (v62[24])
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v62);
      }
      else
      {
        LOBYTE(v47) = 0;
        v59 = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v70);
      if (!v59)
      {
        a2 = (IPC::Connection *)*v4;
        a3 = (IPC::Decoder *)v4[1];
        *v4 = 0;
        v4[1] = 0;
        v45 = v4[3];
        if (!v45)
          goto LABEL_85;
        if (!a3)
          goto LABEL_85;
        (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v45 + 16))(v45, a2);
        if (!v59)
          goto LABEL_85;
      }
      WebKit::NetworkProcessConnection::didCacheResource(this);
      if (!v59)
        goto LABEL_85;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v58);
      goto LABEL_82;
    case 0x126:
      v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v17)
        goto LABEL_90;
      v18 = (WTF::StringImpl *)v16;
      IPC::Decoder::decode<WebCore::ResourceError>(v4, (uint64_t)v62);
      if (v69)
      {
        IPC::Decoder::decode<WebCore::ResourceResponse>(v4, &v70);
        v21 = v80;
        if (v80)
        {
          if (!v69)
            goto LABEL_89;
          v47 = v18;
          v22 = *(_OWORD *)v62;
          *(_OWORD *)v62 = 0uLL;
          *(_OWORD *)v48 = v22;
          v49 = *(_OWORD *)&v62[16];
          v50 = v63;
          *(_DWORD *)&v62[16] &= ~1u;
          v51 = v64;
          v52 = v65;
          v53 = v66;
          v54 = v67;
          v55 = v68;
          v64 = 0;
          v67 = 0;
          std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v56, (uint64_t)&v70);
          v21 = 1;
        }
        else
        {
          LOBYTE(v47) = 0;
        }
        v61 = v21;
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v70, v20);
      }
      else
      {
        LOBYTE(v47) = 0;
        v61 = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v19);
      if (v61)
        goto LABEL_59;
      goto LABEL_91;
    case 0x127:
      v23 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v24)
        goto LABEL_53;
      v25 = (WTF::StringImpl *)v23;
      IPC::Decoder::decode<WebCore::ResourceError>(v4, (uint64_t)&v70);
      if (v78)
      {
        v47 = v25;
        v27 = v70;
        v70 = 0uLL;
        *(_OWORD *)v48 = v27;
        v49 = v71;
        v50 = v72;
        LODWORD(v71) = v71 & 0xFFFFFFFE;
        v51 = v73;
        v52 = v74;
        v53 = v75;
        v28 = v76;
        v73 = 0;
        v76 = 0;
        v54 = v28;
        v55 = v77;
        v56[0] = 1;
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v70, v26);
        WebKit::NetworkProcessConnection::didFinishPreconnection((uint64_t)this, (uint64_t)v25, (uint64_t)v48);
        if (v56[0])
          goto LABEL_63;
      }
      else
      {
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v70, v26);
LABEL_53:
        a2 = (IPC::Connection *)*v4;
        a3 = (IPC::Decoder *)v4[1];
        *v4 = 0;
        v4[1] = 0;
        v36 = v4[3];
        if (v36 && a3)
          (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v36 + 16))(v36, a2);
      }
      goto LABEL_85;
    case 0x128:
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)a3, (uint64_t)&v70);
      if (!v79)
      {
        LOBYTE(v47) = 0;
        v59 = 0;
        goto LABEL_80;
      }
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v4, (uint64_t)v62);
      v29 = v62[16];
      if (!v62[16])
        goto LABEL_78;
      v30 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
      if (!v31)
      {
        v29 = 0;
LABEL_78:
        LOBYTE(v47) = 0;
LABEL_79:
        v59 = v29;
LABEL_80:
        std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v70);
        if (v59
          || (a2 = (IPC::Connection *)*v4, a3 = (IPC::Decoder *)v4[1], *v4 = 0, v4[1] = 0, (v44 = v4[3]) != 0)
          && a3
          && ((*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v44 + 16))(v44, a2), v59))
        {
          WebKit::NetworkProcessConnection::loadCancelledDownloadRedirectRequestInFrame((uint64_t)this, (WebCore::ResourceRequestBase *)&v47, *(uint64_t *)v58, *(uint64_t *)&v58[8], *(uint64_t *)&v58[16]);
          if (v59)
          {
LABEL_82:
            v42 = cf;
            cf = 0;
            if (v42)
              CFRelease(v42);
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v47);
          }
        }
        goto LABEL_85;
      }
      if (v79 && v62[16])
      {
        v32 = v30;
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v47, (uint64_t)&v70);
        *(_OWORD *)v58 = *(_OWORD *)v62;
        *(_QWORD *)&v58[16] = v32;
        v29 = 1;
        goto LABEL_79;
      }
LABEL_89:
      __break(1u);
LABEL_90:
      LOBYTE(v47) = 0;
      v61 = 0;
LABEL_91:
      a2 = (IPC::Connection *)*v4;
      a3 = (IPC::Decoder *)v4[1];
      *v4 = 0;
      v4[1] = 0;
      v43 = v4[3];
      if (v43)
      {
        if (a3)
        {
          (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v43 + 16))(v43, a2);
          if (v61)
          {
LABEL_59:
            WebKit::NetworkProcessConnection::didFinishPingLoad((uint64_t)this, (uint64_t)v47, (uint64_t)v48, (uint64_t)v56);
            if (v61)
            {
              v37 = v60;
              v60 = 0;
              if (v37)
                CFRelease(v37);
              WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v56, a2);
LABEL_63:
              v38 = v54;
              v54 = 0;
              if (v38)
                CFRelease(v38);
              v39 = v51;
              v51 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, a2);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = v48[1];
              v48[1] = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, a2);
                else
                  *(_DWORD *)v40 -= 2;
              }
LABEL_73:
              v41 = v48[0];
              v48[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, a2);
                else
                  *(_DWORD *)v41 -= 2;
              }
            }
          }
        }
      }
LABEL_85:
      if (*((_DWORD *)this + 4) == 1)
        (*(void (**)(WebKit::NetworkProcessConnection *, IPC::Connection *, IPC::Decoder *))(*(_QWORD *)this + 8))(this, a2, a3);
      else
        --*((_DWORD *)this + 4);
      return;
    case 0x129:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)a3, (uint64_t)&v47);
      if (LOBYTE(v48[1]))
        WebKit::NetworkProcessConnection::messagesAvailableForPort();
      goto LABEL_85;
    case 0x12A:
      v33 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v33 >= 0x100u)
      {
        v34 = v33;
        {
          v35 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v46 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v35 = WebKit::WebProcess::WebProcess(v46);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v35;
        }
        WebKit::WebLoaderStrategy::setOnLineState(*((_QWORD *)v35 + 40), v34 != 0);
      }
      goto LABEL_85;
    case 0x12B:
      WebKit::NetworkProcessConnection::updateCachedCookiesEnabled(this);
      goto LABEL_85;
    default:
      goto LABEL_85;
  }
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t WebKit::WebLoaderStrategy::setOnLineState(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(unsigned __int8 *)(this + 112) != (_DWORD)a2)
  {
    *(_BYTE *)(this + 112) = a2;
    v3 = *(unsigned int *)(this + 92);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)(this + 80);
      v5 = 8 * v3;
      do
      {
        v6 = *v4++;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return this;
}

void WebKit::PageClientImpl::didCreateContextInGPUProcessForVisibilityPropagation(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_gpuProcessDidCreateContextForVisibilityPropagation");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196CF57E8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

dispatch_queue_t ___ZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyE_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("MediaAccessibility queue", 0);
  qword_1EE341868 = (uint64_t)result;
  return result;
}

unsigned int *WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int **v4;
  uint64_t v5;
  unsigned int **v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *v10;

  v2 = result;
  v4 = *(unsigned int ***)result;
  v5 = result[3];
  if ((_DWORD)v5)
  {
    v6 = &v4[v5];
    do
    {
      WTF::String::isolatedCopy();
      v8 = (unsigned int *)v10;
      v10 = 0;
      result = *v4;
      *v4 = v8;
      if (result)
      {
        if (*result == 2)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
          result = 0;
          v10 = 0;
        }
        else
        {
          *result -= 2;
        }
      }
      ++v4;
    }
    while (v4 < v6);
    v4 = *(unsigned int ***)v2;
    LODWORD(v5) = v2[3];
  }
  *(_QWORD *)a2 = v4;
  v9 = v2[2];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_DWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebKit::WebURLSchemeHandlerProxy *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WebKit::WebURLSchemeHandlerProxy *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebKit::WebURLSchemeHandlerProxy *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (WTF::StringImpl **)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = *((_DWORD *)v13 + 4);
          if (v18 >= 0x100)
            v19 = v18 >> 8;
          else
            v19 = WTF::StringImpl::hashSlowCase(v13);
          v20 = 0;
          do
          {
            v21 = v19 & v17;
            v19 = ++v20 + v21;
          }
          while (*(_QWORD *)(v16 + 16 * v21));
          v22 = (WTF::StringImpl **)(v16 + 16 * v21);
          v23 = v22[1];
          v22[1] = 0;
          if (v23)
          {
            WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v23, v9);
            v24 = *v22;
            *v22 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v9);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          else
          {
            *v22 = 0;
          }
          v25 = *v12;
          *v12 = 0;
          *v22 = v25;
          v26 = v4 + 16 * v10;
          v27 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v22[1] = v27;
          v28 = *(WebKit::WebURLSchemeHandlerProxy **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
            WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v28, v9);
          v29 = *v12;
          *v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v12 == a2)
            v11 = v22;
        }
        else
        {
          v14 = v4 + 16 * v10;
          v15 = *(WebKit::WebURLSchemeHandlerProxy **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v15, v9);
            v13 = *v12;
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

void WebKit::WebChromeClient::clearPlaybackControlsManager(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  CFTypeRef *v2;
  IPC::Encoder *v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = (CFTypeRef *)(v1 - 16);
  else
    v2 = 0;
  CFRetain(v2[1]);
  v3 = WebKit::WebPage::playbackSessionManager((WebKit::WebPage *)v2);
  WebKit::PlaybackSessionManager::clearPlaybackControlsManager(v3);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

WebKit::PlaybackSessionManager *WebKit::WebPage::playbackSessionManager(WebKit::WebPage *this)
{
  WebKit::PlaybackSessionManager *result;
  _DWORD *v3;
  WebKit::PlaybackSessionManager *v4;

  result = (WebKit::PlaybackSessionManager *)*((_QWORD *)this + 62);
  if (!result)
  {
    WebKit::PlaybackSessionManager::create(this, &v4);
    result = v4;
    v3 = (_DWORD *)*((_QWORD *)this + 62);
    *((_QWORD *)this + 62) = v4;
    if (v3)
    {
      if (v3[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        return (WebKit::PlaybackSessionManager *)*((_QWORD *)this + 62);
      }
      else
      {
        --v3[4];
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::PlaybackSessionManager::clearPlaybackControlsManager(IPC::Encoder *this)
{
  uint64_t v1;
  IPC::Encoder *v2;
  uint64_t v3;
  uint64_t v4;
  WebKit::WebPage *v5;
  WebKit::WebFullScreenManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v17;

  v1 = *((_QWORD *)this + 7);
  if (v1)
  {
    v2 = this;
    WebKit::PlaybackSessionManager::removeClientForContext((uint64_t)this, v1);
    *((_QWORD *)v2 + 7) = 0;
    v3 = *((_QWORD *)v2 + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        v5 = (WebKit::WebPage *)(v4 - 16);
      else
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
    v6 = WebKit::WebPage::fullScreenManager(v5);
    if (v6)
      WebKit::WebFullScreenManager::videoControlsManagerDidChange(v6);
    v7 = *((_QWORD *)v2 + 3);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v9 = v8 - 16;
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    v11 = *(_QWORD *)(v9 + 32);
    v10 = v9 + 32;
    v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 607;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v17 = (IPC::Encoder *)v13;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v10 + 32))(v10, &v17, 0);
    this = v17;
    v17 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v14);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return this;
}

void sub_196CF5CCC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidCommitLoad(uint64_t a1, __int16 a2, __int16 a3, __int16 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  WebKit::WebFrame *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebKit::WebFrame *v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  CFTypeRef *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  CFTypeRef *v28;
  WTF::StringImpl *v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef *v32;
  BOOL v33;
  BOOL v34;
  WebKit::WebProcess *v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char Type;
  char v41;
  char v42;
  CFTypeRef *v43;
  CFTypeRef *v44;
  __int128 v45;
  CFTypeRef v46;
  void *v47;
  IPC::Encoder *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  CFTypeRef cf;
  uint64_t v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (!v8)
    return;
  v9 = v8;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 280) + 88);
  ++*(_DWORD *)(v10 + 24);
  v47 = 0;
  (*(void (**)(_QWORD, uint64_t, _QWORD, void **))(**(_QWORD **)(v9 + 360) + 56))(*(_QWORD *)(v9 + 360), v9, *(_QWORD *)(a1 + 16), &v47);
  WebKit::WebPage::SandboxExtensionTracker::didCommitProvisionalLoad((const char ***)(v9 + 688), *(WebKit::WebFrame **)(a1 + 16));
  if ((*(_BYTE *)(v10 + 1410) & 0x10) != 0)
  {
    v33 = 1;
  }
  else
  {
    if ((a3 & 0xFF00) == 0)
    {
      v37 = 0;
      goto LABEL_5;
    }
    v33 = a3 != 0;
  }
  v37 = v33;
LABEL_5:
  if ((*(_BYTE *)(v10 + 1410) & 0x20) != 0)
  {
    v34 = 1;
  }
  else
  {
    if ((a4 & 0xFF00) == 0)
    {
      v36 = 0;
      goto LABEL_8;
    }
    v34 = a4 != 0;
  }
  v36 = v34;
LABEL_8:
  if (*(_BYTE *)(v10 + 1400) && (v11 = *(const void **)(v10 + 1392)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v10 + 1392));
    v46 = v11;
    CFRetain(v11);
    CFRelease(v11);
  }
  else
  {
    v46 = 0;
  }
  if ((a2 & 0xFF00) != 0)
    v42 = a2 != 0;
  else
    v42 = WebCore::CertificateInfo::containsNonRootSHA1SignedCertificate((WebCore::CertificateInfo *)&v46);
  v12 = *(_QWORD *)(v9 + 632);
  if (v12)
  {
    ++*(_DWORD *)(v12 + 16);
    v13 = *(WebKit::WebFrame **)(a1 + 16);
    WebKit::WebFrame::url(v13, (uint64_t)&v49);
    WebKit::WebExtensionControllerProxy::didCommitLoadForFrame((_QWORD *)v12, (WebKit::WebPage *)v9, v13, (const WTF::URL *)&v49);
    v15 = v49;
    v49 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v12 + 16));
  }
  WebKit::WebFrame::commitProvisionalFrame(*(unsigned int **)(a1 + 16));
  v16 = *(WebKit::WebFrame **)(a1 + 16);
  v45 = *((_OWORD *)v16 + 5);
  WebKit::WebFrame::info(v16, (uint64_t)&v49);
  v38 = *(_QWORD *)(v10 + 2528);
  v17 = (uint64_t *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v10 + 1272));
  v39 = *(_BYTE *)(a1 + 50);
  Type = WebCore::FrameLoader::loadType(*(WebCore::FrameLoader **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 280));
  v18 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 296) + 3358);
  v41 = WebCore::DocumentLoader::mouseEventPolicy((WebCore::DocumentLoader *)v10);
  {
    v35 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v35);
  }
  v19 = v9 + 32;
  v48 = (IPC::Encoder *)&off_1E34E0698;
  WebKit::UserData::transform(v47, (uint64_t)&v48, (WebKit **)&v43);
  v20 = v43;
  if (v43)
    CFRetain(v43[1]);
  v44 = v20;
  v21 = (v18 >> 3) & 1;
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 56))(v9 + 32);
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 1872;
  *(_QWORD *)(v23 + 8) = v22;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v48 = (IPC::Encoder *)v23;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v23, (uint64_t *)&v45);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v23, (char *)&v49);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v23, (WebCore::ResourceRequest *)(v10 + 872));
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = v38;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v23, v17);
  *IPC::Encoder::grow((IPC::Encoder *)v23, 1uLL, 1) = v39;
  *IPC::Encoder::grow((IPC::Encoder *)v23, 1uLL, 1) = Type;
  IPC::ArgumentCoder<__SecTrust *,void>::encode(v23);
  *IPC::Encoder::grow((IPC::Encoder *)v23, 1uLL, 1) = v37;
  *IPC::Encoder::grow((IPC::Encoder *)v23, 1uLL, 1) = v36;
  *IPC::Encoder::grow((IPC::Encoder *)v23, 1uLL, 1) = v21;
  *IPC::Encoder::grow((IPC::Encoder *)v23, 1uLL, 1) = v42;
  *IPC::Encoder::grow((IPC::Encoder *)v23, 1uLL, 1) = v41;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v23, (uint64_t *)&v44);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v19 + 32))(v9 + 32, &v48, 0);
  v25 = v48;
  v48 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v24);
    WTF::fastFree(v26, v27);
  }
  if (v20)
    CFRelease(v20[1]);
  v28 = v43;
  v43 = 0;
  if (v28)
    CFRelease(v28[1]);
  v29 = v54;
  v54 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (v53 != -1)
    ((void (*)(IPC::Encoder **, uint64_t *))off_1E34EF818[v53])(&v48, &v52);
  v53 = -1;
  v30 = cf;
  cf = 0;
  if (v30)
    CFRelease(v30);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v50);
  WebKit::WebPage::didCommitLoad((WebKit::WebPage *)v9, *(WebKit::WebFrame **)(a1 + 16));
  v31 = v46;
  v46 = 0;
  if (v31)
    CFRelease(v31);
  v32 = (CFTypeRef *)v47;
  v47 = 0;
  if (v32)
    CFRelease(v32[1]);
  if (*(_DWORD *)(v10 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  else
    --*(_DWORD *)(v10 + 24);
  CFRelease(*(CFTypeRef *)(v9 + 8));
}

const char ***WebKit::WebPage::SandboxExtensionTracker::didCommitProvisionalLoad(const char ***this, WebKit::WebFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  const char ***v4;
  const char **v5;
  const char **v6;

  v2 = *((_QWORD *)a2 + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3)
      {
        v4 = this;
        this = (const char ***)this[2];
        if (this)
        {
          WebKit::SandboxExtension::revoke((WebKit::SandboxExtension *)this);
          v6 = v4[1];
          this = (const char ***)v4[2];
          v4[1] = 0;
          v4[2] = v6;
          if (this)
            return WTF::RefCounted<WebKit::SandboxExtension>::deref(this);
        }
        else
        {
          v5 = v4[1];
          v4[1] = 0;
          v4[2] = v5;
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPage::didCommitLoad(WebKit::WebPage *this, WebKit::WebFrame *a2)
{
  WebKit::WebPage *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Frame *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Node *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  WebCore::TemporarySelectionChange *v32;
  WTF *v33;
  void *v34;
  WebKit::WebProcess *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  WebCore::LocalFrame *shouldIgnoreMetaViewport;
  int v43;
  BOOL v44;
  int v45;
  char v46;
  uint64_t IsKnownToLayOutWiderThanViewport;
  uint64_t v48;
  uint64_t v49;
  WebKit::WebProcess *v50;
  uint64_t v51;
  _DWORD *v52;
  int v53;
  NSObject *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  IPC::Encoder *v62;
  WTF *v63;
  void *v64;
  WebKit::WebProcess *v65;
  WebKit::WebProcess *v66;
  WebKit::WebProcess *v67;
  WebCore::Node *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE buf[12];
  __int16 v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 9);
  if (*(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    goto LABEL_99;
  }
  v2 = this;
  v7 = *(_QWORD *)(v5 + 248) + 1;
  *((_QWORD *)a2 + 12) = v7;
  result = WebKit::WebPage::cancelPotentialTapInFrame(this, a2);
  v9 = *((_QWORD *)v2 + 115);
  if (v9)
  {
    v10 = *((_QWORD *)a2 + 3);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        if (*(_QWORD *)(*(_QWORD *)(v11 + 128) + 8) == v11)
          goto LABEL_93;
      }
    }
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 528);
    if (v12)
      v12 = *(_QWORD *)(v12 + 8);
    if (v10)
    {
      v10 = *(_QWORD *)(v10 + 8);
      if (v10)
      {
        if (*(_BYTE *)(v10 + 144))
          v10 = 0;
      }
    }
    if (v12 == v10)
    {
LABEL_93:
      v58 = *((_QWORD *)v2 + 4);
      *((_BYTE *)v2 + 1680) = 0;
      v59 = (*(uint64_t (**)(uint64_t))(v58 + 56))((uint64_t)v2 + 32);
      v60 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v60 = 1929;
      *(_QWORD *)(v60 + 8) = v59;
      *(_QWORD *)(v60 + 528) = v60 + 16;
      *(_QWORD *)(v60 + 536) = v60 + 16;
      *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v60 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
      v68 = (WebCore::Node *)v60;
      (*(void (**)(uint64_t, WebCore::Node **, _QWORD))(*((_QWORD *)v2 + 4) + 32))((uint64_t)v2 + 32, &v68, 0);
      v62 = v68;
      v68 = 0;
      if (v62)
      {
        IPC::Encoder::~Encoder(v62, v61);
        WTF::fastFree(v63, v64);
      }
      result = *((_QWORD *)v2 + 115);
      *((_QWORD *)v2 + 115) = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
    }
  }
  v13 = *((_QWORD *)a2 + 3);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14 && *(_QWORD *)(*(_QWORD *)(v14 + 128) + 8) == v14)
    {
      *((_BYTE *)v2 + 2336) = 0;
    }
    else if (*((_BYTE *)v2 + 2336))
    {
      v15 = *(_BYTE *)(v14 + 144) ? 0 : *(WebCore::Frame **)(v13 + 8);
      result = (uint64_t)WebKit::WebPage::startTextManipulationForFrame((unsigned int *)v2, v15);
      v13 = *((_QWORD *)a2 + 3);
      if (!v13)
        return result;
    }
    result = *(_QWORD *)(v13 + 8);
    if (!result)
      return result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if (!(_DWORD)result)
      return result;
    v16 = *((_QWORD *)v2 + 9);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16);
    WebKit::WebPage::unfreezeLayerTree((uint64_t)v2, 32);
    v18 = *((_DWORD *)v2 + 603);
    if (v18)
    {
      v19 = *((_QWORD *)v2 + 300);
      v20 = v19 + 24 * v18;
      do
      {
        v21 = *(unsigned int *)(v19 + 20);
        if ((_DWORD)v21)
        {
          v22 = *(uint64_t **)(v19 + 8);
          v23 = 8 * v21;
          do
          {
            v68 = 0;
            v24 = *v22;
            *v22 = 0;
            (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v24 + 16))(v24, &v68);
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            v25 = v68;
            v68 = 0;
            if (v25)
            {
              if (*((_DWORD *)v25 + 6) == 2)
              {
                if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v25);
              }
              else
              {
                *((_DWORD *)v25 + 6) -= 2;
              }
            }
            ++v22;
            v23 -= 8;
          }
          while (v23);
        }
        v19 += 24;
      }
      while (v19 != v20);
    }
    WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::shrinkCapacity((uint64_t)v2 + 2400, v17);
    v27 = (WTF::StringImpl **)*((_QWORD *)v2 + 278);
    if (v27)
    {
      *((_QWORD *)v2 + 278) = 0;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v27, v26);
    }
    v28 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    v29 = *(unsigned __int8 *)(v28 + 144);
    if (*(_BYTE *)(v28 + 144))
      v30 = 0;
    else
      v30 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v30 + 280) + 360) & 1) != 0)
    {
      v68 = 0;
      v69 = 0;
      (*(void (**)(_QWORD, WebKit::WebPage *, WebCore::Node **))(**((_QWORD **)v2 + 45) + 256))(*((_QWORD *)v2 + 45), v2, &v68);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v31);
      v28 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
      v29 = *(unsigned __int8 *)(v28 + 144);
    }
    if (v29)
      v28 = 0;
    if (!WebCore::FrameLoader::loadType(*(WebCore::FrameLoader **)(v28 + 280)))
    {
      v37 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
      if (*(_BYTE *)(v37 + 144))
        v37 = 0;
      v38 = *(_QWORD *)(v37 + 24);
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 8);
        if (v39)
        {
          if (*(float *)(v39 + 356) != 1.0)
          {
            v68 = 0;
            WebKit::WebPage::scalePage(v2, 1.0, (const WebCore::IntPoint *)&v68);
          }
        }
      }
    }
    PAL::HysteresisActivity::cancel((WebKit::WebPage *)((char *)v2 + 736));
    *((_BYTE *)v2 + 2253) = 0;
    v32 = (WebCore::TemporarySelectionChange *)*((_QWORD *)v2 + 211);
    *((_QWORD *)v2 + 211) = 0;
    std::unique_ptr<WebCore::IgnoreSelectionChangeForScope>::reset[abi:sn180100]((uint64_t *)v2 + 211, 0);
    if (v32)
    {
      WebCore::TemporarySelectionChange::invalidate(v32);
      v33 = (WTF *)MEMORY[0x19AEB2B98](v32);
      WTF::fastFree(v33, v34);
    }
    *((_BYTE *)v2 + 1680) = 0;
    *((_QWORD *)v2 + 197) = v7;
    *((_DWORD *)v2 + 322) = 0;
    *((_QWORD *)v2 + 163) = 0x3F91111111111111;
    *((_BYTE *)v2 + 1294) = 1;
    if (*((_BYTE *)v2 + 1672))
      *((_BYTE *)v2 + 1672) = 0;
    v68 = (WebCore::Node *)&v70;
    v69 = 1;
    v4 = &_MergedGlobals_106;
    {
      v35 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v65 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v35 = WebKit::WebProcess::WebProcess(v65);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v35;
    }
    WebKit::EventDispatcher::takeQueuedTouchEventsForPage((uint64_t)v35 + 136, (uint64_t)v2, (uint64_t)&v68);
    WebKit::WebPage::cancelAsynchronousTouchEvents((uint64_t)v2, (unsigned int *)&v68);
    v36 = *((_QWORD *)a2 + 3);
    if (!v36)
      goto LABEL_58;
    v3 = *(_QWORD *)(v36 + 8);
    if (!v3)
      goto LABEL_67;
    if (!*(_BYTE *)(v3 + 144))
    {
      v40 = (unsigned int *)(v3 + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
    }
    else
    {
LABEL_58:
      v3 = 0;
    }
LABEL_67:
    WebKit::WebPage::resetViewportDefaultConfiguration(v2, a2, 0);
    shouldIgnoreMetaViewport = (WebCore::LocalFrame *)WebKit::WebPage::shouldIgnoreMetaViewport(v2);
    WebKit::setCanIgnoreViewportArgumentsToAvoidExcessiveZoomIfNeeded((_QWORD *)v2 + 118, (WebCore::ViewportConfiguration *)v3, shouldIgnoreMetaViewport);
    v43 = WebKit::WebPage::shouldIgnoreMetaViewport(v2);
    v44 = 0;
    if (v43)
      v44 = *((_BYTE *)v2 + 916) != 0;
    *((_BYTE *)v2 + 1179) = v44;
    *(_QWORD *)buf = WebCore::ScrollView::contentsSize(*(WebCore::ScrollView **)(v3 + 288));
    v45 = WebCore::ViewportConfiguration::setContentsSize((WebKit::WebPage *)((char *)v2 + 944), (const IntSize *)buf);
    WebCore::Document::viewportArguments(*(WebCore::Document **)(v3 + 296));
    v46 = WebCore::ViewportConfiguration::setViewportArguments();
    IsKnownToLayOutWiderThanViewport = WebCore::ViewportConfiguration::setIsKnownToLayOutWiderThanViewport((WebKit::WebPage *)((char *)v2 + 944));
    if ((IsKnownToLayOutWiderThanViewport & 1) != 0 || (v46 & 1) != 0 || v45)
      IsKnownToLayOutWiderThanViewport = (uint64_t)WebKit::WebPage::viewportConfigurationChanged((uint64_t)v2, 0);
    if ((*((_QWORD *)v2 + 274) & 0xFFFFFFFFFFFFLL) != 0)
      IsKnownToLayOutWiderThanViewport = WebCore::TimerBase::stopSlowCase((WebKit::WebPage *)((char *)v2 + 2160));
    WTF::WallTime::now((WTF::WallTime *)IsKnownToLayOutWiderThanViewport);
    *((_QWORD *)v2 + 255) = v48;
    v49 = *((_QWORD *)v2 + 287);
    *((_QWORD *)v2 + 287) = v49 & 0xFDFFFFFFFFFFFFLL;
    if ((v49 & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebKit::WebPage *)((char *)v2 + 2264));
    WebKit::WebPage::removeReasonsToDisallowLayoutViewportHeightExpansion((uint64_t)v2, *((unsigned __int8 *)v2 + 2257));
    if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) != v3)
      goto LABEL_89;
    {
      v50 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v67 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v50 = WebKit::WebProcess::WebProcess(v67);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v50;
    }
    v5 = *((unsigned __int8 *)v50 + 672);
    if (*((_BYTE *)v50 + 672))
    {
      v5 = *((_QWORD *)v50 + 83);
      if ((v5 & 0x8000000000000000) == 0)
        goto LABEL_82;
      goto LABEL_100;
    }
LABEL_99:
    __break(1u);
LABEL_100:
    if (v5 != -1)
    {
LABEL_89:
      *((_BYTE *)v2 + 937) = 1;
      WTF::RefPtr<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=((unsigned int **)v2 + 291, 0);
      if ((v4[2488] & 1) == 0)
      {
        v66 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v66);
        v4[2488] = 1;
      }
      WebKit::WebPage::updateMainFrameScrollOffsetPinning(v2);
      WebKit::WebPage::updateMockAccessibilityElementAfterCommittingLoad((id *)v2);
      WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)v2 + 2448, v56);
      WebKit::WebPage::flushDeferredDidReceiveMouseEvent((uint64_t)v2);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      return WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v57);
    }
LABEL_82:
    v51 = WebCore::Document::loader(*(WebCore::Document **)(v3 + 296));
    if (v51)
    {
      v52 = (_DWORD *)v51;
      v53 = *(_DWORD *)(v51 + 24);
      *(_DWORD *)(v51 + 24) = v53 + 1;
      if ((*(_WORD *)(v51 + 3514) & 1) != 0)
      {
        v54 = qword_1ECE70E70;
        if (os_log_type_enabled((os_log_t)qword_1ECE70E70, OS_LOG_TYPE_DEFAULT))
        {
          v55 = *((_QWORD *)v2 + 5);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v2;
          v72 = 2048;
          v73 = v55;
          _os_log_impl(&dword_196BCC000, v54, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::didCommitLoad: advanced privacy protections enabled in non-ephemeral session", buf, 0x16u);
          v53 = v52[6] - 1;
        }
      }
      if (v53)
        v52[6] = v53;
      else
        (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 24))(v52);
    }
    goto LABEL_89;
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::didChangeScrollOffset(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v6 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v6 + 1368))(v6) & 1) == 0)
          {
            v7 = *(_QWORD *)(v6[2] + 8);
            if (v7)
            {
              CFRetain(*(CFTypeRef *)(v7 - 8));
              v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
              if (*(_QWORD *)(*(_QWORD *)(v8 + 128) + 8) == v8)
              {
                if (*(_QWORD *)(v8 + 288))
                  WebKit::WebPage::updateMainFrameScrollOffsetPinning((WebKit::WebPage *)(v7 - 16));
              }
              CFRelease(*(CFTypeRef *)(v7 - 8));
            }
          }
        }
      }
    }
  }
}

_DWORD *WebKit::WebPage::updateMainFrameScrollOffsetPinning(WebKit::WebPage *this)
{
  _DWORD *result;
  _DWORD *v3;
  char *v4;
  int v5;

  result = (_DWORD *)WebKit::WebPage::localMainFrameView(this);
  if (result)
  {
    v3 = result;
    ++result[2];
    result = (_DWORD *)WebCore::ScrollableArea::edgePinnedState((WebCore::ScrollableArea *)(result + 16));
    v5 = (int)result;
    if ((_DWORD)result != *((_DWORD *)this + 212))
    {
      v4 = (char *)&v5;
      result = IPC::MessageSender::send<Messages::WebPageProxy::DidChangeScrollOffsetPinningForMainFrame>((uint64_t)this + 32, &v4);
      *((_DWORD *)this + 212) = v5;
    }
    if (v3[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return result;
}

void WebKit::WebChromeClient::didReceiveMobileDocType(WebKit::WebChromeClient *this, int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  *(_BYTE *)(v4 + 1696) = a2;
  WebKit::WebPage::resetViewportDefaultConfiguration((WebKit::WebPage *)v4, *(WebKit::WebFrame **)(v4 + 88), a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void sub_196CF6B50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::resetViewportDefaultConfiguration(WebKit::WebPage *this, WebKit::WebFrame *a2, int a3)
{
  WebCore::ViewportConfiguration *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v16;
  __int16 v17;
  WebCore::ViewportConfiguration *v18;
  int v19;
  int v20;
  __int16 v21;
  WebCore::ViewportConfiguration *shouldIgnoreMetaViewport;
  _BYTE v23[54];

  if (*((_BYTE *)this + 1192))
  {
    WebCore::ViewportConfiguration::testingParameters(this);
    v4 = (WebKit::WebPage *)((char *)this + 944);
    return (unsigned int *)WebCore::ViewportConfiguration::setDefaultConfiguration(v4, (const Parameters *)v23);
  }
  v6 = *((_QWORD *)a2 + 3);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(_BYTE *)(v7 + 144))
  {
    v7 = *((_QWORD *)a2 + 5);
    if (!v7)
    {
      if (*((_BYTE *)this + 568)
        || (shouldIgnoreMetaViewport = (WebCore::ViewportConfiguration *)WebKit::WebPage::shouldIgnoreMetaViewport(this),
            (_DWORD)shouldIgnoreMetaViewport))
      {
        WebCore::ViewportConfiguration::nativeWebpageParameters((WebKit::WebPage *)((char *)this + 944));
      }
      else
      {
        WebCore::ViewportConfiguration::webpageParameters(shouldIgnoreMetaViewport);
      }
      v4 = (WebKit::WebPage *)((char *)this + 944);
      return (unsigned int *)WebCore::ViewportConfiguration::setDefaultConfiguration(v4, (const Parameters *)v23);
    }
  }
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7 + 296);
  if (v10)
  {
    *(_DWORD *)(v10 + 24) += 4;
    if ((a3 & 1) != 0)
      goto LABEL_12;
    v17 = *(_WORD *)(v10 + 3358);
    if ((v17 & 4) != 0)
    {
      WebCore::ViewportConfiguration::imageDocumentParameters(this);
      WebCore::ViewportConfiguration::setDefaultConfiguration((WebKit::WebPage *)((char *)this + 944), (const Parameters *)v23);
      goto LABEL_27;
    }
    if ((v17 & 0x40) != 0)
    {
      WebCore::ViewportConfiguration::textDocumentParameters(this);
      WebCore::ViewportConfiguration::setDefaultConfiguration((WebKit::WebPage *)((char *)this + 944), (const Parameters *)v23);
      goto LABEL_27;
    }
LABEL_19:
    if (*((_BYTE *)this + 568)
      || (v18 = (WebCore::ViewportConfiguration *)WebKit::WebPage::shouldIgnoreMetaViewport(this), (_DWORD)v18))
    {
      WebCore::ViewportConfiguration::nativeWebpageParameters((WebKit::WebPage *)((char *)this + 944));
    }
    else
    {
      WebCore::ViewportConfiguration::webpageParameters(v18);
    }
    WebCore::ViewportConfiguration::setDefaultConfiguration((WebKit::WebPage *)((char *)this + 944), (const Parameters *)v23);
LABEL_23:
    if (!v10)
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
LABEL_27:
    v19 = *(_DWORD *)(v10 + 24) - 2;
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      v21 = *(_WORD *)(v10 + 30);
      if ((v21 & 0x400) != 0)
        goto LABEL_36;
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
      v19 = *(_DWORD *)(v10 + 24);
    }
    else
    {
      *(_DWORD *)(v10 + 24) = v19;
    }
    v20 = v19 - 2;
    if (v20)
    {
      *(_DWORD *)(v10 + 24) = v20;
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
    }
    v21 = *(_WORD *)(v10 + 30);
LABEL_36:
    if ((v21 & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
  }
  if (!a3)
    goto LABEL_19;
LABEL_12:
  WebCore::ViewportConfiguration::xhtmlMobileParameters(this);
  WebCore::ViewportConfiguration::setDefaultConfiguration((WebKit::WebPage *)((char *)this + 944), (const Parameters *)v23);
  if (*((unsigned __int8 *)this + 1080) > 2u)
    goto LABEL_23;
  if (v10)
  {
    if (WebCore::Document::isViewportDocument((WebCore::Document *)v10))
    {
      v23[0] = 3;
      __asm { FMOV            V0.4S, #-1.0 }
      *(_OWORD *)&v23[4] = _Q0;
      *(_OWORD *)&v23[20] = _Q0;
      *(_OWORD *)&v23[36] = _Q0;
      v16 = *(_OWORD *)&v23[16];
      *(_OWORD *)(v10 + 2192) = *(_OWORD *)v23;
      *(_WORD *)&v23[52] = 0;
      *(_OWORD *)(v10 + 2208) = v16;
      *(_OWORD *)(v10 + 2224) = *(_OWORD *)&v23[32];
      *(_QWORD *)(v10 + 2238) = *(_QWORD *)&v23[46];
      if (WebCore::ViewportConfiguration::setViewportArguments())
        WebKit::WebPage::viewportConfigurationChanged((uint64_t)this, 0);
    }
    goto LABEL_27;
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
}

void sub_196CF6DA0(_Unwind_Exception *a1)
{
  unsigned int *v1;
  uint64_t v2;
  int v4;
  int v5;
  __int16 v6;

  v4 = *(_DWORD *)(v2 + 24) - 2;
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    v6 = *(_WORD *)(v2 + 30);
    if ((v6 & 0x400) != 0)
      goto LABEL_9;
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
    v4 = *(_DWORD *)(v2 + 24);
  }
  else
  {
    *(_DWORD *)(v2 + 24) = v4;
  }
  v5 = v4 - 2;
  if (v5)
  {
    *(_DWORD *)(v2 + 24) = v5;
    goto LABEL_5;
  }
  v6 = *(_WORD *)(v2 + 30);
LABEL_9:
  if ((v6 & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
LABEL_5:
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::shouldIgnoreMetaViewport(WebKit::WebPage *this)
{
  uint64_t v2;
  BOOL v3;
  WebCore::Document *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3
    && (v4 = *(WebCore::Document **)(v2 + 296)) != 0
    && (v5 = WebCore::Document::loader(v4)) != 0
    && *(_BYTE *)(v5 + 3523) == 2)
  {
    return 1;
  }
  else
  {
    return (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 112) + 696) >> 20) & 1;
  }
}

uint64_t WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::EventDispatcher::TouchEventData>::destruct(*(WTF **)a1, (WTF *)(*(_QWORD *)a1 + 112 * v3));
  v4 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v4 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebKit::WebLocalFrameLoaderClient::completePageTransitionIfNeeded(WebKit::WebFrame **this)
{
  uint64_t v2;
  CFTypeRef *v3;
  NSObject *v4;
  WebKit::WebFrame *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebKit::WebFrame **v10;
  __int16 v11;
  WebKit::WebFrame *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 49))
  {
    v2 = WebKit::WebFrame::page(this[2]);
    if (v2)
    {
      v3 = (CFTypeRef *)v2;
      CFRetain(*(CFTypeRef *)(v2 + 8));
      WebKit::WebPage::didCompletePageTransition((WebKit::WebPage *)v3);
      *((_BYTE *)this + 49) = 1;
      v4 = qword_1ECE712F8;
      if (os_log_type_enabled((os_log_t)qword_1ECE712F8, OS_LOG_TYPE_DEFAULT))
      {
        v5 = this[2];
        v6 = *((_QWORD *)v5 + 10);
        v7 = WebKit::WebFrame::page(v5);
        if (WebKit::WebFrame::page(this[2]))
          v8 = *(_QWORD *)(WebKit::WebFrame::page(this[2]) + 40);
        else
          v8 = 0;
        v9 = 134219008;
        v10 = this;
        v11 = 2048;
        v12 = v5;
        v13 = 2048;
        v14 = v6;
        v15 = 2048;
        v16 = v7;
        v17 = 2048;
        v18 = v8;
        _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::completePageTransitionIfNeeded: dispatching didCompletePageTransition", (uint8_t *)&v9, 0x34u);
      }
      CFRelease(v3[1]);
    }
  }
}

uint64_t WebKit::WebPage::unfreezeLayerTree(uint64_t a1, int a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 2104);
  v5 = v4 & ~a2;
  *(_DWORD *)(a1 + 2104) = v5;
  v6 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 40);
    v9 = 134219008;
    v10 = a1;
    v11 = 2048;
    v12 = v7;
    v13 = 1024;
    v14 = a2;
    v15 = 1024;
    v16 = v5;
    v17 = 1024;
    v18 = v4;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::unfreezeLayerTree: Removing a reason to freeze layer tree (reason=%d, new=%d, old=%d)", (uint8_t *)&v9, 0x28u);
  }
  return WebKit::WebPage::updateDrawingAreaLayerTreeFreezeState((WebKit::WebPage *)a1);
}

uint64_t WebKit::WebPage::updateDrawingAreaLayerTreeFreezeState(WebKit::WebPage *this)
{
  uint64_t result;
  uint64_t (*v3)(void);
  uint8x8_t v4;

  result = *((_QWORD *)this + 9);
  if (result)
  {
    if (*((_QWORD *)this + 63))
    {
      if (WebKit::VideoPresentationManager::hasVideoPlayingInPictureInPicture(*((WebKit::VideoPresentationManager **)this
                                                                               + 63)))
      {
        v4 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)this + 526));
        v4.i16[0] = vaddlv_u8(v4);
        result = *((_QWORD *)this + 9);
        if (v4.i32[0] == 1 && (*((_DWORD *)this + 526) & 2) != 0)
        {
          v3 = *(uint64_t (**)(void))(*(_QWORD *)result + 88);
          return v3();
        }
      }
      else
      {
        result = *((_QWORD *)this + 9);
      }
    }
    v3 = *(uint64_t (**)(void))(*(_QWORD *)result + 88);
    return v3();
  }
  return result;
}

double WebKit::RemoteLayerTreeDrawingArea::setLayerTreeStateIsFrozen(WebKit::RemoteLayerTreeDrawingArea *this, int a2)
{
  char v2;
  double result;

  if (*((unsigned __int8 *)this + 224) != a2)
  {
    v2 = a2;
    kdebug_trace();
    *((_BYTE *)this + 224) = v2;
    if ((v2 & 1) == 0)
    {
      if (*((_BYTE *)this + 225))
      {
        *((_BYTE *)this + 225) = 0;
        return WebKit::RemoteLayerTreeDrawingArea::startRenderingUpdateTimer(this);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::didCompletePageTransition(WebKit::WebPage *this)
{
  return WebKit::WebPage::unfreezeLayerTree((uint64_t)this, 1);
}

_QWORD *WebKit::setCanIgnoreViewportArgumentsToAvoidExcessiveZoomIfNeeded(_QWORD *this, WebCore::ViewportConfiguration *a2, WebCore::LocalFrame *a3)
{
  _QWORD *v3;
  char v4;
  WebCore::Quirks *v5;

  if (a2)
  {
    v3 = this;
    this = (_QWORD *)*((_QWORD *)a2 + 37);
    if (this)
    {
      v4 = (char)a3;
      v5 = (WebCore::Quirks *)this[86];
      if (!v5)
        v5 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)this);
      this = (_QWORD *)WebCore::Quirks::shouldIgnoreViewportArgumentsToAvoidExcessiveZoom(v5);
      if ((_DWORD)this)
        *((_BYTE *)v3 + 236) = v4;
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::updateMockAccessibilityElementAfterCommittingLoad(id *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  unsigned int *result;
  unsigned int *v9;
  unsigned int v10;

  v2 = WebKit::WebPage::mainFrame((WebKit::WebPage *)this);
  v3 = v2;
  if (!v2)
    goto LABEL_4;
  if (*(_BYTE *)(v2 + 144))
  {
    v3 = 0;
LABEL_4:
    v4 = 0;
    v5 = 0;
    v6 = 1;
LABEL_5:
    v7 = 1;
    goto LABEL_6;
  }
  v9 = (unsigned int *)(v2 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v4 = *(_QWORD *)(v2 + 296);
  if (!v4)
  {
    v6 = 0;
    v5 = 0;
    goto LABEL_5;
  }
  v6 = 0;
  v7 = 0;
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (*(unsigned __int16 *)(v4 + 3358) >> 3) & 1;
LABEL_6:
  result = (unsigned int *)objc_msgSend(this[33], "setHasMainFramePlugin:", v5);
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        result = (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if ((v6 & 1) == 0)
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  return result;
}

void sub_196CF734C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  if ((v3 & 1) == 0)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::cancelAsynchronousTouchEvents(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  __int128 v6;
  char v7;

  v2 = a2[3];
  if ((_DWORD)v2)
  {
    v3 = 112 * v2;
    v4 = (uint64_t *)(*(_QWORD *)a2 + 96);
    do
    {
      if (*v4)
      {
        LOBYTE(v6) = 0;
        v7 = 0;
        result = WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::RemoteUserInputEventData>)>::operator()(v4, 1, &v6);
      }
      v4 += 14;
      v3 -= 112;
    }
    while (v3);
  }
  return result;
}

uint64_t WebKit::WebPage::cancelPotentialTapInFrame(WebKit::WebPage *this, WebKit::WebFrame *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::FrameTree *v8;
  uint64_t v9;
  const WebCore::Frame *v10;
  const WebCore::Frame *v11;
  uint64_t result;

  v4 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = *((_QWORD *)this + 158);
  if (!v5)
  {
    *((_QWORD *)this + 158) = 0;
    goto LABEL_18;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 528);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    *((_QWORD *)this + 158) = 0;
    goto LABEL_16;
  }
  v8 = (WebCore::FrameTree *)(v7 + 48);
  v9 = *((_QWORD *)a2 + 3);
  if (v9 && (v10 = *(const WebCore::Frame **)(v9 + 8)) != 0)
  {
    if (*((_BYTE *)v10 + 144))
      v11 = 0;
    else
      v11 = v10;
  }
  else
  {
    v11 = 0;
  }
  result = WebCore::FrameTree::isDescendantOf(v8, v11);
  if ((result & 1) != 0)
  {
    v5 = *((_QWORD *)this + 158);
    *((_QWORD *)this + 158) = 0;
    if (!v5)
    {
LABEL_18:
      *((_QWORD *)this + 159) = 0;
      result = *((_QWORD *)this + 160);
      *((_QWORD *)this + 160) = 0;
      if (result)
        return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, a2);
      return result;
    }
LABEL_16:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    goto LABEL_18;
  }
  return result;
}

void sub_196CF74F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WebKit::PlaybackSessionManager *WebKit::PlaybackSessionManager::create@<X0>(WebKit::PlaybackSessionManager *this@<X0>, WebKit::PlaybackSessionManager **a2@<X8>)
{
  WebKit::PlaybackSessionManager *v5;
  WebKit::PlaybackSessionManager *result;

  v5 = (WebKit::PlaybackSessionManager *)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::PlaybackSessionManager::PlaybackSessionManager(v5, this);
  *a2 = v5;
  return result;
}

void sub_196CF7550(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::PlaybackSessionManager *WebKit::PlaybackSessionManager::PlaybackSessionManager(WebKit::PlaybackSessionManager *this, WebKit::WebPage *a2)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  WebKit::WebProcess *v17;
  unsigned int *v18[4];
  _QWORD v19[2];

  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E34D9158;
  v4 = (unsigned int **)((char *)a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v5 = *v4;
  if (*v4)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 3) = v5;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  v7 = WebKit::WebPage::logger(a2);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 9) = v7;
  v10 = *((_QWORD *)a2 + 5) + ~(*((_QWORD *)a2 + 5) << 32);
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = (unsigned int *)(((v12 + ~(v12 << 27)) >> 31) ^ ((_DWORD)v12 + ~((_DWORD)v12 << 27)));
  *((_QWORD *)this + 10) = v13;
  v18[0] = (unsigned int *)"VideoPresentationManager";
  v18[1] = (unsigned int *)25;
  v18[2] = (unsigned int *)"PlaybackSessionManager";
  v18[3] = v13;
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v18);
  {
    v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  v15 = *((_QWORD *)a2 + 5);
  v19[0] = 47;
  v19[1] = v15;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)v14 + 6, (unsigned __int8 *)v19, (uint64_t)this, v18);
  return this;
}

void sub_196CF76E0(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;
  uint64_t *v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v6 = (unsigned int *)v2[9];
  v2[9] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v10 = v2[8];
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = v2[6];
  if (v11)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v11, a2);
  if (*v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v4, a2);
  v12 = (unsigned int *)v2[3];
  v2[3] = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  *v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::logger(WebKit::WebPage *this)
{
  uint64_t v2;
  WebKit::WebProcess *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  WebKit::WebProcess *v11;
  uint64_t v12;

  if (!*((_QWORD *)this + 311))
  {
    v2 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v2 + 8) = 1;
    *(_QWORD *)v2 = off_1E34B8110;
    *(_BYTE *)(v2 + 12) = 1;
    *(_QWORD *)(v2 + 16) = this;
    v3 = (WebKit::WebProcess *)*((_QWORD *)this + 311);
    *((_QWORD *)this + 311) = v2;
    if (v3)
    {
      v4 = (unsigned int *)((char *)v3 + 8);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        goto LABEL_16;
    }
    while (1)
    {
      v7 = *((_QWORD *)this + 311);
      {
        v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v12 = *((_QWORD *)this + 311);
        v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v3 = WebKit::WebProcess::WebProcess(v11);
        v7 = v12;
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
      }
      if (*((_BYTE *)v3 + 672))
        break;
      __break(1u);
LABEL_16:
      atomic_store(1u, (unsigned int *)v3 + 2);
      (*(void (**)(WebKit::WebProcess *))(*(_QWORD *)v3 + 8))(v3);
    }
    v8 = *((_QWORD *)v3 + 83);
    v9 = v8 >= 0 || v8 == -1;
    if (*(WebKit::WebPage **)(v7 + 16) == this)
      *(_BYTE *)(v7 + 12) = v9;
  }
  return *((_QWORD *)this + 311);
}

uint64_t WebKit::EventDispatcher::takeQueuedTouchEventsForPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  void *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  _DWORD v15[32];

  v6 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 32);
LABEL_5:
  v8 = (uint64_t *)(a1 + 40);
  v14 = *(_QWORD *)(a2 + 40);
  v9 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8, &v14);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take(v8, v9, (uint64_t)v15);
  v10 = *(_DWORD *)(a3 + 12);
  if (v10)
    WTF::VectorDestructor<true,WebKit::EventDispatcher::TouchEventData>::destruct(*(WTF **)a3, (WTF *)(*(_QWORD *)a3 + 112 * v10));
  WTF::VectorBuffer<WebKit::EventDispatcher::TouchEventData,1ul,WTF::FastMalloc>::adopt(a3, v15);
  result = WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v11);
  v13 = __ldxr(v6);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::shrinkCapacity(uint64_t result, void *a2)
{
  uint64_t v2;
  unsigned int v3;

  if (*(_DWORD *)(result + 8))
  {
    v2 = result;
    v3 = *(_DWORD *)(result + 12);
    if (v3)
    {
      WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(*(_QWORD *)result, (unsigned int **)(*(_QWORD *)result + 24 * v3));
      *(_DWORD *)(v2 + 12) = 0;
    }
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::VectorBuffer<WebKit::EventDispatcher::TouchEventData,1ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF *v5;
  int v6;
  int v7;

  v4 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  v5 = *(WTF **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    WTF::VectorMover<false,WebKit::EventDispatcher::TouchEventData>::move(v5, (WTF *)((char *)v5 + 112 * *(unsigned int *)(a2 + 12)), v4);
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)a1 = v5;
    v6 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 1;
    *(_DWORD *)(a1 + 8) = v6;
  }
  v7 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v7;
  return a1;
}

WTF *WTF::VectorMover<false,WebKit::EventDispatcher::TouchEventData>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v6 = *((_OWORD *)v5 + 2);
      *(_OWORD *)(a3 + 16) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(a3 + 32) = v6;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      v7 = *((_QWORD *)v5 + 6);
      *((_QWORD *)v5 + 6) = 0;
      *(_QWORD *)(a3 + 48) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 14);
      *((_DWORD *)v5 + 14) = 0;
      *(_DWORD *)(a3 + 56) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 15);
      *((_DWORD *)v5 + 15) = 0;
      *(_DWORD *)(a3 + 60) = v7;
      v8 = *((_OWORD *)v5 + 4);
      *(_DWORD *)(a3 + 80) = *((_DWORD *)v5 + 20);
      *(_OWORD *)(a3 + 64) = v8;
      v9 = *((_QWORD *)v5 + 12);
      *((_QWORD *)v5 + 12) = 0;
      *(_QWORD *)(a3 + 96) = v9;
      v10 = *((_QWORD *)v5 + 12);
      *((_QWORD *)v5 + 12) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      result = (WTF *)*((_QWORD *)v5 + 6);
      if (result)
      {
        *((_QWORD *)v5 + 6) = 0;
        *((_DWORD *)v5 + 14) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v5 = (WTF *)((char *)v5 + 112);
      a3 += 112;
    }
    while (v5 != a2);
  }
  return result;
}

WTF *WTF::VectorBuffer<WebKit::EventDispatcher::TouchEventData,1ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2)
{
  WTF *v4;
  uint64_t v5;
  WTF *result;
  int v7;
  int v8;

  v5 = a1 + 16;
  v4 = *(WTF **)a1;
  if (v4 != (WTF *)v5)
  {
    if (v4)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
    *(_QWORD *)a1 = v5;
  }
  result = *(WTF **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    result = WTF::VectorMover<false,WebKit::EventDispatcher::TouchEventData>::move(result, (WTF *)((char *)result + 112 * a2[3]), v5);
    v7 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = result;
    v7 = a2[2];
    a2[2] = 1;
  }
  *(_DWORD *)(a1 + 8) = v7;
  v8 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v8;
  return result;
}

unsigned int **WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t a1, void *a2)
{
  unsigned int **result;
  unsigned int **v4;

  result = *(unsigned int ***)a1;
  if (result)
  {
    *(_QWORD *)a1 = 0;
    result = (unsigned int **)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(result, a2);
    v4 = *(unsigned int ***)a1;
    *(_DWORD *)(a1 + 8) = 0;
    if (v4)
    {
      LODWORD(v4) = *((_DWORD *)v4 - 3);
      if (v4 > 0x7FFFFFFE)
        LODWORD(v4) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v4) = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  *(_DWORD *)(a1 + 12) = 2 * (_DWORD)v4;
  return result;
}

uint64_t WebKit::WebPage::platformInitialize(WebKit::WebPage *a1, uint64_t a2)
{
  WebKit::WebProcess *v4;
  WebKit::UserMediaCaptureManager *v5;
  unint64_t v6;
  const Color *v7;
  void *v8;
  WebCore *v9;
  void *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WebKit::WebProcess *v15;
  _BYTE v16[16];
  uint64_t v17;

  WebKit::WebPage::platformInitializeAccessibility(a1);
  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = (WebKit::UserMediaCaptureManager *)WebKit::WebProcess::supplement<WebKit::UserMediaCaptureManager>(v4);
  if (v5)
    WebKit::UserMediaCaptureManager::setupCaptureProcesses(v5, *(_BYTE *)(a2 + 1168), *(_BYTE *)(a2 + 1169), *(unsigned __int8 *)(a2 + 1170), *(unsigned __int8 *)(a2 + 1171), *(unsigned __int8 *)(a2 + 1172), *(unsigned __int8 *)(a2 + 1173), (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 6) + 112) + 720) & 0x40000) != 0);
  v6 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a1 + 6) + 112) + 720) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a1 + 6) + 112) + 724) << 32);
  WebKit::LibWebRTCCodecs::setCallbacks((WebKit::LibWebRTCCodecs *)((v6 >> 17) & 1), (v6 & 0x40000) != 0);
  WebKit::LibWebRTCCodecs::setWebRTCMediaPipelineAdditionalLoggingEnabled((WebKit::LibWebRTCCodecs *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 6) + 112) + 704) >> 28) & 1));
  WebCore::Color::Color((WebCore::Color *)&v17, (const Color *)(a2 + 520));
  WebCore::RenderThemeIOS::setInsertionPointColor((WebCore::RenderThemeIOS *)&v17, v7);
  if ((v17 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v8);
    }
  }
  GSEventSetHardwareKeyboardAttachedWithCountryCodeAndType();
  v9 = (WebCore *)WebCore::setAdditionalSupportedImageTypes();
  WebCore::allowableImageTypes(v9);
  WebCore::setImageSourceAllowableTypes();
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v10);
}

void sub_196CF7D98(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::platformInitializeAccessibility(WebKit::WebPage *this)
{
  WKAccessibilityWebPageObject *v2;
  const void *v3;
  unsigned int *result;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int v8;
  CFTypeRef cf;
  WebKit::WebPage *v10;

  v2 = objc_alloc_init(WKAccessibilityWebPageObject);
  v3 = (const void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = v2;
  if (v3)
  {
    CFRelease(v3);
    v2 = (WKAccessibilityWebPageObject *)*((_QWORD *)this + 33);
  }
  v10 = this;
  result = (unsigned int *)-[WKAccessibilityWebPageObjectBase setWebPage:](v2, "setWebPage:", &v10);
  v5 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v5)
    v6 = *(_BYTE *)(v5 + 144) == 0;
  else
    v6 = 0;
  if (v6)
  {
    v7 = (unsigned int *)(v5 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    WebKit::WebPage::accessibilityRemoteTokenData(&cf);
    WebKit::WebPage::accessibilityTransferRemoteToken((uint64_t)this, (id *)&cf, *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
    if (cf)
      CFRelease(cf);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  return result;
}

void sub_196CF7E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  unsigned int *v9;

  if (cf)
    CFRelease(cf);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::WebPage::accessibilityRemoteTokenData@<X0>(_QWORD *a1@<X8>)
{
  void *v3;
  NSUUID *v4;
  CFTypeRef result;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  result = WebKit::newAccessibilityRemoteToken(v3, v4);
  *a1 = result;
  if (result)
    return CFRetain(result);
  return result;
}

WebCore::RealtimeMediaSourceCenter *WebKit::UserMediaCaptureManager::setupCaptureProcesses(WebKit::UserMediaCaptureManager *this, char a2, char a3, int a4, int a5, int a6, int a7, char a8)
{
  WebCore::MockRealtimeMediaSourceCenter *v15;
  WebCore::MockRealtimeMediaSourceCenter *v16;
  int v17;
  WebCore::RealtimeMediaSourceCenter *result;
  int v19;
  WebCore::RealtimeMediaSourceCenter *Function;

  *((_BYTE *)this + 224) = a8;
  v15 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(this);
  *((_BYTE *)v15 + 24) = (a2 | a3) ^ 1;
  v16 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(v15);
  v17 = a4 | a5;
  *((_BYTE *)v16 + 25) = v17 ^ 1;
  result = (WebCore::RealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(v16);
  v19 = a6 | a7;
  *((_BYTE *)result + 26) = v19 ^ 1;
  *((_BYTE *)this + 72) = a3;
  *((_BYTE *)this + 112) = a5;
  *((_BYTE *)this + 136) = a7;
  if ((((a2 | a3) ^ 1) & 1) == 0)
  {
    Function = (WebCore::RealtimeMediaSourceCenter *)WebCore::AudioMediaStreamTrackRendererInternalUnit::setCreateFunction();
    WebCore::RealtimeMediaSourceCenter::singleton(Function);
    result = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::setAudioCaptureFactory();
  }
  if (v17)
  {
    WebCore::RealtimeMediaSourceCenter::singleton(result);
    result = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::setVideoCaptureFactory();
  }
  if (v19)
  {
    WebCore::RealtimeMediaSourceCenter::singleton(result);
    return (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::setDisplayCaptureFactory();
  }
  return result;
}

WebKit::WebProcess *WebKit::LibWebRTCCodecs::setWebRTCMediaPipelineAdditionalLoggingEnabled(WebKit::LibWebRTCCodecs *this)
{
  char v1;
  WebKit::WebProcess *result;
  WebKit::WebProcess *v3;

  v1 = (char)this;
  result = (WebKit::WebProcess *)WebCore::WebRTCProvider::webRTCAvailable(this);
  if ((_DWORD)result)
  {
    v3 = WebKit::WebProcess::singleton(result);
    result = WebKit::WebProcess::libWebRTCCodecs(v3);
    *((_BYTE *)result + 136) = v1;
  }
  return result;
}

WebKit::WebProcess *WebKit::LibWebRTCCodecs::setCallbacks(WebKit::LibWebRTCCodecs *this, char a2)
{
  int v3;
  WebKit::WebProcess *result;
  WebKit::WebProcess *v5;

  v3 = (int)this;
  result = (WebKit::WebProcess *)WebCore::WebRTCProvider::webRTCAvailable(this);
  if ((_DWORD)result && v3)
  {
    v5 = WebKit::WebProcess::singleton(result);
    result = WebKit::WebProcess::libWebRTCCodecs(v5);
    *((_BYTE *)result + 134) = a2;
    if (!*((_BYTE *)result + 133))
    {
      *((_BYTE *)result + 133) = v3;
      webrtc::setVideoDecoderCallbacks();
      return (WebKit::WebProcess *)webrtc::setVideoEncoderCallbacks();
    }
  }
  return result;
}

const char *WebKit::WebProcess::supplement<WebKit::UserMediaCaptureManager>(WebKit::UserMediaCaptureManager *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = (uint64_t *)((char *)a1 + 272);
  v4[0] = WebKit::UserMediaCaptureManager::supplementName(a1);
  v4[1] = v2;
  return WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v1, (WTF::ASCIILiteralHash *)v4);
}

const char *WebKit::WebProcess::supplement<WebKit::RemoteCDMFactory>(uint64_t a1)
{
  const char *v1;
  _QWORD v3[2];

  v3[0] = "RemoteCDMFactory";
  v3[1] = 17;
  v1 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(a1 + 272), (WTF::ASCIILiteralHash *)v3);
  if (v1)
    return v1 - 8;
  else
    return 0;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::RegisterWebProcessAccessibilityToken>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  __int16 v13;
  IPC::Encoder *v14;
  uint64_t v15;

  v15 = a3;
  v13 = 2003;
  WTF::makeUniqueRefWithoutFastMallocCheck<IPC::Encoder,IPC::MessageName,unsigned long long &>(&v13, &v15, (uint64_t *)&v14);
  IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul>(v14, a2);
  v8 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v14, a4);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

void sub_196CF81C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, IPC::Encoder *a11)
{
  WTF *v12;
  void *v13;

  if (a11)
  {
    IPC::Encoder::~Encoder(a11, a2);
    WTF::fastFree(v12, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::mainFrame(WebKit::WebPage *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *(_QWORD *)(v1 + 160);
  else
    return 0;
}

void WebKit::WebChromeClient::renderingUpdateFramesPerSecondChanged(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 280))(v3);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::renderingUpdateFramesPerSecondChanged(WebKit::RemoteLayerTreeDrawingArea *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Page *v4;
  uint64_t updated;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int *v9;
  int v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  v4 = *(WebCore::Page **)(v3 + 48);
  updated = WebCore::Page::preferredRenderingUpdateFramesPerSecond();
  v6 = updated;
  if (BYTE4(updated) && (!*((_BYTE *)this + 348) || *((_DWORD *)this + 86) != (_DWORD)updated))
  {
    v10 = updated;
    v9 = &v10;
    WebKit::DrawingArea::send<Messages::RemoteLayerTreeDrawingAreaProxy::SetPreferredFramesPerSecond>((uint64_t)this, &v9);
  }
  *((_DWORD *)this + 86) = v6;
  *((_BYTE *)this + 348) = BYTE4(v6);
  result = WebCore::Page::preferredRenderingUpdateInterval(v4);
  *((_QWORD *)this + 44) = v8;
  return result;
}

void WebKit::DrawingArea::send<Messages::RemoteLayerTreeDrawingAreaProxy::SetPreferredFramesPerSecond>(uint64_t a1, _DWORD **a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  IPC::MessageSender::send<Messages::RemoteLayerTreeDrawingAreaProxy::SetPreferredFramesPerSecond>(v5 + 32, a2, *(_QWORD *)(a1 + 32));
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

void sub_196CF8448(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::MessageSender::send<Messages::RemoteLayerTreeDrawingAreaProxy::SetPreferredFramesPerSecond>(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  __int16 v9;
  IPC::Encoder *v10;
  uint64_t v11;

  v11 = a3;
  v9 = 1108;
  WTF::makeUniqueRefWithoutFastMallocCheck<IPC::Encoder,IPC::MessageName,unsigned long long &>(&v9, &v11, (uint64_t *)&v10);
  LODWORD(a2) = **a2;
  *(_DWORD *)IPC::Encoder::grow(v10, 4uLL, 4) = (_DWORD)a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void sub_196CF84EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, IPC::Encoder *a11)
{
  WTF *v12;
  void *v13;

  if (a11)
  {
    IPC::Encoder::~Encoder(a11, a2);
    WTF::fastFree(v12, v13);
  }
  _Unwind_Resume(exception_object);
}

char *WTF::makeUniqueRefWithoutFastMallocCheck<IPC::Encoder,IPC::MessageName,unsigned long long &>@<X0>(_WORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *result;

  v6 = WTF::fastMalloc((WTF *)0x240);
  v7 = *a2;
  *(_WORD *)v6 = *a1;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  result = IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  *a3 = v6;
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34CFAA8;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainRunLoop();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::WebUserContentController::forEachUserMessageHandler(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(result + 88);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 24 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *(_QWORD *)(result + 88);
      if ((_DWORD)v4)
      {
        v7 = 24 * v4;
        v6 = *(_QWORD *)(result + 88);
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 24;
          v7 -= 24;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = v3 + 24 * v4;
  }
  else
  {
    v6 = 0;
    LODWORD(v4) = 0;
  }
  v5 = v3 + 24 * v4;
  if (v3)
  {
LABEL_8:
    v8 = v3 + 24 * *(unsigned int *)(v3 - 4);
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    v9 = *(unsigned int *)(v6 + 20);
    if ((_DWORD)v9)
    {
      v10 = 16 * v9;
      v11 = (uint64_t *)(*(_QWORD *)(v6 + 8) + 8);
      do
      {
        v12 = *v11;
        v11 += 2;
        result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v12);
        v10 -= 16;
      }
      while (v10);
    }
    v13 = v6 + 24;
    v6 = v5;
    if (v13 != v5)
    {
      v6 = v13;
      while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
      {
        v6 += 24;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  return result;
}

void sub_196CF87C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL15wkNSStringClassv_block_invoke()
{
  uint64_t result;

  result = objc_opt_class();
  qword_1ECE721A8 = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setContentsHidden(int8x16_t *this, int a2)
{
  int8x16_t result;

  if (this[41].u8[5] != a2)
  {
    this[41].i8[5] = a2;
    result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x1000000000uLL));
    this[4] = result;
  }
  return result;
}

_QWORD *WebKit::WebProcess::setMediaAccessibilityPreferences(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  WebCore::CaptionUserPreferencesMediaAF::setCachedCaptionDisplayMode();
  WebCore::CaptionUserPreferencesMediaAF::setCachedPreferredLanguages();
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 120));
  v3 = result;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 120);
  if (v6)
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != result)
  {
    do
    {
      result = *(_QWORD **)(WebKit::WebPageGroupProxy::corePageGroup((WebKit::WebPageGroupProxy *)v3[1]) + 40);
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 136))(result);
      while (1)
      {
        v3 += 2;
        if (v3 == v5)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_12;
      }
      v3 = v5;
LABEL_12:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ImageBufferPixelFormat>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::ImageBufferPixelFormat,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t WebKit::NetworkSession::createUniqueRegistrationStore@<X0>(WebKit::NetworkSession *this@<X0>, WebCore::SWServer *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  WebKit::NetworkStorageManager *v6;
  WebKit::WebSWRegistrationStore *v7;
  uint64_t result;

  v5 = *((_QWORD *)this + 3);
  if ((v5 & 0x8000000000000000) == 0 || v5 == -1)
  {
    v6 = (WebKit::NetworkStorageManager *)*((_QWORD *)this + 100);
    v7 = (WebKit::WebSWRegistrationStore *)WTF::fastMalloc((WTF *)0x60);
    result = WebKit::WebSWRegistrationStore::WebSWRegistrationStore(v7, a2, v6);
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

WebKit::WebSWRegistrationStore *WebKit::WebSWRegistrationStore::WebSWRegistrationStore(WebKit::WebSWRegistrationStore *this, WebCore::SWServer *a2, WebKit::NetworkStorageManager *a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34C3918;
  *((_QWORD *)this + 1) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v6 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *((_QWORD *)this + 2) = v6;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 2, (uint64_t)a3);
  v8 = (unsigned int *)*((_QWORD *)a3 + 1);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *((_QWORD *)this + 3) = v8;
  WebCore::Timer::Timer<WebKit::WebSWRegistrationStore,WebKit::WebSWRegistrationStore>((WebKit::WebSWRegistrationStore *)((char *)this + 32), (uint64_t)this);
  *((_QWORD *)this + 11) = 0;
  return this;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::WebSWRegistrationStore,WebKit::WebSWRegistrationStore>(WebCore::TimerBase *a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E34B3740;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E34C3D78;
  v4[1] = WebKit::WebSWRegistrationStore::updateTimerFired;
  v4[2] = 0;
  v4[3] = a2;
  *((_QWORD *)a1 + 6) = v4;
  return a1;
}

uint64_t WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t a1, WTF::FastMalloc *a2)
{
  uint64_t v3;

  if (!WTF::isValidCapacityForVector<unsigned char>((unint64_t)a2))
  {
    __break(0xC471u);
    JUMPOUT(0x196CF8AD8);
  }
  v3 = WTF::FastMalloc::malloc(a2);
  *(_DWORD *)(a1 + 8) = (_DWORD)a2;
  *(_QWORD *)a1 = v3;
  return 1;
}

BOOL WTF::isValidCapacityForVector<unsigned char>(unint64_t a1)
{
  return a1 <= std::numeric_limits<unsigned int>::max[abi:sn180100]();
}

uint64_t initBKSDisplayBrightnessGetCurrent(void)
{
  void *v0;
  uint64_t (*v1)(void);

  if (byte_1EE341857 == 1)
  {
    v0 = (void *)qword_1EE3418C0;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x196CF8BCCLL);
    }
    qword_1EE3418C0 = (uint64_t)v0;
    byte_1EE341857 = 1;
  }
  v1 = (uint64_t (*)(void))dlsym(v0, "BKSDisplayBrightnessGetCurrent");
  softLinkBKSDisplayBrightnessGetCurrent = v1;
  if (!v1)
    goto LABEL_8;
  return v1();
}

uint64_t IPC::ArgumentCoder<WebKit::WebPageCreationParameters,void>::decode@<X0>(unint64_t *a1@<X0>, WTF::StringImpl **a2@<X8>)
{
  char v3;
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  unsigned __int16 v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  unint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl **v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char **v88;
  WTF::StringImpl *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  WTF::StringImpl *v94;
  unsigned __int16 v97;
  unsigned __int16 v98;
  unsigned __int16 v99;
  unsigned __int16 v100;
  unsigned __int16 v101;
  unsigned __int16 ShouldRelaxThirdPartyCookie;
  unsigned __int16 v103;
  unsigned __int16 v104;
  unsigned __int16 v105;
  unsigned __int16 v106;
  unsigned __int16 v107;
  unsigned __int16 v108;
  unsigned __int16 v109;
  unsigned __int16 v110;
  unsigned __int16 v111;
  unsigned __int16 v112;
  unsigned __int16 v113;
  unsigned __int16 v114;
  unsigned __int16 v115;
  unsigned __int16 v116;
  unsigned __int16 v117;
  unsigned __int16 v118;
  unsigned __int16 v119;
  unsigned __int16 v120;
  unsigned __int16 v121;
  unsigned __int16 v122;
  unsigned __int16 v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  char v139;
  unint64_t v140;
  char v141;
  unsigned __int16 v142;
  unsigned __int16 v143;
  unsigned __int16 v144;
  unsigned __int16 v145;
  unsigned __int16 v146;
  unsigned __int16 v147;
  unsigned __int16 v148;
  unsigned __int16 v149;
  uint64_t v150;
  char v151;
  unsigned __int16 v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  unint64_t v173;
  char v174;
  unint64_t v175;
  char v176;
  unint64_t v177;
  char v178;
  unint64_t v179;
  char v180;
  unsigned __int16 v181;
  unsigned __int16 v182;
  unsigned __int16 v183;
  unsigned __int16 v184;
  unsigned __int16 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int16 v190;
  unsigned __int16 v191;
  unsigned __int16 v192;
  unsigned __int16 v193;
  unsigned __int16 v194;
  unsigned __int16 v195;
  unsigned __int16 v196;
  unsigned __int16 v197;
  unsigned __int16 v198;
  unsigned __int16 v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  char v203;
  unsigned __int16 v204;
  const char **v205;
  char v206;
  const char **v207;
  __int16 v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  char v216;
  char v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  char v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  __int128 v228;
  char v229;
  int v230;
  char v231;
  int v232;
  char v233;
  char v234;
  char v235;
  char v236;
  char v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  char v247;
  int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  char v254;
  char v255;
  char v256;
  char v257;
  unint64_t v258;
  unint64_t v259;
  char v260;
  unint64_t v261;
  char v262;
  char v263;
  int v264;
  char v265;
  char v266;
  char v267;
  char v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  char v272;
  char v273;
  char v274;
  char v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  __int128 v280;
  __int128 v281;
  _BYTE v282[25];
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  int v287;
  int v288;
  __int16 v289;
  char v290;
  char v291;
  char v292;
  char v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char v300;
  char v301;
  __int16 v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  WTF::StringImpl **v306;
  uint64_t v307;
  uint64_t v308;
  _BYTE v309[280];
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  char v325;
  char v326[16];
  uint64_t v327;
  char v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  WTF::StringImpl **v332;
  char v333;
  char v334;
  WTF *v335;
  uint64_t v336;
  int v337;
  char v338;
  char v339;
  int v340;
  char v341;
  char v342;
  uint64_t v343;
  char v344;
  char v345;
  char v346;
  char v347;
  char v348;
  char v349;
  char v350;
  char v351;
  char v352;
  char v353;
  char v354;
  char v355;
  char v356;
  char v357;
  char v358;
  char v359;
  char v360;
  char v361;
  char v362;
  char v363;
  char v364;
  char v365[105];
  __int128 v366;
  char v367;
  __int128 v368;
  char v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  const char **v374;
  const char **v375;
  char v376;
  uint64_t v377;
  uint64_t v378;
  char v379;
  uint64_t v380;
  uint64_t v381;
  char v382;
  __int128 v383;
  char v384;
  char v385;
  __int128 v386;
  char v387;
  char v388;
  _BYTE v389[208];
  char v390;
  uint64_t v391;
  char v392;
  WTF *v393;
  uint64_t v394;
  int v395;
  char v396;
  char v397;
  char v398;
  WTF::StringImpl **v399;
  char v400;
  uint64_t v401;
  uint64_t v402;
  char v403;
  uint64_t v404;
  char v405;
  uint64_t v406;
  char v407;
  char v408;
  _BYTE v409[16];
  char v410;
  uint64_t v411;
  char v412;
  uint64_t v413;
  uint64_t v414;
  char v415;
  char v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char v428;
  _BYTE v429[272];
  char v430;
  uint64_t v431;
  uint64_t v432;
  char v433;
  WTF::StringImpl **v434;
  char v435;
  uint64_t v436;
  char v437;
  char v438;
  uint64_t v439;
  char v440;
  uint64_t v441;
  uint64_t v442;
  char v443;
  uint64_t v444;
  uint64_t v445;
  char v446;
  uint64_t v447;
  uint64_t v448;
  char v449;
  _BYTE v450[16];
  _OWORD v451[2];
  _BYTE v452[25];
  char v453;
  uint64_t v454;
  uint64_t v455;
  char v456;
  uint64_t v457;
  uint64_t v458;
  char v459;
  uint64_t v460;
  char v461;
  __int128 v462;
  char v463;
  char v464;
  _BYTE v465[16];
  _QWORD v466[2];
  char v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  char v471;
  uint64_t v472;
  uint64_t v473;
  int v474;
  char v475;
  char v476;

  v205 = (const char **)IPC::Decoder::decode<WebCore::IntSize>(a1);
  v206 = v3;
  v4 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>((uint64_t *)a1);
  IPC::Decoder::decode<WebKit::WebPreferencesStore>((uint64_t *)a1, (uint64_t)&v468);
  v204 = IPC::Decoder::decode<WebKit::DrawingAreaType>((uint64_t *)a1);
  v202 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a1);
  v203 = v5;
  v200 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a1);
  v201 = v6;
  IPC::Decoder::decode<WebKit::WebPageGroupData>((uint64_t)v466, (uint64_t *)a1);
  v199 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WebCore::Color>((uint64_t *)a1, v465);
  v198 = IPC::Decoder::decode<BOOL>(a1);
  v179 = IPC::Decoder::decode<WebCore::IntSize>(a1);
  v180 = v7;
  v177 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v178 = v8;
  v175 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v176 = v9;
  v173 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v174 = v10;
  IPC::Decoder::decode<std::optional<WebCore::FloatRect>>(a1, &v462);
  v171 = IPC::Decoder::decode<std::optional<unsigned int>>((uint64_t *)a1);
  v172 = v11;
  v169 = IPC::Decoder::decode<std::optional<unsigned int>>((uint64_t *)a1);
  v170 = v12;
  v197 = IPC::Decoder::decode<BOOL>(a1);
  v196 = IPC::Decoder::decode<BOOL>(a1);
  v195 = IPC::Decoder::decode<BOOL>(a1);
  v194 = IPC::Decoder::decode<WebCore::ResourceErrorBaseType>((uint64_t *)a1);
  v193 = IPC::Decoder::decode<BOOL>(a1);
  v167 = IPC::Decoder::decode<unsigned long long>(a1);
  v168 = v13;
  v165 = IPC::Decoder::decode<unsigned long long>(a1);
  v166 = v14;
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v460);
  v192 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, (uint64_t)&v457);
  v163 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a1);
  v164 = v15;
  v191 = IPC::Decoder::decode<BOOL>(a1);
  v190 = IPC::Decoder::decode<BOOL>(a1);
  v189 = IPC::Decoder::decode<float>(a1);
  v188 = IPC::Decoder::decode<float>(a1);
  v161 = IPC::Decoder::decode<unsigned long long>(a1);
  v162 = v16;
  v159 = IPC::Decoder::decode<unsigned long long>(a1);
  v160 = v17;
  v187 = IPC::Decoder::decode<float>(a1);
  v186 = IPC::Decoder::decode<float>(a1);
  v185 = IPC::Decoder::decode<WTF::OptionSet<WebCore::MediaProducerMutedState>>((uint64_t *)a1);
  v184 = IPC::Decoder::decode<BOOL>(a1);
  v183 = IPC::Decoder::decode<BOOL>(a1);
  v182 = IPC::Decoder::decode<BOOL>(a1);
  v157 = IPC::Decoder::decode<WebCore::IntSize>(a1);
  v158 = v18;
  v155 = IPC::Decoder::decode<WebCore::IntSize>(a1);
  v156 = v19;
  v181 = IPC::Decoder::decode<BOOL>(a1);
  v153 = IPC::Decoder::decode<std::optional<WebCore::FloatSize>>(a1);
  v154 = v20;
  v152 = IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>((uint64_t *)a1);
  v150 = IPC::Decoder::decode<std::optional<unsigned int>>((uint64_t *)a1);
  v151 = v21;
  v149 = IPC::Decoder::decode<BOOL>(a1);
  v148 = IPC::Decoder::decode<WebKit::LayerHostingMode>((uint64_t *)a1);
  v147 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, v22, (uint64_t)&v454);
  v146 = IPC::Decoder::decode<BOOL>(a1);
  v145 = IPC::Decoder::decode<BOOL>(a1);
  v144 = IPC::Decoder::decode<BOOL>(a1);
  v143 = IPC::Decoder::decode<BOOL>(a1);
  v142 = IPC::Decoder::decode<BOOL>(a1);
  v140 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v141 = v23;
  v138 = IPC::Decoder::decode<unsigned long long>(a1);
  v139 = v24;
  v136 = IPC::Decoder::decode<unsigned long long>(a1);
  v137 = v25;
  v134 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v135 = v26;
  IPC::Decoder::decode<std::optional<WebCore::ViewportArguments>>((uint64_t *)a1, (uint64_t)v451);
  v132 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v133 = v27;
  v130 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v131 = v28;
  v128 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v129 = v29;
  v126 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v127 = v30;
  v31 = IPC::Decoder::decode<float>(a1);
  v32 = IPC::Decoder::decode<unsigned int>(a1);
  v33 = IPC::Decoder::decode<WebKit::HardwareKeyboardState>((uint64_t *)a1);
  v34 = IPC::Decoder::decode<BOOL>(a1);
  v35 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WebCore::Color>((uint64_t *)a1, v450);
  v36 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, v37, (uint64_t)&v447);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, v38, (uint64_t)&v444);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, v39, (uint64_t)&v441);
  v125 = IPC::Decoder::decode<BOOL>(a1);
  v124 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>((uint64_t *)a1);
  v40 = IPC::Decoder::decode<WTF::OptionSet<WebCore::LayoutMilestone>>((uint64_t *)a1);
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v439);
  IPC::Decoder::decode<std::optional<double>>((uint64_t *)a1, &v436);
  IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>(&v434, (uint64_t *)a1);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, v41, (uint64_t)&v431);
  IPC::Decoder::decode<std::optional<WebCore::ApplicationManifest>>((uint64_t *)a1, v429);
  v123 = IPC::Decoder::decode<BOOL>(a1);
  v122 = IPC::Decoder::decode<BOOL>(a1);
  v121 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WebKit::UserContentControllerParameters>(&v417, (uint64_t *)a1);
  IPC::Decoder::decode<std::optional<WebKit::WebExtensionControllerParameters>>((uint64_t)&v411, (uint64_t *)a1);
  IPC::Decoder::decode<std::optional<WebCore::Color>>((uint64_t *)a1, v409);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a1, &v406);
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v404);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, v42, (uint64_t)&v401);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v399);
  v120 = IPC::Decoder::decode<BOOL>(a1);
  v119 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>>((uint64_t)&v393, (uint64_t *)a1);
  v43 = IPC::Decoder::decode<std::optional<std::pair<unsigned short,unsigned short>>>((uint64_t *)a1);
  v118 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v391);
  v117 = IPC::Decoder::decode<BOOL>(a1);
  v116 = IPC::Decoder::decode<BOOL>(a1);
  v115 = IPC::Decoder::decode<BOOL>(a1);
  v114 = IPC::Decoder::decode<BOOL>(a1);
  v113 = IPC::Decoder::decode<BOOL>(a1);
  v112 = IPC::Decoder::decode<BOOL>(a1);
  v111 = IPC::Decoder::decode<BOOL>(a1);
  v110 = IPC::Decoder::decode<BOOL>(a1);
  v109 = IPC::Decoder::decode<BOOL>(a1);
  v108 = IPC::Decoder::decode<BOOL>(a1);
  v107 = IPC::Decoder::decode<BOOL>(a1);
  v106 = IPC::Decoder::decode<BOOL>(a1);
  v105 = IPC::Decoder::decode<BOOL>(a1);
  v104 = IPC::Decoder::decode<BOOL>(a1);
  v103 = IPC::Decoder::decode<BOOL>(a1);
  ShouldRelaxThirdPartyCookie = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>((uint64_t *)a1);
  v101 = IPC::Decoder::decode<BOOL>(a1);
  v100 = IPC::Decoder::decode<BOOL>(a1);
  v99 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>((uint64_t *)a1);
  v98 = IPC::Decoder::decode<BOOL>(a1);
  v97 = IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>((uint64_t *)a1);
  IPC::Decoder::decode<std::optional<WebKit::RemotePageParameters>>(v389, (uint64_t *)a1);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a1, (uint64_t)&v386);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a1, (uint64_t)&v383);
  IPC::Decoder::decode<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, (uint64_t)&v380);
  IPC::Decoder::decode<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, (uint64_t)&v377);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>((uint64_t *)a1, (uint64_t)&v375);
  if (*a1)
  {
    if (!v206)
      goto LABEL_172;
    v207 = v205;
    if ((v4 & 0xFF0000) == 0)
      goto LABEL_172;
    v208 = v4;
    if (!v476)
      goto LABEL_172;
    v46 = v468;
    v468 = 0;
    v209 = v46;
    v47 = v469;
    v469 = 0;
    v210 = v47;
    LODWORD(v46) = v470;
    v470 = 0;
    v211 = v46;
    LOBYTE(v46) = v471;
    v471 = 0;
    v212 = v46;
    v48 = v472;
    v472 = 0;
    v213 = v48;
    v49 = v473;
    v473 = 0;
    v214 = v49;
    LODWORD(v48) = v474;
    v474 = 0;
    v215 = v48;
    v216 = v475;
    v475 = 0;
    if (v204 <= 0xFFu)
      goto LABEL_172;
    v217 = v204;
    if (!v203)
      goto LABEL_172;
    v218 = v202;
    if (!v201)
      goto LABEL_172;
    v219 = v200;
    if (!v467)
      goto LABEL_172;
    v50 = v466[0];
    v466[0] = 0;
    v220 = v50;
    v221 = v466[1];
    if (v199 <= 0xFFu)
      goto LABEL_172;
    v222 = v199;
    if (!v465[8])
      goto LABEL_172;
    WebCore::Color::Color();
    v44 = (WTF::StringImpl **)v189;
    v45 = (WTF::StringImpl *)v188;
    if (v198 <= 0xFFu)
      goto LABEL_172;
    v223 = v198;
    if (!v180)
      goto LABEL_172;
    v224 = v179;
    if (!v178)
      goto LABEL_172;
    v225 = v177;
    if (!v176)
      goto LABEL_172;
    v226 = v175;
    if (!v174)
      goto LABEL_172;
    v227 = v173;
    if (!v464)
      goto LABEL_172;
    v228 = v462;
    v229 = v463;
    if (!v172)
      goto LABEL_172;
    v230 = v171;
    v231 = BYTE4(v171);
    if (!v170)
      goto LABEL_172;
    v232 = v169;
    v233 = BYTE4(v169);
    if (v197 <= 0xFFu)
      goto LABEL_172;
    v234 = v197;
    if (v196 <= 0xFFu)
      goto LABEL_172;
    v235 = v196;
    if (v195 <= 0xFFu)
      goto LABEL_172;
    v236 = v195;
    if (v194 <= 0xFFu)
      goto LABEL_172;
    v237 = v194;
    if (v193 <= 0xFFu)
      goto LABEL_172;
    v238 = v193;
    if (!v168)
      goto LABEL_172;
    v239 = v167;
    if (!v166)
      goto LABEL_172;
    v240 = v165;
    if (!v461)
      goto LABEL_172;
    v51 = v460;
    v460 = 0;
    v241 = v51;
    if (v192 <= 0xFFu)
      goto LABEL_172;
    v242 = v192;
    if (!v459)
      goto LABEL_172;
    v243 = v457;
    v52 = v458;
    v457 = 0;
    v458 = 0;
    v244 = v52;
    if (!v164)
      goto LABEL_172;
    v245 = v163;
    if (v191 <= 0xFFu)
      goto LABEL_172;
    v246 = v191;
    if (v190 <= 0xFFu)
      goto LABEL_172;
    v247 = v190;
    if ((v189 & 0xFF00000000) == 0)
      goto LABEL_172;
    v248 = v189;
    if ((v188 & 0xFF00000000) == 0)
      goto LABEL_172;
    v249 = v188;
    if (!v162)
      goto LABEL_172;
    v250 = v161;
    if (!v160)
      goto LABEL_172;
    v251 = v159;
    if ((v187 & 0xFF00000000) == 0)
      goto LABEL_172;
    v252 = v187;
    if ((v186 & 0xFF00000000) == 0)
      goto LABEL_172;
    v253 = v186;
    if (v185 <= 0xFFu)
      goto LABEL_172;
    v254 = v185;
    if (v184 <= 0xFFu)
      goto LABEL_172;
    v255 = v184;
    if (v183 <= 0xFFu)
      goto LABEL_172;
    v256 = v183;
    if (v182 <= 0xFFu)
      goto LABEL_172;
    v257 = v182;
    if (!v158)
      goto LABEL_172;
    v258 = v157;
    if (!v156)
      goto LABEL_172;
    v259 = v155;
    if (v181 <= 0xFFu)
      goto LABEL_172;
    v260 = v181;
    if ((v154 & 0xFF00000000) == 0)
      goto LABEL_172;
    v261 = v153;
    v262 = v154;
    if (v152 <= 0xFFu)
      goto LABEL_172;
    v263 = v152;
    if (!v151)
      goto LABEL_172;
    v264 = v150;
    v265 = BYTE4(v150);
    if (v149 <= 0xFFu)
      goto LABEL_172;
    v266 = v149;
    if (v148 <= 0xFFu)
      goto LABEL_172;
    v267 = v148;
    if (v147 <= 0xFFu)
      goto LABEL_172;
    v268 = v147;
    if (!v456)
      goto LABEL_172;
    v53 = v454;
    v454 = 0;
    v269 = v53;
    v54 = v455;
    v455 = 0;
    v270 = v54;
    if (v146 <= 0xFFu)
      goto LABEL_172;
    v271 = v146;
    if (v145 <= 0xFFu)
      goto LABEL_172;
    v272 = v145;
    if (v144 <= 0xFFu)
      goto LABEL_172;
    v273 = v144;
    if (v143 <= 0xFFu)
      goto LABEL_172;
    v274 = v143;
    if (v142 <= 0xFFu)
      goto LABEL_172;
    v275 = v142;
    if (!v141)
      goto LABEL_172;
    v276 = v140;
    if (!v139)
      goto LABEL_172;
    v277 = v138;
    if (!v137)
      goto LABEL_172;
    v278 = v136;
    if (!v135)
      goto LABEL_172;
    v279 = v134;
    if (!v453)
      goto LABEL_172;
    v280 = v451[0];
    v281 = v451[1];
    *(_OWORD *)v282 = *(_OWORD *)v452;
    *(_OWORD *)&v282[9] = *(_OWORD *)&v452[9];
    if (!v133)
      goto LABEL_172;
    v283 = v132;
    if (!v131)
      goto LABEL_172;
    v284 = v130;
    if (!v129)
      goto LABEL_172;
    v285 = v128;
    if (!v127)
      goto LABEL_172;
    v286 = v126;
    if ((v31 & 0xFF00000000) == 0)
      goto LABEL_172;
    v287 = v31;
    if ((v32 & 0xFF00000000) == 0)
      goto LABEL_172;
    v288 = v32;
    if (!HIBYTE(v33))
      goto LABEL_172;
    v289 = v33;
    v290 = BYTE2(v33);
    if (v34 <= 0xFFu)
      goto LABEL_172;
    v291 = v34;
    if (v35 <= 0xFFu)
      goto LABEL_172;
    v292 = v35;
    if (!v450[8])
      goto LABEL_172;
    v44 = (WTF::StringImpl **)WebCore::Color::Color();
    if (v36 <= 0xFFu)
      goto LABEL_172;
    v293 = v36;
    if (!v449)
      goto LABEL_172;
    v55 = v447;
    v447 = 0;
    v294 = v55;
    v56 = v448;
    v448 = 0;
    v295 = v56;
    if (!v446)
      goto LABEL_172;
    v57 = v444;
    v444 = 0;
    v296 = v57;
    v58 = v445;
    v445 = 0;
    v297 = v58;
    if (!v443)
      goto LABEL_172;
    v59 = v441;
    v441 = 0;
    v298 = v59;
    v60 = v442;
    v442 = 0;
    v299 = v60;
    if (v125 <= 0xFFu)
      goto LABEL_172;
    v300 = v125;
    if (v124 <= 0xFFu)
      goto LABEL_172;
    v301 = v124;
    if ((v40 & 0xFF0000) == 0)
      goto LABEL_172;
    v302 = v40;
    if (!v440)
      goto LABEL_172;
    v61 = v439;
    v439 = 0;
    v303 = v61;
    if (!v438)
      goto LABEL_172;
    v304 = v436;
    v305 = v437;
    if (!v435)
      goto LABEL_172;
    v62 = v434;
    v434 = 0;
    v306 = v62;
    if (!v433)
      goto LABEL_172;
    v63 = v431;
    v431 = 0;
    v307 = v63;
    v64 = v432;
    v432 = 0;
    v308 = v64;
    if (!v430)
      goto LABEL_172;
    v44 = (WTF::StringImpl **)std::__optional_move_base<WebCore::ApplicationManifest,false>::__optional_move_base[abi:sn180100](v309, (uint64_t)v429);
    if (v123 <= 0xFFu)
      goto LABEL_172;
    v309[272] = v123;
    if (v122 <= 0xFFu)
      goto LABEL_172;
    v309[273] = v122;
    if (v121 <= 0xFFu)
      goto LABEL_172;
    v309[274] = v121;
    if (!v428)
      goto LABEL_172;
    v65 = v418;
    v310 = v417;
    v418 = 0;
    v311 = v65;
    v66 = v419;
    v419 = 0;
    v312 = v66;
    v67 = v420;
    v420 = 0;
    v313 = v67;
    v68 = v421;
    v421 = 0;
    v314 = v68;
    v69 = v422;
    v422 = 0;
    v315 = v69;
    v70 = v423;
    v423 = 0;
    v316 = v70;
    v71 = v424;
    v424 = 0;
    v317 = v71;
    v72 = v425;
    v425 = 0;
    v318 = v72;
    v73 = v426;
    v426 = 0;
    v319 = v73;
    v74 = v427;
    v427 = 0;
    v320 = v74;
    if (!v416)
      goto LABEL_172;
    LOBYTE(v321) = 0;
    v325 = 0;
    if (v415)
    {
      v321 = v411;
      v322 = v412;
      v75 = v413;
      v413 = 0;
      v323 = v75;
      v76 = v414;
      v414 = 0;
      v324 = v76;
      v325 = 1;
    }
    if (!v410)
      goto LABEL_172;
    v44 = (WTF::StringImpl **)std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v326, (uint64_t)v409);
    if (!v408)
      goto LABEL_172;
    v327 = v406;
    v328 = v407;
    if (!v405)
      goto LABEL_172;
    v77 = v404;
    v404 = 0;
    v329 = v77;
    if (!v403)
      goto LABEL_172;
    v78 = v401;
    v401 = 0;
    v330 = v78;
    v79 = v402;
    v402 = 0;
    v331 = v79;
    if (!v400)
      goto LABEL_172;
    v80 = v399;
    v399 = 0;
    v332 = v80;
    if (v120 <= 0xFFu)
      goto LABEL_172;
    v333 = v120;
    if (v119 <= 0xFFu)
      goto LABEL_172;
    v334 = v119;
    if (!v398)
      goto LABEL_172;
    LOBYTE(v335) = 0;
    v339 = 0;
    if (v397)
    {
      v81 = v393;
      v393 = 0;
      v335 = v81;
      v82 = v394;
      v394 = 0;
      v336 = v82;
      LODWORD(v81) = v395;
      v395 = 0;
      v337 = (int)v81;
      LOBYTE(v81) = v396;
      v396 = 0;
      v338 = (char)v81;
      v339 = 1;
    }
    if (!HIWORD(v43))
      goto LABEL_172;
    v340 = v43;
    v341 = BYTE4(v43);
    if (v118 <= 0xFFu)
      goto LABEL_172;
    v342 = v118;
    if (!v392)
      goto LABEL_172;
    v83 = v391;
    v391 = 0;
    v343 = v83;
    if (v117 <= 0xFFu)
      goto LABEL_172;
    v344 = v117;
    if (v116 <= 0xFFu)
      goto LABEL_172;
    v345 = v116;
    if (v115 <= 0xFFu)
      goto LABEL_172;
    v346 = v115;
    if (v114 <= 0xFFu)
      goto LABEL_172;
    v347 = v114;
    if (v113 <= 0xFFu)
      goto LABEL_172;
    v348 = v113;
    if (v112 <= 0xFFu)
      goto LABEL_172;
    v349 = v112;
    if (v111 <= 0xFFu)
      goto LABEL_172;
    v350 = v111;
    if (v110 <= 0xFFu)
      goto LABEL_172;
    v351 = v110;
    if (v109 <= 0xFFu)
      goto LABEL_172;
    v352 = v109;
    if (v108 <= 0xFFu)
      goto LABEL_172;
    v353 = v108;
    if (v107 <= 0xFFu)
      goto LABEL_172;
    v354 = v107;
    if (v106 <= 0xFFu)
      goto LABEL_172;
    v355 = v106;
    if (v105 <= 0xFFu)
      goto LABEL_172;
    v356 = v105;
    if (v104 <= 0xFFu)
      goto LABEL_172;
    v357 = v104;
    if (v103 <= 0xFFu)
      goto LABEL_172;
    v358 = v103;
    if (ShouldRelaxThirdPartyCookie <= 0xFFu)
      goto LABEL_172;
    v359 = ShouldRelaxThirdPartyCookie;
    if (v101 <= 0xFFu)
      goto LABEL_172;
    v360 = v101;
    if (v100 <= 0xFFu)
      goto LABEL_172;
    v361 = v100;
    if (v99 <= 0xFFu)
      goto LABEL_172;
    v362 = v99;
    if (v98 <= 0xFFu)
      goto LABEL_172;
    v363 = v98;
    if (v97 <= 0xFFu)
      goto LABEL_172;
    v364 = v97;
    if (!v390)
      goto LABEL_172;
    std::__optional_move_base<WebKit::RemotePageParameters,false>::__optional_move_base[abi:sn180100](v365, (uint64_t)v389);
    v44 = a2;
    if (!v388)
      goto LABEL_172;
    v366 = v386;
    v367 = v387;
    if (!v385)
      goto LABEL_172;
    v368 = v383;
    v369 = v384;
    if (!v382)
      goto LABEL_172;
    v84 = v380;
    v380 = 0;
    v370 = v84;
    v85 = v381;
    v381 = 0;
    v371 = v85;
    if (!v379 || (v86 = v377, v377 = 0, v372 = v86, v87 = v378, v378 = 0, v373 = v87, !v376))
    {
LABEL_172:
      __break(1u);
LABEL_173:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v44, v45);
      goto LABEL_161;
    }
    v88 = v375;
    v375 = 0;
    v374 = v88;
    *(_BYTE *)(WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)a2, (uint64_t *)&v207) + 1488) = 1;
    WebKit::WebPageCreationParameters::~WebPageCreationParameters(&v207);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 1488) = 0;
  }
  if (v376)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v375);
  if (v379)
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v377, v45);
  if (v382)
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v380, v45);
  if (v390)
    std::__optional_destruct_base<WebKit::RemotePageParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v389, v45);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v391, v45);
  if (v398 && v397 && v393)
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)v393, (WTF::StringImpl *)v394);
  if (v400 && v399)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v399, v89);
  if (v403)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v401, v89);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v404, v89);
  if (v410)
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v409, v90);
  if (v416 && v415)
    WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v413, v90);
  std::__optional_destruct_base<WebKit::UserContentControllerParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v417, (WTF::StringImpl *)v90);
  if (v430 && v429[264])
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v429, v45);
  if (v433)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v431, v45);
  if (v435)
  {
    v44 = v434;
    if (v434)
      goto LABEL_173;
  }
LABEL_161:
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v439, v45);
  if (v443)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v441, v91);
  if (v446)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v444, v91);
  if (v449)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v447, v91);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v450, v91);
  if (v456)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v454, v92);
  if (v459)
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v457, v92);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v460, (WTF::StringImpl *)v92);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v465, v93);
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v466, v94);
  return std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v468);
}

void sub_196CF9FD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  WTF::StringImpl *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  WTF::StringImpl *v10;

  WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)&STACK[0x2B8]);
  if (LOBYTE(STACK[0x890]))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x888]);
  if (LOBYTE(STACK[0x8A8]))
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x898], v3);
  if (LOBYTE(STACK[0x8C0]))
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x8B0], v3);
  if (LOBYTE(STACK[0x9D8]))
    std::__optional_destruct_base<WebKit::RemotePageParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x908], (WTF::StringImpl *)v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x9E0], (WTF::StringImpl *)v3);
  if (LOBYTE(STACK[0xA10]) && LOBYTE(STACK[0xA08]) && STACK[0x9F0])
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)STACK[0x9F0], (WTF::StringImpl *)LODWORD(STACK[0x9F8]));
  if (LOBYTE(STACK[0xA20]) && STACK[0xA18])
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)STACK[0xA18], v4);
  if (LOBYTE(STACK[0xA38]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xA28], v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0xA40], v4);
  if (LOBYTE(STACK[0xA78]))
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0xA68], v5);
  if (LOBYTE(STACK[0xAA8]) && LOBYTE(STACK[0xAA0]))
    WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xA90], v5);
  std::__optional_destruct_base<WebKit::UserContentControllerParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0xAB0], (WTF::StringImpl *)v5);
  if (LOBYTE(STACK[0xC20]) && LOBYTE(STACK[0xC18]))
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)&STACK[0xB10], v6);
  if (LOBYTE(STACK[0xC38]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xC28], v6);
  if (LOBYTE(STACK[0xC48]) && STACK[0xC40])
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)STACK[0xC40], (WTF::StringImpl *)v6);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0xC68], (WTF::StringImpl *)v6);
  if (LOBYTE(STACK[0xC88]))
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xC78], v7);
  if (LOBYTE(STACK[0xCA0]))
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xC90], v7);
  if (LOBYTE(STACK[0xCB8]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xCA8], v7);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0xCC0], v7);
  if (LOBYTE(STACK[0xD20]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xD10], v8);
  if (*(_BYTE *)(v1 - 232))
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v1 - 248, v8);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v1 - 224, (WTF::StringImpl *)v8);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v1 - 184, v9);
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationOptions,false>::~__optional_destruct_base[abi:sn180100](v1 - 168, v10);
  std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100](v1 - 144);
  _Unwind_Resume(a1);
}

void sub_196CFA408()
{
  JUMPOUT(0x196CFA2BCLL);
}

void sub_196CFA418()
{
  JUMPOUT(0x196CFA2DCLL);
}

void sub_196CFA428()
{
  JUMPOUT(0x196CFA2ECLL);
}

void sub_196CFA430()
{
  JUMPOUT(0x196CFA2FCLL);
}

void sub_196CFA438()
{
  JUMPOUT(0x196CFA304);
}

void sub_196CFA444()
{
  JUMPOUT(0x196CFA314);
}

void sub_196CFA44C()
{
  JUMPOUT(0x196CFA330);
}

void sub_196CFA454()
{
  JUMPOUT(0x196CFA338);
}

void sub_196CFA468()
{
  JUMPOUT(0x196CFA350);
}

void sub_196CFA470()
{
  JUMPOUT(0x196CFA360);
}

void sub_196CFA478()
{
  JUMPOUT(0x196CFA370);
}

void sub_196CFA484()
{
  JUMPOUT(0x196CFA378);
}

void sub_196CFA498()
{
  JUMPOUT(0x196CFA388);
}

void sub_196CFA4A0()
{
  JUMPOUT(0x196CFA398);
}

void sub_196CFA4A8()
{
  JUMPOUT(0x196CFA3A8);
}

void sub_196CFA4B4()
{
  JUMPOUT(0x196CFA3B0);
}

void sub_196CFA508()
{
  JUMPOUT(0x196CFA3C0);
}

void sub_196CFA568()
{
  JUMPOUT(0x196CFA3D0);
}

void sub_196CFA574()
{
  JUMPOUT(0x196CFA3D8);
}

void sub_196CFA5B8()
{
  JUMPOUT(0x196CFA3E0);
}

void sub_196CFA5C4()
{
  JUMPOUT(0x196CFA3E8);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>@<X0>(WTF::StringImpl *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    v5 = *(_QWORD *)a1;
    v6 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    result = (WTF::StringImpl *)*((_QWORD *)a1 + 3);
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196CFA62C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 8))
  {
    if (*(_QWORD *)v2)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>@<X0>(WTF::StringImpl *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  WTF::StringImpl **v9;
  int v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  WTF::StringImpl *v18;
  char v19;
  WTF::StringImpl **v20;

  v2 = (uint64_t *)result;
  v4 = *((_QWORD *)result + 1);
  v5 = *(_QWORD *)result;
  v6 = ((*((_QWORD *)result + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v14 = 0;
    v15 = 0;
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    v16 = *((_QWORD *)result + 3);
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5, v4);
        v15 = *v2;
        v14 = v2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_23;
  }
  v8 = (int *)(v5 + v6);
  *((_QWORD *)result + 2) = v8 + 1;
  if (!v5)
  {
    v14 = v4;
    v15 = 0;
LABEL_23:
    *v2 = 0;
    v2[1] = 0;
    result = (WTF::StringImpl *)v2[3];
    if (result)
    {
      if (v14)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v15);
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  v9 = 0;
  v10 = *v8;
  v20 = 0;
  if (v10)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(v2, &v18);
      if (!v19)
        break;
      if ((unint64_t)v18 + 1 < 2)
        break;
      result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v20, &v18, v12, (uint64_t)v17);
      if (!v17[16])
        break;
      if (v19)
      {
        result = v18;
        v18 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (!--v10)
      {
        v9 = v20;
        goto LABEL_8;
      }
    }
    *a2 = 0;
    a2[8] = 0;
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v11);
    result = (WTF::StringImpl *)v20;
    if (v20)
      return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v20, v13);
  }
  else
  {
LABEL_8:
    *(_QWORD *)a2 = v9;
    a2[8] = 1;
  }
  return result;
}

void sub_196CFA7DC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl **a14)
{
  WTF::StringImpl *v15;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12, a2);
  if (a14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageCreationParameters::WebPageCreationParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  v5 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 28) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  v6 = *((_BYTE *)a2 + 36);
  *((_BYTE *)a2 + 36) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 53) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(a1 + 48) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(a1 + 52) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(a1 + 56) = v7;
  LOBYTE(v7) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = 0;
  *(_BYTE *)(a1 + 60) = v7;
  v8 = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_OWORD *)(a1 + 64) = v8;
  v9 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  WebCore::Color::Color();
  v10 = *(_OWORD *)(a2 + 15);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 120) = v10;
  v11 = *(_OWORD *)(a2 + 19);
  v12 = *(_OWORD *)(a2 + 21);
  v13 = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  v14 = a2[27];
  a2[27] = 0;
  v15 = *((_BYTE *)a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = v14;
  *(_BYTE *)(a1 + 224) = v15;
  *(_QWORD *)(a1 + 240) = 0;
  v16 = a2[29];
  a2[29] = 0;
  *(_QWORD *)(a1 + 232) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = 0;
  *(_DWORD *)(a1 + 240) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = 0;
  *(_DWORD *)(a1 + 244) = v16;
  v17 = *(_OWORD *)(a2 + 31);
  v18 = *(_OWORD *)(a2 + 35);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 280) = v18;
  *(_OWORD *)(a1 + 248) = v17;
  v19 = *(_OWORD *)(a2 + 37);
  v20 = *(_OWORD *)(a2 + 39);
  v21 = *(_OWORD *)(a2 + 41);
  *(_DWORD *)(a1 + 343) = *(_DWORD *)((char *)a2 + 343);
  *(_OWORD *)(a1 + 312) = v20;
  *(_OWORD *)(a1 + 328) = v21;
  *(_OWORD *)(a1 + 296) = v19;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  v22 = a2[44];
  a2[44] = 0;
  *(_QWORD *)(a1 + 352) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 90);
  *((_DWORD *)a2 + 90) = 0;
  *(_DWORD *)(a1 + 360) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 91);
  *((_DWORD *)a2 + 91) = 0;
  *(_DWORD *)(a1 + 364) = v22;
  v23 = *((_OWORD *)a2 + 23);
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
  *(_OWORD *)(a1 + 368) = v23;
  v24 = *((_OWORD *)a2 + 25);
  v25 = *((_OWORD *)a2 + 26);
  v26 = *((_OWORD *)a2 + 27);
  *(_OWORD *)(a1 + 448) = *((_OWORD *)a2 + 28);
  *(_OWORD *)(a1 + 432) = v26;
  *(_OWORD *)(a1 + 416) = v25;
  *(_OWORD *)(a1 + 400) = v24;
  v27 = *((_OWORD *)a2 + 29);
  v28 = *((_OWORD *)a2 + 30);
  v29 = *((_OWORD *)a2 + 31);
  *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
  *(_OWORD *)(a1 + 496) = v29;
  *(_OWORD *)(a1 + 480) = v28;
  *(_OWORD *)(a1 + 464) = v27;
  WebCore::Color::Color();
  *(_BYTE *)(a1 + 528) = *((_BYTE *)a2 + 528);
  *(_OWORD *)(a1 + 536) = 0u;
  v30 = a2[67];
  a2[67] = 0;
  *(_QWORD *)(a1 + 536) = v30;
  LODWORD(v30) = *((_DWORD *)a2 + 136);
  *((_DWORD *)a2 + 136) = 0;
  *(_DWORD *)(a1 + 544) = v30;
  LODWORD(v30) = *((_DWORD *)a2 + 137);
  *((_DWORD *)a2 + 137) = 0;
  *(_DWORD *)(a1 + 548) = v30;
  *(_OWORD *)(a1 + 552) = 0u;
  v31 = a2[69];
  a2[69] = 0;
  *(_QWORD *)(a1 + 552) = v31;
  LODWORD(v31) = *((_DWORD *)a2 + 140);
  *((_DWORD *)a2 + 140) = 0;
  *(_DWORD *)(a1 + 560) = v31;
  LODWORD(v31) = *((_DWORD *)a2 + 141);
  *((_DWORD *)a2 + 141) = 0;
  *(_DWORD *)(a1 + 564) = v31;
  *(_OWORD *)(a1 + 568) = 0u;
  v32 = a2[71];
  a2[71] = 0;
  *(_QWORD *)(a1 + 568) = v32;
  LODWORD(v32) = *((_DWORD *)a2 + 144);
  *((_DWORD *)a2 + 144) = 0;
  *(_DWORD *)(a1 + 576) = v32;
  LODWORD(v32) = *((_DWORD *)a2 + 145);
  *((_DWORD *)a2 + 145) = 0;
  *(_DWORD *)(a1 + 580) = v32;
  *(_DWORD *)(a1 + 584) = *((_DWORD *)a2 + 146);
  v33 = a2[74];
  a2[74] = 0;
  *(_QWORD *)(a1 + 592) = v33;
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 75);
  *(_QWORD *)(a1 + 616) = 0;
  v34 = a2[77];
  a2[77] = 0;
  *(_QWORD *)(a1 + 616) = v34;
  *(_OWORD *)(a1 + 624) = 0u;
  v35 = a2[78];
  a2[78] = 0;
  *(_QWORD *)(a1 + 624) = v35;
  LODWORD(v35) = *((_DWORD *)a2 + 158);
  *((_DWORD *)a2 + 158) = 0;
  *(_DWORD *)(a1 + 632) = v35;
  LODWORD(v35) = *((_DWORD *)a2 + 159);
  *((_DWORD *)a2 + 159) = 0;
  *(_DWORD *)(a1 + 636) = v35;
  std::__optional_move_base<WebCore::ApplicationManifest,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 640), (uint64_t)(a2 + 80));
  v36 = *((_WORD *)a2 + 456);
  *(_BYTE *)(a1 + 914) = *((_BYTE *)a2 + 914);
  *(_WORD *)(a1 + 912) = v36;
  *(_QWORD *)(a1 + 920) = a2[115];
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  v37 = a2[116];
  a2[116] = 0;
  *(_QWORD *)(a1 + 928) = v37;
  LODWORD(v37) = *((_DWORD *)a2 + 234);
  *((_DWORD *)a2 + 234) = 0;
  *(_DWORD *)(a1 + 936) = v37;
  LODWORD(v37) = *((_DWORD *)a2 + 235);
  *((_DWORD *)a2 + 235) = 0;
  *(_DWORD *)(a1 + 940) = v37;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  v38 = a2[118];
  a2[118] = 0;
  *(_QWORD *)(a1 + 944) = v38;
  LODWORD(v38) = *((_DWORD *)a2 + 238);
  *((_DWORD *)a2 + 238) = 0;
  *(_DWORD *)(a1 + 952) = v38;
  LODWORD(v38) = *((_DWORD *)a2 + 239);
  *((_DWORD *)a2 + 239) = 0;
  *(_DWORD *)(a1 + 956) = v38;
  *(_QWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 960) = 0;
  v39 = a2[120];
  a2[120] = 0;
  *(_QWORD *)(a1 + 960) = v39;
  LODWORD(v39) = *((_DWORD *)a2 + 242);
  *((_DWORD *)a2 + 242) = 0;
  *(_DWORD *)(a1 + 968) = v39;
  LODWORD(v39) = *((_DWORD *)a2 + 243);
  *((_DWORD *)a2 + 243) = 0;
  *(_DWORD *)(a1 + 972) = v39;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  v40 = a2[122];
  a2[122] = 0;
  *(_QWORD *)(a1 + 976) = v40;
  LODWORD(v40) = *((_DWORD *)a2 + 246);
  *((_DWORD *)a2 + 246) = 0;
  *(_DWORD *)(a1 + 984) = v40;
  LODWORD(v40) = *((_DWORD *)a2 + 247);
  *((_DWORD *)a2 + 247) = 0;
  *(_DWORD *)(a1 + 988) = v40;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  v41 = a2[124];
  a2[124] = 0;
  *(_QWORD *)(a1 + 992) = v41;
  LODWORD(v41) = *((_DWORD *)a2 + 250);
  *((_DWORD *)a2 + 250) = 0;
  *(_DWORD *)(a1 + 1000) = v41;
  LODWORD(v41) = *((_DWORD *)a2 + 251);
  *((_DWORD *)a2 + 251) = 0;
  *(_DWORD *)(a1 + 1004) = v41;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 1040) = 0;
  if (*((_BYTE *)a2 + 1040))
  {
    v42 = a2[126];
    *(_BYTE *)(a1 + 1016) = *((_BYTE *)a2 + 1016);
    *(_QWORD *)(a1 + 1008) = v42;
    *(_QWORD *)(a1 + 1032) = 0;
    *(_QWORD *)(a1 + 1024) = 0;
    v43 = a2[128];
    a2[128] = 0;
    *(_QWORD *)(a1 + 1024) = v43;
    LODWORD(v43) = *((_DWORD *)a2 + 258);
    *((_DWORD *)a2 + 258) = 0;
    *(_DWORD *)(a1 + 1032) = v43;
    LODWORD(v43) = *((_DWORD *)a2 + 259);
    *((_DWORD *)a2 + 259) = 0;
    *(_DWORD *)(a1 + 1036) = v43;
    *(_BYTE *)(a1 + 1040) = 1;
  }
  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 1048), (uint64_t)(a2 + 131));
  *(_OWORD *)(a1 + 1064) = *(_OWORD *)(a2 + 133);
  v44 = a2[135];
  a2[135] = 0;
  *(_QWORD *)(a1 + 1080) = v44;
  *(_OWORD *)(a1 + 1088) = 0u;
  v45 = a2[136];
  a2[136] = 0;
  *(_QWORD *)(a1 + 1088) = v45;
  LODWORD(v45) = *((_DWORD *)a2 + 274);
  *((_DWORD *)a2 + 274) = 0;
  *(_DWORD *)(a1 + 1096) = v45;
  LODWORD(v45) = *((_DWORD *)a2 + 275);
  *((_DWORD *)a2 + 275) = 0;
  *(_DWORD *)(a1 + 1100) = v45;
  *(_QWORD *)(a1 + 1104) = 0;
  v46 = a2[138];
  a2[138] = 0;
  *(_QWORD *)(a1 + 1104) = v46;
  *(_WORD *)(a1 + 1112) = *((_WORD *)a2 + 556);
  std::__optional_move_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__optional_move_base[abi:sn180100](a1 + 1120, a2 + 140);
  v47 = *((_DWORD *)a2 + 288);
  *(_DWORD *)(a1 + 1155) = *(_DWORD *)((char *)a2 + 1155);
  *(_DWORD *)(a1 + 1152) = v47;
  v48 = a2[145];
  a2[145] = 0;
  *(_QWORD *)(a1 + 1160) = v48;
  v49 = *((_OWORD *)a2 + 73);
  *(_QWORD *)(a1 + 1181) = *(uint64_t *)((char *)a2 + 1181);
  *(_OWORD *)(a1 + 1168) = v49;
  std::__optional_move_base<WebKit::RemotePageParameters,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 1192), (uint64_t)(a2 + 149));
  v50 = *(_OWORD *)(a2 + 175);
  v51 = *(_OWORD *)(a2 + 177);
  *(_OWORD *)(a1 + 1425) = *(_OWORD *)((char *)a2 + 1425);
  *(_OWORD *)(a1 + 1400) = v50;
  *(_OWORD *)(a1 + 1416) = v51;
  *(_OWORD *)(a1 + 1448) = 0u;
  v52 = a2[181];
  a2[181] = 0;
  *(_QWORD *)(a1 + 1448) = v52;
  LODWORD(v52) = *((_DWORD *)a2 + 364);
  *((_DWORD *)a2 + 364) = 0;
  *(_DWORD *)(a1 + 1456) = v52;
  LODWORD(v52) = *((_DWORD *)a2 + 365);
  *((_DWORD *)a2 + 365) = 0;
  *(_DWORD *)(a1 + 1460) = v52;
  *(_OWORD *)(a1 + 1464) = 0u;
  v53 = a2[183];
  a2[183] = 0;
  *(_QWORD *)(a1 + 1464) = v53;
  LODWORD(v53) = *((_DWORD *)a2 + 368);
  *((_DWORD *)a2 + 368) = 0;
  *(_DWORD *)(a1 + 1472) = v53;
  LODWORD(v53) = *((_DWORD *)a2 + 369);
  *((_DWORD *)a2 + 369) = 0;
  *(_DWORD *)(a1 + 1476) = v53;
  v54 = a2[185];
  a2[185] = 0;
  *(_QWORD *)(a1 + 1480) = v54;
  return a1;
}

void sub_196CFAF98(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, _QWORD *a13, _QWORD *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl ***v17;
  WTF **v18;
  WTF **v19;
  uint64_t v20;
  WebCore::ApplicationManifest *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WTF::StringImpl *v48;

  v23 = *(WTF::StringImpl **)(v14 + 1160);
  *(_QWORD *)(v14 + 1160) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (*(_BYTE *)(v14 + 1144) && *v17)
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(*v17, (WTF::StringImpl *)*(unsigned int *)(v14 + 1128));
  v24 = *(WTF::StringImpl ***)(v14 + 1104);
  if (v24)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v24, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  v26 = *(WTF::StringImpl **)(v14 + 1080);
  *(_QWORD *)(v14 + 1080) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v22, v25);
  if (*(_BYTE *)(v14 + 1040))
    WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 1024, v27);
  WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 992, (WTF::StringImpl *)v27);
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 976, v28);
  WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 960, v29);
  WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)(v14 + 944), v30);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 928, v31);
  if (*(_BYTE *)(v14 + 904))
    WebCore::ApplicationManifest::~ApplicationManifest(v21, v32);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 624, v32);
  v34 = *(WTF::StringImpl ***)(v14 + 616);
  if (v34)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v33);
  v35 = *(WTF::StringImpl **)(v14 + 592);
  *(_QWORD *)(v14 + 592) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20, v33);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a11, v36);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a12, v37);
  if ((*a13 & 0x8000000000000) != 0)
  {
    v39 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v39);
      WTF::fastFree((WTF *)v39, v38);
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16 + 120, v38);
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, v42);
  v44 = *(WTF::StringImpl **)(v14 + 216);
  *(_QWORD *)(v14 + 216) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  if ((*a14 & 0x8000000000000) != 0)
  {
    v45 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v43);
    }
  }
  v48 = *(WTF::StringImpl **)(v14 + 88);
  *(_QWORD *)(v14 + 88) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v43);
    else
      *(_DWORD *)v48 -= 2;
  }
  if (*v19)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*v19, (WTF::StringImpl *)*(unsigned int *)(v14 + 48));
  if (*v18)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*v18, (WTF::StringImpl *)*(unsigned int *)(v14 + 24));
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<std::optional<WebCore::FloatSize>>(unint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::decode<IPC::Decoder>(a1);
  if ((v3 & 0xFF00000000) == 0)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::decode<IPC::Decoder>(unint64_t *a1)
{
  unsigned __int16 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char v7;

  v2 = IPC::Decoder::decode<BOOL>(a1);
  if (v2 < 0x100u)
  {
    v3 = 0;
    v4 = 0;
  }
  else if ((_BYTE)v2)
  {
    v6 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    v4 = v6 & 0xFFFFFFFFFFFFFF00;
    v3 = v6;
    if (!v7)
    {
      v3 = 0;
      v4 = 0;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  return v4 | v3;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::Color>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196CFB330(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  void *v5;
  char v6;
  _BYTE v7[8];
  char v8;

  result = IPC::Decoder::decode<BOOL>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *a2 = 0;
    a2[16] = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      IPC::Decoder::decode<WebCore::Color>(a1, v7);
      v6 = v8;
      if (v8)
      {
        WebCore::Color::Color();
        v6 = 1;
        a2[8] = 1;
      }
      else
      {
        *a2 = 0;
      }
    }
    else
    {
      v7[0] = 0;
      v8 = 0;
      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v7);
      v6 = 1;
    }
    a2[16] = v6;
    return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  return result;
}

void sub_196CFB3F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  WebKit::WebsiteDataStore *v6;
  unsigned int **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  CFTypeRef *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;

  v2 = WTF::fastMalloc((WTF *)0x10);
  v3 = (unsigned int *)v2;
  *(_DWORD *)v2 = 1;
  v4 = *a1;
  *a1 = 0;
  *(_QWORD *)(v2 + 8) = v4;
  LOBYTE(v4) = atomic_load(WebKit::hasInitializedManagedDomains);
  if ((v4 & 1) != 0)
  {
    {
      if (WebKit::managedDomains(void)::managedDomains
        && *(_DWORD *)(WebKit::managedDomains(void)::managedDomains - 12))
      {
        do
          v5 = __ldaxr((unsigned int *)v2);
        while (__stlxr(v5 + 1, (unsigned int *)v2));
        v18 = (unsigned int *)v2;
        {
          if (WebKit::globalDefaultDataStore(void)::globalDefaultDataStore)
            v6 = *(WebKit::WebsiteDataStore **)(WebKit::globalDefaultDataStore(void)::globalDefaultDataStore + 8);
          else
            v6 = 0;
        }
        else
        {
          v6 = 0;
          WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = 0;
        }
        v7 = WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(&v18, v6, &WebKit::managedDomains(void)::managedDomains);
        WebKit::allDataStores((WebKit *)v7);
        v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&WebKit::allDataStores(void)::map);
        v9 = v8;
        v11 = v10;
        if (WebKit::allDataStores(void)::map)
          v12 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
        else
          v12 = 0;
        if ((_QWORD *)v12 != v8)
        {
          do
          {
            v13 = *(CFTypeRef **)(v9[1] + 8);
            CFRetain(v13[1]);
            WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(&v18, (WebKit::WebsiteDataStore *)v13, &WebKit::managedDomains(void)::managedDomains);
            CFRelease(v13[1]);
            while (1)
            {
              v9 += 2;
              if (v9 == v11)
                break;
              if ((unint64_t)(*v9 + 1) > 1)
                goto LABEL_19;
            }
            v9 = v11;
LABEL_19:
            ;
          }
          while (v9 != (_QWORD *)v12);
        }
        v18 = 0;
        do
        {
          v14 = __ldaxr(v3);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v3));
        if (!v15)
        {
          atomic_store(1u, v3);
          v19 = v3;
          WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v19);
        }
      }
    }
    else
    {
      WebKit::managedDomains(void)::managedDomains = 0;
    }
  }
  do
  {
    v16 = __ldaxr(v3);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v3));
  if (!v17)
  {
    atomic_store(1u, v3);
    v19 = v3;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v19);
  }
}

WTF *WebKit::WebPage::setActivityState(WebKit::WebPage *this, __int16 a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v7;
  uint64_t v8;
  __int16 v9;
  WTF *result;
  WebKit::WebProcess *v11;

  v7 = *((_WORD *)this + 916) ^ a2;
  *((_WORD *)this + 916) = a2;
  v8 = v7;
  if (v7)
    WebKit::WebPage::updateThrottleState(this);
  if (*((_QWORD *)this + 6))
  {
    v9 = *((_WORD *)this + 457);
    *((_WORD *)this + 457) = v8;
    WebCore::Page::setActivityState();
    *((_WORD *)this + 457) = v9;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 320))(*((_QWORD *)this + 9), v8, a3, a4);
  {
    result = (WTF *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = WebKit::WebProcess::WebProcess(v11);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
  }
  if ((v8 & 4) != 0)
    result = (WTF *)WTF::isIntegralOrPointerType(result);
  if ((v8 & 0x10) != 0)
    result = WebKit::WebPage::updateIsInWindow(this, 0);
  if ((v8 & 4) != 0)
    result = (WTF *)WebKit::WebPage::visibilityDidChange((uint64_t)this);
  if ((v8 & 1) != 0)
    return (WTF *)WebKit::WebPage::windowActivityDidChange(this);
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t result;
  WTF *v2;
  void *v3;

  result = *a1;
  if (result)
  {
    v2 = (WTF *)WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>::~CallbackAggregatorOnThread(result);
    return WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>::~CallbackAggregatorOnThread(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(a1 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    *v2 = 0;
  }
  return a1;
}

void sub_196CFB780(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(void)>::operator()(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_196CFB7E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::RunLoop *WebKit::WebPage::updateThrottleState(WebKit::WebPage *this)
{
  BOOL v2;
  char v3;
  char *v4;
  WTF::RunLoop *result;
  uint64_t v6;
  uint64_t v7;
  WTF::RunLoop *v8;

  if (*((_BYTE *)this + 1834))
    v2 = (*((_WORD *)this + 916) & 0x1E1) == 32;
  else
    v2 = 0;
  v3 = v2;
  v4 = (char *)this + 1840;
  if (v2)
    result = (WTF::RunLoop *)PAL::HysteresisActivity::stop((uint64_t)v4);
  else
    result = (WTF::RunLoop *)PAL::HysteresisActivity::start((uint64_t)v4);
  v6 = *((_QWORD *)this + 6);
  if (v6 && (*(_QWORD *)(*(_QWORD *)(v6 + 112) + 696) & 0x80) != 0)
  {
    WTF::RunLoop::main(result);
    v7 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E34FA390;
    *(_BYTE *)(v7 + 8) = v3;
    v8 = (WTF::RunLoop *)v7;
    WTF::RunLoop::dispatch();
    result = v8;
    if (v8)
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

uint64_t PAL::HysteresisActivity::start(uint64_t this)
{
  _QWORD *v1;
  WTF::RunLoop::TimerBase *v2;

  if (!*(_BYTE *)(this + 48))
  {
    v1 = (_QWORD *)this;
    *(_BYTE *)(this + 48) = 1;
    v2 = (WTF::RunLoop::TimerBase *)(this + 16);
    if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 16)))
      return WTF::RunLoop::TimerBase::stop(v2);
    else
      return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 16))(*v1, 0);
  }
  return this;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::activityStateDidChange(WebKit::RemoteLayerTreeDrawingArea *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;

  if (a3)
  {
    *(_BYTE *)(*((_QWORD *)a1 + 10) + 208) = 1;
    *((_QWORD *)a1 + 34) = a3;
    WebKit::RemoteLayerTreeDrawingArea::startRenderingUpdateTimer(a1);
  }
  v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_196CFB978(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16SetActivityStateEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore13ActivityStateEEEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16SetActivityStateEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore13ActivityStateEEEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3415;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>(uint64_t *a1)
{
  int v2;
  _BOOL4 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  __int16 v10;

  v2 = IPC::Decoder::decode<unsigned short>(a1);
  v3 = (v2 & 0xFC00) != 0 || (v2 & 0xFF0000) == 0;
  if (v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v10 = v2;
      v9 = v3;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v3 = v9;
      LOWORD(v2) = v10;
    }
  }
  if (v3)
    return 0;
  else
    return (unsigned __int16)v2 | 0x10000u;
}

uint64_t PAL::HysteresisActivity::stop(uint64_t this)
{
  if (*(_BYTE *)(this + 48))
  {
    *(_BYTE *)(this + 48) = 0;
    return WTF::RunLoop::TimerBase::start();
  }
  return this;
}

unint64_t IPC::Decoder::decode<std::optional<WebCore::FloatRect>>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::FloatRect>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[20])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::Decoder::decode<std::optional<WebCore::ApplicationManifest>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebCore::ApplicationManifest>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[272])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196CFBBC0(_Unwind_Exception *exception_object, void *a2)
{
  WebCore::ApplicationManifest *v2;

  if (*((_BYTE *)v2 + 272))
  {
    if (*((_BYTE *)v2 + 264))
      WebCore::ApplicationManifest::~ApplicationManifest(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::ViewportArguments>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ViewportArguments>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 60))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::optional<WebKit::WebExtensionControllerParameters>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::WebExtensionControllerParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 40))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196CFBCE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::UserContentControllerParameters>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::UserContentControllerParameters,void>::decode(a1, a2);
  if (!a1[88])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196CFBD50(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::UserContentControllerParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::WebPageGroupData>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebPageGroupData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196CFBDB8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationOptions,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::WebPageGroupData,void>::decode(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  IPC::Decoder::decode<WTF::String>(a2, &v8);
  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6 = *a2;
  if (!*a2)
    goto LABEL_7;
  LOBYTE(v6) = v9;
  if (!v9 || (v6 = v8, v8 = 0, !(_BYTE)v5))
  {
    __break(1u);
LABEL_7:
    *(_BYTE *)a1 = 0;
    goto LABEL_5;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v4;
  LOBYTE(v6) = 1;
LABEL_5:
  *(_BYTE *)(a1 + 16) = v6;
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8, v5);
}

void sub_196CFBE48(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::LayerHostingMode>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::LayerHostingMode,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::DrawingAreaType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::DrawingAreaType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196CFBF70(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[312];
  char v11;
  uint64_t v12;
  uint64_t v13;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v6 = result;
  v12 = 0;
  v13 = 0;
  if (result >= 0xD20)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::BackForwardListItemState>(a1, (uint64_t)v10);
      if (!v11)
        break;
      if (HIDWORD(v13) == (_DWORD)v13)
      {
        WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::BackForwardListItemState>((uint64_t)&v12, (unint64_t)v10);
      }
      else
      {
        WebKit::BackForwardListItemState::BackForwardListItemState(v12 + 312 * HIDWORD(v13), (uint64_t)v10);
        ++HIDWORD(v13);
      }
      std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
      if (!--v6)
      {
        WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v12, HIDWORD(v13));
        *(_QWORD *)a2 = v12;
        v9 = v13;
        v12 = 0;
        v13 = 0;
        *(_QWORD *)(a2 + 8) = v9;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      v7 = 0;
      v8 = 0;
LABEL_5:
      v12 = 0;
      v13 = 0;
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v8;
LABEL_6:
      *(_BYTE *)(a2 + 16) = 1;
      return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
    }
    LODWORD(v13) = 312 * (int)result / 0x138u;
    v12 = WTF::fastMalloc((WTF *)(312 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::BackForwardListItemState>(a1, (uint64_t)v10);
      if (!v11)
        break;
      if (HIDWORD(v13) == (_DWORD)v13)
      {
        WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::BackForwardListItemState>((uint64_t)&v12, (unint64_t)v10);
      }
      else
      {
        WebKit::BackForwardListItemState::BackForwardListItemState(v12 + 312 * HIDWORD(v13), (uint64_t)v10);
        ++HIDWORD(v13);
      }
      std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
      if (!--v6)
      {
        v7 = v12;
        v8 = v13;
        goto LABEL_5;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
  return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
}

void sub_196CFC144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 64, v11);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<std::optional<WebCore::FloatRect>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  char v5;
  __int128 v6;
  char v7;

  result = IPC::Decoder::decode<BOOL>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *a2 = 0;
    a2[20] = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      result = IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v6);
      v5 = v7;
      if (v7)
      {
        *(_OWORD *)a2 = v6;
        v5 = 1;
        a2[16] = 1;
      }
      else
      {
        *a2 = 0;
      }
    }
    else
    {
      *a2 = 0;
      a2[16] = 0;
      v5 = 1;
    }
    a2[20] = v5;
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::ApplicationManifest>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;
  void *v5;
  uint64_t v6[33];
  char v7;

  v4 = IPC::Decoder::decode<BOOL>(a1);
  if (v4 <= 0xFFu)
    goto LABEL_9;
  if (!(_BYTE)v4)
  {
    LOBYTE(v6[0]) = 0;
    v7 = 0;
    std::__optional_move_base<WebCore::ApplicationManifest,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v6);
    goto LABEL_4;
  }
  IPC::Decoder::decode<WebCore::ApplicationManifest>(a1, v6);
  if (!v7)
  {
LABEL_9:
    *a2 = 0;
    a2[272] = 0;
    return;
  }
  WebCore::ApplicationManifest::ApplicationManifest((uint64_t)a2, v6);
  a2[264] = 1;
LABEL_4:
  a2[272] = 1;
  if (v7)
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v6, v5);
}

void sub_196CFC2AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a42)
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)&a9, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::ViewportArguments>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _OWORD v16[3];
  uint64_t v17;
  char v18;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v10 = 0;
    v11 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        result = v15;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v10 = v3;
    v11 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (v13)
    {
      v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        result = v14;
        v4 = *v14;
        v3 = v14[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebCore::ViewportArguments>(result, (uint64_t)v16);
      v8 = v18;
      if (v18)
      {
        v9 = v16[1];
        *(_OWORD *)a2 = v16[0];
        *(_OWORD *)(a2 + 16) = v9;
        *(_OWORD *)(a2 + 32) = v16[2];
        *(_QWORD *)(a2 + 48) = v17;
        v8 = 1;
        *(_BYTE *)(a2 + 56) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 56) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 60) = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 60) = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::optional<WebKit::WebExtensionControllerParameters>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  void *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
  }
  else if ((_BYTE)result)
  {
    result = IPC::Decoder::decode<WebKit::WebExtensionControllerParameters>((uint64_t)&v8, a2);
    if (v12)
    {
      *(_QWORD *)a1 = v8;
      *(_BYTE *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v10;
      v6 = v11;
      v10 = 0;
      v11 = 0;
      *(_QWORD *)(a1 + 24) = v6;
      v7 = 1;
      *(_BYTE *)(a1 + 32) = 1;
      result = WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v5);
    }
    else
    {
      v7 = 0;
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  char v5;
  _QWORD v6[2];
  int v7;
  char v8;
  char v9;

  result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      result = (uint64_t)IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>((WTF::StringImpl *)v6, a2);
      v5 = v9;
      if (v9)
      {
        *(_QWORD *)a1 = v6[0];
        *(_QWORD *)(a1 + 8) = v6[1];
        *(_DWORD *)(a1 + 16) = v7;
        *(_BYTE *)(a1 + 20) = v8;
        v5 = 1;
        *(_BYTE *)(a1 + 24) = 1;
      }
      else
      {
        *(_BYTE *)a1 = 0;
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      v5 = 1;
    }
    *(_BYTE *)(a1 + 32) = v5;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::LayerHostingMode,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  __int16 v3;

  v3 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v3);
  if (v3 >= 2u || HIBYTE(v3) == 0)
    return 0;
  else
    return v3 | 0x100u;
}

uint64_t IPC::ArgumentCoder<WebKit::DrawingAreaType,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  BOOL v1;
  __int16 v3;

  v3 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v3);
  if ((_BYTE)v3)
    v1 = 1;
  else
    v1 = HIBYTE(v3) == 0;
  if (v1)
    return 0;
  else
    return 256;
}

uint64_t WebKit::WebPage::visibilityDidChange(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  WebCore::HistoryController *v4;

  if ((*(_WORD *)(this + 1832) & 4) == 0)
  {
    v1 = *(_QWORD *)(*(_QWORD *)(this + 88) + 24);
    if (v1)
    {
      this = *(_QWORD *)(v1 + 8);
      if (this)
      {
        if (!*(_BYTE *)(this + 144))
        {
          v2 = (unsigned int *)(this + 8);
          do
            v3 = __ldaxr(v2);
          while (__stlxr(v3 + 1, v2));
          WebCore::Frame::checkedHistory((WebCore::Frame *)this);
          WebCore::HistoryController::saveDocumentAndScrollState(v4);
          if (!v4)
            return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
          if (*(_DWORD *)v4)
          {
            --*(_DWORD *)v4;
            return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
          }
          this = 286;
          __break(0xC471u);
        }
      }
    }
  }
  return this;
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea14UpdateGeometryEN6WebKit11DrawingAreaES8_FvRKN7WebCore7IntSizeEbRKNS_13MachSendRightEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2830;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16PrepareToSuspendEN6WebKit14NetworkProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0F78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16PrepareToSuspendEN6WebKit14NetworkProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2948;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>(WTF::StringImpl *result, uint64_t *a2)
{
  WTF::StringImpl *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF *v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  WTF::StringImpl *v24;
  char v25;
  WTF *v26[3];

  v3 = result;
  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v19 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v5, v4);
        v20 = *a2;
        v19 = a2[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_35;
  }
  v8 = (int *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v19 = v4;
    v20 = 0;
LABEL_35:
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22 && v19)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
    *(_BYTE *)v3 = 0;
    *((_BYTE *)v3 + 24) = 0;
LABEL_28:
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v18)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v17);
    }
    return result;
  }
  v9 = *v8;
  memset(v26, 0, 21);
  if (v9)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(a2, &v24);
      if (!v25)
      {
        *(_BYTE *)v3 = 0;
        *((_BYTE *)v3 + 24) = 0;
        goto LABEL_26;
      }
      v12 = v24;
      if ((unint64_t)v24 + 1 <= 1)
      {
        *(_BYTE *)v3 = 0;
        *((_BYTE *)v3 + 24) = 0;
        goto LABEL_21;
      }
      result = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v26, &v24, v11, (uint64_t)v23);
      if (!v23[16])
        break;
      if (v25)
      {
        result = v24;
        v24 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (!--v9)
      {
        v13 = v26[0];
        v14 = v26[1];
        v15 = (int)v26[2];
        v16 = BYTE4(v26[2]);
        goto LABEL_19;
      }
    }
    *(_BYTE *)v3 = 0;
    *((_BYTE *)v3 + 24) = 0;
    if (!v25)
      goto LABEL_26;
    v12 = v24;
LABEL_21:
    v24 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
LABEL_26:
    if (v26[0])
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)v26[0], (WTF::StringImpl *)LODWORD(v26[1]));
    goto LABEL_28;
  }
  v16 = 0;
  v15 = 0;
  v13 = 0;
  v14 = 0;
LABEL_19:
  *(_QWORD *)v3 = v13;
  *((_QWORD *)v3 + 1) = v14;
  *((_DWORD *)v3 + 4) = v15;
  *((_BYTE *)v3 + 20) = v16;
  *((_BYTE *)v3 + 24) = 1;
  return result;
}

void sub_196CFCA4C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, WTF::StringImpl **a14, unsigned int a15)
{
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a14)
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(a14, (WTF::StringImpl *)a15);
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKit17XPCEndpointClient11setEndpointEPU24objcproto13OS_xpc_object8NSObject_block_invoke(uint64_t a1, id a2)
{
  unsigned __int8 *v3;
  Class Class;
  _xpc_connection_s *remote_connection;
  pid_t pid;
  unsigned __int8 *v7;
  void *v9;
  int v10;

  v3 = *(unsigned __int8 **)(a1 + 32);
  Class = object_getClass(a2);
  if (Class == (Class)MEMORY[0x1E0C81310])
  {
    v7 = v3 + 8;
    if (__ldaxr(v3 + 8))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
LABEL_10:
      v9 = (void *)*((_QWORD *)v3 + 2);
      if (v9)

      *((_QWORD *)v3 + 2) = 0;
      v10 = __ldxr(v7);
      if (v10 == 1)
      {
        if (!__stlxr(0, v7))
          return;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 8));
      return;
    }
    MEMORY[0x19AEABB3C](v3 + 8);
    goto LABEL_10;
  }
  if (Class == (Class)MEMORY[0x1E0C812F8])
  {
    remote_connection = xpc_dictionary_get_remote_connection(a2);
    if (remote_connection)
    {
      pid = xpc_connection_get_pid(remote_connection);
      if (pid == getpid() || (WTF::hasEntitlement() & 1) != 0)
        (*(void (**)(unsigned __int8 *, id))(*(_QWORD *)v3 + 16))(v3, a2);
      else
        WTFLogAlways();
    }
  }
}

void sub_196CFCBC4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_196CFCCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::runInitializationCode(WebKit *this, void *a2)
{
  WebCore *v2;
  JSC *inited;
  WTF *v4;
  uint64_t result;

  v2 = (WebCore *)objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread");
  if ((v2 & 1) != 0)
  {
    WebCore::initializeCommonAtomStrings(v2);
    inited = (JSC *)InitWebCoreThreadSystemInterface();
    v4 = (WTF *)JSC::initialize(inited);
    return WTF::initializeMainThread(v4);
  }
  else
  {
    result = 54;
    __break(0xC471u);
  }
  return result;
}

WebKit *WebKit::WebProcessPool::registerGlobalURLSchemeAsHavingCustomProtocolHandlers(WebKit *this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash **v2;
  void *v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t *v10;
  int v11;
  WTF::ASCIICaseInsensitiveHash **v12;

  if (*(_QWORD *)this)
  {
    v2 = (WTF::ASCIICaseInsensitiveHash **)this;
    WebKit::InitializeWebKit2(this);
    {
      WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set = 0;
    }
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set, v2, (uint64_t)&v10);
    WebKit::NetworkProcessProxy::allNetworkProcesses(v3, (uint64_t)&v10);
    if (v11)
    {
      v5 = v10;
      v6 = &v10[v11];
      do
      {
        v7 = *v5;
        v8 = (unsigned int *)(*v5 + 16);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v12 = v2;
        WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::RegisterScheme>(v7, (uint64_t **)&v12, 0, 0);
        if (v7)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
        ++v5;
      }
      while (v5 != v6);
    }
    return (WebKit *)WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
  }
  return this;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **result;
  uint64_t v13;
  WTF::ASCIICaseInsensitiveHash **v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::ASCIICaseInsensitiveHash **)v6;
    do
    {
      if (*v14 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reinsert(a1, v14);
          v16 = *v14;
          *v14 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v10);
            else
              *(_DWORD *)v16 -= 2;
          }
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          *v14 = 0;
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reinsert(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::ASCIICaseInsensitiveHash *v6;

  v4 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, a2);
  v5 = *v4;
  *v4 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *a2;
  *a2 = 0;
  *v4 = v6;
  return v4;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v4 = ++v5 + v6;
  }
  while (*(_QWORD *)(v2 + 8 * v6));
  return v2 + 8 * v6;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

unsigned __int8 *WebKit::WebPage::setViewportConfigurationViewLayoutSize(WebKit::WebPage *this, const WebCore::FloatSize *a2, double a3, double a4)
{
  WebCore::ViewportConfiguration *v8;
  double v9;
  double v11;
  double v12;
  double v13;
  unsigned __int8 *result;
  double v15;
  double v16;
  WebCore::LocalFrame *v17;
  double v18;
  double v19;
  char v20;

  v8 = (WebKit::WebPage *)((char *)this + 944);
  if (!*((_BYTE *)this + 1178))
    WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthForShrinkToFit((WebKit::WebPage *)((char *)this + 944), 0.0);
  v9 = 1.0;
  if (a4 != 0.0 && (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 112) + 664) & 0x800000000) != 0)
  {
    v11 = *(float *)a2;
    if (v11 > a4)
      v9 = v11 / a4;
  }
  *((double *)this + 148) = v9;
  v12 = v9 * a3;
  v13 = *((double *)this + 143);
  result = (unsigned __int8 *)WebCore::ViewportConfiguration::setViewLayoutSize();
  if ((_DWORD)result)
  {
    WebCore::ViewportConfiguration::initialScale(v8);
    v16 = v15;
    WebKit::WebPage::totalScaleFactor(this, v17);
    v19 = v18 / *(float *)(*((_QWORD *)this + 6) + 368);
    v20 = v12 > v13 && v16 > v19 || v16 < v19 && v12 < v13;
    return WebKit::WebPage::viewportConfigurationChanged((uint64_t)this, v20);
  }
  return result;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::WebPage,WebKit::WebPage>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E34B3740;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34FA2A0;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  *((_QWORD *)a1 + 6) = v8;
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::RobinHoodHashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  WTF::StringImpl *v24;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
    v4 = *(_DWORD *)(a2 + 12) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = WTF::fastZeroedMalloc((WTF *)(8 * v3));
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v7 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    *(_DWORD *)(a1 + 16) = (v9 >> 31) ^ v9;
    *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
    v10 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v10)
    {
      for (i = 0; i < v10; ++i)
      {
        v12 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 8 * i);
        if (v12)
        {
          *(_DWORD *)v12 += 2;
          v13 = *(_DWORD *)(a1 + 8);
          v14 = *(_DWORD *)(a1 + 16);
          v15 = *((_DWORD *)v12 + 4);
          if (v15 >= 0x100)
            v16 = v15 >> 8;
          else
            v16 = WTF::StringImpl::hashSlowCase(v12);
          v17 = v13 - 1;
          v18 = (v16 ^ v14) & (v13 - 1);
          v19 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v18);
          v20 = *v19;
          if (*v19)
          {
            v21 = 0;
            do
            {
              v22 = *((_DWORD *)v20 + 4);
              if (v22 >= 0x100)
                v23 = v22 >> 8;
              else
                v23 = WTF::StringImpl::hashSlowCase(v20);
              if (v21 > ((v18 + v13 - ((v23 ^ v14) & v17)) & v17))
              {
                v24 = *v19;
                *v19 = v12;
                v12 = v24;
                v21 = (v18 + v13 - ((v23 ^ v14) & v17)) & v17;
              }
              v18 = (v18 + 1) & v17;
              ++v21;
              v19 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v18);
              v20 = *v19;
            }
            while (*v19);
          }
          *v19 = v12;
          v10 = *(unsigned int *)(a2 + 8);
        }
      }
    }
  }
  return a1;
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 4))
    return 0;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    if ((v6 & 4) != 0)
      return WTF::equalIgnoringASCIICaseWithLength<unsigned char,unsigned char>(v7, v3, v8, v3, v3);
    else
      return WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>(v7, v3, v8, v3, v3);
  }
  else if ((v6 & 4) != 0)
  {
    return WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(v7, v3, v8, v3, v3);
  }
  else
  {
    return WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>(v7, v3, v8, v3, v3);
  }
}

uint64_t WebKit::WebPage::setUseFixedLayout(uint64_t this, int a2)
{
  char v2;
  WebKit::WebPage *v3;
  _DWORD *v4;
  char v5;
  IntSize v6;

  if (*(unsigned __int8 *)(this + 184) != a2)
  {
    v2 = a2;
    v3 = (WebKit::WebPage *)this;
    *(_BYTE *)(this + 184) = a2;
    this = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)this);
    if (this)
    {
      v4 = (_DWORD *)this;
      ++*(_DWORD *)(this + 8);
      WebCore::ScrollView::setUseFixedLayout((WebCore::ScrollView *)this);
      if ((v2 & 1) == 0)
      {
        v6 = 0;
        WebKit::WebPage::setFixedLayoutSize(v3, &v6);
      }
      v5 = v2;
      this = IPC::MessageSender::send<Messages::WebPageProxy::UseFixedLayoutDidChange>((uint64_t)v3 + 32, &v5);
      if (v4[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
  }
  return this;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WebKit::WebProcess *WebKit::WebPage::updateIsInWindow(WebKit::WebPage *this, char a2)
{
  WebKit::WebPage *v2;
  WebKit::WebProcess *v3;
  WebKit::WebProcess *result;
  WebKit::WebProcess *v6;

  v2 = this;
  if ((*((_WORD *)this + 916) & 0x10) != 0)
  {
    if (*((_BYTE *)this + 328))
      this = (WebKit::WebPage *)WTF::RunLoop::TimerBase::start();
    v3 = WebKit::WebProcess::singleton(this);
    WebKit::WebProcess::pageDidEnterWindow((uint64_t)v3, *((_QWORD *)v2 + 5));
    return (WebKit::WebProcess *)WebCore::Page::layoutIfNeeded();
  }
  else
  {
    WTF::RunLoop::TimerBase::stop((WebKit::WebPage *)((char *)this + 296));
    result = (WebKit::WebProcess *)WebCore::Page::setCanStartMedia(*((WebCore::Page **)v2 + 6));
    if ((a2 & 1) == 0)
    {
      v6 = WebKit::WebProcess::singleton(result);
      return (WebKit::WebProcess *)WebKit::WebProcess::pageWillLeaveWindow((uint64_t)v6, *((_QWORD *)v2 + 5));
    }
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::supportsAsyncScrolling(WebKit::RemoteLayerTreeDrawingArea *this)
{
  return 1;
}

_QWORD *WebKit::WebFrame::makeInvalidator@<X0>(CFTypeRef *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;

  CFRetain(this[1]);
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = &off_1E34F1A90;
  result[1] = this;
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

uint64_t WebKit::WebPage::setMuted(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  WebCore::Page::setMuted();
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

WTF *WebKit::WebPage::setAllowedQueryParametersForAdvancedPrivacyProtections(uint64_t a1, unsigned int *a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  WTF *result;
  uint64_t v6;
  WTF::ASCIICaseInsensitiveHash **v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD v11[3];

  v4 = (uint64_t *)(a1 + 2440);
  result = *(WTF **)(a1 + 2440);
  if (result)
  {
    *v4 = 0;
    result = (WTF *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)result, (WTF::StringImpl *)a2);
  }
  v6 = a2[3];
  if ((_DWORD)v6)
  {
    v7 = *(WTF::ASCIICaseInsensitiveHash ***)a2;
    v8 = 24 * v6;
    do
    {
      result = *v7;
      if (*v7 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        result = (WTF *)WTF::equal(result, 0, a3);
        if ((result & 1) == 0)
        {
          WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::ensure<WebKit::WebPage::setAllowedQueryParametersForAdvancedPrivacyProtections(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(v4, v7, (uint64_t)v11);
          result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v11[0] + 8), v7 + 2, v9, (uint64_t)&v10);
        }
      }
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

unsigned int *WebKit::WebPage::setAutoSizingShouldExpandToViewHeight(unsigned int *this, int a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int *v4;
  unsigned int v5;

  if (*((unsigned __int8 *)this + 896) != a2)
  {
    *((_BYTE *)this + 896) = a2;
    v2 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
    if (v2)
      v3 = *(_BYTE *)(v2 + 144) == 0;
    else
      v3 = 0;
    if (v3)
    {
      v4 = (unsigned int *)(v2 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight(*(WebCore::LocalFrameView **)(v2 + 288));
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::setSizeToContentAutoSizeMaximumSize(unsigned int *this, IntSize *a2)
{
  const IntSize *v3;
  uint64_t v4;
  BOOL v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::LocalFrameView *v8;
  uint64_t v10;
  uint64_t v11;

  if (this[222] != a2->m_width || this[223] != a2->m_height)
  {
    v3 = a2;
    *((IntSize *)this + 111) = *a2;
    v4 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
    if (v4)
      v5 = *(_BYTE *)(v4 + 144) == 0;
    else
      v5 = 0;
    if (v5)
    {
      v6 = (unsigned int *)(v4 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = *(WebCore::LocalFrameView **)(v4 + 288);
      if (a2->m_width < 1 || a2->m_height <= 0)
      {
        v11 = 0;
        v3 = (const IntSize *)&v11;
        v10 = 0;
      }
      else
      {
        v10 = 1;
      }
      WebCore::LocalFrameView::enableSizeToContentAutoSizeMode(v8, v10, v3);
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::setViewportSizeForCSSViewportUnits(unsigned int *result, uint64_t a2, char a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int *v6;
  unsigned int v7;

  if (!a3 || !*((_BYTE *)result + 908))
  {
    if ((a3 != 0) == (*((_BYTE *)result + 908) != 0))
      return result;
    *(_QWORD *)(result + 225) = a2;
    *((_BYTE *)result + 908) = a3;
    if (!a3)
      return result;
    goto LABEL_8;
  }
  if (*((float *)result + 225) != *(float *)&a2 || *((float *)result + 226) != *((float *)&a2 + 1))
  {
    *(_QWORD *)(result + 225) = a2;
    *((_BYTE *)result + 908) = a3;
LABEL_8:
    v4 = *(_QWORD *)(*((_QWORD *)result + 6) + 160);
    if (v4)
      v5 = *(_BYTE *)(v4 + 144) == 0;
    else
      v5 = 0;
    if (v5)
    {
      v6 = (unsigned int *)(v4 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      if (*((_BYTE *)result + 908))
      {
        WebCore::LocalFrameView::setSizeForCSSDefaultViewportUnits(*(WebCore::LocalFrameView **)(v4 + 288), *(FloatSize *)(result + 225));
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::updateImageAnimationEnabled(WebKit::WebPage *this)
{
  WebCore::Page *v1;

  v1 = (WebCore::Page *)*((_QWORD *)this + 6);
  WebKit::WebProcess::singleton(this);
  return WebCore::Page::setImageAnimationEnabled(v1);
}

WebKit::WebPage *WebKit::WebPage::setSmartInsertDeleteEnabled(WebKit::WebPage *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(*((_QWORD *)this + 6) + 112);
  v3 = *(_QWORD *)(v2 + 696);
  if (((v3 >> 38) & 1) != a2)
  {
    v4 = v2 + 664;
    v5 = *(unsigned int *)(v2 + 720) | ((unint64_t)*(unsigned __int8 *)(v2 + 724) << 32);
    v6 = *(_QWORD *)(v2 + 712);
    v7 = *(_QWORD *)(v2 + 704);
    v8 = *(_QWORD *)(v2 + 688);
    v9 = *(_QWORD *)(v2 + 680);
    v10 = *(_QWORD *)(v2 + 672);
    v11 = *(_QWORD *)(v2 + 664);
    v12 = 0x4000000000;
    if (!a2)
      v12 = 0;
    *(_QWORD *)v4 = v11;
    *(_QWORD *)(v4 + 8) = v10;
    *(_QWORD *)(v4 + 16) = v9;
    *(_QWORD *)(v4 + 24) = v8;
    *(_QWORD *)(v4 + 40) = v7;
    *(_QWORD *)(v4 + 48) = v6;
    *(_QWORD *)(v4 + 32) = v3 & 0xFFFFFFBFFFFFFFFFLL | v12;
    *(_DWORD *)(v4 + 56) = v5;
    *(_BYTE *)(v4 + 60) = BYTE4(v5);
    return WebKit::WebPage::setSelectTrailingWhitespaceEnabled(this, a2 ^ 1u);
  }
  return this;
}

unsigned int *WebKit::WebPage::setMinimumSizeForAutoLayout(unsigned int *this, const WebCore::IntSize *a2)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  WebCore::LocalFrameView *v7;
  int v8;
  uint64_t v9;
  IntSize v10;

  if (this[220] != *(_DWORD *)a2 || this[221] != *((_DWORD *)a2 + 1))
  {
    *((_QWORD *)this + 110) = *(_QWORD *)a2;
    v3 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
    if (v3 && *(_BYTE *)(v3 + 144) == 0)
    {
      v5 = (unsigned int *)(v3 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v7 = *(WebCore::LocalFrameView **)(v3 + 288);
      if (*(int *)a2 <= 0)
      {
        v10 = 0;
        v9 = 0;
      }
      else
      {
        v8 = *((_DWORD *)a2 + 1);
        if (v8 <= 1)
          v8 = 1;
        v10.m_width = *(_DWORD *)a2;
        v10.m_height = v8;
        v9 = 1;
      }
      WebCore::LocalFrameView::enableFixedWidthAutoSizeMode(v7, v9, &v10);
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
    }
  }
  return this;
}

unsigned __int8 *WebKit::WebPage::setPageAndTextZoomFactors(WebKit::WebPage *this, double a2, double a3, WebCore::LocalFrame *a4)
{
  unsigned __int8 *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  float v11;
  float v12;

  result = (unsigned __int8 *)WebKit::WebPage::mainFramePlugIn(this, a4);
  if (result)
    return WebKit::PluginView::setPageScaleFactor(result, 0, 0, a2);
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if (v8)
  {
    result = *(unsigned __int8 **)(v8 + 8);
    if (result)
    {
      if (!result[144])
      {
        v9 = (unsigned int *)(result + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v11 = a2;
        v12 = a3;
        WebCore::LocalFrame::setPageAndTextZoomFactors((WebCore::LocalFrame *)result, v11, v12);
        return (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::setScrollPinningBehavior(uint64_t result, char a2)
{
  uint64_t v2;
  BOOL v3;

  *(_BYTE *)(result + 1828) = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(result + 48) + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
    return WebCore::LocalFrameView::setScrollPinningBehavior();
  return result;
}

WebCore::LocalFrameView *WebKit::WebPage::setMinimumUnobscuredSize(WebCore::LocalFrameView *this, const WebCore::FloatSize *a2)
{
  if (*(float *)a2 != *((float *)this + 34) || *((float *)a2 + 1) != *((float *)this + 35))
  {
    *((_QWORD *)this + 17) = *(_QWORD *)a2;
    return WebKit::WebPage::updateSizeForCSSSmallViewportUnits(this);
  }
  return this;
}

WebCore::LocalFrameView *WebKit::WebPage::setMaximumUnobscuredSize(WebCore::LocalFrameView *this, const WebCore::FloatSize *a2)
{
  if (*(float *)a2 != *((float *)this + 36) || *((float *)a2 + 1) != *((float *)this + 37))
  {
    *((_QWORD *)this + 18) = *(_QWORD *)a2;
    return WebKit::WebPage::updateSizeForCSSLargeViewportUnits(this);
  }
  return this;
}

WebCore::LocalFrameView *WebKit::WebPage::setDefaultUnobscuredSize(WebCore::LocalFrameView *this, const WebCore::FloatSize *a2)
{
  if (*(float *)a2 != *((float *)this + 32) || *((float *)a2 + 1) != *((float *)this + 33))
  {
    *((_QWORD *)this + 16) = *(_QWORD *)a2;
    return WebKit::WebPage::updateSizeForCSSDefaultViewportUnits(this);
  }
  return this;
}

float *WebKit::WebPage::setTopContentInset(WebKit::WebPage *this, float a2)
{
  float *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = (float *)*((_QWORD *)this + 6);
  if (result[93] != a2)
  {
    WebCore::Page::setTopContentInset((WebCore::Page *)result, a2);
    WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 20, &v12);
    v4 = *((_QWORD *)this + 20);
    if (v4)
    {
      v6 = *(unsigned int *)(v4 - 4);
      v5 = v4 + 8 * v6;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v7 = (char *)this + 160;
    v8 = v5;
    v9 = v5;
    v10 = v5;
    v11 = v4 + 8 * v6;
    result = (float *)WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
    while (v13 != v8)
    {
      WebKit::PluginView::topContentInsetDidChange(*(WebKit::PluginView **)(*(_QWORD *)v13 + 8));
      result = (float *)WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
    }
  }
  return result;
}

WebKit::WebDeviceOrientationUpdateProvider *WebKit::WebDeviceOrientationUpdateProvider::WebDeviceOrientationUpdateProvider(WebKit::WebDeviceOrientationUpdateProvider *this, WebKit::WebPage *a2)
{
  char *v4;
  unsigned int *v5;
  unsigned int v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  WebKit::WebProcess *v10;
  unsigned int *v11;
  _QWORD v12[2];

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = &unk_1E34F47C8;
  v4 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_1E34F4770;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v5 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 4) = v5;
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *((_QWORD *)a2 + 5);
  v12[0] = 158;
  v12[1] = v8;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)v7 + 6, (unsigned __int8 *)v12, (uint64_t)v4, &v11);
  return this;
}

WebKit::WebPageInspectorTargetController *WebKit::WebPageInspectorTargetController::WebPageInspectorTargetController(WebKit::WebPageInspectorTargetController *this, WebKit::WebPage *a2)
{
  unsigned int *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _BYTE v8[24];
  unsigned int *v9;
  WTF::StringImpl *v10;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 1) = off_1E34EAE18;
  v3 = (unsigned int *)((char *)this + 8);
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v4 = (uint64_t *)((char *)this + 56);
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *((_QWORD *)a2 + 5), &v10);
  v9 = v3;
  WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WebKit::WebPageInspectorTarget *>(v4, &v10, &v9, (uint64_t)v8);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

WebKit::WebScreenOrientationManager *WebKit::WebScreenOrientationManager::WebScreenOrientationManager(WebKit::WebScreenOrientationManager *this, WebKit::WebPage *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  unsigned int *v9;
  _QWORD v10[2];

  v4 = WebCore::ScreenOrientationManager::ScreenOrientationManager(this);
  *(_QWORD *)(v4 + 32) = &unk_1E34F0AB0;
  v5 = v4 + 32;
  *(_QWORD *)v4 = off_1E34F0A60;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = a2;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_WORD *)(v4 + 72) = 0;
  v6 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v4);
  v7 = *(_QWORD *)(*((_QWORD *)this + 6) + 40);
  v10[0] = 196;
  v10[1] = v7;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)v6 + 6, (unsigned __int8 *)v10, v5, &v9);
  return this;
}

void WebKit::WebUserContentController::addContentRuleLists(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  WTF::StringImpl *v17;

  v2 = *(_DWORD *)(a2 + 12);
  if (v2)
  {
    v3 = *(uint64_t **)a2;
    v4 = *(_QWORD *)a2 + 120 * v2;
    do
    {
      v5 = (WTF::StringImpl *)*v3;
      if (*v3)
        *(_DWORD *)v5 += 2;
      v17 = v5;
      WebKit::WebCompiledContentRuleList::create(v3, (uint64_t *)&v16);
      if (v16)
      {
        v15 = v16;
        v16 = 0;
        WebCore::ContentExtensions::ContentExtensionsBackend::addContentExtension();
        v12 = v15 + 2;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v15 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
        }
        v7 = v16;
        v16 = 0;
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v7 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
          }
        }
      }
      v11 = v17;
      v17 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v6);
        else
          *(_DWORD *)v11 -= 2;
      }
      v3 += 15;
    }
    while (v3 != (uint64_t *)v4);
  }
}

uint64_t WebKit::WebUserContentController::addUserStyleSheets(WebCore::UserContentProvider *this, unsigned int *a2)
{
  WebCore::UserContentProvider *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  WebKit *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  _BYTE v12[104];

  v2 = this;
  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v5 = 120 * v3;
    v6 = (_QWORD *)(*(_QWORD *)a2 + 8);
    do
    {
      WebKit::worldMap(this);
      v7 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, v6);
      WebKit::worldMap(v7);
      v8 = qword_1ECE72ED8;
      if (qword_1ECE72ED8)
        v8 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
      if ((WebKit *)v8 == v7)
      {
        this = (WebCore::UserContentProvider *)WTFLogAlways();
      }
      else
      {
        WebCore::UserStyleSheet::UserStyleSheet((uint64_t)v12, (uint64_t)(v6 + 1));
        v9 = *((_QWORD *)v7 + 1);
        CFRetain(*(CFTypeRef *)(v9 + 8));
        *(_QWORD *)&v11 = *(v6 - 1);
        BYTE8(v11) = 1;
        WebKit::WebUserContentController::addUserStyleSheetInternal((uint64_t)v2, v9, &v11, (uint64_t)v12);
        CFRelease(*(CFTypeRef *)(v9 + 8));
        WebCore::UserScript::~UserScript((WebCore::UserScript *)v12, v10);
      }
      v6 += 15;
      v5 -= 120;
    }
    while (v5);
  }
  return WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(v2);
}

WebKit::WebBackForwardListProxy *WebKit::WebBackForwardListProxy::WebBackForwardListProxy(WebKit::WebBackForwardListProxy *this, WebKit::WebPage *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E34F1510;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v4 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 2) = v4;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 32) = 0;
  return this;
}

uint64_t WebKit::WebPluginInfoProvider::singleton(WebKit::WebPluginInfoProvider *this)
{
  uint64_t result;

    return WebKit::WebPluginInfoProvider::singleton(void)::pluginInfoProvider;
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1E34ECA68;
  WebKit::WebPluginInfoProvider::singleton(void)::pluginInfoProvider = result;
  return result;
}

WebKit::LibWebRTCProvider *WebKit::LibWebRTCProvider::LibWebRTCProvider(WebKit::LibWebRTCProvider *this, WebKit::WebPage *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *(_QWORD *)WebCore::LibWebRTCProvider::LibWebRTCProvider(this) = off_1E34EB980;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v4 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 25) = v4;
  *((_BYTE *)this + 192) = 0;
  *((_BYTE *)this + 172) = 1;
  return this;
}

WebKit::WebEditorClient *WebKit::WebEditorClient::WebEditorClient(WebKit::WebEditorClient *this, WebKit::WebPage *a2)
{
  unsigned int *v3;
  unsigned int v6;

  v3 = 0;
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E34EFD80;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = &unk_1E34F0078;
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    v3 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v3)
    {
      do
        v6 = __ldaxr(v3);
      while (__stlxr(v6 + 1, v3));
    }
  }
  *((_QWORD *)this + 4) = v3;
  return this;
}

WebKit::WebChromeClient *WebKit::WebChromeClient::WebChromeClient(WebKit::WebChromeClient *this, WebKit::WebPage *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = WebCore::ChromeClient::ChromeClient(this);
  *(_QWORD *)v4 = &off_1E34EE5B8;
  *(_WORD *)(v4 + 8) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v5 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 2) = v5;
  return this;
}

WebKit::FindController *WebKit::FindController::FindController(WebKit::FindController *this, WebKit::WebPage *a2)
{
  unsigned int *v3;
  unsigned int v6;

  *(_QWORD *)this = off_1E34F12C0;
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    v3 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v3)
    {
      do
        v6 = __ldaxr(v3);
      while (__stlxr(v6 + 1, v3));
    }
  }
  else
  {
    v3 = 0;
  }
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = -1;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::WebPage>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34FA250;
  v6[1] = WebKit::WebPage::setCanStartMediaTimerFired;
  v6[2] = 0;
  v6[3] = a3;
  result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E34ABE00;
  *((_QWORD *)a1 + 3) = v6;
  return result;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
    WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v4));
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v6;
  LODWORD(v6) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v6;
  LODWORD(v6) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v6;
  return a1;
}

_DWORD **WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>::operator=(_DWORD **a1, _DWORD *a2)
{
  _DWORD *v3;

  if (a2)
    ++a2[2];
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::UseFixedLayoutDidChange>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2088;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  LOBYTE(a2) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = (char)a2;
  v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v12, 0);
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v9, v10);
  }
  return v7;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidCreateMainFrame>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1875;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v6, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebCompiledContentRuleList::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a1[1])
  {
    result = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = off_1E34CB390;
    v5 = *a1;
    *a1 = 0;
    *(_QWORD *)(result + 16) = v5;
    v6 = a1[1];
    a1[1] = 0;
    *(_QWORD *)(result + 24) = v6;
    v7 = *((_OWORD *)a1 + 1);
    v8 = *((_OWORD *)a1 + 2);
    v9 = *((_OWORD *)a1 + 4);
    *(_OWORD *)(result + 64) = *((_OWORD *)a1 + 3);
    *(_OWORD *)(result + 80) = v9;
    *(_OWORD *)(result + 32) = v7;
    *(_OWORD *)(result + 48) = v8;
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::FormData,void>::decode(_BYTE *a1, uint64_t *a2)
{
  char v4;
  char v5;
  unsigned __int16 v6;
  WTF *result;
  void *v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  char v12;
  _BYTE v13[16];
  char v14;

  IPC::Decoder::decode<WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v13, a2);
  IPC::Decoder::decode<long long>(a2);
  v5 = v4;
  v6 = IPC::Decoder::decode<BOOL>(a2);
  result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v10);
  if (!*a2)
    goto LABEL_14;
  if (!v14 || !v5 || v6 <= 0xFFu || !v12)
  {
    __break(1u);
LABEL_14:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_7;
  }
  result = (WTF *)WebCore::FormData::create();
  *(_QWORD *)a1 = v9;
  a1[8] = 1;
LABEL_7:
  if (v12)
  {
    result = v10;
    if (v10)
    {
      v10 = 0;
      v11 = 0;
      result = (WTF *)WTF::fastFree(result, v8);
    }
  }
  if (v14)
    return (WTF *)WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v8);
  return result;
}

void sub_196CFE804(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a14 && a11)
    WTF::fastFree(a11, a2);
  if (a20)
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(unsigned int **)a1;
  if ((_DWORD)v3)
  {
    v6 = 48 * v3;
    do
    {
      v7 = v4[10];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E34ADB18[v7])(&v8, v4);
      v4[10] = -1;
      v4 += 12;
      v6 -= 48;
    }
    while (v6);
    v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unint64_t IPC::Decoder::decode<WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<true,char,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196CFE944(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<true,char,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  char v4;
  char *v5[2];
  char v6;

  result = IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>(a1, (uint64_t)v5);
  v4 = v6;
  if (v6)
  {
    result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)a2, v5[0], (WTF *)v5[1]);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[16] = v4;
  return result;
}

unint64_t IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::span<char const,18446744073709551615ul>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  _BYTE v10[40];
  int v11;
  char v12;
  uint64_t v13;
  WTF *v14;
  char v15;

  result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return result;
  }
  v6 = result;
  v13 = 0;
  v14 = 0;
  if (result >= 0x5555)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::FormDataElement>(v10, a2);
      if (!v12)
        break;
      if (HIDWORD(v14) == (_DWORD)v14)
      {
        WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FormDataElement>((uint64_t)&v13, (unint64_t)v10);
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor(v13 + 48 * HIDWORD(v14), (uint64_t)v10);
        ++HIDWORD(v14);
      }
      if (v12 && v11 != -1)
        ((void (*)(char *, _BYTE *))off_1E34ADB18[v11])(&v15, v10);
      if (!--v6)
      {
        WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v13, HIDWORD(v14));
        *(_QWORD *)a1 = v13;
        v9 = v14;
        v13 = 0;
        v14 = 0;
        *(_QWORD *)(a1 + 8) = v9;
        goto LABEL_15;
      }
    }
  }
  else
  {
    if (!result)
    {
      v7 = 0;
      v8 = 0;
LABEL_14:
      v13 = 0;
      v14 = 0;
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
LABEL_15:
      *(_BYTE *)(a1 + 16) = 1;
      return WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
    }
    LODWORD(v14) = 48 * (int)result / 0x30u;
    v13 = WTF::fastMalloc((WTF *)(48 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::FormDataElement>(v10, a2);
      if (!v12)
        break;
      if (HIDWORD(v14) == (_DWORD)v14)
      {
        WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FormDataElement>((uint64_t)&v13, (unint64_t)v10);
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor(v13 + 48 * HIDWORD(v14), (uint64_t)v10);
        ++HIDWORD(v14);
      }
      if (v12)
      {
        if (v11 != -1)
          ((void (*)(char *, _BYTE *))off_1E34ADB18[v11])(&v15, v10);
      }
      if (!--v6)
      {
        v7 = v13;
        v8 = v14;
        goto LABEL_14;
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
}

void sub_196CFEC74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, int a15, char a16, int a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  if (a16)
  {
    if (a14 != -1)
      (*(void (**)(uint64_t, uint64_t *))(v18 + 8 * a14))(v19 - 49, &a9);
  }
  WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a18, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::FormDataElement>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::FormDataElement,void>::decode(a1, a2);
  if (!a1[48])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196CFED1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 48))
  {
    v15 = *(unsigned int *)(v13 + 40);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34ADB18[v15])(&a13, v13);
    *(_DWORD *)(v13 + 40) = -1;
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<std::span<char const,18446744073709551615ul>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v13;
  char v14;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!v5)
  {
LABEL_20:
    v14 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_21;
  }
  if (result)
  {
    v6 = a1[1];
    v7 = *a1;
    v8 = a1[2] - *a1;
    v9 = v6 - v8;
    if (v6 < v8 || v9 < result)
    {
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (result && v6)
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 16))(result);
      goto LABEL_20;
    }
    v11 = v7 + v8;
    a1[2] = v11 + result;
    v13 = result != -1 || v9 == -1;
    if (!v7 || !v13)
      goto LABEL_20;
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  v14 = 1;
LABEL_21:
  *(_BYTE *)(a2 + 16) = v14;
  return result;
}

void IPC::ArgumentCoder<WebCore::FormDataElement,void>::decode(_BYTE *a1, uint64_t *a2)
{
  _BYTE v4[40];
  int v5;
  _BYTE v6[40];
  int v7;
  char v8;
  char v9;

  IPC::Decoder::decode<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>>(v6, a2);
  if (*a2)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, (uint64_t)v6);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)v4);
    a1[48] = 1;
    if (v5 != -1)
      ((void (*)(char *, _BYTE *))off_1E34ADB18[v5])(&v9, v4);
  }
  else
  {
    *a1 = 0;
    a1[48] = 0;
  }
  if (v8)
  {
    if (v7 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E34ADB18[v7])(v4, v6);
  }
}

void sub_196CFEEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23)
{
  uint64_t v23;

  if (a14 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34ADB18[a14])(v23 - 17, &a9);
  if (a23)
  {
    if (a21 != -1)
      ((void (*)(uint64_t *, char *))off_1E34ADB18[a21])(&a9, &a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E34ADB30[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 40) = v3;
  }
  return a1;
}

void sub_196CFEF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(unsigned int *)(v12 + 40);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_1E34ADB18[v14])(&a12, v12);
  *(_DWORD *)(v12 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[48])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196CFF01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 48))
  {
    v15 = *(unsigned int *)(v13 + 40);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34ADB18[v15])(&a13, v13);
    *(_DWORD *)(v13 + 40) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v4;
  _QWORD v5[2];
  char v6;

  if (a3)
  {
    IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder,0ul>(a1, a2, a3);
  }
  else
  {
    IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5);
    v4 = v6;
    if (v6)
    {
      *(_QWORD *)a1 = v5[0];
      *(_QWORD *)(a1 + 8) = v5[1];
      *(_DWORD *)(a1 + 40) = 0;
      v4 = 1;
    }
    else
    {
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 48) = v4;
  }
}

uint64_t IPC::ArgumentCoder<WTF::OptionSet<WebCore::PlatformEventModifier>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unsigned __int16 v1;
  unsigned __int8 v2;
  int v3;
  unsigned __int8 v4;

  v1 = IPC::Decoder::decode<unsigned char>(a1);
  if (v1 < 0x100u)
  {
    v4 = 0;
    v3 = 0;
  }
  else
  {
    v2 = v1;
    v3 = WTF::isValidOptionSet<WebCore::PlatformEventModifier>(v1);
    if (v3)
      v4 = v2;
    else
      v4 = 0;
  }
  return v4 | (v3 << 8);
}

BOOL WTF::isValidOptionSet<WebCore::PlatformEventModifier>(char a1)
{
  return (a1 & 0xC0) == 0;
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  unsigned __int16 v4;

  v4 = IPC::Decoder::decode<unsigned char>(a2);
  if (v4 < 0x100u || v4 >= 3u)
  {
    *a1 = 0;
    a1[48] = 0;
  }
  else
  {
    IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder>((uint64_t)a1, a2, v4);
  }
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unsigned __int16 v3;

  v3 = IPC::Decoder::decode<unsigned char>(a1);
  if (v3 < 0x100u)
    return 0;
  else
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char>(a1, (unsigned __int8 *)&v3);
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int16 v5;

  v5 = IPC::Decoder::decode<unsigned char>(a1);
  if (v5 < 0x100u)
    return 0;
  else
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char>(a1, a2, (uint64_t)&v5);
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int16 v7;

  v7 = IPC::Decoder::decode<unsigned char>(a1);
  if (v7 < 0x100u)
    return 0;
  else
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char>(a1, a2, a3, (uint64_t)&v7);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::MediaProducerMutedState>>(uint64_t *a1)
{
  unsigned __int16 v2;
  _BOOL4 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  char v11;

  v2 = IPC::Decoder::decode<unsigned char>(a1);
  v4 = (v2 & 0xE0) != 0 || v2 < 0x100u;
  if (v4)
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v8 = a1[3];
    if (v8 && v7 != 0)
    {
      v11 = v2;
      v10 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
      v4 = v10;
      LOBYTE(v2) = v11;
    }
  }
  if (v4)
    return 0;
  else
    return v2 | 0x100u;
}

uint64_t IPC::Decoder::decode<unsigned char>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  else
  {
    v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      v5 = *v4;
      v6 = 256;
      return v6 | v5;
    }
    v8 = v1;
    v9 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v11 = a1[3];
  if (v11 && v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
  v5 = 0;
  v6 = 0;
  return v6 | v5;
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v9;

  v9 = IPC::Decoder::decode<unsigned char>(a1);
  if (v9 < 0x100u)
    return 0;
  else
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char>(a1, a2, a3, a4, (uint64_t)&v9);
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v11;

  v11 = IPC::Decoder::decode<unsigned char>(a1);
  if (v11 < 0x100u)
    return 0;
  else
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(a1, a2, a3, a4, a5, &v11);
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  unsigned __int16 v13;

  v13 = IPC::Decoder::decode<unsigned char>(a1);
  if (v13 < 0x100u)
    return 0;
  else
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(a1, a2, a3, a4, a5, a6, &v13);
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, _WORD *a7)
{
  unsigned __int16 v15;

  v15 = IPC::Decoder::decode<unsigned char>(a1);
  if (v15 < 0x100u)
    return 0;
  else
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(a1, a2, a3, a4, a5, a6, a7, &v15);
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, _WORD *a7, _WORD *a8)
{
  unsigned __int16 v15;

  v15 = IPC::Decoder::decode<unsigned char>(a1);
  if (v15 < 0x100u)
    return 0;
  else
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(*a2, a2[1], *(_BYTE *)a3, *(_BYTE *)(a3 + 1), *(_BYTE *)a4, *(_BYTE *)(a4 + 1), *(_BYTE *)a5, *(_BYTE *)(a5 + 1), *a6, HIBYTE(*a6), *a7, HIBYTE(*a7), *a8, HIBYTE(*a8), v15, SHIBYTE(v15));
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(unint64_t result, char a2, unsigned __int8 a3, char a4, unsigned __int8 a5, char a6, unsigned __int8 a7, char a8, unsigned __int8 a9, char a10, unsigned __int8 a11, char a12, unsigned __int8 a13, char a14, unsigned __int8 a15, char a16)
{
  if (a2 && a4 && a6 && a8 && a10 && a12 && a14 && a16)
    return result | (unint64_t)(unsigned __int16)(a3 << 8) | ((unint64_t)a5 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)a7 << 24) | ((unint64_t)a9 << 32) | ((unint64_t)a11 << 40) | ((unint64_t)a13 << 48) | ((unint64_t)a15 << 56);
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_7;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v6;
    v12 = 0;
LABEL_7:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_8;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v5);
    goto LABEL_9;
  }
  result = IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v18);
  if (v19)
  {
    *(_QWORD *)(a1 + 8) = v18;
    *(_BYTE *)a1 = v9 != 0;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
LABEL_9:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v17)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196CFF944(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 8))
  {
    if (*(_QWORD *)v2)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::setAnimations(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  _QWORD v5[2];

  WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebKit::PlatformCAAnimationRemote::setAnimations(WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>(v5, a2);
  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 136, (WTF::StringImpl *)v5);
  return WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

void sub_196CFF9A8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WebKit::PlatformCAAnimationRemoteProperties *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v6 = *(WebKit::PlatformCAAnimationRemoteProperties **)a1;
    v7 = 136 * v4;
    do
    {
      WebKit::PlatformCAAnimationRemoteProperties::~PlatformCAAnimationRemoteProperties(v6, a2);
      v6 = (WebKit::PlatformCAAnimationRemoteProperties *)(v8 + 136);
      v7 -= 136;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  WTF::StringImpl *v39;
  char v40;

  IPC::Decoder::decode<WTF::String>(a2, &v39);
  if (v40)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WebKit::PlatformCAAnimationRemoteProperties>((uint64_t)&v24, a2);
    v6 = v38;
    if (v38)
    {
      if (!v40)
      {
        __break(1u);
        return result;
      }
      v7 = v39;
      v39 = 0;
      v8 = v24;
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      v9 = v26[0];
      *(_OWORD *)(a1 + 16) = v25;
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)(a1 + 42) = *(_OWORD *)((char *)v26 + 10);
      v10 = v27;
      v24 = 0;
      v27 = 0;
      *(_QWORD *)(a1 + 64) = v10;
      *(_DWORD *)(a1 + 72) = v28;
      *(_BYTE *)(a1 + 76) = v29;
      v11 = v30;
      v30 = 0;
      *(_QWORD *)(a1 + 80) = v11;
      v12 = v31;
      v31 = 0;
      *(_QWORD *)(a1 + 88) = v12;
      v13 = v32;
      v32 = 0;
      *(_QWORD *)(a1 + 96) = v13;
      v14 = v33;
      v33 = 0;
      *(_QWORD *)(a1 + 104) = v14;
      v15 = v34;
      v34 = 0;
      *(_QWORD *)(a1 + 112) = v15;
      v16 = v35;
      v35 = 0;
      *(_QWORD *)(a1 + 120) = v16;
      v17 = v36;
      v36 = 0;
      *(_QWORD *)(a1 + 128) = v17;
      v18 = v37;
      v37 = 0;
      v19 = 1;
      *(_QWORD *)(a1 + 136) = v18;
    }
    else
    {
      v19 = 0;
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 144) = v19;
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v5);
    if (v40)
    {
      result = v39;
      v39 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
          if (v6)
            return result;
          goto LABEL_6;
        }
        *(_DWORD *)result -= 2;
      }
    }
    if (v6)
      return result;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 144) = 0;
  }
LABEL_6:
  v20 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v22 = v21 == 0;
  else
    v22 = 1;
  if (!v22)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v20);
  return result;
}

void sub_196CFFBA8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(v2 - 40))
  {
    v4 = *(WTF::StringImpl **)(v2 - 48);
    *(_QWORD *)(v2 - 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCALayerRemote::addAnimationForKey(int8x16_t *this, WTF::StringImpl **a2, WebCore::PlatformCAAnimation *a3)
{
  const WTF::StringImpl *v6;
  unsigned __int32 v7;
  WTF::StringImpl *v8;
  uint64_t result;
  uint64_t v10;
  WebKit::RemoteLayerTreeContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15[18];
  _BYTE v16[24];

  v15[0] = a3;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::PlatformCAAnimation*>((uint64_t)v16, this[51].i64, a2, v15);
  if (v16[16] || (v12 = this[8].u32[3], !(_DWORD)v12))
  {
LABEL_2:
    if (((*(uint64_t (**)(WebCore::PlatformCAAnimation *))(*(_QWORD *)a3 + 32))(a3) & 1) != 0)
    {
      std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100]<true,0>(v15, *a2, (WebCore::PlatformCAAnimation *)((char *)a3 + 16));
      v7 = this[8].u32[3];
      if (v7 == this[8].i32[2])
      {
        WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>((uint64_t)this[8].i64, (unint64_t)v15);
      }
      else
      {
        std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100](this[8].i64[0] + 144 * v7, (uint64_t *)v15);
        ++this[8].i32[3];
      }
      result = std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)v15, v8);
      goto LABEL_6;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x196CFFD80);
  }
  v13 = this[8].i64[0] + 8;
  v14 = 144 * v12;
  while (!WTF::equal(*(WTF **)(v13 - 8), *a2, v6))
  {
    v13 += 144;
    v14 -= 144;
    if (!v14)
      goto LABEL_2;
  }
  if (((*(uint64_t (**)(WebCore::PlatformCAAnimation *))(*(_QWORD *)a3 + 32))(a3) & 1) == 0)
    goto LABEL_20;
  result = WebKit::PlatformCAAnimationRemoteProperties::operator=(v13, (uint64_t)a3 + 16);
LABEL_6:
  this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x20uLL));
  v10 = this[52].i64[0];
  if (v10)
  {
    v11 = *(WebKit::RemoteLayerTreeContext **)(v10 + 8);
    if (v11)
    {
      ++*((_DWORD *)v11 + 2);
      result = WebKit::RemoteLayerTreeContext::willStartAnimationOnLayer(v11, (WebKit::PlatformCALayerRemote *)this);
      if (*((_DWORD *)v11 + 2) == 1)
        return (*(uint64_t (**)(WebKit::RemoteLayerTreeContext *))(*(_QWORD *)v11 + 8))(v11);
      else
        --*((_DWORD *)v11 + 2);
    }
  }
  return result;
}

void sub_196CFFDA4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_196CFFDB8()
{
  _DWORD *v0;

  if (v0[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v0 + 8))(v0);
  else
    --v0[2];
  JUMPOUT(0x196CFFDB0);
}

uint64_t std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  void *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 128, a2);
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, v3);
  v5 = *(WTF **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v5, v4);
  }
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 80, v4);
  v7 = *(_DWORD **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
  }
  v8 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebKit::PlatformCAAnimationRemoteProperties>(uint64_t a1, uint64_t *a2)
{
  char v2;
  int v3;
  int v4;
  char v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  char v22;
  BOOL v23;
  int v24;
  char v25;
  BOOL v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  char v53;
  unint64_t v54;
  void *v55;
  unint64_t v56;
  void *v57;
  WTF *v58;
  WTF *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  int v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  int v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  WTF::StringImpl *v126;
  unint64_t v127;
  char v128;
  int v129;
  char v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  __int128 v137;
  __int128 v138;
  _DWORD *v139;
  WTF *v140;
  WTF *v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  _DWORD *v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  __int128 v150;
  __int128 v151;
  _DWORD *v152;
  WTF *v153;
  WTF *v154;
  WTF::StringImpl *v155;
  uint64_t v156;
  _DWORD *v157;
  int v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  _DWORD *v161;
  WTF *v162;
  unsigned int v163;
  unsigned int v164;
  WTF *v165;
  int v166;
  int v167;
  WTF::StringImpl *v168;
  _DWORD *v169;
  __int128 v170;
  void *v171;
  void *v172;
  WTF *v173;
  _DWORD *v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  char v184;
  int v185;
  char v186;
  int v187;
  char v188;
  int v189;
  char v190;
  int v191;
  char v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  _DWORD *v202;
  uint64_t v203;
  char v204;
  WTF::StringImpl *v205;
  uint64_t v206;
  char v207;
  WTF *v208;
  WTF *v209;
  char v210;
  WTF *v211;
  WTF *v212;
  char v213;
  _DWORD *v214;
  char v215;
  WTF::StringImpl *v216;
  char v217;
  uint64_t v218;
  WTF *v219;
  WTF::StringImpl *v220;
  __int128 v221;
  _BYTE v222[26];
  _DWORD *v223;
  int v224;
  char v225;
  WTF *v226;
  unint64_t v227;
  WTF *v228;
  WTF *v229;
  WTF::StringImpl *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;

  IPC::Decoder::decode<WTF::String>(a2, &v216);
  LOWORD(v220) = 0;
  result = (uint64_t)IPC::Decoder::operator>><unsigned char>(a2, &v220);
  v11 = (char)v220;
  if (BYTE1(v220))
    v12 = v220 > 3u;
  else
    v12 = 1;
  v13 = v12;
  if (v13 == 1)
  {
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v10)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
    v11 = 0;
  }
  if (!*a2)
    goto LABEL_85;
  if (!v217 || v13)
    goto LABEL_250;
  result = WebCore::PlatformCAAnimation::isValidKeyPath();
  if ((result & 1) == 0)
  {
LABEL_85:
    v60 = 0;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 136) = 0;
    goto LABEL_240;
  }
  v14 = a2[1];
  v15 = *a2;
  v16 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v14 < v16 || v14 - v16 <= 7)
  {
    v61 = 0;
    v62 = 0;
    *a2 = 0;
    a2[1] = 0;
    v63 = a2[3];
    if (v63)
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
        v62 = *a2;
        v61 = a2[1];
      }
      else
      {
        v61 = 0;
        v62 = 0;
      }
    }
  }
  else
  {
    v17 = (uint64_t *)(v15 + v16);
    a2[2] = (uint64_t)(v17 + 1);
    if (v15)
    {
      v201 = 0;
      v200 = *v17;
      goto LABEL_16;
    }
    v61 = v14;
    v62 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v64 = a2[3];
  if (v64 && v61)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v62, v61);
    v200 = 0;
    v15 = *a2;
    v14 = a2[1];
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v200 = 0;
  }
  v201 = 1;
LABEL_16:
  v18 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v15;
  if (v14 < v18 || v14 - v18 <= 7)
  {
    v65 = 0;
    v66 = 0;
    *a2 = 0;
    a2[1] = 0;
    v67 = a2[3];
    if (v67)
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
        v66 = *a2;
        v65 = a2[1];
      }
      else
      {
        v65 = 0;
        v66 = 0;
      }
    }
  }
  else
  {
    v19 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = (uint64_t)(v19 + 1);
    if (v15)
    {
      v199 = 0;
      v198 = *v19;
      goto LABEL_20;
    }
    v65 = v14;
    v66 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v68 = a2[3];
  if (v68 && v65)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v66, v65);
    v198 = 0;
    v15 = *a2;
    v14 = a2[1];
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v198 = 0;
  }
  v199 = 1;
LABEL_20:
  v20 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v15;
  if (v14 < v20 || v14 - v20 <= 7)
  {
    v69 = 0;
    v70 = 0;
    *a2 = 0;
    a2[1] = 0;
    v71 = a2[3];
    if (v71)
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
        v70 = *a2;
        v69 = a2[1];
      }
      else
      {
        v69 = 0;
        v70 = 0;
      }
    }
  }
  else
  {
    v21 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = (uint64_t)(v21 + 1);
    if (v15)
    {
      v197 = 0;
      v196 = *v21;
      goto LABEL_24;
    }
    v69 = v14;
    v70 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v72 = a2[3];
  if (v72 && v69)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v70, v69);
  v196 = 0;
  v197 = 1;
LABEL_24:
  v195 = IPC::Decoder::decode<float>(a2);
  v194 = IPC::Decoder::decode<float>(a2);
  LOWORD(v220) = 0;
  IPC::Decoder::operator>><unsigned char>(a2, &v220);
  v22 = (char)v220;
  if (BYTE1(v220))
    v23 = v220 > 3u;
  else
    v23 = 1;
  v24 = v23;
  v193 = v24;
  if (v24 == 1)
  {
    v73 = *a2;
    v74 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v75 = a2[3];
    if (v75 && v74)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, v73);
    v22 = 0;
  }
  v192 = v22;
  LOWORD(v220) = 0;
  IPC::Decoder::operator>><unsigned char>(a2, &v220);
  v25 = (char)v220;
  if (BYTE1(v220))
    v26 = v220 > 0xBu;
  else
    v26 = 1;
  v27 = v26;
  v191 = v27;
  if (v27 == 1)
  {
    v76 = *a2;
    v77 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v78 = a2[3];
    if (v78 && v77)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 16))(v78, v76);
    v25 = 0;
  }
  IPC::Decoder::decode<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>((WTF *)&v214, a2);
  v28 = a2[1];
  v29 = *a2;
  v30 = a2[2] - *a2;
  v190 = v25;
  if (v28 <= v30)
  {
    v79 = 0;
    v80 = 0;
    *a2 = 0;
    a2[1] = 0;
    v81 = a2[3];
    if (v81)
    {
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v81 + 16))(v81);
        v80 = *a2;
        v79 = a2[1];
      }
      else
      {
        v79 = 0;
        v80 = 0;
      }
    }
    goto LABEL_106;
  }
  v31 = (unsigned __int8 *)(v29 + v30);
  v32 = v29 + v30 + 1;
  a2[2] = v32;
  if (!v29)
  {
    v79 = v28;
    v80 = 0;
LABEL_106:
    *a2 = 0;
    a2[1] = 0;
    v82 = a2[3];
    if (v82 && v79)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v82 + 16))(v82, v80, v79);
      v33 = 0;
      v29 = *a2;
      v28 = a2[1];
    }
    else
    {
      v28 = 0;
      v29 = 0;
      v33 = 0;
    }
    goto LABEL_108;
  }
  v33 = *v31;
  if (v33 < 2)
  {
    v189 = 0;
    v34 = 1;
    goto LABEL_42;
  }
LABEL_108:
  *a2 = 0;
  a2[1] = 0;
  v83 = a2[3];
  if (!v83 || !v28)
  {
    v84 = 0;
    v29 = 0;
    v188 = 0;
    v189 = 1;
LABEL_110:
    *a2 = 0;
    a2[1] = 0;
    v85 = a2[3];
    if (v85 && v84)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(v85, v29, v84);
      v38 = 0;
      v29 = *a2;
      v28 = a2[1];
    }
    else
    {
      v28 = 0;
      v29 = 0;
      v38 = 0;
    }
    goto LABEL_112;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v83 + 16))(v83, v29);
  v34 = 0;
  v29 = *a2;
  v28 = a2[1];
  v189 = 1;
  v32 = a2[2];
LABEL_42:
  if (!v33)
    v34 = 0;
  v188 = v34;
  v35 = v32 - v29;
  if (v28 <= v35)
  {
    v84 = 0;
    v182 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v182 && v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v182 + 16))(v182);
      v29 = *a2;
      v84 = a2[1];
    }
    else
    {
      v29 = 0;
    }
    goto LABEL_110;
  }
  v36 = (unsigned __int8 *)(v29 + v35);
  v37 = v29 + v35 + 1;
  a2[2] = v37;
  if (!v29)
  {
    v84 = v28;
    goto LABEL_110;
  }
  v38 = *v36;
  if (v38 < 2)
  {
    v187 = 0;
    v39 = 1;
    goto LABEL_48;
  }
LABEL_112:
  *a2 = 0;
  a2[1] = 0;
  v86 = a2[3];
  if (!v86 || !v28)
  {
    v87 = 0;
    v29 = 0;
    v186 = 0;
    v187 = 1;
LABEL_114:
    *a2 = 0;
    a2[1] = 0;
    v88 = a2[3];
    if (v88 && v87)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v29, v87);
      v43 = 0;
      v29 = *a2;
      v28 = a2[1];
    }
    else
    {
      v28 = 0;
      v29 = 0;
      v43 = 0;
    }
    goto LABEL_116;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 16))(v86, v29);
  v39 = 0;
  v29 = *a2;
  v28 = a2[1];
  v187 = 1;
  v37 = a2[2];
LABEL_48:
  if (!v38)
    v39 = 0;
  v186 = v39;
  v40 = v37 - v29;
  if (v28 <= v40)
  {
    v87 = 0;
    v181 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v181 && v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v181 + 16))(v181);
      v29 = *a2;
      v87 = a2[1];
    }
    else
    {
      v29 = 0;
    }
    goto LABEL_114;
  }
  v41 = (unsigned __int8 *)(v29 + v40);
  v42 = v29 + v40 + 1;
  a2[2] = v42;
  if (!v29)
  {
    v87 = v28;
    goto LABEL_114;
  }
  v43 = *v41;
  if (v43 < 2)
  {
    v185 = 0;
    v44 = 1;
    goto LABEL_54;
  }
LABEL_116:
  *a2 = 0;
  a2[1] = 0;
  v89 = a2[3];
  if (!v89 || !v28)
  {
    v90 = 0;
    v29 = 0;
    v184 = 0;
    v185 = 1;
LABEL_118:
    *a2 = 0;
    a2[1] = 0;
    v91 = a2[3];
    if (v91 && v90)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v29, v90);
      v48 = 0;
      v29 = *a2;
      v28 = a2[1];
    }
    else
    {
      v28 = 0;
      v29 = 0;
      v48 = 0;
    }
    goto LABEL_120;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v29);
  v44 = 0;
  v29 = *a2;
  v28 = a2[1];
  v185 = 1;
  v42 = a2[2];
LABEL_54:
  if (!v43)
    v44 = 0;
  v184 = v44;
  v45 = v42 - v29;
  if (v28 <= v45)
  {
    v90 = 0;
    v180 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v180 && v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v180 + 16))(v180);
      v29 = *a2;
      v90 = a2[1];
    }
    else
    {
      v29 = 0;
    }
    goto LABEL_118;
  }
  v46 = (unsigned __int8 *)(v29 + v45);
  v47 = v29 + v45 + 1;
  a2[2] = v47;
  if (!v29)
  {
    v90 = v28;
    goto LABEL_118;
  }
  v48 = *v46;
  if (v48 < 2)
  {
    v3 = 0;
    v49 = 1;
    goto LABEL_60;
  }
LABEL_120:
  *a2 = 0;
  a2[1] = 0;
  v92 = a2[3];
  if (!v92 || !v28)
  {
    v2 = 0;
    v93 = 0;
    v29 = 0;
    v3 = 1;
LABEL_122:
    *a2 = 0;
    a2[1] = 0;
    v94 = a2[3];
    if (v94 && v93)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v94 + 16))(v94, v29, v93);
      v52 = 0;
      v29 = *a2;
      v28 = a2[1];
    }
    else
    {
      v28 = 0;
      v29 = 0;
      v52 = 0;
    }
    goto LABEL_124;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v29);
  v49 = 0;
  v29 = *a2;
  v28 = a2[1];
  v3 = 1;
  v47 = a2[2];
LABEL_60:
  if (v48)
    v2 = v49;
  else
    v2 = 0;
  v50 = v47 - v29;
  if (v28 <= v50)
  {
    v93 = 0;
    v179 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v179 && v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v179 + 16))(v179);
      v29 = *a2;
      v93 = a2[1];
    }
    else
    {
      v29 = 0;
    }
    goto LABEL_122;
  }
  v51 = (unsigned __int8 *)(v29 + v50);
  a2[2] = (uint64_t)(v51 + 1);
  if (!v29)
  {
    v93 = v28;
    goto LABEL_122;
  }
  v52 = *v51;
  if (v52 < 2)
  {
    v4 = 0;
    v53 = 1;
    goto LABEL_67;
  }
LABEL_124:
  *a2 = 0;
  a2[1] = 0;
  v95 = a2[3];
  if (v95 && v28)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 16))(v95, v29);
  v53 = 0;
  v4 = 1;
LABEL_67:
  if (v52)
    v5 = v53;
  else
    v5 = 0;
  v54 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v55)
  {
    LOBYTE(v211) = 0;
    v213 = 0;
LABEL_136:
    v97 = *a2;
    v98 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v99 = a2[3];
    if (v99 && v98)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v97);
    goto LABEL_137;
  }
  v56 = v54;
  v208 = 0;
  v209 = 0;
  if (v54 >> 1 >= 0xF0F)
  {
    while (1)
    {
      IPC::Decoder::decode<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>((uint64_t)&v220, a2);
      if (!v234)
        goto LABEL_135;
      if (HIDWORD(v209) == (_DWORD)v209)
      {
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>((uint64_t)&v208, (unint64_t)&v220);
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v208 + 136 * HIDWORD(v209), (uint64_t)&v220);
        ++HIDWORD(v209);
      }
      if (v234 && (_DWORD)v233 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34AE348[v233])(&v205, &v220);
      if (!--v56)
      {
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v208, HIDWORD(v209));
        v211 = v208;
        v96 = v209;
        v208 = 0;
        v209 = 0;
        v212 = v96;
        goto LABEL_84;
      }
    }
  }
  if (v54)
  {
    LODWORD(v209) = 136 * (int)v54 / 0x88u;
    v208 = (WTF *)WTF::fastMalloc((WTF *)(136 * v54));
    while (1)
    {
      IPC::Decoder::decode<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>((uint64_t)&v220, a2);
      if (!v234)
        break;
      if (HIDWORD(v209) == (_DWORD)v209)
      {
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>((uint64_t)&v208, (unint64_t)&v220);
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v208 + 136 * HIDWORD(v209), (uint64_t)&v220);
        ++HIDWORD(v209);
      }
      if (v234 && (_DWORD)v233 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34AE348[v233])(&v205, &v220);
      if (!--v56)
      {
        v58 = v208;
        v59 = v209;
        goto LABEL_83;
      }
    }
LABEL_135:
    LOBYTE(v211) = 0;
    v213 = 0;
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v208, v57);
    goto LABEL_136;
  }
  v58 = 0;
  v59 = 0;
LABEL_83:
  v208 = 0;
  v209 = 0;
  v211 = v58;
  v212 = v59;
LABEL_84:
  v213 = 1;
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v208, v55);
LABEL_137:
  IPC::Decoder::decode<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v208, a2);
  v100 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v101)
  {
    LOBYTE(v205) = 0;
    v207 = 0;
LABEL_167:
    v122 = *a2;
    v123 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v124 = a2[3];
    if (v124 && v123)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 16))(v124, v122);
    goto LABEL_168;
  }
  v102 = v100;
  v220 = 0;
  *(_QWORD *)&v221 = 0;
  if (v100 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>(&v202, a2);
      if (!(_BYTE)v203)
      {
LABEL_166:
        LOBYTE(v205) = 0;
        v207 = 0;
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v220, v101);
        goto LABEL_167;
      }
      v114 = DWORD1(v221);
      if (DWORD1(v221) != (_DWORD)v221)
        break;
      v115 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v220, DWORD1(v221) + 1, (unint64_t)&v202);
      v116 = DWORD1(v221);
      v117 = DWORD1(v221) + 1;
      v118 = v220;
      v119 = *v115;
      *v115 = 0;
      *((_QWORD *)v118 + v116) = v119;
      DWORD1(v221) = v117;
      if ((_BYTE)v203)
        goto LABEL_160;
LABEL_164:
      if (!--v102)
      {
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v220, DWORD1(v221));
        v205 = v220;
        v178 = v221;
        v220 = 0;
        *(_QWORD *)&v221 = 0;
        v206 = v178;
        goto LABEL_153;
      }
    }
    v120 = v202;
    v202 = 0;
    *((_QWORD *)v220 + DWORD1(v221)) = v120;
    DWORD1(v221) = v114 + 1;
LABEL_160:
    v121 = v202;
    v202 = 0;
    if (v121)
    {
      if (v121[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v121 + 16))(v121);
      else
        --v121[2];
    }
    goto LABEL_164;
  }
  if (v100)
  {
    v103 = WTF::fastMalloc((WTF *)(8 * v100));
    LODWORD(v221) = v102;
    v220 = (WTF::StringImpl *)v103;
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>(&v202, a2);
      if (!(_BYTE)v203)
        goto LABEL_166;
      v104 = DWORD1(v221);
      if (DWORD1(v221) != (_DWORD)v221)
        break;
      v105 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v220, DWORD1(v221) + 1, (unint64_t)&v202);
      v106 = DWORD1(v221);
      v107 = DWORD1(v221) + 1;
      v108 = v220;
      v109 = *v105;
      *v105 = 0;
      *((_QWORD *)v108 + v106) = v109;
      DWORD1(v221) = v107;
      if ((_BYTE)v203)
        goto LABEL_146;
LABEL_150:
      if (!--v102)
      {
        v112 = v220;
        v113 = v221;
        goto LABEL_152;
      }
    }
    v110 = v202;
    v202 = 0;
    *((_QWORD *)v220 + DWORD1(v221)) = v110;
    DWORD1(v221) = v104 + 1;
LABEL_146:
    v111 = v202;
    v202 = 0;
    if (v111)
    {
      if (v111[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v111 + 16))(v111);
      else
        --v111[2];
    }
    goto LABEL_150;
  }
  v112 = 0;
  v113 = 0;
LABEL_152:
  v220 = 0;
  *(_QWORD *)&v221 = 0;
  v205 = v112;
  v206 = v113;
LABEL_153:
  v207 = 1;
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v220, v101);
LABEL_168:
  v125 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v126)
  {
    LOBYTE(v202) = 0;
    v204 = 0;
    goto LABEL_195;
  }
  v127 = v125;
  v218 = 0;
  v219 = 0;
  if (v125 >> 1 >= 0xF0F)
  {
    v183 = v11;
    v128 = v5;
    v129 = v4;
    v130 = v2;
    v131 = v3;
    while (1)
    {
      IPC::Decoder::decode<WebKit::PlatformCAAnimationRemoteProperties>(&v220, a2);
      if (!v234)
        break;
      if (HIDWORD(v219) == (_DWORD)v219)
      {
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::PlatformCAAnimationRemoteProperties>((uint64_t)&v218, (unint64_t)&v220);
      }
      else
      {
        v148 = v218 + 136 * HIDWORD(v219);
        v149 = v220;
        v220 = 0;
        *(_QWORD *)v148 = v149;
        v150 = v221;
        v151 = *(_OWORD *)v222;
        *(_OWORD *)(v148 + 34) = *(_OWORD *)&v222[10];
        *(_OWORD *)(v148 + 24) = v151;
        *(_OWORD *)(v148 + 8) = v150;
        v152 = v223;
        v223 = 0;
        *(_QWORD *)(v148 + 56) = v152;
        LODWORD(v152) = v224;
        *(_BYTE *)(v148 + 68) = v225;
        *(_DWORD *)(v148 + 64) = (_DWORD)v152;
        *(_QWORD *)(v148 + 72) = 0;
        *(_QWORD *)(v148 + 80) = 0;
        v153 = v226;
        v226 = 0;
        *(_QWORD *)(v148 + 72) = v153;
        LODWORD(v153) = v227;
        LODWORD(v227) = 0;
        *(_DWORD *)(v148 + 80) = (_DWORD)v153;
        LODWORD(v153) = HIDWORD(v227);
        HIDWORD(v227) = 0;
        *(_DWORD *)(v148 + 84) = (_DWORD)v153;
        *(_QWORD *)(v148 + 88) = 0;
        *(_QWORD *)(v148 + 96) = 0;
        v154 = v228;
        v228 = 0;
        *(_QWORD *)(v148 + 88) = v154;
        LODWORD(v154) = (_DWORD)v229;
        LODWORD(v229) = 0;
        *(_DWORD *)(v148 + 96) = (_DWORD)v154;
        LODWORD(v154) = HIDWORD(v229);
        HIDWORD(v229) = 0;
        *(_DWORD *)(v148 + 100) = (_DWORD)v154;
        *(_QWORD *)(v148 + 104) = 0;
        *(_QWORD *)(v148 + 112) = 0;
        v155 = v230;
        v230 = 0;
        *(_QWORD *)(v148 + 104) = v155;
        LODWORD(v155) = v231;
        LODWORD(v231) = 0;
        *(_DWORD *)(v148 + 112) = (_DWORD)v155;
        LODWORD(v155) = HIDWORD(v231);
        HIDWORD(v231) = 0;
        *(_DWORD *)(v148 + 116) = (_DWORD)v155;
        *(_QWORD *)(v148 + 120) = 0;
        *(_QWORD *)(v148 + 128) = 0;
        v156 = v232;
        v232 = 0;
        *(_QWORD *)(v148 + 120) = v156;
        LODWORD(v156) = v233;
        LODWORD(v233) = 0;
        *(_DWORD *)(v148 + 128) = v156;
        LODWORD(v156) = HIDWORD(v233);
        HIDWORD(v233) = 0;
        *(_DWORD *)(v148 + 132) = v156;
        ++HIDWORD(v219);
      }
      std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v220, v134);
      if (!--v127)
      {
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v218, (WTF *)HIDWORD(v219));
        v157 = (_DWORD *)v218;
        v218 = 0;
        v202 = v157;
        v158 = (int)v219;
        v146 = HIDWORD(v219);
        LODWORD(v219) = 0;
        LODWORD(v203) = v158;
        v2 = v130;
        v4 = v129;
        v5 = v128;
        v11 = v183;
        goto LABEL_181;
      }
    }
LABEL_194:
    LOBYTE(v202) = 0;
    v204 = 0;
    std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v220, v134);
    WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v218, v159);
    v3 = v131;
    v2 = v130;
    v4 = v129;
    v5 = v128;
    v11 = v183;
LABEL_195:
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      goto LABEL_251;
    goto LABEL_196;
  }
  if (v125)
  {
    v183 = v11;
    v128 = v5;
    v129 = v4;
    v130 = v2;
    v131 = v3;
    v132 = 136 * v125;
    v133 = WTF::fastMalloc((WTF *)(136 * v125));
    LODWORD(v219) = v132 / 0x88;
    v218 = v133;
    do
    {
      IPC::Decoder::decode<WebKit::PlatformCAAnimationRemoteProperties>(&v220, a2);
      if (!v234)
        goto LABEL_194;
      if (HIDWORD(v219) == (_DWORD)v219)
      {
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::PlatformCAAnimationRemoteProperties>((uint64_t)&v218, (unint64_t)&v220);
      }
      else
      {
        v135 = v218 + 136 * HIDWORD(v219);
        v136 = v220;
        v220 = 0;
        *(_QWORD *)v135 = v136;
        v137 = v221;
        v138 = *(_OWORD *)v222;
        *(_OWORD *)(v135 + 34) = *(_OWORD *)&v222[10];
        *(_OWORD *)(v135 + 24) = v138;
        *(_OWORD *)(v135 + 8) = v137;
        v139 = v223;
        v223 = 0;
        *(_QWORD *)(v135 + 56) = v139;
        LODWORD(v139) = v224;
        *(_BYTE *)(v135 + 68) = v225;
        *(_DWORD *)(v135 + 64) = (_DWORD)v139;
        *(_QWORD *)(v135 + 72) = 0;
        *(_QWORD *)(v135 + 80) = 0;
        v140 = v226;
        v226 = 0;
        *(_QWORD *)(v135 + 72) = v140;
        LODWORD(v140) = v227;
        LODWORD(v227) = 0;
        *(_DWORD *)(v135 + 80) = (_DWORD)v140;
        LODWORD(v140) = HIDWORD(v227);
        HIDWORD(v227) = 0;
        *(_DWORD *)(v135 + 84) = (_DWORD)v140;
        *(_QWORD *)(v135 + 88) = 0;
        *(_QWORD *)(v135 + 96) = 0;
        v141 = v228;
        v228 = 0;
        *(_QWORD *)(v135 + 88) = v141;
        LODWORD(v141) = (_DWORD)v229;
        LODWORD(v229) = 0;
        *(_DWORD *)(v135 + 96) = (_DWORD)v141;
        LODWORD(v141) = HIDWORD(v229);
        HIDWORD(v229) = 0;
        *(_DWORD *)(v135 + 100) = (_DWORD)v141;
        *(_QWORD *)(v135 + 104) = 0;
        *(_QWORD *)(v135 + 112) = 0;
        v142 = v230;
        v230 = 0;
        *(_QWORD *)(v135 + 104) = v142;
        LODWORD(v142) = v231;
        LODWORD(v231) = 0;
        *(_DWORD *)(v135 + 112) = (_DWORD)v142;
        LODWORD(v142) = HIDWORD(v231);
        HIDWORD(v231) = 0;
        *(_DWORD *)(v135 + 116) = (_DWORD)v142;
        *(_QWORD *)(v135 + 120) = 0;
        *(_QWORD *)(v135 + 128) = 0;
        v143 = v232;
        v232 = 0;
        *(_QWORD *)(v135 + 120) = v143;
        LODWORD(v143) = v233;
        LODWORD(v233) = 0;
        *(_DWORD *)(v135 + 128) = v143;
        LODWORD(v143) = HIDWORD(v233);
        HIDWORD(v233) = 0;
        *(_DWORD *)(v135 + 132) = v143;
        ++HIDWORD(v219);
      }
      std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v220, v134);
      --v127;
    }
    while (v127);
    v144 = (_DWORD *)v218;
    v145 = (int)v219;
    v146 = HIDWORD(v219);
    v2 = v130;
    v4 = v129;
    v5 = v128;
    v11 = v183;
  }
  else
  {
    v146 = 0;
    v145 = 0;
    v144 = 0;
  }
  v218 = 0;
  v202 = v144;
  LODWORD(v219) = 0;
  LODWORD(v203) = v145;
LABEL_181:
  HIDWORD(v219) = 0;
  HIDWORD(v203) = v146;
  v204 = 1;
  result = WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v218, v126);
  v147 = 0;
  if (*a2)
  {
    while (1)
    {
      if (v217)
      {
        v160 = v216;
        v216 = 0;
        v220 = v160;
        LOBYTE(v221) = v11;
        if (!v201)
        {
          *((_QWORD *)&v221 + 1) = v200;
          if (!v199)
          {
            *(_QWORD *)v222 = v198;
            if (!v197)
            {
              *(_QWORD *)&v222[8] = v196;
              if ((v195 & 0xFF00000000) != 0)
              {
                *(_DWORD *)&v222[16] = v195;
                if ((v194 & 0xFF00000000) != 0)
                {
                  *(_DWORD *)&v222[20] = v194;
                  if (!v193)
                  {
                    v222[24] = v192;
                    if (!v191)
                    {
                      v222[25] = v190;
                      if (v215)
                      {
                        v161 = v214;
                        v214 = 0;
                        v223 = v161;
                        if (!v189)
                        {
                          LOBYTE(v224) = v188;
                          if (!v187)
                          {
                            BYTE1(v224) = v186;
                            if (!v185)
                            {
                              BYTE2(v224) = v184;
                              if (!v3)
                              {
                                HIBYTE(v224) = v2;
                                if (!v4)
                                {
                                  v225 = v5;
                                  if (v213)
                                  {
                                    v162 = v211;
                                    v226 = v211;
                                    v163 = v212;
                                    v164 = HIDWORD(v212);
                                    v211 = 0;
                                    v212 = 0;
                                    v227 = __PAIR64__(v164, v163);
                                    if (v210)
                                    {
                                      v165 = v208;
                                      v208 = 0;
                                      v228 = v165;
                                      v166 = (int)v209;
                                      v167 = HIDWORD(v209);
                                      v229 = v209;
                                      if (v207)
                                      {
                                        v168 = v205;
                                        v230 = v205;
                                        v9 = v206;
                                        v10 = HIDWORD(v206);
                                        v205 = 0;
                                        v206 = 0;
                                        v231 = __PAIR64__(v10, v9);
                                        if (!v147)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_250:
      __break(1u);
LABEL_251:
      if (v10)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
LABEL_196:
      if (!*a2)
      {
        v60 = 0;
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 136) = 0;
        goto LABEL_228;
      }
      v147 = 1;
    }
    v169 = v202;
    v202 = 0;
    *(_QWORD *)a1 = v160;
    v170 = *(_OWORD *)v222;
    *(_OWORD *)(a1 + 8) = v221;
    *(_OWORD *)(a1 + 24) = v170;
    *(_OWORD *)(a1 + 34) = *(_OWORD *)&v222[10];
    v220 = 0;
    v223 = 0;
    *(_QWORD *)(a1 + 56) = v161;
    *(_DWORD *)(a1 + 64) = v224;
    *(_BYTE *)(a1 + 68) = v225;
    v226 = 0;
    *(_QWORD *)(a1 + 72) = v162;
    v227 = 0;
    *(_DWORD *)(a1 + 80) = v163;
    *(_DWORD *)(a1 + 84) = v164;
    v228 = 0;
    *(_QWORD *)(a1 + 88) = v165;
    v229 = 0;
    *(_DWORD *)(a1 + 96) = v166;
    *(_DWORD *)(a1 + 100) = v167;
    v230 = 0;
    *(_QWORD *)(a1 + 104) = v168;
    v231 = 0;
    *(_DWORD *)(a1 + 112) = v9;
    *(_DWORD *)(a1 + 116) = v10;
    v232 = 0;
    *(_QWORD *)(a1 + 120) = v169;
    v233 = 0;
    *(_QWORD *)&v170 = v203;
    v203 = 0;
    *(_QWORD *)(a1 + 128) = v170;
    *(_BYTE *)(a1 + 136) = 1;
    WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v232, (WTF::StringImpl *)v9);
    WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v230, v171);
    v173 = v228;
    if (v228)
    {
      v228 = 0;
      LODWORD(v229) = 0;
      WTF::fastFree(v173, v172);
    }
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v226, v172);
    v174 = v223;
    v223 = 0;
    if (v174)
    {
      if (v174[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v174 + 16))(v174);
      else
        --v174[2];
    }
    v175 = v220;
    v220 = 0;
    if (v175)
    {
      if (*(_DWORD *)v175 == 2)
        WTF::StringImpl::destroy(v175, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v175 -= 2;
    }
    v60 = 1;
  }
  else
  {
    v60 = 0;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 136) = 0;
  }
  result = WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v202, (WTF::StringImpl *)v9);
LABEL_228:
  if (v207)
    result = WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v205, (void *)v9);
  if (v210)
  {
    result = (uint64_t)v208;
    if (v208)
      result = WTF::fastFree(v208, (void *)v9);
  }
  if (v213)
    result = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v211, (void *)v9);
  if (v215)
  {
    result = (uint64_t)v214;
    if (v214)
    {
      if (v214[2] == 1)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v214 + 16))();
      else
        --v214[2];
    }
  }
LABEL_240:
  if (v217)
  {
    result = (uint64_t)v216;
    v216 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v9);
        if (v60)
          return result;
        goto LABEL_247;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v60)
    return result;
LABEL_247:
  v176 = *a2;
  v177 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v177)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v176);
  }
  return result;
}

void sub_196D012CC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,WTF *a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,WTF::StringImpl *a41,char a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100](v46, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  WTF *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v6 = 136 * v3;
    v7 = (uint64_t)v4 + 72;
    do
    {
      WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7 + 48);
      WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7 + 32, v8);
      v10 = *(WTF **)(v7 + 16);
      if (v10)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        WTF::fastFree(v10, v9);
      }
      WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, v9);
      v11 = *(_DWORD **)(v7 - 16);
      *(_QWORD *)(v7 - 16) = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[2];
      }
      v12 = *(WTF::StringImpl **)(v7 - 72);
      *(_QWORD *)(v7 - 72) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v7 += 136;
      v6 -= 136;
    }
    while (v6);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebKit::PlatformCAAnimationRemoteProperties::~PlatformCAAnimationRemoteProperties(WebKit::PlatformCAAnimationRemoteProperties *this, WTF::StringImpl *a2)
{
  void *v3;
  void *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;

  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, v3);
  v5 = (WTF *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v5, v4);
  }
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v4);
  v7 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t IPC::Decoder::decode<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _QWORD v12[2];
  char v13;

  result = (uint64_t)IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>(a2, (uint64_t)v12);
  if (v13)
  {
    v5 = (int *)v12[0];
    v6 = v12[1];
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = v6;
    if (v6)
    {
      if (v6 >> 30)
      {
        __break(0xC471u);
        return result;
      }
      v7 = 4 * v6;
      result = WTF::fastMalloc((WTF *)(4 * v6));
      *(_DWORD *)(a1 + 8) = v6;
      *(_QWORD *)a1 = result;
      do
      {
        v8 = *v5++;
        *(_DWORD *)result = v8;
        result += 4;
        v7 -= 4;
      }
      while (v7);
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

WTF *IPC::Decoder::decode<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>(WTF *result, uint64_t *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a2;
        v10 = a2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v10 = v6;
    v11 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    *(_BYTE *)v3 = 0;
    *((_BYTE *)v3 + 8) = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    *(_QWORD *)result = 0;
    goto LABEL_8;
  }
  result = IPC::ArgumentCoder<WebCore::TimingFunction,void>::decode(&v17, a2);
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 8) = 0;
  if (v18)
  {
    *(_QWORD *)v3 = v17;
LABEL_8:
    *((_BYTE *)v3 + 8) = 1;
    return result;
  }
LABEL_13:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF *)a2[3];
  if (result)
  {
    if (v16)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::decode<IPC::Decoder>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    v14 = 0;
    v15 = 0;
    *result = 0;
    result[1] = 0;
    v16 = result[3];
    if (v16)
    {
      v17 = result;
      v19 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        result = v17;
        a2 = v19;
        v15 = *v17;
        v14 = v17[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_19;
  }
  v6 = (unint64_t *)(v3 + v4);
  v7 = v6 + 1;
  result[2] = v6 + 1;
  if (!v3)
  {
    v14 = v2;
    v15 = 0;
LABEL_19:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result || !v14)
      goto LABEL_23;
    v18 = a2;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*result + 16))(result, v15, v14);
    goto LABEL_28;
  }
  v8 = *v6;
  if (v8)
  {
    if (v8 >> 62)
    {
LABEL_23:
      v13 = 0;
      *(_BYTE *)a2 = 0;
      goto LABEL_16;
    }
    v9 = (((unint64_t)v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    v10 = 4 * v8;
    if (v2 < v9 || v2 - v9 < v10)
    {
      *result = 0;
      result[1] = 0;
      result = (_QWORD *)result[3];
      if (!result || !v2)
        goto LABEL_23;
      v18 = a2;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
LABEL_28:
      a2 = v18;
      goto LABEL_23;
    }
    v12 = v3 + v9;
    result[2] = v12 + v10;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v8;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  v13 = 1;
LABEL_16:
  *(_BYTE *)(a2 + 16) = v13;
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::isPlatformCAAnimationRemote(WebKit::PlatformCAAnimationRemote *this)
{
  return 1;
}

WebKit::PlatformCAAnimationRemoteProperties *WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties(WebKit::PlatformCAAnimationRemoteProperties *this, const WebKit::PlatformCAAnimationRemoteProperties *a2)
{
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  WebKit::PlatformCAAnimationRemoteProperties *v24;
  uint64_t v25;
  const WebKit::PlatformCAAnimationRemoteProperties *v26;
  uint64_t v27;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = *(_OWORD *)((char *)a2 + 8);
  v6 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 34) = *(_OWORD *)((char *)a2 + 34);
  *(_OWORD *)((char *)this + 24) = v6;
  *(_OWORD *)((char *)this + 8) = v5;
  v7 = *((_QWORD *)a2 + 7);
  if (v7)
    ++*(_DWORD *)(v7 + 8);
  *((_QWORD *)this + 7) = v7;
  v8 = *((_DWORD *)a2 + 16);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 68);
  *((_DWORD *)this + 16) = v8;
  v9 = *((unsigned int *)a2 + 21);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 21) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >= 0x1E1E1E2)
      goto LABEL_24;
    v10 = 136 * v9;
    v11 = WTF::fastMalloc((WTF *)(136 * v9));
    *((_DWORD *)this + 20) = v10 / 0x88;
    *((_QWORD *)this + 9) = v11;
    v12 = *((unsigned int *)a2 + 21);
    if ((_DWORD)v12)
    {
      v13 = *((_QWORD *)a2 + 9);
      v14 = 136 * v12;
      do
      {
        v11 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(v11, v13)+ 136;
        v13 += 136;
        v14 -= 136;
      }
      while (v14);
    }
  }
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 88, (uint64_t)a2 + 88);
  v15 = *((unsigned int *)a2 + 29);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 29) = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x196D01C00);
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)this + 28) = v15;
    *((_QWORD *)this + 13) = v16;
    v17 = *((unsigned int *)a2 + 29);
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)*((_QWORD *)a2 + 13);
      v19 = 8 * v17;
      do
      {
        v20 = *v18++;
        ++*(_DWORD *)(v20 + 8);
        *v16++ = v20;
        v19 -= 8;
      }
      while (v19);
    }
  }
  v21 = *((unsigned int *)a2 + 33);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 33) = v21;
  if ((_DWORD)v21)
  {
    if (v21 < 0x1E1E1E2)
    {
      v23 = 136 * v21;
      v24 = (WebKit::PlatformCAAnimationRemoteProperties *)WTF::fastMalloc((WTF *)(136 * v21));
      *((_DWORD *)this + 32) = v23 / 0x88;
      *((_QWORD *)this + 15) = v24;
      v25 = *((unsigned int *)a2 + 33);
      if ((_DWORD)v25)
      {
        v26 = (const WebKit::PlatformCAAnimationRemoteProperties *)*((_QWORD *)a2 + 15);
        v27 = 136 * v25;
        do
        {
          v24 = (WebKit::PlatformCAAnimationRemoteProperties *)(WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties(v24, v26)+ 136);
          v26 = (const WebKit::PlatformCAAnimationRemoteProperties *)((char *)v26 + 136);
          v27 -= 136;
        }
        while (v27);
      }
      return this;
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x196D01BF8);
  }
  return this;
}

void sub_196D01C0C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  void *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;

  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 88) = 0;
    *(_DWORD *)(v2 + 96) = 0;
    WTF::fastFree(v8, v7);
  }
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v7);
  v10 = *(_DWORD **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
    else
      --v10[2];
  }
  v11 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 30))
  {
    v5 = (void *)WTF::fastMalloc((WTF *)(4 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    memcpy(v5, *(const void **)a2, 4 * *(unsigned int *)(a2 + 12));
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::RemoteLayerTreeContext::willStartAnimationOnLayer(WebKit::RemoteLayerTreeContext *this, WebKit::PlatformCALayerRemote *a2)
{
  uint64_t v3;
  unsigned int *v4;
  __int128 v5;

  v5 = *((_OWORD *)a2 + 1);
  v4 = (unsigned int *)a2;
  return WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::PlatformCALayerRemote*>((uint64_t)&v3, (uint64_t *)this + 8, &v5, &v4);
}

WTF **WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::PlatformCAAnimation*>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, _DWORD **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  WTF **result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (!*v15)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v15 = v12;
      }
      WTF::String::operator=(v15, (WTF::StringImpl *)a3);
      result = (WTF **)WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>::operator=((_DWORD **)v15 + 1, *a4);
      v18 = *a2;
      if (*a2)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *a2;
      if (*a2)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_19;
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_19:
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v20 + 16 * v23;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v15);
      v15 = result;
      v20 = *a2;
      if (*a2)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_19;
    }
    if (v16 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_10:
    v11 = i + v14;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_10;
  v24 = *a2;
  if (*a2)
    v25 = *(unsigned int *)(v24 - 4);
  else
    v25 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v24 + 16 * v25;
  *(_BYTE *)(a1 + 16) = 0;
  return (WTF **)WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>::operator=((_DWORD **)(v8 + 16 * v14 + 8), *a4);
}

_OWORD *IPC::Decoder::decode<std::unique_ptr<WebCore::TransformationMatrix>>(_OWORD *result, uint64_t *a2)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[8];
  char v22;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v14 = v6;
    v15 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v5);
    goto LABEL_12;
  }
  if (!v9)
  {
    *(_QWORD *)result = 0;
    goto LABEL_8;
  }
  IPC::Decoder::decode<WebCore::TransformationMatrix>((uint64_t)v21, (uint64_t)a2);
  if (v22)
  {
    result = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
    v10 = v21[5];
    result[4] = v21[4];
    result[5] = v10;
    v11 = v21[7];
    result[6] = v21[6];
    result[7] = v11;
    v12 = v21[1];
    *result = v21[0];
    result[1] = v12;
    v13 = v21[3];
    result[2] = v21[2];
    result[3] = v13;
    *(_QWORD *)v3 = result;
LABEL_8:
    *((_BYTE *)v3 + 8) = 1;
    return result;
  }
LABEL_12:
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 8) = 0;
  v19 = *a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_OWORD *)a2[3];
  if (result)
  {
    if (v20)
      return (_OWORD *)(*(uint64_t (**)(_OWORD *, uint64_t))(*(_QWORD *)result + 16))(result, v19);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TransformationMatrix>(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t *v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t *v185;
  uint64_t v186;
  int v187;
  int v188;
  uint64_t *v189;
  uint64_t v190;
  int v191;
  int v192;
  uint64_t *v193;
  uint64_t v194;
  int v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  int v202;
  uint64_t *v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  int v276;
  uint64_t *v277;
  uint64_t v278;
  int v279;
  int v280;
  uint64_t *v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t *v285;
  uint64_t v286;
  int v287;
  int v288;
  uint64_t *v289;
  uint64_t v290;
  int v291;
  uint64_t *v292;
  uint64_t v293;
  int v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  int v508;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)a2;
  v4 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    v6 = (uint64_t *)(v3 + v4);
    *(_QWORD *)(a2 + 16) = v6 + 1;
    if (v3)
    {
      v7 = 0;
      v8 = *v6;
      goto LABEL_8;
    }
    goto LABEL_235;
  }
  v64 = 0;
  v65 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v66 = *(_QWORD *)(a2 + 24);
  if (v66)
  {
    v203 = (uint64_t *)a2;
    v204 = result;
    if (v2)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v66 + 16))(*(_QWORD *)(a2 + 24), v3);
      a2 = (uint64_t)v203;
      v65 = *v203;
      v64 = v203[1];
      result = v204;
    }
    else
    {
      v64 = 0;
      v65 = 0;
    }
  }
  while (1)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v112 = (uint64_t *)a2;
      v113 = result;
      if (v64)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(a2 + 24), v65, v64);
        v8 = 0;
        a2 = (uint64_t)v112;
        v3 = *v112;
        v2 = v112[1];
        v7 = 1;
        result = v113;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v8 = 0;
        v7 = 1;
      }
    }
    else
    {
      v2 = 0;
      v8 = 0;
      v7 = 1;
    }
LABEL_8:
    v9 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v9 && v2 - v9 > 7)
    {
      v11 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v11 + 1;
      if (v3)
      {
        v12 = 0;
        v13 = *v11;
        goto LABEL_15;
      }
      v67 = v2;
      v68 = 0;
    }
    else
    {
      v67 = 0;
      v68 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v69 = *(_QWORD *)(a2 + 24);
      if (v69)
      {
        v205 = v7;
        v206 = v8;
        v207 = (uint64_t *)a2;
        v208 = result;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v69 + 16))(*(_QWORD *)(a2 + 24), v3);
          a2 = (uint64_t)v207;
          v68 = *v207;
          v67 = v207[1];
          result = v208;
        }
        else
        {
          v67 = 0;
          v68 = 0;
        }
        v8 = v206;
        v7 = v205;
      }
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v114 = v7;
      v115 = v8;
      v116 = (uint64_t *)a2;
      v117 = result;
      if (v67)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(a2 + 24), v68, v67);
        v13 = 0;
        a2 = (uint64_t)v116;
        v3 = *v116;
        v2 = v116[1];
        v12 = 1;
        result = v117;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v13 = 0;
        v12 = 1;
      }
      v8 = v115;
      v7 = v114;
    }
    else
    {
      v2 = 0;
      v13 = 0;
      v12 = 1;
    }
LABEL_15:
    v14 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v14 || v2 - v14 <= 7)
    {
      v70 = 0;
      v71 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v72 = *(_QWORD *)(a2 + 24);
      if (v72)
      {
        v209 = v12;
        v210 = v13;
        v211 = v7;
        v212 = v8;
        v213 = (uint64_t *)a2;
        v214 = result;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v72 + 16))(*(_QWORD *)(a2 + 24), v3);
          a2 = (uint64_t)v213;
          v71 = *v213;
          v70 = v213[1];
          result = v214;
        }
        else
        {
          v70 = 0;
          v71 = 0;
        }
        v8 = v212;
        v7 = v211;
        v13 = v210;
        v12 = v209;
      }
    }
    else
    {
      v15 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v15 + 1;
      if (v3)
      {
        v16 = 0;
        v17 = *v15;
        goto LABEL_19;
      }
      v70 = v2;
      v71 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v118 = v12;
      v119 = v13;
      v120 = v7;
      v121 = v8;
      v122 = (uint64_t *)a2;
      v123 = result;
      if (v70)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(a2 + 24), v71, v70);
        v17 = 0;
        a2 = (uint64_t)v122;
        v3 = *v122;
        v2 = v122[1];
        v16 = 1;
        result = v123;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v17 = 0;
        v16 = 1;
      }
      v8 = v121;
      v7 = v120;
      v13 = v119;
      v12 = v118;
    }
    else
    {
      v2 = 0;
      v17 = 0;
      v16 = 1;
    }
LABEL_19:
    v18 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v18 || v2 - v18 <= 7)
    {
      v73 = 0;
      v74 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v75 = *(_QWORD *)(a2 + 24);
      if (v75)
      {
        v215 = v16;
        v216 = v17;
        v217 = v12;
        v218 = v13;
        v219 = v7;
        v220 = v8;
        v221 = (uint64_t *)a2;
        v222 = result;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v75 + 16))(*(_QWORD *)(a2 + 24), v3);
          a2 = (uint64_t)v221;
          v74 = *v221;
          v73 = v221[1];
          result = v222;
        }
        else
        {
          v73 = 0;
          v74 = 0;
        }
        v8 = v220;
        v7 = v219;
        v13 = v218;
        v12 = v217;
        v17 = v216;
        v16 = v215;
      }
    }
    else
    {
      v19 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v19 + 1;
      if (v3)
      {
        v20 = 0;
        v21 = *v19;
        goto LABEL_23;
      }
      v73 = v2;
      v74 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v124 = v16;
      v125 = v17;
      v126 = v12;
      v127 = v13;
      v128 = v7;
      v129 = v8;
      v130 = (uint64_t *)a2;
      v131 = result;
      if (v73)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(a2 + 24), v74, v73);
        a2 = (uint64_t)v130;
        v3 = *v130;
        v2 = v130[1];
        v20 = 1;
        result = v131;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v20 = 1;
      }
      v8 = v129;
      v7 = v128;
      v13 = v127;
      v12 = v126;
      v17 = v125;
      v21 = 0;
      v16 = v124;
    }
    else
    {
      v2 = 0;
      v21 = 0;
      v20 = 1;
    }
LABEL_23:
    v22 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v22 || v2 - v22 <= 7)
    {
      v76 = 0;
      v77 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v78 = *(_QWORD *)(a2 + 24);
      if (v78)
      {
        v223 = v20;
        v224 = v21;
        v225 = v16;
        v226 = v17;
        v227 = v12;
        v228 = v13;
        v229 = v7;
        v230 = v8;
        v231 = (uint64_t *)a2;
        v232 = result;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v78 + 16))(*(_QWORD *)(a2 + 24), v3);
          a2 = (uint64_t)v231;
          v77 = *v231;
          v76 = v231[1];
          result = v232;
        }
        else
        {
          v76 = 0;
          v77 = 0;
        }
        v8 = v230;
        v7 = v229;
        v13 = v228;
        v12 = v227;
        v17 = v226;
        v16 = v225;
        v21 = v224;
        v20 = v223;
      }
    }
    else
    {
      v23 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v23 + 1;
      if (v3)
      {
        v24 = 0;
        v25 = *v23;
        goto LABEL_27;
      }
      v76 = v2;
      v77 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v132 = v20;
      v133 = v16;
      v134 = v17;
      v135 = v12;
      v136 = v13;
      v137 = v7;
      v138 = v8;
      v139 = (uint64_t *)a2;
      v140 = result;
      if (v76)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(a2 + 24), v77, v76);
        v25 = 0;
        a2 = (uint64_t)v139;
        v3 = *v139;
        v2 = v139[1];
        v24 = 1;
        result = v140;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v25 = 0;
        v24 = 1;
      }
      v8 = v138;
      v7 = v137;
      v13 = v136;
      v12 = v135;
      v17 = v134;
      v16 = v133;
      v20 = v132;
    }
    else
    {
      v2 = 0;
      v25 = 0;
      v24 = 1;
    }
LABEL_27:
    v26 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v26 || v2 - v26 <= 7)
    {
      v79 = 0;
      v80 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v81 = *(_QWORD *)(a2 + 24);
      if (v81)
      {
        v490 = v24;
        v233 = v21;
        v234 = v20;
        v235 = v16;
        v236 = v17;
        v237 = v12;
        v238 = v13;
        v239 = v7;
        v240 = v8;
        v241 = (uint64_t *)a2;
        v242 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, v3);
          a2 = (uint64_t)v241;
          v80 = *v241;
          v79 = v241[1];
          result = v242;
        }
        else
        {
          v79 = 0;
          v80 = 0;
        }
        v8 = v240;
        v7 = v239;
        v13 = v238;
        v12 = v237;
        v17 = v236;
        v16 = v235;
        v20 = v234;
        v21 = v233;
        v24 = v490;
      }
    }
    else
    {
      v27 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v27 + 1;
      if (v3)
      {
        v28 = 0;
        v29 = *v27;
        goto LABEL_31;
      }
      v79 = v2;
      v80 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v479 = v24;
      v141 = v21;
      v142 = v20;
      v143 = v16;
      v144 = v17;
      v145 = v12;
      v146 = v13;
      v147 = v7;
      v148 = v8;
      v149 = (uint64_t *)a2;
      v150 = result;
      if (v79)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v80, v79);
        v29 = 0;
        a2 = (uint64_t)v149;
        v3 = *v149;
        v2 = v149[1];
        result = v150;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v29 = 0;
      }
      v8 = v148;
      v7 = v147;
      v13 = v146;
      v12 = v145;
      v17 = v144;
      v16 = v143;
      v20 = v142;
      v21 = v141;
      v28 = 1;
      v24 = v479;
    }
    else
    {
      v2 = 0;
      v29 = 0;
      v28 = 1;
    }
LABEL_31:
    v30 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v30 || v2 - v30 <= 7)
    {
      v82 = 0;
      v83 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v84 = *(_QWORD *)(a2 + 24);
      if (v84)
      {
        v468 = v28;
        v453 = v29;
        v491 = v24;
        v243 = v20;
        v244 = v21;
        v245 = v17;
        v246 = v12;
        v247 = v13;
        v248 = v7;
        v249 = v8;
        v250 = (uint64_t *)a2;
        v251 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, v3);
          a2 = (uint64_t)v250;
          v83 = *v250;
          v82 = v250[1];
          result = v251;
        }
        else
        {
          v82 = 0;
          v83 = 0;
        }
        v8 = v249;
        v7 = v248;
        v13 = v247;
        v12 = v246;
        v17 = v245;
        v21 = v244;
        v20 = v243;
        v24 = v491;
        v29 = v453;
        v28 = v468;
      }
    }
    else
    {
      v31 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v31 + 1;
      if (v3)
      {
        v32 = 0;
        v33 = *v31;
        goto LABEL_35;
      }
      v82 = v2;
      v83 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v443 = v29;
      v480 = v24;
      v409 = v20;
      v151 = v21;
      v152 = v17;
      v153 = v12;
      v154 = v13;
      v155 = v7;
      v156 = v8;
      v157 = a2;
      v158 = result;
      if (v82)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v83, v82);
        a2 = v157;
        v33 = 0;
        v3 = *(_QWORD *)a2;
        v2 = *(_QWORD *)(a2 + 8);
        result = v158;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v33 = 0;
      }
      v8 = v156;
      v7 = v155;
      v13 = v154;
      v12 = v153;
      v17 = v152;
      v21 = v151;
      v32 = 1;
      v20 = v409;
      v24 = v480;
      v29 = v443;
    }
    else
    {
      v2 = 0;
      v33 = 0;
      v32 = 1;
    }
LABEL_35:
    v34 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v34 || v2 - v34 <= 7)
    {
      v85 = 0;
      v86 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v87 = *(_QWORD *)(a2 + 24);
      if (v87)
      {
        v439 = v32;
        v430 = v33;
        v469 = v28;
        v454 = v29;
        v492 = v24;
        v252 = v16;
        v253 = v20;
        v254 = v21;
        v255 = v17;
        v256 = v12;
        v257 = v13;
        v258 = v7;
        v259 = v8;
        v260 = (uint64_t *)a2;
        v261 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, v3);
          a2 = (uint64_t)v260;
          v86 = *v260;
          v85 = v260[1];
          result = v261;
        }
        else
        {
          v85 = 0;
          v86 = 0;
        }
        v8 = v259;
        v7 = v258;
        v13 = v257;
        v12 = v256;
        v17 = v255;
        v21 = v254;
        v20 = v253;
        v16 = v252;
        v24 = v492;
        v29 = v454;
        v28 = v469;
        v33 = v430;
        v32 = v439;
      }
    }
    else
    {
      v35 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v35 + 1;
      if (v3)
      {
        v36 = 0;
        v37 = *v35;
        goto LABEL_39;
      }
      v85 = v2;
      v86 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v436 = v32;
      v463 = v28;
      v444 = v29;
      v481 = v24;
      v410 = v20;
      v355 = v21;
      v159 = v16;
      v160 = v17;
      v161 = v12;
      v162 = v13;
      v163 = v7;
      v164 = v8;
      v165 = (uint64_t *)a2;
      v166 = result;
      if (v85)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v86, v85);
        v37 = 0;
        a2 = (uint64_t)v165;
        v3 = *v165;
        v2 = v165[1];
        v36 = 1;
        result = v166;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v37 = 0;
        v36 = 1;
      }
      v8 = v164;
      v7 = v163;
      v13 = v162;
      v12 = v161;
      v17 = v160;
      v16 = v159;
      v21 = v355;
      v20 = v410;
      v24 = v481;
      v29 = v444;
      v28 = v463;
      v32 = v436;
    }
    else
    {
      v2 = 0;
      v37 = 0;
      v36 = 1;
    }
LABEL_39:
    v38 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v38 || v2 - v38 <= 7)
    {
      v88 = 0;
      v89 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v90 = *(_QWORD *)(a2 + 24);
      if (v90)
      {
        v404 = v36;
        v392 = v37;
        v440 = v32;
        v431 = v33;
        v470 = v28;
        v455 = v29;
        v493 = v24;
        v262 = v20;
        v263 = v21;
        v264 = v16;
        v265 = v17;
        v266 = v12;
        v267 = v13;
        v268 = v7;
        v269 = v8;
        v270 = (uint64_t *)a2;
        v271 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 16))(v90, v3);
          a2 = (uint64_t)v270;
          v89 = *v270;
          v88 = v270[1];
          result = v271;
        }
        else
        {
          v88 = 0;
          v89 = 0;
        }
        v8 = v269;
        v7 = v268;
        v13 = v267;
        v12 = v266;
        v17 = v265;
        v16 = v264;
        v21 = v263;
        v20 = v262;
        v24 = v493;
        v29 = v455;
        v28 = v470;
        v33 = v431;
        v32 = v440;
        v37 = v392;
        v36 = v404;
      }
    }
    else
    {
      v39 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v39 + 1;
      if (v3)
      {
        v40 = 0;
        v41 = *v39;
        goto LABEL_43;
      }
      v88 = v2;
      v89 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v400 = v36;
      v411 = v20;
      v384 = v37;
      v437 = v32;
      v426 = v33;
      v464 = v28;
      v445 = v29;
      v482 = v24;
      v167 = v21;
      v168 = v16;
      v169 = v17;
      v170 = v12;
      v171 = v13;
      v172 = v7;
      v173 = v8;
      v174 = (uint64_t *)a2;
      v175 = result;
      if (v88)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v89, v88);
        v41 = 0;
        a2 = (uint64_t)v174;
        v3 = *v174;
        v2 = v174[1];
        v40 = 1;
        result = v175;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v41 = 0;
        v40 = 1;
      }
      v8 = v173;
      v7 = v172;
      v13 = v171;
      v12 = v170;
      v17 = v169;
      v16 = v168;
      v21 = v167;
      v36 = v400;
      v20 = v411;
      v24 = v482;
      v29 = v445;
      v28 = v464;
      v33 = v426;
      v32 = v437;
      v37 = v384;
    }
    else
    {
      v2 = 0;
      v41 = 0;
      v40 = 1;
    }
LABEL_43:
    v42 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    v506 = v17;
    v504 = v8;
    if (v2 < v42 || v2 - v42 <= 7)
    {
      v91 = 0;
      v92 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v93 = *(_QWORD *)(a2 + 24);
      if (v93)
      {
        v377 = v40;
        v368 = v41;
        v405 = v36;
        v419 = v20;
        v393 = v37;
        v432 = v33;
        v456 = v29;
        v494 = v24;
        v272 = v21;
        v273 = v16;
        v274 = v12;
        v275 = v13;
        v276 = v7;
        v277 = (uint64_t *)a2;
        v278 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 16))(v93, v3);
          a2 = (uint64_t)v277;
          v92 = *v277;
          v91 = v277[1];
          result = v278;
        }
        else
        {
          v91 = 0;
          v92 = 0;
        }
        v7 = v276;
        v13 = v275;
        v12 = v274;
        v16 = v273;
        v21 = v272;
        v36 = v405;
        v20 = v419;
        v24 = v494;
        v29 = v456;
        v33 = v432;
        v37 = v393;
        v41 = v368;
        v40 = v377;
      }
    }
    else
    {
      v43 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v43 + 1;
      if (v3)
      {
        v44 = 0;
        v45 = *v43;
        goto LABEL_47;
      }
      v91 = v2;
      v92 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v370 = v40;
      v362 = v41;
      v401 = v36;
      v412 = v20;
      v385 = v37;
      v427 = v33;
      v446 = v29;
      v483 = v24;
      v176 = v21;
      v177 = v16;
      v178 = v12;
      v179 = v13;
      v180 = v7;
      v181 = (uint64_t *)a2;
      v182 = result;
      if (v91)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v92, v91);
        v45 = 0;
        a2 = (uint64_t)v181;
        v3 = *v181;
        v2 = v181[1];
        v44 = 1;
        result = v182;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v45 = 0;
        v44 = 1;
      }
      v7 = v180;
      v13 = v179;
      v12 = v178;
      v16 = v177;
      v21 = v176;
      v36 = v401;
      v20 = v412;
      v24 = v483;
      v29 = v446;
      v33 = v427;
      v37 = v385;
      v41 = v362;
      v40 = v370;
    }
    else
    {
      v2 = 0;
      v45 = 0;
      v44 = 1;
    }
LABEL_47:
    v46 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    v505 = v13;
    if (v2 < v46 || v2 - v46 <= 7)
    {
      v94 = 0;
      v95 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v96 = *(_QWORD *)(a2 + 24);
      if (v96)
      {
        v349 = v44;
        v337 = v45;
        v378 = v40;
        v358 = v21;
        v420 = v20;
        v394 = v37;
        v433 = v33;
        v471 = v28;
        v457 = v29;
        v495 = v24;
        v310 = v16;
        v279 = v12;
        v280 = v7;
        v281 = (uint64_t *)a2;
        v282 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v96 + 16))(v96, v3);
          a2 = (uint64_t)v281;
          v95 = *v281;
          v94 = v281[1];
          result = v282;
        }
        else
        {
          v94 = 0;
          v95 = 0;
        }
        v7 = v280;
        v12 = v279;
        v16 = v310;
        v21 = v358;
        v20 = v420;
        v24 = v495;
        v29 = v457;
        v28 = v471;
        v33 = v433;
        v37 = v394;
        v40 = v378;
        v45 = v337;
        v44 = v349;
      }
    }
    else
    {
      v47 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v47 + 1;
      if (v3)
      {
        v48 = v7;
        v49 = 0;
        v50 = *v47;
        goto LABEL_51;
      }
      v94 = v2;
      v95 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v343 = v44;
      v331 = v45;
      v371 = v40;
      v363 = v41;
      v413 = v20;
      v386 = v37;
      v428 = v33;
      v465 = v28;
      v447 = v29;
      v484 = v24;
      v183 = v12;
      v184 = v7;
      v185 = (uint64_t *)a2;
      v186 = result;
      if (v94)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v95, v94);
        v50 = 0;
        a2 = (uint64_t)v185;
        v3 = *v185;
        v2 = v185[1];
        v49 = 1;
        result = v186;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v50 = 0;
        v49 = 1;
      }
      v48 = v184;
      v12 = v183;
      v41 = v363;
      v20 = v413;
      v24 = v484;
      v29 = v447;
      v28 = v465;
      v33 = v428;
      v37 = v386;
      v40 = v371;
      v45 = v331;
      v44 = v343;
    }
    else
    {
      v48 = v7;
      v2 = 0;
      v50 = 0;
      v49 = 1;
    }
LABEL_51:
    v51 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v51 || v2 - v51 <= 7)
    {
      v97 = 0;
      v98 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v99 = *(_QWORD *)(a2 + 24);
      if (v99)
      {
        v326 = v49;
        v316 = v50;
        v350 = v44;
        v338 = v45;
        v379 = v40;
        v359 = v21;
        v421 = v20;
        v395 = v37;
        v441 = v32;
        v434 = v33;
        v472 = v28;
        v458 = v29;
        v496 = v24;
        v283 = v12;
        v284 = v48;
        v285 = (uint64_t *)a2;
        v286 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v3);
          a2 = (uint64_t)v285;
          v98 = *v285;
          v97 = v285[1];
          result = v286;
        }
        else
        {
          v97 = 0;
          v98 = 0;
        }
        v48 = v284;
        v12 = v283;
        v21 = v359;
        v20 = v421;
        v24 = v496;
        v29 = v458;
        v28 = v472;
        v33 = v434;
        v32 = v441;
        v37 = v395;
        v40 = v379;
        v45 = v338;
        v44 = v350;
        v50 = v316;
        v49 = v326;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 16) = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v3)
      {
        v508 = 0;
        v503 = *(_QWORD *)(v3 + v51);
        goto LABEL_55;
      }
      v97 = v2;
      v98 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v321 = v49;
      v311 = v50;
      v344 = v44;
      v332 = v45;
      v372 = v40;
      v364 = v41;
      v414 = v20;
      v387 = v37;
      v438 = v32;
      v429 = v33;
      v466 = v28;
      v448 = v29;
      v485 = v24;
      v187 = v12;
      v188 = v48;
      v189 = (uint64_t *)a2;
      v190 = result;
      if (v97)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v98, v97);
        v503 = 0;
        a2 = (uint64_t)v189;
        v3 = *v189;
        v2 = v189[1];
        v508 = 1;
        result = v190;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v503 = 0;
        v508 = 1;
      }
      v48 = v188;
      v12 = v187;
      v41 = v364;
      v20 = v414;
      v24 = v485;
      v29 = v448;
      v28 = v466;
      v33 = v429;
      v32 = v438;
      v37 = v387;
      v40 = v372;
      v45 = v332;
      v44 = v344;
      v50 = v311;
      v49 = v321;
    }
    else
    {
      v2 = 0;
      v503 = 0;
      v508 = 1;
    }
LABEL_55:
    v52 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v52 || v2 - v52 <= 7)
    {
      v100 = 0;
      v101 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v102 = *(_QWORD *)(a2 + 24);
      if (v102)
      {
        v327 = v49;
        v317 = v50;
        v351 = v44;
        v339 = v45;
        v380 = v40;
        v360 = v21;
        v422 = v20;
        v396 = v37;
        v442 = v32;
        v435 = v33;
        v473 = v28;
        v459 = v29;
        v497 = v24;
        v287 = v12;
        v288 = v48;
        v289 = (uint64_t *)a2;
        v290 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v102 + 16))(v102, v3);
          a2 = (uint64_t)v289;
          v101 = *v289;
          v100 = v289[1];
          result = v290;
        }
        else
        {
          v100 = 0;
          v101 = 0;
        }
        v48 = v288;
        v12 = v287;
        v21 = v360;
        v20 = v422;
        v24 = v497;
        v29 = v459;
        v28 = v473;
        v33 = v435;
        v32 = v442;
        v37 = v396;
        v40 = v380;
        v45 = v339;
        v44 = v351;
        v50 = v317;
        v49 = v327;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 16) = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v3)
      {
        v507 = 0;
        v502 = *(_QWORD *)(v3 + v52);
        goto LABEL_59;
      }
      v100 = v2;
      v101 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v322 = v49;
      v312 = v50;
      v345 = v44;
      v333 = v45;
      v373 = v40;
      v356 = v21;
      v415 = v20;
      v388 = v37;
      v449 = v29;
      v486 = v24;
      v308 = v16;
      v191 = v12;
      v192 = v48;
      v193 = (uint64_t *)a2;
      v194 = result;
      if (v100)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v101, v100);
        v502 = 0;
        a2 = (uint64_t)v193;
        v3 = *v193;
        v2 = v193[1];
        v507 = 1;
        result = v194;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v502 = 0;
        v507 = 1;
      }
      v48 = v192;
      v12 = v191;
      v16 = v308;
      v21 = v356;
      v20 = v415;
      v24 = v486;
      v29 = v449;
      v37 = v388;
      v40 = v373;
      v45 = v333;
      v44 = v345;
      v50 = v312;
      v49 = v322;
    }
    else
    {
      v2 = 0;
      v502 = 0;
      v507 = 1;
    }
LABEL_59:
    v53 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v53 || v2 - v53 <= 7)
    {
      v54 = v29;
      v103 = 0;
      v104 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v105 = *(_QWORD *)(a2 + 24);
      if (v105)
      {
        v328 = v49;
        v318 = v50;
        v352 = v44;
        v340 = v45;
        v381 = v40;
        v361 = v21;
        v406 = v36;
        v423 = v20;
        v397 = v37;
        v460 = v29;
        v498 = v24;
        v305 = v12;
        v291 = v48;
        v292 = (uint64_t *)a2;
        v293 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v3);
          a2 = (uint64_t)v292;
          v104 = *v292;
          v103 = v292[1];
          result = v293;
        }
        else
        {
          v103 = 0;
          v104 = 0;
        }
        v48 = v291;
        v12 = v305;
        v21 = v361;
        v36 = v406;
        v20 = v423;
        v24 = v498;
        v54 = v460;
        v37 = v397;
        v40 = v381;
        v45 = v340;
        v44 = v352;
        v50 = v318;
        v49 = v328;
      }
    }
    else
    {
      v54 = v29;
      v55 = v25;
      *(_QWORD *)(a2 + 16) = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v3)
      {
        v56 = v21;
        v57 = 0;
        v58 = *(_QWORD *)(v3 + v53);
        goto LABEL_63;
      }
      v103 = v2;
      v104 = 0;
    }
    v55 = v25;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v323 = v49;
      v313 = v50;
      v346 = v44;
      v334 = v45;
      v374 = v40;
      v357 = v21;
      v365 = v41;
      v402 = v36;
      v416 = v20;
      v389 = v37;
      v450 = v54;
      v487 = v24;
      v474 = v25;
      v302 = v12;
      v195 = v48;
      v196 = (uint64_t *)a2;
      v197 = result;
      if (v103)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v104, v103);
        v58 = 0;
        a2 = (uint64_t)v196;
        v3 = *v196;
        v2 = v196[1];
        v57 = 1;
        result = v197;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v58 = 0;
        v57 = 1;
      }
      v48 = v195;
      v12 = v302;
      v56 = v357;
      v41 = v365;
      v36 = v402;
      v20 = v416;
      v55 = v474;
      v24 = v487;
      v54 = v450;
      v37 = v389;
      v40 = v374;
      v45 = v334;
      v44 = v346;
      v50 = v313;
      v49 = v323;
    }
    else
    {
      v56 = v21;
      v2 = 0;
      v58 = 0;
      v57 = 1;
    }
LABEL_63:
    v59 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v59 || v2 - v59 <= 7)
    {
      v106 = 0;
      v107 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      if (*(_QWORD *)(a2 + 24))
      {
        v329 = v49;
        v319 = v50;
        v353 = v44;
        v341 = v45;
        v382 = v40;
        v407 = v36;
        v424 = v20;
        v398 = v37;
        v461 = v54;
        v499 = v24;
        v477 = v55;
        v306 = v12;
        v294 = v48;
        v295 = (uint64_t *)a2;
        v296 = result;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), v3);
          a2 = (uint64_t)v295;
          v107 = *v295;
          v106 = v295[1];
          result = v296;
        }
        else
        {
          v106 = 0;
          v107 = 0;
        }
        v48 = v294;
        v12 = v306;
        v36 = v407;
        v20 = v424;
        v55 = v477;
        v24 = v499;
        v54 = v461;
        v37 = v398;
        v40 = v382;
        v45 = v341;
        v44 = v353;
        v50 = v319;
        v49 = v329;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 16) = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v3)
      {
        v60 = 0;
        v61 = *(_QWORD *)(v3 + v59);
        goto LABEL_67;
      }
      v106 = v2;
      v107 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      v324 = v49;
      v314 = v50;
      v347 = v44;
      v335 = v45;
      v375 = v40;
      v366 = v41;
      v403 = v36;
      v417 = v20;
      v390 = v37;
      v451 = v54;
      v488 = v24;
      v475 = v55;
      v303 = v12;
      v300 = v48;
      v198 = (uint64_t *)a2;
      v199 = result;
      if (v106)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v107, v106);
        v61 = 0;
        a2 = (uint64_t)v198;
        v3 = *v198;
        v2 = v198[1];
        v60 = 1;
        result = v199;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v61 = 0;
        v60 = 1;
      }
      v48 = v300;
      v12 = v303;
      v41 = v366;
      v36 = v403;
      v20 = v417;
      v55 = v475;
      v24 = v488;
      v54 = v451;
      v37 = v390;
      v40 = v375;
      v45 = v335;
      v44 = v347;
      v50 = v314;
      v49 = v324;
    }
    else
    {
      v2 = 0;
      v61 = 0;
      v60 = 1;
    }
LABEL_67:
    v62 = ((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v62 || v2 - v62 <= 7)
    {
      v501 = 0;
      v108 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v109 = *(_QWORD *)(a2 + 24);
      if (v109)
      {
        v330 = v49;
        v320 = v50;
        v354 = v44;
        v342 = v45;
        v383 = v40;
        v369 = v41;
        v408 = v36;
        v425 = v20;
        v399 = v37;
        v462 = v54;
        v500 = v24;
        v478 = v55;
        v307 = v12;
        v301 = v48;
        v297 = (uint64_t *)a2;
        v298 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v109 + 16))(v109, v3);
          a2 = (uint64_t)v297;
          v108 = *v297;
          v501 = v297[1];
          result = v298;
        }
        else
        {
          v501 = 0;
          v108 = 0;
        }
        v48 = v301;
        v12 = v307;
        v41 = v369;
        v36 = v408;
        v20 = v425;
        v55 = v478;
        v24 = v500;
        v54 = v462;
        v37 = v399;
        v40 = v383;
        v45 = v342;
        v44 = v354;
        v50 = v320;
        v49 = v330;
      }
    }
    else
    {
      v63 = (uint64_t *)((*(_QWORD *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 16) = v63 + 1;
      if (v3)
      {
        a2 = 0;
        v3 = *v63;
        if (v48)
          goto LABEL_234;
LABEL_71:
        if (!v12
          && !v16
          && !v20
          && !v24
          && !v28
          && !v32
          && !v36
          && !v40
          && !v44
          && !v49
          && !v508
          && !v507
          && !v57
          && !v60
          && !(_DWORD)a2)
        {
          *(_QWORD *)result = v504;
          *(_QWORD *)(result + 8) = v505;
          *(_QWORD *)(result + 16) = v506;
          *(_QWORD *)(result + 24) = v56;
          *(_QWORD *)(result + 32) = v55;
          *(_QWORD *)(result + 40) = v54;
          *(_QWORD *)(result + 48) = v33;
          *(_QWORD *)(result + 56) = v37;
          *(_QWORD *)(result + 64) = v41;
          *(_QWORD *)(result + 72) = v45;
          *(_QWORD *)(result + 80) = v50;
          *(_QWORD *)(result + 88) = v503;
          *(_QWORD *)(result + 96) = v502;
          *(_QWORD *)(result + 104) = v58;
          *(_QWORD *)(result + 112) = v61;
          *(_QWORD *)(result + 120) = v3;
          *(_BYTE *)(result + 128) = 1;
          return result;
        }
        goto LABEL_234;
      }
      v501 = v2;
      v108 = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v110 = *(_QWORD *)(a2 + 24);
    if (!v110)
    {
      v111 = 0;
      goto LABEL_136;
    }
    v325 = v49;
    v315 = v50;
    v348 = v44;
    v336 = v45;
    v376 = v40;
    v367 = v41;
    v418 = v20;
    v391 = v37;
    v467 = v28;
    v452 = v54;
    v489 = v24;
    v476 = v55;
    v304 = v12;
    v309 = v16;
    v200 = (_QWORD *)a2;
    v201 = result;
    if (!v501)
      break;
    v202 = v48;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v110 + 16))(v110, v108, v501);
    if (!*v200)
    {
      a2 = (uint64_t)v200;
      v111 = v200[1];
      v110 = v200[3];
      result = v201;
      goto LABEL_136;
    }
    v3 = 0;
    a2 = 1;
    result = v201;
    v299 = v202;
    v12 = v304;
    v16 = v309;
    v41 = v367;
    v20 = v418;
    v55 = v476;
    v24 = v489;
    v54 = v452;
    v28 = v467;
    v37 = v391;
    v40 = v376;
    v45 = v336;
    v44 = v348;
    v50 = v315;
    v49 = v325;
    if (!v299)
      goto LABEL_71;
LABEL_234:
    __break(1u);
LABEL_235:
    v64 = v2;
    v65 = v3;
  }
  v111 = 0;
LABEL_136:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 128) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v110 && v111)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 16))(v110, 0);
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **result;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>::~KeyValuePair((uint64_t)v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>::~KeyValuePair((uint64_t)v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100](*(_QWORD *)a1 + 144 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 144 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1C71C72)
    {
      __break(0xC471u);
      JUMPOUT(0x196D04188);
    }
    v3 = *(WTF **)a1;
    v4 = (uint64_t *)(*(_QWORD *)a1 + 144 * *(unsigned int *)(a1 + 12));
    v5 = 144 * a2;
    v6 = WTF::fastMalloc((WTF *)(144 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x90;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>::move(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  WTF::StringImpl *v6;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100](a3, v5);
      result = std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)v5, v6);
      a3 += 144;
      v5 += 18;
    }
    while (v5 != a2);
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::TimingFunction,void>::decode(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  __n128 v11;
  unint64_t v12;
  WTF *v13;
  __n128 v14;
  unsigned int v15;
  __n128 *v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  _BYTE *v35;
  uint64_t v36;
  WTF *result;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  _BOOL4 v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  int v64;
  unint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  __n128 *v110;
  int v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  WTF *v139;
  int v140;
  unsigned int v141;
  unsigned __int8 v142;
  __n128 v143;
  char v144;
  WTF *v145;
  uint64_t v146;

  v4 = a2[2];
  v5 = (_BYTE *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v65 = 0;
    v66 = 0;
    *a2 = 0;
    a2[1] = 0;
    v67 = a2[3];
    if (v67)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
        v66 = (_BYTE *)*a2;
        v65 = a2[1];
      }
      else
      {
        v65 = 0;
        v66 = 0;
      }
    }
    goto LABEL_104;
  }
  v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v65 = v6;
    v66 = 0;
LABEL_104:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v68 = a2[3];
    if (v68)
    {
      if (v65)
      {
        (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v68 + 16))(v68, v66, v65);
        v5 = (_BYTE *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_105;
  }
  v9 = *v8;
  if (v9 >= 4)
  {
LABEL_105:
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result && v6)
      result = (WTF *)(*(uint64_t (**)(WTF *, _BYTE *))(*(_QWORD *)result + 16))(result, v5);
    goto LABEL_106;
  }
  if (v9 == 2)
  {
    v39 = IPC::Decoder::decode<unsigned int>(a2);
    v40 = a2[1];
    v5 = (_BYTE *)*a2;
    v41 = a2[2] - *a2;
    if (v40 <= v41)
    {
      v73 = 0;
      v74 = 0;
      *a2 = 0;
      a2[1] = 0;
      v75 = a2[3];
      if (v75)
      {
        if (v40)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75);
          v74 = (_BYTE *)*a2;
          v73 = a2[1];
        }
        else
        {
          v73 = 0;
          v74 = 0;
        }
      }
    }
    else
    {
      v42 = &v5[v41];
      a2[2] = (uint64_t)(v42 + 1);
      if (v5)
      {
        if (*v42 < 2u)
        {
          if (!*v42)
          {
            v45 = 0;
            LODWORD(v35) = 0;
            v24 = 0x10000;
            goto LABEL_79;
          }
          if (v40 <= v42 + 1 - v5)
          {
            v44 = 0;
            v112 = 0;
            *a2 = 0;
            a2[1] = 0;
            v113 = a2[3];
            if (v113)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113);
              v44 = 0;
              v5 = (_BYTE *)*a2;
              v123 = a2[1];
              v124 = a2[3];
              *a2 = 0;
              a2[1] = 0;
              v112 = 0;
              if (v124)
              {
                if (v123)
                {
                  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v124 + 16))(v124, v5);
                  v112 = (_BYTE *)*a2;
                  v44 = a2[1];
                }
              }
            }
          }
          else
          {
            a2[2] = (uint64_t)(v42 + 2);
            v43 = v42[1];
            if (v43 < 6)
            {
              LODWORD(v44) = v43 | 0x100;
              goto LABEL_49;
            }
            v44 = v40;
            v112 = v5;
          }
          *a2 = 0;
          a2[1] = 0;
          v114 = a2[3];
          if (v114)
          {
            if (!v44)
              goto LABEL_49;
            (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v114 + 16))(v114, v112, v44);
          }
          LODWORD(v44) = 0;
LABEL_49:
          v24 = (v44 > 0xFF) << 16;
          if (v44 >= 0x100)
            v45 = v44;
          else
            v45 = 0;
          LODWORD(v35) = 256;
          goto LABEL_79;
        }
LABEL_114:
        *a2 = 0;
        a2[1] = 0;
        v77 = a2[3];
        if (v77 && v40)
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v77 + 16))(v77, v5);
        v24 = 0;
        v45 = 0;
        LODWORD(v35) = 0;
LABEL_79:
        if (!WORD1(v24))
        {
          v5 = (_BYTE *)*a2;
          v79 = a2[1];
          *a2 = 0;
          a2[1] = 0;
          v80 = a2[3];
          if (v80)
          {
            if (v79)
            {
              v131 = (int)v35;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v80 + 16))(v80, v5);
              LODWORD(v35) = v131;
            }
          }
        }
        if (*a2)
        {
          if ((v39 & 0xFF00000000) == 0)
            goto LABEL_153;
          v24 = v45 | v24 | v35;
          LODWORD(v35) = WORD1(v24);
          if (!WORD1(v24))
            goto LABEL_153;
          result = (WTF *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)result = &off_1E34AD910;
          *((_DWORD *)result + 2) = 1;
          *((_DWORD *)result + 3) = v39;
          *((_WORD *)result + 8) = v24;
          goto LABEL_84;
        }
        v81 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        result = (WTF *)a2[3];
        if (result)
          goto LABEL_151;
        goto LABEL_106;
      }
      v73 = v40;
      v74 = 0;
    }
    v40 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v76 = a2[3];
    if (v76)
    {
      if (v73)
      {
        (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v76 + 16))(v76, v74, v73);
        v5 = (_BYTE *)*a2;
        v40 = a2[1];
      }
      else
      {
        v40 = 0;
        v5 = 0;
      }
    }
    goto LABEL_114;
  }
  if (v9 == 1)
  {
    if (v6 <= v8 + 1 - v5)
    {
      v69 = 0;
      v70 = 0;
      *a2 = 0;
      a2[1] = 0;
      v71 = a2[3];
      if (v71)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
        v69 = 0;
        v116 = (_BYTE *)*a2;
        v117 = a2[1];
        v118 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v70 = 0;
        if (v118)
        {
          if (v117)
          {
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v118 + 16))(v118, v116);
            v70 = (_BYTE *)*a2;
            v69 = a2[1];
          }
        }
      }
    }
    else
    {
      a2[2] = (uint64_t)(v8 + 2);
      v19 = v8[1];
      if (v19 < 5)
      {
        v20 = v19 | 0x100;
        goto LABEL_20;
      }
      v69 = v6;
      v70 = v5;
    }
    *a2 = 0;
    a2[1] = 0;
    v72 = a2[3];
    if (v72 && v69)
    {
      (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v72 + 16))(v72, v70, v69);
      v20 = 0;
      v5 = (_BYTE *)*a2;
      v6 = a2[1];
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v20 = 0;
    }
LABEL_20:
    v21 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
    if (v6 < v21 || v6 - v21 <= 7)
    {
      v82 = 0;
      v83 = 0;
      *a2 = 0;
      a2[1] = 0;
      v84 = a2[3];
      if (v84)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
          v83 = (_BYTE *)*a2;
          v82 = a2[1];
        }
        else
        {
          v82 = 0;
          v83 = 0;
        }
      }
    }
    else
    {
      v22 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (uint64_t)(v22 + 1);
      if (v5)
      {
        v23 = 0;
        v24 = *v22;
        goto LABEL_24;
      }
      v82 = v6;
      v83 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v85 = a2[3];
    if (v85 && v82)
    {
      (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v85 + 16))(v85, v83, v82);
      v24 = 0;
      v5 = (_BYTE *)*a2;
      v6 = a2[1];
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v24 = 0;
    }
    v23 = 1;
LABEL_24:
    v25 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
    if (v6 < v25 || v6 - v25 <= 7)
    {
      v86 = 0;
      v87 = 0;
      *a2 = 0;
      a2[1] = 0;
      v88 = a2[3];
      if (v88)
      {
        v122 = v23;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 16))(v88);
          v87 = (_BYTE *)*a2;
          v86 = a2[1];
        }
        else
        {
          v86 = 0;
          v87 = 0;
        }
        v23 = v122;
      }
    }
    else
    {
      v26 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (uint64_t)(v26 + 1);
      if (v5)
      {
        v27 = 0;
        v28 = *v26;
        goto LABEL_28;
      }
      v86 = v6;
      v87 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v89 = a2[3];
    if (v89)
    {
      v134 = v23;
      if (v86)
      {
        (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v89 + 16))(v89, v87, v86);
        v28 = 0;
        v5 = (_BYTE *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
        v28 = 0;
      }
      v27 = 1;
      v23 = v134;
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v28 = 0;
      v27 = 1;
    }
LABEL_28:
    v29 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
    if (v6 < v29 || v6 - v29 <= 7)
    {
      v90 = 0;
      v91 = 0;
      *a2 = 0;
      a2[1] = 0;
      v92 = a2[3];
      if (v92)
      {
        v129 = v27;
        v136 = v23;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v92 + 16))(v92);
          v91 = (_BYTE *)*a2;
          v90 = a2[1];
        }
        else
        {
          v90 = 0;
          v91 = 0;
        }
        v27 = v129;
        v23 = v136;
      }
    }
    else
    {
      v30 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (uint64_t)(v30 + 1);
      if (v5)
      {
        v31 = 0;
        v32 = *v30;
        goto LABEL_32;
      }
      v90 = v6;
      v91 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v32 = 0;
    v93 = a2[3];
    if (v93)
    {
      v128 = v27;
      v135 = v23;
      if (v90)
      {
        (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v93 + 16))(v93, v91, v90);
        v5 = (_BYTE *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
      v31 = 1;
      v27 = v128;
      v23 = v135;
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v31 = 1;
    }
LABEL_32:
    v33 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
    if (v6 < v33 || v6 - v33 <= 7)
    {
      v94 = 0;
      v95 = 0;
      *a2 = 0;
      a2[1] = 0;
      v96 = a2[3];
      if (v96)
      {
        v126 = v31;
        v130 = v27;
        v137 = v23;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
          v95 = (_BYTE *)*a2;
          v94 = a2[1];
        }
        else
        {
          v94 = 0;
          v95 = 0;
        }
        v27 = v130;
        v23 = v137;
        v31 = v126;
      }
    }
    else
    {
      v34 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (uint64_t)(v34 + 1);
      if (v5)
      {
        LODWORD(v35) = 0;
        v36 = *v34;
        goto LABEL_36;
      }
      v94 = v6;
      v95 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (!result || !v94)
      goto LABEL_106;
    v125 = v31;
    v127 = v27;
    v132 = v23;
    (*(void (**)(WTF *, _BYTE *, unint64_t))(*(_QWORD *)result + 16))(result, v95, v94);
    if (!*a2)
    {
LABEL_150:
      v81 = a2[1];
      result = (WTF *)a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (result)
      {
LABEL_151:
        if (v81)
        {
          result = (WTF *)(*(uint64_t (**)(WTF *, _QWORD))(*(_QWORD *)result + 16))(result, 0);
          v35 = (_BYTE *)*a2;
          if (*a2)
            goto LABEL_153;
        }
      }
LABEL_106:
      *a1 = 0;
      a1[8] = 0;
      return result;
    }
    LODWORD(v35) = 1;
    v36 = 0;
    v27 = v127;
    v23 = v132;
    v31 = v125;
LABEL_36:
    if (v20 <= 0xFF || v23 || v27 || v31 || (_DWORD)v35)
      goto LABEL_153;
    result = (WTF *)WTF::fastMalloc((WTF *)0x38);
    *((_DWORD *)result + 2) = 1;
    *(_QWORD *)result = &off_1E34AD8D8;
    *((_QWORD *)result + 2) = v24;
    *((_QWORD *)result + 3) = v28;
    *((_QWORD *)result + 4) = v32;
    *((_QWORD *)result + 5) = v36;
    *((_BYTE *)result + 48) = v20;
    goto LABEL_84;
  }
  if (!*v8)
  {
    v10 = IPC::Decoder::decode<unsigned long long>(a2);
    if ((_BYTE)v5)
    {
      v12 = v10;
      v145 = 0;
      v146 = 0;
      if (v10 >= 0x10000)
      {
        v108 = 0;
        LODWORD(v109) = 0;
        while (1)
        {
          IPC::Decoder::decode<WebCore::LinearTimingFunction::Point>((uint64_t)&v143, a2, v11);
          if (!v144)
            break;
          if ((_DWORD)v109 == (_DWORD)v146)
          {
            v110 = (__n128 *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v145, v109 + 1, (unint64_t)&v143);
            v111 = HIDWORD(v146);
            v108 = v145;
            v11 = *v110;
            *((__n128 *)v145 + HIDWORD(v146)) = *v110;
          }
          else
          {
            v11 = v143;
            *((__n128 *)v108 + v109) = v143;
            v111 = HIDWORD(v146);
          }
          v109 = (v111 + 1);
          HIDWORD(v146) = v111 + 1;
          if (!--v12)
          {
            if (v146 > v109)
            {
              if (v111 == -1)
              {
                v145 = 0;
                LODWORD(v146) = 0;
                WTF::fastFree(v108, v5);
              }
              else
              {
                LODWORD(v146) = v111 + 1;
                v145 = (WTF *)WTF::fastRealloc(v108, (void *)(16 * v109));
              }
            }
            v139 = v145;
            v18 = v146;
            v15 = HIDWORD(v146);
            goto LABEL_88;
          }
        }
        LOBYTE(v139) = 0;
        v142 = 0;
        v13 = v145;
        if (!v145)
          goto LABEL_91;
      }
      else
      {
        if (!v10)
        {
          v15 = 0;
          v18 = 0;
          v13 = 0;
LABEL_87:
          v139 = v13;
LABEL_88:
          v140 = v18;
          v141 = v15;
          v142 = 1;
          goto LABEL_92;
        }
        v13 = (WTF *)WTF::fastMalloc((WTF *)(16 * v10));
        v15 = 0;
        LODWORD(v146) = v12;
        v145 = v13;
        while (1)
        {
          IPC::Decoder::decode<WebCore::LinearTimingFunction::Point>((uint64_t)&v143, a2, v14);
          if (!v144)
            break;
          if (v15 == (_DWORD)v146)
          {
            v16 = (__n128 *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v145, v15 + 1, (unint64_t)&v143);
            v17 = HIDWORD(v146);
            v13 = v145;
            v14 = *v16;
            *((__n128 *)v145 + HIDWORD(v146)) = *v16;
          }
          else
          {
            v14 = v143;
            *((__n128 *)v13 + v15) = v143;
            v17 = HIDWORD(v146);
          }
          v15 = v17 + 1;
          HIDWORD(v146) = v17 + 1;
          if (!--v12)
          {
            v18 = v146;
            goto LABEL_87;
          }
        }
        LOBYTE(v139) = 0;
        v142 = 0;
      }
      v145 = 0;
      LODWORD(v146) = 0;
      WTF::fastFree(v13, v5);
    }
    else
    {
      LOBYTE(v139) = 0;
      v142 = 0;
    }
LABEL_91:
    v5 = (_BYTE *)*a2;
    v61 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v62 = a2[3];
    if (v62 && v61)
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 16))(v62, v5);
LABEL_92:
    v24 = *a2;
    LODWORD(v35) = v142;
    if (!*a2)
      goto LABEL_154;
    if (v142)
    {
      v63 = (_DWORD *)WTF::fastMalloc((WTF *)0x20);
      v64 = 1;
      v63[2] = 1;
      *(_QWORD *)v63 = &off_1E34AD8A0;
      WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v63 + 4), (uint64_t)&v139);
      goto LABEL_95;
    }
    while (1)
    {
LABEL_153:
      __break(1u);
LABEL_154:
      v63 = 0;
      v64 = 0;
      if (!(_DWORD)v35)
        goto LABEL_174;
LABEL_95:
      result = v139;
      if (v139)
        result = (WTF *)WTF::fastFree(v139, v5);
      if (!v24)
        break;
LABEL_98:
      v35 = (_BYTE *)*a2;
      if (!*a2)
      {
        *a1 = 0;
        a1[8] = 0;
        if (v64 && v63)
        {
          if (v63[2] == 1)
            return (WTF *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v63 + 16))(v63);
          else
            --v63[2];
        }
        return result;
      }
      if (v64)
      {
        *(_QWORD *)a1 = v63;
        goto LABEL_101;
      }
    }
    v24 = *a2;
LABEL_174:
    v115 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
    {
      if (v115)
        result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v24);
    }
    goto LABEL_98;
  }
  v46 = ((unint64_t)(v8 + 8) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
  v48 = v6 < v46 || v6 - v46 < 8;
  if (v48)
  {
    *a2 = 0;
    a2[1] = 0;
    v78 = a2[3];
    if (v78)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
      v6 = 0;
      v119 = *a2;
      v120 = a2[1];
      v121 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v5 = 0;
      v24 = 0;
      if (v121 && v120)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, v119, v120);
        v24 = 0;
        v5 = (_BYTE *)*a2;
        v6 = a2[1];
      }
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v24 = 0;
    }
  }
  else
  {
    v49 = (uint64_t *)&v5[v46];
    v24 = *v49;
    a2[2] = (uint64_t)(v49 + 1);
  }
  v50 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
  if (v6 < v50 || v6 - v50 <= 7)
  {
    v97 = 0;
    v98 = 0;
    *a2 = 0;
    a2[1] = 0;
    v99 = a2[3];
    if (v99)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99);
        v98 = *a2;
        v97 = a2[1];
      }
      else
      {
        v97 = 0;
        v98 = 0;
      }
    }
  }
  else
  {
    v51 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = (uint64_t)(v51 + 1);
    if (v5)
    {
      v52 = 0;
      v53 = *v51;
      goto LABEL_65;
    }
    v97 = v6;
    v98 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v53 = 0;
  v100 = a2[3];
  if (v100 && v97)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v100 + 16))(v100, v98, v97);
    v5 = (_BYTE *)*a2;
    v6 = a2[1];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v52 = 1;
LABEL_65:
  v54 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
  if (v6 < v54 || v6 - v54 <= 7)
  {
    v101 = 0;
    v102 = 0;
    *a2 = 0;
    a2[1] = 0;
    v103 = a2[3];
    if (v103)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
        v102 = *a2;
        v101 = a2[1];
      }
      else
      {
        v101 = 0;
        v102 = 0;
      }
    }
  }
  else
  {
    v55 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = (uint64_t)(v55 + 1);
    if (v5)
    {
      v56 = 0;
      v57 = *v55;
      goto LABEL_69;
    }
    v101 = v6;
    v102 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v57 = 0;
  v104 = a2[3];
  if (v104 && v101)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v104 + 16))(v104, v102, v101);
    v5 = (_BYTE *)*a2;
    v6 = a2[1];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v56 = 1;
LABEL_69:
  v58 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
  if (v6 < v58 || v6 - v58 <= 7)
  {
    v105 = 0;
    v106 = 0;
    *a2 = 0;
    a2[1] = 0;
    v107 = a2[3];
    if (v107)
    {
      v138 = v56;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v107 + 16))(v107);
        v106 = *a2;
        v105 = a2[1];
      }
      else
      {
        v105 = 0;
        v106 = 0;
      }
      v56 = v138;
    }
  }
  else
  {
    v59 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = (uint64_t)(v59 + 1);
    if (v5)
    {
      LODWORD(v35) = 0;
      v60 = *v59;
      if (v48)
        goto LABEL_153;
      goto LABEL_73;
    }
    v105 = v6;
    v106 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  result = (WTF *)a2[3];
  if (!result || !v105)
    goto LABEL_106;
  v133 = v56;
  (*(void (**)(WTF *, uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v106, v105);
  if (!*a2)
    goto LABEL_150;
  LODWORD(v35) = 1;
  v60 = 0;
  v56 = v133;
  if (v48)
    goto LABEL_153;
LABEL_73:
  if (v52 || v56 || (_DWORD)v35)
    goto LABEL_153;
  result = (WTF *)WTF::fastMalloc((WTF *)0x30);
  *((_DWORD *)result + 2) = 1;
  *(_QWORD *)result = &off_1E34AD948;
  *((_QWORD *)result + 2) = v24;
  *((_QWORD *)result + 3) = v53;
  *((_QWORD *)result + 4) = v57;
  *((_QWORD *)result + 5) = v60;
LABEL_84:
  if (*a2)
  {
    *(_QWORD *)a1 = result;
LABEL_101:
    a1[8] = 1;
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
    return (WTF *)WTF::fastFree(result, v38);
  }
  return result;
}

void sub_196D05000(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17)
{
  if (a17)
    WTF::fastFree(a17, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebValidationMessageClient::documentDetached(WebKit::WebValidationMessageClient *this, WebCore::Document *a2)
{
  uint64_t v2;
  const WebCore::Element *v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(const WebCore::Element **)(v2 + 8);
    if (v3)
    {
      if (*(WebCore::Document **)(*((_QWORD *)v3 + 5) + 8) == a2)
        WebKit::WebValidationMessageClient::hideValidationMessage(this, v3);
    }
  }
}

uint64_t ___ZN6WebKit16SecItemShimProxy9singletonEv_block_invoke()
{
  _QWORD *v0;
  uint64_t result;

  v0 = (_QWORD *)operator new();
  *v0 = &off_1E34DFD28;
  v0[1] = 0;
  result = WTF::WorkQueue::create();
  WebKit::SecItemShimProxy::singleton(void)::proxy = (uint64_t)v0;
  return result;
}

uint64_t WebKit::StorageNamespaceImpl::storageArea@<X0>(WebKit::StorageNamespaceImpl *this@<X0>, const WebCore::SecurityOrigin *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[2];
  int v23;
  __int16 v24;
  char v25;

  v4 = (uint64_t *)((char *)this + 64);
  v5 = *((_QWORD *)this + 8);
  v6 = (char *)a2 + 8;
  v22[0] = this;
  v22[1] = a2;
  if (v5
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)this + 8, 0), (v5 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v23 = -1640531527;
  v24 = 0;
  v25 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v23, (uint64_t)v6);
  v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v23) & v7;
  v9 = (unsigned int *)(v5 + 40 * v8);
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9) & 1) == 0)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v9);
      if ((v12 & 1) != 0)
      {
        v10 = v9;
      }
      else if ((WebCore::operator==() & 1) != 0)
      {
        goto LABEL_7;
      }
      v8 = (v8 + v11) & v7;
      v9 = (unsigned int *)(v5 + 40 * v8);
      ++v11;
    }
    while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9));
    if (v10)
    {
      *((_QWORD *)v10 + 4) = 0;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      --*(_DWORD *)(*v4 - 16);
      v9 = v10;
    }
  }
  WTF::HashMapEnsureTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WebCore::SecurityOriginData const&,WebKit::StorageNamespaceImpl::storageArea(WebCore::SecurityOrigin const&)::$_0>((uint64_t)v9, (uint64_t)v6, (uint64_t)v22);
  v16 = *v4;
  if (*v4)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_7;
    goto LABEL_20;
  }
  if (3 * v21 <= 4 * v20)
LABEL_20:
    v9 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v4, (WebCore::SecurityOriginData *)v9);
LABEL_7:
  v13 = *((_QWORD *)v9 + 4);
  v14 = WTF::fastMalloc((WTF *)0x20);
  result = WebKit::StorageAreaImpl::StorageAreaImpl(v14, v13);
  *a3 = result;
  return result;
}

uint64_t WebKit::WebProcess::registerStorageAreaMap(WebKit::WebProcess *this, WebKit::StorageAreaMap *a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 2);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaMap&>((uint64_t)&v3, (uint64_t *)this + 82, &v4, (uint64_t)a2);
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, WebCore::SecurityOriginData *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v15;
  WebCore::SecurityOriginData *v16;
  char v17;
  unsigned int *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 40 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (WebCore::SecurityOriginData *)v6;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue(v16);
      if ((v17 & 1) == 0)
      {
        if (WebCore::SecurityOriginData::isNull(v16))
        {
          WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>::~KeyValuePair((uint64_t)v16);
        }
        else
        {
          v18 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::reinsert(*a1, (uint64_t)v16);
          WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>::~KeyValuePair((uint64_t)v16);
          if (v16 == a3)
            v13 = v18;
        }
      }
      v16 = (WebCore::SecurityOriginData *)((char *)v16 + 40);
      --v15;
    }
    while (v15);
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, WebCore::SecurityOriginData *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::SecurityOriginData *v9;
  WebCore::SecurityOriginData *v10;
  int v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v7;
  v9 = (WebCore::SecurityOriginData *)(v6 + (v8 << 6));
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue(v9);
      if ((v12 & 1) != 0)
      {
        v10 = v9;
      }
      else if (WebCore::operator==())
      {
        result = WebCore::operator==();
        if ((_DWORD)result)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(unsigned int *)(v22 - 4);
          else
            v23 = 0;
          v21 = 0;
          v20 = v22 + (v23 << 6);
          goto LABEL_22;
        }
      }
      v8 = ((_DWORD)v8 + v11) & v7;
      v9 = (WebCore::SecurityOriginData *)(v6 + (v8 << 6));
      ++v11;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>());
    if (v10)
    {
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v9 = v10;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9, a2);
  result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9 + 32, a2 + 32);
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a1;
  if (*a1)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = (*(_DWORD *)(v16 - 16) + v17);
  v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 <= 2 * v18)
    {
LABEL_19:
      result = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a1, (uint64_t)v9);
      v9 = (WebCore::SecurityOriginData *)result;
      v16 = *a1;
      if (*a1)
        v19 = *(unsigned int *)(v16 - 4);
      else
        v19 = 0;
    }
  }
  else if (3 * v19 <= 4 * v18)
  {
    goto LABEL_19;
  }
  v20 = v16 + (v19 << 6);
  v21 = 1;
LABEL_22:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v20;
  *(_BYTE *)(a3 + 16) = v21;
  return result;
}

uint64_t WebKit::NavigationActionData::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  const void *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  uint64_t v18;
  const void *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  const void *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  const void *v43;
  const void *v44;
  const void *v45;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(a2 + 72));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  WebCore::ResourceResponseBase::operator=(a1 + 88, a2 + 88);
  v7 = *(_QWORD *)(a2 + 328);
  if (v7)
    CFRetain(*(CFTypeRef *)(a2 + 328));
  v8 = *(const void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v7;
  if (v8)
    CFRelease(v8);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  v9 = *(_DWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 348) = *(_BYTE *)(a2 + 348);
  *(_DWORD *)(a1 + 344) = v9;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 352, a2 + 352);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 384, a2 + 384);
  v10 = *(_OWORD *)(a2 + 416);
  v11 = *(_OWORD *)(a2 + 432);
  v12 = *(_OWORD *)(a2 + 448);
  *(_WORD *)(a1 + 464) = *(_WORD *)(a2 + 464);
  *(_OWORD *)(a1 + 432) = v11;
  *(_OWORD *)(a1 + 448) = v12;
  *(_OWORD *)(a1 + 416) = v10;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 472), (WTF::StringImpl *)(a2 + 472));
  *(_DWORD *)(a1 + 480) = *(_DWORD *)(a2 + 480);
  std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false> const&>(a1 + 488, a2 + 488);
  std::__optional_storage_base<WebCore::PrivateClickMeasurement,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PrivateClickMeasurement,false> const&>((WebCore::PrivateClickMeasurement *)(a1 + 544), (unsigned __int8 *)(a2 + 544));
  v13 = *(_BYTE *)(a2 + 868);
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 864);
  *(_BYTE *)(a1 + 868) = v13;
  v14 = (WTF::StringImpl **)(a1 + 872);
  v15 = (WTF::StringImpl *)(a2 + 872);
  if (*(unsigned __int8 *)(a1 + 1536) == *(unsigned __int8 *)(a2 + 1536))
  {
    if (*(_BYTE *)(a1 + 1536))
    {
      WTF::String::operator=(v14, v15);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 880), (WTF::StringImpl *)(a2 + 880));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 888), (WTF::StringImpl *)(a2 + 888));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 896), (WTF::StringImpl *)(a2 + 896));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 904), (WTF::StringImpl *)(a2 + 904));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 912), (WTF::StringImpl *)(a2 + 912));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 920), (WTF::StringImpl *)(a2 + 920));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 928), (WTF::StringImpl *)(a2 + 928));
      v17 = *(_OWORD *)(a2 + 936);
      *(_OWORD *)(a1 + 948) = *(_OWORD *)(a2 + 948);
      *(_OWORD *)(a1 + 936) = v17;
      if (*(unsigned __int8 *)(a1 + 1264) == *(unsigned __int8 *)(a2 + 1264))
      {
        if (*(_BYTE *)(a1 + 1264))
        {
          *(_WORD *)(a1 + 968) = *(_WORD *)(a2 + 968);
          WebCore::ResourceRequestBase::operator=(a1 + 976, a2 + 976);
          v18 = *(_QWORD *)(a2 + 1168);
          if (v18)
            CFRetain(*(CFTypeRef *)(a2 + 1168));
          v19 = *(const void **)(a1 + 1168);
          *(_QWORD *)(a1 + 1168) = v18;
          if (v19)
            CFRelease(v19);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 1176, a2 + 1176);
          WTF::String::operator=((WTF::StringImpl **)(a1 + 1208), (WTF::StringImpl *)(a2 + 1208));
          v20 = *(_OWORD *)(a2 + 1246);
          v21 = *(_OWORD *)(a2 + 1232);
          *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a2 + 1216);
          *(_OWORD *)(a1 + 1232) = v21;
          *(_OWORD *)(a1 + 1246) = v20;
        }
      }
      else
      {
        v22 = a1 + 968;
        if (*(_BYTE *)(a1 + 1264))
        {
          std::__optional_destruct_base<WebKit::FrameInfoData,false>::reset[abi:sn180100](v22, v16);
        }
        else
        {
          std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData const&,WebKit::FrameInfoData*>(v22, a2 + 968);
          *(_BYTE *)(a1 + 1264) = 1;
        }
      }
      v23 = *(_OWORD *)(a2 + 1272);
      *(_OWORD *)(a1 + 1281) = *(_OWORD *)(a2 + 1281);
      *(_OWORD *)(a1 + 1272) = v23;
      WTF::String::operator=((WTF::StringImpl **)(a1 + 1304), (WTF::StringImpl *)(a2 + 1304));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 1312), (WTF::StringImpl *)(a2 + 1312));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 1320), (WTF::StringImpl *)(a2 + 1320));
      v25 = *(unsigned int **)(a2 + 1328);
      if (v25)
      {
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
      }
      v27 = *(unsigned int **)(a1 + 1328);
      *(_QWORD *)(a1 + 1328) = v25;
      if (v27)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v27);
      v28 = *(unsigned int **)(a2 + 1336);
      if (v28)
      {
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
      }
      v30 = *(_QWORD *)(a1 + 1336);
      *(_QWORD *)(a1 + 1336) = v28;
      if (v30)
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v30, v24);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 1344), (WTF::StringImpl *)(a2 + 1344));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 1352), (WTF::StringImpl *)(a2 + 1352));
      *(_WORD *)(a1 + 1360) = *(_WORD *)(a2 + 1360);
      *(_QWORD *)(a1 + 1368) = *(_QWORD *)(a2 + 1368);
      WebCore::TextIndicatorData::operator=(a1 + 1376, (__int128 *)(a2 + 1376));
      WebCore::AttributedString::operator=();
      v31 = *(_DWORD **)(a2 + 1528);
      if (v31)
        ++*v31;
      v32 = *(_DWORD **)(a1 + 1528);
      *(_QWORD *)(a1 + 1528) = v31;
      if (v32)
        WTF::RefCounted<WebCore::TextIndicator>::deref(v32);
    }
  }
  else if (*(_BYTE *)(a1 + 1536))
  {
    WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v14);
    *(_BYTE *)(a1 + 1536) = 0;
  }
  else
  {
    WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::WebHitTestResultData *)v14, v15);
    *(_BYTE *)(a1 + 1536) = 1;
  }
  *(_WORD *)(a1 + 1544) = *(_WORD *)(a2 + 1544);
  WebCore::ResourceRequestBase::operator=(a1 + 1552, a2 + 1552);
  v33 = *(_QWORD *)(a2 + 1744);
  if (v33)
    CFRetain(*(CFTypeRef *)(a2 + 1744));
  v34 = *(const void **)(a1 + 1744);
  *(_QWORD *)(a1 + 1744) = v33;
  if (v34)
    CFRelease(v34);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 1752, a2 + 1752);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 1784), (WTF::StringImpl *)(a2 + 1784));
  v35 = *(_OWORD *)(a2 + 1822);
  v36 = *(_OWORD *)(a2 + 1808);
  *(_OWORD *)(a1 + 1792) = *(_OWORD *)(a2 + 1792);
  *(_OWORD *)(a1 + 1808) = v36;
  *(_OWORD *)(a1 + 1822) = v35;
  v37 = *(_QWORD *)(a2 + 1840);
  *(_BYTE *)(a1 + 1848) = *(_BYTE *)(a2 + 1848);
  *(_QWORD *)(a1 + 1840) = v37;
  *(_WORD *)(a1 + 1856) = *(_WORD *)(a2 + 1856);
  WebCore::ResourceRequestBase::operator=(a1 + 1864, a2 + 1864);
  v38 = *(_QWORD *)(a2 + 2056);
  if (v38)
    CFRetain(*(CFTypeRef *)(a2 + 2056));
  v39 = *(const void **)(a1 + 2056);
  *(_QWORD *)(a1 + 2056) = v38;
  if (v39)
    CFRelease(v39);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 2064, a2 + 2064);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 2096), (WTF::StringImpl *)(a2 + 2096));
  v41 = *(_OWORD *)(a2 + 2104);
  v40 = *(_OWORD *)(a2 + 2120);
  *(_OWORD *)(a1 + 2134) = *(_OWORD *)(a2 + 2134);
  *(_OWORD *)(a1 + 2104) = v41;
  *(_OWORD *)(a1 + 2120) = v40;
  *(_QWORD *)(a1 + 2152) = *(_QWORD *)(a2 + 2152);
  WebCore::ResourceRequestBase::operator=(a1 + 2160, a2 + 2160);
  v42 = *(_QWORD *)(a2 + 2352);
  if (v42)
    CFRetain(*(CFTypeRef *)(a2 + 2352));
  v43 = *(const void **)(a1 + 2352);
  *(_QWORD *)(a1 + 2352) = v42;
  if (v43)
    CFRelease(v43);
  WebCore::ResourceRequestBase::operator=(a1 + 2360, a2 + 2360);
  v44 = *(const void **)(a2 + 2552);
  if (v44)
    CFRetain(v44);
  v45 = *(const void **)(a1 + 2552);
  *(_QWORD *)(a1 + 2552) = v44;
  if (v45)
    CFRelease(v45);
  return a1;
}

uint64_t WebKit::PageLoadState::Data::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  const void *v6;
  const void *v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(a2 + 16));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 24), (WTF::StringImpl *)(a2 + 24));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 32), (WTF::StringImpl *)(a2 + 32));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 40, a2 + 40);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(a2 + 72));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 80), (WTF::StringImpl *)(a2 + 80));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 88), (WTF::StringImpl *)(a2 + 88));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 96), (WTF::StringImpl *)(a2 + 96));
  v4 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v4;
  v5 = *(_BYTE *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = v5;
  v6 = *(const void **)(a2 + 160);
  if (v6)
    CFRetain(v6);
  v7 = *(const void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v6;
  if (v7)
    CFRelease(v7);
  return a1;
}

WTF::StringImpl *WebKit::originDirectoryPath(WTF::StringImpl *result, uint64_t a2, WebCore::SecurityOriginData *this)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  void *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  WTF *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    WebCore::SecurityOriginData::toString(this);
    WebKit::encode();
    v5 = (WTF::StringImpl *)v22;
    *(_QWORD *)&v22 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)((char *)this + 32));
    WebKit::encode();
    v7 = (WTF::StringImpl *)v22;
    *(_QWORD *)&v22 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    *(_QWORD *)&v22 = 0;
    v8 = (int)v21;
    if (v21)
    {
      v9 = *((unsigned __int8 *)v21 + 16);
      v8 = *((_DWORD *)v21 + 1);
      *(_QWORD *)&v22 = *((_QWORD *)v21 + 1);
      v10 = (v9 >> 2) & 1;
    }
    else
    {
      LOBYTE(v10) = 1;
    }
    DWORD2(v22) = v8;
    BYTE12(v22) = v10;
    v23 = 0;
    v11 = (int)v20;
    if (v20)
    {
      v12 = *((unsigned __int8 *)v20 + 16);
      v11 = *((_DWORD *)v20 + 1);
      v23 = *((_QWORD *)v20 + 1);
      v13 = (v12 >> 2) & 1;
    }
    else
    {
      LOBYTE(v13) = 1;
    }
    v24 = v11;
    v25 = v13;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v18, &v22, 2uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    v15 = v18;
    if (v18)
    {
      v18 = 0;
      v19 = 0;
      WTF::fastFree(v15, v14);
    }
    v16 = v20;
    v20 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v17 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v17 += 2;
    *(_QWORD *)result = v17;
  }
  return result;
}

uint64_t WebKit::encode()
{
  void *v0;
  uint64_t result;
  WTF *v2;
  void *v3;
  WTF *v4;
  WTF *v5;
  PAL::CryptoDigest *v6;

  PAL::CryptoDigest::create();
  WTF::String::utf8();
  PAL::CryptoDigest::addBytes();
  PAL::CryptoDigest::addBytes();
  PAL::CryptoDigest::computeHash(v6);
  WTF::base64EncodeToString();
  if (v4)
    WTF::fastFree(v4, v0);
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, v0);
    else
      --*(_DWORD *)v5;
  }
  result = (uint64_t)v6;
  if (v6)
  {
    PAL::CryptoDigest::~CryptoDigest(v6);
    return WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t *WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, __int128 *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 28))
  {
    v6 = 16 * a3;
    v7 = WTF::fastMalloc((WTF *)(16 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_OWORD *)(*v3 + 16 * v8) = v9;
      v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      v6 -= 16;
    }
    while (v6);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::NetworkStorageManager::originQuotaManagerParameters(WebKit::NetworkStorageManager *this, const WebCore::ClientOrigin *a2, const WebCore::ClientOrigin *a3)
{
  const WTF::String *v6;
  double v7;
  double v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  WTF::ThreadSafeWeakPtrControlBlock *v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::ThreadSafeWeakPtrControlBlock *v23;
  const WebCore::ClientOrigin *v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x1E0C80C00];
  v23 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)a2 + 5);
  WebCore::ClientOrigin::ClientOrigin((WebCore::ClientOrigin *)&v24, a3);
  v25[7] = *((_QWORD *)a2 + 37);
  WTF::Function<void ()(WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long,unsigned long long)>::Function<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0,void>(&v22, (uint64_t *)&v23);
  WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0::~$_0((uint64_t)&v23);
  if (*((_BYTE *)a2 + 232))
    v7 = (double)*((unint64_t *)a2 + 28);
  else
    v7 = 0.0;
  v8 = (double)*((unint64_t *)a2 + 22);
  if (*((_BYTE *)a2 + 200) && *((_BYTE *)a2 + 184))
  {
    if (*((_BYTE *)a2 + 248))
    {
      v13 = *((_QWORD *)a2 + 30) & 0xFFFFFFFFFFFFFF00;
      v12 = *((_QWORD *)a2 + 30);
    }
    else
    {
      v9 = WTF::FileSystemImpl::volumeCapacity((const WebCore::ClientOrigin *)((char *)a2 + 56), v6);
      v10 = *((unsigned __int8 *)a2 + 200);
      if (!v11)
      {
LABEL_11:
        if (v10)
        {
          v14 = *((double *)a2 + 24);
          goto LABEL_13;
        }
LABEL_21:
        std::__throw_bad_optional_access[abi:sn180100]();
      }
      if (!*((_BYTE *)a2 + 200))
        goto LABEL_21;
      v12 = 0;
      v13 = (v9 + 0x3FFFFFFF) & 0xFFFFFFFFC0000000;
    }
    v14 = *((double *)a2 + 24);
    v8 = v14 * (double)(v13 | v12);
    v15 = v22;
    v22 = 0;
    if (!v15)
    {
LABEL_13:
      v7 = v7 * v14;
      goto LABEL_14;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v10 = *((unsigned __int8 *)a2 + 200);
    goto LABEL_11;
  }
LABEL_14:
  v16 = WebCore::operator==();
  v17 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)a2 + 2);
  if (v17)
    v17 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v17);
  if (!v16)
  {
    v8 = v8 * 0.1;
    v7 = v7 * 0.1;
  }
  v23 = v17;
  v24 = a2;
  WebCore::ClientOrigin::ClientOrigin((WebCore::ClientOrigin *)v25, a3);
  WTF::Function<void ()(unsigned long long)>::Function<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1,void>(&v21, (uint64_t *)&v23);
  result = WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1::~$_1((uint64_t)&v23, v18);
  *(_QWORD *)this = vcvtpd_u64_f64(v8);
  *((_QWORD *)this + 1) = vcvtpd_u64_f64(v7);
  v20 = v21;
  *((_QWORD *)this + 2) = v22;
  *((_QWORD *)this + 3) = v20;
  return result;
}

WebCore::ClientOrigin *WebCore::ClientOrigin::ClientOrigin(WebCore::ClientOrigin *this, const WebCore::ClientOrigin *a2)
{
  *(_BYTE *)this = 0;
  *((_DWORD *)this + 6) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this, (uint64_t)a2);
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 14) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this + 32, (uint64_t)a2 + 32);
  return this;
}

uint64_t WebKit::OriginStorageManager::createQuotaManager@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
  v6 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E34C78B8;
  v8[1] = a1;
  v8[2] = v6;
  v10 = v8;
  WebKit::OriginQuotaManager::create(a2, (uint64_t *)&v10, a3);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::LocalStorageManager::localStorageFilePath(WTF::StringImpl *this, const WTF::String *a2, const WebCore::ClientOrigin *a3)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;

  if (a2 && *((_DWORD *)a2 + 1))
  {
    WebKit::originToFileName((WebKit *)&v5, a3);
    WTF::FileSystemImpl::pathByAppendingComponent();
    this = v5;
    v5 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v3);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v4 += 2;
    *(_QWORD *)this = v4;
  }
  return this;
}

WTF::StringImpl *WebKit::originToFileName(WebKit *this, const WebCore::ClientOrigin *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6[2];

  WebCore::SecurityOriginData::databaseIdentifier((const WebCore::ClientOrigin *)((char *)a2 + 32));
  v6[0] = (uint64_t)".localstorage";
  v6[1] = 14;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v5, v6, this);
  if (*(_QWORD *)this)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::CacheStorageManager::copySaltFileToOriginDirectory(WebKit::CacheStorageManager *this, const WTF::String *a2, const WTF::String *a3)
{
  WTF::StringImpl *result;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  result = (WTF::StringImpl *)WTF::FileSystemImpl::fileExists(a2, a2);
  if ((_DWORD)result)
  {
    WebKit::saltFilePath((uint64_t)a2, &v11);
    if ((WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v11, v6) & 1) == 0)
    {
      WebKit::saltFilePath((uint64_t)this, &v10);
      WTF::FileSystemImpl::hardLinkOrCopyFile((WTF::FileSystemImpl *)&v10, (const WTF::String *)&v11, v8);
      v9 = v10;
      v10 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::CacheStorageManager::cacheStorageOriginDirectory(WebKit::CacheStorageManager *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  const WTF::String *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[4];
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WebKit::saltFilePath((uint64_t)this, v19);
    v21[0] = WebKit::readOrMakeSalt((WebKit *)v19, v6);
    v8 = v19[0];
    v19[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    WebCore::SecurityOriginData::toString(a2);
    WebCore::SecurityOriginData::toString((const WTF::String *)((char *)a2 + 32));
    v15 = 0;
    v16 = 0;
    WebKit::NetworkCache::Key::Key((WTF::SHA1 *)v19, (_DWORD **)&v18, (_DWORD **)&v17, &v16, &v15, (uint64_t)v21);
    v10 = v17;
    v17 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v18;
    v18 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    WebKit::NetworkCache::Key::hashAsString((uint64_t)&v20, &v18);
    WTF::FileSystemImpl::pathByAppendingComponent();
    v13 = v18;
    v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    WebKit::NetworkCache::Key::~Key((WebKit::NetworkCache::Key *)v19, v12);
  }
  else
  {
    v14 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v14 += 2;
    *a3 = v14;
  }
}

uint64_t WebKit::readOrMakeSalt(WebKit *this, const WTF::String *a2)
{
  uint64_t result;
  char v3;

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  result = WTF::FileSystemImpl::readOrMakeSalt(this, a2);
  if (!v3)
    return 0;
  return result;
}

uint64_t WebKit::saltFilePath@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
    return WTF::FileSystemImpl::pathByAppendingComponent();
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebKit::OriginQuotaManager::OriginQuotaManager(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = *a2;
  *(_OWORD *)(a1 + 88) = *a2;
  *(_QWORD *)(a1 + 104) = v7;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 128) = v8;
  v9 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)(a1 + 136) = v9;
  v10 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(a1 + 144) = v10;
  return a1;
}

WTF::StringImpl *WebKit::IDBStorageManager::idbStorageOriginDirectory(WTF::StringImpl *this, const WTF::String *a2, const WebCore::ClientOrigin *a3)
{
  WTF::FileSystemImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = this;
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot();
    WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot();
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34C68F0;
    v7 = v4;
    WebKit::migrateOriginDataImpl((WTF::FileSystemImpl *)&v8, v3, &v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    this = v8;
    v8 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    *(_QWORD *)this = v6;
  }
  return this;
}

uint64_t WebKit::migrateOriginDataImpl(WTF::FileSystemImpl *a1, WTF::FileSystemImpl *a2, _QWORD *a3)
{
  const WTF::String *v6;
  char v7;
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const WTF::String *v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl *v22[3];
  int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 + 4) && WTF::FileSystemImpl::fileExists(a1, a2))
  {
    WTF::FileSystemImpl::listDirectory(a1, v6);
    if (v21)
    {
      WTF::FileSystemImpl::makeAllDirectories(a2, v9);
      v10 = v20;
      v11 = 8 * v21;
      v7 = 1;
      do
      {
        WebCore::SecurityOriginData::fromDatabaseIdentifier();
        if (v24)
        {
          if (v23 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v23])(&v19, v22);
        }
        else
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(&v19, *a3, v10);
          WTF::FileSystemImpl::pathByAppendingComponent();
          v13 = v19;
          v19 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v12);
            else
              *(_DWORD *)v13 -= 2;
          }
          if ((WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)v22, v12) & 1) == 0)
          {
            WTF::FileSystemImpl::pathByAppendingComponent();
            v15 = WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v19, (const WTF::String *)v22, v14);
            v16 = v19;
            v19 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v9);
              else
                *(_DWORD *)v16 -= 2;
            }
            v7 &= v15;
          }
          v17 = v22[0];
          v22[0] = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v9);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      v7 = 1;
    }
    WTF::FileSystemImpl::deleteEmptyDirectory(a1, v9);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v18);
  }
  else
  {
    v7 = 1;
  }
  return v7 & 1;
}

void WebKit::NetworkCache::Key::~Key(WebKit::NetworkCache::Key *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

void WebKit::OriginStorageManager::~OriginStorageManager(WebKit::OriginStorageManager *this, void *a2)
{
  unsigned __int8 **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;

  v3 = (unsigned __int8 **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(*v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  std::unique_ptr<WebKit::OriginStorageManager::StorageBucket>::reset[abi:sn180100]((WebKit::OriginStorageManager::StorageBucket **)this + 1, 0);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v8);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(unsigned __int8 *result, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v10[2];
  BOOL v11;

  v2 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEABB3C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v7 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = __ldxr(v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_8:
  if (!v5)
  {
    v10[0] = v2;
    v10[1] = v7;
    v11 = v6;
    return (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)v10, a2);
  }
  return result;
}

WebKit::OriginQuotaManager *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  WebKit::OriginQuotaManager *result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)a1;
  result = *(WebKit::OriginQuotaManager **)(a1 + 8);
  if (result)
  {
    WebKit::OriginQuotaManager::~OriginQuotaManager(result);
    result = (WebKit::OriginQuotaManager *)WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 16))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return (WebKit::OriginQuotaManager *)WTF::fastFree(v4, a2);
  return result;
}

void WebKit::OriginQuotaManager::~OriginQuotaManager(WebKit::OriginQuotaManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((_BYTE *)this + 64))
  {
    v5 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::~Deque((uint64_t)this + 8);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), (unint64_t)a2 << 6);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v14 = v7;
    v15 = v6 + 32;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v15 - 32));
      if ((v16 & 1) == 0)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
        {
          v17 = *(unsigned int *)(v15 + 24);
          if ((_DWORD)v17 != -1)
            ((void (*)(char *, uint64_t))off_1E34C5E70[v17])(&v26, v15);
          *(_DWORD *)(v15 + 24) = -1;
          v18 = *(unsigned int *)(v15 - 8);
          if ((_DWORD)v18 != -1)
            ((void (*)(char *, uint64_t))off_1E34C5E70[v18])(&v27, v15 - 32);
          *(_DWORD *)(v15 - 8) = -1;
        }
        else
        {
          v19 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::lookupForReinsert(a1, v15 - 32);
          v20 = v19;
          v21 = *(unsigned int *)(v19 + 56);
          if ((_DWORD)v21 != -1)
            ((void (*)(char *, uint64_t))off_1E34C5E70[v21])(&v28, v19 + 32);
          *(_DWORD *)(v20 + 56) = -1;
          v22 = *(unsigned int *)(v20 + 24);
          if ((_DWORD)v22 != -1)
            ((void (*)(char *, uint64_t))off_1E34C5E70[v22])(&v29, v20);
          *(_BYTE *)v20 = 0;
          *(_DWORD *)(v20 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v20, v15 - 32);
          *(_BYTE *)(v20 + 32) = 0;
          *(_DWORD *)(v20 + 56) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v20 + 32, v15);
          v23 = *(unsigned int *)(v15 + 24);
          if ((_DWORD)v23 != -1)
            ((void (*)(char *, uint64_t))off_1E34C5E70[v23])(&v30, v15);
          *(_DWORD *)(v15 + 24) = -1;
          v24 = *(unsigned int *)(v15 - 8);
          if ((_DWORD)v24 != -1)
            ((void (*)(char *, uint64_t))off_1E34C5E70[v24])(&v31, v15 - 32);
          *(_DWORD *)(v15 - 8) = -1;
          if (v15 - 32 == a3)
            v13 = v20;
        }
      }
      v15 += 64;
      --v14;
    }
    while (v14);
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(uint64_t *a1, unsigned int a2, WebCore::SecurityOriginData *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  WebCore::SecurityOriginData *v16;
  char v17;
  uint64_t v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 72 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (WebCore::SecurityOriginData *)v6;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue(v16);
      if ((v17 & 1) == 0)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
        {
          WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>::~KeyValuePair((uint64_t)v16);
        }
        else
        {
          v18 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::reinsert(*a1, (uint64_t)v16);
          WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>::~KeyValuePair((uint64_t)v16);
          if (v16 == a3)
            v13 = v18;
        }
      }
      v16 = (WebCore::SecurityOriginData *)((char *)v16 + 72);
      --v15;
    }
    while (v15);
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, WebCore::SecurityOriginData *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v5, a2);
}

uint64_t WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::~Deque(uint64_t a1)
{
  void *v2;
  WTF *v3;

  WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::destroyAll((unint64_t *)a1);
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, v2);
  }
  return a1;
}

unint64_t *WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::destroyAll(unint64_t *result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t **v11;
  uint64_t v12;
  unint64_t **v13;

  v1 = *result;
  v2 = result[1];
  v3 = result[2];
  if (*result > v2)
  {
    v4 = (uint64_t *)result;
    if (v2)
    {
      v12 = 24 * v2;
      v13 = (unint64_t **)(v3 + 8);
      do
      {
        result = *v13;
        *v13 = 0;
        if (result)
          result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
      v3 = v4[2];
      v1 = *v4;
    }
    v5 = *((unsigned int *)v4 + 6);
    if (v1 != v5)
    {
      v6 = 3 * v1;
      v7 = 24 * v5 - 8 * v6;
      v8 = (unint64_t **)(v3 + 8 * v6 + 8);
      do
      {
        result = *v8;
        *v8 = 0;
        if (result)
          result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
        v8 += 3;
        v7 -= 24;
      }
      while (v7);
    }
  }
  else if (*result != v2)
  {
    v9 = 3 * v1;
    v10 = 24 * v2 - 8 * v9;
    v11 = (unint64_t **)(v3 + 8 * v9 + 8);
    do
    {
      result = *v11;
      *v11 = 0;
      if (result)
        result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
      v11 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  return result;
}

WebKit::WebRemoteObjectRegistry *WebKit::WebRemoteObjectRegistry::WebRemoteObjectRegistry(WebKit::WebRemoteObjectRegistry *this, _WKRemoteObjectRegistry *a2, WebKit::WebPage *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  WebKit::WebProcess *v8;

  *(_QWORD *)WebKit::RemoteObjectRegistry::RemoteObjectRegistry(this, a2) = off_1E34F1C00;
  v5 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 6, (uint64_t)a3 + 16);
  v6 = (unsigned int *)*((_QWORD *)a3 + 3);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *((_QWORD *)this + 4) = v6;
  v8 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v5);
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)v8, 0x69u, *((_QWORD *)a3 + 5), (uint64_t)this);
  WebKit::WebPage::setRemoteObjectRegistry(a3, this);
  return this;
}

WebKit::RemoteObjectRegistry *WebKit::RemoteObjectRegistry::RemoteObjectRegistry(WebKit::RemoteObjectRegistry *this, _WKRemoteObjectRegistry *a2)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_1E34B6FF8;
  *((_QWORD *)this + 2) = 0;
  objc_initWeak((id *)this + 2, a2);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_196D07620(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;

  *v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::setRemoteObjectRegistry(WebKit::WebPage *this, WebKit::WebRemoteObjectRegistry *a2)
{
  unsigned int *v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;

  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
    v3 = (unsigned int *)*((_QWORD *)a2 + 1);
    if (v3)
    {
      do
        v8 = __ldaxr(v3);
      while (__stlxr(v8 + 1, v3));
    }
  }
  else
  {
    v3 = 0;
  }
  result = (unsigned int *)*((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebServiceWorkerProvider::updateThrottleState(WebKit::WebServiceWorkerProvider *this, int a2)
{
  WebKit::WebProcess *v3;
  IPC::Encoder *result;
  WebKit::WebProcess *v5;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  result = (IPC::Encoder *)*((_QWORD *)v3 + 37);
  if (result)
  {
    result = (IPC::Encoder *)WebKit::NetworkProcessConnection::serviceWorkerConnection(result);
    if ((*((_BYTE *)result + 96) != 0) != a2)
      return WebKit::WebSWClientConnection::updateThrottleState(result);
  }
  return result;
}

uint64_t WebKit::NetworkProcessConnection::serviceWorkerConnection(WebKit::NetworkProcessConnection *this)
{
  uint64_t result;
  WebKit::WebSWClientConnection *v3;
  _DWORD *v4;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    v3 = (WebKit::WebSWClientConnection *)WTF::fastMalloc((WTF *)0x70);
    result = WebKit::WebSWClientConnection::WebSWClientConnection(v3);
    v4 = (_DWORD *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = result;
    if (v4)
    {
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        return *((_QWORD *)this + 10);
      }
      else
      {
        --v4[2];
      }
    }
  }
  return result;
}

WebKit::WebSWClientConnection *WebKit::WebSWClientConnection::WebSWClientConnection(WebKit::WebSWClientConnection *this)
{
  WebCore::Process *v2;

  v2 = (WebCore::Process *)WebCore::SWClientConnection::SWClientConnection(this);
  *(_QWORD *)v2 = off_1E34ECDB0;
  *((_QWORD *)v2 + 3) = &unk_1E34ECEF0;
  *((_QWORD *)v2 + 4) = &unk_1E34ECF40;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)this + 6) = WebCore::Process::identifier(v2);
  WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::WebSWOriginTable>((_QWORD *)this + 7);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_BYTE *)this + 96) = 1;
  *((_QWORD *)this + 13) = 0;
  return this;
}

uint64_t WebKit::DrawingArea::create@<X0>(WebKit::WebPage *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 64))
  {
    result = 0;
  }
  else
  {
    v7 = WTF::fastMalloc((WTF *)0x170);
    result = WebKit::RemoteLayerTreeDrawingArea::RemoteLayerTreeDrawingArea(v7, a1, a2);
  }
  *a3 = result;
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::RemoteLayerTreeDrawingArea(uint64_t a1, WebKit::WebPage *a2, uint64_t a3)
{
  _QWORD *v6;
  WebKit::WebProcess *v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  unsigned __int8 **v10;
  char v11;
  __int128 v13;
  char v14;
  __int16 v15;
  char v16;
  unsigned __int8 **v17;

  v6 = (_QWORD *)WebKit::DrawingArea::DrawingArea(a1, 0, *(_QWORD *)(a3 + 72), (uint64_t)a2);
  *v6 = off_1E34B3388;
  v6[2] = &unk_1E34B3568;
  v6[9] = &unk_1E34B3590;
  WebKit::RemoteLayerTreeContext::create((WebKit::RemoteLayerTreeContext *)(v6 + 10), a2);
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  WebCore::Timer::Timer<WebKit::RemoteLayerTreeDrawingArea,WebKit::RemoteLayerTreeDrawingArea>((WebCore::TimerBase *)(a1 + 168), a1, (uint64_t)WebKit::RemoteLayerTreeDrawingArea::updateRendering, 0);
  *(_BYTE *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  v7 = (WebKit::WebProcess *)WTF::WorkQueue::create();
  v8 = WebKit::WebProcess::singleton(v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, *((unsigned __int8 ***)v8 + 4));
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = 1;
  v10 = v17;
  v17 = 0;
  *(_QWORD *)(v9 + 8) = v10;
  *(_BYTE *)(v9 + 16) = 0;
  *(_QWORD *)(a1 + 240) = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v17);
  *(_WORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  WebCore::Timer::Timer<WebKit::RemoteLayerTreeDrawingArea,WebKit::RemoteLayerTreeDrawingArea>((WebCore::TimerBase *)(a1 + 288), a1, (uint64_t)WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdateTimerFired, 0);
  *(_DWORD *)(a1 + 344) = 60;
  *(_BYTE *)(a1 + 348) = 1;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  v11 = *(_BYTE *)(a3 + 172);
  if (v11)
  {
    v13 = *(_OWORD *)(a3 + 156);
    v14 = v11;
    v15 = *(_WORD *)(a3 + 173);
    v16 = *(_BYTE *)(a3 + 175);
    WebKit::RemoteLayerTreeDrawingArea::setViewExposedRect(a1, &v13);
  }
  return a1;
}

void sub_196D07A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  _DWORD **v13;
  unsigned int *v14;
  WebCore::Timer *v15;
  uint64_t *v16;
  WebCore::Timer *v17;
  void *v19;
  WTF *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  _DWORD *v26;

  WebCore::Timer::~Timer(v17);
  v20 = *(WTF **)(v12 + 256);
  if (v20)
  {
    *(_QWORD *)(v12 + 256) = 0;
    *(_DWORD *)(v12 + 264) = 0;
    WTF::fastFree(v20, v19);
  }
  v21 = *(unsigned int **)(v12 + 240);
  *(_QWORD *)(v12 + 240) = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::ThreadSafeRefCounted<WebKit::RemoteLayerTreeDrawingArea::BackingStoreFlusher,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t)v21);
    }
  }
  v24 = *v16;
  *v16 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 56))(v24);
  WebCore::Timer::~Timer(v15);
  WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, v25);
  v26 = *v13;
  *v13 = 0;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  WebKit::DrawingArea::~DrawingArea((WebKit::DrawingArea *)v12);
  _Unwind_Resume(a1);
}

void sub_196D07AD8()
{
  JUMPOUT(0x196D07A88);
}

void sub_196D07AE0()
{
  JUMPOUT(0x196D07A90);
}

void sub_196D07AE8()
{
  JUMPOUT(0x196D07AA4);
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::RemoteLayerTreeDrawingArea,WebKit::RemoteLayerTreeDrawingArea>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E34B3740;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34B36A0;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  *((_QWORD *)a1 + 6) = v8;
  return a1;
}

void sub_196D07B50(_Unwind_Exception *a1)
{
  WebCore::TimerBase *v1;

  WebCore::TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerTreeContext *WebKit::RemoteLayerTreeContext::RemoteLayerTreeContext(WebKit::RemoteLayerTreeContext *this, WebKit::WebPage *a2)
{
  uint64_t v3;
  WebKit::RemoteLayerBackingStoreCollection *v5;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E34D89A8;
  *((_QWORD *)this + 3) = a2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  MEMORY[0x19AEB5B5C]((char *)this + 96);
  *((_QWORD *)this + 25) = 0;
  *((_WORD *)this + 104) = 0;
  std::make_unique[abi:sn180100]<WebKit::RemoteLayerBackingStoreCollection,WebKit::RemoteLayerTreeContext &>(&v5, this);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v5;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return this;
}

void sub_196D07C04(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;

  v5 = v3;
  MEMORY[0x19AEB5B68](v5);
  v8 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 88) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(v1 + 80);
  if (v9)
    WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::deallocateTable(v9, v7);
  v10 = *(_QWORD *)(v1 + 72);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), v7);
  v11 = *(_QWORD *)(v1 + 64);
  if (v11)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v11, v7);
  v12 = *(_QWORD *)(v1 + 56);
  if (v12)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v12, v7);
  v13 = *(WTF **)(v1 + 40);
  if (v13)
  {
    *(_QWORD *)(v1 + 40) = 0;
    *(_DWORD *)(v1 + 48) = 0;
    WTF::fastFree(v13, v7);
  }
  if (*v4)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(*v4, v7);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v7);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerBackingStoreCollection *WebKit::RemoteLayerBackingStoreCollection::RemoteLayerBackingStoreCollection(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerTreeContext *a2)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_1E34B8A10;
  *((_QWORD *)this + 2) = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  WebCore::Timer::Timer<WebKit::RemoteLayerBackingStoreCollection,WebKit::RemoteLayerBackingStoreCollection>((WebKit::RemoteLayerBackingStoreCollection *)((char *)this + 88), (uint64_t)this, (uint64_t)WebKit::RemoteLayerBackingStoreCollection::volatilityTimerFired, 0);
  *((_BYTE *)this + 144) = 0;
  return this;
}

void sub_196D07D14(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = v3[9];
  if (v6)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v6, a2);
  v7 = v3[7];
  if (v7)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v7, a2);
  v8 = v3[5];
  if (v8)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v8, a2);
  if (*v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v4, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::RemoteLayerBackingStoreCollection,WebKit::RemoteLayerBackingStoreCollection>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E34B3740;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34B8B48;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  *((_QWORD *)a1 + 6) = v8;
  return a1;
}

void sub_196D07DC8(_Unwind_Exception *a1)
{
  WebCore::TimerBase *v1;

  WebCore::TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebChromeClient::createScrollingCoordinator(WebKit::WebChromeClient *this@<X0>, WebKit::RemoteScrollingCoordinator **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::RemoteScrollingCoordinator *v6;
  WebKit::RemoteScrollingCoordinator *v7;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v6 = 0;
  if (!*(_BYTE *)(*(_QWORD *)(v5 + 72) + 24))
  {
    v7 = (WebKit::RemoteScrollingCoordinator *)WTF::fastMalloc((WTF *)0xE0);
    v6 = WebKit::RemoteScrollingCoordinator::RemoteScrollingCoordinator(v7, (WebKit::WebPage *)v5);
  }
  *a2 = v6;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

WebKit::RemoteScrollingCoordinator *WebKit::RemoteScrollingCoordinator::RemoteScrollingCoordinator(WebKit::RemoteScrollingCoordinator *this, WebKit::WebPage *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_QWORD *)WebCore::AsyncScrollingCoordinator::AsyncScrollingCoordinator();
  v4[17] = &unk_1E34D8C28;
  v5 = (uint64_t)(v4 + 17);
  v4[18] = 0;
  *v4 = off_1E34D89D0;
  v6 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v7 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = v7;
  *((_BYTE *)this + 200) = 0;
  *((_WORD *)this + 104) = 0;
  *((_WORD *)this + 108) = 0;
  *((_BYTE *)this + 218) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_BYTE *)this + 184) = 0;
  v9 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v6);
  v10 = *(_QWORD *)(*((_QWORD *)this + 19) + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)v9, 0x79u, *(_QWORD *)(v11 + 40), v5);
  return this;
}

void sub_196D07F28(_Unwind_Exception *a1, void *a2)
{
  WebCore::AsyncScrollingCoordinator *v2;
  unsigned int **v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v6 = *((_QWORD *)v2 + 22);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  v7 = *((_QWORD *)v2 + 21);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  if (*v4)
    WTF::fastFree((WTF *)(*v4 - 16), a2);
  v8 = (unsigned int *)*((_QWORD *)v2 + 19);
  *((_QWORD *)v2 + 19) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  *((_QWORD *)v2 + 17) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  WebCore::AsyncScrollingCoordinator::~AsyncScrollingCoordinator(v2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::WebSWOriginTable>(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  result = WebKit::SharedStringHashTableReadOnly::SharedStringHashTableReadOnly((_QWORD *)v2);
  *((_BYTE *)result + 24) = 0;
  *a1 = result;
  return result;
}

uint64_t *WebKit::visitedLinkTableControllers(WebKit *this)
{
  if ((_MergedGlobals_104 & 1) == 0)
  {
    qword_1ECE72FB0 = 0;
    _MergedGlobals_104 = 1;
  }
  if ((WTF::isMainRunLoop(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196D08034);
  }
  return &qword_1ECE72FB0;
}

_QWORD *WebKit::SharedStringHashTableReadOnly::SharedStringHashTableReadOnly(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

WebKit::WebPaymentCoordinator *WebKit::WebPaymentCoordinator::WebPaymentCoordinator(WebKit::WebPaymentCoordinator *this, WebKit::WebPage *a2)
{
  char *v3;
  WebKit::WebProcess *v4;

  *(_QWORD *)this = &off_1E34DFF08;
  *((_QWORD *)this + 1) = &unk_1E34DFFD0;
  v3 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E34E0008;
  *((_QWORD *)this + 4) = a2;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_WORD *)this + 32) = 0;
  v4 = WebKit::WebProcess::singleton(this);
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)v4, 0xB6u, *(_QWORD *)(*((_QWORD *)this + 4) + 40), (uint64_t)v3);
  return this;
}

WebKit::ViewGestureGeometryCollector *WebKit::ViewGestureGeometryCollector::ViewGestureGeometryCollector(WebKit::ViewGestureGeometryCollector *this, WebKit::WebPage *a2)
{
  WebKit::WebProcess *v3;

  *(_QWORD *)this = off_1E34F1B90;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 40) = 0;
  v3 = WebKit::WebProcess::singleton(this);
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)v3, 0x95u, *(_QWORD *)(*((_QWORD *)this + 2) + 40), (uint64_t)this);
  return this;
}

unsigned int *WebKit::AuxiliaryProcess::addMessageReceiver(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v5;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  return WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(a1 + 48), (unsigned __int8 *)v6, a4, &v5);
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  char *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  void *v27;
  int v28;
  _QWORD v29[2];
  IPC::Encoder *v30;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  CFRetain(*(CFTypeRef *)(v3 + 8));
  *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 820);
  v5 = (_DWORD *)((char *)this + 56);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 1732);
  *((_QWORD *)this + 18) = v4;
  *((_BYTE *)this + 80) = 1;
  v28 = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v6 = (char *)this + 16;
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = (*(uint64_t (**)(char *))(*(_QWORD *)v6 + 56))(v6);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 29;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v30 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v10, v5);
  v11 = *(_QWORD *)(v10 + 544);
  v12 = v11 + 1;
  v13 = *(_QWORD *)(v10 + 552);
  if (v13 < v11 + 1)
  {
    v24 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v25 = v24;
      v24 *= 2;
    }
    while (v25 < v12);
    v26 = (char *)mmap(0, v25, 3, 4098, -1, 0);
    if (v26 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v14 = v26;
    memcpy(v26, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
    v27 = *(void **)(v10 + 528);
    if (v27 != (void *)(v10 + 16))
      munmap(v27, *(_QWORD *)(v10 + 552));
    *(_QWORD *)(v10 + 528) = v14;
    *(_QWORD *)(v10 + 552) = v25;
    v15 = *(_QWORD *)(v10 + 544);
  }
  else
  {
    v14 = *(char **)(v10 + 528);
    v15 = *(_QWORD *)(v10 + 544);
  }
  bzero(&v14[v15], v11 - v15);
  *(_QWORD *)(v10 + 544) = v12;
  v16 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v11);
  *(_QWORD *)(v10 + 536) = v16 + 1;
  *v16 = 0;
  IPC::Encoder::addAttachment(v10, (unint64_t)&v28);
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = &off_1E34CB980;
  v17[1] = v7;
  v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v29[0] = v17;
  v29[1] = v18;
  (*(void (**)(char *, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v30, v29, 0);
  v20 = v29[0];
  v29[0] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v19);
    WTF::fastFree(v22, v23);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v28);
  if (v2)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void sub_196D083B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, IPC::Encoder *a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;

  v16 = a11;
  a11 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = a13;
  a13 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, a2);
    WTF::fastFree(v18, v19);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  if (v14)
    CFRelease(*(CFTypeRef *)(v13 + 8));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'WebKit::DrawingAreaProxy::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  return WebKit::DrawingAreaProxy::sendMessageWithAsyncReply(a1 - 16, a2, a3, a4);
}

uint64_t WebKit::DrawingAreaProxy::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *a3;
  v6 = a3[1];
  *a3 = 0;
  v9[0] = v5;
  v9[1] = v6;
  v10 = 1;
  v7 = WebKit::AuxiliaryProcessProxy::sendMessage(v4, a2, a4, (uint64_t)v9, 1);
  if (v10 && v9[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v9[0] + 8))(v9[0]);
  return v7;
}

char *WebKit::RemoteLayerTreeDrawingAreaProxy::deviceScaleFactorDidChange(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v1 = (char *)this + 16;
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  v4 = 692;
  if (!*(_BYTE *)(v3 + 696))
    v4 = 688;
  v5 = *(_DWORD *)(v3 + v4);
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 27;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v21 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = (v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v10 = v9 + 4;
  v11 = *(_QWORD *)(v7 + 552);
  if (v11 < v9 + 4)
  {
    v18 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v10);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v12 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v12;
    *(_QWORD *)(v7 + 552) = v19;
    v8 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v12 = *(char **)(v7 + 528);
  }
  bzero(&v12[v8], v9 - v8);
  *(_QWORD *)(v7 + 544) = v10;
  v13 = (_DWORD *)(*(_QWORD *)(v7 + 528) + v9);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = v5;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v21, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

void sub_196D086B8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebKit::DrawingAreaProxy::messageSenderDestinationID(WebKit::DrawingAreaProxy *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t `non-virtual thunk to'WebKit::DrawingAreaProxy::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3)
{
  return WebKit::DrawingAreaProxy::sendMessage(a1 - 16, a2, a3);
}

uint64_t WebKit::DrawingAreaProxy::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)(a1 + 48);
  LOBYTE(v6) = 0;
  v7 = 0;
  v4 = WebKit::AuxiliaryProcessProxy::sendMessage(v3, a2, a3, (uint64_t)&v6, 1);
  if (v7 && v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

_QWORD *IPC::ArgumentCoder<WebKit::LayerProperties::AnimationChanges,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (_QWORD **)(a2 + 16));
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);
  return IPC::ArgumentCoder<WebCore::AcceleratedEffectValues,void>::encode(a1, (int *)(a2 + 40));
}

char *IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = &v7[18 * v6];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v7);
      result = IPC::ArgumentCoder<WebKit::PlatformCAAnimationRemoteProperties,void>::encode(a1, (uint64_t)(v7 + 1));
      v7 += 18;
    }
    while (v7 != v8);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::PlatformCAAnimationRemoteProperties,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Color *v17;
  uint64_t i;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  IPC::Encoder *v31;
  _QWORD **v32;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *(_BYTE *)(a2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_BYTE *)(a2 + 49);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,void>::encode<IPC::Encoder,WebCore::TimingFunction>(a1, (_QWORD **)(a2 + 56));
  v10 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = *(_BYTE *)(a2 + 65);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  v12 = *(_BYTE *)(a2 + 66);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  v13 = *(_BYTE *)(a2 + 67);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  v14 = *(_BYTE *)(a2 + 68);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
  v15 = *(unsigned int *)(a2 + 84);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v15;
  v16 = *(unsigned int *)(a2 + 84);
  if ((_DWORD)v16)
  {
    v17 = *(WebCore::Color **)(a2 + 72);
    for (i = 136 * v16; i; i -= 136)
    {
      v19 = *((_DWORD *)v17 + 32);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v19;
      if ((_BYTE)v19)
      {
        IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul>(a1, v17, v19);
      }
      else
      {
        if (*((_DWORD *)v17 + 32))
        {
          v31 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
          return IPC::ArgumentCoder<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,void>::encode<IPC::Encoder,WebCore::TimingFunction>(v31, v32);
        }
        v20 = *(_DWORD *)v17;
        *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
      }
      v17 = (WebCore::Color *)((char *)v17 + 136);
    }
  }
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 88), *(unsigned int *)(a2 + 100));
  v21 = *(unsigned int *)(a2 + 116);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v21;
  v22 = *(unsigned int *)(a2 + 116);
  if ((_DWORD)v22)
  {
    v26 = *(_QWORD ***)(a2 + 104);
    v27 = 8 * v22;
    do
    {
      v28 = *v26++;
      IPC::ArgumentCoder<WebCore::TimingFunction,void>::encode(a1, v28);
      v27 -= 8;
    }
    while (v27);
  }
  v23 = *(unsigned int *)(a2 + 132);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v23;
  v25 = *(unsigned int *)(a2 + 132);
  if ((_DWORD)v25)
  {
    v29 = *(_QWORD *)(a2 + 120);
    v30 = 136 * v25;
    do
    {
      result = (char *)IPC::ArgumentCoder<WebKit::PlatformCAAnimationRemoteProperties,void>::encode(a1, v29);
      v29 += 136;
      v30 -= 136;
    }
    while (v30);
  }
  return result;
}

char *IPC::ArgumentCoder<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,void>::encode<IPC::Encoder,WebCore::TimingFunction>(IPC::Encoder *a1, _QWORD **a2)
{
  uint64_t v4;
  char *result;

  v4 = (uint64_t)*a2;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    return IPC::ArgumentCoder<WebCore::TimingFunction,void>::encode(a1, *a2);
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::TimingFunction,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  char *result;

  if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2))
  {
    if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2) == 1)
    {
      *IPC::Encoder::grow(a1, 1uLL, 1) = 1;
      return IPC::ArgumentCoder<WebCore::CubicBezierTimingFunction,void>::encode(a1, (uint64_t)a2);
    }
    else if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2) == 2)
    {
      *IPC::Encoder::grow(a1, 1uLL, 1) = 2;
      return (char *)IPC::Encoder::operator<<<WebCore::StepsTimingFunction const&>(a1, (uint64_t)a2);
    }
    else
    {
      result = (char *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
      if ((_DWORD)result == 3)
      {
        *IPC::Encoder::grow(a1, 1uLL, 1) = 3;
        return IPC::ArgumentCoder<API::Rect,void>::encode(a1, a2);
      }
    }
  }
  else
  {
    *IPC::Encoder::grow(a1, 1uLL, 1) = 0;
    return (char *)IPC::VectorArgumentCoder<false,WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
  }
  return result;
}

_QWORD *IPC::VectorArgumentCoder<false,WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 16 * v6;
    do
    {
      result = IPC::Encoder::operator<<<WebCore::LinearTimingFunction::Point const&>(a1, v7);
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::CubicBezierTimingFunction,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;

  v4 = *(_BYTE *)(a2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v8;
  return result;
}

float WebKit::WebChromeClient::overrideScreenSize(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(float *)(v2 + 1328);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

uint64_t WebKit::WebSWRegistrationStore::importRegistrations(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  WTF::StringImpl *v6;
  _BYTE v7[16];
  char v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    ++*(_DWORD *)(v3 + 24);
    result = WebKit::NetworkStorageManager::importServiceWorkerRegistrations(v3, a2);
    v5 = *(_DWORD *)(v3 + 24);
    if (v5)
    {
      *(_DWORD *)(v3 + 24) = v5 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    v7[0] = 0;
    v8 = 0;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(a2, (uint64_t)v7);
    if (v8)
      return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
  }
  return result;
}

uint64_t *WebKit::WebLoaderStrategy::addOnlineStateChangeListener(unsigned int *a1, uint64_t *a2)
{
  WebKit::WebProcess *v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = WebKit::WebProcess::singleton((WebKit::WebProcess *)a1);
  result = (uint64_t *)WebKit::WebProcess::ensureNetworkProcessConnection(v4);
  v6 = a1[23];
  if ((_DWORD)v6 == a1[22])
    return WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(BOOL)>>(a1 + 20, (unint64_t)a2);
  v7 = *((_QWORD *)a1 + 10);
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(v7 + 8 * v6) = v8;
  a1[23] = v6 + 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::determineTrackingPreventionState(void)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34B7A58;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WebKit::RemoteLayerTreeDrawingArea::setDeviceScaleFactor(WebKit::RemoteLayerTreeDrawingArea *this, float a2)
{
  uint64_t v3;
  CFTypeRef *v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  WebKit::WebPage::setDeviceScaleFactor((WebKit::WebPage *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

float *WebKit::WebPage::setDeviceScaleFactor(WebKit::WebPage *this, float a2)
{
  float *result;
  uint64_t v4;

  result = (float *)*((_QWORD *)this + 6);
  if (result[91] != a2)
  {
    result = (float *)WebCore::Page::setDeviceScaleFactor((WebCore::Page *)result, a2);
    v4 = *((_QWORD *)this + 56);
    if (*(_BYTE *)(v4 + 24))
    {
      if (*(_QWORD *)(v4 + 16))
      {
        WebCore::Page::layoutIfNeeded();
        return (float *)WebKit::FindController::updateFindIndicator(*((WebKit::FindController **)this + 56), 1, 0);
      }
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ScrollingStateFrameScrollingNode,void>::decode(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int *v48;
  int v49;
  int v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  _BYTE *v61;
  int v62;
  _BYTE *v63;
  int v64;
  void *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned __int8 *v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unint64_t v89;
  unint64_t v90;
  unsigned __int8 *v91;
  unint64_t v92;
  unint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  unint64_t v100;
  unsigned __int8 *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  WTF *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  char v174;
  int v175;
  char v176;
  char v177;
  char v178;
  char v179;
  char v180;
  char v181;
  char v182;
  char v183;
  char v184;
  uint64_t v185;
  _BYTE v186[7];
  _BYTE v187[7];
  _BYTE v188[7];
  _BYTE v189[7];
  _BYTE v190[24];
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  int v194;
  __int16 v195;
  __int16 v196;
  __int128 v197;
  _BYTE v198[7];
  _BYTE v199[7];
  _BYTE v200[7];
  _BYTE v201[7];
  _BYTE v202[40];
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  char v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  _BYTE v213[19];
  __int128 v214;
  int v215;
  unsigned __int8 v216;
  _QWORD v217[2];
  _BYTE v218[7];
  _BYTE v219[16];
  char v220;
  _BYTE v221[24];
  char v222;
  _BYTE v223[15];
  char v224;
  _BYTE v225[7];
  char v226;
  char v227;
  _BYTE v228[15];
  char v229;
  _BYTE v230[7];
  uint64_t v231;
  char v232;
  _BYTE v233[15];
  char v234;
  _BYTE v235[7];
  char v236;
  _BYTE v237[15];
  char v238;
  _BYTE v239[7];
  char v240;
  _BYTE v241[15];
  char v242;
  _BYTE v243[7];
  char v244;
  _BYTE v245[15];
  char v246;
  _BYTE v247[7];
  char v248;
  _BYTE v249[15];
  char v250;
  _BYTE v251[7];
  __int128 v252;
  char v253;
  _BYTE v254[7];
  _QWORD v255[2];
  _QWORD v256[2];
  _QWORD v257[2];
  _QWORD v258[2];
  _QWORD v259[2];
  _QWORD v260[2];
  _QWORD v261[2];
  _QWORD v262[2];
  _QWORD v263[5];

  v263[2] = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v104 = 0;
    v105 = 0;
    *a2 = 0;
    a2[1] = 0;
    v106 = a2[3];
    if (v106)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 16))(v106);
        v105 = *a2;
        v104 = a2[1];
      }
      else
      {
        v104 = 0;
        v105 = 0;
      }
    }
    goto LABEL_222;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v104 = v6;
    v105 = 0;
LABEL_222:
    *a2 = 0;
    a2[1] = 0;
    v107 = a2[3];
    if (v107 && v104)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v105, v104);
      v5 = *a2;
      v6 = a2[1];
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    goto LABEL_224;
  }
  if (*v8 < 2u)
  {
    v9 = 0;
    goto LABEL_5;
  }
LABEL_224:
  *a2 = 0;
  a2[1] = 0;
  v108 = a2[3];
  if (v108 && v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v108 + 16))(v108, v5);
  v9 = 1;
LABEL_5:
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)v221);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v219, a2);
  result = IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(a2);
  v12 = v11;
  if (!(_BYTE)v11)
    goto LABEL_234;
  v13 = result;
  if ((result & 1) != 0)
  {
    result = (uint64_t)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v202, a2);
    if (!v202[24])
      goto LABEL_234;
    BYTE4(v185) = v202[0];
    v263[0] = *(_QWORD *)&v202[1];
    *(_QWORD *)((char *)v263 + 7) = *(_QWORD *)&v202[8];
    LOBYTE(v185) = v202[16];
  }
  else
  {
    v185 = 0;
  }
  if ((v13 & 2) != 0)
  {
    result = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    if (!(_BYTE)v11)
      goto LABEL_234;
  }
  if ((v13 & 4) != 0)
  {
    result = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    if (!(_BYTE)v11)
      goto LABEL_234;
  }
  if ((v13 & 8) != 0)
  {
    result = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    if (!(_BYTE)v11)
      goto LABEL_234;
  }
  if ((v13 & 0x10) != 0)
  {
    IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
    if (!v14)
    {
LABEL_230:
      v11 = *a2;
      v109 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (result && v109)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v11);
      goto LABEL_234;
    }
  }
  if ((v13 & 0x20) != 0)
  {
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
    if (!v15)
    {
      v11 = *a2;
      v110 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (result && v110)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v11);
      goto LABEL_234;
    }
  }
  LOWORD(v217[0]) = 257;
  *(_QWORD *)((char *)v217 + 2) = 0;
  WORD1(v217[1]) = 0;
  if ((v13 & 0x40) != 0)
  {
    result = IPC::Decoder::decode<WebCore::ScrollableAreaParameters>(a2);
    if ((v11 & 0xFF00000000) == 0)
      goto LABEL_234;
    v217[0] = result;
    LODWORD(v217[1]) = v11;
    v16 = v12;
  }
  else
  {
    v16 = 1;
  }
  v213[0] = 0;
  *(_QWORD *)&v213[4] = 0;
  *(_DWORD *)&v213[12] = 0;
  *(_WORD *)&v213[16] = 256;
  v213[18] = 0;
  LOBYTE(v214) = 0;
  v216 = 0;
  if (!v16)
  {
LABEL_229:
    __break(1u);
    goto LABEL_230;
  }
  if ((v13 & 0x80) != 0)
  {
    result = IPC::Decoder::decode<WebCore::RequestedScrollData>((uint64_t)v202, a2);
    if (BYTE4(v203))
    {
      *(_OWORD *)v213 = *(_OWORD *)v202;
      *(_DWORD *)&v213[15] = *(_DWORD *)&v202[15];
      if (v216 == v203)
      {
        if (v216)
        {
          LOBYTE(v214) = v202[20];
          *(_QWORD *)((char *)&v214 + 4) = *(_QWORD *)&v202[24];
          HIDWORD(v214) = *(_DWORD *)&v202[32];
          LOWORD(v215) = *(_WORD *)&v202[36];
        }
      }
      else if (v216)
      {
        v216 = 0;
      }
      else
      {
        v214 = *(_OWORD *)&v202[20];
        v215 = *(_DWORD *)&v202[36];
        v216 = 1;
      }
      goto LABEL_26;
    }
LABEL_234:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_235;
  }
LABEL_26:
  v208 = 0;
  v209 = 0u;
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  if ((v13 & 0x100) != 0)
  {
    IPC::Decoder::decode<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>>((uint64_t)v202, a2);
    if (!v207)
    {
      *a1 = 0;
      a1[8] = 0;
      std::__optional_destruct_base<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v202, v17);
      goto LABEL_247;
    }
    v208 = v202[0];
    v18 = (WTF *)v209;
    if (HIDWORD(v209))
    {
      v19 = 40 * HIDWORD(v209);
      v20 = v209 + 24;
      do
      {
        v21 = *(WTF **)v20;
        if (*(_QWORD *)v20)
        {
          *(_QWORD *)v20 = 0;
          *(_DWORD *)(v20 + 8) = 0;
          WTF::fastFree(v21, v17);
        }
        v20 += 40;
        v19 -= 40;
      }
      while (v19);
      v18 = (WTF *)v209;
    }
    if (v18)
    {
      *(_QWORD *)&v209 = 0;
      DWORD2(v209) = 0;
      WTF::fastFree(v18, v17);
    }
    v22 = *(_QWORD *)&v202[8];
    *(_QWORD *)&v202[8] = 0;
    *(_QWORD *)&v209 = v22;
    v23 = *(_QWORD *)&v202[16];
    *(_DWORD *)&v202[16] = 0;
    *(_DWORD *)&v202[20] = 0;
    *((_QWORD *)&v209 + 1) = v23;
    v24 = (WTF *)v210;
    if (HIDWORD(v210))
    {
      v25 = 40 * HIDWORD(v210);
      v26 = v210 + 24;
      do
      {
        v27 = *(WTF **)v26;
        if (*(_QWORD *)v26)
        {
          *(_QWORD *)v26 = 0;
          *(_DWORD *)(v26 + 8) = 0;
          WTF::fastFree(v27, v17);
        }
        v26 += 40;
        v25 -= 40;
      }
      while (v25);
      v24 = (WTF *)v210;
    }
    if (v24)
    {
      *(_QWORD *)&v210 = 0;
      DWORD2(v210) = 0;
      WTF::fastFree(v24, v17);
    }
    v28 = *(_QWORD *)&v202[24];
    *(_QWORD *)&v202[24] = 0;
    *(_QWORD *)&v210 = v28;
    v29 = *(_QWORD *)&v202[32];
    *(_DWORD *)&v202[32] = 0;
    *(_DWORD *)&v202[36] = 0;
    *((_QWORD *)&v210 + 1) = v29;
    v30 = (WTF *)v211;
    if ((_QWORD)v211)
    {
      *(_QWORD *)&v211 = 0;
      DWORD2(v211) = 0;
      WTF::fastFree(v30, v17);
    }
    v31 = v203;
    v203 = 0;
    *(_QWORD *)&v211 = v31;
    v32 = v204;
    v204 = 0;
    *((_QWORD *)&v211 + 1) = v32;
    v33 = (WTF *)v212;
    if ((_QWORD)v212)
    {
      *(_QWORD *)&v212 = 0;
      DWORD2(v212) = 0;
      WTF::fastFree(v33, v17);
    }
    v34 = v205;
    v205 = 0;
    *(_QWORD *)&v212 = v34;
    v35 = v206;
    v206 = 0;
    *((_QWORD *)&v212 + 1) = v35;
    std::__optional_destruct_base<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v202, v17);
  }
  if ((v13 & 0x200) != 0)
  {
    IPC::Decoder::decode<std::optional<unsigned int>>(a2);
    if (!(_BYTE)v36)
      goto LABEL_246;
    if ((v13 & 0x400) == 0)
    {
LABEL_55:
      if ((v13 & 0x800) == 0)
        goto LABEL_56;
      goto LABEL_66;
    }
  }
  else if ((v13 & 0x400) == 0)
  {
    goto LABEL_55;
  }
  IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  if (!(_BYTE)v36)
    goto LABEL_246;
  if ((v13 & 0x800) == 0)
  {
LABEL_56:
    if ((v13 & 0x1000) == 0)
      goto LABEL_57;
    goto LABEL_70;
  }
LABEL_66:
  v37 = a2[1];
  v36 = (char *)*a2;
  v38 = a2[2] - *a2;
  if (v37 <= v38)
  {
    v111 = 0;
    v112 = 0;
    *a2 = 0;
    a2[1] = 0;
    v113 = a2[3];
    if (v113)
    {
      if (v37)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113);
        v112 = *a2;
        v111 = a2[1];
      }
      else
      {
        v111 = 0;
        v112 = 0;
      }
    }
    goto LABEL_239;
  }
  v39 = &v36[v38];
  a2[2] = (uint64_t)(v39 + 1);
  if (!v36)
  {
    v111 = v37;
    v112 = 0;
LABEL_239:
    v37 = 0;
    v36 = 0;
    *a2 = 0;
    a2[1] = 0;
    v114 = a2[3];
    if (v114)
    {
      if (v111)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v112, v111);
        v36 = (char *)*a2;
        v37 = a2[1];
      }
      else
      {
        v37 = 0;
        v36 = 0;
      }
    }
LABEL_240:
    *a2 = 0;
    a2[1] = 0;
    v115 = a2[3];
    if (!v115 || !v37)
      goto LABEL_246;
LABEL_242:
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v115 + 16))(v115, v36);
    goto LABEL_246;
  }
  if (*v39 >= 2u)
    goto LABEL_240;
  if ((v13 & 0x1000) == 0)
  {
LABEL_57:
    v184 = 0;
    v183 = 0;
    if ((v13 & 0x2000) == 0)
      goto LABEL_58;
    goto LABEL_72;
  }
LABEL_70:
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v202, a2);
  if (!v202[24])
    goto LABEL_246;
  v183 = v202[0];
  v262[0] = *(_QWORD *)&v202[1];
  *(_QWORD *)((char *)v262 + 7) = *(_QWORD *)&v202[8];
  v184 = v202[16];
  if ((v13 & 0x2000) == 0)
  {
LABEL_58:
    v182 = 0;
    v181 = 0;
    if ((v13 & 0x4000) == 0)
      goto LABEL_59;
    goto LABEL_74;
  }
LABEL_72:
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v202, a2);
  if (!v202[24])
    goto LABEL_246;
  v181 = v202[0];
  v261[0] = *(_QWORD *)&v202[1];
  *(_QWORD *)((char *)v261 + 7) = *(_QWORD *)&v202[8];
  v182 = v202[16];
  if ((v13 & 0x4000) == 0)
  {
LABEL_59:
    v180 = 0;
    v179 = 0;
    if ((v13 & 0x8000) == 0)
      goto LABEL_60;
    goto LABEL_76;
  }
LABEL_74:
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v202, a2);
  if (!v202[24])
    goto LABEL_246;
  v179 = v202[0];
  v260[0] = *(_QWORD *)&v202[1];
  *(_QWORD *)((char *)v260 + 7) = *(_QWORD *)&v202[8];
  v180 = v202[16];
  if ((v13 & 0x8000) == 0)
  {
LABEL_60:
    v178 = 0;
    v177 = 0;
    if ((v13 & 0x10000) == 0)
      goto LABEL_81;
LABEL_78:
    v40 = a2[1];
    v36 = (char *)*a2;
    v41 = a2[2] - *a2;
    if (v40 <= v41)
    {
      v116 = 0;
      v117 = 0;
      *a2 = 0;
      a2[1] = 0;
      v118 = a2[3];
      if (v118)
      {
        if (v40)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v118 + 16))(v118);
          v117 = *a2;
          v116 = a2[1];
        }
        else
        {
          v116 = 0;
          v117 = 0;
        }
      }
    }
    else
    {
      v42 = &v36[v41];
      a2[2] = (uint64_t)(v42 + 1);
      if (v36)
      {
        if (*v42 < 2u)
          goto LABEL_81;
        goto LABEL_245;
      }
      v116 = v40;
      v117 = 0;
    }
    v40 = 0;
    v36 = 0;
    *a2 = 0;
    a2[1] = 0;
    v119 = a2[3];
    if (v119)
    {
      if (v116)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v119 + 16))(v119, v117, v116);
        v36 = (char *)*a2;
        v40 = a2[1];
      }
      else
      {
        v40 = 0;
        v36 = 0;
      }
    }
LABEL_245:
    *a2 = 0;
    a2[1] = 0;
    v115 = a2[3];
    if (!v115 || !v40)
      goto LABEL_246;
    goto LABEL_242;
  }
LABEL_76:
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v202, a2);
  if (!v202[24])
    goto LABEL_246;
  v177 = v202[0];
  v259[0] = *(_QWORD *)&v202[1];
  *(_QWORD *)((char *)v259 + 7) = *(_QWORD *)&v202[8];
  v178 = v202[16];
  if ((v13 & 0x10000) != 0)
    goto LABEL_78;
LABEL_81:
  v197 = 0uLL;
  if ((v13 & 0x20000) != 0)
  {
    IPC::Decoder::decode<WebCore::MouseLocationState>((uint64_t)v202, (unint64_t *)a2);
    if (!v202[16])
      goto LABEL_246;
    v197 = *(_OWORD *)v202;
  }
  v196 = 0;
  if ((v13 & 0x40000) != 0)
  {
    v43 = IPC::Decoder::decode<WebCore::ScrollbarHoverState>(a2);
    if ((v43 & 0xFFFFFF) < 0x10000)
      goto LABEL_246;
    v196 = v43;
  }
  v195 = 0;
  if ((v13 & 0x80000) != 0)
  {
    v44 = IPC::Decoder::decode<WebCore::ScrollbarHoverState>(a2);
    if ((v44 & 0xFFFFFF) < 0x10000)
      goto LABEL_246;
    v195 = v44;
  }
  if ((v13 & 0x100000) != 0 && (unsigned __int16)IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a2) < 0x100u)
    goto LABEL_246;
  LOBYTE(v192) = 0;
  BYTE4(v192) = 0;
  LOBYTE(v194) = 0;
  if ((v13 & 0x200000) != 0)
  {
    IPC::Decoder::decode<WebCore::RequestedKeyboardScrollData>((uint64_t)v202, (unint64_t *)a2);
    if (v202[36])
    {
      v192 = *(_OWORD *)v202;
      v193 = *(_OWORD *)&v202[16];
      v194 = *(_DWORD *)&v202[32];
      goto LABEL_100;
    }
LABEL_246:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_247;
  }
LABEL_100:
  if ((v13 & 0x400000) != 0 && (IPC::Decoder::decode<float>(a2) & 0xFF00000000) == 0)
    goto LABEL_246;
  WebCore::Region::Region((WebCore::Region *)v190);
  v191 = 0;
  if ((v13 & 0x800000) == 0)
    goto LABEL_153;
  IPC::Decoder::decode<WebCore::Region>(&v222, (unint64_t *)a2);
  v45 = a2[1];
  v46 = *a2;
  v47 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v45 < v47 || v45 - v47 <= 3)
  {
    v128 = 0;
    v129 = 0;
    *a2 = 0;
    a2[1] = 0;
    v130 = a2[3];
    if (v130)
    {
      if (v45)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v130 + 16))(v130);
        v129 = *a2;
        v128 = a2[1];
      }
      else
      {
        v128 = 0;
        v129 = 0;
      }
    }
LABEL_261:
    *a2 = 0;
    a2[1] = 0;
    v131 = a2[3];
    if (v131 && v128)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v131 + 16))(v131, v129);
LABEL_140:
    v70 = *a2;
    v71 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v72 = a2[3];
    if (!v72 || !v71 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v70), !*a2))
    {
      v202[0] = 0;
      v202[32] = 0;
      goto LABEL_147;
    }
    v73 = 0;
    v74 = 1;
LABEL_144:
    if (v226)
    {
      WebCore::Region::Region();
      if (!v74)
      {
        v231 = v73;
        WebCore::Region::Region();
        v75 = v231;
        v231 = 0;
        *(_QWORD *)&v202[24] = v75;
        v202[32] = 1;
        WebCore::Region::~Region((WebCore::Region *)&v227);
        goto LABEL_147;
      }
    }
    goto LABEL_229;
  }
  v48 = (int *)(v46 + v47);
  a2[2] = (uint64_t)(v48 + 1);
  if (!v46)
  {
    v128 = v45;
    v129 = 0;
    goto LABEL_261;
  }
  v49 = *v48;
  *(_QWORD *)&v252 = 0;
  v173 = v49;
  if (!v49)
  {
    v73 = 0;
LABEL_143:
    v74 = 0;
    goto LABEL_144;
  }
  v50 = 0;
  do
  {
    v175 = v50;
    v51 = a2[1];
    v52 = (char *)*a2;
    v53 = a2[2] - *a2;
    if (v51 <= v53)
    {
      v123 = 0;
      v124 = 0;
      *a2 = 0;
      a2[1] = 0;
      v125 = a2[3];
      if (v125)
      {
        if (v51)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v125 + 16))(v125);
          v124 = *a2;
          v123 = a2[1];
        }
        else
        {
          v123 = 0;
          v124 = 0;
        }
      }
LABEL_256:
      v51 = 0;
      v52 = 0;
      *a2 = 0;
      a2[1] = 0;
      v126 = a2[3];
      if (v126)
      {
        if (v123)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v126 + 16))(v126, v124, v123);
          v52 = (char *)*a2;
          v51 = a2[1];
        }
        else
        {
          v51 = 0;
          v52 = 0;
        }
      }
LABEL_257:
      *a2 = 0;
      a2[1] = 0;
      v127 = a2[3];
      if (v127 && v51)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v127 + 16))(v127, v52);
LABEL_138:
      if ((_QWORD)v252)
        WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(v252, v52);
      goto LABEL_140;
    }
    v54 = &v52[v53];
    a2[2] = (uint64_t)(v54 + 1);
    if (!v52)
    {
      v123 = v51;
      v124 = 0;
      goto LABEL_256;
    }
    v55 = *v54;
    if (v55 >= 0x10)
      goto LABEL_257;
    IPC::Decoder::decode<WebCore::Region>(&v227, (unint64_t *)a2);
    if (!(_BYTE)v231)
      goto LABEL_138;
    v56 = v252;
    if ((_QWORD)v252
      || (WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::expand((uint64_t *)&v252),
          (v56 = v252) != 0))
    {
      v57 = *(_DWORD *)(v56 - 8);
    }
    else
    {
      v57 = 0;
    }
    v58 = 9 * ((~(v55 << 15) + v55) ^ ((~(v55 << 15) + v55) >> 10));
    v59 = (v58 ^ (v58 >> 6)) + ~((v58 ^ (v58 >> 6)) << 11);
    v60 = v57 & (v59 ^ HIWORD(v59));
    v61 = (_BYTE *)(v56 + 32 * v60);
    v62 = *v61;
    if (v62 != 255)
    {
      v63 = 0;
      v64 = 1;
      while (v62 != v55)
      {
        if (v62 == 254)
          v63 = v61;
        v60 = ((_DWORD)v60 + v64) & v57;
        v61 = (_BYTE *)(v56 + 32 * v60);
        v62 = *v61;
        ++v64;
        if (v62 == 255)
        {
          if (v63)
          {
            *v63 = -1;
            WebCore::Region::Region((WebCore::Region *)(v63 + 8));
            --*(_DWORD *)(v252 - 16);
            v61 = v63;
          }
          goto LABEL_123;
        }
      }
      if ((_BYTE)v231)
        WebCore::Region::~Region((WebCore::Region *)&v227);
      goto LABEL_138;
    }
LABEL_123:
    *v61 = v55;
    WebCore::Region::operator=();
    v66 = v252;
    if ((_QWORD)v252)
      v67 = *(_DWORD *)(v252 - 12) + 1;
    else
      v67 = 1;
    *(_DWORD *)(v252 - 12) = v67;
    v68 = (*(_DWORD *)(v66 - 16) + v67);
    v69 = *(unsigned int *)(v66 - 4);
    if (v69 <= 0x400)
    {
      if (3 * v69 > 4 * v68)
        goto LABEL_128;
LABEL_127:
      WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::expand((uint64_t *)&v252);
      goto LABEL_128;
    }
    if (v69 <= 2 * v68)
      goto LABEL_127;
LABEL_128:
    if ((_BYTE)v231)
      WebCore::Region::~Region((WebCore::Region *)&v227);
    v50 = v175 + 1;
  }
  while (v175 + 1 != v173);
  v73 = v252;
  if (*a2)
    goto LABEL_143;
  v202[0] = 0;
  v202[32] = 0;
  if ((_QWORD)v252)
    WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(v252, v65);
LABEL_147:
  if (v226)
    WebCore::Region::~Region((WebCore::Region *)&v222);
  if (!v202[32])
  {
    v132 = (void *)*a2;
    v133 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v134 = a2[3];
    if (!v134 || !v133 || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v134 + 16))(v134, v132), !v202[32]))
    {
      *a1 = 0;
      a1[8] = 0;
      std::__optional_destruct_base<WebCore::EventTrackingRegions,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Region *)v202, v132);
      goto LABEL_320;
    }
  }
  WebCore::Region::operator=();
  v77 = *(_QWORD *)&v202[24];
  *(_QWORD *)&v202[24] = 0;
  v78 = v191;
  v191 = v77;
  if (v78)
    WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(v78, v76);
  std::__optional_destruct_base<WebCore::EventTrackingRegions,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Region *)v202, v76);
LABEL_153:
  if ((v13 & 0x1000000) == 0)
  {
    v176 = 0;
    v174 = 0;
    goto LABEL_157;
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v202, a2);
  if (!v202[24])
    goto LABEL_179;
  v174 = v202[0];
  v258[0] = *(_QWORD *)&v202[1];
  *(_QWORD *)((char *)v258 + 7) = *(_QWORD *)&v202[8];
  v176 = v202[16];
LABEL_157:
  if ((v13 & 0x2000000) == 0)
  {
    v172 = 0;
    goto LABEL_161;
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v202, a2);
  if (!v202[24])
    goto LABEL_179;
  LOBYTE(v172) = v202[0];
  v257[0] = *(_QWORD *)&v202[1];
  *(_QWORD *)((char *)v257 + 7) = *(_QWORD *)&v202[8];
  BYTE4(v172) = v202[16];
LABEL_161:
  if ((v13 & 0x4000000) == 0)
  {
    v171 = 0;
    goto LABEL_165;
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v202, a2);
  if (!v202[24])
    goto LABEL_179;
  LOBYTE(v171) = v202[0];
  v256[0] = *(_QWORD *)&v202[1];
  *(_QWORD *)((char *)v256 + 7) = *(_QWORD *)&v202[8];
  BYTE4(v171) = v202[16];
LABEL_165:
  if ((v13 & 0x8000000) == 0)
  {
    v170 = 0;
    goto LABEL_169;
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v202, a2);
  if (!v202[24])
    goto LABEL_179;
  LOBYTE(v170) = v202[0];
  v255[0] = *(_QWORD *)&v202[1];
  *(_QWORD *)((char *)v255 + 7) = *(_QWORD *)&v202[8];
  BYTE4(v170) = v202[16];
LABEL_169:
  if ((v13 & 0x10000000) != 0 && (IPC::Decoder::decode<unsigned int>(a2) & 0xFF00000000) == 0
    || (v13 & 0x20000000) != 0 && (IPC::Decoder::decode<unsigned int>(a2) & 0xFF00000000) == 0)
  {
LABEL_179:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_320;
  }
  if ((v13 & 0x40000000) != 0)
  {
    *(_WORD *)v202 = 0;
    IPC::Decoder::operator>><BOOL>(a2, v202);
    if (!v202[1])
    {
      v79 = *a2;
      v135 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v136 = a2[3];
      if (!v136 || !v135)
        goto LABEL_318;
LABEL_365:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v136 + 16))(v136, v79);
      goto LABEL_318;
    }
  }
  if ((v13 & 0x80000000) != 0 && (IPC::Decoder::decode<float>(a2) & 0xFF00000000) == 0)
    goto LABEL_318;
  if ((v13 & 0x100000000) != 0)
  {
    v80 = a2[1];
    v79 = *a2;
    v81 = a2[2] - *a2;
    if (v80 <= v81)
    {
      v137 = 0;
      v138 = 0;
      *a2 = 0;
      a2[1] = 0;
      v139 = a2[3];
      if (v139)
      {
        if (v80)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v139 + 16))(v139);
          v138 = *a2;
          v137 = a2[1];
        }
        else
        {
          v137 = 0;
          v138 = 0;
        }
      }
    }
    else
    {
      v82 = (unsigned __int8 *)(v79 + v81);
      a2[2] = (uint64_t)(v82 + 1);
      if (v79)
      {
        if (*v82 < 2u)
          goto LABEL_183;
LABEL_277:
        *a2 = 0;
        a2[1] = 0;
        v136 = a2[3];
        if (!v136 || !v80)
          goto LABEL_318;
        goto LABEL_365;
      }
      v137 = v80;
      v138 = 0;
    }
    v80 = 0;
    v79 = 0;
    *a2 = 0;
    a2[1] = 0;
    v140 = a2[3];
    if (v140)
    {
      if (v137)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v140 + 16))(v140, v138, v137);
        v79 = *a2;
        v80 = a2[1];
      }
      else
      {
        v80 = 0;
        v79 = 0;
      }
    }
    goto LABEL_277;
  }
LABEL_183:
  if ((v13 & 0x200000000) == 0)
    goto LABEL_187;
  v83 = a2[1];
  v79 = *a2;
  v84 = a2[2] - *a2;
  if (v83 <= v84)
  {
    v141 = 0;
    v142 = 0;
    *a2 = 0;
    a2[1] = 0;
    v143 = a2[3];
    if (v143)
    {
      if (v83)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v143 + 16))(v143);
        v142 = *a2;
        v141 = a2[1];
      }
      else
      {
        v141 = 0;
        v142 = 0;
      }
    }
    goto LABEL_281;
  }
  v85 = (unsigned __int8 *)(v79 + v84);
  a2[2] = (uint64_t)(v85 + 1);
  if (!v79)
  {
    v141 = v83;
    v142 = 0;
LABEL_281:
    v83 = 0;
    v79 = 0;
    *a2 = 0;
    a2[1] = 0;
    v144 = a2[3];
    if (v144)
    {
      if (v141)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v144 + 16))(v144, v142, v141);
        v79 = *a2;
        v83 = a2[1];
      }
      else
      {
        v83 = 0;
        v79 = 0;
      }
    }
LABEL_282:
    *a2 = 0;
    a2[1] = 0;
    v136 = a2[3];
    if (!v136 || !v83)
      goto LABEL_318;
    goto LABEL_365;
  }
  if (*v85 >= 2u)
    goto LABEL_282;
LABEL_187:
  if ((v13 & 0x400000000) == 0)
    goto LABEL_191;
  v86 = a2[1];
  v79 = *a2;
  v87 = a2[2] - *a2;
  if (v86 <= v87)
  {
    v145 = 0;
    v146 = 0;
    *a2 = 0;
    a2[1] = 0;
    v147 = a2[3];
    if (v147)
    {
      if (v86)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v147 + 16))(v147);
        v146 = *a2;
        v145 = a2[1];
      }
      else
      {
        v145 = 0;
        v146 = 0;
      }
    }
    goto LABEL_286;
  }
  v88 = (unsigned __int8 *)(v79 + v87);
  a2[2] = (uint64_t)(v88 + 1);
  if (!v79)
  {
    v145 = v86;
    v146 = 0;
LABEL_286:
    v86 = 0;
    v79 = 0;
    *a2 = 0;
    a2[1] = 0;
    v148 = a2[3];
    if (v148)
    {
      if (v145)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v148 + 16))(v148, v146, v145);
        v79 = *a2;
        v86 = a2[1];
      }
      else
      {
        v86 = 0;
        v79 = 0;
      }
    }
LABEL_287:
    *a2 = 0;
    a2[1] = 0;
    v136 = a2[3];
    if (!v136 || !v86)
      goto LABEL_318;
    goto LABEL_365;
  }
  if (*v88 >= 2u)
    goto LABEL_287;
LABEL_191:
  if ((v13 & 0x800000000) == 0)
    goto LABEL_195;
  v89 = a2[1];
  v79 = *a2;
  v90 = a2[2] - *a2;
  if (v89 <= v90)
  {
    v149 = 0;
    v150 = 0;
    *a2 = 0;
    a2[1] = 0;
    v151 = a2[3];
    if (v151)
    {
      if (v89)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v151 + 16))(v151);
        v150 = *a2;
        v149 = a2[1];
      }
      else
      {
        v149 = 0;
        v150 = 0;
      }
    }
    goto LABEL_291;
  }
  v91 = (unsigned __int8 *)(v79 + v90);
  a2[2] = (uint64_t)(v91 + 1);
  if (!v79)
  {
    v149 = v89;
    v150 = 0;
LABEL_291:
    v89 = 0;
    v79 = 0;
    *a2 = 0;
    a2[1] = 0;
    v152 = a2[3];
    if (v152)
    {
      if (v149)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v152 + 16))(v152, v150, v149);
        v79 = *a2;
        v89 = a2[1];
      }
      else
      {
        v89 = 0;
        v79 = 0;
      }
    }
LABEL_292:
    *a2 = 0;
    a2[1] = 0;
    v136 = a2[3];
    if (!v136 || !v89)
      goto LABEL_318;
    goto LABEL_365;
  }
  if (*v91 >= 2u)
    goto LABEL_292;
LABEL_195:
  if ((v13 & 0x1000000000) == 0)
    goto LABEL_199;
  v92 = a2[1];
  v79 = *a2;
  v93 = a2[2] - *a2;
  if (v92 <= v93)
  {
    v153 = 0;
    v154 = 0;
    *a2 = 0;
    a2[1] = 0;
    v155 = a2[3];
    if (v155)
    {
      if (v92)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v155 + 16))(v155);
        v154 = *a2;
        v153 = a2[1];
      }
      else
      {
        v153 = 0;
        v154 = 0;
      }
    }
    goto LABEL_296;
  }
  v94 = (unsigned __int8 *)(v79 + v93);
  a2[2] = (uint64_t)(v94 + 1);
  if (!v79)
  {
    v153 = v92;
    v154 = 0;
LABEL_296:
    v92 = 0;
    v79 = 0;
    *a2 = 0;
    a2[1] = 0;
    v156 = a2[3];
    if (v156)
    {
      if (v153)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v156 + 16))(v156, v154, v153);
        v79 = *a2;
        v92 = a2[1];
      }
      else
      {
        v92 = 0;
        v79 = 0;
      }
    }
LABEL_297:
    *a2 = 0;
    a2[1] = 0;
    v136 = a2[3];
    if (!v136 || !v92)
      goto LABEL_318;
    goto LABEL_365;
  }
  if (*v94 >= 2u)
    goto LABEL_297;
LABEL_199:
  if ((v13 & 0x2000000000) == 0)
    goto LABEL_205;
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
  v96 = v95;
  if (!v95)
  {
    v157 = *a2;
    v158 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v159 = a2[3];
    if (v159)
    {
      if (v158)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v159 + 16))(v159, v157);
    }
  }
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
  v97 = v79;
  if (!(_BYTE)v79)
  {
    v79 = *a2;
    v160 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v161 = a2[3];
    if (v161)
    {
      if (v160)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v161 + 16))(v161, v79);
    }
  }
  if (!*a2)
  {
    v162 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v163 = a2[3];
    if (v163 && v162)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v163 + 16))(v163, 0);
    goto LABEL_318;
  }
  if (!v96 || !v97)
    goto LABEL_229;
LABEL_205:
  if ((v13 & 0x4000000000) != 0)
  {
    IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
    if (!v98)
    {
      v79 = *a2;
      v164 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v136 = a2[3];
      if (!v136 || !v164)
        goto LABEL_318;
      goto LABEL_365;
    }
  }
  if ((v13 & 0x8000000000) != 0)
  {
    IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
    if (!v99)
    {
      v79 = *a2;
      v165 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v136 = a2[3];
      if (!v136 || !v165)
        goto LABEL_318;
      goto LABEL_365;
    }
  }
  if ((v13 & 0x10000000000) != 0)
  {
    IPC::Decoder::decode<std::optional<WebCore::FloatSize>>((unint64_t *)a2);
    if ((v79 & 0xFF00000000) == 0)
      goto LABEL_318;
  }
  v79 = *a2;
  if ((v13 & 0x20000000000) != 0)
  {
    v100 = a2[1];
    if (v100 <= a2[2] - v79)
    {
      v166 = 0;
      v167 = 0;
      *a2 = 0;
      a2[1] = 0;
      v168 = a2[3];
      if (v168)
      {
        if (v100)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v168 + 16))(v168);
          v167 = *a2;
          v166 = a2[1];
        }
        else
        {
          v166 = 0;
          v167 = 0;
        }
      }
    }
    else
    {
      v101 = (unsigned __int8 *)a2[2];
      a2[2] = (uint64_t)(v101 + 1);
      if (v79)
      {
        if (*v101 < 2u)
        {
LABEL_217:
          if (!v9 && v221[16] && v220)
          {
            v102 = WTF::fastMalloc((WTF *)0x370);
            v202[0] = BYTE4(v185);
            *(_QWORD *)&v202[1] = v263[0];
            *(_QWORD *)&v202[8] = *(_QWORD *)((char *)v263 + 7);
            v202[16] = v185;
            *(_DWORD *)&v202[17] = *(_DWORD *)v218;
            *(_DWORD *)&v202[20] = *(_DWORD *)&v218[3];
            v227 = v183;
            *(_QWORD *)&v228[7] = *(_QWORD *)((char *)v262 + 7);
            *(_QWORD *)v228 = v262[0];
            v229 = v184;
            *(_DWORD *)v230 = *(_DWORD *)v201;
            *(_DWORD *)&v230[3] = *(_DWORD *)&v201[3];
            v222 = v181;
            *(_QWORD *)v223 = v261[0];
            *(_QWORD *)&v223[7] = *(_QWORD *)((char *)v261 + 7);
            v224 = v182;
            *(_DWORD *)v225 = *(_DWORD *)v200;
            *(_DWORD *)&v225[3] = *(_DWORD *)&v200[3];
            LOBYTE(v252) = v179;
            *((_QWORD *)&v252 + 1) = *(_QWORD *)((char *)v260 + 7);
            *(_QWORD *)((char *)&v252 + 1) = v260[0];
            v253 = v180;
            *(_DWORD *)&v254[3] = *(_DWORD *)&v199[3];
            *(_DWORD *)v254 = *(_DWORD *)v199;
            v248 = v177;
            *(_QWORD *)&v249[7] = *(_QWORD *)((char *)v259 + 7);
            *(_QWORD *)v249 = v259[0];
            v250 = v178;
            *(_DWORD *)v251 = *(_DWORD *)v198;
            *(_DWORD *)&v251[3] = *(_DWORD *)&v198[3];
            v244 = v174;
            *(_QWORD *)&v245[7] = *(_QWORD *)((char *)v258 + 7);
            *(_QWORD *)v245 = v258[0];
            v246 = v176;
            *(_DWORD *)&v247[3] = *(_DWORD *)&v189[3];
            *(_DWORD *)v247 = *(_DWORD *)v189;
            v240 = v172;
            *(_QWORD *)&v241[7] = *(_QWORD *)((char *)v257 + 7);
            *(_QWORD *)v241 = v257[0];
            v242 = BYTE4(v172);
            *(_DWORD *)&v243[3] = *(_DWORD *)&v188[3];
            *(_DWORD *)v243 = *(_DWORD *)v188;
            v236 = v171;
            *(_QWORD *)&v237[7] = *(_QWORD *)((char *)v256 + 7);
            *(_QWORD *)v237 = v256[0];
            v238 = BYTE4(v171);
            *(_DWORD *)&v239[3] = *(_DWORD *)&v187[3];
            *(_DWORD *)v239 = *(_DWORD *)v187;
            v232 = v170;
            *(_QWORD *)&v233[7] = *(_QWORD *)((char *)v255 + 7);
            *(_QWORD *)v233 = v255[0];
            v234 = BYTE4(v170);
            *(_DWORD *)&v235[3] = *(_DWORD *)&v186[3];
            *(_DWORD *)v235 = *(_DWORD *)v186;
            WebCore::ScrollingStateFrameScrollingNode::ScrollingStateFrameScrollingNode();
            *(_QWORD *)a1 = v102;
            v103 = 1;
            goto LABEL_319;
          }
          goto LABEL_229;
        }
        goto LABEL_317;
      }
      v166 = v100;
      v167 = 0;
    }
    v100 = 0;
    v79 = 0;
    *a2 = 0;
    a2[1] = 0;
    v169 = a2[3];
    if (v169)
    {
      if (v166)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v169 + 16))(v169, v167, v166);
        v79 = *a2;
        v100 = a2[1];
      }
      else
      {
        v100 = 0;
        v79 = 0;
      }
    }
LABEL_317:
    *a2 = 0;
    a2[1] = 0;
    v136 = a2[3];
    if (!v136 || !v100)
      goto LABEL_318;
    goto LABEL_365;
  }
  if (v79)
    goto LABEL_217;
LABEL_318:
  v103 = 0;
  *a1 = 0;
LABEL_319:
  a1[8] = v103;
LABEL_320:
  if (v191)
    WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(v191, (void *)v79);
  WebCore::Region::~Region((WebCore::Region *)v190);
LABEL_247:
  v120 = (WTF *)v212;
  if ((_QWORD)v212)
  {
    *(_QWORD *)&v212 = 0;
    DWORD2(v212) = 0;
    WTF::fastFree(v120, v36);
  }
  v121 = (WTF *)v211;
  if ((_QWORD)v211)
  {
    *(_QWORD *)&v211 = 0;
    DWORD2(v211) = 0;
    WTF::fastFree(v121, v36);
  }
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v210, v36);
  result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v209, v122);
LABEL_235:
  if (v220)
    return WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v219, (void *)v11);
  return result;
}

void sub_196D0AB7C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  uint64_t v71;
  void *v73;
  WTF *v74;
  WTF *v75;
  void *v76;
  void *v77;

  if (STACK[0x248])
    WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::deallocateTable(STACK[0x248], a2);
  WebCore::Region::~Region((WebCore::Region *)&STACK[0x230]);
  v74 = *(WTF **)(v71 + 164);
  if (v74)
  {
    *(_QWORD *)(v71 + 164) = 0;
    *(_DWORD *)(v71 + 172) = 0;
    WTF::fastFree(v74, v73);
  }
  v75 = *(WTF **)(v71 + 148);
  if (v75)
  {
    *(_QWORD *)(v71 + 148) = 0;
    *(_DWORD *)(v71 + 156) = 0;
    WTF::fastFree(v75, v73);
  }
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a71, v73);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(STACK[0x200], v76);
  if (LOBYTE(STACK[0x3A8]))
    WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x398], v77);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 40 * v3;
    v6 = (char *)v4 + 24;
    do
    {
      v7 = *(WTF **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v6 += 40;
      v5 -= 40;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = (uint64_t *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      v6 = *v5;
      if ((v6 & 0xFFFDE00000000000) == 0)
        return v6;
      goto LABEL_8;
    }
    v9 = v1;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        a1 = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
  }
  v1 = 0;
  *a1 = 0;
  a1[1] = 0;
  v12 = a1[3];
  if (v12)
  {
    v13 = a1;
    if (v9)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
      a1 = v13;
      v1 = v13[1];
    }
    else
    {
      v1 = 0;
    }
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  v7 = a1[3];
  if (v7 && v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return 0;
}

WebCore::Region *WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::Region *result;
  void *v8;
  WebCore::Region *v9;
  char *v10;
  uint64_t i;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v20;

  v2 = *a1;
  if (!*a1)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  v3 = *(_DWORD *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 12);
  if (!v3)
    goto LABEL_3;
  v5 = v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  v6 = v5;
  result = (WebCore::Region *)WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  v9 = result;
  v10 = (char *)result + 16;
  if (v5)
  {
    result = (WebCore::Region *)((char *)result + 24);
    do
    {
      *((_BYTE *)result - 8) = -1;
      result = (WebCore::Region *)(WebCore::Region::Region(result) + 32);
      --v6;
    }
    while (v6);
  }
  *a1 = (uint64_t)v10;
  *((_DWORD *)v9 + 3) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v12 = (_BYTE *)(v2 + 32 * i);
      v13 = *v12;
      if (v13 != 254)
      {
        if (v13 == 255)
        {
          WebCore::Region::~Region((WebCore::Region *)(v2 + 32 * i + 8));
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
          v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
          do
          {
            v19 = v18 & v15;
            v18 = ++v16 + v19;
          }
          while (*(unsigned __int8 *)(v14 + 32 * v19) != 255);
          v20 = (_BYTE *)(v14 + 32 * v19);
          WebCore::Region::~Region((WebCore::Region *)(v20 + 8));
          *v20 = *v12;
          WebCore::Region::Region();
          WebCore::Region::~Region((WebCore::Region *)(v2 + 32 * i + 8));
        }
      }
    }
    return (WebCore::Region *)WTF::fastFree((WTF *)(v2 - 16), v8);
  }
  if (v2)
    return (WebCore::Region *)WTF::fastFree((WTF *)(v2 - 16), v8);
  return result;
}

void sub_196D0B6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,CFTypeRef cf)
{
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(a10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkLoad::didCompleteWithError(WebKit::NetworkLoad *this, const WebCore::ResourceError *a2, const WTF::String **a3)
{
  uint64_t v5;
  WTF ***v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t (*v12)(void);

  v5 = *((_QWORD *)this + 375);
  if (v5)
  {
    v6 = *(WTF ****)(v5 + 8);
    if (v6)
    {
      WebKit::NetworkLoadScheduler::unschedule(v6, this, a3);
      v8 = (unsigned int *)*((_QWORD *)this + 375);
      *((_QWORD *)this + 375) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v7);
        }
      }
    }
  }
  v11 = **((_QWORD **)this + 2);
  if (*((_BYTE *)a2 + 60))
    v12 = *(uint64_t (**)(void))(v11 + 80);
  else
    v12 = *(uint64_t (**)(void))(v11 + 72);
  return v12();
}

uint64_t *WebKit::NetworkResourceLoader::didFinishLoading(WebKit::NetworkResourceLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  char *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;
  WebKit::NetworkCache::Entry *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  WebCore::ContentFilter *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  _BOOL4 v34;
  WebKit::NetworkCache::Storage **v35;
  WebKit::NetworkCache *v36;
  char v37;
  uint64_t *v38;
  _QWORD *v39;
  WTF::StringImpl *v40;
  WebKit::NetworkCache::Entry *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t *result;
  unsigned int v48;
  void *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  int v56;
  _BOOL4 v57;
  const char *v58;
  const WTF::URL *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  void *v62;
  unsigned int v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BOOL4 v69;
  int v70;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BOOL4 v81;
  int v82;
  _BOOL4 v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  void *v87;
  unsigned int *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t *v92;
  _QWORD v93[5];
  _QWORD v94[3];
  char v95;
  uint64_t *v96[4];
  WebKit::NetworkCache::Entry *v97;
  _QWORD *v98;
  _BYTE buf[12];
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  _BOOL4 v109;
  __int16 v110;
  int v111;
  __int16 v112;
  _BOOL4 v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  _BOOL4 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 4328;
  v5 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_QWORD *)this + 10);
    v7 = *((_QWORD *)this + 11);
    v8 = *((_QWORD *)this + 12);
    v9 = *((_QWORD *)this + 379);
    v10 = *((unsigned __int8 *)this + 315) == 1;
    v11 = *((unsigned __int8 *)this + 3072);
    v12 = *((_QWORD *)this + 519) != 0;
    v13 = *((_QWORD *)this + 523);
    v14 = *((_QWORD *)this + 534) != 0;
    *(_DWORD *)buf = 134220288;
    *(_QWORD *)&buf[4] = this;
    v100 = 2048;
    v101 = v6;
    v102 = 2048;
    v103 = v7;
    v104 = 2048;
    v105 = v8;
    v106 = 2048;
    v107 = v9;
    v108 = 1024;
    v109 = v10;
    v110 = 1024;
    v111 = v11;
    v112 = 1024;
    v113 = v12;
    v114 = 2048;
    v115 = v13;
    v116 = 1024;
    v117 = v14;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didFinishLoading: (numBytesReceived=%zd, hasCacheEntryForValidation=%d)", buf, 0x56u);
  }
  if (*v4)
    WebKit::NetworkConnectionToWebProcess::addNetworkLoadInformationMetrics(*((_QWORD *)this + 482), *((_QWORD *)this + 379), (uint64_t)a2);
  v15 = (WebKit::NetworkCache::Entry *)*((_QWORD *)this + 534);
  if (!v15)
  {
    v16 = *(_QWORD *)(*((_QWORD *)this + 482) + 72);
    *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)this + 482) + 80);
    v17 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v16 + 208), buf);
    if (v17 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 88))(v17))
      WebKit::NetworkResourceLoader::logCookieInformation(this);
    v18 = (_QWORD *)*((_QWORD *)this + 519);
    v19 = *((_QWORD *)this + 517);
    if (v18)
    {
      if (v19)
      {
        do
          v63 = __ldaxr((unsigned int *)v19);
        while (__stlxr(v63 + 1, (unsigned int *)v19));
        WebKit::sendReplyToSynchronousRequest(v18, (WebCore::FragmentedSharedBuffer *)v19, (__int128 *)a2);
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v19, v64);
      }
      else
      {
        WebKit::sendReplyToSynchronousRequest(v18, 0, (__int128 *)a2);
      }
    }
    else
    {
      if (v19 && *(_QWORD *)(v19 + 48))
      {
        do
          v48 = __ldaxr((unsigned int *)v19);
        while (__stlxr(v48 + 1, (unsigned int *)v19));
        WebKit::NetworkResourceLoader::sendBuffer(this, (WebCore::SharedBuffer **)v19, -1);
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v19, v49);
      }
      v20 = (WebCore::ContentFilter *)*((_QWORD *)this + 599);
      if (v20)
      {
        v59 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebKit::NetworkResourceLoader *)((char *)this + 168));
        result = (uint64_t *)WebCore::ContentFilter::continueAfterNotifyFinished(v20, v59);
        if (!(_DWORD)result)
          return result;
        WebCore::ContentFilter::stopFilteringMainResource(*((WebCore::ContentFilter **)this + 599));
      }
      v21 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
      v22 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v22 = 2666;
      *(_QWORD *)(v22 + 8) = v21;
      *(_QWORD *)(v22 + 528) = v22 + 16;
      *(_QWORD *)(v22 + 536) = v22 + 16;
      *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v22 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
      *(_QWORD *)buf = v22;
      IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode((IPC::Encoder *)v22, (uint64_t *)a2);
      (*(void (**)(char *, _BYTE *, _QWORD))(*((_QWORD *)this + 2) + 32))((char *)this + 16, buf, 0);
      v24 = *(IPC::Encoder **)buf;
      *(_QWORD *)buf = 0;
      if (v24)
      {
        IPC::Encoder::~Encoder(v24, v23);
        WTF::fastFree(v25, v26);
      }
    }
    if (WebKit::NetworkResourceLoader::canUseCache(this, (const WebCore::ResourceRequest *)(*((_QWORD *)this + 483) + 3008)))
    {
      if (*((_QWORD *)this + 533))
      {
        if (WebKit::NetworkResourceLoader::isCrossOriginPrefetch(this))
        {
          v72 = *((_QWORD *)this + 482);
          v73 = *(_QWORD *)(v72 + 72);
          *(_QWORD *)buf = *(_QWORD *)(v72 + 80);
          v74 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v73 + 208), buf);
          if (v74)
          {
            v75 = v74;
            v76 = off_1ECE713E8;
            if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
            {
              v77 = *((_QWORD *)this + 10);
              v78 = *((_QWORD *)this + 11);
              v79 = *((_QWORD *)this + 12);
              v80 = *((_QWORD *)this + 379);
              v81 = *((unsigned __int8 *)this + 315) == 1;
              v82 = *((unsigned __int8 *)this + 3072);
              v83 = *((_QWORD *)this + 519) != 0;
              *(_DWORD *)buf = 134219776;
              *(_QWORD *)&buf[4] = this;
              v100 = 2048;
              v101 = v77;
              v102 = 2048;
              v103 = v78;
              v104 = 2048;
              v105 = v79;
              v106 = 2048;
              v107 = v80;
              v108 = 1024;
              v109 = v81;
              v110 = 1024;
              v111 = v82;
              v112 = 1024;
              v113 = v83;
              _os_log_impl(&dword_196BCC000, v76, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::tryStoreAsCacheEntry: Storing entry in prefetch cache", buf, 0x46u);
            }
            v84 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((_QWORD *)this + 483) + 3008));
            v85 = v4[576];
            WebCore::SharedBufferBuilder::take((WebKit::NetworkResourceLoader *)((char *)this + 4264));
            v86 = (uint64_t)v92;
            v92 = 0;
            *(_QWORD *)buf = v86;
            WebKit::PrefetchCache::store((uint64_t **)(v75 + 512), v84, (uint64_t)this + 3872, v85, (uint64_t *)buf);
            v88 = *(unsigned int **)buf;
            *(_QWORD *)buf = 0;
            if (v88)
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v88, v87);
            v92 = 0;
          }
        }
        else
        {
          v27 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v28 = *((_QWORD *)this + 10);
            v29 = *((_QWORD *)this + 11);
            v30 = *((_QWORD *)this + 12);
            v31 = *((_QWORD *)this + 379);
            v32 = *((unsigned __int8 *)this + 315) == 1;
            v33 = *((unsigned __int8 *)this + 3072);
            v34 = *((_QWORD *)this + 519) != 0;
            *(_DWORD *)buf = 134219776;
            *(_QWORD *)&buf[4] = this;
            v100 = 2048;
            v101 = v28;
            v102 = 2048;
            v103 = v29;
            v104 = 2048;
            v105 = v30;
            v106 = 2048;
            v107 = v31;
            v108 = 1024;
            v109 = v32;
            v110 = 1024;
            v111 = v33;
            v112 = 1024;
            v113 = v34;
            _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::tryStoreAsCacheEntry: Storing entry in HTTP disk cache", buf, 0x46u);
          }
          v35 = (WebKit::NetworkCache::Storage **)*((_QWORD *)this + 532);
          v36 = (WebKit::NetworkCache *)(*((_QWORD *)this + 483) + 3008);
          v37 = v4[576];
          WebCore::SharedBufferBuilder::take((WebKit::NetworkResourceLoader *)((char *)this + 4264));
          v38 = v96[0];
          v96[0] = 0;
          v92 = v38;
          ++*((_DWORD *)this + 2);
          v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v39 = &off_1E34C0460;
          v39[1] = this;
          v98 = v39;
          WebKit::NetworkCache::Cache::store(v36, (WebKit::NetworkResourceLoader *)((char *)this + 3872), v35, v37, (uint64_t *)&v92, (uint64_t *)&v98, (uint64_t *)buf);
          v41 = *(WebKit::NetworkCache::Entry **)buf;
          *(_QWORD *)buf = 0;
          if (v41)
          {
            WebKit::NetworkCache::Entry::~Entry(v41, v40);
            WTF::fastFree(v42, v43);
          }
          v44 = (uint64_t)v98;
          v98 = 0;
          if (v44)
            (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
          v45 = (unsigned int *)v92;
          v92 = 0;
          if (v45)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v45, v40);
          v46 = (unsigned int *)v96[0];
          v96[0] = 0;
          if (v46)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v46, v40);
        }
        goto LABEL_28;
      }
      v50 = off_1ECE713E8;
      if (!os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_28:
        if (*((_BYTE *)this + 3336) || *((_BYTE *)this + 3848))
        {
          v89 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 482) + 72) + 32);
          WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)buf, (uint64_t)this);
          v92 = 0;
          v93[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v93);
          v94[2] = 0;
          v94[0] = 0;
          *(_QWORD *)((char *)v94 + 6) = 0;
          v95 = 1;
          v96[0] = (uint64_t *)((char *)this + 80);
          v96[1] = (uint64_t *)buf;
          v96[2] = (uint64_t *)((char *)this + 3872);
          v96[3] = (uint64_t *)&v92;
          IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidCompleteWithError>(v89, v96);
          WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v92, v90);
          WebKit::ResourceLoadInfo::~ResourceLoadInfo((WebKit::ResourceLoadInfo *)buf, v91);
        }
        return WebKit::NetworkResourceLoader::cleanup((uint64_t)this, 1);
      }
      v65 = *((_QWORD *)this + 10);
      v66 = *((_QWORD *)this + 11);
      v67 = *((_QWORD *)this + 12);
      v68 = *((_QWORD *)this + 379);
      v69 = *((unsigned __int8 *)this + 315) == 1;
      v70 = *((unsigned __int8 *)this + 3072);
      v71 = *((_QWORD *)this + 519) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = this;
      v100 = 2048;
      v101 = v65;
      v102 = 2048;
      v103 = v66;
      v104 = 2048;
      v105 = v67;
      v106 = 2048;
      v107 = v68;
      v108 = 1024;
      v109 = v69;
      v110 = 1024;
      v111 = v70;
      v112 = 1024;
      v113 = v71;
      v58 = "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, is"
            "Synchronous=%d] NetworkResourceLoader::tryStoreAsCacheEntry: Not storing cache entry because m_bufferedDataForCache is null";
    }
    else
    {
      v50 = off_1ECE713E8;
      if (!os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_28;
      v51 = *((_QWORD *)this + 10);
      v52 = *((_QWORD *)this + 11);
      v53 = *((_QWORD *)this + 12);
      v54 = *((_QWORD *)this + 379);
      v55 = *((unsigned __int8 *)this + 315) == 1;
      v56 = *((unsigned __int8 *)this + 3072);
      v57 = *((_QWORD *)this + 519) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = this;
      v100 = 2048;
      v101 = v51;
      v102 = 2048;
      v103 = v52;
      v104 = 2048;
      v105 = v53;
      v106 = 2048;
      v107 = v54;
      v108 = 1024;
      v109 = v55;
      v110 = 1024;
      v111 = v56;
      v112 = 1024;
      v113 = v57;
      v58 = "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, is"
            "Synchronous=%d] NetworkResourceLoader::tryStoreAsCacheEntry: Not storing cache entry because request is not eligible";
    }
    _os_log_impl(&dword_196BCC000, v50, OS_LOG_TYPE_DEFAULT, v58, buf, 0x46u);
    goto LABEL_28;
  }
  *((_QWORD *)this + 534) = 0;
  v97 = v15;
  WebKit::NetworkResourceLoader::didRetrieveCacheEntry((uint64_t)this, &v97);
  result = (uint64_t *)v97;
  if (v97)
  {
    WebKit::NetworkCache::Entry::~Entry(v97, v60);
    return (uint64_t *)WTF::fastFree(v61, v62);
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::startNetworkLoad(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  uint64_t v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  const void *v20;
  const void *v21;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebKit::NetworkSession *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::RefCountedBase *v33;
  WTF::RefCountedBase *v34;
  const void *v35;
  CFTypeRef v36;
  WebKit::NetworkLoad *v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  WebKit::NetworkLoad *v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  _BOOL4 v50;
  uint64_t v51;
  char *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned int v55;
  unsigned int v56;
  CFTypeRef v57;
  CFTypeRef v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t result;
  const void *v62;
  CFTypeRef v63;
  char v64;
  void *v65;
  WTF *v66;
  _BYTE *v67;
  NSObject *v68;
  _BOOL8 v69;
  WTF *v70;
  uint64_t v71;
  WebCore::DiagnosticLoggingKeys *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL4 v92;
  int v93;
  _BOOL4 v94;
  char *v95;
  int v96;
  int v97;
  NSObject *log;
  WTF::StringImpl *v99;
  _BYTE *v100;
  uint64_t v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  char v104;
  _BYTE v105[12];
  __int16 v106;
  _BYTE v107[10];
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  _BOOL4 v114;
  __int16 v115;
  int v116;
  __int16 v117;
  _BOOL4 v118;
  __int16 v119;
  char *v120;
  _BYTE buf[32];
  _BYTE v122[32];
  _BYTE v123[22];
  CFTypeRef v124[19];
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::RefCountedBase *v127;
  uint64_t v128;
  char v129;
  CFTypeRef v130;
  _DWORD v131[4];
  _BYTE v132[2560];
  char v133;
  char v134;
  WTF *v135;
  _BYTE *v136;
  char v137;
  uint64_t v138;
  char v139;
  CFTypeRef cf;
  char v141;
  int v142;
  __int16 v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v6 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(a1 + 88);
    v9 = *(_QWORD *)(a1 + 96);
    v10 = *(_QWORD *)(a1 + 3032);
    v11 = *(unsigned __int8 *)(a1 + 315) == 1;
    v97 = *(unsigned __int8 *)(a1 + 3072);
    log = v6;
    v12 = *(_QWORD *)(a1 + 4152) != 0;
    WebCore::ResourceRequestBase::timeoutInterval((WebCore::ResourceRequestBase *)a2);
    *(_DWORD *)buf = 134220288;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v8;
    *(_WORD *)v122 = 2048;
    *(_QWORD *)&v122[2] = v9;
    *(_WORD *)&v122[10] = 2048;
    *(_QWORD *)&v122[12] = v10;
    *(_WORD *)&v122[20] = 1024;
    *(_DWORD *)&v122[22] = v11;
    *(_WORD *)&v122[26] = 1024;
    *(_DWORD *)&v122[28] = v97;
    *(_WORD *)v123 = 1024;
    *(_DWORD *)&v123[2] = v12;
    *(_WORD *)&v123[6] = 1024;
    *(_DWORD *)&v123[8] = a3;
    *(_WORD *)&v123[12] = 2048;
    *(_QWORD *)&v123[14] = v13;
    _os_log_impl(&dword_196BCC000, log, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startNetworkLoad: (isFirstLoad=%d, timeout=%f)", buf, 0x56u);
  }
  if (a3)
  {
    WebKit::NetworkResourceLoader::consumeSandboxExtensions((WebKit::NetworkResourceLoader *)a1);
    if (*(_QWORD *)(a1 + 4152) || *(double *)(a1 + 3064) > 0.0)
      WebCore::SharedBufferBuilder::empty((WebCore::SharedBufferBuilder *)(a1 + 4136));
    if (WebKit::NetworkResourceLoader::canUseCache((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceRequest *)a2))
    {
      WebCore::SharedBufferBuilder::empty((WebCore::SharedBufferBuilder *)(a1 + 4264));
    }
  }
  v14 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&buf[16] = v14;
  v15 = *(unsigned int **)(a1 + 112);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *(_QWORD *)v122 = v15;
  v17 = *(unsigned int **)(a1 + 120);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)&v122[8] = v17;
  v19 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)&v122[16] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)v123 = v19;
  *(_QWORD *)&v123[13] = *(_QWORD *)(a1 + 157);
  WebCore::ResourceRequest::ResourceRequest(v124, (const WebCore::ResourceRequest *)(a1 + 168));
  *(_DWORD *)((char *)v131 + 3) = *(_DWORD *)(a1 + 371);
  v131[0] = *(_DWORD *)(a1 + 368);
  v132[0] = 0;
  v133 = 0;
  if (*(_BYTE *)(a1 + 2944))
  {
    WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)v132, (const WebKit::NavigationActionData *)(a1 + 384));
    v133 = 1;
  }
  v134 = *(_BYTE *)(a1 + 2960);
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v135, a1 + 2968);
  v137 = *(_BYTE *)(a1 + 2984);
  LOBYTE(v138) = 0;
  v141 = 0;
  if (*(_BYTE *)(a1 + 3016))
  {
    v138 = *(_QWORD *)(a1 + 2992);
    v139 = *(_BYTE *)(a1 + 3000);
    v20 = *(const void **)(a1 + 3008);
    cf = v20;
    if (v20)
      CFRetain(v20);
    v141 = 1;
    v142 = *(_DWORD *)(a1 + 3024);
    v143 = *(_WORD *)(a1 + 3028);
    if (*(_BYTE *)(a1 + 4368))
    {
      v138 = *(_QWORD *)(a1 + 4344);
      v139 = *(_BYTE *)(a1 + 4352);
      v21 = *(const void **)(a1 + 4360);
      if (v21)
        CFRetain(*(CFTypeRef *)(a1 + 4360));
      v22 = cf;
      cf = v21;
      if (v22)
        CFRelease(v22);
    }
    else
    {
      v63 = cf;
      cf = 0;
      if (v63)
        CFRelease(v63);
      v141 = 0;
    }
  }
  else
  {
    v142 = *(_DWORD *)(a1 + 3024);
    v143 = *(_WORD *)(a1 + 3028);
    if (*(_BYTE *)(a1 + 4368))
    {
      v138 = *(_QWORD *)(a1 + 4344);
      v139 = *(_BYTE *)(a1 + 4352);
      v62 = *(const void **)(a1 + 4360);
      cf = v62;
      if (v62)
        CFRetain(v62);
      v141 = 1;
    }
  }
  if (BYTE2(v131[0]) == 1)
  {
    v23 = *(_QWORD *)(a1 + 4304);
    if (v23)
      BYTE2(v131[0]) = *(_BYTE *)(v23 + 64);
  }
  v24 = *(_QWORD *)(a1 + 3856);
  v25 = *(_QWORD *)(v24 + 72);
  *(_QWORD *)v105 = *(_QWORD *)(v24 + 80);
  v26 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v25 + 208), v105);
  if (v26)
  {
    v27 = (WebKit::NetworkSession *)v26;
    WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
    if (WTF::URL::protocolIs())
    {
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 168));
      v64 = v122[0];
      v105[0] = 0;
      if (*(_QWORD *)v122)
      {
        LODWORD(v108) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v105, *(_QWORD *)v122 + 8);
        v64 = 1;
      }
      LOBYTE(v109) = v64;
      WebCore::BlobRegistryImpl::filesInBlob();
      if (HIDWORD(v136))
        WTF::VectorTypeOperations<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>::destruct(v135, (_DWORD **)v135 + HIDWORD(v136));
      v66 = v135;
      if (v135)
      {
        v135 = 0;
        LODWORD(v136) = 0;
        WTF::fastFree(v66, v65);
      }
      v135 = v99;
      v67 = v100;
      v99 = 0;
      v100 = 0;
      v136 = v67;
      WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v99, v65);
      if ((_BYTE)v109 && (_DWORD)v108 != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34C0170[v108])(&v103, v105);
    }
    if (!*(_BYTE *)(a1 + 3336) && !*(_BYTE *)(a1 + 3848))
      goto LABEL_30;
    LOBYTE(v103) = 0;
    v104 = 0;
    WebCore::ResourceRequestBase::httpBody((WebCore::ResourceRequestBase *)a2);
    if (*(_QWORD *)v105)
    {
      v81 = WebCore::FormData::lengthInBytes(*(WebCore::FormData **)v105);
      v82 = *(WTF::StringImpl **)v105;
      if (v81 > 0x100000)
        goto LABEL_111;
      *(_QWORD *)v105 = 0;
      if (v104)
      {
        v83 = v103;
        v103 = v82;
        if (v83)
        {
          WTF::RefCounted<WebCore::FormData>::deref(v83);
          v82 = *(WTF::StringImpl **)v105;
LABEL_111:
          *(_QWORD *)v105 = 0;
          if (v82)
            WTF::RefCounted<WebCore::FormData>::deref(v82);
        }
      }
      else
      {
        v103 = v82;
        v104 = 1;
      }
    }
    v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3856) + 72) + 32);
    WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)v105, a1);
    v99 = (WTF::StringImpl *)(a1 + 80);
    v100 = v105;
    v101 = a2;
    v102 = &v103;
    IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidSendRequest>(v84, (uint64_t **)&v99);
    WebKit::ResourceLoadInfo::~ResourceLoadInfo((WebKit::ResourceLoadInfo *)v105, v85);
    if (v104)
    {
      v86 = v103;
      v103 = 0;
      if (v86)
        WTF::RefCounted<WebCore::FormData>::deref(v86);
    }
LABEL_30:
    if (*((_BYTE *)v27 + 718))
    {
      v77 = *(_QWORD *)(a1 + 3856);
      v78 = *(_QWORD *)(*(_QWORD *)(v77 + 72) + 32);
      v99 = *(WTF::StringImpl **)(v77 + 80);
      v79 = *(_BYTE *)(a2 + 148);
      v80 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
      *(_QWORD *)v105 = &v99;
      v105[8] = (v79 & 0x40) != 0;
      *(_QWORD *)&v107[2] = v80;
      IPC::Connection::send<Messages::NetworkProcessProxy::DidAllowPrivateTokenUsageByThirdPartyForTesting>(v78, (uint64_t **)v105);
    }
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v124, a2);
    v29 = *(WTF::StringImpl **)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;
    v30 = v125;
    v125 = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = *(WTF::StringImpl **)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    v32 = v126;
    v126 = v31;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v28);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = *(WTF::RefCountedBase **)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    v34 = v127;
    v127 = v33;
    if (v34)
      WTF::RefCounted<WebCore::FormData>::deref(v34);
    v128 = *(_QWORD *)(a2 + 176);
    v129 = *(_BYTE *)(a2 + 184);
    v35 = *(const void **)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    v36 = v130;
    v130 = v35;
    if (v36)
      CFRelease(v36);
    LOWORD(v142) = *(_WORD *)(a1 + 3024);
    v37 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xC90);
    WebKit::NetworkLoad::NetworkLoad((uint64_t)v37, a1, (uint64_t)buf, v27);
    v38 = (uint64_t *)(a1 + 3864);
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3864), v37);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1 + 48);
    v39 = *(_QWORD *)(a1 + 56);
    if (v39)
    {
      do
        v40 = __ldaxr((unsigned int *)v39);
      while (__stlxr(v40 + 1, (unsigned int *)v39));
    }
    v41 = *(WebKit::NetworkLoad **)(a1 + 3864);
    if (*(_QWORD *)(a1 + 4152))
      WebKit::NetworkLoad::start(v41);
    else
      WebKit::NetworkLoad::startWithScheduling((unsigned int *)v41);
    if (v39)
    {
      if (*(_QWORD *)(v39 + 8))
      {
        v43 = *v38;
        if (*v38)
        {
          v44 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v45 = *(_QWORD *)(a1 + 80);
            v46 = *(_QWORD *)(a1 + 88);
            v47 = *(_QWORD *)(a1 + 96);
            v48 = *(_QWORD *)(a1 + 3032);
            v49 = *(unsigned __int8 *)(a1 + 315) == 1;
            v96 = *(unsigned __int8 *)(a1 + 3072);
            v50 = *(_QWORD *)(a1 + 4152) != 0;
            v51 = *(_QWORD *)(v43 + 2992);
            if (v51)
            {
              (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v51 + 64))(&v103);
            }
            else
            {
              v87 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
              if (*MEMORY[0x1E0CBF738])
                *(_DWORD *)v87 += 2;
              v103 = v87;
            }
            WTF::String::utf8();
            if (v99)
              v52 = (char *)v99 + 16;
            else
              v52 = 0;
            *(_DWORD *)v105 = 134220034;
            *(_QWORD *)&v105[4] = a1;
            v106 = 2048;
            *(_QWORD *)v107 = v45;
            *(_WORD *)&v107[8] = 2048;
            v108 = v46;
            v109 = 2048;
            v110 = v47;
            v111 = 2048;
            v112 = v48;
            v113 = 1024;
            v114 = v49;
            v115 = 1024;
            v116 = v96;
            v117 = 1024;
            v118 = v50;
            v119 = 2082;
            v120 = v52;
            _os_log_impl(&dword_196BCC000, v44, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startNetworkLoad: Going to the network (description=%{public}s)", v105, 0x50u);
            v53 = v99;
            v99 = 0;
            if (v53)
            {
              if (*(_DWORD *)v53 == 1)
                WTF::fastFree(v53, v42);
              else
                --*(_DWORD *)v53;
            }
            v54 = v103;
            v103 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2)
                WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v42);
              else
                *(_DWORD *)v54 -= 2;
            }
          }
        }
      }
      do
      {
        v55 = __ldaxr((unsigned int *)v39);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, (unsigned int *)v39));
      if (!v56)
      {
        atomic_store(1u, (unsigned int *)v39);
        WTF::fastFree((WTF *)v39, v42);
      }
    }
    goto LABEL_64;
  }
  WTFLogAlways();
  v68 = off_1ECE713E8;
  v69 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR);
  if (v69)
  {
    v88 = *(_QWORD *)(a1 + 80);
    v89 = *(_QWORD *)(a1 + 88);
    v90 = *(_QWORD *)(a1 + 96);
    v91 = *(_QWORD *)(a1 + 3032);
    v92 = *(unsigned __int8 *)(a1 + 315) == 1;
    v93 = *(unsigned __int8 *)(a1 + 3072);
    v94 = *(_QWORD *)(a1 + 4152) != 0;
    v95 = *(char **)(*(_QWORD *)(a1 + 3856) + 80);
    *(_DWORD *)v105 = 134220032;
    *(_QWORD *)&v105[4] = a1;
    v106 = 2048;
    *(_QWORD *)v107 = v88;
    *(_WORD *)&v107[8] = 2048;
    v108 = v89;
    v109 = 2048;
    v110 = v90;
    v111 = 2048;
    v112 = v91;
    v113 = 1024;
    v114 = v92;
    v115 = 1024;
    v116 = v93;
    v117 = 1024;
    v118 = v94;
    v119 = 2048;
    v120 = v95;
    _os_log_error_impl(&dword_196BCC000, v68, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startNetworkLoad: Attempted to create a NetworkLoad for a session that does not exist (sessionID=%llu)", v105, 0x50u);
  }
  v70 = *(WTF **)(*(_QWORD *)(a1 + 3856) + 72);
  v71 = *(_QWORD *)(a1 + 80);
  v72 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::internalErrorKey((WebCore::DiagnosticLoggingKeys *)v69);
  WebCore::DiagnosticLoggingKeys::invalidSessionIDKey(v72);
  WebKit::NetworkProcess::logDiagnosticMessage(v70, v71, (uint64_t *)v105, (uint64_t *)&v99, 0);
  v74 = v99;
  v99 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v73);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = *(WTF::StringImpl **)v105;
  *(_QWORD *)v105 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v73);
    else
      *(_DWORD *)v75 -= 2;
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
  WebCore::createInternalError();
  WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)v105);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v105, v76);
LABEL_64:
  if (v141)
  {
    v57 = cf;
    cf = 0;
    if (v57)
      CFRelease(v57);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v135, v42);
  if (v133)
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v132);
  v58 = v130;
  v130 = 0;
  if (v58)
    CFRelease(v58);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v124);
  v60 = *(_QWORD *)&v122[8];
  *(_QWORD *)&v122[8] = 0;
  if (v60)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v60, v59);
  result = *(_QWORD *)v122;
  *(_QWORD *)v122 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, v59);
  return result;
}

uint64_t *WebKit::NetworkResourceLoader::cleanup(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;
  WebKit::SandboxExtension *v14;
  uint64_t v15;
  WTF **v17;
  WTF *v18;
  WebKit::SandboxExtension **v19;
  uint64_t v20;
  WebKit::SandboxExtension *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  int v38;
  __int16 v39;
  _BOOL4 v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(_QWORD *)(a1 + 3032);
    v9 = *(unsigned __int8 *)(a1 + 315) == 1;
    v10 = *(unsigned __int8 *)(a1 + 3072);
    v11 = *(_QWORD *)(a1 + 4152) != 0;
    v25 = 134220032;
    v26 = a1;
    v27 = 2048;
    v28 = v5;
    v29 = 2048;
    v30 = v6;
    v31 = 2048;
    v32 = v7;
    v33 = 2048;
    v34 = v8;
    v35 = 1024;
    v36 = v9;
    v37 = 1024;
    v38 = v10;
    v39 = 1024;
    v40 = v11;
    v41 = 1024;
    v42 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::cleanup: (result=%u)", (uint8_t *)&v25, 0x4Cu);
  }
  WebKit::NetworkConnectionToWebProcess::stopTrackingResourceLoad(*(_QWORD *)(a1 + 3856), *(_QWORD *)(a1 + 3032));
  if ((*(_QWORD *)(a1 + 4232) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 4200));
  if (*(_BYTE *)(a1 + 4177))
  {
    v13 = *(unsigned int *)(a1 + 3052);
    if ((_DWORD)v13)
    {
      v19 = *(WebKit::SandboxExtension ***)(a1 + 3040);
      v20 = 8 * v13;
      do
      {
        v21 = *v19++;
        WebKit::SandboxExtension::revoke(v21);
        v20 -= 8;
      }
      while (v20);
    }
    v14 = *(WebKit::SandboxExtension **)(a1 + 3056);
    if (v14)
      WebKit::SandboxExtension::revoke(v14);
    v15 = *(unsigned int *)(a1 + 4172);
    if ((_DWORD)v15)
    {
      v22 = *(uint64_t **)(a1 + 4160);
      v23 = 8 * v15;
      do
      {
        v24 = *v22++;
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
        v23 -= 8;
      }
      while (v23);
    }
    *(_BYTE *)(a1 + 4177) = 0;
  }
  if (*(_DWORD *)(a1 + 4168))
  {
    v17 = (WTF **)(a1 + 4160);
    if (*(_DWORD *)(a1 + 4172))
      WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((_DWORD *)(a1 + 4160));
    v18 = *v17;
    if (*v17)
    {
      *(_QWORD *)(a1 + 4160) = 0;
      *(_DWORD *)(a1 + 4168) = 0;
      WTF::fastFree(v18, v12);
    }
  }
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3864), 0);
  return WebKit::NetworkConnectionToWebProcess::didCleanupResourceLoader(*(WebKit::NetworkProcess ***)(a1 + 3856), (WebKit::NetworkResourceLoader *)a1);
}

uint64_t *WebKit::NetworkConnectionToWebProcess::didCleanupResourceLoader(WebKit::NetworkProcess **this, WebKit::NetworkResourceLoader *a2)
{
  WTF::RunLoop *v4;

  if (!*((_QWORD *)a2 + 379))
  {
    __break(0xC471u);
    JUMPOUT(0x196D0CD28);
  }
  v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196D0CD48);
  }
  if (*((_BYTE *)a2 + 4329))
    return WebKit::NetworkProcess::removeKeptAliveLoad(this[9], a2);
  else
    return (uint64_t *)WebKit::NetworkResourceLoadMap::remove((uint64_t)(this + 12), *((_QWORD *)a2 + 379));
}

void WebKit::NetworkActivityTracker::complete(uint64_t a1)
{
  const void *v2;

  if (!*(_BYTE *)(a1 + 8))
  {
    *(_BYTE *)(a1 + 8) = 1;
    nw_activity_complete_with_reason();
    v2 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v2)
      CFRelease(v2);
  }
}

void WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::move(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  const void *v8;
  const void *v9;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_BYTE *)(a3 + 16) = *((_BYTE *)v5 + 16);
      *(_OWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 3);
      *(_BYTE *)(a3 + 32) = *((_BYTE *)v5 + 32);
      *(_QWORD *)(a3 + 24) = v7;
      v8 = (const void *)*((_QWORD *)v5 + 5);
      *(_QWORD *)(a3 + 40) = v8;
      if (v8)
        CFRetain(v8);
      v9 = (const void *)*((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v9)
        CFRelease(v9);
      v5 += 3;
      a3 += 48;
    }
    while (v5 != a2);
  }
}

void WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::moveOverlapping(__int128 *a1, __int128 *a2, unint64_t a3)
{
  __int128 *v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  const void *v8;
  const void *v9;

  v3 = a2;
  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      v5 = a3 + 48 * (((char *)a2 - (char *)a1) / 48) - 24;
      do
      {
        v6 = *(v3 - 3);
        *(_BYTE *)(v5 - 8) = *((_BYTE *)v3 - 32);
        *(_OWORD *)(v5 - 24) = v6;
        v7 = *((_QWORD *)v3 - 3);
        *(_BYTE *)(v5 + 8) = *((_BYTE *)v3 - 16);
        *(_QWORD *)v5 = v7;
        v8 = (const void *)*((_QWORD *)v3 - 1);
        *(_QWORD *)(v5 + 16) = v8;
        if (v8)
          CFRetain(v8);
        v9 = (const void *)*((_QWORD *)v3 - 1);
        *((_QWORD *)v3 - 1) = 0;
        if (v9)
          CFRelease(v9);
        v3 -= 3;
        v5 -= 48;
      }
      while (v3 != a1);
    }
  }
  else
  {
    WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::move(a1, a2, a3);
  }
}

unsigned int *WebCore::SharedBufferBuilder::empty(WebCore::SharedBufferBuilder *this)
{
  void *v2;
  unsigned int *result;
  uint64_t v4;

  WebCore::FragmentedSharedBuffer::create(this);
  result = *(unsigned int **)this;
  *(_QWORD *)this = v4;
  if (result)
  {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v2);
    return 0;
  }
  return result;
}

uint64_t WebKit::NetworkLoad::NetworkLoad(uint64_t a1, uint64_t a2, uint64_t a3, WebKit::NetworkSession *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebKit::NetworkDataTaskCocoa *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1E34BDCB0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v6 = *((_QWORD *)a4 + 4);
  v7 = (unsigned int *)(v6 + 120);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(a1 + 24) = v6;
  WebKit::NetworkLoadParameters::NetworkLoadParameters(a1 + 32, a3);
  *(_OWORD *)(a1 + 2992) = 0u;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 3008), (const WebCore::ResourceRequest *)(a1 + 120));
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 120));
  if (WTF::URL::protocolIs())
  {
    v13 = WTF::fastMalloc((WTF *)0x2C8);
    v10 = WebKit::NetworkDataTaskBlob::NetworkDataTaskBlob(v13, (uint64_t)a4, a1, (WebCore::ResourceRequestBase *)(a1 + 120), a1 + 2920, (uint64_t *)(a1 + 64));
  }
  else
  {
    v9 = (WebKit::NetworkDataTaskCocoa *)WTF::fastMalloc((WTF *)0x318);
    v10 = (uint64_t)WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(v9, a4, (WebKit::NetworkDataTaskClient *)a1, (const WebKit::NetworkLoadParameters *)(a1 + 32));
  }
  v11 = *(_QWORD *)(a1 + 2992);
  *(_QWORD *)(a1 + 2992) = v10;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v11 + 8));
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = v3;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v5;
    *(_QWORD *)v2 = v6;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(uint64_t **)a2;
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
          ++*(_DWORD *)(v10 + 8);
        *v6++ = v10;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::NetworkResourceLoader::consumeSandboxExtensions(WebKit::NetworkResourceLoader *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  WebKit::SandboxExtension **v5;
  uint64_t v6;
  WebKit::SandboxExtension *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((unsigned int *)this + 763);
  if ((_DWORD)v2)
  {
    v5 = (WebKit::SandboxExtension **)*((_QWORD *)this + 380);
    v6 = 8 * v2;
    do
    {
      v7 = *v5++;
      WebKit::SandboxExtension::consume(v7);
      v6 -= 8;
    }
    while (v6);
  }
  result = *((_QWORD *)this + 382);
  if (result)
    result = WebKit::SandboxExtension::consume((WebKit::SandboxExtension *)result);
  v4 = *((unsigned int *)this + 1043);
  if ((_DWORD)v4)
  {
    v8 = (uint64_t *)*((_QWORD *)this + 520);
    v9 = 8 * v4;
    do
    {
      v10 = *v8++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v9 -= 8;
    }
    while (v9);
  }
  *((_BYTE *)this + 4177) = 1;
  return result;
}

void WebKit::NetworkLoad::~NetworkLoad(WebKit::NetworkLoad *this, void *a2)
{
  uint64_t v3;
  WTF ***v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  v3 = *((_QWORD *)this + 375);
  if (v3)
  {
    v4 = *(WTF ****)(v3 + 8);
    if (v4)
      WebKit::NetworkLoadScheduler::unschedule(v4, this, 0);
  }
  v5 = *((_QWORD *)this + 374);
  if (v5)
  {
    v6 = *(unsigned int **)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  v9 = (const void *)*((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkLoad *)((char *)this + 3008));
  v11 = (unsigned int *)*((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  v14 = *((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = 0;
  if (v14)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v14 + 8));
  if (*((_BYTE *)this + 2968))
  {
    v15 = (const void *)*((_QWORD *)this + 370);
    *((_QWORD *)this + 370) = 0;
    if (v15)
      CFRelease(v15);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2920, v10);
  if (*((_BYTE *)this + 2896))
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NetworkLoad *)((char *)this + 336));
  v16 = (const void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v16)
    CFRelease(v16);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkLoad *)((char *)this + 120));
  v18 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v18)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v18, v17);
  v19 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v19)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, v17);
  v20 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v20)
  {
    v21 = v20 + 30;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v20 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v17);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkLoad::~NetworkLoad(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::NetworkDataTaskCocoa::description(id *this)
{
  objc_msgSend(this[76], "description");
  JUMPOUT(0x19AEABCC8);
}

unsigned int *WebKit::NetworkLoadScheduler::schedule(WebKit::NetworkLoadScheduler *this, WebKit::NetworkLoad *a2)
{
  if (WebCore::ResourceRequestBase::isTopSite((WebKit::NetworkLoad *)((char *)a2 + 3008)))
    return (unsigned int *)WebKit::NetworkLoadScheduler::scheduleMainResourceLoad(this, a2);
  else
    return WebKit::NetworkLoadScheduler::scheduleLoad(this, (unsigned int **)a2);
}

unsigned int *WebKit::NetworkLoadScheduler::scheduleLoad(WebKit::NetworkLoadScheduler *this, unsigned int **a2)
{
  uint64_t *v3;
  unsigned int *result;

  v3 = WebKit::NetworkLoadScheduler::contextForLoad(this, (const WebKit::NetworkLoad *)a2);
  if (v3)
    return WebKit::NetworkLoadScheduler::HostContext::schedule((WebKit::NetworkLoadScheduler::HostContext *)v3, (WebKit::NetworkLoad *)a2);
  result = a2[374];
  if (result)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t *WebKit::NetworkLoadScheduler::contextForLoad(WebKit::NetworkLoadScheduler *this, const WebKit::NetworkLoad *a2)
{
  WebCore::ResourceRequestBase *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  WTF::URL *v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int i;
  unsigned int v24;
  WTF::StringImpl **v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WebKit::NetworkLoad *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;

  v4 = (const WebKit::NetworkLoad *)((char *)a2 + 120);
  if ((*(_BYTE *)(WebCore::ResourceRequestBase::url((const WebKit::NetworkLoad *)((char *)a2 + 120)) + 8) & 2) == 0)
    return 0;
  v5 = *((_QWORD *)this + 1);
  if (!v5)
    return 0;
  v6 = *((_QWORD *)a2 + 5);
  v7 = *(_DWORD *)(v5 - 8);
  v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(_QWORD *)(v5 + 16 * v11);
  if (v12 != v6)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(_QWORD *)(v5 + 16 * v11);
      ++v13;
      if (v12 == v6)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  v14 = *(uint64_t **)(v5 + 16 * v11 + 8);
  if (!v14)
    return v14;
  v15 = (WTF::URL *)WebCore::ResourceRequestBase::url(v4);
  WTF::URL::host(v15);
  if ((v16 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v18 = *v14;
  if (*v14
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v14, 0), (v18 = *v14) != 0))
  {
    v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = *((_DWORD *)v37 + 4);
  if (v20 >= 0x100)
    v21 = v20 >> 8;
  else
    v21 = WTF::StringImpl::hashSlowCase(v37);
  v22 = 0;
  for (i = 1; ; ++i)
  {
    v24 = v21 & v19;
    v25 = (WTF::StringImpl **)(v18 + 16 * (v21 & v19));
    v26 = *v25;
    if (*v25 == (WTF::StringImpl *)-1)
    {
      v22 = (WTF::StringImpl **)(v18 + 16 * v24);
      goto LABEL_21;
    }
    if (!v26)
      break;
    if ((WTF::equal(v26, v37, v17) & 1) != 0)
      goto LABEL_33;
LABEL_21:
    v21 = i + v24;
  }
  if (v22)
  {
    *v22 = 0;
    v22[1] = 0;
    --*(_DWORD *)(*v14 - 16);
    v25 = v22;
  }
  WTF::String::operator=(v25, (WTF::StringImpl *)&v37);
  v29 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)v29 = 0u;
  *((_OWORD *)v29 + 1) = 0u;
  *((_OWORD *)v29 + 2) = 0u;
  std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>::reset[abi:sn180100](v25 + 1, v29);
  v30 = *v14;
  if (*v14)
    v31 = *(_DWORD *)(v30 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(v30 - 12) = v31;
  v32 = *v14;
  if (*v14)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 <= 2 * v34)
LABEL_32:
      v25 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v14, v25);
  }
  else if (3 * v35 <= 4 * v34)
  {
    goto LABEL_32;
  }
LABEL_33:
  v14 = (uint64_t *)v25[1];
  v36 = v37;
  v37 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v27);
    else
      *(_DWORD *)v36 -= 2;
  }
  return v14;
}

unsigned int *WebKit::NetworkLoadScheduler::HostContext::schedule(WebKit::NetworkLoadScheduler::HostContext *this, WebKit::NetworkLoad *a2)
{
  WebCore::ResourceRequestBase *v4;
  void *v5;
  unsigned int *result;
  _BYTE v7[24];

  v4 = (WebKit::NetworkLoad *)((char *)a2 + 3008);
  if (WebCore::ResourceRequestBase::priority((WebKit::NetworkLoad *)((char *)a2 + 3008)) <= 1
    && (WebCore::ResourceRequestBase::isConditional(v4) & 1) == 0
    && WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this, v5) > 1)
  {
    return WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>((uint64_t)this + 16, (uint64_t)a2, (uint64_t)v7);
  }
  WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>((uint64_t)this, (unsigned int *)a2, (uint64_t)v7);
  result = (unsigned int *)*((_QWORD *)a2 + 374);
  if (result)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t WebKit::NetworkLoadScheduler::HostContext::start(WebKit::NetworkLoadScheduler::HostContext *this, WebKit::NetworkLoad *a2)
{
  uint64_t result;
  _BYTE v4[24];

  WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>((uint64_t)this, (unsigned int *)a2, (uint64_t)v4);
  result = *((_QWORD *)a2 + 374);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void WebKit::NetworkDataTaskCocoa::resume(WebKit::NetworkDataTaskCocoa *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  const void *v20;
  os_signpost_id_t v21;
  const void *v22;
  uint8_t buf[8];
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (kdebug_is_enabled())
  {
    v16 = *MEMORY[0x1E0CBE150];
    v17 = WTFSignpostLogHandle();
    v18 = v17;
    if (v16)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *((_QWORD *)this + 76);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = 0;
        v24 = 1024;
        v25 = 0;
        v26 = 2048;
        v27 = v19;
        v28 = 2048;
        v29 = WTFCurrentContinuousTime();
        _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu resume", buf, 0x22u);
      }
    }
    else
    {
      v20 = (const void *)*((_QWORD *)this + 76);
      if (v20)
      {
        v21 = os_signpost_id_make_with_pointer(v17, v20);
        if (v21 - 1 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_2;
      }
      else
      {
        v21 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v18))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_196BCC000, v18, OS_SIGNPOST_EVENT, v21, "DataTask", "resume", buf, 2u);
      }
    }
  }
LABEL_2:
  if (!*((_BYTE *)this + 545))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      v3 = *(_QWORD *)(v2 + 8);
    else
      v3 = 0;
    if (*(_BYTE *)(v3 + 944) && *((_BYTE *)this + 776))
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 1);
      v4 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
      v5 = v4;
      v6 = MEMORY[0x1E0C809A0];
      *v4 = MEMORY[0x1E0C809A0];
      v4[1] = 50331650;
      v4[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_0>(WebKit::NetworkDataTaskCocoa::resume(void)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
      v4[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_0>(WebKit::NetworkDataTaskCocoa::resume(void)::$_0)::descriptor;
      v4[4] = this;
      v4[5] = this;
      if (*(_BYTE *)(v3 + 945))
      {
        v4[5] = 0;
        v7 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v7 = &off_1E34B5C00;
        *(_QWORD *)(v7 + 8) = this;
        *(_QWORD *)(v7 + 16) = this;
        *(_BYTE *)(v7 + 24) = 1;
        *(_QWORD *)buf = v7;
        WTF::callOnMainRunLoop();
        v8 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      else
      {
        v9 = (void *)objc_msgSend((id)objc_msgSend(*((id *)this + 76), "currentRequest"), "URL");
        v10 = v9;
        if (v9)
          v9 = (void *)CFRetain(v9);
        v11 = *(void **)(v3 + 936);
        if (!v11)
        {
          v11 = (void *)objc_msgSend(objc_alloc((Class)WebKit::getDMFWebsitePolicyMonitorClass((WebKit *)v9)), "initWithPolicyChangeHandler:", 0);
          v12 = *(const void **)(v3 + 936);
          *(_QWORD *)(v3 + 936) = v11;
          if (v12)
          {
            CFRelease(v12);
            v11 = *(void **)(v3 + 936);
          }
        }
        v22 = v10;
        v13 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v22, 1);
        v14 = _Block_copy(v5);
        if (v10)
          CFRetain(v10);
        v15 = malloc_type_malloc(0x30uLL, 0x10E004016A945A2uLL);
        *v15 = v6;
        v15[1] = 50331650;
        v15[2] = WTF::BlockPtr<void ()(NSDictionary<NSURL *,NSNumber *> *,NSError *)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_1>(WebKit::NetworkDataTaskCocoa::resume(void)::$_1)::{lambda(void *,NSDictionary<NSURL *,NSNumber *> *,NSError *)#1}::__invoke;
        v15[3] = &WTF::BlockPtr<void ()(NSDictionary<NSURL *,NSNumber *> *,NSError *)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_1>(WebKit::NetworkDataTaskCocoa::resume(void)::$_1)::descriptor;
        v15[4] = v14;
        v15[5] = v10;
        _Block_release(0);
        objc_msgSend(v11, "requestPoliciesForWebsites:completionHandler:", v13, v15);
        _Block_release(v15);
        _Block_release(0);
        if (v10)
          CFRelease(v10);
      }
      _Block_release(v5);
    }
    else
    {
      objc_msgSend(*((id *)this + 76), "resume");
    }
  }
}

void sub_196D0DA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  const void *v11;
  const void *v12;
  const void *v13;

  _Block_release(v13);
  _Block_release(0);
  if (v12)
    CFRelease(v12);
  _Block_release(v11);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::NetworkLoad::startWithScheduling(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *Scheduler;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WebKit::NetworkLoadScheduler *v11;

  v1 = *((_QWORD *)this + 374);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    if (v2)
    {
      v3 = this;
      this = *(unsigned int **)(v2 + 8);
      if (this)
      {
        Scheduler = (unsigned int *)WebKit::NetworkSession::networkLoadScheduler((WebKit::NetworkSession *)this);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Scheduler, (uint64_t)Scheduler);
        v6 = *(_QWORD *)Scheduler;
        if (*(_QWORD *)Scheduler)
        {
          do
            v7 = __ldaxr((unsigned int *)v6);
          while (__stlxr(v7 + 1, (unsigned int *)v6));
        }
        v8 = (unsigned int *)*((_QWORD *)v3 + 375);
        *((_QWORD *)v3 + 375) = v6;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, v5);
          }
          v6 = *((_QWORD *)v3 + 375);
        }
        if (v6)
          v11 = *(WebKit::NetworkLoadScheduler **)(v6 + 8);
        else
          v11 = 0;
        return WebKit::NetworkLoadScheduler::schedule(v11, (WebKit::NetworkLoad *)v3);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::NetworkLoadScheduler::unschedule(WTF ***this, WebKit::NetworkLoad *a2, const WTF::String **a3)
{
  WTF::StringImpl *result;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  WebKit::NetworkLoad *v16;
  uint64_t v17;
  uint64_t v18;

  if (WebCore::ResourceRequestBase::isTopSite((WebKit::NetworkLoad *)((char *)a2 + 3008)))
    return WebKit::NetworkLoadScheduler::unscheduleMainResourceLoad(this, a2, a3);
  result = (WTF::StringImpl *)WebKit::NetworkLoadScheduler::contextForLoad((WebKit::NetworkLoadScheduler *)this, a2);
  if (result)
  {
    v8 = (uint64_t)result;
    v9 = *((_DWORD *)result + 3);
    v10 = *((_DWORD *)result + 2) + 1;
    *((_DWORD *)result + 2) = v10;
    if (v10 > v9)
    {
      _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN6WebKit11NetworkLoadES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((unsigned int **)result, v7);
      *(_DWORD *)(v8 + 8) = 0;
      v17 = *(_QWORD *)v8;
      if (*(_QWORD *)v8)
      {
        LODWORD(v17) = *(_DWORD *)(v17 - 12);
        if (v17 > 0x7FFFFFFE)
          LODWORD(v17) = 0x7FFFFFFF;
      }
      *(_DWORD *)(v8 + 12) = 2 * v17;
    }
    v11 = *((_QWORD *)a2 + 1);
    if (v11 && *(_QWORD *)(v11 + 8))
    {
      v18 = *((_QWORD *)a2 + 1);
      v12 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)v8, &v18);
      if (*(_QWORD *)v8)
      {
        v13 = *(_QWORD *)v8 + 8 * *(unsigned int *)(*(_QWORD *)v8 - 4);
        if ((unsigned int **)v13 == v12)
          goto LABEL_11;
      }
      else
      {
        if (!v12)
          goto LABEL_11;
        v13 = 0;
      }
      if ((unsigned int **)v13 != v12)
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)v8, v12);
    }
LABEL_11:
    WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::NetworkLoad>(v8 + 16, (uint64_t)a2);
    result = (WTF::StringImpl *)WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(v8, v14);
    if (result <= 1)
    {
      v15 = *(uint64_t **)(v8 + 24);
      if (v15)
      {
        while (1)
        {
          v16 = *(WebKit::NetworkLoad **)(*v15 + 8);
          if (v16)
            break;
          v15 = (uint64_t *)v15[2];
          if (!v15)
            return result;
        }
        WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(v8 + 16, v8 + 16, v15);
        return (WTF::StringImpl *)WebKit::NetworkLoadScheduler::HostContext::start((WebKit::NetworkLoadScheduler::HostContext *)v8, v16);
      }
    }
  }
  return result;
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::NetworkLoad>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t *v11;

  v4 = *(_DWORD *)(a1 + 28);
  v5 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 > v4)
    WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1);
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return 0;
  v11 = *(uint64_t **)(a2 + 8);
  v7 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v11);
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v8 += 8 * *(unsigned int *)(v8 - 4);
  if ((uint64_t **)v8 == v7)
    return 0;
  v10 = *v7;
  if (!*v7)
    return 0;
  v11 = *v7;
  WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove((uint64_t *)a1, &v11);
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete(a1, (WTF *)v10);
  return 1;
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  unsigned int v3;
  uint64_t *v4;

  v1 = result;
  v2 = *(uint64_t **)(result + 8);
  if (v2)
  {
    do
    {
      v4 = (uint64_t *)v2[2];
      if (!*(_QWORD *)(*v2 + 8))
        result = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)v1, v1, v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = 0;
  *(_DWORD *)(v1 + 24) = 0;
  if (*(_QWORD *)v1)
  {
    v3 = *(_DWORD *)(*(_QWORD *)v1 - 12);
    if (v3 > 0x7FFFFFFE)
      v3 = 0x7FFFFFFF;
  }
  *(_DWORD *)(v1 + 28) = 2 * v3;
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int **v7;
  unsigned int v9;
  unsigned int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  int v15;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_20;
  v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v7 = (unsigned int **)(v3 + 8 * v6);
    if ((unint64_t)*v7 + 1 >= 2 && !*((_QWORD *)*v7 + 1))
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v7, a2);
      ++v5;
    }
  }
  while ((unint64_t)v6--);
  v3 = *(_QWORD *)a1;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v5;
    v3 = *(_QWORD *)a1;
  }
  if (!v3)
  {
LABEL_20:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_21:
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    return result;
  }
  v9 = *(_DWORD *)(v3 - 4);
  if (v9 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v9)
    goto LABEL_15;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3)
    goto LABEL_21;
LABEL_16:
  v11 = *(_DWORD *)(v3 - 12);
  if (v11 >= 0x7FFFFFFF)
    v12 = -2;
  else
    v12 = 2 * v11;
  *(_DWORD *)(a1 + 12) = v12;
  return *(unsigned int *)(v3 - 12);
}

void WebKit::NetworkCache::Cache::store(WebKit::NetworkCache *this@<X1>, WebCore::ResourceRequest *a2@<X2>, WebKit::NetworkCache::Storage **a3@<X0>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (WebKit::NetworkCache::makeStoreDecision(this, a2, a2))
  {
    WebKit::NetworkCache::Cache::makeCacheKey((WebKit::NetworkCache::Cache *)a3, this, (WTF::SHA1 *)&v29);
    if (WebCore::ResourceResponseBase::httpStatusCode(a2) != 304)
      WebKit::NetworkCache::Storage::remove(a3[1], (const WebKit::NetworkCache::Key *)&v29);
    *a7 = 0;
    v15 = v32;
    v32 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v31;
    v31 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v30;
    v30 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v29;
    v29 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v14);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    WebKit::NetworkCache::Cache::makeEntry((WebKit::NetworkCache::Cache *)a3, this, a2, a4, a5, a7);
    WebKit::NetworkCache::Entry::encodeAsStorageRecord((WebKit::NetworkCache::Entry *)*a7, v19, v20);
    v21 = (uint64_t)a3[1];
    ++*(_DWORD *)a3;
    v22 = *a6;
    *a6 = 0;
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v23 = &off_1E34C4270;
    v23[1] = a3;
    v23[2] = v22;
    v27 = 0;
    v28 = v23;
    WebKit::NetworkCache::Storage::store(v21, (const WebKit::NetworkCache::Key *)&v29, (uint64_t *)&v28, &v27);
    v25 = v27;
    v27 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = (uint64_t)v28;
    v28 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)&v29, v24);
  }
}

void WebKit::NetworkCache::Entry::encodeAsStorageRecord(WebKit::NetworkCache::Entry *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  dispatch_data_t v9;
  WebCore::FragmentedSharedBuffer *v10;
  void *v11;
  void *v12;
  unsigned int *v13;
  void *v14;
  unsigned int *v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;
  void *v20;
  WebKit::NetworkCache *v21;
  const WebCore::ResourceRequest *v22;
  const WebCore::ResourceResponse *v23;
  unint64_t v24;
  void *object;
  __int128 v26;
  char v27;
  void *v28;
  __int128 v29;
  char v30;
  void *buffer;
  size_t size;

  v3 = MEMORY[0x1E0C80A78](this, a2, a3);
  v5 = v4;
  WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&buffer);
  WTF::Persistence::Coder<WebCore::ResourceResponse>::encodeForPersistence();
  v6 = *(_DWORD *)(v3 + 348);
  MEMORY[0x19AEAB26C](&buffer, v6 != 0);
  if (v6)
    WTF::Persistence::VectorCoder<false,std::pair<WTF::String,WTF::String>,0ul>::encodeForPersistence<WTF::Persistence::Encoder>((uint64_t)&buffer, v3 + 336);
  v7 = *(unsigned __int8 *)(v3 + 552);
  WTF::Persistence::Encoder::operator<<();
  if (v7)
    WTF::Persistence::Coder<std::optional<WebCore::ResourceRequest>>::encodeForPersistence<WTF::Persistence::Encoder>((uint64_t)&buffer, v3 + 352);
  if (*(_BYTE *)(v3 + 752))
  {
    MEMORY[0x19AEAB26C](&buffer, 1);
    if (!*(_BYTE *)(v3 + 752))
    {
      v21 = (WebKit::NetworkCache *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::NetworkCache::makeStoreDecision(v21, v22, v23, v24);
      return;
    }
    WTF::Persistence::Coder<WTF::Seconds>::encodeForPersistence();
  }
  else
  {
    MEMORY[0x19AEAB26C](&buffer, 0);
  }
  WTF::Persistence::Encoder::encodeChecksum((WTF::Persistence::Encoder *)&buffer);
  v8 = size;
  v9 = dispatch_data_create(buffer, size, 0, 0);
  v28 = 0;
  v29 = 0uLL;
  v30 = 0;
  v10 = *(WebCore::FragmentedSharedBuffer **)(v3 + 560);
  if (v10)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous(v10);
    v12 = object;
    object = 0;
    v13 = *(unsigned int **)(v3 + 560);
    *(_QWORD *)(v3 + 560) = v12;
    if (v13)
    {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v11);
      v15 = (unsigned int *)object;
      object = 0;
      if (v15)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v14);
    }
    v16 = *(_QWORD *)(v3 + 560);
    if (!*(_BYTE *)(v16 + 40))
    {
      __break(0xC471u);
      JUMPOUT(0x196D0E3D4);
    }
    v17 = (const void *)WebCore::SharedBuffer::data(*(WebCore::SharedBuffer **)(v3 + 560));
    v18 = *(_QWORD *)(v16 + 48);
    object = dispatch_data_create(v17, v18, 0, 0);
    *(_QWORD *)&v26 = 0;
    *((_QWORD *)&v26 + 1) = v18;
    v27 = 0;
    WTF::OSObjectPtr<dispatch_data_s *>::operator=(&v28, &object);
    v29 = v26;
    v30 = v27;
    if (object)
      os_release(object);
  }
  WebKit::NetworkCache::Key::Key(v5, v3);
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v5 + 80) = v9;
  if (v9)
    os_retain(v9);
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = v8;
  *(_BYTE *)(v5 + 104) = 0;
  v19 = v28;
  *(_QWORD *)(v5 + 112) = v28;
  if (v19)
  {
    os_retain(v19);
    v20 = v28;
    *(_OWORD *)(v5 + 120) = v29;
    *(_BYTE *)(v5 + 136) = v30;
    *(_BYTE *)(v5 + 144) = 0;
    *(_BYTE *)(v5 + 164) = 0;
    if (v20)
      os_release(v20);
  }
  else
  {
    *(_OWORD *)(v5 + 120) = v29;
    *(_BYTE *)(v5 + 136) = v30;
    *(_BYTE *)(v5 + 144) = 0;
    *(_BYTE *)(v5 + 164) = 0;
  }
  if (v9)
    os_release(v9);
  WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&buffer);
}

uint64_t WebKit::NetworkCache::makeStoreDecision(WebKit::NetworkCache *this, const WebCore::ResourceRequest *a2, const WebCore::ResourceResponse *a3)
{
  _QWORD *v5;
  WebCore *v6;
  const WebCore::HTTPHeaderMap *v7;
  WebCore *v8;
  char v9;
  char v10;
  BOOL v11;
  WebCore *v12;
  int isStatusCodePotentiallyCacheable;
  uint64_t result;
  WTF::WallTime *v15;
  uint64_t v16;
  double v17;
  char v18;
  double v19;
  int v20;
  uint64_t v21;
  WebKit::NetworkCache *v22;
  const WTF::String *v23;
  char isMediaMIMEType;
  char v25;

  if ((*(_BYTE *)(WebCore::ResourceRequestBase::url(this) + 8) & 2) == 0
    || !WebCore::ResourceResponseBase::isInHTTPFamily(a2))
  {
    return 1;
  }
  v5 = (_QWORD *)WebCore::ResourceRequestBase::httpMethod(this);
  if (!MEMORY[0x19AEABBCC](*v5, "GET", 3))
    return 2;
  v6 = (WebCore *)WebCore::ResourceRequestBase::httpHeaderFields(this);
  WebCore::parseCacheControlDirectives(v6, v7);
  if ((v25 & 2) != 0)
    return 5;
  if ((WebCore::ResourceResponseBase::cacheControlContainsNoStore(a2) & 1) != 0)
    return 3;
  v8 = (WebCore *)WebCore::ResourceResponseBase::httpStatusCode(a2);
  if ((WebCore::isStatusCodeCacheableByDefault(v8) & 1) != 0
    || ((WebCore::ResourceResponseBase::expires(a2), v9)
      ? (v11 = 0)
      : (WebCore::ResourceResponseBase::cacheControlMaxAge(a2), v11 = v10 == 0),
        (v12 = (WebCore *)WebCore::ResourceResponseBase::httpStatusCode(a2),
         isStatusCodePotentiallyCacheable = WebCore::isStatusCodePotentiallyCacheable(v12),
         result = 4,
         isStatusCodePotentiallyCacheable)
     && !v11))
  {
    if ((WebCore::ResourceResponseBase::isRedirection(a2) & 1) != 0 || (*((_WORD *)a2 + 116) & 0x40) != 0)
    {
      v21 = WebCore::ResourceRequestBase::url(this);
      if ((*(_BYTE *)(v21 + 8) & 1) != 0 && *(_QWORD *)v21 && *(_DWORD *)(*(_QWORD *)v21 + 4) > *(_DWORD *)(v21 + 36))
        return 8;
    }
    if (*((_BYTE *)this + 147) == 1)
      return 0;
    v15 = (WTF::WallTime *)WebCore::ResourceRequestBase::priority(this);
    if ((_DWORD)v15 != 4)
    {
      WTF::WallTime::now(v15);
      v16 = WebCore::ResourceResponseBase::cacheControlStaleWhileRevalidate(a2);
      v17 = 0.0;
      if (v18)
        v17 = *(double *)&v16;
      if ((WebCore::ResourceResponseBase::cacheControlContainsNoCache(a2) & 1) != 0)
      {
        if (!WebCore::ResourceResponseBase::hasCacheValidatorFields(a2))
          return 6;
      }
      else
      {
        WebCore::computeFreshnessLifetimeForHTTPFamily();
        if (v19 > 0.0)
        {
          WebCore::ResourceResponseBase::hasCacheValidatorFields(a2);
          goto LABEL_21;
        }
        if ((WebCore::ResourceResponseBase::hasCacheValidatorFields(a2) & 1) == 0 && v17 <= 0.0)
          return 6;
      }
    }
LABEL_21:
    v20 = *((unsigned __int8 *)this + 147);
    if (v20 == 2)
    {
      v22 = (WebKit::NetworkCache *)WebCore::ResourceResponseBase::mimeType(a2);
      isMediaMIMEType = WebKit::NetworkCache::isMediaMIMEType(v22, v23);
      result = 7;
      if ((isMediaMIMEType & 1) != 0)
        return result;
    }
    else if (v20 == 4)
    {
      return 7;
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::store(uint64_t result, const WebKit::NetworkCache::Key *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (!*(_QWORD *)(result + 40))
    return result;
  v7 = result;
  v8 = WTF::fastMalloc((WTF *)0xC8);
  WebKit::NetworkCache::Storage::WriteOperation::WriteOperation(v8, (unsigned int *)v7, (uint64_t)a2, a3, a4);
  v9 = *(_QWORD *)(v7 + 208);
  v10 = *(_QWORD *)(v7 + 216);
  v11 = (uint64_t *)(v7 + 208);
  if (!v9)
  {
    v9 = *(unsigned int *)(v7 + 232);
    if (v10)
    {
      if (v10 == v9 - 1)
        goto LABEL_14;
    }
    else if (!(_DWORD)v9)
    {
      goto LABEL_14;
    }
LABEL_12:
    v9 = v9;
    goto LABEL_4;
  }
  if (v10 + 1 == v9)
  {
LABEL_14:
    WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>::expandCapacity((uint64_t *)(v7 + 208));
    v9 = *v11;
    if (*v11)
      goto LABEL_4;
    LODWORD(v9) = *(_DWORD *)(v7 + 232);
    goto LABEL_12;
  }
LABEL_4:
  v12 = v9 - 1;
  *(_QWORD *)(v7 + 208) = v12;
  *(_QWORD *)(*(_QWORD *)(v7 + 224) + 8 * v12) = v8;
  result = WebKit::NetworkCache::Storage::addToRecordFilter(v7, a2);
  v13 = *(_QWORD *)(v7 + 208);
  v14 = *(_QWORD *)(v7 + 216);
  if (v13 > v14)
    v14 += *(unsigned int *)(v7 + 232);
  if (v14 - v13 == 1 && (!*(_BYTE *)(v7 + 80) || *(_DWORD *)(v7 + 24) != 1))
    return WebCore::TimerBase::start();
  return result;
}

uint64_t WebKit::NetworkCache::Storage::addToRecordFilter(uint64_t this, const WebKit::NetworkCache::Key *a2)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)(this + 64);
  if (v2)
  {
    v3 = *((_QWORD *)a2 + 4);
    *(_DWORD *)(v2 + 4 * ((v3 >> 5) & 0x1FFF)) |= 1 << v3;
    *(_DWORD *)(v2 + 4 * ((v3 >> 37) & 0x1FFF)) |= 1 << SBYTE4(v3);
  }
  if (*(_BYTE *)(this + 80))
  {
    v4 = (char *)a2 + 32;
    v5 = *(_DWORD *)(this + 108);
    if (v5 == *(_DWORD *)(this + 104))
    {
      return WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::array<unsigned char,20ul> const&>(this + 96, (unint64_t)v4);
    }
    else
    {
      v6 = *(_QWORD *)(this + 96) + 20 * v5;
      v7 = *(_OWORD *)v4;
      *(_DWORD *)(v6 + 16) = *((_DWORD *)v4 + 4);
      *(_OWORD *)v6 = v7;
      ++*(_DWORD *)(this + 108);
    }
  }
  return this;
}

uint64_t WebKit::NetworkCache::Storage::WriteOperation::WriteOperation(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int v9;
  void *v10;
  __int128 v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  do
    v9 = __ldaxr(a2);
  while (__stlxr(v9 + 1, a2));
  *(_QWORD *)a1 = a2;
  WebKit::NetworkCache::Key::Key(a1 + 8, a3);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 72);
  v10 = *(void **)(a3 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  if (v10)
    os_retain(v10);
  v11 = *(_OWORD *)(a3 + 88);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a3 + 104);
  *(_OWORD *)(a1 + 96) = v11;
  v12 = *(void **)(a3 + 112);
  *(_QWORD *)(a1 + 120) = v12;
  if (v12)
    os_retain(v12);
  v13 = *(_OWORD *)(a3 + 120);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a3 + 136);
  *(_OWORD *)(a1 + 128) = v13;
  v14 = *(_OWORD *)(a3 + 144);
  *(_QWORD *)(a1 + 165) = *(_QWORD *)(a3 + 157);
  *(_OWORD *)(a1 + 152) = v14;
  v15 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 184) = v16;
  *(_DWORD *)(a1 + 192) = 0;
  return a1;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::makeEntry@<X0>(WebKit::NetworkCache::Cache *a1@<X0>, const WebCore::ResourceRequest *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  WebCore *v13;
  const WebCore::ResourceResponse *v14;
  uint64_t v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  _QWORD v22[2];
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WebKit::NetworkCache::Cache::makeCacheKey(a1, a2, (WTF::SHA1 *)&v23);
  v12 = *((_QWORD *)a1 + 2);
  v22[0] = *((_QWORD *)a1 + 8);
  v13 = (WebCore *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 216), v22);
  WebCore::collectVaryingRequestHeaders(v13, a2, a3, v14);
  v15 = WTF::fastMalloc((WTF *)0x300);
  *a6 = WebKit::NetworkCache::Entry::Entry(v15, (uint64_t)&v23, (uint64_t)a3, a4, a5, (uint64_t)v22);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v16);
  v18 = v26;
  v26 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v24;
  v24 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkCache::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6)
{
  WTF::WallTime *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;

  v11 = (WTF::WallTime *)WebKit::NetworkCache::Key::Key(a1, a2);
  WTF::WallTime::now(v11);
  *(_QWORD *)(a1 + 72) = v12;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 80), (const WebCore::ResourceResponseBase *)a3);
  v13 = *(const void **)(a3 + 240);
  *(_QWORD *)(a1 + 320) = v13;
  if (v13)
    CFRetain(v13);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a3 + 248);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 336, a6);
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  v14 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 560) = v14;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 740) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_BYTE *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 760) = a4;
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  _QWORD *v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = v3;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v5;
    *(_QWORD *)v2 = v6;
    WTF::VectorTypeOperations<std::pair<WTF::String,WTF::String>>::uninitializedCopy(*(_QWORD *)a2, *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **result;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>::~KeyValuePair(v14);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>::~KeyValuePair(v14);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t *WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>::expandCapacity(uint64_t *result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  char *v4;
  int v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;

  v1 = *((unsigned int *)result + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = (char *)result[2];
    v5 = v2 + 1;
    v6 = (char *)WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    *((_DWORD *)v3 + 6) = v5;
    v3[2] = (uint64_t)v6;
    v7 = v3[1];
    if (*v3 <= v7)
    {
      result = (uint64_t *)memcpy(&v6[8 * *v3], &v4[8 * *v3], 8 * v7 - 8 * *v3);
    }
    else
    {
      memcpy(v6, v4, 8 * v7);
      v8 = *v3 - v1 + *((unsigned int *)v3 + 6);
      result = (uint64_t *)memcpy((void *)(v3[2] + 8 * v8), &v4[8 * *v3], 8 * v1 - 8 * *v3);
      *v3 = v8;
    }
    if (v4)
    {
      if ((char *)v3[2] == v4)
      {
        v3[2] = 0;
        *((_DWORD *)v3 + 6) = 0;
      }
      return (uint64_t *)WTF::fastFree((WTF *)v4, v9);
    }
  }
  return result;
}

unint64_t WebKit::NetworkCache::Storage::estimateRecordsSize(WebKit::NetworkCache::Storage *this, const WTF::String *a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (int)a2;
  if (a2 >= a3)
    v4 = a2 - a3;
  else
    v4 = 0;
  v5 = WebKit::NetworkCache::Storage::volumeBlockSize(this, a2);
  return (v5 * v3) + ((unint64_t)WTF::pageSize((WTF *)v5) >> 1) * v4;
}

uint64_t WebKit::NetworkCache::Storage::volumeBlockSize(WebKit::NetworkCache::Storage *this, const WTF::String *a2)
{
  uint64_t result;

  if (*((_BYTE *)this + 60))
    return *((unsigned int *)this + 14);
  result = WTF::FileSystemImpl::volumeFileBlockSize((WebKit::NetworkCache::Storage *)((char *)this + 8), a2);
  if ((result & 0xFF00000000) != 0)
    result = result;
  else
    result = 4096;
  *((_DWORD *)this + 14) = result;
  *((_BYTE *)this + 60) = 1;
  return result;
}

uint64_t WebKit::NetworkCache::deleteEmptyRecordsDirectories(WebKit::NetworkCache *this, const WTF::String *a2)
{
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34C4BC0;
  v3[1] = this;
  v5 = v3;
  WebKit::NetworkCache::traverseDirectory(this, (const WTF::String *)&v5);
  return (*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
}

uint64_t WebKit::NetworkCache::traverseRecordsFiles(WTF::FileSystemImpl *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v8;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34C4B20;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v8 = v6;
  WebKit::NetworkCache::traverseDirectory(a1, (const WTF::String *)&v8);
  return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
}

WTF::StringImpl *WebKit::NetworkCache::BlobStorage::synchronize(WebKit::NetworkCache::BlobStorage *this)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  _QWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  WTF::String::isolatedCopy();
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v10, v2);
  atomic_store(0, (unint64_t *)this + 2);
  v3 = v10;
  if (v10)
    *(_DWORD *)v10 += 2;
  v9 = v3;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E34C4400;
  v4[1] = this;
  v4[2] = &v9;
  v8 = v4;
  WebKit::NetworkCache::traverseDirectory((WTF::FileSystemImpl *)&v9, (const WTF::String *)&v8);
  (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::Color>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  char v4;
  _BYTE v6[8];
  char v7;

  IPC::Decoder::decode<WebCore::Color>(a1, v6);
  v4 = v7;
  if (v7)
  {
    WebCore::Color::Color();
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[8] = v4;
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v3);
}

void WebKit::PreconnectTask::didFinishLoading(WebKit::PreconnectTask *this, const WebCore::NetworkLoadMetrics *a2)
{
  NSObject *v4;
  uint8_t v5[48];
  _QWORD v6[3];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v5 = 134217984;
    *(_QWORD *)&v5[4] = this;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - PreconnectTask::didFinishLoading", v5, 0xCu);
  }
  *(_OWORD *)v5 = 0uLL;
  WTF::URL::invalidate((WTF::URL *)&v5[8]);
  v6[2] = 0;
  v6[0] = 0;
  *(_QWORD *)((char *)v6 + 6) = 0;
  v7 = 1;
  WebKit::PreconnectTask::didFinish(this, (const WebCore::ResourceError *)v5, a2);
}

void sub_196D0F0B8(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v26, a2);
}

void WebKit::PreconnectTask::didFinish(WebKit::PreconnectTask *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    (*(void (**)(uint64_t, const WebCore::ResourceError *, const WebCore::NetworkLoadMetrics *))(*(_QWORD *)v4 + 16))(v4, a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  WebKit::PreconnectTask::~PreconnectTask(this);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::PreconnectTask::~PreconnectTask(WebKit::PreconnectTask *this)
{
  uint64_t v2;

  WebCore::Timer::~Timer((WebKit::PreconnectTask *)((char *)this + 32));
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 1, 0);
}

{
  WebKit::PreconnectTask::~PreconnectTask(this);
  JUMPOUT(0x19AEB936CLL);
}

void WebCore::Timer::~Timer(WebCore::Timer *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E34B3740;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
}

{
  uint64_t v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34B3740;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
  WTF::fastFree(v3, v4);
}

void WebKit::NetworkLoadParameters::~NetworkLoadParameters(WebKit::NetworkLoadParameters *this, void *a2)
{
  const void *v3;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_BYTE *)this + 2936))
  {
    v3 = (const void *)*((_QWORD *)this + 366);
    *((_QWORD *)this + 366) = 0;
    if (v3)
      CFRelease(v3);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2888, a2);
  if (*((_BYTE *)this + 2864))
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NetworkLoadParameters *)((char *)this + 304));
  v4 = (const void *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkLoadParameters *)((char *)this + 88));
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v5);
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v7, v5);
}

uint64_t WebCore::ResourceRequest::operator=(uint64_t a1, uint64_t a2)
{
  WebCore::ResourceRequestBase::operator=(a1, a2);
  WTF::RetainPtr<NSURLRequest>::operator=((uint64_t *)(a1 + 192), (uint64_t *)(a2 + 192));
  return a1;
}

{
  const void *v4;
  const void *v5;

  WebCore::ResourceRequestBase::operator=(a1, a2);
  v4 = *(const void **)(a2 + 192);
  if (v4)
    CFRetain(v4);
  v5 = *(const void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v4;
  if (v5)
    CFRelease(v5);
  return a1;
}

WTF::RefCountedBase *WebCore::ResourceRequestBase::operator=(uint64_t a1, uint64_t a2)
{
  WTF::RefCountedBase *result;

  WebCore::ResourceRequestBase::RequestData::operator=(a1, a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 152), (WTF::StringImpl *)(a2 + 152));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 160), (WTF::StringImpl *)(a2 + 160));
  result = WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::operator=((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  return result;
}

WebKit::NetworkLoadParameters *WebKit::NetworkLoadParameters::NetworkLoadParameters(WebKit::NetworkLoadParameters *this, const WebKit::NetworkLoadParameters *a2)
{
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;

  v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v4;
  v5 = (unsigned int *)*((_QWORD *)a2 + 4);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 4) = v5;
  v7 = (unsigned int *)*((_QWORD *)a2 + 5);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *((_QWORD *)this + 5) = v7;
  v9 = *((_OWORD *)a2 + 3);
  v10 = *((_OWORD *)a2 + 4);
  *(_QWORD *)((char *)this + 77) = *(_QWORD *)((char *)a2 + 77);
  *((_OWORD *)this + 3) = v9;
  *((_OWORD *)this + 4) = v10;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)this + 11, (const WebKit::NetworkLoadParameters *)((char *)a2 + 88));
  v11 = *((_DWORD *)a2 + 72);
  *(_DWORD *)((char *)this + 291) = *(_DWORD *)((char *)a2 + 291);
  *((_DWORD *)this + 72) = v11;
  *((_BYTE *)this + 304) = 0;
  *((_BYTE *)this + 2864) = 0;
  if (*((_BYTE *)a2 + 2864))
  {
    WebKit::NavigationActionData::NavigationActionData((WebKit::NetworkLoadParameters *)((char *)this + 304), (const WebKit::NetworkLoadParameters *)((char *)a2 + 304));
    *((_BYTE *)this + 2864) = 1;
  }
  *((_BYTE *)this + 2880) = *((_BYTE *)a2 + 2880);
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 2888, (uint64_t)a2 + 2888);
  *((_BYTE *)this + 2904) = *((_BYTE *)a2 + 2904);
  std::__optional_move_base<WebKit::NetworkActivityTracker,false>::__optional_move_base[abi:sn180100]((uint64_t)this + 2912, (uint64_t *)a2 + 364);
  v12 = *((_DWORD *)a2 + 736);
  *((_WORD *)this + 1474) = *((_WORD *)a2 + 1474);
  *((_DWORD *)this + 736) = v12;
  return this;
}

WTF::StringImpl **WebKit::NetworkLoadScheduler::startedPreconnectForMainResource(WTF ***this, const WTF::URL *a2, const WTF::String **a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF **v7;
  WTF::StringImpl *v8;
  WTF **v9;
  void *v10;
  uint64_t v12;
  WTF::String *v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16[2];

  WTF::URL::protocolHostAndPort(a2);
  WebKit::mainResourceLoadKey(v16, v13, a3);
  v6 = v13;
  v13 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(this + 2, v16);
  v9 = this[2];
  if (v9)
    v9 += 7 * *((unsigned int *)v9 - 1);
  if (v9 == v7)
  {
    LODWORD(v13) = 1;
    v14 = 0u;
    v15 = 0u;
    WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::add<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>((uint64_t)&v12, (uint64_t *)this + 2, v16, (uint64_t)&v13);
    WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo::~PendingMainResourcePreconnectInfo((WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo *)&v13, v10);
  }
  else
  {
    ++*((_DWORD *)v7 + 4);
  }
  return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v16, v8);
}

void WebKit::NetworkLoadScheduler::finishedPreconnectForMainResource(WebKit::NetworkLoadScheduler *this, const WTF::URL *a2, const WTF::String **a3, const WebCore::ResourceError *a4)
{
  WTF ***v7;
  WTF **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF **v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  int v15;
  WTF *v16;
  uint64_t v17;
  WTF::String *v18;
  WTF::StringImpl **v19[2];
  uint8_t buf[4];
  WebKit::NetworkLoadScheduler *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = (WTF ***)((char *)this + 16);
  WTF::URL::protocolHostAndPort(a2);
  WebKit::mainResourceLoadKey((const WTF::String **)buf, v18, a3);
  v8 = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(v7, (WTF::StringImpl **)buf);
  v19[0] = v8;
  v19[1] = v9;
  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)buf, (WTF::StringImpl *)v9);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v10);
    else
      *(_DWORD *)v18 -= 2;
  }
  v11 = *v7;
  if (*v7)
    v11 += 7 * *((unsigned int *)v11 - 1);
  if (v11 != v8)
  {
    if ((WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v8 + 3, v10) & 1) != 0)
    {
      --*((_DWORD *)v8 + 4);
    }
    else
    {
      v12 = WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::takeFirst((uint64_t)(v8 + 3));
      v13 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *((unsigned __int8 *)a4 + 60);
        v15 = *((_DWORD *)v8 + 4);
        WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)(v8 + 3));
        v16 = v8[3];
        if (v16)
          LODWORD(v16) = *((_DWORD *)v16 - 3);
        *(_DWORD *)buf = 134219008;
        v21 = this;
        v22 = 1024;
        v23 = v14;
        v24 = 2048;
        v25 = v12;
        v26 = 1024;
        v27 = v15;
        v28 = 1024;
        v29 = (int)v16;
        _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%p - NetworkLoadScheduler::finishedPreconnectForMainResource (error: %d) starting delayed main resource load %p; %u pending preconnects; %u total pending loads",
          buf,
          0x28u);
      }
      v17 = *(_QWORD *)(v12 + 2992);
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    }
    WebKit::NetworkLoadScheduler::maybePrunePreconnectInfo((uint64_t)this, v19);
  }
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(_QWORD *a1, void *a2)
{
  _QWORD *v3;

  if (!*a1 || !*(_DWORD *)(*a1 - 12))
    return 1;
  v3 = (_QWORD *)a1[1];
  if (!v3)
  {
LABEL_8:
    WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)a1, a2);
    return 1;
  }
  while (!*(_QWORD *)(*v3 + 8))
  {
    v3 = (_QWORD *)v3[2];
    if (!v3)
      goto LABEL_8;
  }
  return 0;
}

const WTF::String **WebKit::mainResourceLoadKey(const WTF::String **this, const WTF::String *a2, const WTF::String **a3)
{
  const WTF::String *v3;
  const WTF::String **v4;
  const WTF::String *v5;
  const WTF::String *v6;
  const WTF::String *v7;
  const WTF::String *v8;

  v3 = *a3;
  v4 = (const WTF::String **)MEMORY[0x1E0CBF738];
  v5 = (const WTF::String *)*MEMORY[0x1E0CBF738];
  if (a2)
    v6 = a2;
  else
    v6 = (const WTF::String *)*MEMORY[0x1E0CBF738];
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    v5 = *v4;
  }
  v7 = *a3;
  *this = v6;
  if (v3)
    v8 = v7;
  else
    v8 = v5;
  if (v8)
    *(_DWORD *)v8 += 2;
  this[1] = v8;
  return this;
}

WTF **WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(WTF ***a1, WTF::StringImpl **a2)
{
  WTF **result;
  WTF **v4;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(result, a2);
    v4 = *a1;
    if (!result)
    {
      if (v4)
        return &v4[7 * *((unsigned int *)v4 - 1)];
      else
        return 0;
    }
  }
  return result;
}

void WebKit::NetworkLoadScheduler::maybePrunePreconnectInfo(uint64_t a1, WTF::StringImpl ***a2)
{
  if (!*((_DWORD *)*a2 + 4))
  {
    if (WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(*a2 + 3, a2))WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 16), *a2);
  }
}

WTF::StringImpl *WebKit::NetworkDataTaskCocoa::updateFirstPartyInfoForSession(WebKit::NetworkDataTaskCocoa *this, const WTF::URL *a2)
{
  WTF::StringImpl *result;
  int v5;
  uint64_t v6;
  WebKit::NetworkSession *v7;
  void *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  result = (WTF::StringImpl *)WebKit::NetworkTaskCocoa::shouldApplyCookiePolicyForThirdPartyCloaking((WebKit::NetworkDataTaskCocoa *)((char *)this + 552));
  if ((_DWORD)result)
  {
    result = (WTF::StringImpl *)WTF::URL::host(a2);
    if (v5)
    {
      v6 = *((_QWORD *)this + 2);
      if (v6)
        v7 = *(WebKit::NetworkSession **)(v6 + 8);
      else
        v7 = 0;
      WebKit::NetworkDataTaskCocoa::updateFirstPartyInfoForSession(WTF::URL const&)::$_0::operator()(&v20, *((void **)this + 76));
      if (v20)
      {
        if (*((_DWORD *)v20 + 1))
        {
          if ((MEMORY[0x19AEABBCC]() & 1) == 0)
          {
            v17 = WTF::URL::host(a2);
            v18 = v13;
            WTF::StringView::toString((uint64_t *)&v19, (WTF::StringView *)&v17);
            WebKit::NetworkSession::setFirstPartyHostCNAMEDomain((uint64_t)v7, &v19, &v20);
            v15 = v19;
            v19 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v14);
              else
                *(_DWORD *)v15 -= 2;
            }
          }
        }
      }
      v8 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*((id *)this + 76), "_incompleteTaskMetrics"), "transactionMetrics"), "lastObject"), "remoteAddress");
      if (objc_msgSend(v8, "length"))
      {
        v17 = WTF::URL::host(a2);
        v18 = v10;
        WTF::StringView::toString((uint64_t *)&v19, (WTF::StringView *)&v17);
        MEMORY[0x19AEABCC8](&v16, v8);
        WebKit::NetworkSession::setFirstPartyHostIPAddress(v7, (const WTF::String *)&v19, (const WTF::String *)&v16);
        v11 = v16;
        v16 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v9);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = v19;
        v19 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v9);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
      result = v20;
      v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_196D0F9CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::StringView::toString(WTF::StringView *this)
{
  if (*((_BYTE *)this + 12))
    return WTF::String::String();
  else
    return WTF::String::String();
}

uint64_t WebKit::NetworkTaskCocoa::lastCNAMEDomain(WTF::StringImpl **a1, WTF::StringImpl **a2)
{
  unsigned int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;

  if (*a2 && WTF::StringImpl::endsWith())
  {
    v4 = *a2 ? *((_DWORD *)*a2 + 1) - 1 : -1;
    WTF::String::left(a2, v4, &v11);
    v6 = v11;
    v11 = 0;
    v7 = *a2;
    *a2 = v6;
    if (v7)
    {
      v8 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 != 2)
      {
LABEL_9:
        *(_DWORD *)v7 = v8;
        return WebCore::RegistrableDomain::uncheckedCreateFromHost((WebCore::RegistrableDomain *)a2, a1);
      }
      WTF::StringImpl::destroy(v7, v5);
      v7 = v11;
      v11 = 0;
      if (v7)
      {
        v8 = *(_DWORD *)v7 - 2;
        if (*(_DWORD *)v7 == 2)
        {
          WTF::StringImpl::destroy(v7, v9);
          return WebCore::RegistrableDomain::uncheckedCreateFromHost((WebCore::RegistrableDomain *)a2, a1);
        }
        goto LABEL_9;
      }
    }
  }
  return WebCore::RegistrableDomain::uncheckedCreateFromHost((WebCore::RegistrableDomain *)a2, a1);
}

uint64_t WebCore::RegistrableDomain::uncheckedCreateFromHost@<X0>(WebCore::RegistrableDomain *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  WebCore::PublicSuffixStore::singleton(this);
  result = WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
  if (v7 && *((_DWORD *)v7 + 1))
  {
    *a2 = v7;
  }
  else
  {
    WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString((WTF::StringImpl **)this, a2);
    result = (uint64_t)v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        return WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return result;
}

void sub_196D0FBDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PreconnectTask::PreconnectTask(_QWORD *a1, WebKit::NetworkSession *a2, uint64_t a3, uint64_t *a4)
{
  WebKit::NetworkLoad **v7;
  uint64_t v8;
  WebCore::TimerBase *v9;
  _QWORD *v10;
  NSObject *v11;
  WebKit::NetworkLoad *v12;
  int v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E34C0100;
  a1[1] = 0;
  v7 = (WebKit::NetworkLoad **)(a1 + 1);
  v8 = *a4;
  *a4 = 0;
  a1[2] = v8;
  a1[3] = 0x404E000000000000;
  v9 = (WebCore::TimerBase *)(a1 + 4);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &unk_1E34C0830;
  v10[1] = a1;
  WebCore::TimerBase::TimerBase(v9);
  a1[4] = off_1E34B3740;
  a1[10] = v10;
  v11 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 134217984;
    v15 = a1;
    _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - PreconnectTask::PreconnectTask()", (uint8_t *)&v14, 0xCu);
  }
  v12 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xC90);
  WebKit::NetworkLoad::NetworkLoad((uint64_t)v12, (uint64_t)a1, a3, a2);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](v7, v12);
  return a1;
}

uint64_t WebKit::PreconnectTask::start(WebKit::NetworkLoad **this)
{
  WebCore::TimerBase::start();
  return WebKit::NetworkLoad::start(this[1]);
}

Seconds *WebKit::PreconnectTask::setTimeout(Seconds *this, Seconds a2)
{
  this[3].m_value = a2.m_value;
  return this;
}

uint64_t WebKit::NetworkSession::setFirstPartyHostCNAMEDomain(uint64_t result, WTF **a2, const WTF::StringImpl **a3)
{
  uint64_t v4;
  const WTF::StringImpl *v6;
  _BYTE v7[24];

  if (*a2)
  {
    if (*((_DWORD *)*a2 + 1))
    {
      v4 = result;
      result = (uint64_t)*a3;
      if (*a3)
      {
        if (*(_DWORD *)(result + 4))
        {
          result = MEMORY[0x19AEABBCC]();
          if ((result & 1) == 0)
          {
            result = WTF::equal(*a2, *a3, v6);
            if ((result & 1) == 0)
              return WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>((uint64_t *)(v4 + 112), a2, (WTF::StringImpl *)a3, (uint64_t)v7);
          }
        }
      }
    }
  }
  return result;
}

double WebKit::NetworkSession::setFirstPartyHostIPAddress(WebKit::NetworkSession *this, const WTF::String *a2, const WTF::String *a3)
{
  double result;
  uint64_t v6;
  __n128 v7;
  char v8;

  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4) && *(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    WebCore::IPAddress::fromString(a3, a2);
    if (v8)
      *(_QWORD *)&result = WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IPAddress>((uint64_t)&v6, (uint64_t *)this + 15, (WTF::StringImpl **)a2, &v7).n128_u64[0];
  }
  return result;
}

uint64_t WebKit::NetworkLoad::start(WebKit::NetworkLoad *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 374);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t WTF::RetainPtr<NSURLRequest>::leakRef<NSURLRequest>(uint64_t *a1)
{
  uint64_t v2;

  v2 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  return WTF::RetainPtr<NSURLRequest>::toStorageType((uint64_t)a1, v2);
}

uint64_t *WTF::RetainPtr<NSURLRequest>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[3];

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RetainPtr<NSURLRequest>::RetainPtr(v4, a2);
  WTF::RetainPtr<NSURLRequest>::swap(a1, v4);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
}

void WebKit::FrameInfoData::~FrameInfoData(WebKit::FrameInfoData *this)
{
  WebKit::FrameInfoData::~FrameInfoData(this);
}

{
  WTF::StringImpl *v2;
  _QWORD v3[4];
  WTF::StringImpl *v4;

  v3[1] = (char *)this + 240;
  v3[0] = 0;
  v3[3] = (char *)this + 240;
  v3[2] = v3;
  v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 30);
  if (v4)
    WTF::StringImpl::deref(v4, v2);
  WebCore::SecurityOriginData::~SecurityOriginData((WebKit::FrameInfoData *)((char *)this + 208));
  WebCore::ResourceRequest::~ResourceRequest((WebKit::FrameInfoData *)((char *)this + 8));
}

void WebCore::SecurityOriginData::~SecurityOriginData(WebCore::SecurityOriginData *this)
{
  WebCore::SecurityOriginData::~SecurityOriginData(this);
}

{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::~variant[abi:sn180100]((uint64_t)this);
}

void WebCore::ResourceRequest::~ResourceRequest(WebCore::ResourceRequest *this)
{
  WebCore::ResourceRequest::~ResourceRequest(this);
}

{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)this + 24);
  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

uint64_t *WTF::RetainPtr<NSURLRequest>::~RetainPtr(uint64_t *a1)
{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1);
  return a1;
}

{
  CFTypeRef cf;

  cf = (CFTypeRef)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (cf)
    CFRelease(cf);
  return a1;
}

uint64_t *WTF::RetainPtr<NSURLRequest>::RetainPtr(uint64_t *a1, uint64_t *a2)
{
  WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, a2);
  return a1;
}

{
  uint64_t v3;

  v3 = WTF::RetainPtr<NSURLRequest>::leakRef<NSURLRequest>(a2);
  *a1 = WTF::RetainPtr<NSURLRequest>::toStorageType((uint64_t)a1, v3);
  return a1;
}

uint64_t *WTF::RetainPtr<NSURLRequest>::swap(uint64_t *a1, uint64_t *a2)
{
  return std::swap[abi:sn180100]<JSC::ArrayBufferView *>(a1, a2);
}

void WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(a2, (WTF::StringImpl *)a2);
  *a2 = (WTF::StringImpl *)-1;
  WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo::~PendingMainResourcePreconnectInfo((WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo *)(a2 + 2), v4);
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::rehash(a1, v9 >> 1, 0);
  }
}

WTF **WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(WTF **result, WTF::StringImpl **a2)
{
  WTF **v3;
  int v4;
  unsigned int v5;
  WTF **v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  int v11;
  int v12;
  char v13;

  if (result)
  {
    v3 = result;
    v4 = *((_DWORD *)result - 2);
    v5 = WTF::PairHash<WTF::String,WTF::String>::hash(a2) & v4;
    v6 = &v3[7 * v5];
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v6, v7, v8) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v11 = 1;
      do
      {
        if (*v6 != (WTF *)-1)
        {
          v13 = WTF::PairHash<WTF::String,WTF::String>::equal(v6, a2, v10);
          result = v6;
          if ((v13 & 1) != 0)
            break;
        }
        v5 = (v5 + v11) & v4;
        v6 = &v3[7 * v5];
        v12 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v6, v9, v10);
        result = 0;
        ++v11;
      }
      while (!v12);
    }
  }
  return result;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(WTF **a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v5;

  result = WTF::equal(*a1, 0, a3);
  if ((_DWORD)result)
    return WTF::equal(a1[1], 0, v5);
  return result;
}

unint64_t WTF::PairHash<WTF::String,WTF::String>::hash(WTF::StringImpl **a1)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  int v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  int v7;

  v2 = *a1;
  v3 = *((_DWORD *)v2 + 4);
  if (v3 >= 0x100)
    v4 = v3 >> 8;
  else
    v4 = WTF::StringImpl::hashSlowCase(v2);
  v5 = a1[1];
  v6 = *((_DWORD *)v5 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(v5);
  return (0xD7862706ELL * (unint64_t)(277951225 * v4 + 95187966 * v7)) >> 4;
}

uint64_t WTF::PairHash<WTF::String,WTF::String>::equal(WTF **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;

  result = WTF::equal(*a1, *a2, a3);
  if ((_DWORD)result)
    return WTF::equal(a1[1], a2[1], v6);
  return result;
}

void WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl **v2;

  if (*a1)
  {
    v2 = (WTF::StringImpl **)(*a1 + 56 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2)
      return;
  }
  else
  {
    if (!a2)
      return;
    v2 = 0;
  }
  if (v2 != a2)
    WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::remove(a1, a2);
}

uint64_t WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::add<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  WTF **v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  WTF **v25;
  int v26;
  uint64_t v27;
  unsigned int v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::PairHash<WTF::String,WTF::String>::hash(a3) & v9;
  v11 = (WTF **)(v8 + 56 * v10);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v11, v12, v13) & 1) == 0)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (*v11 == (WTF *)-1)
      {
        v25 = v11;
      }
      else
      {
        result = WTF::PairHash<WTF::String,WTF::String>::equal(v11, a3, v15);
        if ((_DWORD)result)
        {
          v27 = *a2;
          if (*a2)
            v28 = *(_DWORD *)(v27 - 4);
          else
            v28 = 0;
          v24 = 0;
          v23 = v27 + 56 * v28;
          goto LABEL_12;
        }
      }
      v10 = (v10 + v26) & v9;
      v11 = (WTF **)(v8 + 56 * v10);
      ++v26;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v11, v14, v15));
    if (v25)
    {
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (WTF *)1;
      *(_OWORD *)(v25 + 3) = 0u;
      *(_OWORD *)(v25 + 5) = 0u;
      --*(_DWORD *)(*a2 - 16);
      v11 = v25;
    }
  }
  result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>::translate<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,std::tuple<WTF::String,WTF::String> const&,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>((uint64_t)v11, (uint64_t)a3, a4);
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_11;
LABEL_25:
    result = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::expand(a2, v11);
    v11 = (WTF **)result;
    v19 = *a2;
    if (*a2)
      LODWORD(v22) = *(_DWORD *)(v19 - 4);
    else
      LODWORD(v22) = 0;
    goto LABEL_11;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_25;
LABEL_11:
  v23 = v19 + 56 * v22;
  v24 = 1;
LABEL_12:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  void *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  WTF **v15;
  void *v16;
  uint64_t v17;
  void *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v12 = 0;
  if (v7)
  {
    v14 = v7;
    v15 = (WTF **)v6;
    do
    {
      if (*v15 != (WTF *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v15, (uint64_t)v10, v11))
        {
          WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>::~KeyValuePair((uint64_t)v15, v16);
        }
        else
        {
          v17 = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::reinsert(*a1, (uint64_t)v15);
          WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>::~KeyValuePair((uint64_t)v15, v18);
          if (v15 == a3)
            v12 = v17;
        }
      }
      v15 += 7;
      --v14;
    }
    while (v14);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _OWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(56 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_OWORD *)(v2 + 40);
    do
    {
      *((_QWORD *)v5 - 3) = 0;
      *((_QWORD *)v5 - 2) = 0;
      *((_QWORD *)v5 - 1) = 1;
      *v5 = 0uLL;
      v5[1] = 0uLL;
      v5 = (_OWORD *)((char *)v5 + 56);
      --v4;
    }
    while (v4);
  }
  return result;
}

__n128 WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IPAddress>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, __n128 *a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  __n128 result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = v8 + 32 * v14;
    v16 = *(WTF **)v15;
    if (!*(_QWORD *)v15)
    {
      if (v12)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        --*(_DWORD *)(*a2 - 16);
        v15 = v12;
      }
      WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a3);
      result = *a4;
      *(_DWORD *)(v15 + 24) = a4[1].n128_u32[0];
      *(__n128 *)(v15 + 8) = result;
      v18 = *a2;
      if (*a2)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *a2;
      if (*a2)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_16;
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_16:
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v20 + 32 * v23;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (WTF::StringImpl **)v15);
      v20 = *a2;
      if (*a2)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_16;
    }
    if (v16 == (WTF *)-1)
    {
      v12 = v8 + 32 * v14;
      goto LABEL_23;
    }
    if (WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
      break;
LABEL_23:
    v11 = i + v14;
  }
  v24 = *a2;
  if (*a2)
    v25 = *(unsigned int *)(v24 - 4);
  else
    v25 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v24 + 32 * v25;
  *(_BYTE *)(a1 + 16) = 0;
  v26 = v8 + 32 * v14;
  result = *a4;
  *(_DWORD *)(v26 + 24) = a4[1].n128_u32[0];
  *(__n128 *)(v26 + 8) = result;
  return result;
}

