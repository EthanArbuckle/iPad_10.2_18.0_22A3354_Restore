uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3918[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3606;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE16u, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3606, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3928[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3608;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE18u, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3608, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3938[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::LineWidth,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 990;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 990;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::LinkProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 991;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 991;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PixelStorei,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  void *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
      if (!v64)
        return 15;
      v8 = v62;
      v9 = v63;
      v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v62;
      if (v10 >= v62)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v63)
        {
          *(_WORD *)(v62 + v11) = 999;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v19 >= v8 + v12)
      {
        v12 = (unint64_t)v19 - v8 + 4;
        if ((unint64_t)v19 - v8 > 0xFFFFFFFFFFFFFFFBLL || v12 > v9)
          goto LABEL_34;
        *v19 = a2[1];
      }
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 64);
        v22 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *(_QWORD *)(a1 + 56);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v24 = v22 + v12;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *(_QWORD *)(a1 + 72) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v28 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v28;
      }
LABEL_34:
      if (v64)
      {
        v29 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v62;
        if (v29 < v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)(v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(a1 + 64);
        v33 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(a1 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(a1 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(a1 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 999;
        *(_QWORD *)(v38 + 8) = a3;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        v39 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v39;
        v40 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v40;
        v28 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v42 = v65;
        v65 = 0;
        if (v42)
        {
          IPC::Encoder::~Encoder(v42, v41);
          WTF::fastFree(v43, v44);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        return v28;
      }
      __break(1u);
LABEL_91:
      v45 = 0;
LABEL_92:
      v48 = 0;
LABEL_60:
      v50 = (_QWORD *)((v9 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v9 + v48)
      {
        v48 = (unint64_t)v50 - v9 + 8;
        if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
          return 17;
        *v50 = a3;
      }
      if (!v45)
        return 17;
      v52 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v53 = *(_QWORD *)(a1 + 56);
      if (v52 + 16 >= v53)
        v52 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v54 = v52 + v48;
      if (v53 <= v54)
        v54 = 0;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *(_DWORD *)(a1 + 108);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v60 = v57 + 1;
        *(_DWORD *)(a1 + 108) = v60;
        if (v60 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
  if (v64)
  {
    v9 = v62;
    v45 = v63;
    v46 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v62;
    if (v46 < v62)
      goto LABEL_92;
    v48 = v47 + 2;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v63)
      goto LABEL_91;
    *(_WORD *)(v62 + v47) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonOffset,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 1001;
          v60 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1001;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorage,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  char *v74;
  unint64_t v75;
  char v76;
  IPC::Encoder *v77;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
      if (!v76)
        return 15;
      v8 = v74;
      v9 = v75;
      v10 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v74;
      if (v10 >= (unint64_t)v74)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v75)
        {
          *(_WORD *)&v74[v11] = 1007;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (_QWORD)&v8[v12];
      if (v14 >= (unint64_t)&v8[v12])
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v16] = *a2;
          v12 = v17;
        }
      }
      v19 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (_QWORD)&v8[v12];
      if (v19 >= (unint64_t)&v8[v12])
      {
        v21 = v19 - (_QWORD)v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v21] = a2[1];
          v12 = v22;
        }
      }
      v24 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= (unint64_t)&v8[v12];
      v26 = v24 - (_QWORD)&v8[v12];
      if (v25)
      {
        v72 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)&v8[v27] = a2[2];
          v72 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v72 = v9;
      }
      v28 = (char *)((unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL);
      v29 = (char *)(v28 - &v8[v12]);
      if (v28 >= &v8[v12])
      {
        v29 = (char *)(v28 - v8);
        if ((unint64_t)(v28 - v8) > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_43;
        v12 = (unint64_t)(v29 + 4);
        if ((unint64_t)(v29 + 4) > v72)
          goto LABEL_43;
        *(_DWORD *)v28 = a2[3];
      }
      if (v72)
      {
        v30 = *(_QWORD *)(a1 + 64);
        v31 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *(_QWORD *)(a1 + 56);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v33 = v31 + v12;
        if (v32 <= v33)
          v34 = 0;
        else
          v34 = v33;
        *(_QWORD *)(a1 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v34, v35));
        if (v36 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v37 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v37;
      }
LABEL_43:
      if (v76)
      {
        v38 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v39 = v38 - (_QWORD)v74;
        if (v38 < (unint64_t)v74)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v75)
          {
            *(_WORD *)&v74[v39] = 2821;
            v40 = v39 + 2;
          }
        }
        v41 = *(_QWORD *)(a1 + 64);
        v42 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v43 = *(_QWORD *)(a1 + 56);
        if (v42 + 16 >= v43)
          v42 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v44 = v42 + v40;
        if (v43 <= v44)
          v44 = 0;
        *(_QWORD *)(a1 + 72) = v44;
        v45 = (unint64_t *)(*(_QWORD *)(v41 + 16) + 128);
        do
          __ldaxr(v45);
        while (__stlxr(v44, v45));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
        v46 = v73;
        v47 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v47 = 1007;
        *(_QWORD *)(v47 + 8) = a3;
        *(_QWORD *)(v47 + 528) = v47 + 16;
        *(_QWORD *)(v47 + 536) = v47 + 16;
        *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v47 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
        v77 = (IPC::Encoder *)v47;
        v48 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v48;
        v49 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v49;
        v50 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v50;
        v51 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v51;
        v37 = IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v77, 1, 0);
        v53 = v77;
        v77 = 0;
        if (v53)
        {
          IPC::Encoder::~Encoder(v53, v52);
          WTF::fastFree(v54, v55);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
        return v37;
      }
      __break(1u);
LABEL_101:
      v56 = 0;
LABEL_102:
      v59 = 0;
LABEL_69:
      v61 = (char *)((unint64_t)&v29[v59 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v61 >= &v29[v59])
      {
        v59 = v61 - v29 + 8;
        if ((unint64_t)(v61 - v29) > 0xFFFFFFFFFFFFFFF7 || v59 > v56)
          return 17;
        *(_QWORD *)v61 = a3;
      }
      if (!v56)
        return 17;
      v63 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v64 = *(_QWORD *)(a1 + 56);
      if (v63 + 16 >= v64)
        v63 = 0;
      if (v59 <= 0x10)
        v59 = 16;
      v65 = v63 + v59;
      if (v64 <= v65)
        v65 = 0;
      *(_QWORD *)(a1 + 72) = v65;
      v66 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v65, v66));
      v68 = *(_DWORD *)(a1 + 108);
      if (v67 == 0x80000000 || v68 != 0)
      {
        v71 = v68 + 1;
        *(_DWORD *)(a1 + 108) = v71;
        if (v71 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
  if (v76)
  {
    v29 = v74;
    v56 = v75;
    v57 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v58 = v57 - (_QWORD)v74;
    if (v57 < (unint64_t)v74)
      goto LABEL_102;
    v59 = v58 + 2;
    if (v58 > 0xFFFFFFFFFFFFFFFDLL || v59 > v75)
      goto LABEL_101;
    *(_WORD *)&v74[v58] = 2822;
    goto LABEL_69;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SampleCoverage,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  char v52;
  void *v53;
  IPC::Encoder *v54;
  WTF *v55;
  void *v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  IPC::Encoder *v61;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
  if (!v60)
    return 15;
  v25 = v58;
  v24 = v59;
  v26 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v27 = v26 - v58;
  if (v26 >= v58)
  {
    v28 = v27 + 2;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v28 <= v59)
    {
      *(_WORD *)(v58 + v27) = 2822;
      goto LABEL_38;
    }
    v24 = 0;
  }
  v28 = 0;
LABEL_38:
  v30 = (_QWORD *)((v25 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v30 >= v25 + v28)
  {
    v28 = (unint64_t)v30 - v25 + 8;
    if ((unint64_t)v30 - v25 > 0xFFFFFFFFFFFFFFF7 || v28 > v24)
      return 17;
    *v30 = a3;
  }
  if (!v24)
    return 17;
  v32 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v33 = *(_QWORD *)(a1 + 56);
  if (v32 + 16 >= v33)
    v32 = 0;
  if (v28 <= 0x10)
    v28 = 16;
  v34 = v32 + v28;
  if (v33 <= v34)
    v34 = 0;
  *(_QWORD *)(a1 + 72) = v34;
  v35 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v34, v35));
  v37 = *(_DWORD *)(a1 + 108);
  if (v36 == 0x80000000 || v37 != 0)
  {
    v40 = v37 + 1;
    *(_DWORD *)(a1 + 108) = v40;
    if (v40 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
  if (!v60)
    return 15;
  v8 = v58;
  v9 = v59;
  v10 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v58;
  if (v10 >= v58)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v59)
    {
      *(_WORD *)(v58 + v11) = 1012;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v14 >= v8 + v12)
  {
    v12 = (unint64_t)v14 - v8 + 4;
    if ((unint64_t)v14 - v8 > 0xFFFFFFFFFFFFFFFBLL || v12 > v9)
      goto LABEL_65;
    *v14 = *a2;
  }
  if (v12 < v9)
  {
    *(_BYTE *)(v8 + v12) = *((_BYTE *)a2 + 4);
    v16 = *(_QWORD *)(a1 + 64);
    v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v18 = *(_QWORD *)(a1 + 56);
    if (v17 + 16 >= v18)
      v17 = 0;
    if (v12 <= 0xF)
      v12 = 15;
    v19 = v12 + v17;
    if (v18 > v19 + 1)
      v20 = v19 + 1;
    else
      v20 = 0;
    *(_QWORD *)(a1 + 72) = v20;
    v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v20, v21));
    if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
      return 0;
    if (*(_BYTE *)(a1 + 96))
      MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
    v23 = 0;
    *(_DWORD *)(a1 + 108) = 0;
    return v23;
  }
LABEL_65:
  if (v60)
  {
    v41 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v42 = v41 - v58;
    if (v41 >= v58)
    {
      v43 = 0;
      if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v59)
      {
        *(_WORD *)(v58 + v42) = 2821;
        v43 = v42 + 2;
      }
      goto LABEL_70;
    }
  }
  else
  {
    __break(1u);
  }
  v43 = 0;
LABEL_70:
  v44 = *(_QWORD *)(a1 + 64);
  v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v46 = *(_QWORD *)(a1 + 56);
  if (v45 + 16 >= v46)
    v45 = 0;
  if (v43 <= 0x10)
    v43 = 16;
  v47 = v45 + v43;
  if (v46 <= v47)
    v47 = 0;
  *(_QWORD *)(a1 + 72) = v47;
  v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
  do
    __ldaxr(v48);
  while (__stlxr(v47, v48));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
  v49 = v57;
  v50 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v50 = 1012;
  *(_QWORD *)(v50 + 8) = a3;
  *(_QWORD *)(v50 + 528) = v50 + 16;
  *(_QWORD *)(v50 + 536) = v50 + 16;
  *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v50 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
  v61 = (IPC::Encoder *)v50;
  v51 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
  v52 = *((_BYTE *)a2 + 4);
  *IPC::Encoder::grow((IPC::Encoder *)v50, 1uLL, 1) = v52;
  v23 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v61, 1, 0);
  v54 = v61;
  v61 = 0;
  if (v54)
  {
    IPC::Encoder::~Encoder(v54, v53);
    WTF::fastFree(v55, v56);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v57);
  return v23;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Scissor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1015;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1015;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ShaderSource,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  void *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v42;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unsigned int v52;
  uint64_t *v53;
  IPC::Encoder *v54;
  unint64_t v55;
  char v56;
  IPC::Encoder *v57;
  unint64_t v58;
  unint64_t v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v54, a4);
      if (!v56)
        break;
      v57 = v54;
      v58 = v55;
      v59 = 0;
      v8 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v54;
      v10 = v8 - (_QWORD)v54;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v55)
        {
          v58 = 0;
        }
        else
        {
          *(_WORD *)((char *)v54 + v10) = 1019;
          v59 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(&v57, a2);
      if (v58)
      {
        v13 = v59;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v59 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v56)
      {
        v22 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v54;
        if (v22 < (unint64_t)v54)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v55)
          {
            *(_WORD *)((char *)v54 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)(a1 + 8));
        v30 = v53;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1019;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v57 = (IPC::Encoder *)v31;
        v32 = *(_DWORD *)a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, *(uint64_t **)(a2 + 8));
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v57, 1, 0);
        v34 = v57;
        v57 = 0;
        if (v34)
        {
          IPC::Encoder::~Encoder(v34, v33);
          WTF::fastFree(v35, v36);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v53);
        return v21;
      }
      __break(1u);
LABEL_78:
      v37 = 0;
LABEL_79:
      v40 = 0;
LABEL_49:
      v42 = (char *)(((unint64_t)v12 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v42 >= (char *)v12 + v40)
      {
        v40 = v42 - (char *)v12 + 8;
        if ((unint64_t)(v42 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v40 > v37)
          return 17;
        *(_QWORD *)v42 = a3;
      }
      if (!v37)
        return 17;
      v44 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v45 = *(_QWORD *)(a1 + 56);
      if (v44 + 16 >= v45)
        v44 = 0;
      if (v40 <= 0x10)
        v40 = 16;
      v46 = v44 + v40;
      if (v45 <= v46)
        v46 = 0;
      *(_QWORD *)(a1 + 72) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = *(_DWORD *)(a1 + 108);
      if (v48 == 0x80000000 || v49 != 0)
      {
        v52 = v49 + 1;
        *(_DWORD *)(a1 + 108) = v52;
        if (v52 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v57, a4);
    if ((_BYTE)v59)
    {
      v12 = v57;
      v37 = v58;
      v38 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v39 = v38 - (_QWORD)v57;
      if (v38 < (unint64_t)v57)
        goto LABEL_79;
      v40 = v39 + 2;
      if (v39 > 0xFFFFFFFFFFFFFFFDLL || v40 > v58)
        goto LABEL_78;
      *(_WORD *)((char *)v57 + v39) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  void *v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  IPC::Encoder *v72;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
      if (!v71)
        return 15;
      v8 = v69;
      v9 = v70;
      v10 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v69;
      if (v10 >= v69)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v70)
        {
          *(_WORD *)(v69 + v11) = 1021;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v24 >= v8 + v12)
      {
        v25 = (char *)v24 - v8;
        if ((unint64_t)v24 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_38;
        v12 = (unint64_t)(v25 + 4);
        if ((unint64_t)(v25 + 4) > v9)
          goto LABEL_38;
        *v24 = a2[2];
      }
      if (v9)
      {
        v26 = *(_QWORD *)(a1 + 64);
        v27 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(a1 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        v29 = 16;
        if (v12 > 0x10)
          v29 = v12;
        v30 = v27 + v29;
        if (v28 <= v30)
          v31 = 0;
        else
          v31 = v30;
        *(_QWORD *)(a1 + 72) = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v34 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v34;
      }
LABEL_38:
      if (v71)
      {
        v35 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v35 - v69;
        if (v35 < v69)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v70)
          {
            *(_WORD *)(v69 + v36) = 2821;
            v37 = v36 + 2;
          }
        }
        v38 = *(_QWORD *)(a1 + 64);
        v39 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v40 = *(_QWORD *)(a1 + 56);
        if (v39 + 16 >= v40)
          v39 = 0;
        if (v37 <= 0x10)
          v37 = 16;
        v41 = v39 + v37;
        if (v40 <= v41)
          v41 = 0;
        *(_QWORD *)(a1 + 72) = v41;
        v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
        do
          __ldaxr(v42);
        while (__stlxr(v41, v42));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(a1 + 8));
        v43 = v68;
        v44 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v44 = 1021;
        *(_QWORD *)(v44 + 8) = a3;
        *(_QWORD *)(v44 + 528) = v44 + 16;
        *(_QWORD *)(v44 + 536) = v44 + 16;
        *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v44 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
        v72 = (IPC::Encoder *)v44;
        v45 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v45;
        v46 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v46;
        v47 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v47;
        v34 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v72, 1, 0);
        v49 = v72;
        v72 = 0;
        if (v49)
        {
          IPC::Encoder::~Encoder(v49, v48);
          WTF::fastFree(v50, v51);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
        return v34;
      }
      __break(1u);
LABEL_96:
      v52 = 0;
LABEL_97:
      v55 = 0;
LABEL_64:
      v57 = (_QWORD *)((v12 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v57 >= v12 + v55)
      {
        v55 = (unint64_t)v57 - v12 + 8;
        if ((unint64_t)v57 - v12 > 0xFFFFFFFFFFFFFFF7 || v55 > v52)
          return 17;
        *v57 = a3;
      }
      if (!v52)
        return 17;
      v59 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v60 = *(_QWORD *)(a1 + 56);
      if (v59 + 16 >= v60)
        v59 = 0;
      if (v55 <= 0x10)
        v55 = 16;
      v61 = v59 + v55;
      if (v60 <= v61)
        v61 = 0;
      *(_QWORD *)(a1 + 72) = v61;
      v62 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v61, v62));
      v64 = *(_DWORD *)(a1 + 108);
      if (v63 == 0x80000000 || v64 != 0)
      {
        v67 = v64 + 1;
        *(_DWORD *)(a1 + 108) = v67;
        if (v67 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
  if (v71)
  {
    v12 = v69;
    v52 = v70;
    v53 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = v53 - v69;
    if (v53 < v69)
      goto LABEL_97;
    v55 = v54 + 2;
    if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v70)
      goto LABEL_96;
    *(_WORD *)(v69 + v54) = 2822;
    goto LABEL_64;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilFuncSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  char *v74;
  unint64_t v75;
  char v76;
  IPC::Encoder *v77;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
      if (!v76)
        return 15;
      v8 = v74;
      v9 = v75;
      v10 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v74;
      if (v10 >= (unint64_t)v74)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v75)
        {
          *(_WORD *)&v74[v11] = 1022;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (_QWORD)&v8[v12];
      if (v14 >= (unint64_t)&v8[v12])
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v16] = *a2;
          v12 = v17;
        }
      }
      v19 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (_QWORD)&v8[v12];
      if (v19 >= (unint64_t)&v8[v12])
      {
        v21 = v19 - (_QWORD)v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v21] = a2[1];
          v12 = v22;
        }
      }
      v24 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= (unint64_t)&v8[v12];
      v26 = v24 - (_QWORD)&v8[v12];
      if (v25)
      {
        v72 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)&v8[v27] = a2[2];
          v72 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v72 = v9;
      }
      v28 = (char *)((unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL);
      v29 = (char *)(v28 - &v8[v12]);
      if (v28 >= &v8[v12])
      {
        v29 = (char *)(v28 - v8);
        if ((unint64_t)(v28 - v8) > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_43;
        v12 = (unint64_t)(v29 + 4);
        if ((unint64_t)(v29 + 4) > v72)
          goto LABEL_43;
        *(_DWORD *)v28 = a2[3];
      }
      if (v72)
      {
        v30 = *(_QWORD *)(a1 + 64);
        v31 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *(_QWORD *)(a1 + 56);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v33 = v31 + v12;
        if (v32 <= v33)
          v34 = 0;
        else
          v34 = v33;
        *(_QWORD *)(a1 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v34, v35));
        if (v36 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v37 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v37;
      }
LABEL_43:
      if (v76)
      {
        v38 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v39 = v38 - (_QWORD)v74;
        if (v38 < (unint64_t)v74)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v75)
          {
            *(_WORD *)&v74[v39] = 2821;
            v40 = v39 + 2;
          }
        }
        v41 = *(_QWORD *)(a1 + 64);
        v42 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v43 = *(_QWORD *)(a1 + 56);
        if (v42 + 16 >= v43)
          v42 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v44 = v42 + v40;
        if (v43 <= v44)
          v44 = 0;
        *(_QWORD *)(a1 + 72) = v44;
        v45 = (unint64_t *)(*(_QWORD *)(v41 + 16) + 128);
        do
          __ldaxr(v45);
        while (__stlxr(v44, v45));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
        v46 = v73;
        v47 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v47 = 1022;
        *(_QWORD *)(v47 + 8) = a3;
        *(_QWORD *)(v47 + 528) = v47 + 16;
        *(_QWORD *)(v47 + 536) = v47 + 16;
        *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v47 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
        v77 = (IPC::Encoder *)v47;
        v48 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v48;
        v49 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v49;
        v50 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v50;
        v51 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v51;
        v37 = IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v77, 1, 0);
        v53 = v77;
        v77 = 0;
        if (v53)
        {
          IPC::Encoder::~Encoder(v53, v52);
          WTF::fastFree(v54, v55);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
        return v37;
      }
      __break(1u);
LABEL_101:
      v56 = 0;
LABEL_102:
      v59 = 0;
LABEL_69:
      v61 = (char *)((unint64_t)&v29[v59 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v61 >= &v29[v59])
      {
        v59 = v61 - v29 + 8;
        if ((unint64_t)(v61 - v29) > 0xFFFFFFFFFFFFFFF7 || v59 > v56)
          return 17;
        *(_QWORD *)v61 = a3;
      }
      if (!v56)
        return 17;
      v63 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v64 = *(_QWORD *)(a1 + 56);
      if (v63 + 16 >= v64)
        v63 = 0;
      if (v59 <= 0x10)
        v59 = 16;
      v65 = v63 + v59;
      if (v64 <= v65)
        v65 = 0;
      *(_QWORD *)(a1 + 72) = v65;
      v66 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v65, v66));
      v68 = *(_DWORD *)(a1 + 108);
      if (v67 == 0x80000000 || v68 != 0)
      {
        v71 = v68 + 1;
        *(_DWORD *)(a1 + 108) = v71;
        if (v71 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
  if (v76)
  {
    v29 = v74;
    v56 = v75;
    v57 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v58 = v57 - (_QWORD)v74;
    if (v57 < (unint64_t)v74)
      goto LABEL_102;
    v59 = v58 + 2;
    if (v58 > 0xFFFFFFFFFFFFFFFDLL || v59 > v75)
      goto LABEL_101;
    *(_WORD *)&v74[v58] = 2822;
    goto LABEL_69;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 1023;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 1023;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilMaskSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 1024;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1024;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilOp,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1025;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1025;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilOpSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1026;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1026;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1031;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1031;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v16;
  unint64_t v17;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v16 >= v2 + v3)
  {
    v17 = (unint64_t)v16 - v2 + 4;
    if ((unint64_t)v16 - v2 > 0xFFFFFFFFFFFFFFFBLL || v17 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v16 = a2[2];
      result[2] = v17;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v6;
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1032;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1032;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  void *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
      if (!v64)
        return 15;
      v8 = v62;
      v9 = v63;
      v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v62;
      if (v10 >= v62)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v63)
        {
          *(_WORD *)(v62 + v11) = 1040;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v19 >= v8 + v12)
      {
        v12 = (unint64_t)v19 - v8 + 4;
        if ((unint64_t)v19 - v8 > 0xFFFFFFFFFFFFFFFBLL || v12 > v9)
          goto LABEL_34;
        *v19 = a2[1];
      }
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 64);
        v22 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *(_QWORD *)(a1 + 56);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v24 = v22 + v12;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *(_QWORD *)(a1 + 72) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v28 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v28;
      }
LABEL_34:
      if (v64)
      {
        v29 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v62;
        if (v29 < v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)(v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(a1 + 64);
        v33 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(a1 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(a1 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(a1 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 1040;
        *(_QWORD *)(v38 + 8) = a3;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        v39 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v39;
        v40 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v40;
        v28 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v42 = v65;
        v65 = 0;
        if (v42)
        {
          IPC::Encoder::~Encoder(v42, v41);
          WTF::fastFree(v43, v44);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        return v28;
      }
      __break(1u);
LABEL_91:
      v45 = 0;
LABEL_92:
      v48 = 0;
LABEL_60:
      v50 = (_QWORD *)((v9 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v9 + v48)
      {
        v48 = (unint64_t)v50 - v9 + 8;
        if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
          return 17;
        *v50 = a3;
      }
      if (!v45)
        return 17;
      v52 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v53 = *(_QWORD *)(a1 + 56);
      if (v52 + 16 >= v53)
        v52 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v54 = v52 + v48;
      if (v53 <= v54)
        v54 = 0;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *(_DWORD *)(a1 + 108);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v60 = v57 + 1;
        *(_DWORD *)(a1 + 108) = v60;
        if (v60 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
  if (v64)
  {
    v9 = v62;
    v45 = v63;
    v46 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v62;
    if (v46 < v62)
      goto LABEL_92;
    v48 = v47 + 2;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v63)
      goto LABEL_91;
    *(_WORD *)(v62 + v47) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1041;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1041;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

_QWORD *IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = a1[2];
  v3 = *a1 + v2;
  v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v4 >= v3;
  v5 = v4 - v3;
  if (v9)
  {
    v6 = v5 + v2;
    v7 = v6 + 4;
    v8 = a1[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v9 = v7 >= v8;
      v10 = v7 == v8;
    }
    else
    {
      v9 = 1;
      v10 = 0;
    }
    if (!v10 && v9)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v6) = *(_DWORD *)a2;
      a1[2] = v7;
    }
  }
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, **(const void ***)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
}

char *IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(IPC::Encoder *a1, const void ***a2)
{
  int v4;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *a2[1], (uint64_t)a2[1][1]);
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 1042;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1042;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1043;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1043;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  void *v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  IPC::Encoder *v72;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
      if (!v71)
        return 15;
      v8 = v69;
      v9 = v70;
      v10 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v69;
      if (v10 >= v69)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v70)
        {
          *(_WORD *)(v69 + v11) = 1046;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v24 >= v8 + v12)
      {
        v25 = (char *)v24 - v8;
        if ((unint64_t)v24 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_38;
        v12 = (unint64_t)(v25 + 4);
        if ((unint64_t)(v25 + 4) > v9)
          goto LABEL_38;
        *v24 = a2[2];
      }
      if (v9)
      {
        v26 = *(_QWORD *)(a1 + 64);
        v27 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(a1 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        v29 = 16;
        if (v12 > 0x10)
          v29 = v12;
        v30 = v27 + v29;
        if (v28 <= v30)
          v31 = 0;
        else
          v31 = v30;
        *(_QWORD *)(a1 + 72) = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v34 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v34;
      }
LABEL_38:
      if (v71)
      {
        v35 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v35 - v69;
        if (v35 < v69)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v70)
          {
            *(_WORD *)(v69 + v36) = 2821;
            v37 = v36 + 2;
          }
        }
        v38 = *(_QWORD *)(a1 + 64);
        v39 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v40 = *(_QWORD *)(a1 + 56);
        if (v39 + 16 >= v40)
          v39 = 0;
        if (v37 <= 0x10)
          v37 = 16;
        v41 = v39 + v37;
        if (v40 <= v41)
          v41 = 0;
        *(_QWORD *)(a1 + 72) = v41;
        v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
        do
          __ldaxr(v42);
        while (__stlxr(v41, v42));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(a1 + 8));
        v43 = v68;
        v44 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v44 = 1046;
        *(_QWORD *)(v44 + 8) = a3;
        *(_QWORD *)(v44 + 528) = v44 + 16;
        *(_QWORD *)(v44 + 536) = v44 + 16;
        *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v44 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
        v72 = (IPC::Encoder *)v44;
        v45 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v45;
        v46 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v46;
        v47 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v47;
        v34 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v72, 1, 0);
        v49 = v72;
        v72 = 0;
        if (v49)
        {
          IPC::Encoder::~Encoder(v49, v48);
          WTF::fastFree(v50, v51);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
        return v34;
      }
      __break(1u);
LABEL_96:
      v52 = 0;
LABEL_97:
      v55 = 0;
LABEL_64:
      v57 = (_QWORD *)((v12 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v57 >= v12 + v55)
      {
        v55 = (unint64_t)v57 - v12 + 8;
        if ((unint64_t)v57 - v12 > 0xFFFFFFFFFFFFFFF7 || v55 > v52)
          return 17;
        *v57 = a3;
      }
      if (!v52)
        return 17;
      v59 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v60 = *(_QWORD *)(a1 + 56);
      if (v59 + 16 >= v60)
        v59 = 0;
      if (v55 <= 0x10)
        v55 = 16;
      v61 = v59 + v55;
      if (v60 <= v61)
        v61 = 0;
      *(_QWORD *)(a1 + 72) = v61;
      v62 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v61, v62));
      v64 = *(_DWORD *)(a1 + 108);
      if (v63 == 0x80000000 || v64 != 0)
      {
        v67 = v64 + 1;
        *(_DWORD *)(a1 + 108) = v67;
        if (v67 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
  if (v71)
  {
    v12 = v69;
    v52 = v70;
    v53 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = v53 - v69;
    if (v53 < v69)
      goto LABEL_97;
    v55 = v54 + 2;
    if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v70)
      goto LABEL_96;
    *(_WORD *)(v69 + v54) = 2822;
    goto LABEL_64;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1047;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1047;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  void *v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  IPC::Encoder *v72;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
      if (!v71)
        return 15;
      v8 = v69;
      v9 = v70;
      v10 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v69;
      if (v10 >= v69)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v70)
        {
          *(_WORD *)(v69 + v11) = 1048;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v24 >= v8 + v12)
      {
        v25 = (char *)v24 - v8;
        if ((unint64_t)v24 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_38;
        v12 = (unint64_t)(v25 + 4);
        if ((unint64_t)(v25 + 4) > v9)
          goto LABEL_38;
        *v24 = a2[2];
      }
      if (v9)
      {
        v26 = *(_QWORD *)(a1 + 64);
        v27 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(a1 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        v29 = 16;
        if (v12 > 0x10)
          v29 = v12;
        v30 = v27 + v29;
        if (v28 <= v30)
          v31 = 0;
        else
          v31 = v30;
        *(_QWORD *)(a1 + 72) = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v34 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v34;
      }
LABEL_38:
      if (v71)
      {
        v35 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v35 - v69;
        if (v35 < v69)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v70)
          {
            *(_WORD *)(v69 + v36) = 2821;
            v37 = v36 + 2;
          }
        }
        v38 = *(_QWORD *)(a1 + 64);
        v39 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v40 = *(_QWORD *)(a1 + 56);
        if (v39 + 16 >= v40)
          v39 = 0;
        if (v37 <= 0x10)
          v37 = 16;
        v41 = v39 + v37;
        if (v40 <= v41)
          v41 = 0;
        *(_QWORD *)(a1 + 72) = v41;
        v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
        do
          __ldaxr(v42);
        while (__stlxr(v41, v42));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(a1 + 8));
        v43 = v68;
        v44 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v44 = 1048;
        *(_QWORD *)(v44 + 8) = a3;
        *(_QWORD *)(v44 + 528) = v44 + 16;
        *(_QWORD *)(v44 + 536) = v44 + 16;
        *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v44 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
        v72 = (IPC::Encoder *)v44;
        v45 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v45;
        v46 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v46;
        v47 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v47;
        v34 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v72, 1, 0);
        v49 = v72;
        v72 = 0;
        if (v49)
        {
          IPC::Encoder::~Encoder(v49, v48);
          WTF::fastFree(v50, v51);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
        return v34;
      }
      __break(1u);
LABEL_96:
      v52 = 0;
LABEL_97:
      v55 = 0;
LABEL_64:
      v57 = (_QWORD *)((v12 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v57 >= v12 + v55)
      {
        v55 = (unint64_t)v57 - v12 + 8;
        if ((unint64_t)v57 - v12 > 0xFFFFFFFFFFFFFFF7 || v55 > v52)
          return 17;
        *v57 = a3;
      }
      if (!v52)
        return 17;
      v59 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v60 = *(_QWORD *)(a1 + 56);
      if (v59 + 16 >= v60)
        v59 = 0;
      if (v55 <= 0x10)
        v55 = 16;
      v61 = v59 + v55;
      if (v60 <= v61)
        v61 = 0;
      *(_QWORD *)(a1 + 72) = v61;
      v62 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v61, v62));
      v64 = *(_DWORD *)(a1 + 108);
      if (v63 == 0x80000000 || v64 != 0)
      {
        v67 = v64 + 1;
        *(_DWORD *)(a1 + 108) = v67;
        if (v67 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
  if (v71)
  {
    v12 = v69;
    v52 = v70;
    v53 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = v53 - v69;
    if (v53 < v69)
      goto LABEL_97;
    v55 = v54 + 2;
    if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v70)
      goto LABEL_96;
    *(_WORD *)(v69 + v54) = 2822;
    goto LABEL_64;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1049;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1049;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  char *v74;
  unint64_t v75;
  char v76;
  IPC::Encoder *v77;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
      if (!v76)
        return 15;
      v8 = v74;
      v9 = v75;
      v10 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v74;
      if (v10 >= (unint64_t)v74)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v75)
        {
          *(_WORD *)&v74[v11] = 1052;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (_QWORD)&v8[v12];
      if (v14 >= (unint64_t)&v8[v12])
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v16] = *a2;
          v12 = v17;
        }
      }
      v19 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (_QWORD)&v8[v12];
      if (v19 >= (unint64_t)&v8[v12])
      {
        v21 = v19 - (_QWORD)v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v21] = a2[1];
          v12 = v22;
        }
      }
      v24 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= (unint64_t)&v8[v12];
      v26 = v24 - (_QWORD)&v8[v12];
      if (v25)
      {
        v72 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)&v8[v27] = a2[2];
          v72 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v72 = v9;
      }
      v28 = (char *)((unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL);
      v29 = (char *)(v28 - &v8[v12]);
      if (v28 >= &v8[v12])
      {
        v29 = (char *)(v28 - v8);
        if ((unint64_t)(v28 - v8) > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_43;
        v12 = (unint64_t)(v29 + 4);
        if ((unint64_t)(v29 + 4) > v72)
          goto LABEL_43;
        *(_DWORD *)v28 = a2[3];
      }
      if (v72)
      {
        v30 = *(_QWORD *)(a1 + 64);
        v31 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *(_QWORD *)(a1 + 56);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v33 = v31 + v12;
        if (v32 <= v33)
          v34 = 0;
        else
          v34 = v33;
        *(_QWORD *)(a1 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v34, v35));
        if (v36 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v37 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v37;
      }
LABEL_43:
      if (v76)
      {
        v38 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v39 = v38 - (_QWORD)v74;
        if (v38 < (unint64_t)v74)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v75)
          {
            *(_WORD *)&v74[v39] = 2821;
            v40 = v39 + 2;
          }
        }
        v41 = *(_QWORD *)(a1 + 64);
        v42 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v43 = *(_QWORD *)(a1 + 56);
        if (v42 + 16 >= v43)
          v42 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v44 = v42 + v40;
        if (v43 <= v44)
          v44 = 0;
        *(_QWORD *)(a1 + 72) = v44;
        v45 = (unint64_t *)(*(_QWORD *)(v41 + 16) + 128);
        do
          __ldaxr(v45);
        while (__stlxr(v44, v45));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
        v46 = v73;
        v47 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v47 = 1052;
        *(_QWORD *)(v47 + 8) = a3;
        *(_QWORD *)(v47 + 528) = v47 + 16;
        *(_QWORD *)(v47 + 536) = v47 + 16;
        *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v47 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
        v77 = (IPC::Encoder *)v47;
        v48 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v48;
        v49 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v49;
        v50 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v50;
        v51 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v51;
        v37 = IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v77, 1, 0);
        v53 = v77;
        v77 = 0;
        if (v53)
        {
          IPC::Encoder::~Encoder(v53, v52);
          WTF::fastFree(v54, v55);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
        return v37;
      }
      __break(1u);
LABEL_101:
      v56 = 0;
LABEL_102:
      v59 = 0;
LABEL_69:
      v61 = (char *)((unint64_t)&v29[v59 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v61 >= &v29[v59])
      {
        v59 = v61 - v29 + 8;
        if ((unint64_t)(v61 - v29) > 0xFFFFFFFFFFFFFFF7 || v59 > v56)
          return 17;
        *(_QWORD *)v61 = a3;
      }
      if (!v56)
        return 17;
      v63 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v64 = *(_QWORD *)(a1 + 56);
      if (v63 + 16 >= v64)
        v63 = 0;
      if (v59 <= 0x10)
        v59 = 16;
      v65 = v63 + v59;
      if (v64 <= v65)
        v65 = 0;
      *(_QWORD *)(a1 + 72) = v65;
      v66 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v65, v66));
      v68 = *(_DWORD *)(a1 + 108);
      if (v67 == 0x80000000 || v68 != 0)
      {
        v71 = v68 + 1;
        *(_DWORD *)(a1 + 108) = v71;
        if (v71 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
  if (v76)
  {
    v29 = v74;
    v56 = v75;
    v57 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v58 = v57 - (_QWORD)v74;
    if (v57 < (unint64_t)v74)
      goto LABEL_102;
    v59 = v58 + 2;
    if (v58 > 0xFFFFFFFFFFFFFFFDLL || v59 > v75)
      goto LABEL_101;
    *(_WORD *)&v74[v58] = 2822;
    goto LABEL_69;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1053;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1053;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1054;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1054;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1055;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1055;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 1058;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v76 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v76 = v9;
      }
      v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v76)
        {
          *(_DWORD *)(v8 + v30) = a2[3];
          v77 = v76;
          v12 = v30 + 4;
        }
      }
      else
      {
        v77 = v76;
      }
      v31 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 4);
        if ((unint64_t)(v32 + 4) > v77)
          goto LABEL_48;
        *v31 = a2[4];
      }
      if (v77)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 1058;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v55 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v77 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v77 + v63)
      {
        v63 = (unint64_t)v65 - v77 + 8;
        if ((unint64_t)v65 - v77 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v77 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1059;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1059;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 1060;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v76 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v76 = v9;
      }
      v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v76)
        {
          *(_DWORD *)(v8 + v30) = a2[3];
          v77 = v76;
          v12 = v30 + 4;
        }
      }
      else
      {
        v77 = v76;
      }
      v31 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 4);
        if ((unint64_t)(v32 + 4) > v77)
          goto LABEL_48;
        *v31 = a2[4];
      }
      if (v77)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 1060;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v55 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v77 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v77 + v63)
      {
        v63 = (unint64_t)v65 - v77 + 8;
        if ((unint64_t)v65 - v77 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v77 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1061;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1061;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1065;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1065;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

_QWORD *IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = a1[2];
  v3 = *a1 + v2;
  v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v4 >= v3;
  v5 = v4 - v3;
  if (v9)
  {
    v6 = v5 + v2;
    v7 = v5 + v2 + 4;
    v8 = a1[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v9 = v7 >= v8;
      v10 = v7 == v8;
    }
    else
    {
      v9 = 1;
      v10 = 0;
    }
    if (!v10 && v9)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v6) = *(_DWORD *)a2;
      a1[2] = v7;
      v2 = v7;
    }
  }
  if (v2 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v2) = *(_BYTE *)(a2 + 4);
    a1[2] = v2 + 1;
  }
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, **(const void ***)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
}

char *IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, int *a2)
{
  int v4;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 4);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, **((const void ***)a2 + 1), *(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1068;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1068;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1071;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1071;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UseProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 1074;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 1074;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ValidateProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 1075;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 1075;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib1f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  void *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
      if (!v64)
        return 15;
      v8 = v62;
      v9 = v63;
      v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v62;
      if (v10 >= v62)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v63)
        {
          *(_WORD *)(v62 + v11) = 1076;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v19 >= v8 + v12)
      {
        v12 = (unint64_t)v19 - v8 + 4;
        if ((unint64_t)v19 - v8 > 0xFFFFFFFFFFFFFFFBLL || v12 > v9)
          goto LABEL_34;
        *v19 = a2[1];
      }
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 64);
        v22 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *(_QWORD *)(a1 + 56);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v24 = v22 + v12;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *(_QWORD *)(a1 + 72) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v28 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v28;
      }
LABEL_34:
      if (v64)
      {
        v29 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v62;
        if (v29 < v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)(v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(a1 + 64);
        v33 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(a1 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(a1 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(a1 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 1076;
        *(_QWORD *)(v38 + 8) = a3;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        v39 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v39;
        v40 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v40;
        v28 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v42 = v65;
        v65 = 0;
        if (v42)
        {
          IPC::Encoder::~Encoder(v42, v41);
          WTF::fastFree(v43, v44);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        return v28;
      }
      __break(1u);
LABEL_91:
      v45 = 0;
LABEL_92:
      v48 = 0;
LABEL_60:
      v50 = (_QWORD *)((v9 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v9 + v48)
      {
        v48 = (unint64_t)v50 - v9 + 8;
        if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
          return 17;
        *v50 = a3;
      }
      if (!v45)
        return 17;
      v52 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v53 = *(_QWORD *)(a1 + 56);
      if (v52 + 16 >= v53)
        v52 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v54 = v52 + v48;
      if (v53 <= v54)
        v54 = 0;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *(_DWORD *)(a1 + 108);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v60 = v57 + 1;
        *(_DWORD *)(a1 + 108) = v60;
        if (v60 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
  if (v64)
  {
    v9 = v62;
    v45 = v63;
    v46 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v62;
    if (v46 < v62)
      goto LABEL_92;
    v48 = v47 + 2;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v63)
      goto LABEL_91;
    *(_WORD *)(v62 + v47) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib1fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  _DWORD *v40;
  void *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
      if (!v64)
        return 15;
      v8 = v62;
      v9 = v63;
      v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v62;
      if (v10 >= v62)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v63)
        {
          *(_WORD *)(v62 + v11) = 1077;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v19 >= v8 + v12)
      {
        v12 = (unint64_t)v19 - v8 + 4;
        if ((unint64_t)v19 - v8 > 0xFFFFFFFFFFFFFFFBLL || v12 > v9)
          goto LABEL_34;
        *v19 = ***((_DWORD ***)a2 + 1);
      }
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 64);
        v22 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *(_QWORD *)(a1 + 56);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v24 = v22 + v12;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *(_QWORD *)(a1 + 72) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v28 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v28;
      }
LABEL_34:
      if (v64)
      {
        v29 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v62;
        if (v29 < v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)(v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(a1 + 64);
        v33 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(a1 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(a1 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(a1 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 1077;
        *(_QWORD *)(v38 + 8) = a3;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        v39 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v39;
        v40 = (_DWORD *)**((_QWORD **)a2 + 1);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = *v40;
        v28 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v42 = v65;
        v65 = 0;
        if (v42)
        {
          IPC::Encoder::~Encoder(v42, v41);
          WTF::fastFree(v43, v44);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        return v28;
      }
      __break(1u);
LABEL_91:
      v45 = 0;
LABEL_92:
      v48 = 0;
LABEL_60:
      v50 = (_QWORD *)((v9 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v9 + v48)
      {
        v48 = (unint64_t)v50 - v9 + 8;
        if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
          return 17;
        *v50 = a3;
      }
      if (!v45)
        return 17;
      v52 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v53 = *(_QWORD *)(a1 + 56);
      if (v52 + 16 >= v53)
        v52 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v54 = v52 + v48;
      if (v53 <= v54)
        v54 = 0;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *(_DWORD *)(a1 + 108);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v60 = v57 + 1;
        *(_DWORD *)(a1 + 108) = v60;
        if (v60 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
  if (v64)
  {
    v9 = v62;
    v45 = v63;
    v46 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v62;
    if (v46 < v62)
      goto LABEL_92;
    v48 = v47 + 2;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v63)
      goto LABEL_91;
    *(_WORD *)(v62 + v47) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib2f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  void *v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  IPC::Encoder *v72;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
      if (!v71)
        return 15;
      v8 = v69;
      v9 = v70;
      v10 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v69;
      if (v10 >= v69)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v70)
        {
          *(_WORD *)(v69 + v11) = 1078;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v24 >= v8 + v12)
      {
        v25 = (char *)v24 - v8;
        if ((unint64_t)v24 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_38;
        v12 = (unint64_t)(v25 + 4);
        if ((unint64_t)(v25 + 4) > v9)
          goto LABEL_38;
        *v24 = a2[2];
      }
      if (v9)
      {
        v26 = *(_QWORD *)(a1 + 64);
        v27 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(a1 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        v29 = 16;
        if (v12 > 0x10)
          v29 = v12;
        v30 = v27 + v29;
        if (v28 <= v30)
          v31 = 0;
        else
          v31 = v30;
        *(_QWORD *)(a1 + 72) = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v34 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v34;
      }
LABEL_38:
      if (v71)
      {
        v35 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v35 - v69;
        if (v35 < v69)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v70)
          {
            *(_WORD *)(v69 + v36) = 2821;
            v37 = v36 + 2;
          }
        }
        v38 = *(_QWORD *)(a1 + 64);
        v39 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v40 = *(_QWORD *)(a1 + 56);
        if (v39 + 16 >= v40)
          v39 = 0;
        if (v37 <= 0x10)
          v37 = 16;
        v41 = v39 + v37;
        if (v40 <= v41)
          v41 = 0;
        *(_QWORD *)(a1 + 72) = v41;
        v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
        do
          __ldaxr(v42);
        while (__stlxr(v41, v42));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(a1 + 8));
        v43 = v68;
        v44 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v44 = 1078;
        *(_QWORD *)(v44 + 8) = a3;
        *(_QWORD *)(v44 + 528) = v44 + 16;
        *(_QWORD *)(v44 + 536) = v44 + 16;
        *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v44 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
        v72 = (IPC::Encoder *)v44;
        v45 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v45;
        v46 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v46;
        v47 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v47;
        v34 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v72, 1, 0);
        v49 = v72;
        v72 = 0;
        if (v49)
        {
          IPC::Encoder::~Encoder(v49, v48);
          WTF::fastFree(v50, v51);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
        return v34;
      }
      __break(1u);
LABEL_96:
      v52 = 0;
LABEL_97:
      v55 = 0;
LABEL_64:
      v57 = (_QWORD *)((v12 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v57 >= v12 + v55)
      {
        v55 = (unint64_t)v57 - v12 + 8;
        if ((unint64_t)v57 - v12 > 0xFFFFFFFFFFFFFFF7 || v55 > v52)
          return 17;
        *v57 = a3;
      }
      if (!v52)
        return 17;
      v59 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v60 = *(_QWORD *)(a1 + 56);
      if (v59 + 16 >= v60)
        v59 = 0;
      if (v55 <= 0x10)
        v55 = 16;
      v61 = v59 + v55;
      if (v60 <= v61)
        v61 = 0;
      *(_QWORD *)(a1 + 72) = v61;
      v62 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v61, v62));
      v64 = *(_DWORD *)(a1 + 108);
      if (v63 == 0x80000000 || v64 != 0)
      {
        v67 = v64 + 1;
        *(_DWORD *)(a1 + 108) = v67;
        if (v67 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
  if (v71)
  {
    v12 = v69;
    v52 = v70;
    v53 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = v53 - v69;
    if (v53 < v69)
      goto LABEL_97;
    v55 = v54 + 2;
    if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v70)
      goto LABEL_96;
    *(_WORD *)(v69 + v54) = 2822;
    goto LABEL_64;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  void *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
      if (!v64)
        return 15;
      v8 = v62;
      v9 = v63;
      v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v62;
      if (v10 >= v62)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v63)
        {
          *(_WORD *)(v62 + v11) = 1079;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (_QWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v19 >= v8 + v12)
      {
        v12 = (unint64_t)v19 - v8 + 8;
        if ((unint64_t)v19 - v8 > 0xFFFFFFFFFFFFFFF7 || v12 > v9)
          goto LABEL_34;
        *v19 = ***((_QWORD ***)a2 + 1);
      }
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 64);
        v22 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *(_QWORD *)(a1 + 56);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v24 = v22 + v12;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *(_QWORD *)(a1 + 72) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v28 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v28;
      }
LABEL_34:
      if (v64)
      {
        v29 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v62;
        if (v29 < v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)(v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(a1 + 64);
        v33 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(a1 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(a1 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(a1 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 1079;
        *(_QWORD *)(v38 + 8) = a3;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        v39 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v39;
        v40 = (_QWORD *)**((_QWORD **)a2 + 1);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 8) = *v40;
        v28 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v42 = v65;
        v65 = 0;
        if (v42)
        {
          IPC::Encoder::~Encoder(v42, v41);
          WTF::fastFree(v43, v44);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        return v28;
      }
      __break(1u);
LABEL_91:
      v45 = 0;
LABEL_92:
      v48 = 0;
LABEL_60:
      v50 = (_QWORD *)((v9 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v9 + v48)
      {
        v48 = (unint64_t)v50 - v9 + 8;
        if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
          return 17;
        *v50 = a3;
      }
      if (!v45)
        return 17;
      v52 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v53 = *(_QWORD *)(a1 + 56);
      if (v52 + 16 >= v53)
        v52 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v54 = v52 + v48;
      if (v53 <= v54)
        v54 = 0;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *(_DWORD *)(a1 + 108);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v60 = v57 + 1;
        *(_DWORD *)(a1 + 108) = v60;
        if (v60 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
  if (v64)
  {
    v9 = v62;
    v45 = v63;
    v46 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v62;
    if (v46 < v62)
      goto LABEL_92;
    v48 = v47 + 2;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v63)
      goto LABEL_91;
    *(_WORD *)(v62 + v47) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib3f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  char *v74;
  unint64_t v75;
  char v76;
  IPC::Encoder *v77;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
      if (!v76)
        return 15;
      v8 = v74;
      v9 = v75;
      v10 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v74;
      if (v10 >= (unint64_t)v74)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v75)
        {
          *(_WORD *)&v74[v11] = 1080;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (_QWORD)&v8[v12];
      if (v14 >= (unint64_t)&v8[v12])
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v16] = *a2;
          v12 = v17;
        }
      }
      v19 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (_QWORD)&v8[v12];
      if (v19 >= (unint64_t)&v8[v12])
      {
        v21 = v19 - (_QWORD)v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v21] = a2[1];
          v12 = v22;
        }
      }
      v24 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= (unint64_t)&v8[v12];
      v26 = v24 - (_QWORD)&v8[v12];
      if (v25)
      {
        v72 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)&v8[v27] = a2[2];
          v72 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v72 = v9;
      }
      v28 = (char *)((unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL);
      v29 = (char *)(v28 - &v8[v12]);
      if (v28 >= &v8[v12])
      {
        v29 = (char *)(v28 - v8);
        if ((unint64_t)(v28 - v8) > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_43;
        v12 = (unint64_t)(v29 + 4);
        if ((unint64_t)(v29 + 4) > v72)
          goto LABEL_43;
        *(_DWORD *)v28 = a2[3];
      }
      if (v72)
      {
        v30 = *(_QWORD *)(a1 + 64);
        v31 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *(_QWORD *)(a1 + 56);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v33 = v31 + v12;
        if (v32 <= v33)
          v34 = 0;
        else
          v34 = v33;
        *(_QWORD *)(a1 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v34, v35));
        if (v36 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v37 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v37;
      }
LABEL_43:
      if (v76)
      {
        v38 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v39 = v38 - (_QWORD)v74;
        if (v38 < (unint64_t)v74)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v75)
          {
            *(_WORD *)&v74[v39] = 2821;
            v40 = v39 + 2;
          }
        }
        v41 = *(_QWORD *)(a1 + 64);
        v42 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v43 = *(_QWORD *)(a1 + 56);
        if (v42 + 16 >= v43)
          v42 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v44 = v42 + v40;
        if (v43 <= v44)
          v44 = 0;
        *(_QWORD *)(a1 + 72) = v44;
        v45 = (unint64_t *)(*(_QWORD *)(v41 + 16) + 128);
        do
          __ldaxr(v45);
        while (__stlxr(v44, v45));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
        v46 = v73;
        v47 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v47 = 1080;
        *(_QWORD *)(v47 + 8) = a3;
        *(_QWORD *)(v47 + 528) = v47 + 16;
        *(_QWORD *)(v47 + 536) = v47 + 16;
        *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v47 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
        v77 = (IPC::Encoder *)v47;
        v48 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v48;
        v49 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v49;
        v50 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v50;
        v51 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v51;
        v37 = IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v77, 1, 0);
        v53 = v77;
        v77 = 0;
        if (v53)
        {
          IPC::Encoder::~Encoder(v53, v52);
          WTF::fastFree(v54, v55);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
        return v37;
      }
      __break(1u);
LABEL_101:
      v56 = 0;
LABEL_102:
      v59 = 0;
LABEL_69:
      v61 = (char *)((unint64_t)&v29[v59 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v61 >= &v29[v59])
      {
        v59 = v61 - v29 + 8;
        if ((unint64_t)(v61 - v29) > 0xFFFFFFFFFFFFFFF7 || v59 > v56)
          return 17;
        *(_QWORD *)v61 = a3;
      }
      if (!v56)
        return 17;
      v63 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v64 = *(_QWORD *)(a1 + 56);
      if (v63 + 16 >= v64)
        v63 = 0;
      if (v59 <= 0x10)
        v59 = 16;
      v65 = v63 + v59;
      if (v64 <= v65)
        v65 = 0;
      *(_QWORD *)(a1 + 72) = v65;
      v66 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v65, v66));
      v68 = *(_DWORD *)(a1 + 108);
      if (v67 == 0x80000000 || v68 != 0)
      {
        v71 = v68 + 1;
        *(_DWORD *)(a1 + 108) = v71;
        if (v71 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
  if (v76)
  {
    v29 = v74;
    v56 = v75;
    v57 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v58 = v57 - (_QWORD)v74;
    if (v57 < (unint64_t)v74)
      goto LABEL_102;
    v59 = v58 + 2;
    if (v58 > 0xFFFFFFFFFFFFFFFDLL || v59 > v75)
      goto LABEL_101;
    *(_WORD *)&v74[v58] = 2822;
    goto LABEL_69;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  int v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned int v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  IPC::Encoder *v70;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v67, a4);
      if (!v69)
        return 15;
      v9 = v67;
      v8 = v68;
      v10 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v67;
      if (v10 >= v67)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v68)
        {
          *(_WORD *)(v67 + v11) = 1081;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v9 + v12);
      if (v14 >= v9 + v12)
      {
        v16 = v14 - v9;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v8)
        {
          v8 = 0;
        }
        else
        {
          *(_DWORD *)(v9 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      if (v19 >= v9 + v12)
      {
        v20 = v19 - v9;
        v12 = v19 - v9 + 12;
        if (v19 - v9 > 0xFFFFFFFFFFFFFFF3 || v12 > v8)
          goto LABEL_34;
        v22 = (uint64_t *)**((_QWORD **)a2 + 1);
        v9 += v20;
        v23 = *v22;
        *(_DWORD *)(v9 + 8) = *((_DWORD *)v22 + 2);
        *(_QWORD *)v9 = v23;
      }
      if (v8)
      {
        v24 = *(_QWORD *)(a1 + 64);
        v25 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(a1 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v27 = v25 + v12;
        if (v26 <= v27)
          v28 = 0;
        else
          v28 = v27;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v28, v29));
        if (v30 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v31 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v31;
      }
LABEL_34:
      if (v69)
      {
        v32 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v33 = v32 - v67;
        if (v32 < v67)
        {
          v34 = 0;
        }
        else
        {
          v34 = 0;
          if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v68)
          {
            *(_WORD *)(v67 + v33) = 2821;
            v34 = v33 + 2;
          }
        }
        v35 = *(_QWORD *)(a1 + 64);
        v36 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v37 = *(_QWORD *)(a1 + 56);
        if (v36 + 16 >= v37)
          v36 = 0;
        if (v34 <= 0x10)
          v34 = 16;
        v38 = v36 + v34;
        if (v37 <= v38)
          v38 = 0;
        *(_QWORD *)(a1 + 72) = v38;
        v39 = (unint64_t *)(*(_QWORD *)(v35 + 16) + 128);
        do
          __ldaxr(v39);
        while (__stlxr(v38, v39));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)(a1 + 8));
        v40 = v66;
        v41 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v41 = 1081;
        *(_QWORD *)(v41 + 8) = a3;
        *(_QWORD *)(v41 + 528) = v41 + 16;
        *(_QWORD *)(v41 + 536) = v41 + 16;
        *(_OWORD *)(v41 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v41 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v41);
        v70 = (IPC::Encoder *)v41;
        v42 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v41, 4uLL, 4) = v42;
        v43 = **((_QWORD **)a2 + 1);
        v44 = IPC::Encoder::grow((IPC::Encoder *)v41, 4uLL, 12);
        v45 = *(_DWORD *)(v43 + 8);
        *(_QWORD *)v44 = *(_QWORD *)v43;
        *((_DWORD *)v44 + 2) = v45;
        v31 = IPC::Connection::sendMessageImpl((uint64_t)v40, (uint64_t *)&v70, 1, 0);
        v47 = v70;
        v70 = 0;
        if (v47)
        {
          IPC::Encoder::~Encoder(v47, v46);
          WTF::fastFree(v48, v49);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v66);
        return v31;
      }
      __break(1u);
LABEL_91:
      v50 = 0;
LABEL_92:
      v53 = 0;
LABEL_60:
      v55 = (_QWORD *)((v9 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v55 >= v9 + v53)
      {
        v53 = (unint64_t)v55 - v9 + 8;
        if ((unint64_t)v55 - v9 > 0xFFFFFFFFFFFFFFF7 || v53 > v50)
          return 17;
        *v55 = a3;
      }
      if (!v50)
        return 17;
      v57 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v58 = *(_QWORD *)(a1 + 56);
      if (v57 + 16 >= v58)
        v57 = 0;
      if (v53 <= 0x10)
        v53 = 16;
      v59 = v57 + v53;
      if (v58 <= v59)
        v59 = 0;
      *(_QWORD *)(a1 + 72) = v59;
      v60 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v59, v60));
      v62 = *(_DWORD *)(a1 + 108);
      if (v61 == 0x80000000 || v62 != 0)
      {
        v65 = v62 + 1;
        *(_DWORD *)(a1 + 108) = v65;
        if (v65 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v67, a4);
  if (v69)
  {
    v9 = v67;
    v50 = v68;
    v51 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = v51 - v67;
    if (v51 < v67)
      goto LABEL_92;
    v53 = v52 + 2;
    if (v52 > 0xFFFFFFFFFFFFFFFDLL || v53 > v68)
      goto LABEL_91;
    *(_WORD *)(v67 + v52) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib4f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 1082;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v76 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v76 = v9;
      }
      v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v76)
        {
          *(_DWORD *)(v8 + v30) = a2[3];
          v77 = v76;
          v12 = v30 + 4;
        }
      }
      else
      {
        v77 = v76;
      }
      v31 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 4);
        if ((unint64_t)(v32 + 4) > v77)
          goto LABEL_48;
        *v31 = a2[4];
      }
      if (v77)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 1082;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v55 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v77 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v77 + v63)
      {
        v63 = (unint64_t)v65 - v77 + 8;
        if ((unint64_t)v65 - v77 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v77 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  _OWORD *v40;
  void *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
      if (!v64)
        return 15;
      v8 = v62;
      v9 = v63;
      v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v62;
      if (v10 >= v62)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v63)
        {
          *(_WORD *)(v62 + v11) = 1083;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (_OWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v19 >= v8 + v12)
      {
        v12 = (unint64_t)v19 - v8 + 16;
        if ((unint64_t)v19 - v8 > 0xFFFFFFFFFFFFFFEFLL || v12 > v9)
          goto LABEL_34;
        *v19 = *(_OWORD *)**((_QWORD **)a2 + 1);
      }
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 64);
        v22 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *(_QWORD *)(a1 + 56);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v24 = v22 + v12;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *(_QWORD *)(a1 + 72) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v28 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v28;
      }
LABEL_34:
      if (v64)
      {
        v29 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v62;
        if (v29 < v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)(v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(a1 + 64);
        v33 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(a1 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(a1 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(a1 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 1083;
        *(_QWORD *)(v38 + 8) = a3;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        v39 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v39;
        v40 = (_OWORD *)**((_QWORD **)a2 + 1);
        *(_OWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 16) = *v40;
        v28 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v42 = v65;
        v65 = 0;
        if (v42)
        {
          IPC::Encoder::~Encoder(v42, v41);
          WTF::fastFree(v43, v44);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        return v28;
      }
      __break(1u);
LABEL_91:
      v45 = 0;
LABEL_92:
      v48 = 0;
LABEL_60:
      v50 = (_QWORD *)((v9 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v9 + v48)
      {
        v48 = (unint64_t)v50 - v9 + 8;
        if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
          return 17;
        *v50 = a3;
      }
      if (!v45)
        return 17;
      v52 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v53 = *(_QWORD *)(a1 + 56);
      if (v52 + 16 >= v53)
        v52 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v54 = v52 + v48;
      if (v53 <= v54)
        v54 = 0;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *(_DWORD *)(a1 + 108);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v60 = v57 + 1;
        *(_DWORD *)(a1 + 108) = v60;
        if (v60 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
  if (v64)
  {
    v9 = v62;
    v45 = v63;
    v46 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v62;
    if (v46 < v62)
      goto LABEL_92;
    v48 = v47 + 2;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v63)
      goto LABEL_91;
    *(_WORD *)(v62 + v47) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribPointer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 1090;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v77 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v77 = v9;
      }
      if (v12 >= v77)
        v77 = 0;
      else
        *(_BYTE *)(v8 + v12++) = *((_BYTE *)a2 + 12);
      v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v77)
        {
          *(_DWORD *)(v8 + v30) = a2[4];
          v76 = v77;
          v12 = v30 + 4;
        }
      }
      else
      {
        v76 = v77;
      }
      v31 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_50;
        v12 = (unint64_t)(v32 + 8);
        if ((unint64_t)(v32 + 8) > v76)
          goto LABEL_50;
        *v31 = *((_QWORD *)a2 + 3);
      }
      if (v76)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_50:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 1090;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        LOBYTE(v53) = *((_BYTE *)a2 + 12);
        *IPC::Encoder::grow((IPC::Encoder *)v50, 1uLL, 1) = v53;
        v54 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v55 = *((_QWORD *)a2 + 3);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 8uLL, 8) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_109:
      v60 = 0;
LABEL_110:
      v63 = 0;
LABEL_76:
      v65 = (_QWORD *)((v76 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v76 + v63)
      {
        v63 = (unint64_t)v65 - v76 + 8;
        if ((unint64_t)v65 - v76 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v76 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_110;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_109;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_76;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Viewport,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1091;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1091;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferData0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  void *v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  IPC::Encoder *v72;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
      if (!v71)
        return 15;
      v8 = v69;
      v9 = v70;
      v10 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v69;
      if (v10 >= v69)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v70)
        {
          *(_WORD *)(v69 + v11) = 905;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 8;
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_QWORD *)(v8 + v21) = *((_QWORD *)a2 + 1);
          v12 = v22;
        }
      }
      v24 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v24 >= v8 + v12)
      {
        v25 = (char *)v24 - v8;
        if ((unint64_t)v24 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_38;
        v12 = (unint64_t)(v25 + 4);
        if ((unint64_t)(v25 + 4) > v9)
          goto LABEL_38;
        *v24 = a2[4];
      }
      if (v9)
      {
        v26 = *(_QWORD *)(a1 + 64);
        v27 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(a1 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        v29 = 16;
        if (v12 > 0x10)
          v29 = v12;
        v30 = v27 + v29;
        if (v28 <= v30)
          v31 = 0;
        else
          v31 = v30;
        *(_QWORD *)(a1 + 72) = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v34 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v34;
      }
LABEL_38:
      if (v71)
      {
        v35 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v35 - v69;
        if (v35 < v69)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v70)
          {
            *(_WORD *)(v69 + v36) = 2821;
            v37 = v36 + 2;
          }
        }
        v38 = *(_QWORD *)(a1 + 64);
        v39 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v40 = *(_QWORD *)(a1 + 56);
        if (v39 + 16 >= v40)
          v39 = 0;
        if (v37 <= 0x10)
          v37 = 16;
        v41 = v39 + v37;
        if (v40 <= v41)
          v41 = 0;
        *(_QWORD *)(a1 + 72) = v41;
        v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
        do
          __ldaxr(v42);
        while (__stlxr(v41, v42));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(a1 + 8));
        v43 = v68;
        v44 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v44 = 905;
        *(_QWORD *)(v44 + 8) = a3;
        *(_QWORD *)(v44 + 528) = v44 + 16;
        *(_QWORD *)(v44 + 536) = v44 + 16;
        *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v44 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
        v72 = (IPC::Encoder *)v44;
        v45 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v45;
        v46 = *((_QWORD *)a2 + 1);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 8uLL, 8) = v46;
        v47 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v47;
        v34 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v72, 1, 0);
        v49 = v72;
        v72 = 0;
        if (v49)
        {
          IPC::Encoder::~Encoder(v49, v48);
          WTF::fastFree(v50, v51);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
        return v34;
      }
      __break(1u);
LABEL_96:
      v52 = 0;
LABEL_97:
      v55 = 0;
LABEL_64:
      v57 = (_QWORD *)((v12 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v57 >= v12 + v55)
      {
        v55 = (unint64_t)v57 - v12 + 8;
        if ((unint64_t)v57 - v12 > 0xFFFFFFFFFFFFFFF7 || v55 > v52)
          return 17;
        *v57 = a3;
      }
      if (!v52)
        return 17;
      v59 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v60 = *(_QWORD *)(a1 + 56);
      if (v59 + 16 >= v60)
        v59 = 0;
      if (v55 <= 0x10)
        v55 = 16;
      v61 = v59 + v55;
      if (v60 <= v61)
        v61 = 0;
      *(_QWORD *)(a1 + 72) = v61;
      v62 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v61, v62));
      v64 = *(_DWORD *)(a1 + 108);
      if (v63 == 0x80000000 || v64 != 0)
      {
        v67 = v64 + 1;
        *(_DWORD *)(a1 + 108) = v67;
        if (v67 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
  if (v71)
  {
    v12 = v69;
    v52 = v70;
    v53 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = v53 - v69;
    if (v53 < v69)
      goto LABEL_97;
    v55 = v54 + 2;
    if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v70)
      goto LABEL_96;
    *(_WORD *)(v69 + v54) = 2822;
    goto LABEL_64;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferData1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  unint64_t v16;
  char *v17;
  IPC::Encoder *v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  void *v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unsigned int v59;
  uint64_t *v60;
  IPC::Encoder *v61;
  unint64_t v62;
  char v63;
  IPC::Encoder *v64;
  unint64_t v65;
  uint64_t v66;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v61, a4);
      if (!v63)
        return 15;
      v8 = v61;
      v9 = v62;
      v64 = v61;
      v65 = v62;
      v66 = 0;
      v10 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v61;
      if (v10 < (unint64_t)v61)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v62)
        {
          v9 = 0;
          v12 = 0;
          v65 = 0;
        }
        else
        {
          *(_WORD *)((char *)v61 + v11) = 906;
          v66 = v11 + 2;
        }
      }
      v14 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v14 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v14 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || v14 - (char *)v8 + 4 > v9)
        {
          v65 = 0;
        }
        else
        {
          *(_DWORD *)v14 = *(_DWORD *)a2;
          v66 = v14 - (char *)v8 + 4;
        }
      }
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v64, *a2[1], (size_t)a2[1][1]);
      v16 = v66;
      v17 = (char *)(((unint64_t)v64 + v66 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v18 = (IPC::Encoder *)(v17 - ((char *)v64 + v66));
      if (v17 >= (char *)v64 + v66)
      {
        v18 = (IPC::Encoder *)(v17 - (char *)v64);
        v16 = v17 - (char *)v64 + 4;
        if ((unint64_t)(v17 - (char *)v64) > 0xFFFFFFFFFFFFFFFBLL || v16 > v65)
          goto LABEL_34;
        *(_DWORD *)v17 = *((_DWORD *)a2 + 4);
        v66 = (uint64_t)v18 + 4;
      }
      if (v65)
      {
        v20 = *(_QWORD *)(a1 + 64);
        v21 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = *(_QWORD *)(a1 + 56);
        if (v21 + 16 >= v22)
          v21 = 0;
        if (v16 <= 0x10)
          v16 = 16;
        v23 = v21 + v16;
        if (v22 <= v23)
          v24 = 0;
        else
          v24 = v23;
        *(_QWORD *)(a1 + 72) = v24;
        v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v24, v25));
        if (v26 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
LABEL_34:
      if (v63)
      {
        v28 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = v28 - (_QWORD)v61;
        if (v28 < (unint64_t)v61)
        {
          v30 = 0;
        }
        else
        {
          v30 = 0;
          if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v62)
          {
            *(_WORD *)((char *)v61 + v29) = 2821;
            v30 = v29 + 2;
          }
        }
        v31 = *(_QWORD *)(a1 + 64);
        v32 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v33 = *(_QWORD *)(a1 + 56);
        if (v32 + 16 >= v33)
          v32 = 0;
        if (v30 <= 0x10)
          v30 = 16;
        v34 = v32 + v30;
        if (v33 <= v34)
          v34 = 0;
        *(_QWORD *)(a1 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v31 + 16) + 128);
        do
          __ldaxr(v35);
        while (__stlxr(v34, v35));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)(a1 + 8));
        v36 = v60;
        v37 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v37 = 906;
        *(_QWORD *)(v37 + 8) = a3;
        *(_QWORD *)(v37 + 528) = v37 + 16;
        *(_QWORD *)(v37 + 536) = v37 + 16;
        *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v37 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
        v64 = (IPC::Encoder *)v37;
        v38 = *(_DWORD *)a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 4uLL, 4) = v38;
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v37, *a2[1], (size_t)a2[1][1]);
        v39 = *((_DWORD *)a2 + 4);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 4uLL, 4) = v39;
        v27 = IPC::Connection::sendMessageImpl((uint64_t)v36, (uint64_t *)&v64, 1, 0);
        v41 = v64;
        v64 = 0;
        if (v41)
        {
          IPC::Encoder::~Encoder(v41, v40);
          WTF::fastFree(v42, v43);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v60);
        return v27;
      }
      __break(1u);
LABEL_90:
      v44 = 0;
LABEL_91:
      v47 = 0;
LABEL_60:
      v49 = (char *)(((unint64_t)v18 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v49 >= (char *)v18 + v47)
      {
        v47 = v49 - (char *)v18 + 8;
        if ((unint64_t)(v49 - (char *)v18) > 0xFFFFFFFFFFFFFFF7 || v47 > v44)
          return 17;
        *(_QWORD *)v49 = a3;
      }
      if (!v44)
        return 17;
      v51 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v52 = *(_QWORD *)(a1 + 56);
      if (v51 + 16 >= v52)
        v51 = 0;
      if (v47 <= 0x10)
        v47 = 16;
      v53 = v51 + v47;
      if (v52 <= v53)
        v53 = 0;
      *(_QWORD *)(a1 + 72) = v53;
      v54 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v53, v54));
      v56 = *(_DWORD *)(a1 + 108);
      if (v55 == 0x80000000 || v56 != 0)
      {
        v59 = v56 + 1;
        *(_DWORD *)(a1 + 108) = v59;
        if (v59 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v64, a4);
  if ((_BYTE)v66)
  {
    v18 = v64;
    v44 = v65;
    v45 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = v45 - (_QWORD)v64;
    if (v45 < (unint64_t)v64)
      goto LABEL_91;
    v47 = v46 + 2;
    if (v46 > 0xFFFFFFFFFFFFFFFDLL || v47 > v65)
      goto LABEL_90;
    *(_WORD *)((char *)v64 + v46) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferSubData,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  IPC::Encoder *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  unint64_t v65;
  char v66;
  IPC::Encoder *v67;
  unint64_t v68;
  unint64_t v69;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v64, a4);
      if (!v66)
        break;
      v8 = v64;
      v9 = v65;
      v67 = v64;
      v68 = v65;
      v69 = 0;
      v10 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v64;
      if (v10 < (unint64_t)v64)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v65)
        {
          v9 = 0;
          v12 = 0;
          v68 = 0;
        }
        else
        {
          *(_WORD *)((char *)v64 + v11) = 907;
          v69 = v11 + 2;
        }
      }
      v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - ((_QWORD)v8 + v12);
      if (v14 >= (unint64_t)v8 + v12)
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
          v68 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v8 + v16) = *a2;
          v69 = v17;
          v12 = v17;
        }
      }
      v19 = (char *)(((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v19 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v19 - (char *)v8) > 0xFFFFFFFFFFFFFFF7 || v19 - (char *)v8 + 8 > v9)
        {
          v68 = 0;
        }
        else
        {
          *(_QWORD *)v19 = *((_QWORD *)a2 + 1);
          v69 = v19 - (char *)v8 + 8;
        }
      }
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v67, **((const void ***)a2 + 2), *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
      if (v68)
      {
        v22 = v69;
        v23 = *(_QWORD *)(a1 + 64);
        v24 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = *(_QWORD *)(a1 + 56);
        if (v24 + 16 >= v25)
          v24 = 0;
        if (v69 <= 0x10)
          v22 = 16;
        v26 = v24 + v22;
        if (v25 <= v26)
          v27 = 0;
        else
          v27 = v26;
        *(_QWORD *)(a1 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v27, v28));
        if (v29 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v66)
      {
        v31 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = v31 - (_QWORD)v64;
        if (v31 < (unint64_t)v64)
        {
          v33 = 0;
        }
        else
        {
          v33 = 0;
          if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v65)
          {
            *(_WORD *)((char *)v64 + v32) = 2821;
            v33 = v32 + 2;
          }
        }
        v34 = *(_QWORD *)(a1 + 64);
        v35 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = *(_QWORD *)(a1 + 56);
        if (v35 + 16 >= v36)
          v35 = 0;
        if (v33 <= 0x10)
          v33 = 16;
        v37 = v35 + v33;
        if (v36 <= v37)
          v37 = 0;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 128);
        do
          __ldaxr(v38);
        while (__stlxr(v37, v38));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)(a1 + 8));
        v39 = v63;
        v40 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v40 = 907;
        *(_QWORD *)(v40 + 8) = a3;
        *(_QWORD *)(v40 + 528) = v40 + 16;
        *(_QWORD *)(v40 + 536) = v40 + 16;
        *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v40 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
        v67 = (IPC::Encoder *)v40;
        v41 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 4uLL, 4) = v41;
        v42 = *((_QWORD *)a2 + 1);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 8uLL, 8) = v42;
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v40, **((const void ***)a2 + 2), *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
        v30 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v67, 1, 0);
        v44 = v67;
        v67 = 0;
        if (v44)
        {
          IPC::Encoder::~Encoder(v44, v43);
          WTF::fastFree(v45, v46);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v63);
        return v30;
      }
      __break(1u);
LABEL_91:
      v47 = 0;
LABEL_92:
      v50 = 0;
LABEL_60:
      v52 = (char *)(((unint64_t)v21 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v52 >= (char *)v21 + v50)
      {
        v50 = v52 - (char *)v21 + 8;
        if ((unint64_t)(v52 - (char *)v21) > 0xFFFFFFFFFFFFFFF7 || v50 > v47)
          return 17;
        *(_QWORD *)v52 = a3;
      }
      if (!v47)
        return 17;
      v54 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v55 = *(_QWORD *)(a1 + 56);
      if (v54 + 16 >= v55)
        v54 = 0;
      if (v50 <= 0x10)
        v50 = 16;
      v56 = v54 + v50;
      if (v55 <= v56)
        v56 = 0;
      *(_QWORD *)(a1 + 72) = v56;
      v57 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v56, v57));
      v59 = *(_DWORD *)(a1 + 108);
      if (v58 == 0x80000000 || v59 != 0)
      {
        v62 = v59 + 1;
        *(_DWORD *)(a1 + 108) = v62;
        if (v62 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v67, a4);
    if ((_BYTE)v69)
    {
      v21 = v67;
      v47 = v68;
      v48 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = v48 - (_QWORD)v67;
      if (v48 < (unint64_t)v67)
        goto LABEL_92;
      v50 = v49 + 2;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL || v50 > v68)
        goto LABEL_91;
      *(_WORD *)((char *)v67 + v49) = 2822;
      goto LABEL_60;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ReadPixelsBufferObject,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v12;
  IPC::Encoder *v13;
  IPC::Encoder *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  void *v55;
  IPC::Encoder *v56;
  WTF *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v64;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  unsigned int v74;
  uint64_t *v75;
  IPC::Encoder *v76;
  unint64_t v77;
  char v78;
  IPC::Encoder *v79;
  IPC::Encoder *v80;
  unint64_t v81;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v76, a4);
      if (!v78)
        return 15;
      v79 = v76;
      v80 = (IPC::Encoder *)v77;
      v81 = 0;
      v8 = ((unint64_t)v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v76;
      v10 = v8 - (_QWORD)v76;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v77)
        {
          v80 = 0;
        }
        else
        {
          *(_WORD *)((char *)v76 + v10) = 1006;
          v81 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::IntRect,void>::encode((uint64_t *)&v79, *(uint64_t **)a2);
      v13 = v80;
      v12 = v81;
      v14 = v79;
      v15 = ((unint64_t)v79 + v81 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v16 = v15 - ((_QWORD)v79 + v81);
      if (v15 >= (unint64_t)v79 + v81)
      {
        v17 = v15 - (_QWORD)v79;
        v18 = v16 + v81 + 4;
        if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > (unint64_t)v80)
        {
          v13 = 0;
          v80 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v79 + v17) = *(_DWORD *)(a2 + 8);
          v81 = v18;
          v14 = v79;
          v13 = v80;
          v12 = v18;
        }
      }
      v20 = ((unint64_t)v14 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v21 = v20 - ((_QWORD)v14 + v12);
      if (v20 >= (unint64_t)v14 + v12)
      {
        v22 = v20 - (_QWORD)v14;
        v23 = v21 + v12 + 4;
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > (unint64_t)v13)
        {
          v13 = 0;
          v80 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v14 + v22) = *(_DWORD *)(a2 + 12);
          v81 = v23;
          v14 = v79;
          v13 = v80;
          v12 = v23;
        }
      }
      v25 = ((unint64_t)v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v26 = v25 - ((_QWORD)v14 + v12);
      if (v25 >= (unint64_t)v14 + v12)
      {
        v27 = v25 - (_QWORD)v14;
        if (v26 + v12 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > (unint64_t)v13)
        {
          v13 = 0;
          v80 = 0;
        }
        else
        {
          *(_QWORD *)((char *)v14 + v27) = *(_QWORD *)(a2 + 16);
          v81 = v27 + 8;
          v14 = v79;
          v13 = v80;
          v12 = v27 + 8;
        }
      }
      v28 = ((unint64_t)v14 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v29 = v28 - ((_QWORD)v14 + v12);
      if (v28 >= (unint64_t)v14 + v12)
      {
        v30 = v28 - (_QWORD)v14;
        if (v29 + v12 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > (unint64_t)v13)
        {
          v13 = 0;
          v80 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v14 + v30) = *(_DWORD *)(a2 + 24);
          v81 = v30 + 4;
          v14 = v79;
          v13 = v80;
          v12 = v30 + 4;
        }
      }
      v31 = (char *)(((unint64_t)v14 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v31 >= (char *)v14 + v12)
      {
        v32 = v31 - (char *)v14;
        if ((unint64_t)(v31 - (char *)v14) > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_47;
        v12 = v32 + 4;
        if (v32 + 4 > (unint64_t)v13)
          goto LABEL_47;
        *(_DWORD *)v31 = *(_DWORD *)(a2 + 28);
        v81 = v32 + 4;
        v13 = v80;
      }
      if (v13)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
LABEL_47:
      if (v78)
      {
        v41 = ((unint64_t)v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - (_QWORD)v76;
        if (v41 < (unint64_t)v76)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v77)
          {
            *(_WORD *)((char *)v76 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v75, (uint64_t **)(a1 + 8));
        v49 = v75;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 1006;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v79 = (IPC::Encoder *)v50;
        IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v50, *(uint64_t **)a2);
        v51 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 8uLL, 8) = v53;
        LODWORD(v53) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = *(_DWORD *)(a2 + 28);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v79, 1, 0);
        v56 = v79;
        v79 = 0;
        if (v56)
        {
          IPC::Encoder::~Encoder(v56, v55);
          WTF::fastFree(v57, v58);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v75);
        return v40;
      }
      __break(1u);
LABEL_106:
      v59 = 0;
LABEL_107:
      v62 = 0;
LABEL_73:
      v64 = (char *)(((unint64_t)v13 + v62 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v64 >= (char *)v13 + v62)
      {
        v62 = v64 - (char *)v13 + 8;
        if ((unint64_t)(v64 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v62 > v59)
          return 17;
        *(_QWORD *)v64 = a3;
      }
      if (!v59)
        return 17;
      v66 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v67 = *(_QWORD *)(a1 + 56);
      if (v66 + 16 >= v67)
        v66 = 0;
      if (v62 <= 0x10)
        v62 = 16;
      v68 = v66 + v62;
      if (v67 <= v68)
        v68 = 0;
      *(_QWORD *)(a1 + 72) = v68;
      v69 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v68, v69));
      v71 = *(_DWORD *)(a1 + 108);
      if (v70 == 0x80000000 || v71 != 0)
      {
        v74 = v71 + 1;
        *(_DWORD *)(a1 + 108) = v74;
        if (v74 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if ((_BYTE)v81)
  {
    v13 = v79;
    v59 = (unint64_t)v80;
    v60 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v61 = v60 - (_QWORD)v79;
    if (v60 < (unint64_t)v79)
      goto LABEL_107;
    v62 = v61 + 2;
    if (v61 > 0xFFFFFFFFFFFFFFFDLL || v62 > (unint64_t)v80)
      goto LABEL_106;
    *(_WORD *)((char *)v79 + v61) = 2822;
    goto LABEL_73;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  void *v60;
  IPC::Encoder *v61;
  WTF *v62;
  void *v63;
  unint64_t v64;
  IPC::Encoder *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v70;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  unsigned int v80;
  uint64_t *v81;
  IPC::Encoder *v82;
  unint64_t v83;
  unsigned __int8 v84;
  IPC::Encoder *v85;
  unint64_t v86;
  unint64_t v87;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v85, a4);
  if (!(_BYTE)v87)
    return 15;
  v65 = v85;
  v64 = v86;
  v66 = ((unint64_t)v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v67 = v66 - (_QWORD)v85;
  if (v66 >= (unint64_t)v85)
  {
    v68 = v67 + 2;
    if (v67 <= 0xFFFFFFFFFFFFFFFDLL && v68 <= v86)
    {
      *(_WORD *)((char *)v85 + v67) = 2822;
      goto LABEL_82;
    }
    v64 = 0;
  }
  v68 = 0;
LABEL_82:
  v70 = (char *)(((unint64_t)v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v70 >= (char *)v65 + v68)
  {
    v68 = v70 - (char *)v65 + 8;
    if ((unint64_t)(v70 - (char *)v65) > 0xFFFFFFFFFFFFFFF7 || v68 > v64)
      return 17;
    *(_QWORD *)v70 = a3;
  }
  if (!v64)
    return 17;
  v72 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = *(_QWORD *)(a1 + 56);
  if (v72 + 16 >= v73)
    v72 = 0;
  if (v68 <= 0x10)
    v68 = 16;
  v74 = v72 + v68;
  if (v73 <= v74)
    v74 = 0;
  *(_QWORD *)(a1 + 72) = v74;
  v75 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v74, v75));
  v77 = *(_DWORD *)(a1 + 108);
  if (v76 == 0x80000000 || v77 != 0)
  {
    v80 = v77 + 1;
    *(_DWORD *)(a1 + 108) = v80;
    if (v80 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v82, a4);
  if (!v84)
    return 15;
  v8 = v82;
  v9 = v83;
  v85 = v82;
  v86 = v83;
  v87 = 0;
  v10 = ((unint64_t)v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - (_QWORD)v82;
  if (v10 < (unint64_t)v82)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v83)
    {
      v9 = 0;
      v12 = 0;
      v86 = 0;
    }
    else
    {
      *(_WORD *)((char *)v82 + v11) = 1027;
      v87 = v11 + 2;
    }
  }
  v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - ((_QWORD)v8 + v12);
  if (v14 >= (unint64_t)v8 + v12)
  {
    v16 = v14 - (_QWORD)v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
      v87 = v17;
      v12 = v17;
    }
  }
  v19 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - ((_QWORD)v8 + v12);
  if (v19 >= (unint64_t)v8 + v12)
  {
    v21 = v19 - (_QWORD)v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v21) = *((_DWORD *)a2 + 1);
      v87 = v22;
      v12 = v22;
    }
  }
  v24 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v24 >= (char *)v8 + v12)
  {
    v25 = (char *)(v24 - (char *)v8);
    if ((unint64_t)(v24 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v25 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v24 = *((_DWORD *)a2 + 2);
      v87 = (unint64_t)(v25 + 4);
      v12 = (unint64_t)(v25 + 4);
    }
  }
  v26 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v26 >= (char *)v8 + v12)
  {
    v27 = (char *)(v26 - (char *)v8);
    if ((unint64_t)(v26 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v26 = *((_DWORD *)a2 + 3);
      v87 = (unint64_t)(v27 + 4);
      v12 = (unint64_t)(v27 + 4);
    }
  }
  v28 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v28 >= (char *)v8 + v12)
  {
    v29 = (char *)(v28 - (char *)v8);
    if ((unint64_t)(v28 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v29 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v28 = *((_DWORD *)a2 + 4);
      v87 = (unint64_t)(v29 + 4);
      v12 = (unint64_t)(v29 + 4);
    }
  }
  v30 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v30 >= (char *)v8 + v12)
  {
    v31 = (char *)(v30 - (char *)v8);
    if ((unint64_t)(v30 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v31 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v30 = *((_DWORD *)a2 + 5);
      v87 = (unint64_t)(v31 + 4);
      v12 = (unint64_t)(v31 + 4);
    }
  }
  v32 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v32 >= (char *)v8 + v12)
  {
    v33 = (char *)(v32 - (char *)v8);
    if ((unint64_t)(v32 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v33 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v32 = *((_DWORD *)a2 + 6);
      v87 = (unint64_t)(v33 + 4);
      v12 = (unint64_t)(v33 + 4);
    }
  }
  v34 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v34 >= (char *)v8 + v12)
  {
    v35 = (char *)(v34 - (char *)v8);
    if ((unint64_t)(v34 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v35 + 4) > v9)
    {
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v34 = *((_DWORD *)a2 + 7);
      v87 = (unint64_t)(v35 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v85, *a2[4], (size_t)a2[4][1]);
  if (v86)
  {
    v37 = v87;
    v38 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v36 = *(_QWORD *)(a1 + 56);
    if (v38 + 16 < v36)
    {
LABEL_47:
      if (v37 <= 0x10)
        v37 = 16;
      v39 = v38 + v37;
      if (v36 <= v39)
        v39 = 0;
      *(_QWORD *)(a1 + 72) = v39;
      v40 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v39, v40));
      if (v41 == 0x80000000 || *(_DWORD *)(a1 + 108))
      {
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        *(_DWORD *)(a1 + 108) = 0;
      }
      return 0;
    }
LABEL_119:
    v38 = 0;
    goto LABEL_47;
  }
  v37 = v84;
  if (!v84)
  {
    __break(1u);
    goto LABEL_119;
  }
  v43 = ((unint64_t)v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v44 = v43 - (_QWORD)v82;
  if (v43 < (unint64_t)v82)
  {
    v45 = 0;
  }
  else
  {
    v45 = 0;
    if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= v83)
    {
      *(_WORD *)((char *)v82 + v44) = 2821;
      v45 = v44 + 2;
    }
  }
  v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = *(_QWORD *)(a1 + 56);
  if (v46 + 16 >= v47)
    v46 = 0;
  if (v45 <= 0x10)
    v45 = 16;
  v48 = v46 + v45;
  if (v47 <= v48)
    v48 = 0;
  *(_QWORD *)(a1 + 72) = v48;
  v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v49);
  while (__stlxr(v48, v49));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v81, (uint64_t **)(a1 + 8));
  v50 = v81;
  v51 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v51 = 1027;
  *(_QWORD *)(v51 + 8) = a3;
  *(_QWORD *)(v51 + 528) = v51 + 16;
  *(_QWORD *)(v51 + 536) = v51 + 16;
  *(_OWORD *)(v51 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v51 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v51);
  v85 = (IPC::Encoder *)v51;
  v52 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v52;
  v53 = *((_DWORD *)a2 + 1);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v53;
  v54 = *((_DWORD *)a2 + 2);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v54;
  v55 = *((_DWORD *)a2 + 3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v55;
  v56 = *((_DWORD *)a2 + 4);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v56;
  v57 = *((_DWORD *)a2 + 5);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v57;
  v58 = *((_DWORD *)a2 + 6);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v58;
  v59 = *((_DWORD *)a2 + 7);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v59;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v51, *a2[4], (size_t)a2[4][1]);
  v42 = IPC::Connection::sendMessageImpl((uint64_t)v50, (uint64_t *)&v85, 1, 0);
  v61 = v85;
  v85 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v60);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v81);
  return v42;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  void *v70;
  IPC::Encoder *v71;
  WTF *v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v80;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unsigned __int8 v100;
  IPC::Encoder *v101;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v98, a4);
  if (!v100)
    return 15;
  v75 = v98;
  v74 = v99;
  v76 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v77 = v76 - v98;
  if (v76 >= v98)
  {
    v78 = v77 + 2;
    if (v77 <= 0xFFFFFFFFFFFFFFFDLL && v78 <= v99)
    {
      *(_WORD *)(v98 + v77) = 2822;
      goto LABEL_93;
    }
    v74 = 0;
  }
  v78 = 0;
LABEL_93:
  v80 = (_QWORD *)((v75 + v78 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v80 >= v75 + v78)
  {
    v78 = (unint64_t)v80 - v75 + 8;
    if ((unint64_t)v80 - v75 > 0xFFFFFFFFFFFFFFF7 || v78 > v74)
      return 17;
    *v80 = a3;
  }
  if (!v74)
    return 17;
  v82 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v83 = *(_QWORD *)(a1 + 56);
  if (v82 + 16 >= v83)
    v82 = 0;
  if (v78 <= 0x10)
    v78 = 16;
  v84 = v82 + v78;
  if (v83 <= v84)
    v84 = 0;
  *(_QWORD *)(a1 + 72) = v84;
  v85 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v84, v85));
  v87 = *(_DWORD *)(a1 + 108);
  if (v86 == 0x80000000 || v87 != 0)
  {
    v90 = v87 + 1;
    *(_DWORD *)(a1 + 108) = v90;
    if (v90 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v98, a4);
  if (!v100)
    return 15;
  v8 = v98;
  v9 = v99;
  v10 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v98;
  if (v10 >= v98)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v99)
    {
      *(_WORD *)(v98 + v11) = 1028;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v94 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v94 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v94 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v91 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v94)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v91 = v94;
      v12 = v30 + 4;
    }
  }
  else
  {
    v91 = v94;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v92 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v91)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v92 = v91;
      v12 = v33 + 4;
    }
  }
  else
  {
    v92 = v91;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v34 >= v8 + v12;
  v35 = v34 - (v8 + v12);
  if (v25)
  {
    v93 = 0;
    v36 = v35 + v12;
    if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= v92)
    {
      *(_DWORD *)(v8 + v36) = a2[5];
      v93 = v92;
      v12 = v36 + 4;
    }
  }
  else
  {
    v93 = v92;
  }
  v37 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v37 >= v8 + v12;
  v38 = v37 - (v8 + v12);
  if (v25)
  {
    v95 = 0;
    v39 = v38 + v12;
    if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= v93)
    {
      *(_DWORD *)(v8 + v39) = a2[6];
      v95 = v93;
      v12 = v39 + 4;
    }
  }
  else
  {
    v95 = v93;
  }
  v40 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v40 >= v8 + v12;
  v41 = v40 - (v8 + v12);
  if (v25)
  {
    v96 = 0;
    v42 = v41 + v12;
    if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= v95)
    {
      *(_DWORD *)(v8 + v42) = a2[7];
      v96 = v95;
      v12 = v42 + 4;
    }
  }
  else
  {
    v96 = v95;
  }
  v43 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v43 >= v8 + v12)
  {
    v44 = (char *)v43 - v8;
    if ((unint64_t)v43 - v8 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_67;
    v12 = (unint64_t)(v44 + 8);
    if ((unint64_t)(v44 + 8) > v96)
      goto LABEL_67;
    *v43 = *((_QWORD *)a2 + 4);
  }
  if (v96)
  {
    v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = *(_QWORD *)(a1 + 56);
    if (v45 + 16 < v46)
    {
LABEL_57:
      if (v12 <= 0x10)
        v12 = 16;
      v47 = v45 + v12;
      if (v46 <= v47)
        v48 = 0;
      else
        v48 = v47;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      if (v50 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v51 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v51;
    }
LABEL_125:
    v45 = 0;
    goto LABEL_57;
  }
LABEL_67:
  v46 = v100;
  if (!v100)
  {
    __break(1u);
    goto LABEL_125;
  }
  v52 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v98;
  if (v52 < v98)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v99)
    {
      *(_WORD *)(v98 + v53) = 2821;
      v54 = v53 + 2;
    }
  }
  v55 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = *(_QWORD *)(a1 + 56);
  if (v55 + 16 >= v56)
    v55 = 0;
  if (v54 <= 0x10)
    v54 = 16;
  v57 = v55 + v54;
  if (v56 <= v57)
    v57 = 0;
  *(_QWORD *)(a1 + 72) = v57;
  v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v58);
  while (__stlxr(v57, v58));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v97, (uint64_t **)(a1 + 8));
  v59 = v97;
  v60 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v60 = 1028;
  *(_QWORD *)(v60 + 8) = a3;
  *(_QWORD *)(v60 + 528) = v60 + 16;
  *(_QWORD *)(v60 + 536) = v60 + 16;
  *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v60 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
  v101 = (IPC::Encoder *)v60;
  v61 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v61;
  v62 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v62;
  v63 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v63;
  v64 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v64;
  v65 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v65;
  v66 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v66;
  v67 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v67;
  v68 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v68;
  v69 = *((_QWORD *)a2 + 4);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 8uLL, 8) = v69;
  v51 = IPC::Connection::sendMessageImpl((uint64_t)v59, (uint64_t *)&v101, 1, 0);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    IPC::Encoder::~Encoder(v71, v70);
    WTF::fastFree(v72, v73);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v97);
  return v51;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  void *v60;
  IPC::Encoder *v61;
  WTF *v62;
  void *v63;
  unint64_t v64;
  IPC::Encoder *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v70;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  unsigned int v80;
  uint64_t *v81;
  IPC::Encoder *v82;
  unint64_t v83;
  unsigned __int8 v84;
  IPC::Encoder *v85;
  unint64_t v86;
  unint64_t v87;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v85, a4);
  if (!(_BYTE)v87)
    return 15;
  v65 = v85;
  v64 = v86;
  v66 = ((unint64_t)v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v67 = v66 - (_QWORD)v85;
  if (v66 >= (unint64_t)v85)
  {
    v68 = v67 + 2;
    if (v67 <= 0xFFFFFFFFFFFFFFFDLL && v68 <= v86)
    {
      *(_WORD *)((char *)v85 + v67) = 2822;
      goto LABEL_82;
    }
    v64 = 0;
  }
  v68 = 0;
LABEL_82:
  v70 = (char *)(((unint64_t)v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v70 >= (char *)v65 + v68)
  {
    v68 = v70 - (char *)v65 + 8;
    if ((unint64_t)(v70 - (char *)v65) > 0xFFFFFFFFFFFFFFF7 || v68 > v64)
      return 17;
    *(_QWORD *)v70 = a3;
  }
  if (!v64)
    return 17;
  v72 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = *(_QWORD *)(a1 + 56);
  if (v72 + 16 >= v73)
    v72 = 0;
  if (v68 <= 0x10)
    v68 = 16;
  v74 = v72 + v68;
  if (v73 <= v74)
    v74 = 0;
  *(_QWORD *)(a1 + 72) = v74;
  v75 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v74, v75));
  v77 = *(_DWORD *)(a1 + 108);
  if (v76 == 0x80000000 || v77 != 0)
  {
    v80 = v77 + 1;
    *(_DWORD *)(a1 + 108) = v80;
    if (v80 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v82, a4);
  if (!v84)
    return 15;
  v8 = v82;
  v9 = v83;
  v85 = v82;
  v86 = v83;
  v87 = 0;
  v10 = ((unint64_t)v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - (_QWORD)v82;
  if (v10 < (unint64_t)v82)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v83)
    {
      v9 = 0;
      v12 = 0;
      v86 = 0;
    }
    else
    {
      *(_WORD *)((char *)v82 + v11) = 1035;
      v87 = v11 + 2;
    }
  }
  v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - ((_QWORD)v8 + v12);
  if (v14 >= (unint64_t)v8 + v12)
  {
    v16 = v14 - (_QWORD)v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
      v87 = v17;
      v12 = v17;
    }
  }
  v19 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - ((_QWORD)v8 + v12);
  if (v19 >= (unint64_t)v8 + v12)
  {
    v21 = v19 - (_QWORD)v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v21) = *((_DWORD *)a2 + 1);
      v87 = v22;
      v12 = v22;
    }
  }
  v24 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v24 >= (char *)v8 + v12)
  {
    v25 = (char *)(v24 - (char *)v8);
    if ((unint64_t)(v24 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v25 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v24 = *((_DWORD *)a2 + 2);
      v87 = (unint64_t)(v25 + 4);
      v12 = (unint64_t)(v25 + 4);
    }
  }
  v26 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v26 >= (char *)v8 + v12)
  {
    v27 = (char *)(v26 - (char *)v8);
    if ((unint64_t)(v26 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v26 = *((_DWORD *)a2 + 3);
      v87 = (unint64_t)(v27 + 4);
      v12 = (unint64_t)(v27 + 4);
    }
  }
  v28 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v28 >= (char *)v8 + v12)
  {
    v29 = (char *)(v28 - (char *)v8);
    if ((unint64_t)(v28 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v29 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v28 = *((_DWORD *)a2 + 4);
      v87 = (unint64_t)(v29 + 4);
      v12 = (unint64_t)(v29 + 4);
    }
  }
  v30 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v30 >= (char *)v8 + v12)
  {
    v31 = (char *)(v30 - (char *)v8);
    if ((unint64_t)(v30 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v31 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v30 = *((_DWORD *)a2 + 5);
      v87 = (unint64_t)(v31 + 4);
      v12 = (unint64_t)(v31 + 4);
    }
  }
  v32 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v32 >= (char *)v8 + v12)
  {
    v33 = (char *)(v32 - (char *)v8);
    if ((unint64_t)(v32 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v33 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v32 = *((_DWORD *)a2 + 6);
      v87 = (unint64_t)(v33 + 4);
      v12 = (unint64_t)(v33 + 4);
    }
  }
  v34 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v34 >= (char *)v8 + v12)
  {
    v35 = (char *)(v34 - (char *)v8);
    if ((unint64_t)(v34 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v35 + 4) > v9)
    {
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v34 = *((_DWORD *)a2 + 7);
      v87 = (unint64_t)(v35 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v85, *a2[4], (size_t)a2[4][1]);
  if (v86)
  {
    v37 = v87;
    v38 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v36 = *(_QWORD *)(a1 + 56);
    if (v38 + 16 < v36)
    {
LABEL_47:
      if (v37 <= 0x10)
        v37 = 16;
      v39 = v38 + v37;
      if (v36 <= v39)
        v39 = 0;
      *(_QWORD *)(a1 + 72) = v39;
      v40 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v39, v40));
      if (v41 == 0x80000000 || *(_DWORD *)(a1 + 108))
      {
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        *(_DWORD *)(a1 + 108) = 0;
      }
      return 0;
    }
LABEL_119:
    v38 = 0;
    goto LABEL_47;
  }
  v37 = v84;
  if (!v84)
  {
    __break(1u);
    goto LABEL_119;
  }
  v43 = ((unint64_t)v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v44 = v43 - (_QWORD)v82;
  if (v43 < (unint64_t)v82)
  {
    v45 = 0;
  }
  else
  {
    v45 = 0;
    if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= v83)
    {
      *(_WORD *)((char *)v82 + v44) = 2821;
      v45 = v44 + 2;
    }
  }
  v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = *(_QWORD *)(a1 + 56);
  if (v46 + 16 >= v47)
    v46 = 0;
  if (v45 <= 0x10)
    v45 = 16;
  v48 = v46 + v45;
  if (v47 <= v48)
    v48 = 0;
  *(_QWORD *)(a1 + 72) = v48;
  v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v49);
  while (__stlxr(v48, v49));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v81, (uint64_t **)(a1 + 8));
  v50 = v81;
  v51 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v51 = 1035;
  *(_QWORD *)(v51 + 8) = a3;
  *(_QWORD *)(v51 + 528) = v51 + 16;
  *(_QWORD *)(v51 + 536) = v51 + 16;
  *(_OWORD *)(v51 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v51 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v51);
  v85 = (IPC::Encoder *)v51;
  v52 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v52;
  v53 = *((_DWORD *)a2 + 1);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v53;
  v54 = *((_DWORD *)a2 + 2);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v54;
  v55 = *((_DWORD *)a2 + 3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v55;
  v56 = *((_DWORD *)a2 + 4);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v56;
  v57 = *((_DWORD *)a2 + 5);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v57;
  v58 = *((_DWORD *)a2 + 6);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v58;
  v59 = *((_DWORD *)a2 + 7);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v59;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v51, *a2[4], (size_t)a2[4][1]);
  v42 = IPC::Connection::sendMessageImpl((uint64_t)v50, (uint64_t *)&v85, 1, 0);
  v61 = v85;
  v85 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v60);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v81);
  return v42;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  void *v70;
  IPC::Encoder *v71;
  WTF *v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v80;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unsigned __int8 v100;
  IPC::Encoder *v101;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v98, a4);
  if (!v100)
    return 15;
  v75 = v98;
  v74 = v99;
  v76 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v77 = v76 - v98;
  if (v76 >= v98)
  {
    v78 = v77 + 2;
    if (v77 <= 0xFFFFFFFFFFFFFFFDLL && v78 <= v99)
    {
      *(_WORD *)(v98 + v77) = 2822;
      goto LABEL_93;
    }
    v74 = 0;
  }
  v78 = 0;
LABEL_93:
  v80 = (_QWORD *)((v75 + v78 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v80 >= v75 + v78)
  {
    v78 = (unint64_t)v80 - v75 + 8;
    if ((unint64_t)v80 - v75 > 0xFFFFFFFFFFFFFFF7 || v78 > v74)
      return 17;
    *v80 = a3;
  }
  if (!v74)
    return 17;
  v82 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v83 = *(_QWORD *)(a1 + 56);
  if (v82 + 16 >= v83)
    v82 = 0;
  if (v78 <= 0x10)
    v78 = 16;
  v84 = v82 + v78;
  if (v83 <= v84)
    v84 = 0;
  *(_QWORD *)(a1 + 72) = v84;
  v85 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v84, v85));
  v87 = *(_DWORD *)(a1 + 108);
  if (v86 == 0x80000000 || v87 != 0)
  {
    v90 = v87 + 1;
    *(_DWORD *)(a1 + 108) = v90;
    if (v90 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v98, a4);
  if (!v100)
    return 15;
  v8 = v98;
  v9 = v99;
  v10 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v98;
  if (v10 >= v98)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v99)
    {
      *(_WORD *)(v98 + v11) = 1036;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v91 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v91 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v91 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v92 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v91)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v92 = v91;
      v12 = v30 + 4;
    }
  }
  else
  {
    v92 = v91;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v93 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v92)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v93 = v92;
      v12 = v33 + 4;
    }
  }
  else
  {
    v93 = v92;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v34 >= v8 + v12;
  v35 = v34 - (v8 + v12);
  if (v25)
  {
    v94 = 0;
    v36 = v35 + v12;
    if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= v93)
    {
      *(_DWORD *)(v8 + v36) = a2[5];
      v94 = v93;
      v12 = v36 + 4;
    }
  }
  else
  {
    v94 = v93;
  }
  v37 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v37 >= v8 + v12;
  v38 = v37 - (v8 + v12);
  if (v25)
  {
    v95 = 0;
    v39 = v38 + v12;
    if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= v94)
    {
      *(_DWORD *)(v8 + v39) = a2[6];
      v95 = v94;
      v12 = v39 + 4;
    }
  }
  else
  {
    v95 = v94;
  }
  v40 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v40 >= v8 + v12;
  v41 = v40 - (v8 + v12);
  if (v25)
  {
    v96 = 0;
    v42 = v41 + v12;
    if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= v95)
    {
      *(_DWORD *)(v8 + v42) = a2[7];
      v96 = v95;
      v12 = v42 + 4;
    }
  }
  else
  {
    v96 = v95;
  }
  v43 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v43 >= v8 + v12)
  {
    v44 = (char *)v43 - v8;
    if ((unint64_t)v43 - v8 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_67;
    v12 = (unint64_t)(v44 + 8);
    if ((unint64_t)(v44 + 8) > v96)
      goto LABEL_67;
    *v43 = *((_QWORD *)a2 + 4);
  }
  if (v96)
  {
    v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = *(_QWORD *)(a1 + 56);
    if (v45 + 16 < v46)
    {
LABEL_57:
      if (v12 <= 0x10)
        v12 = 16;
      v47 = v45 + v12;
      if (v46 <= v47)
        v48 = 0;
      else
        v48 = v47;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      if (v50 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v51 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v51;
    }
LABEL_125:
    v45 = 0;
    goto LABEL_57;
  }
LABEL_67:
  v46 = v100;
  if (!v100)
  {
    __break(1u);
    goto LABEL_125;
  }
  v52 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v98;
  if (v52 < v98)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v99)
    {
      *(_WORD *)(v98 + v53) = 2821;
      v54 = v53 + 2;
    }
  }
  v55 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = *(_QWORD *)(a1 + 56);
  if (v55 + 16 >= v56)
    v55 = 0;
  if (v54 <= 0x10)
    v54 = 16;
  v57 = v55 + v54;
  if (v56 <= v57)
    v57 = 0;
  *(_QWORD *)(a1 + 72) = v57;
  v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v58);
  while (__stlxr(v57, v58));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v97, (uint64_t **)(a1 + 8));
  v59 = v97;
  v60 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v60 = 1036;
  *(_QWORD *)(v60 + 8) = a3;
  *(_QWORD *)(v60 + 528) = v60 + 16;
  *(_QWORD *)(v60 + 536) = v60 + 16;
  *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v60 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
  v101 = (IPC::Encoder *)v60;
  v61 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v61;
  v62 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v62;
  v63 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v63;
  v64 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v64;
  v65 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v65;
  v66 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v66;
  v67 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v67;
  v68 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v68;
  v69 = *((_QWORD *)a2 + 4);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 8uLL, 8) = v69;
  v51 = IPC::Connection::sendMessageImpl((uint64_t)v59, (uint64_t *)&v101, 1, 0);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    IPC::Encoder::~Encoder(v71, v70);
    WTF::fastFree(v72, v73);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v97);
  return v51;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  void *v59;
  IPC::Encoder *v60;
  WTF *v61;
  void *v62;
  unint64_t v63;
  IPC::Encoder *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v69;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  unsigned int v79;
  uint64_t *v80;
  IPC::Encoder *v81;
  unint64_t v82;
  unsigned __int8 v83;
  IPC::Encoder *v84;
  unint64_t v85;
  unint64_t v86;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v84, a4);
  if (!(_BYTE)v86)
    return 15;
  v64 = v84;
  v63 = v85;
  v65 = ((unint64_t)v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v66 = v65 - (_QWORD)v84;
  if (v65 >= (unint64_t)v84)
  {
    v67 = v66 + 2;
    if (v66 <= 0xFFFFFFFFFFFFFFFDLL && v67 <= v85)
    {
      *(_WORD *)((char *)v84 + v66) = 2822;
      goto LABEL_79;
    }
    v63 = 0;
  }
  v67 = 0;
LABEL_79:
  v69 = (char *)(((unint64_t)v64 + v67 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v69 >= (char *)v64 + v67)
  {
    v67 = v69 - (char *)v64 + 8;
    if ((unint64_t)(v69 - (char *)v64) > 0xFFFFFFFFFFFFFFF7 || v67 > v63)
      return 17;
    *(_QWORD *)v69 = a3;
  }
  if (!v63)
    return 17;
  v71 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = *(_QWORD *)(a1 + 56);
  if (v71 + 16 >= v72)
    v71 = 0;
  if (v67 <= 0x10)
    v67 = 16;
  v73 = v71 + v67;
  if (v72 <= v73)
    v73 = 0;
  *(_QWORD *)(a1 + 72) = v73;
  v74 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v73, v74));
  v76 = *(_DWORD *)(a1 + 108);
  if (v75 == 0x80000000 || v76 != 0)
  {
    v79 = v76 + 1;
    *(_DWORD *)(a1 + 108) = v79;
    if (v79 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v81, a4);
  if (!v83)
    return 15;
  v8 = v81;
  v9 = v82;
  v84 = v81;
  v85 = v82;
  v86 = 0;
  v10 = ((unint64_t)v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - (_QWORD)v81;
  if (v10 < (unint64_t)v81)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v82)
    {
      v9 = 0;
      v12 = 0;
      v85 = 0;
    }
    else
    {
      *(_WORD *)((char *)v81 + v11) = 920;
      v86 = v11 + 2;
    }
  }
  v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - ((_QWORD)v8 + v12);
  if (v14 >= (unint64_t)v8 + v12)
  {
    v16 = v14 - (_QWORD)v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
      v85 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
      v86 = v17;
      v12 = v17;
    }
  }
  v19 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - ((_QWORD)v8 + v12);
  if (v19 >= (unint64_t)v8 + v12)
  {
    v21 = v19 - (_QWORD)v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
      v85 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v21) = *((_DWORD *)a2 + 1);
      v86 = v22;
      v12 = v22;
    }
  }
  v24 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v24 >= (char *)v8 + v12)
  {
    v25 = (char *)(v24 - (char *)v8);
    if ((unint64_t)(v24 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v25 + 4) > v9)
    {
      v9 = 0;
      v85 = 0;
    }
    else
    {
      *(_DWORD *)v24 = *((_DWORD *)a2 + 2);
      v86 = (unint64_t)(v25 + 4);
      v12 = (unint64_t)(v25 + 4);
    }
  }
  v26 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v26 >= (char *)v8 + v12)
  {
    v27 = (char *)(v26 - (char *)v8);
    if ((unint64_t)(v26 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > v9)
    {
      v9 = 0;
      v85 = 0;
    }
    else
    {
      *(_DWORD *)v26 = *((_DWORD *)a2 + 3);
      v86 = (unint64_t)(v27 + 4);
      v12 = (unint64_t)(v27 + 4);
    }
  }
  v28 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v28 >= (char *)v8 + v12)
  {
    v29 = (char *)(v28 - (char *)v8);
    if ((unint64_t)(v28 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v29 + 4) > v9)
    {
      v9 = 0;
      v85 = 0;
    }
    else
    {
      *(_DWORD *)v28 = *((_DWORD *)a2 + 4);
      v86 = (unint64_t)(v29 + 4);
      v12 = (unint64_t)(v29 + 4);
    }
  }
  v30 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v30 >= (char *)v8 + v12)
  {
    v31 = (char *)(v30 - (char *)v8);
    if ((unint64_t)(v30 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v31 + 4) > v9)
    {
      v9 = 0;
      v85 = 0;
    }
    else
    {
      *(_DWORD *)v30 = *((_DWORD *)a2 + 5);
      v86 = (unint64_t)(v31 + 4);
      v12 = (unint64_t)(v31 + 4);
    }
  }
  v32 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v32 >= (char *)v8 + v12)
  {
    v33 = (char *)(v32 - (char *)v8);
    if ((unint64_t)(v32 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v33 + 4) > v9)
    {
      v85 = 0;
    }
    else
    {
      *(_DWORD *)v32 = *((_DWORD *)a2 + 6);
      v86 = (unint64_t)(v33 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v84, *a2[4], (size_t)a2[4][1]);
  if (v85)
  {
    v35 = v86;
    v36 = *(_QWORD *)(a1 + 64);
    v37 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v38 = *(_QWORD *)(a1 + 56);
    if (v37 + 16 >= v38)
      v37 = 0;
    if (v86 <= 0x10)
      v35 = 16;
    v39 = v37 + v35;
    if (v38 <= v39)
      v40 = 0;
    else
      v40 = v39;
    *(_QWORD *)(a1 + 72) = v40;
    v41 = (unint64_t *)(*(_QWORD *)(v36 + 16) + 128);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v40, v41));
    if (v42 == 0x80000000 || *(_DWORD *)(a1 + 108))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
    return 0;
  }
  v44 = v83;
  if (v83)
  {
    v45 = ((unint64_t)v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = v45 - (_QWORD)v81;
    if (v45 < (unint64_t)v81)
    {
      v44 = 0;
    }
    else
    {
      v44 = 0;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v46 + 2 <= v82)
      {
        *(_WORD *)((char *)v81 + v46) = 2821;
        v44 = v46 + 2;
      }
    }
    v47 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)(a1 + 56);
    if (v47 + 16 < v34)
      goto LABEL_60;
  }
  else
  {
    __break(1u);
  }
  v47 = 0;
LABEL_60:
  if (v44 <= 0x10)
    v44 = 16;
  v48 = v47 + v44;
  if (v34 <= v48)
    v48 = 0;
  *(_QWORD *)(a1 + 72) = v48;
  v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v49);
  while (__stlxr(v48, v49));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  v50 = v80;
  v51 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v51 = 920;
  *(_QWORD *)(v51 + 8) = a3;
  *(_QWORD *)(v51 + 528) = v51 + 16;
  *(_QWORD *)(v51 + 536) = v51 + 16;
  *(_OWORD *)(v51 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v51 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v51);
  v84 = (IPC::Encoder *)v51;
  v52 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v52;
  v53 = *((_DWORD *)a2 + 1);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v53;
  v54 = *((_DWORD *)a2 + 2);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v54;
  v55 = *((_DWORD *)a2 + 3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v55;
  v56 = *((_DWORD *)a2 + 4);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v56;
  v57 = *((_DWORD *)a2 + 5);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v57;
  v58 = *((_DWORD *)a2 + 6);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v58;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v51, *a2[4], (size_t)a2[4][1]);
  v43 = IPC::Connection::sendMessageImpl((uint64_t)v50, (uint64_t *)&v84, 1, 0);
  v60 = v84;
  v84 = 0;
  if (v60)
  {
    IPC::Encoder::~Encoder(v60, v59);
    WTF::fastFree(v61, v62);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v80);
  return v43;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  void *v67;
  IPC::Encoder *v68;
  WTF *v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v77;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unsigned __int8 v95;
  IPC::Encoder *v96;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v93, a4);
  if (!v95)
    return 15;
  v72 = v93;
  v71 = v94;
  v73 = (v93 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v74 = v73 - v93;
  if (v73 >= v93)
  {
    v75 = v74 + 2;
    if (v74 <= 0xFFFFFFFFFFFFFFFDLL && v75 <= v94)
    {
      *(_WORD *)(v93 + v74) = 2822;
      goto LABEL_87;
    }
    v71 = 0;
  }
  v75 = 0;
LABEL_87:
  v77 = (_QWORD *)((v72 + v75 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v77 >= v72 + v75)
  {
    v75 = (unint64_t)v77 - v72 + 8;
    if ((unint64_t)v77 - v72 > 0xFFFFFFFFFFFFFFF7 || v75 > v71)
      return 17;
    *v77 = a3;
  }
  if (!v71)
    return 17;
  v79 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v80 = *(_QWORD *)(a1 + 56);
  if (v79 + 16 >= v80)
    v79 = 0;
  if (v75 <= 0x10)
    v75 = 16;
  v81 = v79 + v75;
  if (v80 <= v81)
    v81 = 0;
  *(_QWORD *)(a1 + 72) = v81;
  v82 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v81, v82));
  v84 = *(_DWORD *)(a1 + 108);
  if (v83 == 0x80000000 || v84 != 0)
  {
    v87 = v84 + 1;
    *(_DWORD *)(a1 + 108) = v87;
    if (v87 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v93, a4);
  if (!v95)
    return 15;
  v8 = v93;
  v9 = v94;
  v10 = (v93 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v93;
  if (v10 >= v93)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v94)
    {
      *(_WORD *)(v93 + v11) = 921;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v91 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v91 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v91 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v88 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v91)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v88 = v91;
      v12 = v30 + 4;
    }
  }
  else
  {
    v88 = v91;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v89 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v88)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v89 = v88;
      v12 = v33 + 4;
    }
  }
  else
  {
    v89 = v88;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v35 = v34 - (v8 + v12);
  if (v34 < v8 + v12)
  {
    v36 = v89;
  }
  else
  {
    v36 = 0;
    v37 = v35 + v12;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v89)
    {
      *(_DWORD *)(v8 + v37) = a2[5];
      v36 = v89;
      v12 = v37 + 4;
    }
  }
  v38 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v38 >= v8 + v12;
  v39 = v38 - (v8 + v12);
  if (v25)
  {
    v90 = 0;
    v40 = v39 + v12;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v36)
    {
      *(_DWORD *)(v8 + v40) = a2[6];
      v90 = v36;
      v12 = v40 + 4;
    }
  }
  else
  {
    v90 = v36;
  }
  v41 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v41 >= v8 + v12)
  {
    v42 = (char *)v41 - v8;
    if ((unint64_t)v41 - v8 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_61;
    v12 = (unint64_t)(v42 + 8);
    if ((unint64_t)(v42 + 8) > v90)
      goto LABEL_61;
    *v41 = *((_QWORD *)a2 + 4);
  }
  if (v90)
  {
    v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v44 = *(_QWORD *)(a1 + 56);
    if (v43 + 16 < v44)
    {
LABEL_51:
      if (v12 <= 0x10)
        v12 = 16;
      v45 = v43 + v12;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *(_QWORD *)(a1 + 72) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      if (v48 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v49 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v49;
    }
LABEL_119:
    v43 = 0;
    goto LABEL_51;
  }
LABEL_61:
  v44 = v95;
  if (!v95)
  {
    __break(1u);
    goto LABEL_119;
  }
  v50 = (v93 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = v50 - v93;
  if (v50 < v93)
  {
    v52 = 0;
  }
  else
  {
    v52 = 0;
    if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v51 + 2 <= v94)
    {
      *(_WORD *)(v93 + v51) = 2821;
      v52 = v51 + 2;
    }
  }
  v53 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = *(_QWORD *)(a1 + 56);
  if (v53 + 16 >= v54)
    v53 = 0;
  if (v52 <= 0x10)
    v52 = 16;
  v55 = v53 + v52;
  if (v54 <= v55)
    v55 = 0;
  *(_QWORD *)(a1 + 72) = v55;
  v56 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v56);
  while (__stlxr(v55, v56));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v92, (uint64_t **)(a1 + 8));
  v57 = v92;
  v58 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v58 = 921;
  *(_QWORD *)(v58 + 8) = a3;
  *(_QWORD *)(v58 + 528) = v58 + 16;
  *(_QWORD *)(v58 + 536) = v58 + 16;
  *(_OWORD *)(v58 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v58 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v58);
  v96 = (IPC::Encoder *)v58;
  v59 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v59;
  v60 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v60;
  v61 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v61;
  v62 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v62;
  v63 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v63;
  v64 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v64;
  v65 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v65;
  v66 = *((_QWORD *)a2 + 4);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 8uLL, 8) = v66;
  v49 = IPC::Connection::sendMessageImpl((uint64_t)v57, (uint64_t *)&v96, 1, 0);
  v68 = v96;
  v96 = 0;
  if (v68)
  {
    IPC::Encoder::~Encoder(v68, v67);
    WTF::fastFree(v69, v70);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v92);
  return v49;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  void *v60;
  IPC::Encoder *v61;
  WTF *v62;
  void *v63;
  unint64_t v64;
  IPC::Encoder *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v70;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  unsigned int v80;
  uint64_t *v81;
  IPC::Encoder *v82;
  unint64_t v83;
  unsigned __int8 v84;
  IPC::Encoder *v85;
  unint64_t v86;
  unint64_t v87;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v85, a4);
  if (!(_BYTE)v87)
    return 15;
  v65 = v85;
  v64 = v86;
  v66 = ((unint64_t)v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v67 = v66 - (_QWORD)v85;
  if (v66 >= (unint64_t)v85)
  {
    v68 = v67 + 2;
    if (v67 <= 0xFFFFFFFFFFFFFFFDLL && v68 <= v86)
    {
      *(_WORD *)((char *)v85 + v67) = 2822;
      goto LABEL_82;
    }
    v64 = 0;
  }
  v68 = 0;
LABEL_82:
  v70 = (char *)(((unint64_t)v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v70 >= (char *)v65 + v68)
  {
    v68 = v70 - (char *)v65 + 8;
    if ((unint64_t)(v70 - (char *)v65) > 0xFFFFFFFFFFFFFFF7 || v68 > v64)
      return 17;
    *(_QWORD *)v70 = a3;
  }
  if (!v64)
    return 17;
  v72 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = *(_QWORD *)(a1 + 56);
  if (v72 + 16 >= v73)
    v72 = 0;
  if (v68 <= 0x10)
    v68 = 16;
  v74 = v72 + v68;
  if (v73 <= v74)
    v74 = 0;
  *(_QWORD *)(a1 + 72) = v74;
  v75 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v74, v75));
  v77 = *(_DWORD *)(a1 + 108);
  if (v76 == 0x80000000 || v77 != 0)
  {
    v80 = v77 + 1;
    *(_DWORD *)(a1 + 108) = v80;
    if (v80 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v82, a4);
  if (!v84)
    return 15;
  v8 = v82;
  v9 = v83;
  v85 = v82;
  v86 = v83;
  v87 = 0;
  v10 = ((unint64_t)v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - (_QWORD)v82;
  if (v10 < (unint64_t)v82)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v83)
    {
      v9 = 0;
      v12 = 0;
      v86 = 0;
    }
    else
    {
      *(_WORD *)((char *)v82 + v11) = 924;
      v87 = v11 + 2;
    }
  }
  v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - ((_QWORD)v8 + v12);
  if (v14 >= (unint64_t)v8 + v12)
  {
    v16 = v14 - (_QWORD)v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
      v87 = v17;
      v12 = v17;
    }
  }
  v19 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - ((_QWORD)v8 + v12);
  if (v19 >= (unint64_t)v8 + v12)
  {
    v21 = v19 - (_QWORD)v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v21) = *((_DWORD *)a2 + 1);
      v87 = v22;
      v12 = v22;
    }
  }
  v24 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v24 >= (char *)v8 + v12)
  {
    v25 = (char *)(v24 - (char *)v8);
    if ((unint64_t)(v24 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v25 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v24 = *((_DWORD *)a2 + 2);
      v87 = (unint64_t)(v25 + 4);
      v12 = (unint64_t)(v25 + 4);
    }
  }
  v26 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v26 >= (char *)v8 + v12)
  {
    v27 = (char *)(v26 - (char *)v8);
    if ((unint64_t)(v26 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v26 = *((_DWORD *)a2 + 3);
      v87 = (unint64_t)(v27 + 4);
      v12 = (unint64_t)(v27 + 4);
    }
  }
  v28 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v28 >= (char *)v8 + v12)
  {
    v29 = (char *)(v28 - (char *)v8);
    if ((unint64_t)(v28 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v29 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v28 = *((_DWORD *)a2 + 4);
      v87 = (unint64_t)(v29 + 4);
      v12 = (unint64_t)(v29 + 4);
    }
  }
  v30 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v30 >= (char *)v8 + v12)
  {
    v31 = (char *)(v30 - (char *)v8);
    if ((unint64_t)(v30 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v31 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v30 = *((_DWORD *)a2 + 5);
      v87 = (unint64_t)(v31 + 4);
      v12 = (unint64_t)(v31 + 4);
    }
  }
  v32 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v32 >= (char *)v8 + v12)
  {
    v33 = (char *)(v32 - (char *)v8);
    if ((unint64_t)(v32 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v33 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v32 = *((_DWORD *)a2 + 6);
      v87 = (unint64_t)(v33 + 4);
      v12 = (unint64_t)(v33 + 4);
    }
  }
  v34 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v34 >= (char *)v8 + v12)
  {
    v35 = (char *)(v34 - (char *)v8);
    if ((unint64_t)(v34 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v35 + 4) > v9)
    {
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v34 = *((_DWORD *)a2 + 7);
      v87 = (unint64_t)(v35 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v85, *a2[4], (size_t)a2[4][1]);
  if (v86)
  {
    v37 = v87;
    v38 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v36 = *(_QWORD *)(a1 + 56);
    if (v38 + 16 < v36)
    {
LABEL_47:
      if (v37 <= 0x10)
        v37 = 16;
      v39 = v38 + v37;
      if (v36 <= v39)
        v39 = 0;
      *(_QWORD *)(a1 + 72) = v39;
      v40 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v39, v40));
      if (v41 == 0x80000000 || *(_DWORD *)(a1 + 108))
      {
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        *(_DWORD *)(a1 + 108) = 0;
      }
      return 0;
    }
LABEL_119:
    v38 = 0;
    goto LABEL_47;
  }
  v37 = v84;
  if (!v84)
  {
    __break(1u);
    goto LABEL_119;
  }
  v43 = ((unint64_t)v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v44 = v43 - (_QWORD)v82;
  if (v43 < (unint64_t)v82)
  {
    v45 = 0;
  }
  else
  {
    v45 = 0;
    if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= v83)
    {
      *(_WORD *)((char *)v82 + v44) = 2821;
      v45 = v44 + 2;
    }
  }
  v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = *(_QWORD *)(a1 + 56);
  if (v46 + 16 >= v47)
    v46 = 0;
  if (v45 <= 0x10)
    v45 = 16;
  v48 = v46 + v45;
  if (v47 <= v48)
    v48 = 0;
  *(_QWORD *)(a1 + 72) = v48;
  v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v49);
  while (__stlxr(v48, v49));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v81, (uint64_t **)(a1 + 8));
  v50 = v81;
  v51 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v51 = 924;
  *(_QWORD *)(v51 + 8) = a3;
  *(_QWORD *)(v51 + 528) = v51 + 16;
  *(_QWORD *)(v51 + 536) = v51 + 16;
  *(_OWORD *)(v51 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v51 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v51);
  v85 = (IPC::Encoder *)v51;
  v52 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v52;
  v53 = *((_DWORD *)a2 + 1);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v53;
  v54 = *((_DWORD *)a2 + 2);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v54;
  v55 = *((_DWORD *)a2 + 3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v55;
  v56 = *((_DWORD *)a2 + 4);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v56;
  v57 = *((_DWORD *)a2 + 5);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v57;
  v58 = *((_DWORD *)a2 + 6);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v58;
  v59 = *((_DWORD *)a2 + 7);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v59;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v51, *a2[4], (size_t)a2[4][1]);
  v42 = IPC::Connection::sendMessageImpl((uint64_t)v50, (uint64_t *)&v85, 1, 0);
  v61 = v85;
  v85 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v60);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v81);
  return v42;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  void *v70;
  IPC::Encoder *v71;
  WTF *v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v80;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unsigned __int8 v100;
  IPC::Encoder *v101;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v98, a4);
  if (!v100)
    return 15;
  v75 = v98;
  v74 = v99;
  v76 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v77 = v76 - v98;
  if (v76 >= v98)
  {
    v78 = v77 + 2;
    if (v77 <= 0xFFFFFFFFFFFFFFFDLL && v78 <= v99)
    {
      *(_WORD *)(v98 + v77) = 2822;
      goto LABEL_93;
    }
    v74 = 0;
  }
  v78 = 0;
LABEL_93:
  v80 = (_QWORD *)((v75 + v78 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v80 >= v75 + v78)
  {
    v78 = (unint64_t)v80 - v75 + 8;
    if ((unint64_t)v80 - v75 > 0xFFFFFFFFFFFFFFF7 || v78 > v74)
      return 17;
    *v80 = a3;
  }
  if (!v74)
    return 17;
  v82 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v83 = *(_QWORD *)(a1 + 56);
  if (v82 + 16 >= v83)
    v82 = 0;
  if (v78 <= 0x10)
    v78 = 16;
  v84 = v82 + v78;
  if (v83 <= v84)
    v84 = 0;
  *(_QWORD *)(a1 + 72) = v84;
  v85 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v84, v85));
  v87 = *(_DWORD *)(a1 + 108);
  if (v86 == 0x80000000 || v87 != 0)
  {
    v90 = v87 + 1;
    *(_DWORD *)(a1 + 108) = v90;
    if (v90 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v98, a4);
  if (!v100)
    return 15;
  v8 = v98;
  v9 = v99;
  v10 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v98;
  if (v10 >= v98)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v99)
    {
      *(_WORD *)(v98 + v11) = 925;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v91 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v91 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v91 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v92 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v91)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v92 = v91;
      v12 = v30 + 4;
    }
  }
  else
  {
    v92 = v91;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v93 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v92)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v93 = v92;
      v12 = v33 + 4;
    }
  }
  else
  {
    v93 = v92;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v34 >= v8 + v12;
  v35 = v34 - (v8 + v12);
  if (v25)
  {
    v94 = 0;
    v36 = v35 + v12;
    if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= v93)
    {
      *(_DWORD *)(v8 + v36) = a2[5];
      v94 = v93;
      v12 = v36 + 4;
    }
  }
  else
  {
    v94 = v93;
  }
  v37 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v37 >= v8 + v12;
  v38 = v37 - (v8 + v12);
  if (v25)
  {
    v96 = 0;
    v39 = v38 + v12;
    if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= v94)
    {
      *(_DWORD *)(v8 + v39) = a2[6];
      v96 = v94;
      v12 = v39 + 4;
    }
  }
  else
  {
    v96 = v94;
  }
  v40 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v40 >= v8 + v12;
  v41 = v40 - (v8 + v12);
  if (v25)
  {
    v95 = 0;
    v42 = v41 + v12;
    if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= v96)
    {
      *(_DWORD *)(v8 + v42) = a2[7];
      v95 = v96;
      v12 = v42 + 4;
    }
  }
  else
  {
    v95 = v96;
  }
  v43 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v43 >= v8 + v12)
  {
    v44 = (char *)v43 - v8;
    if ((unint64_t)v43 - v8 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_67;
    v12 = (unint64_t)(v44 + 8);
    if ((unint64_t)(v44 + 8) > v95)
      goto LABEL_67;
    *v43 = *((_QWORD *)a2 + 4);
  }
  if (v95)
  {
    v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = *(_QWORD *)(a1 + 56);
    if (v45 + 16 < v46)
    {
LABEL_57:
      if (v12 <= 0x10)
        v12 = 16;
      v47 = v45 + v12;
      if (v46 <= v47)
        v48 = 0;
      else
        v48 = v47;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      if (v50 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v51 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v51;
    }
LABEL_125:
    v45 = 0;
    goto LABEL_57;
  }
LABEL_67:
  v46 = v100;
  if (!v100)
  {
    __break(1u);
    goto LABEL_125;
  }
  v52 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v98;
  if (v52 < v98)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v99)
    {
      *(_WORD *)(v98 + v53) = 2821;
      v54 = v53 + 2;
    }
  }
  v55 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = *(_QWORD *)(a1 + 56);
  if (v55 + 16 >= v56)
    v55 = 0;
  if (v54 <= 0x10)
    v54 = 16;
  v57 = v55 + v54;
  if (v56 <= v57)
    v57 = 0;
  *(_QWORD *)(a1 + 72) = v57;
  v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v58);
  while (__stlxr(v57, v58));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v97, (uint64_t **)(a1 + 8));
  v59 = v97;
  v60 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v60 = 925;
  *(_QWORD *)(v60 + 8) = a3;
  *(_QWORD *)(v60 + 528) = v60 + 16;
  *(_QWORD *)(v60 + 536) = v60 + 16;
  *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v60 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
  v101 = (IPC::Encoder *)v60;
  v61 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v61;
  v62 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v62;
  v63 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v63;
  v64 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v64;
  v65 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v65;
  v66 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v66;
  v67 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v67;
  v68 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v68;
  v69 = *((_QWORD *)a2 + 4);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 8uLL, 8) = v69;
  v51 = IPC::Connection::sendMessageImpl((uint64_t)v59, (uint64_t *)&v101, 1, 0);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    IPC::Encoder::~Encoder(v71, v70);
    WTF::fastFree(v72, v73);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v97);
  return v51;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArraysInstanced,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  char *v74;
  unint64_t v75;
  char v76;
  IPC::Encoder *v77;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
      if (!v76)
        return 15;
      v8 = v74;
      v9 = v75;
      v10 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v74;
      if (v10 >= (unint64_t)v74)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v75)
        {
          *(_WORD *)&v74[v11] = 965;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (_QWORD)&v8[v12];
      if (v14 >= (unint64_t)&v8[v12])
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v16] = *a2;
          v12 = v17;
        }
      }
      v19 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (_QWORD)&v8[v12];
      if (v19 >= (unint64_t)&v8[v12])
      {
        v21 = v19 - (_QWORD)v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v21] = a2[1];
          v12 = v22;
        }
      }
      v24 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= (unint64_t)&v8[v12];
      v26 = v24 - (_QWORD)&v8[v12];
      if (v25)
      {
        v72 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)&v8[v27] = a2[2];
          v72 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v72 = v9;
      }
      v28 = (char *)((unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL);
      v29 = (char *)(v28 - &v8[v12]);
      if (v28 >= &v8[v12])
      {
        v29 = (char *)(v28 - v8);
        if ((unint64_t)(v28 - v8) > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_43;
        v12 = (unint64_t)(v29 + 4);
        if ((unint64_t)(v29 + 4) > v72)
          goto LABEL_43;
        *(_DWORD *)v28 = a2[3];
      }
      if (v72)
      {
        v30 = *(_QWORD *)(a1 + 64);
        v31 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *(_QWORD *)(a1 + 56);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v33 = v31 + v12;
        if (v32 <= v33)
          v34 = 0;
        else
          v34 = v33;
        *(_QWORD *)(a1 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v34, v35));
        if (v36 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v37 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v37;
      }
LABEL_43:
      if (v76)
      {
        v38 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v39 = v38 - (_QWORD)v74;
        if (v38 < (unint64_t)v74)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v75)
          {
            *(_WORD *)&v74[v39] = 2821;
            v40 = v39 + 2;
          }
        }
        v41 = *(_QWORD *)(a1 + 64);
        v42 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v43 = *(_QWORD *)(a1 + 56);
        if (v42 + 16 >= v43)
          v42 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v44 = v42 + v40;
        if (v43 <= v44)
          v44 = 0;
        *(_QWORD *)(a1 + 72) = v44;
        v45 = (unint64_t *)(*(_QWORD *)(v41 + 16) + 128);
        do
          __ldaxr(v45);
        while (__stlxr(v44, v45));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
        v46 = v73;
        v47 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v47 = 965;
        *(_QWORD *)(v47 + 8) = a3;
        *(_QWORD *)(v47 + 528) = v47 + 16;
        *(_QWORD *)(v47 + 536) = v47 + 16;
        *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v47 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
        v77 = (IPC::Encoder *)v47;
        v48 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v48;
        v49 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v49;
        v50 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v50;
        v51 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v51;
        v37 = IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v77, 1, 0);
        v53 = v77;
        v77 = 0;
        if (v53)
        {
          IPC::Encoder::~Encoder(v53, v52);
          WTF::fastFree(v54, v55);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
        return v37;
      }
      __break(1u);
LABEL_101:
      v56 = 0;
LABEL_102:
      v59 = 0;
LABEL_69:
      v61 = (char *)((unint64_t)&v29[v59 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v61 >= &v29[v59])
      {
        v59 = v61 - v29 + 8;
        if ((unint64_t)(v61 - v29) > 0xFFFFFFFFFFFFFFF7 || v59 > v56)
          return 17;
        *(_QWORD *)v61 = a3;
      }
      if (!v56)
        return 17;
      v63 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v64 = *(_QWORD *)(a1 + 56);
      if (v63 + 16 >= v64)
        v63 = 0;
      if (v59 <= 0x10)
        v59 = 16;
      v65 = v63 + v59;
      if (v64 <= v65)
        v65 = 0;
      *(_QWORD *)(a1 + 72) = v65;
      v66 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v65, v66));
      v68 = *(_DWORD *)(a1 + 108);
      if (v67 == 0x80000000 || v68 != 0)
      {
        v71 = v68 + 1;
        *(_DWORD *)(a1 + 108) = v71;
        if (v71 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
  if (v76)
  {
    v29 = v74;
    v56 = v75;
    v57 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v58 = v57 - (_QWORD)v74;
    if (v57 < (unint64_t)v74)
      goto LABEL_102;
    v59 = v58 + 2;
    if (v58 > 0xFFFFFFFFFFFFFFFDLL || v59 > v75)
      goto LABEL_101;
    *(_WORD *)&v74[v58] = 2822;
    goto LABEL_69;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElementsInstanced,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 970;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v77 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v77 = v9;
      }
      v28 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= v77)
        {
          *(_QWORD *)(v8 + v30) = *((_QWORD *)a2 + 2);
          v76 = v77;
          v12 = v30 + 8;
        }
      }
      else
      {
        v76 = v77;
      }
      v31 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 4);
        if ((unint64_t)(v32 + 4) > v76)
          goto LABEL_48;
        *v31 = a2[6];
      }
      if (v76)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 970;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = *((_QWORD *)a2 + 2);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 8uLL, 8) = v54;
        v55 = a2[6];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v76 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v76 + v63)
      {
        v63 = (unint64_t)v65 - v76 + 8;
        if ((unint64_t)v65 - v76 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v76 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribDivisor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 1084;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1084;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 942;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 942;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 956;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 956;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3610;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE1Au, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3610, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3948[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 894;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 894;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyBufferSubData,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 928;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= v9)
        {
          *(_QWORD *)(v8 + v27) = *((_QWORD *)a2 + 1);
          v76 = v9;
          v12 = v27 + 8;
        }
      }
      else
      {
        v76 = v9;
      }
      v28 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= v76)
        {
          *(_QWORD *)(v8 + v30) = *((_QWORD *)a2 + 2);
          v77 = v76;
          v12 = v30 + 8;
        }
      }
      else
      {
        v77 = v76;
      }
      v31 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 8);
        if ((unint64_t)(v32 + 8) > v77)
          goto LABEL_48;
        *v31 = *((_QWORD *)a2 + 3);
      }
      if (v77)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 928;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = *((_QWORD *)a2 + 1);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 8uLL, 8) = v53;
        v54 = *((_QWORD *)a2 + 2);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 8uLL, 8) = v54;
        v55 = *((_QWORD *)a2 + 3);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 8uLL, 8) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v77 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v77 + v63)
      {
        v63 = (unint64_t)v65 - v77 + 8;
        if ((unint64_t)v65 - v77 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v77 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlitFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  void *v75;
  IPC::Encoder *v76;
  WTF *v77;
  void *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v85;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unsigned __int8 v105;
  IPC::Encoder *v106;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v103, a4);
  if (!v105)
    return 15;
  v80 = v103;
  v79 = v104;
  v81 = (v103 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v82 = v81 - v103;
  if (v81 >= v103)
  {
    v83 = v82 + 2;
    if (v82 <= 0xFFFFFFFFFFFFFFFDLL && v83 <= v104)
    {
      *(_WORD *)(v103 + v82) = 2822;
      goto LABEL_97;
    }
    v79 = 0;
  }
  v83 = 0;
LABEL_97:
  v85 = (_QWORD *)((v80 + v83 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v85 >= v80 + v83)
  {
    v83 = (unint64_t)v85 - v80 + 8;
    if ((unint64_t)v85 - v80 > 0xFFFFFFFFFFFFFFF7 || v83 > v79)
      return 17;
    *v85 = a3;
  }
  if (!v79)
    return 17;
  v87 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v88 = *(_QWORD *)(a1 + 56);
  if (v87 + 16 >= v88)
    v87 = 0;
  if (v83 <= 0x10)
    v83 = 16;
  v89 = v87 + v83;
  if (v88 <= v89)
    v89 = 0;
  *(_QWORD *)(a1 + 72) = v89;
  v90 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v89, v90));
  v92 = *(_DWORD *)(a1 + 108);
  if (v91 == 0x80000000 || v92 != 0)
  {
    v95 = v92 + 1;
    *(_DWORD *)(a1 + 108) = v95;
    if (v95 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v103, a4);
  if (!v105)
    return 15;
  v8 = v103;
  v9 = v104;
  v10 = (v103 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v103;
  if (v10 >= v103)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v104)
    {
      *(_WORD *)(v103 + v11) = 904;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v96 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v96 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v96 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v97 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v96)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v97 = v96;
      v12 = v30 + 4;
    }
  }
  else
  {
    v97 = v96;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v98 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v97)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v98 = v97;
      v12 = v33 + 4;
    }
  }
  else
  {
    v98 = v97;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v34 >= v8 + v12;
  v35 = v34 - (v8 + v12);
  if (v25)
  {
    v99 = 0;
    v36 = v35 + v12;
    if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= v98)
    {
      *(_DWORD *)(v8 + v36) = a2[5];
      v99 = v98;
      v12 = v36 + 4;
    }
  }
  else
  {
    v99 = v98;
  }
  v37 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v37 >= v8 + v12;
  v38 = v37 - (v8 + v12);
  if (v25)
  {
    v100 = 0;
    v39 = v38 + v12;
    if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= v99)
    {
      *(_DWORD *)(v8 + v39) = a2[6];
      v100 = v99;
      v12 = v39 + 4;
    }
  }
  else
  {
    v100 = v99;
  }
  v40 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v41 = v40 - (v8 + v12);
  if (v40 < v8 + v12)
  {
    v42 = v100;
  }
  else
  {
    v42 = 0;
    v43 = v41 + v12;
    if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= v100)
    {
      *(_DWORD *)(v8 + v43) = a2[7];
      v42 = v100;
      v12 = v43 + 4;
    }
  }
  v44 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v44 >= v8 + v12;
  v45 = v44 - (v8 + v12);
  if (v25)
  {
    v101 = 0;
    v46 = v45 + v12;
    if (v46 <= 0xFFFFFFFFFFFFFFFBLL && v46 + 4 <= v42)
    {
      *(_DWORD *)(v8 + v46) = a2[8];
      v101 = v42;
      v12 = v46 + 4;
    }
  }
  else
  {
    v101 = v42;
  }
  v47 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v47 >= v8 + v12)
  {
    v48 = (char *)v47 - v8;
    if ((unint64_t)v47 - v8 > 0xFFFFFFFFFFFFFFFBLL)
      goto LABEL_71;
    v12 = (unint64_t)(v48 + 4);
    if ((unint64_t)(v48 + 4) > v101)
      goto LABEL_71;
    *v47 = a2[9];
  }
  if (v101)
  {
    v49 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v50 = *(_QWORD *)(a1 + 56);
    if (v49 + 16 < v50)
    {
LABEL_61:
      if (v12 <= 0x10)
        v12 = 16;
      v51 = v49 + v12;
      if (v50 <= v51)
        v52 = 0;
      else
        v52 = v51;
      *(_QWORD *)(a1 + 72) = v52;
      v53 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v52, v53));
      if (v54 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v55 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v55;
    }
LABEL_129:
    v49 = 0;
    goto LABEL_61;
  }
LABEL_71:
  v50 = v105;
  if (!v105)
  {
    __break(1u);
    goto LABEL_129;
  }
  v56 = (v103 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v57 = v56 - v103;
  if (v56 < v103)
  {
    v58 = 0;
  }
  else
  {
    v58 = 0;
    if (v57 <= 0xFFFFFFFFFFFFFFFDLL && v57 + 2 <= v104)
    {
      *(_WORD *)(v103 + v57) = 2821;
      v58 = v57 + 2;
    }
  }
  v59 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v60 = *(_QWORD *)(a1 + 56);
  if (v59 + 16 >= v60)
    v59 = 0;
  if (v58 <= 0x10)
    v58 = 16;
  v61 = v59 + v58;
  if (v60 <= v61)
    v61 = 0;
  *(_QWORD *)(a1 + 72) = v61;
  v62 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v62);
  while (__stlxr(v61, v62));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v102, (uint64_t **)(a1 + 8));
  v63 = v102;
  v64 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v64 = 904;
  *(_QWORD *)(v64 + 8) = a3;
  *(_QWORD *)(v64 + 528) = v64 + 16;
  *(_QWORD *)(v64 + 536) = v64 + 16;
  *(_OWORD *)(v64 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v64 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v64);
  v106 = (IPC::Encoder *)v64;
  v65 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v65;
  v66 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v66;
  v67 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v67;
  v68 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v68;
  v69 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v69;
  v70 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v70;
  v71 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v71;
  v72 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v72;
  v73 = a2[8];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v73;
  v74 = a2[9];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v74;
  v55 = IPC::Connection::sendMessageImpl((uint64_t)v63, (uint64_t *)&v106, 1, 0);
  v76 = v106;
  v106 = 0;
  if (v76)
  {
    IPC::Encoder::~Encoder(v76, v75);
    WTF::fastFree(v77, v78);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v102);
  return v55;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferTextureLayer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 984;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v77 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v77 = v9;
      }
      v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v77)
        {
          *(_DWORD *)(v8 + v30) = a2[3];
          v76 = v77;
          v12 = v30 + 4;
        }
      }
      else
      {
        v76 = v77;
      }
      v31 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 4);
        if ((unint64_t)(v32 + 4) > v76)
          goto LABEL_48;
        *v31 = a2[4];
      }
      if (v76)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 984;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v55 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v76 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v76 + v63)
      {
        v63 = (unint64_t)v65 - v76 + 8;
        if ((unint64_t)v65 - v76 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v76 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::InvalidateFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  IPC::Encoder *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  void *v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unsigned int v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  unint64_t v59;
  char v60;
  IPC::Encoder *v61;
  unint64_t v62;
  unint64_t v63;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
      if (!v60)
        break;
      v8 = v58;
      v9 = v59;
      v61 = v58;
      v62 = v59;
      v63 = 0;
      v10 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v58;
      if (v10 < (unint64_t)v58)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v59)
        {
          v9 = 0;
          v12 = 0;
          v62 = 0;
        }
        else
        {
          *(_WORD *)((char *)v58 + v11) = 988;
          v63 = v11 + 2;
        }
      }
      v14 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v14 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v14 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || v14 - (char *)v8 + 4 > v9)
        {
          v62 = 0;
        }
        else
        {
          *(_DWORD *)v14 = *(_DWORD *)a2;
          v63 = v14 - (char *)v8 + 4;
        }
      }
      IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v61, *a2[1], (uint64_t)a2[1][1]);
      if (v62)
      {
        v17 = v63;
        v18 = *(_QWORD *)(a1 + 64);
        v19 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v20 = *(_QWORD *)(a1 + 56);
        if (v19 + 16 >= v20)
          v19 = 0;
        if (v63 <= 0x10)
          v17 = 16;
        v21 = v19 + v17;
        if (v20 <= v21)
          v22 = 0;
        else
          v22 = v21;
        *(_QWORD *)(a1 + 72) = v22;
        v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v22, v23));
        if (v24 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v60)
      {
        v26 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = v26 - (_QWORD)v58;
        if (v26 < (unint64_t)v58)
        {
          v28 = 0;
        }
        else
        {
          v28 = 0;
          if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v59)
          {
            *(_WORD *)((char *)v58 + v27) = 2821;
            v28 = v27 + 2;
          }
        }
        v29 = *(_QWORD *)(a1 + 64);
        v30 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v31 = *(_QWORD *)(a1 + 56);
        if (v30 + 16 >= v31)
          v30 = 0;
        if (v28 <= 0x10)
          v28 = 16;
        v32 = v30 + v28;
        if (v31 <= v32)
          v32 = 0;
        *(_QWORD *)(a1 + 72) = v32;
        v33 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
        do
          __ldaxr(v33);
        while (__stlxr(v32, v33));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
        v34 = v57;
        v35 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v35 = 988;
        *(_QWORD *)(v35 + 8) = a3;
        *(_QWORD *)(v35 + 528) = v35 + 16;
        *(_QWORD *)(v35 + 536) = v35 + 16;
        *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v35 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
        v61 = (IPC::Encoder *)v35;
        v36 = *(_DWORD *)a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v35, 4uLL, 4) = v36;
        IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v35, *a2[1], (uint64_t)a2[1][1]);
        v25 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v61, 1, 0);
        v38 = v61;
        v61 = 0;
        if (v38)
        {
          IPC::Encoder::~Encoder(v38, v37);
          WTF::fastFree(v39, v40);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v57);
        return v25;
      }
      __break(1u);
LABEL_84:
      v41 = 0;
LABEL_85:
      v44 = 0;
LABEL_54:
      v46 = (char *)(((unint64_t)v16 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v46 >= (char *)v16 + v44)
      {
        v44 = v46 - (char *)v16 + 8;
        if ((unint64_t)(v46 - (char *)v16) > 0xFFFFFFFFFFFFFFF7 || v44 > v41)
          return 17;
        *(_QWORD *)v46 = a3;
      }
      if (!v41)
        return 17;
      v48 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = *(_QWORD *)(a1 + 56);
      if (v48 + 16 >= v49)
        v48 = 0;
      if (v44 <= 0x10)
        v44 = 16;
      v50 = v48 + v44;
      if (v49 <= v50)
        v50 = 0;
      *(_QWORD *)(a1 + 72) = v50;
      v51 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v50, v51));
      v53 = *(_DWORD *)(a1 + 108);
      if (v52 == 0x80000000 || v53 != 0)
      {
        v56 = v53 + 1;
        *(_DWORD *)(a1 + 108) = v56;
        if (v56 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v61, a4);
    if ((_BYTE)v63)
    {
      v16 = v61;
      v41 = v62;
      v42 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = v42 - (_QWORD)v61;
      if (v42 < (unint64_t)v61)
        goto LABEL_85;
      v44 = v43 + 2;
      if (v43 > 0xFFFFFFFFFFFFFFFDLL || v44 > v62)
        goto LABEL_84;
      *(_WORD *)((char *)v61 + v43) = 2822;
      goto LABEL_54;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::InvalidateSubFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  unint64_t v16;
  IPC::Encoder *v17;
  IPC::Encoder *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  void *v55;
  IPC::Encoder *v56;
  WTF *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v64;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  unsigned int v74;
  uint64_t *v75;
  IPC::Encoder *v76;
  unint64_t v77;
  char v78;
  IPC::Encoder *v79;
  IPC::Encoder *v80;
  uint64_t v81;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v76, a4);
      if (!v78)
        return 15;
      v8 = v76;
      v9 = v77;
      v79 = v76;
      v80 = (IPC::Encoder *)v77;
      v81 = 0;
      v10 = ((unint64_t)v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v76;
      if (v10 < (unint64_t)v76)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v77)
        {
          v9 = 0;
          v12 = 0;
          v80 = 0;
        }
        else
        {
          *(_WORD *)((char *)v76 + v11) = 989;
          v81 = v11 + 2;
        }
      }
      v14 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v14 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v14 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || v14 - (char *)v8 + 4 > v9)
        {
          v80 = 0;
        }
        else
        {
          *(_DWORD *)v14 = *(_DWORD *)a2;
          v81 = v14 - (char *)v8 + 4;
        }
      }
      IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v79, *a2[1], (uint64_t)a2[1][1]);
      v17 = v80;
      v16 = v81;
      v18 = v79;
      v19 = ((unint64_t)v79 + v81 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - ((_QWORD)v79 + v81);
      if (v19 >= (unint64_t)v79 + v81)
      {
        v21 = v19 - (_QWORD)v79;
        v22 = v20 + v81 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > (unint64_t)v80)
        {
          v17 = 0;
          v80 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v79 + v21) = *((_DWORD *)a2 + 4);
          v81 = v22;
          v18 = v79;
          v17 = v80;
          v16 = v22;
        }
      }
      v24 = ((unint64_t)v18 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 - ((_QWORD)v18 + v16);
      if (v24 >= (unint64_t)v18 + v16)
      {
        v26 = v24 - (_QWORD)v18;
        if (v25 + v16 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > (unint64_t)v17)
        {
          v17 = 0;
          v80 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v18 + v26) = *((_DWORD *)a2 + 5);
          v81 = v26 + 4;
          v18 = v79;
          v17 = v80;
          v16 = v26 + 4;
        }
      }
      v27 = ((unint64_t)v18 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = v27 - ((_QWORD)v18 + v16);
      if (v27 >= (unint64_t)v18 + v16)
      {
        v29 = v27 - (_QWORD)v18;
        if (v28 + v16 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > (unint64_t)v17)
        {
          v17 = 0;
          v80 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v18 + v29) = *((_DWORD *)a2 + 6);
          v81 = v29 + 4;
          v18 = v79;
          v17 = v80;
          v16 = v29 + 4;
        }
      }
      v30 = (char *)(((unint64_t)v18 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v30 >= (char *)v18 + v16)
      {
        v31 = v30 - (char *)v18;
        if ((unint64_t)(v30 - (char *)v18) > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_46;
        v16 = v31 + 4;
        if (v31 + 4 > (unint64_t)v17)
          goto LABEL_46;
        *(_DWORD *)v30 = *((_DWORD *)a2 + 7);
        v81 = v31 + 4;
        v17 = v80;
      }
      if (v17)
      {
        v32 = *(_QWORD *)(a1 + 64);
        v33 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(a1 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v16 <= 0x10)
          v16 = 16;
        v35 = v33 + v16;
        if (v34 <= v35)
          v36 = 0;
        else
          v36 = v35;
        *(_QWORD *)(a1 + 72) = v36;
        v37 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v36, v37));
        if (v38 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
LABEL_46:
      if (v78)
      {
        v40 = ((unint64_t)v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v41 = v40 - (_QWORD)v76;
        if (v40 < (unint64_t)v76)
        {
          v42 = 0;
        }
        else
        {
          v42 = 0;
          if (v41 <= 0xFFFFFFFFFFFFFFFDLL && v41 + 2 <= v77)
          {
            *(_WORD *)((char *)v76 + v41) = 2821;
            v42 = v41 + 2;
          }
        }
        v43 = *(_QWORD *)(a1 + 64);
        v44 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v45 = *(_QWORD *)(a1 + 56);
        if (v44 + 16 >= v45)
          v44 = 0;
        if (v42 <= 0x10)
          v42 = 16;
        v46 = v44 + v42;
        if (v45 <= v46)
          v46 = 0;
        *(_QWORD *)(a1 + 72) = v46;
        v47 = (unint64_t *)(*(_QWORD *)(v43 + 16) + 128);
        do
          __ldaxr(v47);
        while (__stlxr(v46, v47));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v75, (uint64_t **)(a1 + 8));
        v48 = v75;
        v49 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v49 = 989;
        *(_QWORD *)(v49 + 8) = a3;
        *(_QWORD *)(v49 + 528) = v49 + 16;
        *(_QWORD *)(v49 + 536) = v49 + 16;
        *(_OWORD *)(v49 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v49 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v49);
        v79 = (IPC::Encoder *)v49;
        v50 = *(_DWORD *)a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v49, 4uLL, 4) = v50;
        IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v49, *a2[1], (uint64_t)a2[1][1]);
        v51 = *((_DWORD *)a2 + 4);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v49, 4uLL, 4) = v51;
        v52 = *((_DWORD *)a2 + 5);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v49, 4uLL, 4) = v52;
        v53 = *((_DWORD *)a2 + 6);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v49, 4uLL, 4) = v53;
        v54 = *((_DWORD *)a2 + 7);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v49, 4uLL, 4) = v54;
        v39 = IPC::Connection::sendMessageImpl((uint64_t)v48, (uint64_t *)&v79, 1, 0);
        v56 = v79;
        v79 = 0;
        if (v56)
        {
          IPC::Encoder::~Encoder(v56, v55);
          WTF::fastFree(v57, v58);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v75);
        return v39;
      }
      __break(1u);
LABEL_105:
      v59 = 0;
LABEL_106:
      v62 = 0;
LABEL_72:
      v64 = (char *)(((unint64_t)v17 + v62 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v64 >= (char *)v17 + v62)
      {
        v62 = v64 - (char *)v17 + 8;
        if ((unint64_t)(v64 - (char *)v17) > 0xFFFFFFFFFFFFFFF7 || v62 > v59)
          return 17;
        *(_QWORD *)v64 = a3;
      }
      if (!v59)
        return 17;
      v66 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v67 = *(_QWORD *)(a1 + 56);
      if (v66 + 16 >= v67)
        v66 = 0;
      if (v62 <= 0x10)
        v62 = 16;
      v68 = v66 + v62;
      if (v67 <= v68)
        v68 = 0;
      *(_QWORD *)(a1 + 72) = v68;
      v69 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v68, v69));
      v71 = *(_DWORD *)(a1 + 108);
      if (v70 == 0x80000000 || v71 != 0)
      {
        v74 = v71 + 1;
        *(_DWORD *)(a1 + 108) = v74;
        if (v74 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if ((_BYTE)v81)
  {
    v17 = v79;
    v59 = (unint64_t)v80;
    v60 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v61 = v60 - (_QWORD)v79;
    if (v60 < (unint64_t)v79)
      goto LABEL_106;
    v62 = v61 + 2;
    if (v61 > 0xFFFFFFFFFFFFFFFDLL || v62 > (unint64_t)v80)
      goto LABEL_105;
    *(_WORD *)((char *)v79 + v61) = 2822;
    goto LABEL_72;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ReadBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 1005;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 1005;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisample,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1008;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1008;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v26;
  unint64_t v27;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    v23 = v21 - v2;
    v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      v2 = *result;
      v3 = v24;
    }
  }
  v26 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v26 >= v2 + v3)
  {
    v27 = (unint64_t)v26 - v2 + 4;
    if ((unint64_t)v26 - v2 > 0xFFFFFFFFFFFFFFFBLL || v27 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v26 = a2[4];
      result[2] = v27;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = v2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LODWORD(v2) = v2[4];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexStorage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1033;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1033;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexStorage3D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  void *v59;
  IPC::Encoder *v60;
  WTF *v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v69;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 v85;
  IPC::Encoder *v86;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v83, a4);
  if (!v85)
    return 15;
  v64 = v83;
  v63 = v84;
  v65 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v66 = v65 - v83;
  if (v65 >= v83)
  {
    v67 = v66 + 2;
    if (v66 <= 0xFFFFFFFFFFFFFFFDLL && v67 <= v84)
    {
      *(_WORD *)(v83 + v66) = 2822;
      goto LABEL_77;
    }
    v63 = 0;
  }
  v67 = 0;
LABEL_77:
  v69 = (_QWORD *)((v64 + v67 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v69 >= v64 + v67)
  {
    v67 = (unint64_t)v69 - v64 + 8;
    if ((unint64_t)v69 - v64 > 0xFFFFFFFFFFFFFFF7 || v67 > v63)
      return 17;
    *v69 = a3;
  }
  if (!v63)
    return 17;
  v71 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = *(_QWORD *)(a1 + 56);
  if (v71 + 16 >= v72)
    v71 = 0;
  if (v67 <= 0x10)
    v67 = 16;
  v73 = v71 + v67;
  if (v72 <= v73)
    v73 = 0;
  *(_QWORD *)(a1 + 72) = v73;
  v74 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v73, v74));
  v76 = *(_DWORD *)(a1 + 108);
  if (v75 == 0x80000000 || v76 != 0)
  {
    v79 = v76 + 1;
    *(_DWORD *)(a1 + 108) = v79;
    if (v79 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v83, a4);
  if (!v85)
    return 15;
  v8 = v83;
  v9 = v84;
  v10 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v83;
  if (v10 >= v83)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v84)
    {
      *(_WORD *)(v83 + v11) = 1034;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v81 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v81 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v81 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v29 = v28 - (v8 + v12);
  if (v28 < v8 + v12)
  {
    v30 = v81;
  }
  else
  {
    v30 = 0;
    v31 = v29 + v12;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v81)
    {
      *(_DWORD *)(v8 + v31) = a2[3];
      v30 = v81;
      v12 = v31 + 4;
    }
  }
  v32 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v32 >= v8 + v12;
  v33 = v32 - (v8 + v12);
  if (v25)
  {
    v80 = 0;
    v34 = v33 + v12;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v30)
    {
      *(_DWORD *)(v8 + v34) = a2[4];
      v80 = v30;
      v12 = v34 + 4;
    }
  }
  else
  {
    v80 = v30;
  }
  v35 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v35 >= v8 + v12)
  {
    v36 = (char *)v35 - v8;
    if ((unint64_t)v35 - v8 > 0xFFFFFFFFFFFFFFFBLL)
      goto LABEL_52;
    v12 = (unint64_t)(v36 + 4);
    if ((unint64_t)(v36 + 4) > v80)
      goto LABEL_52;
    *v35 = a2[5];
  }
  if (v80)
  {
    v37 = *(_QWORD *)(a1 + 64);
    v38 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v39 = *(_QWORD *)(a1 + 56);
    if (v38 + 16 >= v39)
      v38 = 0;
    if (v12 <= 0x10)
      v12 = 16;
    v40 = v38 + v12;
    if (v39 <= v40)
      v41 = 0;
    else
      v41 = v40;
    *(_QWORD *)(a1 + 72) = v41;
    v42 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v41, v42));
    if (v43 != 0x80000000 && !*(_DWORD *)(a1 + 108))
      return 0;
    if (*(_BYTE *)(a1 + 96))
      MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
    v44 = 0;
    *(_DWORD *)(a1 + 108) = 0;
    return v44;
  }
LABEL_52:
  v45 = v85;
  if (v85)
  {
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v45 = 0;
    }
    else
    {
      v45 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v45 = v47 + 2;
      }
    }
    v48 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)(a1 + 56);
    if (v48 + 16 < v12)
      goto LABEL_58;
  }
  else
  {
    __break(1u);
  }
  v48 = 0;
LABEL_58:
  if (v45 <= 0x10)
    v45 = 16;
  v49 = v48 + v45;
  if (v12 <= v49)
    v49 = 0;
  *(_QWORD *)(a1 + 72) = v49;
  v50 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v50);
  while (__stlxr(v49, v50));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v82, (uint64_t **)(a1 + 8));
  v51 = v82;
  v52 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v52 = 1034;
  *(_QWORD *)(v52 + 8) = a3;
  *(_QWORD *)(v52 + 528) = v52 + 16;
  *(_QWORD *)(v52 + 536) = v52 + 16;
  *(_OWORD *)(v52 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v52 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v52);
  v86 = (IPC::Encoder *)v52;
  v53 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v53;
  v54 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v54;
  v55 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v55;
  v56 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v56;
  v57 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v57;
  v58 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v58;
  v44 = IPC::Connection::sendMessageImpl((uint64_t)v51, (uint64_t *)&v86, 1, 0);
  v60 = v86;
  v86 = 0;
  if (v60)
  {
    IPC::Encoder::~Encoder(v60, v59);
    WTF::fastFree(v61, v62);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v82);
  return v44;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  void *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  unint64_t v67;
  IPC::Encoder *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v73;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  unsigned int v83;
  uint64_t *v84;
  IPC::Encoder *v85;
  unint64_t v86;
  unsigned __int8 v87;
  IPC::Encoder *v88;
  unint64_t v89;
  unint64_t v90;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v88, a4);
  if (!(_BYTE)v90)
    return 15;
  v68 = v88;
  v67 = v89;
  v69 = ((unint64_t)v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v70 = v69 - (_QWORD)v88;
  if (v69 >= (unint64_t)v88)
  {
    v71 = v70 + 2;
    if (v70 <= 0xFFFFFFFFFFFFFFFDLL && v71 <= v89)
    {
      *(_WORD *)((char *)v88 + v70) = 2822;
      goto LABEL_86;
    }
    v67 = 0;
  }
  v71 = 0;
LABEL_86:
  v73 = (char *)(((unint64_t)v68 + v71 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v73 >= (char *)v68 + v71)
  {
    v71 = v73 - (char *)v68 + 8;
    if ((unint64_t)(v73 - (char *)v68) > 0xFFFFFFFFFFFFFFF7 || v71 > v67)
      return 17;
    *(_QWORD *)v73 = a3;
  }
  if (!v67)
    return 17;
  v75 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v76 = *(_QWORD *)(a1 + 56);
  if (v75 + 16 >= v76)
    v75 = 0;
  if (v71 <= 0x10)
    v71 = 16;
  v77 = v75 + v71;
  if (v76 <= v77)
    v77 = 0;
  *(_QWORD *)(a1 + 72) = v77;
  v78 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v77, v78));
  v80 = *(_DWORD *)(a1 + 108);
  if (v79 == 0x80000000 || v80 != 0)
  {
    v83 = v80 + 1;
    *(_DWORD *)(a1 + 108) = v83;
    if (v83 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v85, a4);
  if (!v87)
    return 15;
  v8 = v85;
  v9 = v86;
  v88 = v85;
  v89 = v86;
  v90 = 0;
  v10 = ((unint64_t)v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - (_QWORD)v85;
  if (v10 < (unint64_t)v85)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v86)
    {
      v9 = 0;
      v12 = 0;
      v89 = 0;
    }
    else
    {
      *(_WORD *)((char *)v85 + v11) = 1029;
      v90 = v11 + 2;
    }
  }
  v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - ((_QWORD)v8 + v12);
  if (v14 >= (unint64_t)v8 + v12)
  {
    v16 = v14 - (_QWORD)v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
      v89 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
      v90 = v17;
      v12 = v17;
    }
  }
  v19 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - ((_QWORD)v8 + v12);
  if (v19 >= (unint64_t)v8 + v12)
  {
    v21 = v19 - (_QWORD)v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
      v89 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v21) = *((_DWORD *)a2 + 1);
      v90 = v22;
      v12 = v22;
    }
  }
  v24 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v24 >= (char *)v8 + v12)
  {
    v25 = (char *)(v24 - (char *)v8);
    if ((unint64_t)(v24 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v25 + 4) > v9)
    {
      v9 = 0;
      v89 = 0;
    }
    else
    {
      *(_DWORD *)v24 = *((_DWORD *)a2 + 2);
      v90 = (unint64_t)(v25 + 4);
      v12 = (unint64_t)(v25 + 4);
    }
  }
  v26 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v26 >= (char *)v8 + v12)
  {
    v27 = (char *)(v26 - (char *)v8);
    if ((unint64_t)(v26 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > v9)
    {
      v9 = 0;
      v89 = 0;
    }
    else
    {
      *(_DWORD *)v26 = *((_DWORD *)a2 + 3);
      v90 = (unint64_t)(v27 + 4);
      v12 = (unint64_t)(v27 + 4);
    }
  }
  v28 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v28 >= (char *)v8 + v12)
  {
    v29 = (char *)(v28 - (char *)v8);
    if ((unint64_t)(v28 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v29 + 4) > v9)
    {
      v9 = 0;
      v89 = 0;
    }
    else
    {
      *(_DWORD *)v28 = *((_DWORD *)a2 + 4);
      v90 = (unint64_t)(v29 + 4);
      v12 = (unint64_t)(v29 + 4);
    }
  }
  v30 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v30 >= (char *)v8 + v12)
  {
    v31 = (char *)(v30 - (char *)v8);
    if ((unint64_t)(v30 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v31 + 4) > v9)
    {
      v9 = 0;
      v89 = 0;
    }
    else
    {
      *(_DWORD *)v30 = *((_DWORD *)a2 + 5);
      v90 = (unint64_t)(v31 + 4);
      v12 = (unint64_t)(v31 + 4);
    }
  }
  v32 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v32 >= (char *)v8 + v12)
  {
    v33 = (char *)(v32 - (char *)v8);
    if ((unint64_t)(v32 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v33 + 4) > v9)
    {
      v9 = 0;
      v89 = 0;
    }
    else
    {
      *(_DWORD *)v32 = *((_DWORD *)a2 + 6);
      v90 = (unint64_t)(v33 + 4);
      v12 = (unint64_t)(v33 + 4);
    }
  }
  v34 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v34 >= (char *)v8 + v12)
  {
    v35 = (char *)(v34 - (char *)v8);
    if ((unint64_t)(v34 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v35 + 4) > v9)
    {
      v9 = 0;
      v89 = 0;
    }
    else
    {
      *(_DWORD *)v34 = *((_DWORD *)a2 + 7);
      v90 = (unint64_t)(v35 + 4);
      v12 = (unint64_t)(v35 + 4);
    }
  }
  v36 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v36 >= (char *)v8 + v12)
  {
    v37 = (char *)(v36 - (char *)v8);
    if ((unint64_t)(v36 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v37 + 4) > v9)
    {
      v89 = 0;
    }
    else
    {
      *(_DWORD *)v36 = *((_DWORD *)a2 + 8);
      v90 = (unint64_t)(v37 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v88, *a2[5], (size_t)a2[5][1]);
  if (v89)
  {
    v39 = v90;
    v40 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v38 = *(_QWORD *)(a1 + 56);
    if (v40 + 16 < v38)
    {
LABEL_51:
      if (v39 <= 0x10)
        v39 = 16;
      v41 = v40 + v39;
      if (v38 <= v41)
        v41 = 0;
      *(_QWORD *)(a1 + 72) = v41;
      v42 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v41, v42));
      if (v43 == 0x80000000 || *(_DWORD *)(a1 + 108))
      {
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        *(_DWORD *)(a1 + 108) = 0;
      }
      return 0;
    }
LABEL_124:
    v40 = 0;
    goto LABEL_51;
  }
  v39 = v87;
  if (!v87)
  {
    __break(1u);
    goto LABEL_124;
  }
  v45 = ((unint64_t)v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v46 = v45 - (_QWORD)v85;
  if (v45 < (unint64_t)v85)
  {
    v47 = 0;
  }
  else
  {
    v47 = 0;
    if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v46 + 2 <= v86)
    {
      *(_WORD *)((char *)v85 + v46) = 2821;
      v47 = v46 + 2;
    }
  }
  v48 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v49 = *(_QWORD *)(a1 + 56);
  if (v48 + 16 >= v49)
    v48 = 0;
  if (v47 <= 0x10)
    v47 = 16;
  v50 = v48 + v47;
  if (v49 <= v50)
    v50 = 0;
  *(_QWORD *)(a1 + 72) = v50;
  v51 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v51);
  while (__stlxr(v50, v51));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v84, (uint64_t **)(a1 + 8));
  v52 = v84;
  v53 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v53 = 1029;
  *(_QWORD *)(v53 + 8) = a3;
  *(_QWORD *)(v53 + 528) = v53 + 16;
  *(_QWORD *)(v53 + 536) = v53 + 16;
  *(_OWORD *)(v53 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v53 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v53);
  v88 = (IPC::Encoder *)v53;
  v54 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v53, 4uLL, 4) = v54;
  v55 = *((_DWORD *)a2 + 1);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v53, 4uLL, 4) = v55;
  v56 = *((_DWORD *)a2 + 2);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v53, 4uLL, 4) = v56;
  v57 = *((_DWORD *)a2 + 3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v53, 4uLL, 4) = v57;
  v58 = *((_DWORD *)a2 + 4);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v53, 4uLL, 4) = v58;
  v59 = *((_DWORD *)a2 + 5);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v53, 4uLL, 4) = v59;
  v60 = *((_DWORD *)a2 + 6);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v53, 4uLL, 4) = v60;
  v61 = *((_DWORD *)a2 + 7);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v53, 4uLL, 4) = v61;
  v62 = *((_DWORD *)a2 + 8);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v53, 4uLL, 4) = v62;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v53, *a2[5], (size_t)a2[5][1]);
  v44 = IPC::Connection::sendMessageImpl((uint64_t)v52, (uint64_t *)&v88, 1, 0);
  v64 = v88;
  v88 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v63);
    WTF::fastFree(v65, v66);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v84);
  return v44;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  void *v75;
  IPC::Encoder *v76;
  WTF *v77;
  void *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v85;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unsigned __int8 v105;
  IPC::Encoder *v106;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v103, a4);
  if (!v105)
    return 15;
  v80 = v103;
  v79 = v104;
  v81 = (v103 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v82 = v81 - v103;
  if (v81 >= v103)
  {
    v83 = v82 + 2;
    if (v82 <= 0xFFFFFFFFFFFFFFFDLL && v83 <= v104)
    {
      *(_WORD *)(v103 + v82) = 2822;
      goto LABEL_97;
    }
    v79 = 0;
  }
  v83 = 0;
LABEL_97:
  v85 = (_QWORD *)((v80 + v83 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v85 >= v80 + v83)
  {
    v83 = (unint64_t)v85 - v80 + 8;
    if ((unint64_t)v85 - v80 > 0xFFFFFFFFFFFFFFF7 || v83 > v79)
      return 17;
    *v85 = a3;
  }
  if (!v79)
    return 17;
  v87 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v88 = *(_QWORD *)(a1 + 56);
  if (v87 + 16 >= v88)
    v87 = 0;
  if (v83 <= 0x10)
    v83 = 16;
  v89 = v87 + v83;
  if (v88 <= v89)
    v89 = 0;
  *(_QWORD *)(a1 + 72) = v89;
  v90 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v89, v90));
  v92 = *(_DWORD *)(a1 + 108);
  if (v91 == 0x80000000 || v92 != 0)
  {
    v95 = v92 + 1;
    *(_DWORD *)(a1 + 108) = v95;
    if (v95 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v103, a4);
  if (!v105)
    return 15;
  v8 = v103;
  v9 = v104;
  v10 = (v103 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v103;
  if (v10 >= v103)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v104)
    {
      *(_WORD *)(v103 + v11) = 1030;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v96 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v96 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v96 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v97 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v96)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v97 = v96;
      v12 = v30 + 4;
    }
  }
  else
  {
    v97 = v96;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v98 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v97)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v98 = v97;
      v12 = v33 + 4;
    }
  }
  else
  {
    v98 = v97;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v34 >= v8 + v12;
  v35 = v34 - (v8 + v12);
  if (v25)
  {
    v99 = 0;
    v36 = v35 + v12;
    if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= v98)
    {
      *(_DWORD *)(v8 + v36) = a2[5];
      v99 = v98;
      v12 = v36 + 4;
    }
  }
  else
  {
    v99 = v98;
  }
  v37 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v37 >= v8 + v12;
  v38 = v37 - (v8 + v12);
  if (v25)
  {
    v100 = 0;
    v39 = v38 + v12;
    if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= v99)
    {
      *(_DWORD *)(v8 + v39) = a2[6];
      v100 = v99;
      v12 = v39 + 4;
    }
  }
  else
  {
    v100 = v99;
  }
  v40 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v41 = v40 - (v8 + v12);
  if (v40 < v8 + v12)
  {
    v42 = v100;
  }
  else
  {
    v42 = 0;
    v43 = v41 + v12;
    if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= v100)
    {
      *(_DWORD *)(v8 + v43) = a2[7];
      v42 = v100;
      v12 = v43 + 4;
    }
  }
  v44 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v44 >= v8 + v12;
  v45 = v44 - (v8 + v12);
  if (v25)
  {
    v101 = 0;
    v46 = v45 + v12;
    if (v46 <= 0xFFFFFFFFFFFFFFFBLL && v46 + 4 <= v42)
    {
      *(_DWORD *)(v8 + v46) = a2[8];
      v101 = v42;
      v12 = v46 + 4;
    }
  }
  else
  {
    v101 = v42;
  }
  v47 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v47 >= v8 + v12)
  {
    v48 = (char *)v47 - v8;
    if ((unint64_t)v47 - v8 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_71;
    v12 = (unint64_t)(v48 + 8);
    if ((unint64_t)(v48 + 8) > v101)
      goto LABEL_71;
    *v47 = *((_QWORD *)a2 + 5);
  }
  if (v101)
  {
    v49 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v50 = *(_QWORD *)(a1 + 56);
    if (v49 + 16 < v50)
    {
LABEL_61:
      if (v12 <= 0x10)
        v12 = 16;
      v51 = v49 + v12;
      if (v50 <= v51)
        v52 = 0;
      else
        v52 = v51;
      *(_QWORD *)(a1 + 72) = v52;
      v53 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v52, v53));
      if (v54 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v55 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v55;
    }
LABEL_129:
    v49 = 0;
    goto LABEL_61;
  }
LABEL_71:
  v50 = v105;
  if (!v105)
  {
    __break(1u);
    goto LABEL_129;
  }
  v56 = (v103 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v57 = v56 - v103;
  if (v56 < v103)
  {
    v58 = 0;
  }
  else
  {
    v58 = 0;
    if (v57 <= 0xFFFFFFFFFFFFFFFDLL && v57 + 2 <= v104)
    {
      *(_WORD *)(v103 + v57) = 2821;
      v58 = v57 + 2;
    }
  }
  v59 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v60 = *(_QWORD *)(a1 + 56);
  if (v59 + 16 >= v60)
    v59 = 0;
  if (v58 <= 0x10)
    v58 = 16;
  v61 = v59 + v58;
  if (v60 <= v61)
    v61 = 0;
  *(_QWORD *)(a1 + 72) = v61;
  v62 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v62);
  while (__stlxr(v61, v62));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v102, (uint64_t **)(a1 + 8));
  v63 = v102;
  v64 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v64 = 1030;
  *(_QWORD *)(v64 + 8) = a3;
  *(_QWORD *)(v64 + 528) = v64 + 16;
  *(_QWORD *)(v64 + 536) = v64 + 16;
  *(_OWORD *)(v64 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v64 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v64);
  v106 = (IPC::Encoder *)v64;
  v65 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v65;
  v66 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v66;
  v67 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v67;
  v68 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v68;
  v69 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v69;
  v70 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v70;
  v71 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v71;
  v72 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v72;
  v73 = a2[8];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 4uLL, 4) = v73;
  v74 = *((_QWORD *)a2 + 5);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v64, 8uLL, 8) = v74;
  v55 = IPC::Connection::sendMessageImpl((uint64_t)v63, (uint64_t *)&v106, 1, 0);
  v76 = v106;
  v106 = 0;
  if (v76)
  {
    IPC::Encoder::~Encoder(v76, v75);
    WTF::fastFree(v77, v78);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v102);
  return v55;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  void *v66;
  IPC::Encoder *v67;
  WTF *v68;
  void *v69;
  unint64_t v70;
  IPC::Encoder *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v76;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  unsigned int v86;
  uint64_t *v87;
  IPC::Encoder *v88;
  unint64_t v89;
  unsigned __int8 v90;
  IPC::Encoder *v91;
  unint64_t v92;
  unint64_t v93;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v91, a4);
  if (!(_BYTE)v93)
    return 15;
  v71 = v91;
  v70 = v92;
  v72 = ((unint64_t)v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = v72 - (_QWORD)v91;
  if (v72 >= (unint64_t)v91)
  {
    v74 = v73 + 2;
    if (v73 <= 0xFFFFFFFFFFFFFFFDLL && v74 <= v92)
    {
      *(_WORD *)((char *)v91 + v73) = 2822;
      goto LABEL_90;
    }
    v70 = 0;
  }
  v74 = 0;
LABEL_90:
  v76 = (char *)(((unint64_t)v71 + v74 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v76 >= (char *)v71 + v74)
  {
    v74 = v76 - (char *)v71 + 8;
    if ((unint64_t)(v76 - (char *)v71) > 0xFFFFFFFFFFFFFFF7 || v74 > v70)
      return 17;
    *(_QWORD *)v76 = a3;
  }
  if (!v70)
    return 17;
  v78 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v79 = *(_QWORD *)(a1 + 56);
  if (v78 + 16 >= v79)
    v78 = 0;
  if (v74 <= 0x10)
    v74 = 16;
  v80 = v78 + v74;
  if (v79 <= v80)
    v80 = 0;
  *(_QWORD *)(a1 + 72) = v80;
  v81 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v80, v81));
  v83 = *(_DWORD *)(a1 + 108);
  if (v82 == 0x80000000 || v83 != 0)
  {
    v86 = v83 + 1;
    *(_DWORD *)(a1 + 108) = v86;
    if (v86 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v88, a4);
  if (!v90)
    return 15;
  v8 = v88;
  v9 = v89;
  v91 = v88;
  v92 = v89;
  v93 = 0;
  v10 = ((unint64_t)v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - (_QWORD)v88;
  if (v10 < (unint64_t)v88)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v89)
    {
      v9 = 0;
      v12 = 0;
      v92 = 0;
    }
    else
    {
      *(_WORD *)((char *)v88 + v11) = 1037;
      v93 = v11 + 2;
    }
  }
  v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - ((_QWORD)v8 + v12);
  if (v14 >= (unint64_t)v8 + v12)
  {
    v16 = v14 - (_QWORD)v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
      v93 = v17;
      v12 = v17;
    }
  }
  v19 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - ((_QWORD)v8 + v12);
  if (v19 >= (unint64_t)v8 + v12)
  {
    v21 = v19 - (_QWORD)v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v21) = *((_DWORD *)a2 + 1);
      v93 = v22;
      v12 = v22;
    }
  }
  v24 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v24 >= (char *)v8 + v12)
  {
    v25 = (char *)(v24 - (char *)v8);
    if ((unint64_t)(v24 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v25 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v24 = *((_DWORD *)a2 + 2);
      v93 = (unint64_t)(v25 + 4);
      v12 = (unint64_t)(v25 + 4);
    }
  }
  v26 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v26 >= (char *)v8 + v12)
  {
    v27 = (char *)(v26 - (char *)v8);
    if ((unint64_t)(v26 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v26 = *((_DWORD *)a2 + 3);
      v93 = (unint64_t)(v27 + 4);
      v12 = (unint64_t)(v27 + 4);
    }
  }
  v28 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v28 >= (char *)v8 + v12)
  {
    v29 = (char *)(v28 - (char *)v8);
    if ((unint64_t)(v28 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v29 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v28 = *((_DWORD *)a2 + 4);
      v93 = (unint64_t)(v29 + 4);
      v12 = (unint64_t)(v29 + 4);
    }
  }
  v30 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v30 >= (char *)v8 + v12)
  {
    v31 = (char *)(v30 - (char *)v8);
    if ((unint64_t)(v30 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v31 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v30 = *((_DWORD *)a2 + 5);
      v93 = (unint64_t)(v31 + 4);
      v12 = (unint64_t)(v31 + 4);
    }
  }
  v32 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v32 >= (char *)v8 + v12)
  {
    v33 = (char *)(v32 - (char *)v8);
    if ((unint64_t)(v32 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v33 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v32 = *((_DWORD *)a2 + 6);
      v93 = (unint64_t)(v33 + 4);
      v12 = (unint64_t)(v33 + 4);
    }
  }
  v34 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v34 >= (char *)v8 + v12)
  {
    v35 = (char *)(v34 - (char *)v8);
    if ((unint64_t)(v34 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v35 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v34 = *((_DWORD *)a2 + 7);
      v93 = (unint64_t)(v35 + 4);
      v12 = (unint64_t)(v35 + 4);
    }
  }
  v36 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v36 >= (char *)v8 + v12)
  {
    v37 = (char *)(v36 - (char *)v8);
    if ((unint64_t)(v36 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v37 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v36 = *((_DWORD *)a2 + 8);
      v93 = (unint64_t)(v37 + 4);
      v12 = (unint64_t)(v37 + 4);
    }
  }
  v38 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v38 >= (char *)v8 + v12)
  {
    v39 = (char *)(v38 - (char *)v8);
    if ((unint64_t)(v38 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v39 + 4) > v9)
    {
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v38 = *((_DWORD *)a2 + 9);
      v93 = (unint64_t)(v39 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v91, *a2[5], (size_t)a2[5][1]);
  if (v92)
  {
    v41 = v93;
    v42 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v40 = *(_QWORD *)(a1 + 56);
    if (v42 + 16 < v40)
    {
LABEL_55:
      if (v41 <= 0x10)
        v41 = 16;
      v43 = v42 + v41;
      if (v40 <= v43)
        v43 = 0;
      *(_QWORD *)(a1 + 72) = v43;
      v44 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v43, v44));
      if (v45 == 0x80000000 || *(_DWORD *)(a1 + 108))
      {
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        *(_DWORD *)(a1 + 108) = 0;
      }
      return 0;
    }
LABEL_129:
    v42 = 0;
    goto LABEL_55;
  }
  v41 = v90;
  if (!v90)
  {
    __break(1u);
    goto LABEL_129;
  }
  v47 = ((unint64_t)v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v48 = v47 - (_QWORD)v88;
  if (v47 < (unint64_t)v88)
  {
    v49 = 0;
  }
  else
  {
    v49 = 0;
    if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v89)
    {
      *(_WORD *)((char *)v88 + v48) = 2821;
      v49 = v48 + 2;
    }
  }
  v50 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = *(_QWORD *)(a1 + 56);
  if (v50 + 16 >= v51)
    v50 = 0;
  if (v49 <= 0x10)
    v49 = 16;
  v52 = v50 + v49;
  if (v51 <= v52)
    v52 = 0;
  *(_QWORD *)(a1 + 72) = v52;
  v53 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v53);
  while (__stlxr(v52, v53));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v87, (uint64_t **)(a1 + 8));
  v54 = v87;
  v55 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v55 = 1037;
  *(_QWORD *)(v55 + 8) = a3;
  *(_QWORD *)(v55 + 528) = v55 + 16;
  *(_QWORD *)(v55 + 536) = v55 + 16;
  *(_OWORD *)(v55 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v55 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v55);
  v91 = (IPC::Encoder *)v55;
  v56 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v56;
  v57 = *((_DWORD *)a2 + 1);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v57;
  v58 = *((_DWORD *)a2 + 2);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v58;
  v59 = *((_DWORD *)a2 + 3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v59;
  v60 = *((_DWORD *)a2 + 4);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v60;
  v61 = *((_DWORD *)a2 + 5);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v61;
  v62 = *((_DWORD *)a2 + 6);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v62;
  v63 = *((_DWORD *)a2 + 7);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v63;
  v64 = *((_DWORD *)a2 + 8);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v64;
  v65 = *((_DWORD *)a2 + 9);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v65;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v55, *a2[5], (size_t)a2[5][1]);
  v46 = IPC::Connection::sendMessageImpl((uint64_t)v54, (uint64_t *)&v91, 1, 0);
  v67 = v91;
  v91 = 0;
  if (v67)
  {
    IPC::Encoder::~Encoder(v67, v66);
    WTF::fastFree(v68, v69);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v87);
  return v46;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  void *v78;
  IPC::Encoder *v79;
  WTF *v80;
  void *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v88;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unsigned __int8 v110;
  IPC::Encoder *v111;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v108, a4);
  if (!v110)
    return 15;
  v83 = v108;
  v82 = v109;
  v84 = (v108 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v85 = v84 - v108;
  if (v84 >= v108)
  {
    v86 = v85 + 2;
    if (v85 <= 0xFFFFFFFFFFFFFFFDLL && v86 <= v109)
    {
      *(_WORD *)(v108 + v85) = 2822;
      goto LABEL_103;
    }
    v82 = 0;
  }
  v86 = 0;
LABEL_103:
  v88 = (_QWORD *)((v83 + v86 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v88 >= v83 + v86)
  {
    v86 = (unint64_t)v88 - v83 + 8;
    if ((unint64_t)v88 - v83 > 0xFFFFFFFFFFFFFFF7 || v86 > v82)
      return 17;
    *v88 = a3;
  }
  if (!v82)
    return 17;
  v90 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v91 = *(_QWORD *)(a1 + 56);
  if (v90 + 16 >= v91)
    v90 = 0;
  if (v86 <= 0x10)
    v86 = 16;
  v92 = v90 + v86;
  if (v91 <= v92)
    v92 = 0;
  *(_QWORD *)(a1 + 72) = v92;
  v93 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v92, v93));
  v95 = *(_DWORD *)(a1 + 108);
  if (v94 == 0x80000000 || v95 != 0)
  {
    v98 = v95 + 1;
    *(_DWORD *)(a1 + 108) = v98;
    if (v98 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v108, a4);
  if (!v110)
    return 15;
  v8 = v108;
  v9 = v109;
  v10 = (v108 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v108;
  if (v10 >= v108)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v109)
    {
      *(_WORD *)(v108 + v11) = 1038;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v99 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v99 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v99 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v100 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v99)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v100 = v99;
      v12 = v30 + 4;
    }
  }
  else
  {
    v100 = v99;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v101 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v100)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v101 = v100;
      v12 = v33 + 4;
    }
  }
  else
  {
    v101 = v100;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v34 >= v8 + v12;
  v35 = v34 - (v8 + v12);
  if (v25)
  {
    v102 = 0;
    v36 = v35 + v12;
    if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= v101)
    {
      *(_DWORD *)(v8 + v36) = a2[5];
      v102 = v101;
      v12 = v36 + 4;
    }
  }
  else
  {
    v102 = v101;
  }
  v37 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v37 >= v8 + v12;
  v38 = v37 - (v8 + v12);
  if (v25)
  {
    v103 = 0;
    v39 = v38 + v12;
    if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= v102)
    {
      *(_DWORD *)(v8 + v39) = a2[6];
      v103 = v102;
      v12 = v39 + 4;
    }
  }
  else
  {
    v103 = v102;
  }
  v40 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v40 >= v8 + v12;
  v41 = v40 - (v8 + v12);
  if (v25)
  {
    v104 = 0;
    v42 = v41 + v12;
    if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= v103)
    {
      *(_DWORD *)(v8 + v42) = a2[7];
      v104 = v103;
      v12 = v42 + 4;
    }
  }
  else
  {
    v104 = v103;
  }
  v43 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v43 >= v8 + v12;
  v44 = v43 - (v8 + v12);
  if (v25)
  {
    v105 = 0;
    v45 = v44 + v12;
    if (v45 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= v104)
    {
      *(_DWORD *)(v8 + v45) = a2[8];
      v105 = v104;
      v12 = v45 + 4;
    }
  }
  else
  {
    v105 = v104;
  }
  v46 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v46 >= v8 + v12;
  v47 = v46 - (v8 + v12);
  if (v25)
  {
    v106 = 0;
    v48 = v47 + v12;
    if (v48 <= 0xFFFFFFFFFFFFFFFBLL && v48 + 4 <= v105)
    {
      *(_DWORD *)(v8 + v48) = a2[9];
      v106 = v105;
      v12 = v48 + 4;
    }
  }
  else
  {
    v106 = v105;
  }
  v49 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v49 >= v8 + v12)
  {
    v50 = (char *)v49 - v8;
    if ((unint64_t)v49 - v8 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_77;
    v12 = (unint64_t)(v50 + 8);
    if ((unint64_t)(v50 + 8) > v106)
      goto LABEL_77;
    *v49 = *((_QWORD *)a2 + 5);
  }
  if (v106)
  {
    v51 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = *(_QWORD *)(a1 + 56);
    if (v51 + 16 < v52)
    {
LABEL_67:
      if (v12 <= 0x10)
        v12 = 16;
      v53 = v51 + v12;
      if (v52 <= v53)
        v54 = 0;
      else
        v54 = v53;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      if (v56 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v57 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v57;
    }
LABEL_135:
    v51 = 0;
    goto LABEL_67;
  }
LABEL_77:
  v52 = v110;
  if (!v110)
  {
    __break(1u);
    goto LABEL_135;
  }
  v58 = (v108 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v59 = v58 - v108;
  if (v58 < v108)
  {
    v60 = 0;
  }
  else
  {
    v60 = 0;
    if (v59 <= 0xFFFFFFFFFFFFFFFDLL && v59 + 2 <= v109)
    {
      *(_WORD *)(v108 + v59) = 2821;
      v60 = v59 + 2;
    }
  }
  v61 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v62 = *(_QWORD *)(a1 + 56);
  if (v61 + 16 >= v62)
    v61 = 0;
  if (v60 <= 0x10)
    v60 = 16;
  v63 = v61 + v60;
  if (v62 <= v63)
    v63 = 0;
  *(_QWORD *)(a1 + 72) = v63;
  v64 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v64);
  while (__stlxr(v63, v64));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v107, (uint64_t **)(a1 + 8));
  v65 = v107;
  v66 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v66 = 1038;
  *(_QWORD *)(v66 + 8) = a3;
  *(_QWORD *)(v66 + 528) = v66 + 16;
  *(_QWORD *)(v66 + 536) = v66 + 16;
  *(_OWORD *)(v66 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v66 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v66);
  v111 = (IPC::Encoder *)v66;
  v67 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v67;
  v68 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v68;
  v69 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v69;
  v70 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v70;
  v71 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v71;
  v72 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v72;
  v73 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v73;
  v74 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v74;
  v75 = a2[8];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v75;
  v76 = a2[9];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v76;
  v77 = *((_QWORD *)a2 + 5);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 8uLL, 8) = v77;
  v57 = IPC::Connection::sendMessageImpl((uint64_t)v65, (uint64_t *)&v111, 1, 0);
  v79 = v111;
  v111 = 0;
  if (v79)
  {
    IPC::Encoder::~Encoder(v79, v78);
    WTF::fastFree(v80, v81);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v107);
  return v57;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage3D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _DWORD *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  void *v70;
  IPC::Encoder *v71;
  WTF *v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v80;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unsigned __int8 v100;
  IPC::Encoder *v101;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v98, a4);
  if (!v100)
    return 15;
  v75 = v98;
  v74 = v99;
  v76 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v77 = v76 - v98;
  if (v76 >= v98)
  {
    v78 = v77 + 2;
    if (v77 <= 0xFFFFFFFFFFFFFFFDLL && v78 <= v99)
    {
      *(_WORD *)(v98 + v77) = 2822;
      goto LABEL_93;
    }
    v74 = 0;
  }
  v78 = 0;
LABEL_93:
  v80 = (_QWORD *)((v75 + v78 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v80 >= v75 + v78)
  {
    v78 = (unint64_t)v80 - v75 + 8;
    if ((unint64_t)v80 - v75 > 0xFFFFFFFFFFFFFFF7 || v78 > v74)
      return 17;
    *v80 = a3;
  }
  if (!v74)
    return 17;
  v82 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v83 = *(_QWORD *)(a1 + 56);
  if (v82 + 16 >= v83)
    v82 = 0;
  if (v78 <= 0x10)
    v78 = 16;
  v84 = v82 + v78;
  if (v83 <= v84)
    v84 = 0;
  *(_QWORD *)(a1 + 72) = v84;
  v85 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v84, v85));
  v87 = *(_DWORD *)(a1 + 108);
  if (v86 == 0x80000000 || v87 != 0)
  {
    v90 = v87 + 1;
    *(_DWORD *)(a1 + 108) = v90;
    if (v90 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v98, a4);
  if (!v100)
    return 15;
  v8 = v98;
  v9 = v99;
  v10 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v98;
  if (v10 >= v98)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v99)
    {
      *(_WORD *)(v98 + v11) = 931;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v91 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v91 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v91 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v92 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v91)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v92 = v91;
      v12 = v30 + 4;
    }
  }
  else
  {
    v92 = v91;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v93 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v92)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v93 = v92;
      v12 = v33 + 4;
    }
  }
  else
  {
    v93 = v92;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v34 >= v8 + v12;
  v35 = v34 - (v8 + v12);
  if (v25)
  {
    v94 = 0;
    v36 = v35 + v12;
    if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= v93)
    {
      *(_DWORD *)(v8 + v36) = a2[5];
      v94 = v93;
      v12 = v36 + 4;
    }
  }
  else
  {
    v94 = v93;
  }
  v37 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v37 >= v8 + v12;
  v38 = v37 - (v8 + v12);
  if (v25)
  {
    v95 = 0;
    v39 = v38 + v12;
    if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= v94)
    {
      *(_DWORD *)(v8 + v39) = a2[6];
      v95 = v94;
      v12 = v39 + 4;
    }
  }
  else
  {
    v95 = v94;
  }
  v40 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v40 >= v8 + v12;
  v41 = v40 - (v8 + v12);
  if (v25)
  {
    v96 = 0;
    v42 = v41 + v12;
    if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= v95)
    {
      *(_DWORD *)(v8 + v42) = a2[7];
      v96 = v95;
      v12 = v42 + 4;
    }
  }
  else
  {
    v96 = v95;
  }
  v43 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v43 >= v8 + v12)
  {
    v44 = (char *)v43 - v8;
    if ((unint64_t)v43 - v8 > 0xFFFFFFFFFFFFFFFBLL)
      goto LABEL_67;
    v12 = (unint64_t)(v44 + 4);
    if ((unint64_t)(v44 + 4) > v96)
      goto LABEL_67;
    *v43 = a2[8];
  }
  if (v96)
  {
    v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = *(_QWORD *)(a1 + 56);
    if (v45 + 16 < v46)
    {
LABEL_57:
      if (v12 <= 0x10)
        v12 = 16;
      v47 = v45 + v12;
      if (v46 <= v47)
        v48 = 0;
      else
        v48 = v47;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      if (v50 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v51 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v51;
    }
LABEL_125:
    v45 = 0;
    goto LABEL_57;
  }
LABEL_67:
  v46 = v100;
  if (!v100)
  {
    __break(1u);
    goto LABEL_125;
  }
  v52 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v98;
  if (v52 < v98)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v99)
    {
      *(_WORD *)(v98 + v53) = 2821;
      v54 = v53 + 2;
    }
  }
  v55 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = *(_QWORD *)(a1 + 56);
  if (v55 + 16 >= v56)
    v55 = 0;
  if (v54 <= 0x10)
    v54 = 16;
  v57 = v55 + v54;
  if (v56 <= v57)
    v57 = 0;
  *(_QWORD *)(a1 + 72) = v57;
  v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v58);
  while (__stlxr(v57, v58));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v97, (uint64_t **)(a1 + 8));
  v59 = v97;
  v60 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v60 = 931;
  *(_QWORD *)(v60 + 8) = a3;
  *(_QWORD *)(v60 + 528) = v60 + 16;
  *(_QWORD *)(v60 + 536) = v60 + 16;
  *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v60 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
  v101 = (IPC::Encoder *)v60;
  v61 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v61;
  v62 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v62;
  v63 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v63;
  v64 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v64;
  v65 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v65;
  v66 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v66;
  v67 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v67;
  v68 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v68;
  v69 = a2[8];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v69;
  v51 = IPC::Connection::sendMessageImpl((uint64_t)v59, (uint64_t *)&v101, 1, 0);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    IPC::Encoder::~Encoder(v71, v70);
    WTF::fastFree(v72, v73);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v97);
  return v51;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  void *v60;
  IPC::Encoder *v61;
  WTF *v62;
  void *v63;
  unint64_t v64;
  IPC::Encoder *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v70;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  unsigned int v80;
  uint64_t *v81;
  IPC::Encoder *v82;
  unint64_t v83;
  unsigned __int8 v84;
  IPC::Encoder *v85;
  unint64_t v86;
  unint64_t v87;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v85, a4);
  if (!(_BYTE)v87)
    return 15;
  v65 = v85;
  v64 = v86;
  v66 = ((unint64_t)v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v67 = v66 - (_QWORD)v85;
  if (v66 >= (unint64_t)v85)
  {
    v68 = v67 + 2;
    if (v67 <= 0xFFFFFFFFFFFFFFFDLL && v68 <= v86)
    {
      *(_WORD *)((char *)v85 + v67) = 2822;
      goto LABEL_82;
    }
    v64 = 0;
  }
  v68 = 0;
LABEL_82:
  v70 = (char *)(((unint64_t)v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v70 >= (char *)v65 + v68)
  {
    v68 = v70 - (char *)v65 + 8;
    if ((unint64_t)(v70 - (char *)v65) > 0xFFFFFFFFFFFFFFF7 || v68 > v64)
      return 17;
    *(_QWORD *)v70 = a3;
  }
  if (!v64)
    return 17;
  v72 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = *(_QWORD *)(a1 + 56);
  if (v72 + 16 >= v73)
    v72 = 0;
  if (v68 <= 0x10)
    v68 = 16;
  v74 = v72 + v68;
  if (v73 <= v74)
    v74 = 0;
  *(_QWORD *)(a1 + 72) = v74;
  v75 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v74, v75));
  v77 = *(_DWORD *)(a1 + 108);
  if (v76 == 0x80000000 || v77 != 0)
  {
    v80 = v77 + 1;
    *(_DWORD *)(a1 + 108) = v80;
    if (v80 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v82, a4);
  if (!v84)
    return 15;
  v8 = v82;
  v9 = v83;
  v85 = v82;
  v86 = v83;
  v87 = 0;
  v10 = ((unint64_t)v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - (_QWORD)v82;
  if (v10 < (unint64_t)v82)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v83)
    {
      v9 = 0;
      v12 = 0;
      v86 = 0;
    }
    else
    {
      *(_WORD *)((char *)v82 + v11) = 922;
      v87 = v11 + 2;
    }
  }
  v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - ((_QWORD)v8 + v12);
  if (v14 >= (unint64_t)v8 + v12)
  {
    v16 = v14 - (_QWORD)v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
      v87 = v17;
      v12 = v17;
    }
  }
  v19 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - ((_QWORD)v8 + v12);
  if (v19 >= (unint64_t)v8 + v12)
  {
    v21 = v19 - (_QWORD)v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v21) = *((_DWORD *)a2 + 1);
      v87 = v22;
      v12 = v22;
    }
  }
  v24 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v24 >= (char *)v8 + v12)
  {
    v25 = (char *)(v24 - (char *)v8);
    if ((unint64_t)(v24 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v25 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v24 = *((_DWORD *)a2 + 2);
      v87 = (unint64_t)(v25 + 4);
      v12 = (unint64_t)(v25 + 4);
    }
  }
  v26 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v26 >= (char *)v8 + v12)
  {
    v27 = (char *)(v26 - (char *)v8);
    if ((unint64_t)(v26 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v26 = *((_DWORD *)a2 + 3);
      v87 = (unint64_t)(v27 + 4);
      v12 = (unint64_t)(v27 + 4);
    }
  }
  v28 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v28 >= (char *)v8 + v12)
  {
    v29 = (char *)(v28 - (char *)v8);
    if ((unint64_t)(v28 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v29 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v28 = *((_DWORD *)a2 + 4);
      v87 = (unint64_t)(v29 + 4);
      v12 = (unint64_t)(v29 + 4);
    }
  }
  v30 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v30 >= (char *)v8 + v12)
  {
    v31 = (char *)(v30 - (char *)v8);
    if ((unint64_t)(v30 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v31 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v30 = *((_DWORD *)a2 + 5);
      v87 = (unint64_t)(v31 + 4);
      v12 = (unint64_t)(v31 + 4);
    }
  }
  v32 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v32 >= (char *)v8 + v12)
  {
    v33 = (char *)(v32 - (char *)v8);
    if ((unint64_t)(v32 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v33 + 4) > v9)
    {
      v9 = 0;
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v32 = *((_DWORD *)a2 + 6);
      v87 = (unint64_t)(v33 + 4);
      v12 = (unint64_t)(v33 + 4);
    }
  }
  v34 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v34 >= (char *)v8 + v12)
  {
    v35 = (char *)(v34 - (char *)v8);
    if ((unint64_t)(v34 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v35 + 4) > v9)
    {
      v86 = 0;
    }
    else
    {
      *(_DWORD *)v34 = *((_DWORD *)a2 + 7);
      v87 = (unint64_t)(v35 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v85, *a2[4], (size_t)a2[4][1]);
  if (v86)
  {
    v37 = v87;
    v38 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v36 = *(_QWORD *)(a1 + 56);
    if (v38 + 16 < v36)
    {
LABEL_47:
      if (v37 <= 0x10)
        v37 = 16;
      v39 = v38 + v37;
      if (v36 <= v39)
        v39 = 0;
      *(_QWORD *)(a1 + 72) = v39;
      v40 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v39, v40));
      if (v41 == 0x80000000 || *(_DWORD *)(a1 + 108))
      {
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        *(_DWORD *)(a1 + 108) = 0;
      }
      return 0;
    }
LABEL_119:
    v38 = 0;
    goto LABEL_47;
  }
  v37 = v84;
  if (!v84)
  {
    __break(1u);
    goto LABEL_119;
  }
  v43 = ((unint64_t)v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v44 = v43 - (_QWORD)v82;
  if (v43 < (unint64_t)v82)
  {
    v45 = 0;
  }
  else
  {
    v45 = 0;
    if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= v83)
    {
      *(_WORD *)((char *)v82 + v44) = 2821;
      v45 = v44 + 2;
    }
  }
  v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = *(_QWORD *)(a1 + 56);
  if (v46 + 16 >= v47)
    v46 = 0;
  if (v45 <= 0x10)
    v45 = 16;
  v48 = v46 + v45;
  if (v47 <= v48)
    v48 = 0;
  *(_QWORD *)(a1 + 72) = v48;
  v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v49);
  while (__stlxr(v48, v49));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v81, (uint64_t **)(a1 + 8));
  v50 = v81;
  v51 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v51 = 922;
  *(_QWORD *)(v51 + 8) = a3;
  *(_QWORD *)(v51 + 528) = v51 + 16;
  *(_QWORD *)(v51 + 536) = v51 + 16;
  *(_OWORD *)(v51 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v51 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v51);
  v85 = (IPC::Encoder *)v51;
  v52 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v52;
  v53 = *((_DWORD *)a2 + 1);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v53;
  v54 = *((_DWORD *)a2 + 2);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v54;
  v55 = *((_DWORD *)a2 + 3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v55;
  v56 = *((_DWORD *)a2 + 4);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v56;
  v57 = *((_DWORD *)a2 + 5);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v57;
  v58 = *((_DWORD *)a2 + 6);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v58;
  v59 = *((_DWORD *)a2 + 7);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v51, 4uLL, 4) = v59;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v51, *a2[4], (size_t)a2[4][1]);
  v42 = IPC::Connection::sendMessageImpl((uint64_t)v50, (uint64_t *)&v85, 1, 0);
  v61 = v85;
  v85 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v60);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v81);
  return v42;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  void *v70;
  IPC::Encoder *v71;
  WTF *v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v80;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unsigned __int8 v100;
  IPC::Encoder *v101;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v98, a4);
  if (!v100)
    return 15;
  v75 = v98;
  v74 = v99;
  v76 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v77 = v76 - v98;
  if (v76 >= v98)
  {
    v78 = v77 + 2;
    if (v77 <= 0xFFFFFFFFFFFFFFFDLL && v78 <= v99)
    {
      *(_WORD *)(v98 + v77) = 2822;
      goto LABEL_93;
    }
    v74 = 0;
  }
  v78 = 0;
LABEL_93:
  v80 = (_QWORD *)((v75 + v78 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v80 >= v75 + v78)
  {
    v78 = (unint64_t)v80 - v75 + 8;
    if ((unint64_t)v80 - v75 > 0xFFFFFFFFFFFFFFF7 || v78 > v74)
      return 17;
    *v80 = a3;
  }
  if (!v74)
    return 17;
  v82 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v83 = *(_QWORD *)(a1 + 56);
  if (v82 + 16 >= v83)
    v82 = 0;
  if (v78 <= 0x10)
    v78 = 16;
  v84 = v82 + v78;
  if (v83 <= v84)
    v84 = 0;
  *(_QWORD *)(a1 + 72) = v84;
  v85 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v84, v85));
  v87 = *(_DWORD *)(a1 + 108);
  if (v86 == 0x80000000 || v87 != 0)
  {
    v90 = v87 + 1;
    *(_DWORD *)(a1 + 108) = v90;
    if (v90 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v98, a4);
  if (!v100)
    return 15;
  v8 = v98;
  v9 = v99;
  v10 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v98;
  if (v10 >= v98)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v99)
    {
      *(_WORD *)(v98 + v11) = 923;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v96 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v96 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v96 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v91 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v96)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v91 = v96;
      v12 = v30 + 4;
    }
  }
  else
  {
    v91 = v96;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v92 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v91)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v92 = v91;
      v12 = v33 + 4;
    }
  }
  else
  {
    v92 = v91;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v34 >= v8 + v12;
  v35 = v34 - (v8 + v12);
  if (v25)
  {
    v93 = 0;
    v36 = v35 + v12;
    if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= v92)
    {
      *(_DWORD *)(v8 + v36) = a2[5];
      v93 = v92;
      v12 = v36 + 4;
    }
  }
  else
  {
    v93 = v92;
  }
  v37 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v37 >= v8 + v12;
  v38 = v37 - (v8 + v12);
  if (v25)
  {
    v94 = 0;
    v39 = v38 + v12;
    if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= v93)
    {
      *(_DWORD *)(v8 + v39) = a2[6];
      v94 = v93;
      v12 = v39 + 4;
    }
  }
  else
  {
    v94 = v93;
  }
  v40 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v40 >= v8 + v12;
  v41 = v40 - (v8 + v12);
  if (v25)
  {
    v95 = 0;
    v42 = v41 + v12;
    if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= v94)
    {
      *(_DWORD *)(v8 + v42) = a2[7];
      v95 = v94;
      v12 = v42 + 4;
    }
  }
  else
  {
    v95 = v94;
  }
  v43 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v43 >= v8 + v12)
  {
    v44 = (char *)v43 - v8;
    if ((unint64_t)v43 - v8 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_67;
    v12 = (unint64_t)(v44 + 8);
    if ((unint64_t)(v44 + 8) > v95)
      goto LABEL_67;
    *v43 = *((_QWORD *)a2 + 4);
  }
  if (v95)
  {
    v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = *(_QWORD *)(a1 + 56);
    if (v45 + 16 < v46)
    {
LABEL_57:
      if (v12 <= 0x10)
        v12 = 16;
      v47 = v45 + v12;
      if (v46 <= v47)
        v48 = 0;
      else
        v48 = v47;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      if (v50 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v51 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v51;
    }
LABEL_125:
    v45 = 0;
    goto LABEL_57;
  }
LABEL_67:
  v46 = v100;
  if (!v100)
  {
    __break(1u);
    goto LABEL_125;
  }
  v52 = (v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v98;
  if (v52 < v98)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v99)
    {
      *(_WORD *)(v98 + v53) = 2821;
      v54 = v53 + 2;
    }
  }
  v55 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = *(_QWORD *)(a1 + 56);
  if (v55 + 16 >= v56)
    v55 = 0;
  if (v54 <= 0x10)
    v54 = 16;
  v57 = v55 + v54;
  if (v56 <= v57)
    v57 = 0;
  *(_QWORD *)(a1 + 72) = v57;
  v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v58);
  while (__stlxr(v57, v58));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v97, (uint64_t **)(a1 + 8));
  v59 = v97;
  v60 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v60 = 923;
  *(_QWORD *)(v60 + 8) = a3;
  *(_QWORD *)(v60 + 528) = v60 + 16;
  *(_QWORD *)(v60 + 536) = v60 + 16;
  *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v60 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
  v101 = (IPC::Encoder *)v60;
  v61 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v61;
  v62 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v62;
  v63 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v63;
  v64 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v64;
  v65 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v65;
  v66 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v66;
  v67 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v67;
  v68 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 4uLL, 4) = v68;
  v69 = *((_QWORD *)a2 + 4);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 8uLL, 8) = v69;
  v51 = IPC::Connection::sendMessageImpl((uint64_t)v59, (uint64_t *)&v101, 1, 0);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    IPC::Encoder::~Encoder(v71, v70);
    WTF::fastFree(v72, v73);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v97);
  return v51;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  void *v66;
  IPC::Encoder *v67;
  WTF *v68;
  void *v69;
  unint64_t v70;
  IPC::Encoder *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v76;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  unsigned int v86;
  uint64_t *v87;
  IPC::Encoder *v88;
  unint64_t v89;
  unsigned __int8 v90;
  IPC::Encoder *v91;
  unint64_t v92;
  unint64_t v93;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v91, a4);
  if (!(_BYTE)v93)
    return 15;
  v71 = v91;
  v70 = v92;
  v72 = ((unint64_t)v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = v72 - (_QWORD)v91;
  if (v72 >= (unint64_t)v91)
  {
    v74 = v73 + 2;
    if (v73 <= 0xFFFFFFFFFFFFFFFDLL && v74 <= v92)
    {
      *(_WORD *)((char *)v91 + v73) = 2822;
      goto LABEL_90;
    }
    v70 = 0;
  }
  v74 = 0;
LABEL_90:
  v76 = (char *)(((unint64_t)v71 + v74 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v76 >= (char *)v71 + v74)
  {
    v74 = v76 - (char *)v71 + 8;
    if ((unint64_t)(v76 - (char *)v71) > 0xFFFFFFFFFFFFFFF7 || v74 > v70)
      return 17;
    *(_QWORD *)v76 = a3;
  }
  if (!v70)
    return 17;
  v78 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v79 = *(_QWORD *)(a1 + 56);
  if (v78 + 16 >= v79)
    v78 = 0;
  if (v74 <= 0x10)
    v74 = 16;
  v80 = v78 + v74;
  if (v79 <= v80)
    v80 = 0;
  *(_QWORD *)(a1 + 72) = v80;
  v81 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v80, v81));
  v83 = *(_DWORD *)(a1 + 108);
  if (v82 == 0x80000000 || v83 != 0)
  {
    v86 = v83 + 1;
    *(_DWORD *)(a1 + 108) = v86;
    if (v86 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v88, a4);
  if (!v90)
    return 15;
  v8 = v88;
  v9 = v89;
  v91 = v88;
  v92 = v89;
  v93 = 0;
  v10 = ((unint64_t)v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - (_QWORD)v88;
  if (v10 < (unint64_t)v88)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v89)
    {
      v9 = 0;
      v12 = 0;
      v92 = 0;
    }
    else
    {
      *(_WORD *)((char *)v88 + v11) = 926;
      v93 = v11 + 2;
    }
  }
  v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - ((_QWORD)v8 + v12);
  if (v14 >= (unint64_t)v8 + v12)
  {
    v16 = v14 - (_QWORD)v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
      v93 = v17;
      v12 = v17;
    }
  }
  v19 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - ((_QWORD)v8 + v12);
  if (v19 >= (unint64_t)v8 + v12)
  {
    v21 = v19 - (_QWORD)v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v8 + v21) = *((_DWORD *)a2 + 1);
      v93 = v22;
      v12 = v22;
    }
  }
  v24 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v24 >= (char *)v8 + v12)
  {
    v25 = (char *)(v24 - (char *)v8);
    if ((unint64_t)(v24 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v25 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v24 = *((_DWORD *)a2 + 2);
      v93 = (unint64_t)(v25 + 4);
      v12 = (unint64_t)(v25 + 4);
    }
  }
  v26 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v26 >= (char *)v8 + v12)
  {
    v27 = (char *)(v26 - (char *)v8);
    if ((unint64_t)(v26 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v26 = *((_DWORD *)a2 + 3);
      v93 = (unint64_t)(v27 + 4);
      v12 = (unint64_t)(v27 + 4);
    }
  }
  v28 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v28 >= (char *)v8 + v12)
  {
    v29 = (char *)(v28 - (char *)v8);
    if ((unint64_t)(v28 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v29 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v28 = *((_DWORD *)a2 + 4);
      v93 = (unint64_t)(v29 + 4);
      v12 = (unint64_t)(v29 + 4);
    }
  }
  v30 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v30 >= (char *)v8 + v12)
  {
    v31 = (char *)(v30 - (char *)v8);
    if ((unint64_t)(v30 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v31 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v30 = *((_DWORD *)a2 + 5);
      v93 = (unint64_t)(v31 + 4);
      v12 = (unint64_t)(v31 + 4);
    }
  }
  v32 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v32 >= (char *)v8 + v12)
  {
    v33 = (char *)(v32 - (char *)v8);
    if ((unint64_t)(v32 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v33 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v32 = *((_DWORD *)a2 + 6);
      v93 = (unint64_t)(v33 + 4);
      v12 = (unint64_t)(v33 + 4);
    }
  }
  v34 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v34 >= (char *)v8 + v12)
  {
    v35 = (char *)(v34 - (char *)v8);
    if ((unint64_t)(v34 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v35 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v34 = *((_DWORD *)a2 + 7);
      v93 = (unint64_t)(v35 + 4);
      v12 = (unint64_t)(v35 + 4);
    }
  }
  v36 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v36 >= (char *)v8 + v12)
  {
    v37 = (char *)(v36 - (char *)v8);
    if ((unint64_t)(v36 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v37 + 4) > v9)
    {
      v9 = 0;
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v36 = *((_DWORD *)a2 + 8);
      v93 = (unint64_t)(v37 + 4);
      v12 = (unint64_t)(v37 + 4);
    }
  }
  v38 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v38 >= (char *)v8 + v12)
  {
    v39 = (char *)(v38 - (char *)v8);
    if ((unint64_t)(v38 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v39 + 4) > v9)
    {
      v92 = 0;
    }
    else
    {
      *(_DWORD *)v38 = *((_DWORD *)a2 + 9);
      v93 = (unint64_t)(v39 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v91, *a2[5], (size_t)a2[5][1]);
  if (v92)
  {
    v41 = v93;
    v42 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v40 = *(_QWORD *)(a1 + 56);
    if (v42 + 16 < v40)
    {
LABEL_55:
      if (v41 <= 0x10)
        v41 = 16;
      v43 = v42 + v41;
      if (v40 <= v43)
        v43 = 0;
      *(_QWORD *)(a1 + 72) = v43;
      v44 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v43, v44));
      if (v45 == 0x80000000 || *(_DWORD *)(a1 + 108))
      {
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        *(_DWORD *)(a1 + 108) = 0;
      }
      return 0;
    }
LABEL_129:
    v42 = 0;
    goto LABEL_55;
  }
  v41 = v90;
  if (!v90)
  {
    __break(1u);
    goto LABEL_129;
  }
  v47 = ((unint64_t)v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v48 = v47 - (_QWORD)v88;
  if (v47 < (unint64_t)v88)
  {
    v49 = 0;
  }
  else
  {
    v49 = 0;
    if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v89)
    {
      *(_WORD *)((char *)v88 + v48) = 2821;
      v49 = v48 + 2;
    }
  }
  v50 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = *(_QWORD *)(a1 + 56);
  if (v50 + 16 >= v51)
    v50 = 0;
  if (v49 <= 0x10)
    v49 = 16;
  v52 = v50 + v49;
  if (v51 <= v52)
    v52 = 0;
  *(_QWORD *)(a1 + 72) = v52;
  v53 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v53);
  while (__stlxr(v52, v53));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v87, (uint64_t **)(a1 + 8));
  v54 = v87;
  v55 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v55 = 926;
  *(_QWORD *)(v55 + 8) = a3;
  *(_QWORD *)(v55 + 528) = v55 + 16;
  *(_QWORD *)(v55 + 536) = v55 + 16;
  *(_OWORD *)(v55 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v55 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v55);
  v91 = (IPC::Encoder *)v55;
  v56 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v56;
  v57 = *((_DWORD *)a2 + 1);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v57;
  v58 = *((_DWORD *)a2 + 2);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v58;
  v59 = *((_DWORD *)a2 + 3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v59;
  v60 = *((_DWORD *)a2 + 4);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v60;
  v61 = *((_DWORD *)a2 + 5);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v61;
  v62 = *((_DWORD *)a2 + 6);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v62;
  v63 = *((_DWORD *)a2 + 7);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v63;
  v64 = *((_DWORD *)a2 + 8);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v64;
  v65 = *((_DWORD *)a2 + 9);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 4uLL, 4) = v65;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v55, *a2[5], (size_t)a2[5][1]);
  v46 = IPC::Connection::sendMessageImpl((uint64_t)v54, (uint64_t *)&v91, 1, 0);
  v67 = v91;
  v91 = 0;
  if (v67)
  {
    IPC::Encoder::~Encoder(v67, v66);
    WTF::fastFree(v68, v69);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v87);
  return v46;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  void *v78;
  IPC::Encoder *v79;
  WTF *v80;
  void *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v88;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unsigned __int8 v110;
  IPC::Encoder *v111;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v108, a4);
  if (!v110)
    return 15;
  v83 = v108;
  v82 = v109;
  v84 = (v108 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v85 = v84 - v108;
  if (v84 >= v108)
  {
    v86 = v85 + 2;
    if (v85 <= 0xFFFFFFFFFFFFFFFDLL && v86 <= v109)
    {
      *(_WORD *)(v108 + v85) = 2822;
      goto LABEL_103;
    }
    v82 = 0;
  }
  v86 = 0;
LABEL_103:
  v88 = (_QWORD *)((v83 + v86 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v88 >= v83 + v86)
  {
    v86 = (unint64_t)v88 - v83 + 8;
    if ((unint64_t)v88 - v83 > 0xFFFFFFFFFFFFFFF7 || v86 > v82)
      return 17;
    *v88 = a3;
  }
  if (!v82)
    return 17;
  v90 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v91 = *(_QWORD *)(a1 + 56);
  if (v90 + 16 >= v91)
    v90 = 0;
  if (v86 <= 0x10)
    v86 = 16;
  v92 = v90 + v86;
  if (v91 <= v92)
    v92 = 0;
  *(_QWORD *)(a1 + 72) = v92;
  v93 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v92, v93));
  v95 = *(_DWORD *)(a1 + 108);
  if (v94 == 0x80000000 || v95 != 0)
  {
    v98 = v95 + 1;
    *(_DWORD *)(a1 + 108) = v98;
    if (v98 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v108, a4);
  if (!v110)
    return 15;
  v8 = v108;
  v9 = v109;
  v10 = (v108 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v108;
  if (v10 >= v108)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v109)
    {
      *(_WORD *)(v108 + v11) = 927;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v99 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v99 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v99 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v100 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v99)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v100 = v99;
      v12 = v30 + 4;
    }
  }
  else
  {
    v100 = v99;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v101 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v100)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v101 = v100;
      v12 = v33 + 4;
    }
  }
  else
  {
    v101 = v100;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v34 >= v8 + v12;
  v35 = v34 - (v8 + v12);
  if (v25)
  {
    v102 = 0;
    v36 = v35 + v12;
    if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= v101)
    {
      *(_DWORD *)(v8 + v36) = a2[5];
      v102 = v101;
      v12 = v36 + 4;
    }
  }
  else
  {
    v102 = v101;
  }
  v37 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v37 >= v8 + v12;
  v38 = v37 - (v8 + v12);
  if (v25)
  {
    v103 = 0;
    v39 = v38 + v12;
    if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= v102)
    {
      *(_DWORD *)(v8 + v39) = a2[6];
      v103 = v102;
      v12 = v39 + 4;
    }
  }
  else
  {
    v103 = v102;
  }
  v40 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v40 >= v8 + v12;
  v41 = v40 - (v8 + v12);
  if (v25)
  {
    v104 = 0;
    v42 = v41 + v12;
    if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= v103)
    {
      *(_DWORD *)(v8 + v42) = a2[7];
      v104 = v103;
      v12 = v42 + 4;
    }
  }
  else
  {
    v104 = v103;
  }
  v43 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v43 >= v8 + v12;
  v44 = v43 - (v8 + v12);
  if (v25)
  {
    v106 = 0;
    v45 = v44 + v12;
    if (v45 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= v104)
    {
      *(_DWORD *)(v8 + v45) = a2[8];
      v106 = v104;
      v12 = v45 + 4;
    }
  }
  else
  {
    v106 = v104;
  }
  v46 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v46 >= v8 + v12;
  v47 = v46 - (v8 + v12);
  if (v25)
  {
    v105 = 0;
    v48 = v47 + v12;
    if (v48 <= 0xFFFFFFFFFFFFFFFBLL && v48 + 4 <= v106)
    {
      *(_DWORD *)(v8 + v48) = a2[9];
      v105 = v106;
      v12 = v48 + 4;
    }
  }
  else
  {
    v105 = v106;
  }
  v49 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v49 >= v8 + v12)
  {
    v50 = (char *)v49 - v8;
    if ((unint64_t)v49 - v8 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_77;
    v12 = (unint64_t)(v50 + 8);
    if ((unint64_t)(v50 + 8) > v105)
      goto LABEL_77;
    *v49 = *((_QWORD *)a2 + 5);
  }
  if (v105)
  {
    v51 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = *(_QWORD *)(a1 + 56);
    if (v51 + 16 < v52)
    {
LABEL_67:
      if (v12 <= 0x10)
        v12 = 16;
      v53 = v51 + v12;
      if (v52 <= v53)
        v54 = 0;
      else
        v54 = v53;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      if (v56 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v57 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v57;
    }
LABEL_135:
    v51 = 0;
    goto LABEL_67;
  }
LABEL_77:
  v52 = v110;
  if (!v110)
  {
    __break(1u);
    goto LABEL_135;
  }
  v58 = (v108 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v59 = v58 - v108;
  if (v58 < v108)
  {
    v60 = 0;
  }
  else
  {
    v60 = 0;
    if (v59 <= 0xFFFFFFFFFFFFFFFDLL && v59 + 2 <= v109)
    {
      *(_WORD *)(v108 + v59) = 2821;
      v60 = v59 + 2;
    }
  }
  v61 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v62 = *(_QWORD *)(a1 + 56);
  if (v61 + 16 >= v62)
    v61 = 0;
  if (v60 <= 0x10)
    v60 = 16;
  v63 = v61 + v60;
  if (v62 <= v63)
    v63 = 0;
  *(_QWORD *)(a1 + 72) = v63;
  v64 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v64);
  while (__stlxr(v63, v64));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v107, (uint64_t **)(a1 + 8));
  v65 = v107;
  v66 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v66 = 927;
  *(_QWORD *)(v66 + 8) = a3;
  *(_QWORD *)(v66 + 528) = v66 + 16;
  *(_QWORD *)(v66 + 536) = v66 + 16;
  *(_OWORD *)(v66 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v66 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v66);
  v111 = (IPC::Encoder *)v66;
  v67 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v67;
  v68 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v68;
  v69 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v69;
  v70 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v70;
  v71 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v71;
  v72 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v72;
  v73 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v73;
  v74 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v74;
  v75 = a2[8];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v75;
  v76 = a2[9];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 4uLL, 4) = v76;
  v77 = *((_QWORD *)a2 + 5);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v66, 8uLL, 8) = v77;
  v57 = IPC::Connection::sendMessageImpl((uint64_t)v65, (uint64_t *)&v111, 1, 0);
  v79 = v111;
  v111 = 0;
  if (v79)
  {
    IPC::Encoder::~Encoder(v79, v78);
    WTF::fastFree(v80, v81);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v107);
  return v57;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetFragDataLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v66;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  char v76;
  unsigned int v77;
  uint64_t *v78;
  unint64_t v79;
  int v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  IPC::Encoder *v85;
  int v86;
  char v87;
  IPC::Decoder *v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v78, a5);
  if (!(_BYTE)v80)
    goto LABEL_125;
  v61 = v78;
  v60 = v79;
  v62 = ((unint64_t)v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v62 - (_QWORD)v78;
  if (v62 >= (unint64_t)v78)
  {
    v64 = v63 + 2;
    if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v79)
    {
      *(_WORD *)((char *)v78 + v63) = 2822;
      goto LABEL_104;
    }
    v60 = 0;
  }
  v64 = 0;
LABEL_104:
  v66 = (char *)(((unint64_t)v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v66 >= (char *)v61 + v64)
  {
    v64 = v66 - (char *)v61 + 8;
    if ((unint64_t)(v66 - (char *)v61) > 0xFFFFFFFFFFFFFFF7 || v64 > v60)
      goto LABEL_137;
    *(_QWORD *)v66 = v6;
  }
  if (!v60)
  {
LABEL_137:
    v76 = 17;
    goto LABEL_126;
  }
  v68 = v8[8];
  v69 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v70 = v8[7];
  if (v69 + 16 >= v70)
    v69 = 0;
  if (v64 <= 0x10)
    v64 = 16;
  v71 = v69 + v64;
  if (v70 <= v71)
    v71 = 0;
  v8[9] = v71;
  v72 = (unint64_t *)(*(_QWORD *)(v68 + 16) + 128);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v71, v72));
  v74 = *((_DWORD *)v8 + 27);
  if (v73 == 0x80000000 || v74 != 0)
  {
    v77 = v74 + 1;
    *((_DWORD *)v8 + 27) = v77;
    if (v77 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v82, a5);
  if (!v84)
  {
LABEL_125:
    v76 = 15;
LABEL_126:
    *(_BYTE *)a4 = v76;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v82;
  v12 = v83;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v88, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v88, v14))
  {
    LOBYTE(v91) = 11;
    v14 = 1;
    LODWORD(v93) = 1;
    LOBYTE(v78) = 0;
    v80 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v78, (uint64_t)&v91);
    v81 = 1;
    if ((_DWORD)v93 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v93])(&v85, &v91);
    goto LABEL_67;
  }
  v91 = v11;
  v92 = v12;
  v93 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3563;
  v93 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v92 = 0;
        }
        else
        {
          *v19 = v14;
          v93 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(&v91, a2);
      if (v92)
      {
        v21 = v93;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v93 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v85) = 16;
          v86 = 1;
LABEL_48:
          v87 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v85 = v40;
          v86 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v88, v14, 0xDEBu, (uint64_t)&v89, a5);
        LOBYTE(v85) = 0;
        v86 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)&v89);
        v87 = 1;
        if (v90 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v90])(&v94, &v89);
      }
      else
      {
        LOBYTE(v85) = 0;
        v87 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v88);
      if (!v87)
      {
        LOBYTE(v78) = 0;
        v81 = 0;
        goto LABEL_64;
      }
      if (v86 == 1)
      {
        v45 = (char)v85;
LABEL_63:
        LOBYTE(v78) = v45;
        v80 = 1;
        v81 = 1;
        goto LABEL_64;
      }
      if (v86)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v85);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v87)
        goto LABEL_132;
      if (v86)
        goto LABEL_138;
      v44 = v85;
      v85 = 0;
      v91 = (uint64_t)v44;
      LODWORD(v92) = v43;
      LODWORD(v93) = 0;
      LOBYTE(v78) = 0;
      v80 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v78, (uint64_t)&v91);
      v81 = 1;
      if ((_DWORD)v93 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v93])(&v89, &v91);
LABEL_64:
      if (v87 && v86 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v86])(&v91, &v85);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v88);
      if (v81)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v78);
        if (v81)
        {
          if (v80 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v91, &v78);
        }
        return result;
      }
      if (v84)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v92 = 0;
    }
    v46 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v82;
    if (v46 < v82)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v83)
      {
        *(_WORD *)(v82 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v89, v13);
    v8 = v89;
    v91 = 0;
    IPC::Connection::createSyncMessageEncoder(3563, (uint64_t)v6, &v91, (uint64_t *)&v85);
    v6 = v85;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v85, 4uLL, 4) = (_DWORD)v13;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v6, *(uint64_t **)(a2 + 8));
    IPC::Connection::sendSyncMessage((uint64_t)v8, v91, (uint64_t *)&v85, 0, (uint64_t)&v78, a5);
    a2 = v79;
    if ((_DWORD)v79)
    {
      if ((_DWORD)v79 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v78;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v54 = IPC::Decoder::decode<std::tuple<float>>(v78);
    if ((v54 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v79)
    {
      v56 = v78;
      v78 = 0;
      *(_QWORD *)a4 = v56;
      *(_DWORD *)(a4 + 8) = v54;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v88, &v78);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v79;
  if ((_DWORD)v79 != -1)
    goto LABEL_91;
LABEL_92:
  v57 = v85;
  v85 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v55);
    WTF::fastFree(v58, v59);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3958[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  void *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
      if (!v64)
        return 15;
      v8 = v62;
      v9 = v63;
      v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v62;
      if (v10 >= v62)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v63)
        {
          *(_WORD *)(v62 + v11) = 1044;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v19 >= v8 + v12)
      {
        v12 = (unint64_t)v19 - v8 + 4;
        if ((unint64_t)v19 - v8 > 0xFFFFFFFFFFFFFFFBLL || v12 > v9)
          goto LABEL_34;
        *v19 = a2[1];
      }
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 64);
        v22 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *(_QWORD *)(a1 + 56);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v24 = v22 + v12;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *(_QWORD *)(a1 + 72) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v28 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v28;
      }
LABEL_34:
      if (v64)
      {
        v29 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v62;
        if (v29 < v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)(v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(a1 + 64);
        v33 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(a1 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(a1 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(a1 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 1044;
        *(_QWORD *)(v38 + 8) = a3;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        v39 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v39;
        v40 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v40;
        v28 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v42 = v65;
        v65 = 0;
        if (v42)
        {
          IPC::Encoder::~Encoder(v42, v41);
          WTF::fastFree(v43, v44);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        return v28;
      }
      __break(1u);
LABEL_91:
      v45 = 0;
LABEL_92:
      v48 = 0;
LABEL_60:
      v50 = (_QWORD *)((v9 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v9 + v48)
      {
        v48 = (unint64_t)v50 - v9 + 8;
        if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
          return 17;
        *v50 = a3;
      }
      if (!v45)
        return 17;
      v52 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v53 = *(_QWORD *)(a1 + 56);
      if (v52 + 16 >= v53)
        v52 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v54 = v52 + v48;
      if (v53 <= v54)
        v54 = 0;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *(_DWORD *)(a1 + 108);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v60 = v57 + 1;
        *(_DWORD *)(a1 + 108) = v60;
        if (v60 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
  if (v64)
  {
    v9 = v62;
    v45 = v63;
    v46 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v62;
    if (v46 < v62)
      goto LABEL_92;
    v48 = v47 + 2;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v63)
      goto LABEL_91;
    *(_WORD *)(v62 + v47) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  void *v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  IPC::Encoder *v72;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
      if (!v71)
        return 15;
      v8 = v69;
      v9 = v70;
      v10 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v69;
      if (v10 >= v69)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v70)
        {
          *(_WORD *)(v69 + v11) = 1050;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v24 >= v8 + v12)
      {
        v25 = (char *)v24 - v8;
        if ((unint64_t)v24 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_38;
        v12 = (unint64_t)(v25 + 4);
        if ((unint64_t)(v25 + 4) > v9)
          goto LABEL_38;
        *v24 = a2[2];
      }
      if (v9)
      {
        v26 = *(_QWORD *)(a1 + 64);
        v27 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(a1 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        v29 = 16;
        if (v12 > 0x10)
          v29 = v12;
        v30 = v27 + v29;
        if (v28 <= v30)
          v31 = 0;
        else
          v31 = v30;
        *(_QWORD *)(a1 + 72) = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v34 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v34;
      }
LABEL_38:
      if (v71)
      {
        v35 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v35 - v69;
        if (v35 < v69)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v70)
          {
            *(_WORD *)(v69 + v36) = 2821;
            v37 = v36 + 2;
          }
        }
        v38 = *(_QWORD *)(a1 + 64);
        v39 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v40 = *(_QWORD *)(a1 + 56);
        if (v39 + 16 >= v40)
          v39 = 0;
        if (v37 <= 0x10)
          v37 = 16;
        v41 = v39 + v37;
        if (v40 <= v41)
          v41 = 0;
        *(_QWORD *)(a1 + 72) = v41;
        v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
        do
          __ldaxr(v42);
        while (__stlxr(v41, v42));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(a1 + 8));
        v43 = v68;
        v44 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v44 = 1050;
        *(_QWORD *)(v44 + 8) = a3;
        *(_QWORD *)(v44 + 528) = v44 + 16;
        *(_QWORD *)(v44 + 536) = v44 + 16;
        *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v44 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
        v72 = (IPC::Encoder *)v44;
        v45 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v45;
        v46 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v46;
        v47 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v47;
        v34 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v72, 1, 0);
        v49 = v72;
        v72 = 0;
        if (v49)
        {
          IPC::Encoder::~Encoder(v49, v48);
          WTF::fastFree(v50, v51);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
        return v34;
      }
      __break(1u);
LABEL_96:
      v52 = 0;
LABEL_97:
      v55 = 0;
LABEL_64:
      v57 = (_QWORD *)((v12 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v57 >= v12 + v55)
      {
        v55 = (unint64_t)v57 - v12 + 8;
        if ((unint64_t)v57 - v12 > 0xFFFFFFFFFFFFFFF7 || v55 > v52)
          return 17;
        *v57 = a3;
      }
      if (!v52)
        return 17;
      v59 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v60 = *(_QWORD *)(a1 + 56);
      if (v59 + 16 >= v60)
        v59 = 0;
      if (v55 <= 0x10)
        v55 = 16;
      v61 = v59 + v55;
      if (v60 <= v61)
        v61 = 0;
      *(_QWORD *)(a1 + 72) = v61;
      v62 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v61, v62));
      v64 = *(_DWORD *)(a1 + 108);
      if (v63 == 0x80000000 || v64 != 0)
      {
        v67 = v64 + 1;
        *(_DWORD *)(a1 + 108) = v67;
        if (v67 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
  if (v71)
  {
    v12 = v69;
    v52 = v70;
    v53 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = v53 - v69;
    if (v53 < v69)
      goto LABEL_97;
    v55 = v54 + 2;
    if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v70)
      goto LABEL_96;
    *(_WORD *)(v69 + v54) = 2822;
    goto LABEL_64;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  char *v74;
  unint64_t v75;
  char v76;
  IPC::Encoder *v77;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
      if (!v76)
        return 15;
      v8 = v74;
      v9 = v75;
      v10 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v74;
      if (v10 >= (unint64_t)v74)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v75)
        {
          *(_WORD *)&v74[v11] = 1056;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (_QWORD)&v8[v12];
      if (v14 >= (unint64_t)&v8[v12])
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v16] = *a2;
          v12 = v17;
        }
      }
      v19 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (_QWORD)&v8[v12];
      if (v19 >= (unint64_t)&v8[v12])
      {
        v21 = v19 - (_QWORD)v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v21] = a2[1];
          v12 = v22;
        }
      }
      v24 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= (unint64_t)&v8[v12];
      v26 = v24 - (_QWORD)&v8[v12];
      if (v25)
      {
        v72 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)&v8[v27] = a2[2];
          v72 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v72 = v9;
      }
      v28 = (char *)((unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL);
      v29 = (char *)(v28 - &v8[v12]);
      if (v28 >= &v8[v12])
      {
        v29 = (char *)(v28 - v8);
        if ((unint64_t)(v28 - v8) > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_43;
        v12 = (unint64_t)(v29 + 4);
        if ((unint64_t)(v29 + 4) > v72)
          goto LABEL_43;
        *(_DWORD *)v28 = a2[3];
      }
      if (v72)
      {
        v30 = *(_QWORD *)(a1 + 64);
        v31 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *(_QWORD *)(a1 + 56);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v33 = v31 + v12;
        if (v32 <= v33)
          v34 = 0;
        else
          v34 = v33;
        *(_QWORD *)(a1 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v34, v35));
        if (v36 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v37 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v37;
      }
LABEL_43:
      if (v76)
      {
        v38 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v39 = v38 - (_QWORD)v74;
        if (v38 < (unint64_t)v74)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v75)
          {
            *(_WORD *)&v74[v39] = 2821;
            v40 = v39 + 2;
          }
        }
        v41 = *(_QWORD *)(a1 + 64);
        v42 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v43 = *(_QWORD *)(a1 + 56);
        if (v42 + 16 >= v43)
          v42 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v44 = v42 + v40;
        if (v43 <= v44)
          v44 = 0;
        *(_QWORD *)(a1 + 72) = v44;
        v45 = (unint64_t *)(*(_QWORD *)(v41 + 16) + 128);
        do
          __ldaxr(v45);
        while (__stlxr(v44, v45));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
        v46 = v73;
        v47 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v47 = 1056;
        *(_QWORD *)(v47 + 8) = a3;
        *(_QWORD *)(v47 + 528) = v47 + 16;
        *(_QWORD *)(v47 + 536) = v47 + 16;
        *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v47 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
        v77 = (IPC::Encoder *)v47;
        v48 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v48;
        v49 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v49;
        v50 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v50;
        v51 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v51;
        v37 = IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v77, 1, 0);
        v53 = v77;
        v77 = 0;
        if (v53)
        {
          IPC::Encoder::~Encoder(v53, v52);
          WTF::fastFree(v54, v55);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
        return v37;
      }
      __break(1u);
LABEL_101:
      v56 = 0;
LABEL_102:
      v59 = 0;
LABEL_69:
      v61 = (char *)((unint64_t)&v29[v59 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v61 >= &v29[v59])
      {
        v59 = v61 - v29 + 8;
        if ((unint64_t)(v61 - v29) > 0xFFFFFFFFFFFFFFF7 || v59 > v56)
          return 17;
        *(_QWORD *)v61 = a3;
      }
      if (!v56)
        return 17;
      v63 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v64 = *(_QWORD *)(a1 + 56);
      if (v63 + 16 >= v64)
        v63 = 0;
      if (v59 <= 0x10)
        v59 = 16;
      v65 = v63 + v59;
      if (v64 <= v65)
        v65 = 0;
      *(_QWORD *)(a1 + 72) = v65;
      v66 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v65, v66));
      v68 = *(_DWORD *)(a1 + 108);
      if (v67 == 0x80000000 || v68 != 0)
      {
        v71 = v68 + 1;
        *(_DWORD *)(a1 + 108) = v71;
        if (v71 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
  if (v76)
  {
    v29 = v74;
    v56 = v75;
    v57 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v58 = v57 - (_QWORD)v74;
    if (v57 < (unint64_t)v74)
      goto LABEL_102;
    v59 = v58 + 2;
    if (v58 > 0xFFFFFFFFFFFFFFFDLL || v59 > v75)
      goto LABEL_101;
    *(_WORD *)&v74[v58] = 2822;
    goto LABEL_69;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 1062;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v76 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v76 = v9;
      }
      v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v76)
        {
          *(_DWORD *)(v8 + v30) = a2[3];
          v77 = v76;
          v12 = v30 + 4;
        }
      }
      else
      {
        v77 = v76;
      }
      v31 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 4);
        if ((unint64_t)(v32 + 4) > v77)
          goto LABEL_48;
        *v31 = a2[4];
      }
      if (v77)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 1062;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v55 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v77 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v77 + v63)
      {
        v63 = (unint64_t)v65 - v77 + 8;
        if ((unint64_t)v65 - v77 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v77 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1045;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1045;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

_QWORD *IPC::ArgumentCoder<std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,0ul,1ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = a1[2];
  v3 = *a1 + v2;
  v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v4 >= v3;
  v5 = v4 - v3;
  if (v9)
  {
    v6 = v5 + v2;
    v7 = v6 + 4;
    v8 = a1[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v9 = v7 >= v8;
      v10 = v7 == v8;
    }
    else
    {
      v9 = 1;
      v10 = 0;
    }
    if (!v10 && v9)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v6) = *(_DWORD *)a2;
      a1[2] = v7;
    }
  }
  return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, **(const void ***)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1051;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1051;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1057;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1057;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1063;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,0ul,1ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1063;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1066;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1066;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1069;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1069;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1067;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1067;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1072;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1072;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1070;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1070;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1073;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v56, (uint64_t)a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1073;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 1085;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v76 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v76 = v9;
      }
      v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v76)
        {
          *(_DWORD *)(v8 + v30) = a2[3];
          v77 = v76;
          v12 = v30 + 4;
        }
      }
      else
      {
        v77 = v76;
      }
      v31 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 4);
        if ((unint64_t)(v32 + 4) > v77)
          goto LABEL_48;
        *v31 = a2[4];
      }
      if (v77)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 1085;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v55 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v77 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v77 + v63)
      {
        v63 = (unint64_t)v65 - v77 + 8;
        if ((unint64_t)v65 - v77 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v77 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  _OWORD *v40;
  void *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
      if (!v64)
        return 15;
      v8 = v62;
      v9 = v63;
      v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v62;
      if (v10 >= v62)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v63)
        {
          *(_WORD *)(v62 + v11) = 1086;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (_OWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v19 >= v8 + v12)
      {
        v12 = (unint64_t)v19 - v8 + 16;
        if ((unint64_t)v19 - v8 > 0xFFFFFFFFFFFFFFEFLL || v12 > v9)
          goto LABEL_34;
        *v19 = *(_OWORD *)**((_QWORD **)a2 + 1);
      }
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 64);
        v22 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *(_QWORD *)(a1 + 56);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v24 = v22 + v12;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *(_QWORD *)(a1 + 72) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v28 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v28;
      }
LABEL_34:
      if (v64)
      {
        v29 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v62;
        if (v29 < v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)(v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(a1 + 64);
        v33 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(a1 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(a1 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(a1 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 1086;
        *(_QWORD *)(v38 + 8) = a3;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        v39 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v39;
        v40 = (_OWORD *)**((_QWORD **)a2 + 1);
        *(_OWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 16) = *v40;
        v28 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v42 = v65;
        v65 = 0;
        if (v42)
        {
          IPC::Encoder::~Encoder(v42, v41);
          WTF::fastFree(v43, v44);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        return v28;
      }
      __break(1u);
LABEL_91:
      v45 = 0;
LABEL_92:
      v48 = 0;
LABEL_60:
      v50 = (_QWORD *)((v9 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v9 + v48)
      {
        v48 = (unint64_t)v50 - v9 + 8;
        if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
          return 17;
        *v50 = a3;
      }
      if (!v45)
        return 17;
      v52 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v53 = *(_QWORD *)(a1 + 56);
      if (v52 + 16 >= v53)
        v52 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v54 = v52 + v48;
      if (v53 <= v54)
        v54 = 0;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *(_DWORD *)(a1 + 108);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v60 = v57 + 1;
        *(_DWORD *)(a1 + 108) = v60;
        if (v60 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
  if (v64)
  {
    v9 = v62;
    v45 = v63;
    v46 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v62;
    if (v46 < v62)
      goto LABEL_92;
    v48 = v47 + 2;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v63)
      goto LABEL_91;
    *(_WORD *)(v62 + v47) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1087;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1087;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  _OWORD *v40;
  void *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
      if (!v64)
        return 15;
      v8 = v62;
      v9 = v63;
      v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v62;
      if (v10 >= v62)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v63)
        {
          *(_WORD *)(v62 + v11) = 1088;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (_OWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v19 >= v8 + v12)
      {
        v12 = (unint64_t)v19 - v8 + 16;
        if ((unint64_t)v19 - v8 > 0xFFFFFFFFFFFFFFEFLL || v12 > v9)
          goto LABEL_34;
        *v19 = *(_OWORD *)**((_QWORD **)a2 + 1);
      }
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 64);
        v22 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *(_QWORD *)(a1 + 56);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v24 = v22 + v12;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *(_QWORD *)(a1 + 72) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v28 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v28;
      }
LABEL_34:
      if (v64)
      {
        v29 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v62;
        if (v29 < v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)(v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(a1 + 64);
        v33 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(a1 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(a1 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(a1 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 1088;
        *(_QWORD *)(v38 + 8) = a3;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        v39 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = v39;
        v40 = (_OWORD *)**((_QWORD **)a2 + 1);
        *(_OWORD *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 16) = *v40;
        v28 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v42 = v65;
        v65 = 0;
        if (v42)
        {
          IPC::Encoder::~Encoder(v42, v41);
          WTF::fastFree(v43, v44);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        return v28;
      }
      __break(1u);
LABEL_91:
      v45 = 0;
LABEL_92:
      v48 = 0;
LABEL_60:
      v50 = (_QWORD *)((v9 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v9 + v48)
      {
        v48 = (unint64_t)v50 - v9 + 8;
        if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
          return 17;
        *v50 = a3;
      }
      if (!v45)
        return 17;
      v52 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v53 = *(_QWORD *)(a1 + 56);
      if (v52 + 16 >= v53)
        v52 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v54 = v52 + v48;
      if (v53 <= v54)
        v54 = 0;
      *(_QWORD *)(a1 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *(_DWORD *)(a1 + 108);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v60 = v57 + 1;
        *(_DWORD *)(a1 + 108) = v60;
        if (v60 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
  if (v64)
  {
    v9 = v62;
    v45 = v63;
    v46 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v62;
    if (v46 < v62)
      goto LABEL_92;
    v48 = v47 + 2;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v63)
      goto LABEL_91;
    *(_WORD *)(v62 + v47) = 2822;
    goto LABEL_60;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribIPointer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 1089;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v77 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v77 = v9;
      }
      v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v77)
        {
          *(_DWORD *)(v8 + v30) = a2[3];
          v76 = v77;
          v12 = v30 + 4;
        }
      }
      else
      {
        v76 = v77;
      }
      v31 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 8);
        if ((unint64_t)(v32 + 8) > v76)
          goto LABEL_48;
        *v31 = *((_QWORD *)a2 + 2);
      }
      if (v76)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 1089;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v55 = *((_QWORD *)a2 + 2);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 8uLL, 8) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v76 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v76 + v63)
      {
        v63 = (unint64_t)v65 - v76 + 8;
        if ((unint64_t)v65 - v76 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v76 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawRangeElements,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  void *v59;
  IPC::Encoder *v60;
  WTF *v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v69;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 v85;
  IPC::Encoder *v86;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v83, a4);
  if (!v85)
    return 15;
  v64 = v83;
  v63 = v84;
  v65 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v66 = v65 - v83;
  if (v65 >= v83)
  {
    v67 = v66 + 2;
    if (v66 <= 0xFFFFFFFFFFFFFFFDLL && v67 <= v84)
    {
      *(_WORD *)(v83 + v66) = 2822;
      goto LABEL_77;
    }
    v63 = 0;
  }
  v67 = 0;
LABEL_77:
  v69 = (_QWORD *)((v64 + v67 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v69 >= v64 + v67)
  {
    v67 = (unint64_t)v69 - v64 + 8;
    if ((unint64_t)v69 - v64 > 0xFFFFFFFFFFFFFFF7 || v67 > v63)
      return 17;
    *v69 = a3;
  }
  if (!v63)
    return 17;
  v71 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = *(_QWORD *)(a1 + 56);
  if (v71 + 16 >= v72)
    v71 = 0;
  if (v67 <= 0x10)
    v67 = 16;
  v73 = v71 + v67;
  if (v72 <= v73)
    v73 = 0;
  *(_QWORD *)(a1 + 72) = v73;
  v74 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v73, v74));
  v76 = *(_DWORD *)(a1 + 108);
  if (v75 == 0x80000000 || v76 != 0)
  {
    v79 = v76 + 1;
    *(_DWORD *)(a1 + 108) = v79;
    if (v79 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v83, a4);
  if (!v85)
    return 15;
  v8 = v83;
  v9 = v84;
  v10 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v83;
  if (v10 >= v83)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v84)
    {
      *(_WORD *)(v83 + v11) = 972;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v80 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v80 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v80 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v29 = v28 - (v8 + v12);
  if (v28 < v8 + v12)
  {
    v30 = v80;
  }
  else
  {
    v30 = 0;
    v31 = v29 + v12;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v80)
    {
      *(_DWORD *)(v8 + v31) = a2[3];
      v30 = v80;
      v12 = v31 + 4;
    }
  }
  v32 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v32 >= v8 + v12;
  v33 = v32 - (v8 + v12);
  if (v25)
  {
    v81 = 0;
    v34 = v33 + v12;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v30)
    {
      *(_DWORD *)(v8 + v34) = a2[4];
      v81 = v30;
      v12 = v34 + 4;
    }
  }
  else
  {
    v81 = v30;
  }
  v35 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v35 >= v8 + v12)
  {
    v36 = (char *)v35 - v8;
    if ((unint64_t)v35 - v8 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_52;
    v12 = (unint64_t)(v36 + 8);
    if ((unint64_t)(v36 + 8) > v81)
      goto LABEL_52;
    *v35 = *((_QWORD *)a2 + 3);
  }
  if (v81)
  {
    v37 = *(_QWORD *)(a1 + 64);
    v38 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v39 = *(_QWORD *)(a1 + 56);
    if (v38 + 16 >= v39)
      v38 = 0;
    if (v12 <= 0x10)
      v12 = 16;
    v40 = v38 + v12;
    if (v39 <= v40)
      v41 = 0;
    else
      v41 = v40;
    *(_QWORD *)(a1 + 72) = v41;
    v42 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v41, v42));
    if (v43 != 0x80000000 && !*(_DWORD *)(a1 + 108))
      return 0;
    if (*(_BYTE *)(a1 + 96))
      MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
    v44 = 0;
    *(_DWORD *)(a1 + 108) = 0;
    return v44;
  }
LABEL_52:
  v45 = v85;
  if (v85)
  {
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v45 = 0;
    }
    else
    {
      v45 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v45 = v47 + 2;
      }
    }
    v48 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)(a1 + 56);
    if (v48 + 16 < v12)
      goto LABEL_58;
  }
  else
  {
    __break(1u);
  }
  v48 = 0;
LABEL_58:
  if (v45 <= 0x10)
    v45 = 16;
  v49 = v48 + v45;
  if (v12 <= v49)
    v49 = 0;
  *(_QWORD *)(a1 + 72) = v49;
  v50 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v50);
  while (__stlxr(v49, v50));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v82, (uint64_t **)(a1 + 8));
  v51 = v82;
  v52 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v52 = 972;
  *(_QWORD *)(v52 + 8) = a3;
  *(_QWORD *)(v52 + 528) = v52 + 16;
  *(_QWORD *)(v52 + 536) = v52 + 16;
  *(_OWORD *)(v52 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v52 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v52);
  v86 = (IPC::Encoder *)v52;
  v53 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v53;
  v54 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v54;
  v55 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v55;
  v56 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v56;
  v57 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 4uLL, 4) = v57;
  v58 = *((_QWORD *)a2 + 3);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v52, 8uLL, 8) = v58;
  v44 = IPC::Connection::sendMessageImpl((uint64_t)v51, (uint64_t *)&v86, 1, 0);
  v60 = v86;
  v86 = 0;
  if (v60)
  {
    IPC::Encoder::~Encoder(v60, v59);
    WTF::fastFree(v61, v62);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v82);
  return v44;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawBuffers,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 967;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v56, **a2, (uint64_t)(*a2)[1]);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 967;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v31, **a2, (uint64_t)(*a2)[1]);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  IPC::Encoder *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  unint64_t v65;
  char v66;
  IPC::Encoder *v67;
  unint64_t v68;
  unint64_t v69;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v64, a4);
      if (!v66)
        break;
      v8 = v64;
      v9 = v65;
      v67 = v64;
      v68 = v65;
      v69 = 0;
      v10 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v64;
      if (v10 < (unint64_t)v64)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v65)
        {
          v9 = 0;
          v12 = 0;
          v68 = 0;
        }
        else
        {
          *(_WORD *)((char *)v64 + v11) = 911;
          v69 = v11 + 2;
        }
      }
      v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - ((_QWORD)v8 + v12);
      if (v14 >= (unint64_t)v8 + v12)
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
          v68 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
          v69 = v17;
          v12 = v17;
        }
      }
      v19 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v19 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v19 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || v19 - (char *)v8 + 4 > v9)
        {
          v68 = 0;
        }
        else
        {
          *(_DWORD *)v19 = *((_DWORD *)a2 + 1);
          v69 = v19 - (char *)v8 + 4;
        }
      }
      IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v67, *a2[1], (uint64_t)a2[1][1]);
      if (v68)
      {
        v22 = v69;
        v23 = *(_QWORD *)(a1 + 64);
        v24 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = *(_QWORD *)(a1 + 56);
        if (v24 + 16 >= v25)
          v24 = 0;
        if (v69 <= 0x10)
          v22 = 16;
        v26 = v24 + v22;
        if (v25 <= v26)
          v27 = 0;
        else
          v27 = v26;
        *(_QWORD *)(a1 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v27, v28));
        if (v29 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v66)
      {
        v31 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = v31 - (_QWORD)v64;
        if (v31 < (unint64_t)v64)
        {
          v33 = 0;
        }
        else
        {
          v33 = 0;
          if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v65)
          {
            *(_WORD *)((char *)v64 + v32) = 2821;
            v33 = v32 + 2;
          }
        }
        v34 = *(_QWORD *)(a1 + 64);
        v35 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = *(_QWORD *)(a1 + 56);
        if (v35 + 16 >= v36)
          v35 = 0;
        if (v33 <= 0x10)
          v33 = 16;
        v37 = v35 + v33;
        if (v36 <= v37)
          v37 = 0;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 128);
        do
          __ldaxr(v38);
        while (__stlxr(v37, v38));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)(a1 + 8));
        v39 = v63;
        v40 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v40 = 911;
        *(_QWORD *)(v40 + 8) = a3;
        *(_QWORD *)(v40 + 528) = v40 + 16;
        *(_QWORD *)(v40 + 536) = v40 + 16;
        *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v40 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
        v67 = (IPC::Encoder *)v40;
        v41 = *(_DWORD *)a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 4uLL, 4) = v41;
        v42 = *((_DWORD *)a2 + 1);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 4uLL, 4) = v42;
        IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v40, *a2[1], (uint64_t)a2[1][1]);
        v30 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v67, 1, 0);
        v44 = v67;
        v67 = 0;
        if (v44)
        {
          IPC::Encoder::~Encoder(v44, v43);
          WTF::fastFree(v45, v46);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v63);
        return v30;
      }
      __break(1u);
LABEL_91:
      v47 = 0;
LABEL_92:
      v50 = 0;
LABEL_60:
      v52 = (char *)(((unint64_t)v21 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v52 >= (char *)v21 + v50)
      {
        v50 = v52 - (char *)v21 + 8;
        if ((unint64_t)(v52 - (char *)v21) > 0xFFFFFFFFFFFFFFF7 || v50 > v47)
          return 17;
        *(_QWORD *)v52 = a3;
      }
      if (!v47)
        return 17;
      v54 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v55 = *(_QWORD *)(a1 + 56);
      if (v54 + 16 >= v55)
        v54 = 0;
      if (v50 <= 0x10)
        v50 = 16;
      v56 = v54 + v50;
      if (v55 <= v56)
        v56 = 0;
      *(_QWORD *)(a1 + 72) = v56;
      v57 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v56, v57));
      v59 = *(_DWORD *)(a1 + 108);
      if (v58 == 0x80000000 || v59 != 0)
      {
        v62 = v59 + 1;
        *(_DWORD *)(a1 + 108) = v62;
        if (v62 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v67, a4);
    if ((_BYTE)v69)
    {
      v21 = v67;
      v47 = v68;
      v48 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = v48 - (_QWORD)v67;
      if (v48 < (unint64_t)v67)
        goto LABEL_92;
      v50 = v49 + 2;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL || v50 > v68)
        goto LABEL_91;
      *(_WORD *)((char *)v67 + v49) = 2822;
      goto LABEL_60;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferuiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  IPC::Encoder *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  unint64_t v65;
  char v66;
  IPC::Encoder *v67;
  unint64_t v68;
  unint64_t v69;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v64, a4);
      if (!v66)
        break;
      v8 = v64;
      v9 = v65;
      v67 = v64;
      v68 = v65;
      v69 = 0;
      v10 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v64;
      if (v10 < (unint64_t)v64)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v65)
        {
          v9 = 0;
          v12 = 0;
          v68 = 0;
        }
        else
        {
          *(_WORD *)((char *)v64 + v11) = 912;
          v69 = v11 + 2;
        }
      }
      v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - ((_QWORD)v8 + v12);
      if (v14 >= (unint64_t)v8 + v12)
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
          v68 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
          v69 = v17;
          v12 = v17;
        }
      }
      v19 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v19 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v19 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || v19 - (char *)v8 + 4 > v9)
        {
          v68 = 0;
        }
        else
        {
          *(_DWORD *)v19 = *((_DWORD *)a2 + 1);
          v69 = v19 - (char *)v8 + 4;
        }
      }
      IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v67, *a2[1], (uint64_t)a2[1][1]);
      if (v68)
      {
        v22 = v69;
        v23 = *(_QWORD *)(a1 + 64);
        v24 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = *(_QWORD *)(a1 + 56);
        if (v24 + 16 >= v25)
          v24 = 0;
        if (v69 <= 0x10)
          v22 = 16;
        v26 = v24 + v22;
        if (v25 <= v26)
          v27 = 0;
        else
          v27 = v26;
        *(_QWORD *)(a1 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v27, v28));
        if (v29 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v66)
      {
        v31 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = v31 - (_QWORD)v64;
        if (v31 < (unint64_t)v64)
        {
          v33 = 0;
        }
        else
        {
          v33 = 0;
          if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v65)
          {
            *(_WORD *)((char *)v64 + v32) = 2821;
            v33 = v32 + 2;
          }
        }
        v34 = *(_QWORD *)(a1 + 64);
        v35 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = *(_QWORD *)(a1 + 56);
        if (v35 + 16 >= v36)
          v35 = 0;
        if (v33 <= 0x10)
          v33 = 16;
        v37 = v35 + v33;
        if (v36 <= v37)
          v37 = 0;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 128);
        do
          __ldaxr(v38);
        while (__stlxr(v37, v38));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)(a1 + 8));
        v39 = v63;
        v40 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v40 = 912;
        *(_QWORD *)(v40 + 8) = a3;
        *(_QWORD *)(v40 + 528) = v40 + 16;
        *(_QWORD *)(v40 + 536) = v40 + 16;
        *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v40 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
        v67 = (IPC::Encoder *)v40;
        v41 = *(_DWORD *)a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 4uLL, 4) = v41;
        v42 = *((_DWORD *)a2 + 1);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 4uLL, 4) = v42;
        IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v40, *a2[1], (uint64_t)a2[1][1]);
        v30 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v67, 1, 0);
        v44 = v67;
        v67 = 0;
        if (v44)
        {
          IPC::Encoder::~Encoder(v44, v43);
          WTF::fastFree(v45, v46);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v63);
        return v30;
      }
      __break(1u);
LABEL_91:
      v47 = 0;
LABEL_92:
      v50 = 0;
LABEL_60:
      v52 = (char *)(((unint64_t)v21 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v52 >= (char *)v21 + v50)
      {
        v50 = v52 - (char *)v21 + 8;
        if ((unint64_t)(v52 - (char *)v21) > 0xFFFFFFFFFFFFFFF7 || v50 > v47)
          return 17;
        *(_QWORD *)v52 = a3;
      }
      if (!v47)
        return 17;
      v54 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v55 = *(_QWORD *)(a1 + 56);
      if (v54 + 16 >= v55)
        v54 = 0;
      if (v50 <= 0x10)
        v50 = 16;
      v56 = v54 + v50;
      if (v55 <= v56)
        v56 = 0;
      *(_QWORD *)(a1 + 72) = v56;
      v57 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v56, v57));
      v59 = *(_DWORD *)(a1 + 108);
      if (v58 == 0x80000000 || v59 != 0)
      {
        v62 = v59 + 1;
        *(_DWORD *)(a1 + 108) = v62;
        if (v62 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v67, a4);
    if ((_BYTE)v69)
    {
      v21 = v67;
      v47 = v68;
      v48 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = v48 - (_QWORD)v67;
      if (v48 < (unint64_t)v67)
        goto LABEL_92;
      v50 = v49 + 2;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL || v50 > v68)
        goto LABEL_91;
      *(_WORD *)((char *)v67 + v49) = 2822;
      goto LABEL_60;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferfv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  IPC::Encoder *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  unint64_t v65;
  char v66;
  IPC::Encoder *v67;
  unint64_t v68;
  unint64_t v69;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v64, a4);
      if (!v66)
        break;
      v8 = v64;
      v9 = v65;
      v67 = v64;
      v68 = v65;
      v69 = 0;
      v10 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v64;
      if (v10 < (unint64_t)v64)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v65)
        {
          v9 = 0;
          v12 = 0;
          v68 = 0;
        }
        else
        {
          *(_WORD *)((char *)v64 + v11) = 910;
          v69 = v11 + 2;
        }
      }
      v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - ((_QWORD)v8 + v12);
      if (v14 >= (unint64_t)v8 + v12)
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
          v68 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
          v69 = v17;
          v12 = v17;
        }
      }
      v19 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v19 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v19 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || v19 - (char *)v8 + 4 > v9)
        {
          v68 = 0;
        }
        else
        {
          *(_DWORD *)v19 = *((_DWORD *)a2 + 1);
          v69 = v19 - (char *)v8 + 4;
        }
      }
      IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v67, *a2[1], (uint64_t)a2[1][1]);
      if (v68)
      {
        v22 = v69;
        v23 = *(_QWORD *)(a1 + 64);
        v24 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = *(_QWORD *)(a1 + 56);
        if (v24 + 16 >= v25)
          v24 = 0;
        if (v69 <= 0x10)
          v22 = 16;
        v26 = v24 + v22;
        if (v25 <= v26)
          v27 = 0;
        else
          v27 = v26;
        *(_QWORD *)(a1 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v27, v28));
        if (v29 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v66)
      {
        v31 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = v31 - (_QWORD)v64;
        if (v31 < (unint64_t)v64)
        {
          v33 = 0;
        }
        else
        {
          v33 = 0;
          if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v65)
          {
            *(_WORD *)((char *)v64 + v32) = 2821;
            v33 = v32 + 2;
          }
        }
        v34 = *(_QWORD *)(a1 + 64);
        v35 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = *(_QWORD *)(a1 + 56);
        if (v35 + 16 >= v36)
          v35 = 0;
        if (v33 <= 0x10)
          v33 = 16;
        v37 = v35 + v33;
        if (v36 <= v37)
          v37 = 0;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 128);
        do
          __ldaxr(v38);
        while (__stlxr(v37, v38));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)(a1 + 8));
        v39 = v63;
        v40 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v40 = 910;
        *(_QWORD *)(v40 + 8) = a3;
        *(_QWORD *)(v40 + 528) = v40 + 16;
        *(_QWORD *)(v40 + 536) = v40 + 16;
        *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v40 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
        v67 = (IPC::Encoder *)v40;
        v41 = *(_DWORD *)a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 4uLL, 4) = v41;
        v42 = *((_DWORD *)a2 + 1);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 4uLL, 4) = v42;
        IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v40, *a2[1], (uint64_t)a2[1][1]);
        v30 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v67, 1, 0);
        v44 = v67;
        v67 = 0;
        if (v44)
        {
          IPC::Encoder::~Encoder(v44, v43);
          WTF::fastFree(v45, v46);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v63);
        return v30;
      }
      __break(1u);
LABEL_91:
      v47 = 0;
LABEL_92:
      v50 = 0;
LABEL_60:
      v52 = (char *)(((unint64_t)v21 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v52 >= (char *)v21 + v50)
      {
        v50 = v52 - (char *)v21 + 8;
        if ((unint64_t)(v52 - (char *)v21) > 0xFFFFFFFFFFFFFFF7 || v50 > v47)
          return 17;
        *(_QWORD *)v52 = a3;
      }
      if (!v47)
        return 17;
      v54 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v55 = *(_QWORD *)(a1 + 56);
      if (v54 + 16 >= v55)
        v54 = 0;
      if (v50 <= 0x10)
        v50 = 16;
      v56 = v54 + v50;
      if (v55 <= v56)
        v56 = 0;
      *(_QWORD *)(a1 + 72) = v56;
      v57 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v56, v57));
      v59 = *(_DWORD *)(a1 + 108);
      if (v58 == 0x80000000 || v59 != 0)
      {
        v62 = v59 + 1;
        *(_DWORD *)(a1 + 108) = v62;
        if (v62 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v67, a4);
    if ((_BYTE)v69)
    {
      v21 = v67;
      v47 = v68;
      v48 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = v48 - (_QWORD)v67;
      if (v48 < (unint64_t)v67)
        goto LABEL_92;
      v50 = v49 + 2;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL || v50 > v68)
        goto LABEL_91;
      *(_WORD *)((char *)v67 + v49) = 2822;
      goto LABEL_60;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferfi,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  char *v74;
  unint64_t v75;
  char v76;
  IPC::Encoder *v77;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
      if (!v76)
        return 15;
      v8 = v74;
      v9 = v75;
      v10 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v74;
      if (v10 >= (unint64_t)v74)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v75)
        {
          *(_WORD *)&v74[v11] = 909;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (_QWORD)&v8[v12];
      if (v14 >= (unint64_t)&v8[v12])
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v16] = *a2;
          v12 = v17;
        }
      }
      v19 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (_QWORD)&v8[v12];
      if (v19 >= (unint64_t)&v8[v12])
      {
        v21 = v19 - (_QWORD)v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v21] = a2[1];
          v12 = v22;
        }
      }
      v24 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= (unint64_t)&v8[v12];
      v26 = v24 - (_QWORD)&v8[v12];
      if (v25)
      {
        v72 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)&v8[v27] = a2[2];
          v72 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v72 = v9;
      }
      v28 = (char *)((unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL);
      v29 = (char *)(v28 - &v8[v12]);
      if (v28 >= &v8[v12])
      {
        v29 = (char *)(v28 - v8);
        if ((unint64_t)(v28 - v8) > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_43;
        v12 = (unint64_t)(v29 + 4);
        if ((unint64_t)(v29 + 4) > v72)
          goto LABEL_43;
        *(_DWORD *)v28 = a2[3];
      }
      if (v72)
      {
        v30 = *(_QWORD *)(a1 + 64);
        v31 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *(_QWORD *)(a1 + 56);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v33 = v31 + v12;
        if (v32 <= v33)
          v34 = 0;
        else
          v34 = v33;
        *(_QWORD *)(a1 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v34, v35));
        if (v36 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v37 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v37;
      }
LABEL_43:
      if (v76)
      {
        v38 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v39 = v38 - (_QWORD)v74;
        if (v38 < (unint64_t)v74)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v75)
          {
            *(_WORD *)&v74[v39] = 2821;
            v40 = v39 + 2;
          }
        }
        v41 = *(_QWORD *)(a1 + 64);
        v42 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v43 = *(_QWORD *)(a1 + 56);
        if (v42 + 16 >= v43)
          v42 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v44 = v42 + v40;
        if (v43 <= v44)
          v44 = 0;
        *(_QWORD *)(a1 + 72) = v44;
        v45 = (unint64_t *)(*(_QWORD *)(v41 + 16) + 128);
        do
          __ldaxr(v45);
        while (__stlxr(v44, v45));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
        v46 = v73;
        v47 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v47 = 909;
        *(_QWORD *)(v47 + 8) = a3;
        *(_QWORD *)(v47 + 528) = v47 + 16;
        *(_QWORD *)(v47 + 536) = v47 + 16;
        *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v47 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
        v77 = (IPC::Encoder *)v47;
        v48 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v48;
        v49 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v49;
        v50 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v50;
        v51 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v51;
        v37 = IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v77, 1, 0);
        v53 = v77;
        v77 = 0;
        if (v53)
        {
          IPC::Encoder::~Encoder(v53, v52);
          WTF::fastFree(v54, v55);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
        return v37;
      }
      __break(1u);
LABEL_101:
      v56 = 0;
LABEL_102:
      v59 = 0;
LABEL_69:
      v61 = (char *)((unint64_t)&v29[v59 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v61 >= &v29[v59])
      {
        v59 = v61 - v29 + 8;
        if ((unint64_t)(v61 - v29) > 0xFFFFFFFFFFFFFFF7 || v59 > v56)
          return 17;
        *(_QWORD *)v61 = a3;
      }
      if (!v56)
        return 17;
      v63 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v64 = *(_QWORD *)(a1 + 56);
      if (v63 + 16 >= v64)
        v63 = 0;
      if (v59 <= 0x10)
        v59 = 16;
      v65 = v63 + v59;
      if (v64 <= v65)
        v65 = 0;
      *(_QWORD *)(a1 + 72) = v65;
      v66 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v65, v66));
      v68 = *(_DWORD *)(a1 + 108);
      if (v67 == 0x80000000 || v68 != 0)
      {
        v71 = v68 + 1;
        *(_DWORD *)(a1 + 108) = v71;
        if (v71 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
  if (v76)
  {
    v29 = v74;
    v56 = v75;
    v57 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v58 = v57 - (_QWORD)v74;
    if (v57 < (unint64_t)v74)
      goto LABEL_102;
    v59 = v58 + 2;
    if (v58 > 0xFFFFFFFFFFFFFFFDLL || v59 > v75)
      goto LABEL_101;
    *(_WORD *)&v74[v58] = 2822;
    goto LABEL_69;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 935;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 935;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 948;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 948;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3602;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE12u, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3602, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3968[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 882;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 882;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 976;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 976;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3573;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xDF5u, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3573, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3978[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3575;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xDF7u, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3575, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3988[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 938;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 938;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 951;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 951;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3605;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE15u, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3605, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3998[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 891;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 891;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SamplerParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1014;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1014;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SamplerParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1013;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1013;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3579;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xDFBu, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3579, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E39A8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3580;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xDFCu, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3580, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E39B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::FenceSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  unint64_t v43;
  char v44;
  IPC::Encoder *v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  unint64_t v56;
  void *v57;
  uint64_t *v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  char v78;
  unsigned int v79;
  uint64_t *v80;
  unint64_t v81;
  int v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  IPC::Encoder *v87;
  int v88;
  char v89;
  IPC::Decoder *v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v80, a5);
  if (!(_BYTE)v82)
    goto LABEL_125;
  v63 = v80;
  v62 = v81;
  v64 = ((unint64_t)v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = v64 - (_QWORD)v80;
  if (v64 >= (unint64_t)v80)
  {
    v66 = v65 + 2;
    if (v65 <= 0xFFFFFFFFFFFFFFFDLL && v66 <= v81)
    {
      *(_WORD *)((char *)v80 + v65) = 2822;
      goto LABEL_104;
    }
    v62 = 0;
  }
  v66 = 0;
LABEL_104:
  v68 = (char *)(((unint64_t)v63 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v68 >= (char *)v63 + v66)
  {
    v66 = v68 - (char *)v63 + 8;
    if ((unint64_t)(v68 - (char *)v63) > 0xFFFFFFFFFFFFFFF7 || v66 > v62)
      goto LABEL_137;
    *(_QWORD *)v68 = v6;
  }
  if (!v62)
  {
LABEL_137:
    v78 = 17;
    goto LABEL_126;
  }
  v70 = v8[8];
  v71 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v8[7];
  if (v71 + 16 >= v72)
    v71 = 0;
  if (v66 <= 0x10)
    v66 = 16;
  v73 = v71 + v66;
  if (v72 <= v73)
    v73 = 0;
  v8[9] = v73;
  v74 = (unint64_t *)(*(_QWORD *)(v70 + 16) + 128);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v73, v74));
  v76 = *((_DWORD *)v8 + 27);
  if (v75 == 0x80000000 || v76 != 0)
  {
    v79 = v76 + 1;
    *((_DWORD *)v8 + 27) = v79;
    if (v79 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v84, a5);
  if (!v86)
  {
LABEL_125:
    v78 = 15;
LABEL_126:
    *(_BYTE *)a4 = v78;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v84;
  v12 = v85;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v90, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v90, v14))
  {
    LOBYTE(v93) = 11;
    v14 = 1;
    LODWORD(v95) = 1;
    LOBYTE(v80) = 0;
    v82 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v93);
    v83 = 1;
    if ((_DWORD)v95 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v87, &v93);
    goto LABEL_67;
  }
  v93 = v11;
  v94 = v12;
  v95 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3550;
  v95 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v94 = 0;
        }
        else
        {
          *v19 = v14;
          v95 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v93, (_DWORD *)a2);
      if (v94)
      {
        v21 = v95;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v95 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v87) = 16;
          v88 = 1;
LABEL_48:
          v89 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v87 = v40;
          v88 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v90, v14, 0xDDEu, (uint64_t)&v91, a5);
        LOBYTE(v87) = 0;
        v88 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v87, (uint64_t)&v91);
        v89 = 1;
        if (v92 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v92])(&v96, &v91);
      }
      else
      {
        LOBYTE(v87) = 0;
        v89 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v90);
      if (!v89)
      {
        LOBYTE(v80) = 0;
        v83 = 0;
        goto LABEL_64;
      }
      if (v88 == 1)
      {
        v46 = (char)v87;
LABEL_63:
        LOBYTE(v80) = v46;
        v82 = 1;
        v83 = 1;
        goto LABEL_64;
      }
      if (v88)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)v87);
      if (!v44)
      {
        v46 = 13;
        goto LABEL_63;
      }
      if (!v89)
        goto LABEL_132;
      if (v88)
        goto LABEL_138;
      v45 = v87;
      v87 = 0;
      v93 = (uint64_t)v45;
      v94 = v43;
      LODWORD(v95) = 0;
      LOBYTE(v80) = 0;
      v82 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v93);
      v83 = 1;
      if ((_DWORD)v95 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v91, &v93);
LABEL_64:
      if (v89 && v88 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v88])(&v93, &v87);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
      if (v83)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v80);
        if (v83)
        {
          if (v82 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v82])(&v93, &v80);
        }
        return result;
      }
      if (v86)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v94 = 0;
    }
    v47 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - v84;
    if (v47 < v84)
    {
      v49 = 0;
    }
    else
    {
      v49 = 0;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v85)
      {
        *(_WORD *)(v84 + v48) = 2821;
        v49 = v48 + 2;
      }
    }
    v50 = v8[8];
    v51 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = v8[7];
    if (v51 + 16 >= v52)
      v51 = 0;
    if (v49 <= 0x10)
      v49 = 16;
    v53 = v51 + v49;
    if (v52 <= v53)
      v53 = 0;
    v8[9] = v53;
    v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
    do
      __ldaxr(v54);
    while (__stlxr(v53, v54));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v91, v13);
    v8 = v91;
    v93 = 0;
    IPC::Connection::createSyncMessageEncoder(3550, (uint64_t)v6, &v93, (uint64_t *)&v87);
    v6 = v87;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v87, 4uLL, 4) = (_DWORD)v13;
    v55 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v55;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v93, (uint64_t *)&v87, 0, (uint64_t)&v80, a5);
    a2 = v81;
    if ((_DWORD)v81)
    {
      if ((_DWORD)v81 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v80;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v56 = IPC::Decoder::decode<std::tuple<double>>(v80);
    if (!(_BYTE)v57)
      break;
    if (!(_DWORD)v81)
    {
      v58 = v80;
      v80 = 0;
      *(_QWORD *)a4 = v58;
      *(_QWORD *)(a4 + 8) = v56;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v90, &v80);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v81;
  if ((_DWORD)v81 != -1)
    goto LABEL_91;
LABEL_92:
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v60, v61);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v91);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E39C8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3607;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFF7
        || (v17 = (unint64_t)(v25 + 8), (unint64_t)(v25 + 8) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_QWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE17u, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3607, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_QWORD *)a2;
    *(_QWORD *)IPC::Encoder::grow(v93, 8uLL, 8) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E39D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _QWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 953;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_QWORD *)((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 8;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFF7 || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 953;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 8uLL, 8) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::ClientWaitSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _BOOL8 v44;
  double v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  IPC::Encoder *v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t *v72;
  IPC::Encoder *v73;
  WTF *v74;
  void *v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v82;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  int v90;
  char v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  int v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  IPC::Encoder *v102;
  int v103;
  int v104;
  uint64_t *v105;
  unsigned int v106;
  unsigned int v107;
  IPC::Decoder *v108;
  char v109;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v95, a5);
  if (!(_BYTE)v97)
    goto LABEL_139;
  v77 = v95;
  v76 = v96;
  v78 = ((unint64_t)v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v79 = v78 - (_QWORD)v95;
  if (v78 >= (unint64_t)v95)
  {
    v80 = v79 + 2;
    if (v79 <= 0xFFFFFFFFFFFFFFFDLL && v80 <= v96)
    {
      *(_WORD *)((char *)v95 + v79) = 2822;
      goto LABEL_118;
    }
    v76 = 0;
  }
  v80 = 0;
LABEL_118:
  v82 = (char *)(((unint64_t)v77 + v80 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v82 >= (char *)v77 + v80)
  {
    v80 = v82 - (char *)v77 + 8;
    if ((unint64_t)(v82 - (char *)v77) > 0xFFFFFFFFFFFFFFF7 || v80 > v76)
      goto LABEL_152;
    *(_QWORD *)v82 = v6;
  }
  if (!v76)
  {
LABEL_152:
    v92 = 17;
    goto LABEL_140;
  }
  v84 = v8[8];
  v85 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v86 = v8[7];
  if (v85 + 16 >= v86)
    v85 = 0;
  if (v80 <= 0x10)
    v80 = 16;
  v87 = v85 + v80;
  if (v86 <= v87)
    v87 = 0;
  v8[9] = v87;
  v88 = (unint64_t *)(*(_QWORD *)(v84 + 16) + 128);
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v87, v88));
  v90 = *((_DWORD *)v8 + 27);
  if (v89 == 0x80000000 || v90 != 0)
  {
    v93 = v90 + 1;
    *((_DWORD *)v8 + 27) = v93;
    if (v93 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v99, a5);
  if (!v101)
  {
LABEL_139:
    v92 = 15;
LABEL_140:
    *(_BYTE *)a4 = v92;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v99;
  v12 = v100;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v108, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v108, v14))
  {
    v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v16 = v15 - v11;
    if (v15 < v11)
      goto LABEL_148;
    v17 = v16 + 2;
    if (v16 <= 0xFFFFFFFFFFFFFFFDLL && v17 <= v12)
    {
      *(_WORD *)(v11 + v16) = 3547;
      goto LABEL_10;
    }
    goto LABEL_147;
  }
  LOBYTE(v105) = 11;
  v14 = 1;
  v107 = 1;
  LOBYTE(v95) = 0;
  v97 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v95, (uint64_t)&v105);
  v98 = 1;
  v46 = v107;
  if (v107 == -1)
    goto LABEL_81;
  v47 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
LABEL_80:
  ((void (*)(IPC::Encoder **, uint64_t **))v47[v46])(&v102, &v105);
LABEL_81:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v108);
  if (v98)
  {
    *(_BYTE *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v95);
    if (v98)
    {
      if (v97 != -1)
        return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v97])(&v105, &v95);
    }
    return result;
  }
  if (!v101)
  {
    while (1)
    {
      __break(1u);
LABEL_147:
      v12 = 0;
LABEL_148:
      v17 = 0;
LABEL_10:
      v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
      v20 = v19 - (v11 + v17);
      if (v19 >= v11 + v17)
      {
        v21 = v19 - v11;
        v22 = v20 + v17 + 8;
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
        {
          v12 = 0;
        }
        else
        {
          *(_QWORD *)(v11 + v21) = v14;
          v17 = v22;
        }
      }
      v24 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
      v25 = v24 - (v11 + v17);
      if (v24 < v11 + v17)
        goto LABEL_154;
      v26 = 0;
      v27 = v25 + v17;
      if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= v12)
      {
        *(_QWORD *)(v11 + v27) = *(_QWORD *)a2;
        v26 = v12;
        v17 = v27 + 8;
      }
LABEL_20:
      v28 = (v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v29 = v28 >= v11 + v17;
      v30 = v28 - (v11 + v17);
      if (v29)
      {
        v94 = 0;
        v31 = v30 + v17;
        if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v26)
        {
          *(_DWORD *)(v11 + v31) = *(_DWORD *)(a2 + 8);
          v94 = v26;
          v17 = v31 + 4;
        }
      }
      else
      {
        v94 = v26;
      }
      v32 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v32 >= v11 + v17)
      {
        v33 = (char *)v32 - v11;
        if ((unint64_t)v32 - v11 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_55;
        v17 = (unint64_t)(v33 + 8);
        if ((unint64_t)(v33 + 8) > v94)
          goto LABEL_55;
        *v32 = *(_QWORD *)(a2 + 16);
      }
      if (v94)
      {
        v34 = v8[8];
        v35 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v8[7];
        if (v35 + 16 >= v36)
          v35 = 0;
        if (v17 <= 0x10)
          v17 = 16;
        v37 = v35 + v17;
        if (v36 <= v37)
          v38 = 0;
        else
          v38 = v37;
        v8[9] = v38;
        v39 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 128);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v38, v39));
        if (v40 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v41 = *(unint64_t **)(v8[8] + 16);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(0x80000000uLL, v41));
          v43 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v42 | v43 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v44 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v44)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v44);
              if (v45 < a5)
                continue;
            }
          }
          LOBYTE(v105) = 16;
          v106 = 1;
LABEL_61:
          LOBYTE(v107) = 1;
          goto LABEL_62;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v48 = v8[8];
        v49 = *(_QWORD *)(v48 + 8);
        if (v49 <= 0xFF)
          continue;
        v50 = v8[7];
        v51 = *(_QWORD *)(v48 + 16);
        v52 = v49 - 256;
        if (v50)
        {
          v11 = v50 - 1;
          if (v52 < v50 - 1)
            continue;
        }
        else
        {
          v11 = v52;
        }
        v12 = v51 + 256;
        v53 = WTF::fastMalloc((WTF *)0x48);
        v54 = IPC::Decoder::Decoder(v53, v12, v11, v8[6]);
        if (*(_WORD *)(v54 + 50) != 2821)
        {
          v105 = (uint64_t *)v54;
          v106 = 0;
          goto LABEL_61;
        }
        IPC::Decoder::~Decoder((IPC::Decoder *)v54);
        WTF::fastFree(v55, v56);
        IPC::Connection::waitForSyncReply((uint64_t)v108, v14, 0xDDBu, (uint64_t)&v102, a5);
        LOBYTE(v105) = 0;
        v106 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v105, (uint64_t)&v102);
        LOBYTE(v107) = 1;
        if (v103 != -1)
          ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v103])(&v109, &v102);
        goto LABEL_62;
      }
LABEL_55:
      LOBYTE(v105) = 0;
      LOBYTE(v107) = 0;
LABEL_62:
      IPC::Connection::popPendingSyncRequestID(v108);
      if (!(_BYTE)v107)
      {
        LOBYTE(v95) = 0;
        v98 = 0;
        goto LABEL_77;
      }
      if (v106 == 1)
      {
        v59 = (char)v105;
        goto LABEL_76;
      }
      if (v106)
        goto LABEL_153;
      v57 = IPC::Decoder::decode<std::tuple<float>>(v105);
      if ((v57 & 0xFF00000000) == 0)
      {
        v59 = 13;
LABEL_76:
        LOBYTE(v95) = v59;
        v97 = 1;
        v98 = 1;
LABEL_77:
        if ((_BYTE)v107)
        {
          v46 = v106;
          if (v106 != -1)
          {
            v47 = off_1E34E3480;
            goto LABEL_80;
          }
        }
        goto LABEL_81;
      }
      if ((_BYTE)v107)
      {
        if (!v106)
        {
          v58 = (IPC::Encoder *)v105;
          v105 = 0;
          v102 = v58;
          v103 = v57;
          v104 = 0;
          LOBYTE(v95) = 0;
          v97 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v95, (uint64_t)&v102);
          v98 = 1;
          if (v104 != -1)
            ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v104])(&v109, &v102);
          goto LABEL_77;
        }
LABEL_153:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_154:
        v26 = v12;
        goto LABEL_20;
      }
    }
  }
  v60 = (v99 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v61 = v60 - v99;
  if (v60 < v99)
  {
    v62 = 0;
  }
  else
  {
    v62 = 0;
    if (v61 <= 0xFFFFFFFFFFFFFFFDLL && v61 + 2 <= v100)
    {
      *(_WORD *)(v99 + v61) = 2821;
      v62 = v61 + 2;
    }
  }
  v63 = v8[8];
  v64 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = v8[7];
  if (v64 + 16 >= v65)
    v64 = 0;
  if (v62 <= 0x10)
    v62 = 16;
  v66 = v64 + v62;
  if (v65 <= v66)
    v66 = 0;
  v8[9] = v66;
  v67 = (unint64_t *)(*(_QWORD *)(v63 + 16) + 128);
  do
    __ldaxr(v67);
  while (__stlxr(v66, v67));
  *((_DWORD *)v8 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v108, v13);
  v8 = (uint64_t *)v108;
  v105 = 0;
  IPC::Connection::createSyncMessageEncoder(3547, (uint64_t)v6, (uint64_t *)&v105, (uint64_t *)&v102);
  v6 = v102;
  v68 = *(_QWORD *)a2;
  *(_QWORD *)IPC::Encoder::grow(v102, 8uLL, 8) = v68;
  v13 = (uint64_t **)*(unsigned int *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = (_DWORD)v13;
  v69 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(v6, 8uLL, 8) = v69;
  IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v105, (uint64_t *)&v102, 0, (uint64_t)&v95, a5);
  a2 = v96;
  if ((_DWORD)v96)
  {
    if ((_DWORD)v96 != 1)
      goto LABEL_153;
    *(_BYTE *)a4 = (_BYTE)v95;
  }
  else
  {
    v70 = IPC::Decoder::decode<std::tuple<float>>(v95);
    if ((v70 & 0xFF00000000) == 0)
    {
      *(_BYTE *)a4 = 13;
      *(_DWORD *)(a4 + 16) = 1;
      LODWORD(a2) = v96;
      if ((_DWORD)v96 == -1)
        goto LABEL_106;
      goto LABEL_105;
    }
    if ((_DWORD)v96)
      goto LABEL_153;
    v72 = v95;
    v95 = 0;
    *(_QWORD *)a4 = v72;
    *(_DWORD *)(a4 + 8) = v70;
  }
  *(_DWORD *)(a4 + 16) = a2;
LABEL_105:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v109, &v95);
LABEL_106:
  v73 = v102;
  v102 = 0;
  if (v73)
  {
    IPC::Encoder::~Encoder(v73, v71);
    WTF::fastFree(v74, v75);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v108);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E39E8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::WaitSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v56;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  unsigned int v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  IPC::Encoder *v71;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v68, a4);
      if (!v70)
        return 15;
      v8 = v68;
      v9 = v69;
      v10 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v68;
      if (v10 >= v68)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v69)
        {
          *(_WORD *)(v68 + v11) = 1092;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 8;
        if (v16 > 0xFFFFFFFFFFFFFFF7 || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_QWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = *((_DWORD *)a2 + 2);
          v12 = v22;
        }
      }
      v24 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v24 >= v8 + v12)
      {
        v25 = (char *)v24 - v8;
        if ((unint64_t)v24 - v8 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_38;
        v12 = (unint64_t)(v25 + 8);
        if ((unint64_t)(v25 + 8) > v9)
          goto LABEL_38;
        *v24 = a2[2];
      }
      if (v9)
      {
        v26 = *(_QWORD *)(a1 + 64);
        v27 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(a1 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        v29 = 16;
        if (v12 > 0x10)
          v29 = v12;
        v30 = v27 + v29;
        if (v28 <= v30)
          v31 = 0;
        else
          v31 = v30;
        *(_QWORD *)(a1 + 72) = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v34 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v34;
      }
LABEL_38:
      if (v70)
      {
        v35 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v35 - v68;
        if (v35 < v68)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v69)
          {
            *(_WORD *)(v68 + v36) = 2821;
            v37 = v36 + 2;
          }
        }
        v38 = *(_QWORD *)(a1 + 64);
        v39 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v40 = *(_QWORD *)(a1 + 56);
        if (v39 + 16 >= v40)
          v39 = 0;
        if (v37 <= 0x10)
          v37 = 16;
        v41 = v39 + v37;
        if (v40 <= v41)
          v41 = 0;
        *(_QWORD *)(a1 + 72) = v41;
        v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
        do
          __ldaxr(v42);
        while (__stlxr(v41, v42));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)(a1 + 8));
        v43 = v67;
        v44 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v44 = 1092;
        *(_QWORD *)(v44 + 8) = a3;
        *(_QWORD *)(v44 + 528) = v44 + 16;
        *(_QWORD *)(v44 + 536) = v44 + 16;
        *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v44 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
        v71 = (IPC::Encoder *)v44;
        v45 = *a2;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 8uLL, 8) = v45;
        LODWORD(v45) = *((_DWORD *)a2 + 2);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v45;
        v46 = a2[2];
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 8uLL, 8) = v46;
        v34 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v71, 1, 0);
        v48 = v71;
        v71 = 0;
        if (v48)
        {
          IPC::Encoder::~Encoder(v48, v47);
          WTF::fastFree(v49, v50);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
        return v34;
      }
      __break(1u);
LABEL_96:
      v51 = 0;
LABEL_97:
      v54 = 0;
LABEL_64:
      v56 = (_QWORD *)((v12 + v54 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v56 >= v12 + v54)
      {
        v54 = (unint64_t)v56 - v12 + 8;
        if ((unint64_t)v56 - v12 > 0xFFFFFFFFFFFFFFF7 || v54 > v51)
          return 17;
        *v56 = a3;
      }
      if (!v51)
        return 17;
      v58 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v59 = *(_QWORD *)(a1 + 56);
      if (v58 + 16 >= v59)
        v58 = 0;
      if (v54 <= 0x10)
        v54 = 16;
      v60 = v58 + v54;
      if (v59 <= v60)
        v60 = 0;
      *(_QWORD *)(a1 + 72) = v60;
      v61 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v60, v61));
      v63 = *(_DWORD *)(a1 + 108);
      if (v62 == 0x80000000 || v63 != 0)
      {
        v66 = v63 + 1;
        *(_DWORD *)(a1 + 108) = v66;
        if (v66 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v68, a4);
  if (v70)
  {
    v12 = v68;
    v51 = v69;
    v52 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v53 = v52 - v68;
    if (v52 < v68)
      goto LABEL_97;
    v54 = v53 + 2;
    if (v53 > 0xFFFFFFFFFFFFFFFDLL || v54 > v69)
      goto LABEL_96;
    *(_WORD *)(v68 + v53) = 2822;
    goto LABEL_64;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSynci,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL8 v41;
  double v42;
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  IPC::Encoder *v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  int v65;
  uint64_t v66;
  void *v67;
  uint64_t *v68;
  IPC::Encoder *v69;
  WTF *v70;
  void *v71;
  unint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v78;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  int v86;
  char v88;
  unsigned int v89;
  uint64_t *v90;
  unint64_t v91;
  int v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  IPC::Encoder *v97;
  int v98;
  int v99;
  uint64_t *v100;
  unsigned int v101;
  unsigned int v102;
  IPC::Decoder *v103;
  char v104;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v90, a5);
  if (!(_BYTE)v92)
    goto LABEL_135;
  v73 = v90;
  v72 = v91;
  v74 = ((unint64_t)v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v75 = v74 - (_QWORD)v90;
  if (v74 >= (unint64_t)v90)
  {
    v76 = v75 + 2;
    if (v75 <= 0xFFFFFFFFFFFFFFFDLL && v76 <= v91)
    {
      *(_WORD *)((char *)v90 + v75) = 2822;
      goto LABEL_114;
    }
    v72 = 0;
  }
  v76 = 0;
LABEL_114:
  v78 = (char *)(((unint64_t)v73 + v76 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v78 >= (char *)v73 + v76)
  {
    v76 = v78 - (char *)v73 + 8;
    if ((unint64_t)(v78 - (char *)v73) > 0xFFFFFFFFFFFFFFF7 || v76 > v72)
      goto LABEL_148;
    *(_QWORD *)v78 = v6;
  }
  if (!v72)
  {
LABEL_148:
    v88 = 17;
    goto LABEL_136;
  }
  v80 = v8[8];
  v81 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v82 = v8[7];
  if (v81 + 16 >= v82)
    v81 = 0;
  if (v76 <= 0x10)
    v76 = 16;
  v83 = v81 + v76;
  if (v82 <= v83)
    v83 = 0;
  v8[9] = v83;
  v84 = (unint64_t *)(*(_QWORD *)(v80 + 16) + 128);
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v83, v84));
  v86 = *((_DWORD *)v8 + 27);
  if (v85 == 0x80000000 || v86 != 0)
  {
    v89 = v86 + 1;
    *((_DWORD *)v8 + 27) = v89;
    if (v89 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v94, a5);
  if (!v96)
  {
LABEL_135:
    v88 = 15;
LABEL_136:
    *(_BYTE *)a4 = v88;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v94;
  v12 = v95;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v103, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v103, v14))
  {
    v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v16 = v15 - v11;
    if (v15 < v11)
      goto LABEL_144;
    v17 = v16 + 2;
    if (v16 <= 0xFFFFFFFFFFFFFFFDLL && v17 <= v12)
    {
      *(_WORD *)(v11 + v16) = 3586;
      goto LABEL_10;
    }
    goto LABEL_143;
  }
  LOBYTE(v100) = 11;
  v14 = 1;
  v102 = 1;
  LOBYTE(v90) = 0;
  v92 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v90, (uint64_t)&v100);
  v93 = 1;
  v43 = v102;
  if (v102 == -1)
    goto LABEL_77;
  v44 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
LABEL_76:
  ((void (*)(IPC::Encoder **, uint64_t **))v44[v43])(&v97, &v100);
LABEL_77:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v103);
  if (v93)
  {
    *(_BYTE *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v90);
    if (v93)
    {
      if (v92 != -1)
        return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v92])(&v100, &v90);
    }
    return result;
  }
  if (!v96)
  {
    while (1)
    {
      __break(1u);
LABEL_143:
      v12 = 0;
LABEL_144:
      v17 = 0;
LABEL_10:
      v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
      v20 = v19 - (v11 + v17);
      if (v19 >= v11 + v17)
      {
        v21 = v19 - v11;
        v22 = v20 + v17 + 8;
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
        {
          v12 = 0;
        }
        else
        {
          *(_QWORD *)(v11 + v21) = v14;
          v17 = v22;
        }
      }
      v24 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
      v25 = v24 >= v11 + v17;
      v26 = v24 - (v11 + v17);
      if (!v25)
        goto LABEL_150;
      v27 = 0;
      v28 = v26 + v17;
      if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= v12)
      {
        *(_QWORD *)(v11 + v28) = *(_QWORD *)a2;
        v27 = v12;
        v17 = v28 + 8;
      }
LABEL_21:
      v29 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v29 >= v11 + v17)
      {
        v30 = (char *)v29 - v11;
        if ((unint64_t)v29 - v11 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_51;
        v17 = (unint64_t)(v30 + 4);
        if ((unint64_t)(v30 + 4) > v27)
          goto LABEL_51;
        *v29 = *(_DWORD *)(a2 + 8);
      }
      if (v27)
      {
        v31 = v8[8];
        v32 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v33 = v8[7];
        if (v32 + 16 >= v33)
          v32 = 0;
        if (v17 <= 0x10)
          v17 = 16;
        v34 = v32 + v17;
        if (v33 <= v34)
          v35 = 0;
        else
          v35 = v34;
        v8[9] = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v31 + 16) + 128);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v35, v36));
        if (v37 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v38 = *(unint64_t **)(v8[8] + 16);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(0x80000000uLL, v38));
          v40 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v39 | v40 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v41 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v41)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v41);
              if (v42 < a5)
                continue;
            }
          }
          LOBYTE(v100) = 16;
          v101 = 1;
LABEL_57:
          LOBYTE(v102) = 1;
          goto LABEL_58;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v45 = v8[8];
        v46 = *(_QWORD *)(v45 + 8);
        if (v46 <= 0xFF)
          continue;
        v47 = v8[7];
        v48 = *(_QWORD *)(v45 + 16);
        v49 = v46 - 256;
        if (v47)
        {
          v11 = v47 - 1;
          if (v49 < v47 - 1)
            continue;
        }
        else
        {
          v11 = v49;
        }
        v12 = v48 + 256;
        v50 = WTF::fastMalloc((WTF *)0x48);
        v51 = IPC::Decoder::Decoder(v50, v12, v11, v8[6]);
        if (*(_WORD *)(v51 + 50) != 2821)
        {
          v100 = (uint64_t *)v51;
          v101 = 0;
          goto LABEL_57;
        }
        IPC::Decoder::~Decoder((IPC::Decoder *)v51);
        WTF::fastFree(v52, v53);
        IPC::Connection::waitForSyncReply((uint64_t)v103, v14, 0xE02u, (uint64_t)&v97, a5);
        LOBYTE(v100) = 0;
        v101 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v100, (uint64_t)&v97);
        LOBYTE(v102) = 1;
        if (v98 != -1)
          ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v98])(&v104, &v97);
        goto LABEL_58;
      }
LABEL_51:
      LOBYTE(v100) = 0;
      LOBYTE(v102) = 0;
LABEL_58:
      IPC::Connection::popPendingSyncRequestID(v103);
      if (!(_BYTE)v102)
      {
        LOBYTE(v90) = 0;
        v93 = 0;
        goto LABEL_73;
      }
      if (v101 == 1)
      {
        v56 = (char)v100;
        goto LABEL_72;
      }
      if (v101)
        goto LABEL_149;
      v54 = IPC::Decoder::decode<std::tuple<float>>(v100);
      if ((v54 & 0xFF00000000) == 0)
      {
        v56 = 13;
LABEL_72:
        LOBYTE(v90) = v56;
        v92 = 1;
        v93 = 1;
LABEL_73:
        if ((_BYTE)v102)
        {
          v43 = v101;
          if (v101 != -1)
          {
            v44 = off_1E34E3480;
            goto LABEL_76;
          }
        }
        goto LABEL_77;
      }
      if ((_BYTE)v102)
      {
        if (!v101)
        {
          v55 = (IPC::Encoder *)v100;
          v100 = 0;
          v97 = v55;
          v98 = v54;
          v99 = 0;
          LOBYTE(v90) = 0;
          v92 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v90, (uint64_t)&v97);
          v93 = 1;
          if (v99 != -1)
            ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v99])(&v104, &v97);
          goto LABEL_73;
        }
LABEL_149:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_150:
        v27 = v12;
        goto LABEL_21;
      }
    }
  }
  v57 = (v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v57 - v94;
  if (v57 < v94)
  {
    v59 = 0;
  }
  else
  {
    v59 = 0;
    if (v58 <= 0xFFFFFFFFFFFFFFFDLL && v58 + 2 <= v95)
    {
      *(_WORD *)(v94 + v58) = 2821;
      v59 = v58 + 2;
    }
  }
  v60 = v8[8];
  v61 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v62 = v8[7];
  if (v61 + 16 >= v62)
    v61 = 0;
  if (v59 <= 0x10)
    v59 = 16;
  v63 = v61 + v59;
  if (v62 <= v63)
    v63 = 0;
  v8[9] = v63;
  v64 = (unint64_t *)(*(_QWORD *)(v60 + 16) + 128);
  do
    __ldaxr(v64);
  while (__stlxr(v63, v64));
  *((_DWORD *)v8 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v103, v13);
  v8 = (uint64_t *)v103;
  v100 = 0;
  IPC::Connection::createSyncMessageEncoder(3586, (uint64_t)v6, (uint64_t *)&v100, (uint64_t *)&v97);
  v6 = v97;
  v13 = *(uint64_t ***)a2;
  *(_QWORD *)IPC::Encoder::grow(v97, 8uLL, 8) = v13;
  v65 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v65;
  IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v100, (uint64_t *)&v97, 0, (uint64_t)&v90, a5);
  a2 = v91;
  if ((_DWORD)v91)
  {
    if ((_DWORD)v91 != 1)
      goto LABEL_149;
    *(_BYTE *)a4 = (_BYTE)v90;
  }
  else
  {
    v66 = IPC::Decoder::decode<std::tuple<float>>(v90);
    if ((v66 & 0xFF00000000) == 0)
    {
      *(_BYTE *)a4 = 13;
      *(_DWORD *)(a4 + 16) = 1;
      LODWORD(a2) = v91;
      if ((_DWORD)v91 == -1)
        goto LABEL_102;
      goto LABEL_101;
    }
    if ((_DWORD)v91)
      goto LABEL_149;
    v68 = v90;
    v90 = 0;
    *(_QWORD *)a4 = v68;
    *(_DWORD *)(a4 + 8) = v66;
  }
  *(_DWORD *)(a4 + 16) = a2;
LABEL_101:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v104, &v90);
LABEL_102:
  v69 = v97;
  v97 = 0;
  if (v69)
  {
    IPC::Encoder::~Encoder(v69, v67);
    WTF::fastFree(v70, v71);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v103);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E39F8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 941;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 941;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 955;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 955;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3609;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE19u, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3609, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3A08[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 893;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 893;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 884;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 884;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;

  if (*(_QWORD *)(a1 + 48) == a4)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v21 = v53;
  v20 = v54;
  v22 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v53;
  if (v22 >= v53)
  {
    v24 = v23 + 2;
    if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v24 <= v54)
    {
      *(_WORD *)(v53 + v23) = 2822;
      goto LABEL_31;
    }
    v20 = 0;
  }
  v24 = 0;
LABEL_31:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      return 17;
    *v26 = a4;
  }
  if (!v20)
    return 17;
  v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(a1 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(a1 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(a1 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(a1 + 108) = v35;
    if (v35 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a4;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v7 = v54;
  v8 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v9 = v8 - v53;
  if (v8 < v53)
  {
    v10 = 0;
    if (v54)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v54)
      goto LABEL_62;
    *(_WORD *)(v53 + v9) = 978;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(a1 + 64);
      v13 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(a1 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(a1 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v19 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v19;
    }
  }
  if (!v55)
  {
    __break(1u);
LABEL_81:
    v38 = 0;
    goto LABEL_68;
  }
LABEL_62:
  v36 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v37 = v36 - v53;
  if (v36 < v53)
    goto LABEL_81;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v54)
    goto LABEL_81;
  *(_WORD *)(v53 + v37) = 2821;
LABEL_68:
  v40 = *(_QWORD *)(a1 + 64);
  v41 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(a1 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(a1 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
  v45 = v52;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 978;
  *(_QWORD *)(v46 + 8) = a4;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v56 = (IPC::Encoder *)v46;
  v19 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v56, 1, 0);
  v48 = v56;
  v56 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TransformFeedbackVaryings,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  unint64_t v16;
  char *v17;
  IPC::Encoder *v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  void *v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unsigned int v59;
  uint64_t *v60;
  IPC::Encoder *v61;
  unint64_t v62;
  char v63;
  IPC::Encoder *v64;
  unint64_t v65;
  uint64_t v66;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v61, a4);
      if (!v63)
        return 15;
      v8 = v61;
      v9 = v62;
      v64 = v61;
      v65 = v62;
      v66 = 0;
      v10 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v61;
      if (v10 < (unint64_t)v61)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v62)
        {
          v9 = 0;
          v12 = 0;
          v65 = 0;
        }
        else
        {
          *(_WORD *)((char *)v61 + v11) = 1039;
          v66 = v11 + 2;
        }
      }
      v14 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v14 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v14 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || v14 - (char *)v8 + 4 > v9)
        {
          v65 = 0;
        }
        else
        {
          *(_DWORD *)v14 = *a2;
          v66 = v14 - (char *)v8 + 4;
        }
      }
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v64, *((_QWORD *)a2 + 1));
      v16 = v66;
      v17 = (char *)(((unint64_t)v64 + v66 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v18 = (IPC::Encoder *)(v17 - ((char *)v64 + v66));
      if (v17 >= (char *)v64 + v66)
      {
        v18 = (IPC::Encoder *)(v17 - (char *)v64);
        v16 = v17 - (char *)v64 + 4;
        if ((unint64_t)(v17 - (char *)v64) > 0xFFFFFFFFFFFFFFFBLL || v16 > v65)
          goto LABEL_34;
        *(_DWORD *)v17 = a2[4];
        v66 = (uint64_t)v18 + 4;
      }
      if (v65)
      {
        v20 = *(_QWORD *)(a1 + 64);
        v21 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = *(_QWORD *)(a1 + 56);
        if (v21 + 16 >= v22)
          v21 = 0;
        if (v16 <= 0x10)
          v16 = 16;
        v23 = v21 + v16;
        if (v22 <= v23)
          v24 = 0;
        else
          v24 = v23;
        *(_QWORD *)(a1 + 72) = v24;
        v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v24, v25));
        if (v26 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
LABEL_34:
      if (v63)
      {
        v28 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = v28 - (_QWORD)v61;
        if (v28 < (unint64_t)v61)
        {
          v30 = 0;
        }
        else
        {
          v30 = 0;
          if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v62)
          {
            *(_WORD *)((char *)v61 + v29) = 2821;
            v30 = v29 + 2;
          }
        }
        v31 = *(_QWORD *)(a1 + 64);
        v32 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v33 = *(_QWORD *)(a1 + 56);
        if (v32 + 16 >= v33)
          v32 = 0;
        if (v30 <= 0x10)
          v30 = 16;
        v34 = v32 + v30;
        if (v33 <= v34)
          v34 = 0;
        *(_QWORD *)(a1 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v31 + 16) + 128);
        do
          __ldaxr(v35);
        while (__stlxr(v34, v35));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)(a1 + 8));
        v36 = v60;
        v37 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v37 = 1039;
        *(_QWORD *)(v37 + 8) = a3;
        *(_QWORD *)(v37 + 528) = v37 + 16;
        *(_QWORD *)(v37 + 536) = v37 + 16;
        *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v37 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
        v64 = (IPC::Encoder *)v37;
        v38 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 4uLL, 4) = v38;
        IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v37, *((_QWORD *)a2 + 1));
        v39 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 4uLL, 4) = v39;
        v27 = IPC::Connection::sendMessageImpl((uint64_t)v36, (uint64_t *)&v64, 1, 0);
        v41 = v64;
        v64 = 0;
        if (v41)
        {
          IPC::Encoder::~Encoder(v41, v40);
          WTF::fastFree(v42, v43);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v60);
        return v27;
      }
      __break(1u);
LABEL_90:
      v44 = 0;
LABEL_91:
      v47 = 0;
LABEL_60:
      v49 = (char *)(((unint64_t)v18 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v49 >= (char *)v18 + v47)
      {
        v47 = v49 - (char *)v18 + 8;
        if ((unint64_t)(v49 - (char *)v18) > 0xFFFFFFFFFFFFFFF7 || v47 > v44)
          return 17;
        *(_QWORD *)v49 = a3;
      }
      if (!v44)
        return 17;
      v51 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v52 = *(_QWORD *)(a1 + 56);
      if (v51 + 16 >= v52)
        v51 = 0;
      if (v47 <= 0x10)
        v47 = 16;
      v53 = v51 + v47;
      if (v52 <= v53)
        v53 = 0;
      *(_QWORD *)(a1 + 72) = v53;
      v54 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v53, v54));
      v56 = *(_DWORD *)(a1 + 108);
      if (v55 == 0x80000000 || v56 != 0)
      {
        v59 = v56 + 1;
        *(_DWORD *)(a1 + 108) = v59;
        if (v59 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v64, a4);
  if ((_BYTE)v66)
  {
    v18 = v64;
    v44 = v65;
    v45 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = v45 - (_QWORD)v64;
    if (v45 < (unint64_t)v64)
      goto LABEL_91;
    v47 = v46 + 2;
    if (v46 > 0xFFFFFFFFFFFFFFFDLL || v47 > v65)
      goto LABEL_90;
    *(_WORD *)((char *)v64 + v46) = 2822;
    goto LABEL_60;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  uint64_t *v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  uint64_t *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  int v53;
  void *v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  int v82;
  char v83;
  uint64_t *v84;
  unint64_t v85;
  char v86;
  IPC::Encoder *v87;
  unint64_t v88;
  char v89;
  uint64_t *v90;
  int v91;
  char v92;
  uint64_t *v93;
  IPC::Encoder *v94;
  unint64_t v95;
  int v96;
  IPC::Decoder *v97;
  char v98;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!v81)
    goto LABEL_122;
  v62 = v79;
  v61 = v80;
  v63 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - v79;
  if (v63 >= v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)(v79 + v64) = 2822;
      goto LABEL_101;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_101:
  v67 = (_QWORD *)((v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v67 >= v62 + v65)
  {
    v65 = (unint64_t)v67 - v62 + 8;
    if ((unint64_t)v67 - v62 > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_134;
    *v67 = v6;
  }
  if (!v61)
  {
LABEL_134:
    v77 = 17;
    goto LABEL_123;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v84, a5);
  if (!v86)
  {
LABEL_122:
    v77 = 15;
LABEL_123:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 24) = 1;
    return result;
  }
  v11 = v84;
  v12 = v85;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v97, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v97, v14))
  {
    LOBYTE(v93) = 11;
    v14 = 1;
    v96 = 1;
    LOBYTE(v79) = 0;
    v82 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v93);
    v83 = 1;
    if (v96 != -1)
      ((void (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v96])(&v90, &v93);
    goto LABEL_66;
  }
  v93 = v11;
  v94 = (IPC::Encoder *)v12;
  v95 = 0;
  v15 = ((unint64_t)v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - (_QWORD)v11;
  if (v15 < (unint64_t)v11)
    goto LABEL_136;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_130;
  *(_WORD *)((char *)v11 + v16) = 3589;
  v95 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (char *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v19 >= (char *)v11 + v17)
      {
        if ((unint64_t)(v19 - (char *)v11) > 0xFFFFFFFFFFFFFFF7 || v19 - (char *)v11 + 8 > v12)
        {
          v94 = 0;
        }
        else
        {
          *(_QWORD *)v19 = v14;
          v95 = v19 - (char *)v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v93, a2);
      if (v94)
      {
        v21 = v95;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v95 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = v8 + 11;
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v90) = 16;
          v91 = 1;
LABEL_48:
          v92 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_129;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = (uint64_t *)(v36 - 1);
          if (v38 < v36 - 1)
            goto LABEL_129;
        }
        else
        {
          v11 = (uint64_t *)v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = IPC::Decoder::Decoder(v39, v12, (unint64_t)v11, v8[6]);
        if (*(_WORD *)(v40 + 50) != 2821)
        {
          v90 = (uint64_t *)v40;
          v91 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder((IPC::Decoder *)v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v97, v14, 0xE05u, (uint64_t)&v87, a5);
        LOBYTE(v90) = 0;
        v91 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v90, (uint64_t)&v87);
        v92 = 1;
        if ((_DWORD)v88 != -1)
          ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v88])(&v98, &v87);
      }
      else
      {
        LOBYTE(v90) = 0;
        v92 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v97);
      if (!v92)
      {
        LOBYTE(v79) = 0;
        v83 = 0;
        goto LABEL_66;
      }
      if (v91 == 1)
      {
        LOBYTE(v79) = (_BYTE)v90;
        v44 = 1;
        v82 = 1;
        v83 = 1;
LABEL_65:
        ((void (*)(uint64_t **, uint64_t **))off_1E34E3480[v44])(&v93, &v90);
        goto LABEL_66;
      }
      if (v91)
        goto LABEL_135;
      LOBYTE(v87) = 0;
      v89 = 0;
      IPC::Decoder::operator>><std::tuple<WebCore::GraphicsContextGLActiveInfo>>(v90, (uint64_t)&v87);
      if (v89)
      {
        if (!v92)
          goto LABEL_129;
        if (v91)
          goto LABEL_135;
        v43 = v90;
        v90 = 0;
        v93 = v43;
        v94 = v87;
        v95 = v88;
        v96 = 0;
        LOBYTE(v79) = 0;
        v82 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v93);
        v83 = 1;
        if (v96 != -1)
          ((void (*)(char *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v96])(&v98, &v93);
      }
      else
      {
        LOBYTE(v79) = 13;
        v82 = 1;
        v83 = 1;
      }
      if (v92)
      {
        v44 = v91;
        if (v91 != -1)
          goto LABEL_65;
      }
LABEL_66:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v97);
      if (v83)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 24) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v83)
        {
          if (v82 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v82])(&v93, &v79);
        }
        return result;
      }
      if (v86)
        break;
LABEL_129:
      __break(1u);
LABEL_130:
      v12 = 0;
      v17 = 0;
      v94 = 0;
    }
    v45 = ((unint64_t)v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = v45 - (_QWORD)v84;
    if (v45 < (unint64_t)v84)
    {
      v47 = 0;
    }
    else
    {
      v47 = 0;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v46 + 2 <= v85)
      {
        *(_WORD *)((char *)v84 + v46) = 2821;
        v47 = v46 + 2;
      }
    }
    v48 = v8[8];
    v49 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v50 = v8[7];
    if (v49 + 16 >= v50)
      v49 = 0;
    if (v47 <= 0x10)
      v47 = 16;
    v51 = v49 + v47;
    if (v50 <= v51)
      v51 = 0;
    v8[9] = v51;
    v52 = (unint64_t *)(*(_QWORD *)(v48 + 16) + 128);
    do
      __ldaxr(v52);
    while (__stlxr(v51, v52));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v97, v13);
    v8 = (uint64_t *)v97;
    v90 = 0;
    IPC::Connection::createSyncMessageEncoder(3589, (uint64_t)v6, (uint64_t *)&v90, (uint64_t *)&v87);
    v6 = v87;
    v13 = (uint64_t **)*a2;
    *(_DWORD *)IPC::Encoder::grow(v87, 4uLL, 4) = (_DWORD)v13;
    a2 = (unsigned int *)a2[1];
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = (_DWORD)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v90, (uint64_t *)&v87, 0, (uint64_t)&v93, a5);
    if ((_DWORD)v94)
    {
      if ((_DWORD)v94 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v93;
        v53 = 1;
        *(_DWORD *)(a4 + 24) = 1;
        goto LABEL_90;
      }
      goto LABEL_135;
    }
    LOBYTE(v79) = 0;
    v81 = 0;
    IPC::Decoder::operator>><std::tuple<WebCore::GraphicsContextGLActiveInfo>>(v93, (uint64_t)&v79);
    if (!v81)
      break;
    v53 = (int)v94;
    if (!(_DWORD)v94)
    {
      v55 = v93;
      v93 = 0;
      v56 = v79;
      v57 = v80;
      *(_QWORD *)a4 = v55;
      *(_QWORD *)(a4 + 8) = v56;
      *(_QWORD *)(a4 + 16) = v57;
      *(_DWORD *)(a4 + 24) = 0;
      goto LABEL_90;
    }
LABEL_135:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_136:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 24) = 1;
  v53 = (int)v94;
  if ((_DWORD)v94 == -1)
    goto LABEL_91;
LABEL_90:
  ((void (*)(unint64_t *, uint64_t **))off_1E34E3480[v53])(&v79, &v93);
LABEL_91:
  v58 = v87;
  v87 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v54);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v97);
}

uint64_t *IPC::Decoder::operator>><std::tuple<WebCore::GraphicsContextGLActiveInfo>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD v14[2];
  unsigned __int8 v15;

  IPC::Decoder::decode<WebCore::GraphicsContextGLActiveInfo>((uint64_t)v14, a1);
  v6 = v15;
  if (v15)
  {
    v7 = (WTF::StringImpl *)v14[0];
    v2 = v14[1];
    v8 = 1;
  }
  else
  {
    v5 = (WTF::StringImpl *)*a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v9)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v10 + 16))(v10, v5);
    v8 = 0;
    v7 = 0;
  }
  if (*(unsigned __int8 *)(a2 + 16) == v8)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      v11 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v7;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v5);
        else
          *(_DWORD *)v11 -= 2;
      }
      *(_QWORD *)(a2 + 8) = v2;
      return a1;
    }
  }
  else
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v2;
      *(_BYTE *)(a2 + 16) = 1;
      return a1;
    }
    v12 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v5);
      else
        *(_DWORD *)v12 -= 2;
    }
    *(_BYTE *)(a2 + 16) = 0;
  }
  if (v6 && v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3A18[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
  a2[2] = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PauseTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;

  if (*(_QWORD *)(a1 + 48) == a4)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v21 = v53;
  v20 = v54;
  v22 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v53;
  if (v22 >= v53)
  {
    v24 = v23 + 2;
    if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v24 <= v54)
    {
      *(_WORD *)(v53 + v23) = 2822;
      goto LABEL_31;
    }
    v20 = 0;
  }
  v24 = 0;
LABEL_31:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      return 17;
    *v26 = a4;
  }
  if (!v20)
    return 17;
  v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(a1 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(a1 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(a1 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(a1 + 108) = v35;
    if (v35 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a4;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v7 = v54;
  v8 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v9 = v8 - v53;
  if (v8 < v53)
  {
    v10 = 0;
    if (v54)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v54)
      goto LABEL_62;
    *(_WORD *)(v53 + v9) = 998;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(a1 + 64);
      v13 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(a1 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(a1 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v19 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v19;
    }
  }
  if (!v55)
  {
    __break(1u);
LABEL_81:
    v38 = 0;
    goto LABEL_68;
  }
LABEL_62:
  v36 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v37 = v36 - v53;
  if (v36 < v53)
    goto LABEL_81;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v54)
    goto LABEL_81;
  *(_WORD *)(v53 + v37) = 2821;
LABEL_68:
  v40 = *(_QWORD *)(a1 + 64);
  v41 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(a1 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(a1 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
  v45 = v52;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 998;
  *(_QWORD *)(v46 + 8) = a4;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v56 = (IPC::Encoder *)v46;
  v19 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v56, 1, 0);
  v48 = v56;
  v56 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ResumeTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;

  if (*(_QWORD *)(a1 + 48) == a4)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v21 = v53;
  v20 = v54;
  v22 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v53;
  if (v22 >= v53)
  {
    v24 = v23 + 2;
    if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v24 <= v54)
    {
      *(_WORD *)(v53 + v23) = 2822;
      goto LABEL_31;
    }
    v20 = 0;
  }
  v24 = 0;
LABEL_31:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      return 17;
    *v26 = a4;
  }
  if (!v20)
    return 17;
  v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(a1 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(a1 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(a1 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(a1 + 108) = v35;
    if (v35 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a4;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v7 = v54;
  v8 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v9 = v8 - v53;
  if (v8 < v53)
  {
    v10 = 0;
    if (v54)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v54)
      goto LABEL_62;
    *(_WORD *)(v53 + v9) = 1011;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(a1 + 64);
      v13 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(a1 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(a1 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v19 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v19;
    }
  }
  if (!v55)
  {
    __break(1u);
LABEL_81:
    v38 = 0;
    goto LABEL_68;
  }
LABEL_62:
  v36 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v37 = v36 - v53;
  if (v36 < v53)
    goto LABEL_81;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v54)
    goto LABEL_81;
  *(_WORD *)(v53 + v37) = 2821;
LABEL_68:
  v40 = *(_QWORD *)(a1 + 64);
  v41 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(a1 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(a1 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
  v45 = v52;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1011;
  *(_QWORD *)(v46 + 8) = a4;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v56 = (IPC::Encoder *)v46;
  v19 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v56, 1, 0);
  v48 = v56;
  v56 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBufferBase,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 887;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 887;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBufferRange,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 888;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v77 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v77 = v9;
      }
      v28 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= v77)
        {
          *(_QWORD *)(v8 + v30) = *((_QWORD *)a2 + 2);
          v76 = v77;
          v12 = v30 + 8;
        }
      }
      else
      {
        v76 = v77;
      }
      v31 = (_QWORD *)((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 8);
        if ((unint64_t)(v32 + 8) > v76)
          goto LABEL_48;
        *v31 = *((_QWORD *)a2 + 3);
      }
      if (v76)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 888;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = *((_QWORD *)a2 + 2);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 8uLL, 8) = v54;
        v55 = *((_QWORD *)a2 + 3);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 8uLL, 8) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v76 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v76 + v63)
      {
        v63 = (unint64_t)v65 - v76 + 8;
        if ((unint64_t)v65 - v76 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v76 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformIndices,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  uint64_t *v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL8 v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  void *v47;
  uint64_t *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  int v58;
  void *v59;
  uint64_t *v60;
  unint64_t v61;
  IPC::Encoder *v62;
  WTF *v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  char v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  int v86;
  char v87;
  uint64_t *v88;
  unint64_t v89;
  char v90;
  IPC::Encoder *v91;
  unint64_t v92;
  char v93;
  uint64_t *v94;
  int v95;
  char v96;
  uint64_t *v97;
  IPC::Encoder *v98;
  unint64_t v99;
  int v100;
  IPC::Decoder *v101;
  char v102;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v83, a5);
  if (!v85)
    goto LABEL_126;
  v66 = v83;
  v65 = v84;
  v67 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v68 = v67 - v83;
  if (v67 >= v83)
  {
    v69 = v68 + 2;
    if (v68 <= 0xFFFFFFFFFFFFFFFDLL && v69 <= v84)
    {
      *(_WORD *)(v83 + v68) = 2822;
      goto LABEL_105;
    }
    v65 = 0;
  }
  v69 = 0;
LABEL_105:
  v71 = (_QWORD *)((v66 + v69 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v71 >= v66 + v69)
  {
    v69 = (unint64_t)v71 - v66 + 8;
    if ((unint64_t)v71 - v66 > 0xFFFFFFFFFFFFFFF7 || v69 > v65)
      goto LABEL_139;
    *v71 = v6;
  }
  if (!v65)
  {
LABEL_139:
    v81 = 17;
    goto LABEL_127;
  }
  v73 = v8[8];
  v74 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v75 = v8[7];
  if (v74 + 16 >= v75)
    v74 = 0;
  if (v69 <= 0x10)
    v69 = 16;
  v76 = v74 + v69;
  if (v75 <= v76)
    v76 = 0;
  v8[9] = v76;
  v77 = (unint64_t *)(*(_QWORD *)(v73 + 16) + 128);
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v76, v77));
  v79 = *((_DWORD *)v8 + 27);
  if (v78 == 0x80000000 || v79 != 0)
  {
    v82 = v79 + 1;
    *((_DWORD *)v8 + 27) = v82;
    if (v82 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v88, a5);
  if (!v90)
  {
LABEL_126:
    v81 = 15;
LABEL_127:
    *(_BYTE *)a4 = v81;
    *(_DWORD *)(a4 + 24) = 1;
    return result;
  }
  v11 = v88;
  v12 = v89;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v101, v14))
  {
    LOBYTE(v97) = 11;
    v14 = 1;
    v100 = 1;
    LOBYTE(v83) = 0;
    v86 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v83, (uint64_t)&v97);
    v87 = 1;
    if (v100 != -1)
      ((void (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v94, &v97);
    goto LABEL_70;
  }
  v97 = v11;
  v98 = (IPC::Encoder *)v12;
  v99 = 0;
  v15 = ((unint64_t)v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - (_QWORD)v11;
  if (v15 < (unint64_t)v11)
    goto LABEL_141;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_134;
  *(_WORD *)((char *)v11 + v16) = 3592;
  v99 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = ((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
      v20 = v19 - ((_QWORD)v11 + v17);
      if (v19 >= (unint64_t)v11 + v17)
      {
        v21 = v19 - (_QWORD)v11;
        v22 = v20 + v17 + 8;
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
        {
          v12 = 0;
          v98 = 0;
        }
        else
        {
          *(uint64_t *)((char *)v11 + v21) = v14;
          v99 = v22;
          v17 = v22;
        }
      }
      v24 = (char *)(((unint64_t)v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v24 >= (char *)v11 + v17)
      {
        v25 = v24 - (char *)v11;
        if ((unint64_t)(v24 - (char *)v11) > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > v12)
        {
          v98 = 0;
        }
        else
        {
          *(_DWORD *)v24 = *a2;
          v99 = v25 + 4;
        }
      }
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v97, *((_QWORD *)a2 + 1));
      if (v98)
      {
        v26 = v99;
        v27 = v8[8];
        v28 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = v8[7];
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v99 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v31 = 0;
        else
          v31 = v30;
        v8[9] = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = v8 + 11;
        v12 = 0x80000000;
        while (1)
        {
          v34 = *(unint64_t **)(v8[8] + 16);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(0x80000000uLL, v34));
          v36 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v35 | v36 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v37 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v37)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v37);
              if (v38 < a5)
                continue;
            }
          }
          LOBYTE(v94) = 16;
          v95 = 1;
LABEL_52:
          v96 = 1;
          goto LABEL_53;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v39 = v8[8];
        v40 = *(_QWORD *)(v39 + 8);
        if (v40 <= 0xFF)
          goto LABEL_133;
        v41 = v8[7];
        v42 = *(_QWORD *)(v39 + 16);
        v43 = v40 - 256;
        if (v41)
        {
          v11 = (uint64_t *)(v41 - 1);
          if (v43 < v41 - 1)
            goto LABEL_133;
        }
        else
        {
          v11 = (uint64_t *)v43;
        }
        v12 = v42 + 256;
        v44 = WTF::fastMalloc((WTF *)0x48);
        v45 = IPC::Decoder::Decoder(v44, v12, (unint64_t)v11, v8[6]);
        if (*(_WORD *)(v45 + 50) != 2821)
        {
          v94 = (uint64_t *)v45;
          v95 = 0;
          goto LABEL_52;
        }
        IPC::Decoder::~Decoder((IPC::Decoder *)v45);
        WTF::fastFree(v46, v47);
        IPC::Connection::waitForSyncReply((uint64_t)v101, v14, 0xE08u, (uint64_t)&v91, a5);
        LOBYTE(v94) = 0;
        v95 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v94, (uint64_t)&v91);
        v96 = 1;
        if ((_DWORD)v92 != -1)
          ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v92])(&v102, &v91);
      }
      else
      {
        LOBYTE(v94) = 0;
        v96 = 0;
      }
LABEL_53:
      IPC::Connection::popPendingSyncRequestID(v101);
      if (!v96)
      {
        LOBYTE(v83) = 0;
        v87 = 0;
        goto LABEL_70;
      }
      if (v95 == 1)
      {
        LOBYTE(v83) = (_BYTE)v94;
        v49 = 1;
        v86 = 1;
        v87 = 1;
LABEL_69:
        ((void (*)(uint64_t **, uint64_t **))off_1E34E3480[v49])(&v97, &v94);
        goto LABEL_70;
      }
      if (v95)
        goto LABEL_140;
      LOBYTE(v91) = 0;
      v93 = 0;
      IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v94, (uint64_t)&v91);
      if (v93)
      {
        if (!v96)
          goto LABEL_133;
        if (v95)
          goto LABEL_140;
        v48 = v94;
        v94 = 0;
        v97 = v48;
        v98 = v91;
        v99 = v92;
        v100 = 0;
        LOBYTE(v83) = 0;
        v86 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v83, (uint64_t)&v97);
        v87 = 1;
        if (v100 != -1)
          ((void (*)(char *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v102, &v97);
      }
      else
      {
        LOBYTE(v83) = 13;
        v86 = 1;
        v87 = 1;
      }
      if (v96)
      {
        v49 = v95;
        if (v95 != -1)
          goto LABEL_69;
      }
LABEL_70:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
      if (v87)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 24) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v83);
        if (v87)
        {
          if (v86 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v86])(&v97, &v83);
        }
        return result;
      }
      if (v90)
        break;
LABEL_133:
      __break(1u);
LABEL_134:
      v12 = 0;
      v17 = 0;
      v98 = 0;
    }
    v50 = ((unint64_t)v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v50 - (_QWORD)v88;
    if (v50 < (unint64_t)v88)
    {
      v52 = 0;
    }
    else
    {
      v52 = 0;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v51 + 2 <= v89)
      {
        *(_WORD *)((char *)v88 + v51) = 2821;
        v52 = v51 + 2;
      }
    }
    v53 = v8[8];
    v54 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v55 = v8[7];
    if (v54 + 16 >= v55)
      v54 = 0;
    if (v52 <= 0x10)
      v52 = 16;
    v56 = v54 + v52;
    if (v55 <= v56)
      v56 = 0;
    v8[9] = v56;
    v57 = (unint64_t *)(*(_QWORD *)(v53 + 16) + 128);
    do
      __ldaxr(v57);
    while (__stlxr(v56, v57));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, v13);
    v8 = (uint64_t *)v101;
    v94 = 0;
    IPC::Connection::createSyncMessageEncoder(3592, (uint64_t)v6, (uint64_t *)&v94, (uint64_t *)&v91);
    v6 = v91;
    v13 = (uint64_t **)*a2;
    *(_DWORD *)IPC::Encoder::grow(v91, 4uLL, 4) = (_DWORD)v13;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v6, *((_QWORD *)a2 + 1));
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v94, (uint64_t *)&v91, 0, (uint64_t)&v97, a5);
    if ((_DWORD)v98)
    {
      if ((_DWORD)v98 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v97;
        v58 = 1;
        *(_DWORD *)(a4 + 24) = 1;
        goto LABEL_94;
      }
      goto LABEL_140;
    }
    LOBYTE(v83) = 0;
    v85 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v97, (uint64_t)&v83);
    if (!v85)
      break;
    v58 = (int)v98;
    if (!(_DWORD)v98)
    {
      v60 = v97;
      v97 = 0;
      v61 = v83;
      *(_QWORD *)a4 = v60;
      *(_QWORD *)(a4 + 8) = v61;
      *(_QWORD *)(a4 + 16) = v84;
      *(_DWORD *)(a4 + 24) = 0;
      goto LABEL_94;
    }
LABEL_140:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_141:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 24) = 1;
  v58 = (int)v98;
  if ((_DWORD)v98 == -1)
    goto LABEL_95;
LABEL_94:
  ((void (*)(unint64_t *, uint64_t **))off_1E34E3480[v58])(&v83, &v97);
LABEL_95:
  v62 = v91;
  v91 = 0;
  if (v62)
  {
    IPC::Encoder::~Encoder(v62, v59);
    WTF::fastFree(v63, v64);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1, uint64_t a2)
{
  void *v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v13;
  uint64_t v14;
  unsigned __int8 v15;

  IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v13);
  if (*(unsigned __int8 *)(a2 + 16) == v15)
  {
    if (!*(_BYTE *)(a2 + 16))
      return a1;
    v5 = *(WTF **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v5, v4);
    }
    v6 = v13;
    v13 = 0;
    *(_QWORD *)a2 = v6;
    v7 = v14;
    HIDWORD(v14) = 0;
    *(_QWORD *)(a2 + 8) = v7;
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    v8 = *(WTF **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v8, v4);
    }
    *(_BYTE *)(a2 + 16) = 0;
  }
  else
  {
    v9 = v13;
    v13 = 0;
    *(_QWORD *)a2 = v9;
    v10 = v14;
    HIDWORD(v14) = 0;
    *(_QWORD *)(a2 + 8) = v10;
    *(_BYTE *)(a2 + 16) = 1;
  }
  if (v15)
  {
    v11 = v13;
    if (v13)
    {
      v13 = 0;
      LODWORD(v14) = 0;
      WTF::fastFree(v11, v4);
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3A28[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniforms,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, const void ***a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  uint64_t *v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL8 v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  void *v61;
  uint64_t *v62;
  unint64_t v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v73;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  int v81;
  char v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  int v88;
  char v89;
  uint64_t *v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  unint64_t v94;
  char v95;
  uint64_t *v96;
  int v97;
  char v98;
  char *v99;
  IPC::Encoder *v100;
  unint64_t v101;
  int v102;
  IPC::Decoder *v103;
  char v104;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v85, a5);
  if (!v87)
    goto LABEL_130;
  v68 = v85;
  v67 = v86;
  v69 = (v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v70 = v69 - v85;
  if (v69 >= v85)
  {
    v71 = v70 + 2;
    if (v70 <= 0xFFFFFFFFFFFFFFFDLL && v71 <= v86)
    {
      *(_WORD *)(v85 + v70) = 2822;
      goto LABEL_109;
    }
    v67 = 0;
  }
  v71 = 0;
LABEL_109:
  v73 = (_QWORD *)((v68 + v71 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v73 >= v68 + v71)
  {
    v71 = (unint64_t)v73 - v68 + 8;
    if ((unint64_t)v73 - v68 > 0xFFFFFFFFFFFFFFF7 || v71 > v67)
      goto LABEL_143;
    *v73 = v6;
  }
  if (!v67)
  {
LABEL_143:
    v83 = 17;
    goto LABEL_131;
  }
  v75 = v8[8];
  v76 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v77 = v8[7];
  if (v76 + 16 >= v77)
    v76 = 0;
  if (v71 <= 0x10)
    v71 = 16;
  v78 = v76 + v71;
  if (v77 <= v78)
    v78 = 0;
  v8[9] = v78;
  v79 = (unint64_t *)(*(_QWORD *)(v75 + 16) + 128);
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v78, v79));
  v81 = *((_DWORD *)v8 + 27);
  if (v80 == 0x80000000 || v81 != 0)
  {
    v84 = v81 + 1;
    *((_DWORD *)v8 + 27) = v84;
    if (v84 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v83 = 15;
LABEL_131:
    *(_BYTE *)a4 = v83;
    *(_DWORD *)(a4 + 24) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v103, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v103, v14))
  {
    LOBYTE(v99) = 11;
    v14 = 1;
    v102 = 1;
    LOBYTE(v85) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)&v99);
    v89 = 1;
    if (v102 != -1)
      ((void (*)(uint64_t **, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v102])(&v96, &v99);
    goto LABEL_74;
  }
  v99 = (char *)v11;
  v100 = (IPC::Encoder *)v12;
  v101 = 0;
  v15 = ((unint64_t)v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - (_QWORD)v11;
  if (v15 < (unint64_t)v11)
    goto LABEL_145;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)((char *)v11 + v16) = 3555;
  v101 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = ((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
      v20 = v19 - ((_QWORD)v11 + v17);
      if (v19 >= (unint64_t)v11 + v17)
      {
        v21 = v19 - (_QWORD)v11;
        v22 = v20 + v17 + 8;
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
        {
          v12 = 0;
          v100 = 0;
        }
        else
        {
          *(uint64_t *)((char *)v11 + v21) = v14;
          v101 = v22;
          v17 = v22;
        }
      }
      v24 = (char *)(((unint64_t)v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v24 >= (char *)v11 + v17)
      {
        v25 = v24 - (char *)v11;
        if ((unint64_t)(v24 - (char *)v11) > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > v12)
        {
          v100 = 0;
        }
        else
        {
          *(_DWORD *)v24 = *(_DWORD *)a2;
          v101 = v25 + 4;
        }
      }
      IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v99, *a2[1], *((unsigned int *)a2[1] + 3));
      v26 = v101;
      v27 = (char *)((unint64_t)&v99[v101 + 3] & 0xFFFFFFFFFFFFFFFCLL);
      if (v27 >= &v99[v101])
      {
        v28 = v27 - v99;
        if ((unint64_t)(v27 - v99) > 0xFFFFFFFFFFFFFFFBLL || (v26 = v28 + 4, v28 + 4 > (unint64_t)v100))
        {
LABEL_50:
          LOBYTE(v96) = 0;
          v98 = 0;
          goto LABEL_57;
        }
        *(_DWORD *)v27 = *((_DWORD *)a2 + 4);
        v101 = v28 + 4;
      }
      if (!v100)
        goto LABEL_50;
      v29 = v8[8];
      v30 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
      v31 = v8[7];
      if (v30 + 16 >= v31)
        v30 = 0;
      if (v26 <= 0x10)
        v26 = 16;
      v32 = v30 + v26;
      if (v31 <= v32)
        v33 = 0;
      else
        v33 = v32;
      v8[9] = v33;
      v34 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v33, v34));
      if (v35 == 0x80000000 || *((_DWORD *)v8 + 27))
      {
        if (*((_BYTE *)v8 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
        *((_DWORD *)v8 + 27) = 0;
      }
      v11 = v8 + 11;
      v12 = 0x80000000;
      while (1)
      {
        v36 = *(unint64_t **)(v8[8] + 16);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(0x80000000uLL, v36));
        v38 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
        if (!(v37 | v38 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*((_BYTE *)v8 + 96))
        {
          v39 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
          if (v39)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v39);
            if (v40 < a5)
              continue;
          }
        }
        LOBYTE(v96) = 16;
        v97 = 1;
LABEL_56:
        v98 = 1;
        goto LABEL_57;
      }
      atomic_store(0, *(unint64_t **)(v8[8] + 16));
      v8[9] = 0;
      v41 = v8[8];
      v42 = *(_QWORD *)(v41 + 8);
      if (v42 <= 0xFF)
        goto LABEL_137;
      v43 = v8[7];
      v44 = *(_QWORD *)(v41 + 16);
      v45 = v42 - 256;
      if (v43)
      {
        v11 = (uint64_t *)(v43 - 1);
        if (v45 < v43 - 1)
          goto LABEL_137;
      }
      else
      {
        v11 = (uint64_t *)v45;
      }
      v12 = v44 + 256;
      v46 = WTF::fastMalloc((WTF *)0x48);
      v47 = IPC::Decoder::Decoder(v46, v12, (unint64_t)v11, v8[6]);
      if (*(_WORD *)(v47 + 50) != 2821)
      {
        v96 = (uint64_t *)v47;
        v97 = 0;
        goto LABEL_56;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v47);
      WTF::fastFree(v48, v49);
      IPC::Connection::waitForSyncReply((uint64_t)v103, v14, 0xDE3u, (uint64_t)&v93, a5);
      LOBYTE(v96) = 0;
      v97 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
      v98 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v104, &v93);
LABEL_57:
      IPC::Connection::popPendingSyncRequestID(v103);
      if (!v98)
      {
        LOBYTE(v85) = 0;
        v89 = 0;
        goto LABEL_74;
      }
      if (v97 == 1)
      {
        LOBYTE(v85) = (_BYTE)v96;
        v51 = 1;
        v88 = 1;
        v89 = 1;
LABEL_73:
        ((void (*)(char **, uint64_t **))off_1E34E3480[v51])(&v99, &v96);
        goto LABEL_74;
      }
      if (v97)
        goto LABEL_144;
      LOBYTE(v93) = 0;
      v95 = 0;
      IPC::Decoder::operator>><std::tuple<WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v96, (uint64_t)&v93);
      if (v95)
      {
        if (!v98)
          goto LABEL_137;
        if (v97)
          goto LABEL_144;
        v50 = v96;
        v96 = 0;
        v99 = (char *)v50;
        v100 = v93;
        v101 = v94;
        v102 = 0;
        LOBYTE(v85) = 0;
        v88 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)&v99);
        v89 = 1;
        if (v102 != -1)
          ((void (*)(char *, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v102])(&v104, &v99);
      }
      else
      {
        LOBYTE(v85) = 13;
        v88 = 1;
        v89 = 1;
      }
      if (v98)
      {
        v51 = v97;
        if (v97 != -1)
          goto LABEL_73;
      }
LABEL_74:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v103);
      if (v89)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 24) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v85);
        if (v89)
        {
          if (v88 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(char **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v99, &v85);
        }
        return result;
      }
      if (v92)
        break;
LABEL_137:
      __break(1u);
LABEL_138:
      v12 = 0;
      v17 = 0;
      v100 = 0;
    }
    v52 = ((unint64_t)v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v53 = v52 - (_QWORD)v90;
    if (v52 < (unint64_t)v90)
    {
      v54 = 0;
    }
    else
    {
      v54 = 0;
      if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
      {
        *(_WORD *)((char *)v90 + v53) = 2821;
        v54 = v53 + 2;
      }
    }
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v103, v13);
    v8 = (uint64_t *)v103;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3555, (uint64_t)v6, (uint64_t *)&v96, (uint64_t *)&v93);
    v6 = v93;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = (_DWORD)v13;
    IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v6, *a2[1], *((unsigned int *)a2[1] + 3));
    a2 = (const void ***)*((unsigned int *)a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = (_DWORD)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v99, a5);
    if ((_DWORD)v100)
    {
      if ((_DWORD)v100 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v99;
        v60 = 1;
        *(_DWORD *)(a4 + 24) = 1;
        goto LABEL_98;
      }
      goto LABEL_144;
    }
    LOBYTE(v85) = 0;
    v87 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)v99, (uint64_t)&v85);
    if (!v87)
      break;
    v60 = (int)v100;
    if (!(_DWORD)v100)
    {
      v62 = (uint64_t *)v99;
      v99 = 0;
      v63 = v85;
      *(_QWORD *)a4 = v62;
      *(_QWORD *)(a4 + 8) = v63;
      *(_QWORD *)(a4 + 16) = v86;
      *(_DWORD *)(a4 + 24) = 0;
      goto LABEL_98;
    }
LABEL_144:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 24) = 1;
  v60 = (int)v100;
  if ((_DWORD)v100 == -1)
    goto LABEL_99;
LABEL_98:
  ((void (*)(unint64_t *, char **))off_1E34E3480[v60])(&v85, &v99);
LABEL_99:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v61);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v103);
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v6;
  void *v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  int v18;
  int v19;
  int *v20[2];
  unsigned __int8 v21;

  IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>(a1, (uint64_t)v20);
  v6 = v21;
  if (v21)
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v17, v20[0], (unint64_t)v20[1]);
    v8 = v17;
    v9 = 1;
    v3 = v18;
    v2 = v19;
  }
  else
  {
    v7 = (void *)*a1;
    v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11 && v10)
    {
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v11 + 16))(v11, v7);
      v8 = 0;
      v9 = 0;
      v7 = (void *)*a1;
      v15 = a1[1];
      v16 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v16 && v15)
      {
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v16 + 16))(v16, v7);
        v9 = 0;
        v8 = 0;
      }
    }
    else
    {
      v9 = 0;
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
    }
  }
  if (*(unsigned __int8 *)(a2 + 16) == v9)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      v12 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
        WTF::fastFree(v12, v7);
      }
      *(_QWORD *)a2 = v8;
      *(_DWORD *)(a2 + 8) = v3;
      *(_DWORD *)(a2 + 12) = v2;
      return a1;
    }
  }
  else
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = v8;
      *(_DWORD *)(a2 + 8) = v3;
      *(_DWORD *)(a2 + 12) = v2;
      *(_BYTE *)(a2 + 16) = 1;
      return a1;
    }
    v13 = *(WTF **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v13, v7);
    }
    *(_BYTE *)(a2 + 16) = 0;
  }
  if (v6 && v8)
    WTF::fastFree(v8, v7);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3A38[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v66;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  char v76;
  unsigned int v77;
  uint64_t *v78;
  unint64_t v79;
  int v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  IPC::Encoder *v85;
  int v86;
  char v87;
  IPC::Decoder *v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v78, a5);
  if (!(_BYTE)v80)
    goto LABEL_125;
  v61 = v78;
  v60 = v79;
  v62 = ((unint64_t)v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v62 - (_QWORD)v78;
  if (v62 >= (unint64_t)v78)
  {
    v64 = v63 + 2;
    if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v79)
    {
      *(_WORD *)((char *)v78 + v63) = 2822;
      goto LABEL_104;
    }
    v60 = 0;
  }
  v64 = 0;
LABEL_104:
  v66 = (char *)(((unint64_t)v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v66 >= (char *)v61 + v64)
  {
    v64 = v66 - (char *)v61 + 8;
    if ((unint64_t)(v66 - (char *)v61) > 0xFFFFFFFFFFFFFFF7 || v64 > v60)
      goto LABEL_137;
    *(_QWORD *)v66 = v6;
  }
  if (!v60)
  {
LABEL_137:
    v76 = 17;
    goto LABEL_126;
  }
  v68 = v8[8];
  v69 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v70 = v8[7];
  if (v69 + 16 >= v70)
    v69 = 0;
  if (v64 <= 0x10)
    v64 = 16;
  v71 = v69 + v64;
  if (v70 <= v71)
    v71 = 0;
  v8[9] = v71;
  v72 = (unint64_t *)(*(_QWORD *)(v68 + 16) + 128);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v71, v72));
  v74 = *((_DWORD *)v8 + 27);
  if (v73 == 0x80000000 || v74 != 0)
  {
    v77 = v74 + 1;
    *((_DWORD *)v8 + 27) = v77;
    if (v77 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v82, a5);
  if (!v84)
  {
LABEL_125:
    v76 = 15;
LABEL_126:
    *(_BYTE *)a4 = v76;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v82;
  v12 = v83;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v88, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v88, v14))
  {
    LOBYTE(v91) = 11;
    v14 = 1;
    LODWORD(v93) = 1;
    LOBYTE(v78) = 0;
    v80 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v78, (uint64_t)&v91);
    v81 = 1;
    if ((_DWORD)v93 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v93])(&v85, &v91);
    goto LABEL_67;
  }
  v91 = v11;
  v92 = v12;
  v93 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3591;
  v93 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v92 = 0;
        }
        else
        {
          *v19 = v14;
          v93 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(&v91, a2);
      if (v92)
      {
        v21 = v93;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v93 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v85) = 16;
          v86 = 1;
LABEL_48:
          v87 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v85 = v40;
          v86 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v88, v14, 0xE07u, (uint64_t)&v89, a5);
        LOBYTE(v85) = 0;
        v86 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)&v89);
        v87 = 1;
        if (v90 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v90])(&v94, &v89);
      }
      else
      {
        LOBYTE(v85) = 0;
        v87 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v88);
      if (!v87)
      {
        LOBYTE(v78) = 0;
        v81 = 0;
        goto LABEL_64;
      }
      if (v86 == 1)
      {
        v45 = (char)v85;
LABEL_63:
        LOBYTE(v78) = v45;
        v80 = 1;
        v81 = 1;
        goto LABEL_64;
      }
      if (v86)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v85);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v87)
        goto LABEL_132;
      if (v86)
        goto LABEL_138;
      v44 = v85;
      v85 = 0;
      v91 = (uint64_t)v44;
      LODWORD(v92) = v43;
      LODWORD(v93) = 0;
      LOBYTE(v78) = 0;
      v80 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v78, (uint64_t)&v91);
      v81 = 1;
      if ((_DWORD)v93 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v93])(&v89, &v91);
LABEL_64:
      if (v87 && v86 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v86])(&v91, &v85);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v88);
      if (v81)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v78);
        if (v81)
        {
          if (v80 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v91, &v78);
        }
        return result;
      }
      if (v84)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v92 = 0;
    }
    v46 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v82;
    if (v46 < v82)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v83)
      {
        *(_WORD *)(v82 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v89, v13);
    v8 = v89;
    v91 = 0;
    IPC::Connection::createSyncMessageEncoder(3591, (uint64_t)v6, &v91, (uint64_t *)&v85);
    v6 = v85;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v85, 4uLL, 4) = (_DWORD)v13;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v6, *(uint64_t **)(a2 + 8));
    IPC::Connection::sendSyncMessage((uint64_t)v8, v91, (uint64_t *)&v85, 0, (uint64_t)&v78, a5);
    a2 = v79;
    if ((_DWORD)v79)
    {
      if ((_DWORD)v79 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v78;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v54 = IPC::Decoder::decode<std::tuple<float>>(v78);
    if ((v54 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v79)
    {
      v56 = v78;
      v78 = 0;
      *(_QWORD *)a4 = v56;
      *(_DWORD *)(a4 + 8) = v54;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v88, &v78);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v79;
  if ((_DWORD)v79 != -1)
    goto LABEL_91;
LABEL_92:
  v57 = v85;
  v85 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v55);
    WTF::fastFree(v58, v59);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3A48[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  WTF::StringImpl *v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  WTF::StringImpl *v43;
  IPC::Encoder *v44;
  WTF::StringImpl *v45;
  IPC::Encoder *v46;
  int v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v54;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  int v73;
  void *v74;
  uint64_t *v75;
  WTF::StringImpl *v76;
  IPC::Encoder *v77;
  WTF *v78;
  void *v79;
  unsigned int v80;
  uint64_t *v81;
  unint64_t v82;
  int v83;
  char v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  char v87;
  uint64_t *v88;
  int v89;
  char v90;
  IPC::Decoder *v91;
  IPC::Encoder *v92;
  int v93;
  WTF::StringImpl *v94;
  unint64_t v95;
  unint64_t v96;
  char v97;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v81, a5);
  if (!(_BYTE)v83)
    goto LABEL_95;
  v49 = v81;
  v48 = v82;
  v50 = ((unint64_t)v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = v50 - (_QWORD)v81;
  if (v50 >= (unint64_t)v81)
  {
    v52 = v51 + 2;
    if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v82)
    {
      *(_WORD *)((char *)v81 + v51) = 2822;
      goto LABEL_74;
    }
    v48 = 0;
  }
  v52 = 0;
LABEL_74:
  v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v54 >= (char *)v49 + v52)
  {
    v52 = v54 - (char *)v49 + 8;
    if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48)
      goto LABEL_139;
    *(_QWORD *)v54 = v6;
  }
  if (!v48)
  {
LABEL_139:
    v64 = 17;
    goto LABEL_96;
  }
  v56 = v8[8];
  v57 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v8[7];
  if (v57 + 16 >= v58)
    v57 = 0;
  if (v52 <= 0x10)
    v52 = 16;
  v59 = v57 + v52;
  if (v58 <= v59)
    v59 = 0;
  v8[9] = v59;
  v60 = (unint64_t *)(*(_QWORD *)(v56 + 16) + 128);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v59, v60));
  v62 = *((_DWORD *)v8 + 27);
  if (v61 == 0x80000000 || v62 != 0)
  {
    v80 = v62 + 1;
    *((_DWORD *)v8 + 27) = v80;
    if (v80 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v85, a5);
  if (!v87)
  {
LABEL_95:
    v64 = 15;
LABEL_96:
    *(_BYTE *)a4 = v64;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v85;
  v12 = v86;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v91, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v91, v14))
  {
    LOBYTE(v94) = 11;
    v14 = 1;
    LODWORD(v96) = 1;
    LOBYTE(v81) = 0;
    v83 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v81, (uint64_t)&v94);
    v84 = 1;
    if ((_DWORD)v96 != -1)
      ((void (*)(uint64_t **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v96])(&v88, &v94);
    goto LABEL_101;
  }
  v94 = v11;
  v95 = v12;
  v96 = 0;
  v15 = ((unint64_t)v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - (_QWORD)v11;
  if (v15 < (unint64_t)v11)
    goto LABEL_141;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_135;
  *(_WORD *)((char *)v11 + v16) = 3553;
  v96 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (char *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v19 >= (char *)v11 + v17)
      {
        if ((unint64_t)(v19 - (char *)v11) > 0xFFFFFFFFFFFFFFF7 || v19 - (char *)v11 + 8 > v12)
        {
          v95 = 0;
        }
        else
        {
          *(_QWORD *)v19 = v14;
          v96 = v19 - (char *)v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v94, a2);
      if (v95)
      {
        v21 = v96;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v96 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (WTF::StringImpl *)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v88) = 16;
          v89 = 1;
LABEL_48:
          v90 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_134;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = (WTF::StringImpl *)(v36 - 1);
          if (v38 < v36 - 1)
            goto LABEL_134;
        }
        else
        {
          v11 = (WTF::StringImpl *)v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = IPC::Decoder::Decoder(v39, v12, (unint64_t)v11, v8[6]);
        if (*(_WORD *)(v40 + 50) != 2821)
        {
          v88 = (uint64_t *)v40;
          v89 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder((IPC::Decoder *)v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v91, v14, 0xDE1u, (uint64_t)&v92, a5);
        LOBYTE(v88) = 0;
        v89 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v88, (uint64_t)&v92);
        v90 = 1;
        if (v93 != -1)
          ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v93])(&v97, &v92);
      }
      else
      {
        LOBYTE(v88) = 0;
        v90 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v91);
      if (!v90)
      {
        LOBYTE(v81) = 0;
        v84 = 0;
        goto LABEL_101;
      }
      if (v89 == 1)
      {
        LOBYTE(v81) = (_BYTE)v88;
        v47 = 1;
        v83 = 1;
        v84 = 1;
LABEL_100:
        ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E3480[v47])(&v94, &v88);
        goto LABEL_101;
      }
      if (v89)
        goto LABEL_140;
      LOBYTE(v92) = 0;
      LOBYTE(v93) = 0;
      IPC::Decoder::operator>><std::tuple<WTF::String>>(v88, &v92);
      if ((_BYTE)v93)
      {
        if (!v90)
          goto LABEL_134;
        if (v89)
          goto LABEL_140;
        v43 = (WTF::StringImpl *)v88;
        v88 = 0;
        v44 = v92;
        v92 = 0;
        v94 = v43;
        v95 = (unint64_t)v44;
        LODWORD(v96) = 0;
        LOBYTE(v81) = 0;
        v83 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v81, (uint64_t)&v94);
        v84 = 1;
        if ((_DWORD)v96 != -1)
          ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v96])(&v97, &v94);
        if ((_BYTE)v93)
        {
          v46 = v92;
          v92 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v45);
            else
              *(_DWORD *)v46 -= 2;
          }
        }
      }
      else
      {
        LOBYTE(v81) = 13;
        v83 = 1;
        v84 = 1;
      }
      if (v90)
      {
        v47 = v89;
        if (v89 != -1)
          goto LABEL_100;
      }
LABEL_101:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v91);
      if (v84)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v81);
        if (v84)
        {
          if (v83 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(WTF::StringImpl **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v83])(&v94, &v81);
        }
        return result;
      }
      if (v87)
        break;
LABEL_134:
      __break(1u);
LABEL_135:
      v12 = 0;
      v17 = 0;
      v95 = 0;
    }
    v65 = ((unint64_t)v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v66 = v65 - (_QWORD)v85;
    if (v65 < (unint64_t)v85)
    {
      v67 = 0;
    }
    else
    {
      v67 = 0;
      if (v66 <= 0xFFFFFFFFFFFFFFFDLL && v66 + 2 <= v86)
      {
        *(_WORD *)((char *)v85 + v66) = 2821;
        v67 = v66 + 2;
      }
    }
    v68 = v8[8];
    v69 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v70 = v8[7];
    if (v69 + 16 >= v70)
      v69 = 0;
    if (v67 <= 0x10)
      v67 = 16;
    v71 = v69 + v67;
    if (v70 <= v71)
      v71 = 0;
    v8[9] = v71;
    v72 = (unint64_t *)(*(_QWORD *)(v68 + 16) + 128);
    do
      __ldaxr(v72);
    while (__stlxr(v71, v72));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v91, v13);
    v8 = (uint64_t *)v91;
    v88 = 0;
    IPC::Connection::createSyncMessageEncoder(3553, (uint64_t)v6, (uint64_t *)&v88, (uint64_t *)&v92);
    v6 = v92;
    v13 = (uint64_t **)*a2;
    *(_DWORD *)IPC::Encoder::grow(v92, 4uLL, 4) = (_DWORD)v13;
    a2 = (unsigned int *)a2[1];
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = (_DWORD)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v88, (uint64_t *)&v92, 0, (uint64_t)&v81, a5);
    if ((_DWORD)v82)
    {
      if ((_DWORD)v82 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v81;
        v73 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_125;
      }
      goto LABEL_140;
    }
    LOBYTE(v94) = 0;
    LOBYTE(v95) = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v81, &v94);
    if (!(_BYTE)v95)
      break;
    v73 = v82;
    if (!(_DWORD)v82)
    {
      v75 = v81;
      v81 = 0;
      v76 = v94;
      *(_QWORD *)a4 = v75;
      *(_QWORD *)(a4 + 8) = v76;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_125;
    }
LABEL_140:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_141:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  v73 = v82;
  if ((_DWORD)v82 == -1)
    goto LABEL_126;
LABEL_125:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E3480[v73])(&v94, &v81);
LABEL_126:
  v77 = v92;
  v92 = 0;
  if (v77)
  {
    IPC::Encoder::~Encoder(v77, v74);
    WTF::fastFree(v78, v79);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v91);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3A58[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformBlockBinding,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1064;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1064;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v21;
  unint64_t v22;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 4);
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = *(_DWORD *)(a2 + 8);
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (_QWORD *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v21 >= v2 + v3)
  {
    v22 = (unint64_t)v21 - v2 + 8;
    if ((unint64_t)v21 - v2 > 0xFFFFFFFFFFFFFFF7 || v22 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v21 = *(_QWORD *)(a2 + 16);
      result[2] = v22;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E33F0[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3A68[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

char *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *((_QWORD *)a2 + 2);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v7;
  return result;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl *v48;
  IPC::Encoder *v49;
  WTF::StringImpl *v50;
  IPC::Encoder *v51;
  int v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v59;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  int v78;
  void *v79;
  uint64_t *v80;
  WTF::StringImpl *v81;
  IPC::Encoder *v82;
  WTF *v83;
  void *v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  WTF::StringImpl *v93;
  IPC::Encoder *v94;
  int v95;
  IPC::Encoder *v96;
  char v97;
  WTF::StringImpl *v98;
  int v99;
  int v100;
  IPC::Decoder *v101;
  char v102;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_99;
  v54 = v86;
  v53 = v87;
  v55 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = v55 - (_QWORD)v86;
  if (v55 >= (unint64_t)v86)
  {
    v57 = v56 + 2;
    if (v56 <= 0xFFFFFFFFFFFFFFFDLL && v57 <= v87)
    {
      *(_WORD *)((char *)v86 + v56) = 2822;
      goto LABEL_78;
    }
    v53 = 0;
  }
  v57 = 0;
LABEL_78:
  v59 = (char *)(((unint64_t)v54 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v59 >= (char *)v54 + v57)
  {
    v57 = v59 - (char *)v54 + 8;
    if ((unint64_t)(v59 - (char *)v54) > 0xFFFFFFFFFFFFFFF7 || v57 > v53)
      goto LABEL_144;
    *(_QWORD *)v59 = a3;
  }
  if (!v53)
  {
LABEL_144:
    v69 = 17;
    goto LABEL_100;
  }
  v61 = v8[8];
  v62 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v8[7];
  if (v62 + 16 >= v63)
    v62 = 0;
  if (v57 <= 0x10)
    v57 = 16;
  v64 = v62 + v57;
  if (v63 <= v64)
    v64 = 0;
  v8[9] = v64;
  v65 = (unint64_t *)(*(_QWORD *)(v61 + 16) + 128);
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v64, v65));
  v67 = *((_DWORD *)v8 + 27);
  if (v66 == 0x80000000 || v67 != 0)
  {
    v85 = v67 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_99:
    v69 = 15;
LABEL_100:
    *(_BYTE *)a4 = v69;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v101, v14))
  {
    LOBYTE(v98) = 11;
    v14 = 1;
    v100 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v98);
    v89 = 1;
    if (v100 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v93, &v98);
    goto LABEL_105;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_140;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_139;
  *(_WORD *)(v11 + v16) = 3590;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v98) = 0;
        LOBYTE(v100) = 0;
        goto LABEL_53;
      }
      *v24 = *a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v98) = 16;
      v99 = 1;
LABEL_52:
      LOBYTE(v100) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v38 = v8[8];
    v39 = *(_QWORD *)(v38 + 8);
    if (v39 <= 0xFF)
      goto LABEL_138;
    v40 = v8[7];
    v41 = *(_QWORD *)(v38 + 16);
    v42 = v39 - 256;
    if (v40)
    {
      v11 = v40 - 1;
      if (v42 < v40 - 1)
        goto LABEL_138;
    }
    else
    {
      v11 = v42;
    }
    v43 = v41 + 256;
    v44 = WTF::fastMalloc((WTF *)0x48);
    v45 = (WTF::StringImpl *)IPC::Decoder::Decoder(v44, v43, v11, v8[6]);
    if (*((_WORD *)v45 + 25) != 2821)
    {
      v98 = v45;
      v99 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder(v45);
    WTF::fastFree(v46, v47);
    IPC::Connection::waitForSyncReply((uint64_t)v101, v14, 0xE06u, (uint64_t)&v93, a5);
    LOBYTE(v98) = 0;
    v99 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v98, (uint64_t)&v93);
    LOBYTE(v100) = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1E34E3480[v94])(&v96, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v101);
    if (!(_BYTE)v100)
    {
      LOBYTE(v86) = 0;
      v89 = 0;
      goto LABEL_105;
    }
    if (v99 == 1)
    {
      LOBYTE(v86) = (_BYTE)v98;
      v52 = 1;
      v88 = 1;
      v89 = 1;
LABEL_104:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34E3480[v52])(&v93, &v98);
      goto LABEL_105;
    }
    if (v99)
      goto LABEL_145;
    LOBYTE(v96) = 0;
    v97 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>((uint64_t *)v98, &v96);
    if (!v97)
    {
      LOBYTE(v86) = 13;
      v88 = 1;
      v89 = 1;
      goto LABEL_102;
    }
    if ((_BYTE)v100)
      break;
LABEL_138:
    __break(1u);
LABEL_139:
    v12 = 0;
LABEL_140:
    v17 = 0;
  }
  if (v99)
    goto LABEL_145;
  v48 = v98;
  v98 = 0;
  v49 = v96;
  v96 = 0;
  v93 = v48;
  v94 = v49;
  v95 = 0;
  LOBYTE(v86) = 0;
  v88 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
  v89 = 1;
  if (v95 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v102, &v93);
  if (v97)
  {
    v51 = v96;
    v96 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v50);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
LABEL_102:
  if ((_BYTE)v100)
  {
    v52 = v99;
    if (v99 != -1)
      goto LABEL_104;
  }
LABEL_105:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
  if (v89)
  {
    *(_BYTE *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
    if (v89)
    {
      if (v88 != -1)
        return (unsigned __int8 ***)((uint64_t (*)(WTF::StringImpl **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v98, &v86);
    }
    return result;
  }
  if (!v92)
    goto LABEL_138;
  v70 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - v90;
  if (v70 < v90)
    goto LABEL_146;
  v72 = 0;
  if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v71 + 2 <= v91)
  {
    *(_WORD *)(v90 + v71) = 2821;
    v72 = v71 + 2;
  }
  while (2)
  {
    v73 = v8[8];
    v74 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v75 = v8[7];
    if (v74 + 16 >= v75)
      v74 = 0;
    if (v72 <= 0x10)
      v72 = 16;
    v76 = v74 + v72;
    if (v75 <= v76)
      v76 = 0;
    v8[9] = v76;
    v77 = (unint64_t *)(*(_QWORD *)(v73 + 16) + 128);
    do
      __ldaxr(v77);
    while (__stlxr(v76, v77));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, v13);
    v8 = (uint64_t *)v101;
    v93 = 0;
    IPC::Connection::createSyncMessageEncoder(3590, a3, (uint64_t *)&v93, (uint64_t *)&v96);
    LODWORD(a2) = *a2;
    *(_DWORD *)IPC::Encoder::grow(v96, 4uLL, 4) = (_DWORD)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v93, (uint64_t *)&v96, 0, (uint64_t)&v86, a5);
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
        v78 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_129;
      }
LABEL_145:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_146:
      v72 = 0;
      continue;
    }
    break;
  }
  LOBYTE(v98) = 0;
  LOBYTE(v99) = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>(v86, &v98);
  if ((_BYTE)v99)
  {
    v78 = v87;
    if (!(_DWORD)v87)
    {
      v80 = v86;
      v86 = 0;
      v81 = v98;
      *(_QWORD *)a4 = v80;
      *(_QWORD *)(a4 + 8) = v81;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_129;
    }
    goto LABEL_145;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  v78 = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_130;
LABEL_129:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E3480[v78])(&v98, &v86);
LABEL_130:
  v82 = v96;
  v96 = 0;
  if (v82)
  {
    IPC::Encoder::~Encoder(v82, v79);
    WTF::fastFree(v83, v84);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3A78[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawBuffersEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, const void ***a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 968;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v56, **a2, (uint64_t)(*a2)[1]);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 968;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v31, **a2, (uint64_t)(*a2)[1]);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 936;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 936;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 949;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 949;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3603;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE13u, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3603, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3A88[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 883;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 883;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 977;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 977;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::QueryCounterEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 1004;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1004;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryiEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3577;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xDF9u, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3577, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3A98[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3574;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xDF6u, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3574, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3AA8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  unint64_t v43;
  char v44;
  IPC::Encoder *v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  unint64_t v56;
  void *v57;
  uint64_t *v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  char v78;
  unsigned int v79;
  uint64_t *v80;
  unint64_t v81;
  int v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  IPC::Encoder *v87;
  int v88;
  char v89;
  IPC::Decoder *v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v80, a5);
  if (!(_BYTE)v82)
    goto LABEL_125;
  v63 = v80;
  v62 = v81;
  v64 = ((unint64_t)v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = v64 - (_QWORD)v80;
  if (v64 >= (unint64_t)v80)
  {
    v66 = v65 + 2;
    if (v65 <= 0xFFFFFFFFFFFFFFFDLL && v66 <= v81)
    {
      *(_WORD *)((char *)v80 + v65) = 2822;
      goto LABEL_104;
    }
    v62 = 0;
  }
  v66 = 0;
LABEL_104:
  v68 = (char *)(((unint64_t)v63 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v68 >= (char *)v63 + v66)
  {
    v66 = v68 - (char *)v63 + 8;
    if ((unint64_t)(v68 - (char *)v63) > 0xFFFFFFFFFFFFFFF7 || v66 > v62)
      goto LABEL_137;
    *(_QWORD *)v68 = v6;
  }
  if (!v62)
  {
LABEL_137:
    v78 = 17;
    goto LABEL_126;
  }
  v70 = v8[8];
  v71 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v8[7];
  if (v71 + 16 >= v72)
    v71 = 0;
  if (v66 <= 0x10)
    v66 = 16;
  v73 = v71 + v66;
  if (v72 <= v73)
    v73 = 0;
  v8[9] = v73;
  v74 = (unint64_t *)(*(_QWORD *)(v70 + 16) + 128);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v73, v74));
  v76 = *((_DWORD *)v8 + 27);
  if (v75 == 0x80000000 || v76 != 0)
  {
    v79 = v76 + 1;
    *((_DWORD *)v8 + 27) = v79;
    if (v79 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v84, a5);
  if (!v86)
  {
LABEL_125:
    v78 = 15;
LABEL_126:
    *(_BYTE *)a4 = v78;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v84;
  v12 = v85;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v90, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v90, v14))
  {
    LOBYTE(v93) = 11;
    v14 = 1;
    LODWORD(v95) = 1;
    LOBYTE(v80) = 0;
    v82 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v93);
    v83 = 1;
    if ((_DWORD)v95 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v87, &v93);
    goto LABEL_67;
  }
  v93 = v11;
  v94 = v12;
  v95 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3576;
  v95 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v94 = 0;
        }
        else
        {
          *v19 = v14;
          v95 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v93, (_DWORD *)a2);
      if (v94)
      {
        v21 = v95;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v95 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v87) = 16;
          v88 = 1;
LABEL_48:
          v89 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v87 = v40;
          v88 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v90, v14, 0xDF8u, (uint64_t)&v91, a5);
        LOBYTE(v87) = 0;
        v88 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v87, (uint64_t)&v91);
        v89 = 1;
        if (v92 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v92])(&v96, &v91);
      }
      else
      {
        LOBYTE(v87) = 0;
        v89 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v90);
      if (!v89)
      {
        LOBYTE(v80) = 0;
        v83 = 0;
        goto LABEL_64;
      }
      if (v88 == 1)
      {
        v46 = (char)v87;
LABEL_63:
        LOBYTE(v80) = v46;
        v82 = 1;
        v83 = 1;
        goto LABEL_64;
      }
      if (v88)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)v87);
      if (!v44)
      {
        v46 = 13;
        goto LABEL_63;
      }
      if (!v89)
        goto LABEL_132;
      if (v88)
        goto LABEL_138;
      v45 = v87;
      v87 = 0;
      v93 = (uint64_t)v45;
      v94 = v43;
      LODWORD(v95) = 0;
      LOBYTE(v80) = 0;
      v82 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v93);
      v83 = 1;
      if ((_DWORD)v95 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v91, &v93);
LABEL_64:
      if (v89 && v88 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v88])(&v93, &v87);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
      if (v83)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v80);
        if (v83)
        {
          if (v82 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v82])(&v93, &v80);
        }
        return result;
      }
      if (v86)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v94 = 0;
    }
    v47 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - v84;
    if (v47 < v84)
    {
      v49 = 0;
    }
    else
    {
      v49 = 0;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v85)
      {
        *(_WORD *)(v84 + v48) = 2821;
        v49 = v48 + 2;
      }
    }
    v50 = v8[8];
    v51 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = v8[7];
    if (v51 + 16 >= v52)
      v51 = 0;
    if (v49 <= 0x10)
      v49 = 16;
    v53 = v51 + v49;
    if (v52 <= v53)
      v53 = 0;
    v8[9] = v53;
    v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
    do
      __ldaxr(v54);
    while (__stlxr(v53, v54));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v91, v13);
    v8 = v91;
    v93 = 0;
    IPC::Connection::createSyncMessageEncoder(3576, (uint64_t)v6, &v93, (uint64_t *)&v87);
    v6 = v87;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v87, 4uLL, 4) = (_DWORD)v13;
    v55 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v55;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v93, (uint64_t *)&v87, 0, (uint64_t)&v80, a5);
    a2 = v81;
    if ((_DWORD)v81)
    {
      if ((_DWORD)v81 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v80;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v56 = IPC::Decoder::decode<std::tuple<double>>(v80);
    if (!(_BYTE)v57)
      break;
    if (!(_DWORD)v81)
    {
      v58 = v80;
      v80 = 0;
      *(_QWORD *)a4 = v58;
      *(_QWORD *)(a4 + 8) = v56;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v90, &v80);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v81;
  if ((_DWORD)v81 != -1)
    goto LABEL_91;
LABEL_92:
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v60, v61);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v91);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3AB8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64EXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unint64_t v50;
  char v51;
  IPC::Encoder *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  int v62;
  unint64_t v63;
  void *v64;
  uint64_t *v65;
  IPC::Encoder *v66;
  WTF *v67;
  void *v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v75;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  char v85;
  unsigned int v86;
  uint64_t *v87;
  unint64_t v88;
  int v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  IPC::Encoder *v94;
  unint64_t v95;
  int v96;
  uint64_t *v97;
  unsigned int v98;
  unsigned int v99;
  IPC::Decoder *v100;
  char v101;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v87, a5);
  if (!(_BYTE)v89)
    goto LABEL_130;
  v70 = v87;
  v69 = v88;
  v71 = ((unint64_t)v87 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v71 - (_QWORD)v87;
  if (v71 >= (unint64_t)v87)
  {
    v73 = v72 + 2;
    if (v72 <= 0xFFFFFFFFFFFFFFFDLL && v73 <= v88)
    {
      *(_WORD *)((char *)v87 + v72) = 2822;
      goto LABEL_109;
    }
    v69 = 0;
  }
  v73 = 0;
LABEL_109:
  v75 = (char *)(((unint64_t)v70 + v73 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v75 >= (char *)v70 + v73)
  {
    v73 = v75 - (char *)v70 + 8;
    if ((unint64_t)(v75 - (char *)v70) > 0xFFFFFFFFFFFFFFF7 || v73 > v69)
      goto LABEL_143;
    *(_QWORD *)v75 = a3;
  }
  if (!v69)
  {
LABEL_143:
    v85 = 17;
    goto LABEL_131;
  }
  v77 = v8[8];
  v78 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v79 = v8[7];
  if (v78 + 16 >= v79)
    v78 = 0;
  if (v73 <= 0x10)
    v73 = 16;
  v80 = v78 + v73;
  if (v79 <= v80)
    v80 = 0;
  v8[9] = v80;
  v81 = (unint64_t *)(*(_QWORD *)(v77 + 16) + 128);
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v80, v81));
  v83 = *((_DWORD *)v8 + 27);
  if (v82 == 0x80000000 || v83 != 0)
  {
    v86 = v83 + 1;
    *((_DWORD *)v8 + 27) = v86;
    if (v86 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v91, a5);
  if (!v93)
  {
LABEL_130:
    v85 = 15;
LABEL_131:
    *(_BYTE *)a4 = v85;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v91;
  v12 = v92;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v100, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v100, v14))
  {
    LOBYTE(v97) = 11;
    v14 = 1;
    v99 = 1;
    LOBYTE(v87) = 0;
    v89 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v87, (uint64_t)&v97);
    v90 = 1;
    v38 = v99;
    if (v99 == -1)
      goto LABEL_72;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_71;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3566;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v97) = 0;
        LOBYTE(v99) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v97) = 16;
      v98 = 1;
LABEL_52:
      LOBYTE(v99) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v97 = (uint64_t *)v47;
      v98 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v100, v14, 0xDEEu, (uint64_t)&v94, a5);
    LOBYTE(v97) = 0;
    v98 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v97, (uint64_t)&v94);
    LOBYTE(v99) = 1;
    if ((_DWORD)v95 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v95])(&v101, &v94);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v100);
    if (!(_BYTE)v99)
    {
      LOBYTE(v87) = 0;
      v90 = 0;
      goto LABEL_68;
    }
    if (v98 == 1)
    {
      v53 = (char)v97;
LABEL_67:
      LOBYTE(v87) = v53;
      v89 = 1;
      v90 = 1;
      goto LABEL_68;
    }
    if (v98)
      goto LABEL_144;
    v50 = IPC::Decoder::decode<std::tuple<long long>>(v97);
    if (!v51)
    {
      v53 = 13;
      goto LABEL_67;
    }
    if (!(_BYTE)v99)
      goto LABEL_137;
    if (v98)
      goto LABEL_144;
    v52 = (IPC::Encoder *)v97;
    v97 = 0;
    v94 = v52;
    v95 = v50;
    v96 = 0;
    LOBYTE(v87) = 0;
    v89 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v87, (uint64_t)&v94);
    v90 = 1;
    if (v96 != -1)
      ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v96])(&v101, &v94);
LABEL_68:
    if ((_BYTE)v99)
    {
      v38 = v98;
      if (v98 != -1)
      {
        v39 = off_1E34E3480;
LABEL_71:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v94, &v97);
      }
    }
LABEL_72:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v100);
    if (v90)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v87);
      if (v90)
      {
        if (v89 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v89])(&v97, &v87);
      }
      return result;
    }
    if (v93)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v54 = (v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v55 = v54 - v91;
  if (v54 < v91)
    goto LABEL_145;
  v56 = 0;
  if (v55 <= 0xFFFFFFFFFFFFFFFDLL && v55 + 2 <= v92)
  {
    *(_WORD *)(v91 + v55) = 2821;
    v56 = v55 + 2;
  }
  while (2)
  {
    v57 = v8[8];
    v58 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v59 = v8[7];
    if (v58 + 16 >= v59)
      v58 = 0;
    if (v56 <= 0x10)
      v56 = 16;
    v60 = v58 + v56;
    if (v59 <= v60)
      v60 = 0;
    v8[9] = v60;
    v61 = (unint64_t *)(*(_QWORD *)(v57 + 16) + 128);
    do
      __ldaxr(v61);
    while (__stlxr(v60, v61));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v100, v13);
    v8 = (uint64_t *)v100;
    v97 = 0;
    IPC::Connection::createSyncMessageEncoder(3566, a3, (uint64_t *)&v97, (uint64_t *)&v94);
    v62 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v94, 4uLL, 4) = v62;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v97, (uint64_t *)&v94, 0, (uint64_t)&v87, a5);
    a2 = v88;
    if ((_DWORD)v88)
    {
      if ((_DWORD)v88 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v87;
        goto LABEL_95;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v56 = 0;
      continue;
    }
    break;
  }
  v63 = IPC::Decoder::decode<std::tuple<long long>>(v87);
  if ((_BYTE)v64)
  {
    if (!(_DWORD)v88)
    {
      v65 = v87;
      v87 = 0;
      *(_QWORD *)a4 = v65;
      *(_QWORD *)(a4 + 8) = v63;
LABEL_95:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_96:
      ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v101, &v87);
      goto LABEL_97;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v88;
  if ((_DWORD)v88 != -1)
    goto LABEL_96;
LABEL_97:
  v66 = v94;
  v94 = 0;
  if (v66)
  {
    IPC::Encoder::~Encoder(v66, v64);
    WTF::fastFree(v67, v68);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v100);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3AC8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnableiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 975;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 975;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DisableiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 963;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 963;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 899;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 899;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparateiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 898;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 898;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFunciOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 903;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 903;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparateiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 902;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 902;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ColorMaskiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  char v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  IPC::Encoder *v64;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v61, a4);
  if (!v63)
    return 15;
  v28 = v61;
  v27 = v62;
  v29 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = v29 - v61;
  if (v29 >= v61)
  {
    v31 = v30 + 2;
    if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v31 <= v62)
    {
      *(_WORD *)(v61 + v30) = 2822;
      goto LABEL_41;
    }
    v27 = 0;
  }
  v31 = 0;
LABEL_41:
  v33 = (_QWORD *)((v28 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v33 >= v28 + v31)
  {
    v31 = (unint64_t)v33 - v28 + 8;
    if ((unint64_t)v33 - v28 > 0xFFFFFFFFFFFFFFF7 || v31 > v27)
      return 17;
    *v33 = a3;
  }
  if (!v27)
    return 17;
  v35 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v36 = *(_QWORD *)(a1 + 56);
  if (v35 + 16 >= v36)
    v35 = 0;
  if (v31 <= 0x10)
    v31 = 16;
  v37 = v35 + v31;
  if (v36 <= v37)
    v37 = 0;
  *(_QWORD *)(a1 + 72) = v37;
  v38 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v37, v38));
  v40 = *(_DWORD *)(a1 + 108);
  if (v39 == 0x80000000 || v40 != 0)
  {
    v43 = v40 + 1;
    *(_DWORD *)(a1 + 108) = v43;
    if (v43 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v61, a4);
  if (!v63)
    return 15;
  v8 = v61;
  v9 = v62;
  v10 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v61;
  if (v10 >= v61)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v62)
    {
      *(_WORD *)(v61 + v11) = 918;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  if (v12 < v9)
  {
    *(_BYTE *)(v8 + v12) = *((_BYTE *)a2 + 4);
    if (v12 + 1 < v9)
    {
      *(_BYTE *)(v8 + v12 + 1) = *((_BYTE *)a2 + 5);
      if (v12 + 2 < v9)
      {
        *(_BYTE *)(v8 + v12 + 2) = *((_BYTE *)a2 + 6);
        if (v12 + 3 < v9)
        {
          *(_BYTE *)(v8 + v12 + 3) = *((_BYTE *)a2 + 7);
          v19 = *(_QWORD *)(a1 + 64);
          v20 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v21 = *(_QWORD *)(a1 + 56);
          if (v20 + 16 >= v21)
            v20 = 0;
          if (v12 <= 0xC)
            v12 = 12;
          v22 = v12 + v20 + 4;
          if (v21 <= v22)
            v23 = 0;
          else
            v23 = v22;
          *(_QWORD *)(a1 + 72) = v23;
          v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v23, v24));
          if (v25 != 0x80000000 && !*(_DWORD *)(a1 + 108))
            return 0;
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          v26 = 0;
          *(_DWORD *)(a1 + 108) = 0;
          return v26;
        }
      }
    }
  }
  if (v63)
  {
    v44 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v45 = v44 - v61;
    if (v44 >= v61)
    {
      v46 = 0;
      if (v45 <= 0xFFFFFFFFFFFFFFFDLL && v45 + 2 <= v62)
      {
        *(_WORD *)(v61 + v45) = 2821;
        v46 = v45 + 2;
      }
      goto LABEL_73;
    }
  }
  else
  {
    __break(1u);
  }
  v46 = 0;
LABEL_73:
  v47 = *(_QWORD *)(a1 + 64);
  v48 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v49 = *(_QWORD *)(a1 + 56);
  if (v48 + 16 >= v49)
    v48 = 0;
  if (v46 <= 0x10)
    v46 = 16;
  v50 = v48 + v46;
  if (v49 <= v50)
    v50 = 0;
  *(_QWORD *)(a1 + 72) = v50;
  v51 = (unint64_t *)(*(_QWORD *)(v47 + 16) + 128);
  do
    __ldaxr(v51);
  while (__stlxr(v50, v51));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)(a1 + 8));
  v52 = v60;
  v53 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v53 = 918;
  *(_QWORD *)(v53 + 8) = a3;
  *(_QWORD *)(v53 + 528) = v53 + 16;
  *(_QWORD *)(v53 + 536) = v53 + 16;
  *(_OWORD *)(v53 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v53 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v53);
  v64 = (IPC::Encoder *)v53;
  v54 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v53, 4uLL, 4) = v54;
  LOBYTE(v54) = *((_BYTE *)a2 + 4);
  *IPC::Encoder::grow((IPC::Encoder *)v53, 1uLL, 1) = v54;
  LOBYTE(v54) = *((_BYTE *)a2 + 5);
  *IPC::Encoder::grow((IPC::Encoder *)v53, 1uLL, 1) = v54;
  LOBYTE(v54) = *((_BYTE *)a2 + 6);
  *IPC::Encoder::grow((IPC::Encoder *)v53, 1uLL, 1) = v54;
  v55 = *((_BYTE *)a2 + 7);
  *IPC::Encoder::grow((IPC::Encoder *)v53, 1uLL, 1) = v55;
  v26 = IPC::Connection::sendMessageImpl((uint64_t)v52, (uint64_t *)&v64, 1, 0);
  v57 = v64;
  v64 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v56);
    WTF::fastFree(v58, v59);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v60);
  return v26;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArraysInstancedBaseInstanceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 966;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v76 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v76 = v9;
      }
      v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v76)
        {
          *(_DWORD *)(v8 + v30) = a2[3];
          v77 = v76;
          v12 = v30 + 4;
        }
      }
      else
      {
        v77 = v76;
      }
      v31 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 4);
        if ((unint64_t)(v32 + 4) > v77)
          goto LABEL_48;
        *v31 = a2[4];
      }
      if (v77)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 966;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v55 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v77 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v77 + v63)
      {
        v63 = (unint64_t)v65 - v77 + 8;
        if ((unint64_t)v65 - v77 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v77 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElementsInstancedBaseVertexBaseInstanceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  void *v60;
  IPC::Encoder *v61;
  WTF *v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v70;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unsigned __int8 v88;
  IPC::Encoder *v89;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v86, a4);
  if (!v88)
    return 15;
  v65 = v86;
  v64 = v87;
  v66 = (v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v67 = v66 - v86;
  if (v66 >= v86)
  {
    v68 = v67 + 2;
    if (v67 <= 0xFFFFFFFFFFFFFFFDLL && v68 <= v87)
    {
      *(_WORD *)(v86 + v67) = 2822;
      goto LABEL_83;
    }
    v64 = 0;
  }
  v68 = 0;
LABEL_83:
  v70 = (_QWORD *)((v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v70 >= v65 + v68)
  {
    v68 = (unint64_t)v70 - v65 + 8;
    if ((unint64_t)v70 - v65 > 0xFFFFFFFFFFFFFFF7 || v68 > v64)
      return 17;
    *v70 = a3;
  }
  if (!v64)
    return 17;
  v72 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = *(_QWORD *)(a1 + 56);
  if (v72 + 16 >= v73)
    v72 = 0;
  if (v68 <= 0x10)
    v68 = 16;
  v74 = v72 + v68;
  if (v73 <= v74)
    v74 = 0;
  *(_QWORD *)(a1 + 72) = v74;
  v75 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v74, v75));
  v77 = *(_DWORD *)(a1 + 108);
  if (v76 == 0x80000000 || v77 != 0)
  {
    v80 = v77 + 1;
    *(_DWORD *)(a1 + 108) = v80;
    if (v80 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v86, a4);
  if (!v88)
    return 15;
  v8 = v86;
  v9 = v87;
  v10 = (v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v86;
  if (v10 >= v86)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v87)
    {
      *(_WORD *)(v86 + v11) = 971;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v84 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v84 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v84 = v9;
  }
  v28 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v83 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= v84)
    {
      *(_QWORD *)(v8 + v30) = *((_QWORD *)a2 + 2);
      v83 = v84;
      v12 = v30 + 8;
    }
  }
  else
  {
    v83 = v84;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v81 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v83)
    {
      *(_DWORD *)(v8 + v33) = a2[6];
      v81 = v83;
      v12 = v33 + 4;
    }
  }
  else
  {
    v81 = v83;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v34 >= v8 + v12;
  v35 = v34 - (v8 + v12);
  if (v25)
  {
    v82 = 0;
    v36 = v35 + v12;
    if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= v81)
    {
      *(_DWORD *)(v8 + v36) = a2[7];
      v82 = v81;
      v12 = v36 + 4;
    }
  }
  else
  {
    v82 = v81;
  }
  v37 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v37 >= v8 + v12)
  {
    v38 = (char *)v37 - v8;
    if ((unint64_t)v37 - v8 > 0xFFFFFFFFFFFFFFFBLL)
      goto LABEL_58;
    v12 = (unint64_t)(v38 + 4);
    if ((unint64_t)(v38 + 4) > v82)
      goto LABEL_58;
    *v37 = a2[8];
  }
  if (v82)
  {
    v39 = *(_QWORD *)(a1 + 64);
    v40 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = *(_QWORD *)(a1 + 56);
    if (v40 + 16 >= v41)
      v40 = 0;
    if (v12 <= 0x10)
      v12 = 16;
    v42 = v40 + v12;
    if (v41 <= v42)
      v43 = 0;
    else
      v43 = v42;
    *(_QWORD *)(a1 + 72) = v43;
    v44 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v43, v44));
    if (v45 != 0x80000000 && !*(_DWORD *)(a1 + 108))
      return 0;
    if (*(_BYTE *)(a1 + 96))
      MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
    v46 = 0;
    *(_DWORD *)(a1 + 108) = 0;
    return v46;
  }
LABEL_58:
  v47 = v88;
  if (v88)
  {
    v48 = (v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v49 = v48 - v86;
    if (v48 < v86)
    {
      v47 = 0;
    }
    else
    {
      v47 = 0;
      if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= v87)
      {
        *(_WORD *)(v86 + v49) = 2821;
        v47 = v49 + 2;
      }
    }
    v50 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)(a1 + 56);
    if (v50 + 16 < v12)
      goto LABEL_64;
  }
  else
  {
    __break(1u);
  }
  v50 = 0;
LABEL_64:
  if (v47 <= 0x10)
    v47 = 16;
  v51 = v50 + v47;
  if (v12 <= v51)
    v51 = 0;
  *(_QWORD *)(a1 + 72) = v51;
  v52 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v52);
  while (__stlxr(v51, v52));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, (uint64_t **)(a1 + 8));
  v53 = v85;
  v54 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v54 = 971;
  *(_QWORD *)(v54 + 8) = a3;
  *(_QWORD *)(v54 + 528) = v54 + 16;
  *(_QWORD *)(v54 + 536) = v54 + 16;
  *(_OWORD *)(v54 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v54 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v54);
  v89 = (IPC::Encoder *)v54;
  v55 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v54, 4uLL, 4) = v55;
  v56 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v54, 4uLL, 4) = v56;
  v57 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v54, 4uLL, 4) = v57;
  v58 = *((_QWORD *)a2 + 2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v54, 8uLL, 8) = v58;
  LODWORD(v58) = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v54, 4uLL, 4) = v58;
  LODWORD(v58) = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v54, 4uLL, 4) = v58;
  v59 = a2[8];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v54, 4uLL, 4) = v59;
  v46 = IPC::Connection::sendMessageImpl((uint64_t)v53, (uint64_t *)&v89, 1, 0);
  v61 = v89;
  v89 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v60);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v85);
  return v46;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClipControlEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 916;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 916;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ProvokingVertexANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 1003;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 1003;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonModeANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 1000;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1000;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonOffsetClampEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  void *v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  IPC::Encoder *v72;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
      if (!v71)
        return 15;
      v8 = v69;
      v9 = v70;
      v10 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v69;
      if (v10 >= v69)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v70)
        {
          *(_WORD *)(v69 + v11) = 1002;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v24 >= v8 + v12)
      {
        v25 = (char *)v24 - v8;
        if ((unint64_t)v24 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_38;
        v12 = (unint64_t)(v25 + 4);
        if ((unint64_t)(v25 + 4) > v9)
          goto LABEL_38;
        *v24 = a2[2];
      }
      if (v9)
      {
        v26 = *(_QWORD *)(a1 + 64);
        v27 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(a1 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        v29 = 16;
        if (v12 > 0x10)
          v29 = v12;
        v30 = v27 + v29;
        if (v28 <= v30)
          v31 = 0;
        else
          v31 = v30;
        *(_QWORD *)(a1 + 72) = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v34 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v34;
      }
LABEL_38:
      if (v71)
      {
        v35 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v35 - v69;
        if (v35 < v69)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v70)
          {
            *(_WORD *)(v69 + v36) = 2821;
            v37 = v36 + 2;
          }
        }
        v38 = *(_QWORD *)(a1 + 64);
        v39 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v40 = *(_QWORD *)(a1 + 56);
        if (v39 + 16 >= v40)
          v39 = 0;
        if (v37 <= 0x10)
          v37 = 16;
        v41 = v39 + v37;
        if (v40 <= v41)
          v41 = 0;
        *(_QWORD *)(a1 + 72) = v41;
        v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
        do
          __ldaxr(v42);
        while (__stlxr(v41, v42));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(a1 + 8));
        v43 = v68;
        v44 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v44 = 1002;
        *(_QWORD *)(v44 + 8) = a3;
        *(_QWORD *)(v44 + 528) = v44 + 16;
        *(_QWORD *)(v44 + 536) = v44 + 16;
        *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v44 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
        v72 = (IPC::Encoder *)v44;
        v45 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v45;
        v46 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v46;
        v47 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v47;
        v34 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v72, 1, 0);
        v49 = v72;
        v72 = 0;
        if (v49)
        {
          IPC::Encoder::~Encoder(v49, v48);
          WTF::fastFree(v50, v51);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
        return v34;
      }
      __break(1u);
LABEL_96:
      v52 = 0;
LABEL_97:
      v55 = 0;
LABEL_64:
      v57 = (_QWORD *)((v12 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v57 >= v12 + v55)
      {
        v55 = (unint64_t)v57 - v12 + 8;
        if ((unint64_t)v57 - v12 > 0xFFFFFFFFFFFFFFF7 || v55 > v52)
          return 17;
        *v57 = a3;
      }
      if (!v52)
        return 17;
      v59 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v60 = *(_QWORD *)(a1 + 56);
      if (v59 + 16 >= v60)
        v59 = 0;
      if (v55 <= 0x10)
        v55 = 16;
      v61 = v59 + v55;
      if (v60 <= v61)
        v61 = 0;
      *(_QWORD *)(a1 + 72) = v61;
      v62 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v61, v62));
      v64 = *(_DWORD *)(a1 + 108);
      if (v63 == 0x80000000 || v64 != 0)
      {
        v67 = v64 + 1;
        *(_DWORD *)(a1 + 108) = v67;
        if (v67 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
  if (v71)
  {
    v12 = v69;
    v52 = v70;
    v53 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = v53 - v69;
    if (v53 < v69)
      goto LABEL_97;
    v55 = v54 + 2;
    if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v70)
      goto LABEL_96;
    *(_WORD *)(v69 + v54) = 2822;
    goto LABEL_64;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisampleANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1009;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1009;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3460[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3AD8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetInternalformativEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetInternalformativEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SetDrawingBufferColorSpace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, CFTypeRef **a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 1016;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)&v56, *a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1016;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((IPC::Encoder *)v31, *a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteExternalSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 945;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 945;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::RemoteRenderingBackendProxy::*&)(void),WebKit::RemoteRenderingBackendProxy*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy()::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34E3B20;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34E3B20;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy()::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = *(_QWORD *)(v2 + 16);
      if (__ldaxr((unsigned __int8 *)v4))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v4))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEABB3C](v4);
LABEL_8:
      ++*(_QWORD *)(v4 + 8);
      v6 = __ldxr((unsigned __int8 *)v4);
      if (v6 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
      v7 = *((_QWORD *)v3 + 1);
      v8 = *(_QWORD *)(v2 + 24);
      v10 = &v11;
      v11 = v7;
      IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseRenderingBackend>(v8, &v10, 0, 1, 0);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 16), v9);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E3B48;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 2));
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34E3B48;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 16));
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WebKit::WebProcess *v21;
  uint64_t *v22[2];
  uint64_t v23;

  v1 = (uint64_t *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::ensureGPUProcessConnection(v3);
  v5 = v2[7];
  v22[1] = v1;
  v23 = v5;
  v6 = *(_QWORD *)(v4 + 24);
  v22[0] = &v23;
  IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateRenderingBackend>(v6, v22, 0, 1, 0);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
  v8 = *(unsigned int **)(v4 + 8);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = (unsigned int *)v2[4];
  v2[4] = v8;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v7);
    }
  }
  WebKit::GPUProcessConnection::sharedResourceCache(v4, v22);
  v13 = v22[0];
  v22[0] = 0;
  result = (unsigned int *)v2[6];
  v2[6] = v13;
  if (result)
  {
    v15 = result + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, result + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    result = (unsigned int *)v22[0];
    v22[0] = 0;
    if (result)
    {
      v18 = result + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34E3B70;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E3B70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 16);
      if (__ldaxr((unsigned __int8 *)v3))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v3))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEABB3C](v3);
LABEL_8:
      ++*(_QWORD *)(v3 + 8);
      v5 = __ldxr((unsigned __int8 *)v3);
      if (v5 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_13:
      WebKit::GPUProcessConnection::didBecomeUnresponsive(v2);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 16), v6);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16)
      {
        if (v17 != -1)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 16 * v25);
          v28 = (unsigned int *)v27[1];
          v27[1] = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v10);
            }
          }
          *v27 = *v16;
          v31 = v6 + 16 * v13;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v27[1] = v32;
          v33 = *(unsigned int **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, v33);
              WTF::fastFree((WTF *)v33, v10);
            }
          }
          if (v16 == a3)
            v14 = v27;
        }
      }
      else
      {
        v36 = (unsigned int *)v16[1];
        v16[1] = 0;
        if (v36)
        {
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            atomic_store(1u, v36);
            WTF::fastFree((WTF *)v36, v10);
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
    goto LABEL_29;
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_29:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
  {
    if (6 * *(_DWORD *)(v1 - 12) >= 2 * v2)
      v2 *= 2;
  }
  else
  {
    v2 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    do
    {
      v13 = (uint64_t *)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          if (*(_QWORD *)(v17 + 16 * v22))
          {
            v28 = 1;
            do
              v22 = ((_DWORD)v22 + v28++) & v18;
            while (*(_QWORD *)(v17 + 16 * v22));
          }
          v23 = (uint64_t *)(v17 + 16 * v22);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          *v23 = *v13;
          v25 = v4 + 16 * v11;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v27 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        else
        {
          v15 = v4 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v32;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (a2)
    bzero((void *)(v6 + 16), 24 * a2);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v32 = v4;
    while (1)
    {
      v11 = (uint64_t *)(v3 + 24 * v10);
      v12 = *v11;
      if (*v11)
      {
        if (v12 == -1)
          goto LABEL_17;
        v13 = *a1;
        v14 = *a1 ? *(_DWORD *)(v13 - 8) : 0;
        v15 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        do
        {
          v20 = v18;
          v21 = (uint64_t *)(v13 + 24 * v18);
          v18 = (v18 + v19++) & v14;
        }
        while (*v21);
        v22 = v20;
        v23 = v13 + 24 * v20;
        v26 = *(unsigned __int8 **)(v23 + 8);
        v25 = (_QWORD *)(v23 + 8);
        v24 = v26;
        *v25 = 0;
        if (v26)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v24, v7);
        *v21 = *v11;
        v27 = v3 + 24 * v10;
        *v25 = *(_QWORD *)(v27 + 8);
        v28 = *(_QWORD *)(v27 + 16);
        *(_QWORD *)(v27 + 8) = 0;
        *(_QWORD *)(v27 + 16) = 0;
        *(_QWORD *)(v13 + 24 * v22 + 16) = v28;
        v29 = *(unsigned __int8 **)(v27 + 8);
        *(_QWORD *)(v27 + 8) = 0;
        if (!v29)
          goto LABEL_17;
      }
      else
      {
        v30 = v3 + 24 * v10;
        v29 = *(unsigned __int8 **)(v30 + 8);
        *(_QWORD *)(v30 + 8) = 0;
        if (!v29)
          goto LABEL_17;
      }
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v29, v7);
LABEL_17:
      if (++v10 == v32)
        goto LABEL_22;
    }
  }
  if (v3)
LABEL_22:
    WTF::fastFree((WTF *)(v3 - 16), v7);
}

WTF::ThreadSafeWeakPtrControlBlock *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>@<X0>(WTF::ThreadSafeWeakPtrControlBlock *result@<X0>, _QWORD *a2@<X1>, WTF::ThreadSafeWeakPtrControlBlock **a3@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  int v12;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  v5 = *(_DWORD *)(v4 - 8);
  v6 = *a2 + ~(*a2 << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = v5 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
  v10 = *(_QWORD *)(v4 + 24 * v9);
  if (v10 != *a2)
  {
    v12 = 1;
    while (v10)
    {
      v9 = (v9 + v12) & v5;
      v10 = *(_QWORD *)(v4 + 24 * v9);
      ++v12;
      if (v10 == *a2)
        goto LABEL_3;
    }
    goto LABEL_10;
  }
LABEL_3:
  result = *(WTF::ThreadSafeWeakPtrControlBlock **)(v4 + 24 * v9 + 8);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
  v11 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v4 + 24 * v9 + 16);
  *a3 = result;
  a3[1] = v11;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != -1)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = (uint64_t *)(v16 + 24 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          v25 = v23;
          v26 = v16 + 24 * v23;
          v29 = *(unsigned __int8 **)(v26 + 8);
          v28 = (_QWORD *)(v26 + 8);
          v27 = v29;
          *v28 = 0;
          if (v29)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v27, v8);
          *v24 = *v14;
          v30 = v4 + 24 * v11;
          *v28 = *(_QWORD *)(v30 + 8);
          v31 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 8) = 0;
          *(_QWORD *)(v30 + 16) = 0;
          *(_QWORD *)(v16 + 24 * v25 + 16) = v31;
          v32 = *(unsigned __int8 **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v32, v8);
          if (v14 == a3)
            v12 = v24;
        }
      }
      else
      {
        v33 = v4 + 24 * v11;
        v34 = *(unsigned __int8 **)(v33 + 8);
        *(_QWORD *)(v33 + 8) = 0;
        if (v34)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v34, v8);
      }
      ++v11;
    }
    while (v11 != v13);
    goto LABEL_23;
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_23:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

uint64_t WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>::operator=<WebCore::DecomposedGlyphs,(void *)0>(uint64_t a1, _QWORD *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  unsigned __int8 *v5;

  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)a2[1];
  if (v4)
    v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  v5 = *(unsigned __int8 **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  *(_QWORD *)(a1 + 8) = a2;
  return a1;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (_QWORD *)v6;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        v13 = (_OWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(a1, v12);
        *v13 = *(_OWORD *)v12;
        if (v12 == a3)
          v11 = v13;
      }
      v12 += 2;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[3 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v1];
  if ((_DWORD)v1)
  {
    v3 = 24 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v3 -= 24;
      if (!v3)
        return v2;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[2 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v1];
  if ((_DWORD)v1)
  {
    v3 = 16 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v3 -= 16;
      if (!v3)
        return v2;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = *a3 + ~(*a3 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v23 = 0;
        v22 = v6 + 8 * v26;
        goto LABEL_12;
      }
      if (v15 == -1)
        v24 = v14;
      v13 = (v13 + v25) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *v24 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v24;
    }
  }
  *v14 = v9;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_11;
LABEL_23:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v14);
    v14 = result;
    v18 = *a2;
    if (*a2)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_11;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_23;
LABEL_11:
  v22 = v18 + 8 * v21;
  v23 = 1;
LABEL_12:
  *v5 = (uint64_t)v14;
  v5[1] = v22;
  *((_BYTE *)v5 + 16) = v23;
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v10 = 0;
    do
    {
      v13 = (uint64_t *)(v4 + 8 * v12);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        if (*(_QWORD *)(v15 + 8 * v20))
        {
          v22 = 1;
          do
            v20 = ((_DWORD)v20 + v22++) & v16;
          while (*(_QWORD *)(v15 + 8 * v20));
        }
        v21 = (_QWORD *)(v15 + 8 * v20);
        *v21 = v14;
        if (v13 == a2)
          v10 = v21;
      }
      ++v12;
    }
    while (v12 != v5);
    goto LABEL_16;
  }
  v10 = 0;
  result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_14;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_5:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_6;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_5;
LABEL_14:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_6:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8, 0);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;

  if (!a1)
    return 0;
  v4 = *(_DWORD *)(a1 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(a1 + 8 * v8);
  if (v9 == a2)
    return 1;
  v10 = 1;
  do
  {
    v2 = v9 != 0;
    if (!v9)
      break;
    v8 = (v8 + v10) & v4;
    v9 = *(_QWORD *)(a1 + 8 * v8);
    ++v10;
  }
  while (v9 != a2);
  return v2;
}

WTF *WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref(WTF *result, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result + 8, a2);
    return (WTF *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteGPUProxy,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  unsigned int v2;
  unsigned int v3;
  WTF *v4;
  void *v5;

  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    WebKit::RemoteGPUProxy::~RemoteGPUProxy((WebKit::RemoteGPUProxy *)(result - 6), a2);
    return (unsigned int *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t IPC::Decoder::operator>><std::tuple<WebKit::WebGPU::SupportedFeatures,WebKit::WebGPU::SupportedLimits>>(uint64_t *a1, WTF::StringImpl **a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t result;
  void *v7;
  int v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  char v39;
  _OWORD v40[9];
  char v41;

  IPC::Decoder::decode<WebKit::WebGPU::SupportedFeatures>(a1, a2, (uint64_t)&v37);
  if (!v39)
  {
    LOBYTE(v25) = 0;
    v36 = 0;
LABEL_8:
    v9 = (void *)*a1;
    v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v11)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v12 + 16))(v12, v9);
    v8 = 0;
    v10 = 1;
LABEL_10:
    if (*((unsigned __int8 *)a2 + 160) == v8)
    {
      if (!*((_BYTE *)a2 + 160))
        return (uint64_t)a1;
      v13 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v13)
        WTF::VectorDestructor<true,WTF::String>::destruct(*a2, (WTF::StringImpl *)((char *)*a2 + 8 * v13));
      v14 = *a2;
      if (*a2)
      {
        *a2 = 0;
        *((_DWORD *)a2 + 2) = 0;
        WTF::fastFree(v14, v9);
      }
      v15 = v25;
      v25 = 0;
      v26 = 0;
      *a2 = v15;
      *((_DWORD *)a2 + 2) = v3;
      *((_DWORD *)a2 + 3) = v2;
      v16 = v34;
      *((_OWORD *)a2 + 7) = v33;
      *((_OWORD *)a2 + 8) = v16;
      *((_OWORD *)a2 + 9) = v35;
      v17 = v30;
      *((_OWORD *)a2 + 3) = v29;
      *((_OWORD *)a2 + 4) = v17;
      v18 = v32;
      *((_OWORD *)a2 + 5) = v31;
      *((_OWORD *)a2 + 6) = v18;
      v19 = v28;
      *((_OWORD *)a2 + 1) = v27;
      *((_OWORD *)a2 + 2) = v19;
      if ((v10 & 1) != 0)
        return (uint64_t)a1;
    }
    else if (*((_BYTE *)a2 + 160))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, v9);
      *((_BYTE *)a2 + 160) = 0;
      if ((v10 & 1) != 0)
        return (uint64_t)a1;
    }
    else
    {
      v20 = v25;
      v25 = 0;
      v26 = 0;
      *a2 = v20;
      *((_DWORD *)a2 + 2) = v3;
      *((_DWORD *)a2 + 3) = v2;
      v21 = v34;
      *((_OWORD *)a2 + 7) = v33;
      *((_OWORD *)a2 + 8) = v21;
      *((_OWORD *)a2 + 9) = v35;
      v22 = v30;
      *((_OWORD *)a2 + 3) = v29;
      *((_OWORD *)a2 + 4) = v22;
      v23 = v32;
      *((_OWORD *)a2 + 5) = v31;
      *((_OWORD *)a2 + 6) = v23;
      v24 = v28;
      *((_OWORD *)a2 + 1) = v27;
      *((_OWORD *)a2 + 2) = v24;
      *((_BYTE *)a2 + 160) = 1;
      if ((v10 & 1) != 0)
        return (uint64_t)a1;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v9);
    return (uint64_t)a1;
  }
  result = IPC::Decoder::decode<WebKit::WebGPU::SupportedLimits>(a1, (uint64_t)v40);
  if (!v41)
  {
    LOBYTE(v25) = 0;
    v36 = 0;
    if (v39)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v7);
    goto LABEL_8;
  }
  if (v39)
  {
    v25 = v37;
    v3 = v38;
    v2 = HIDWORD(v38);
    v37 = 0;
    v38 = 0;
    v26 = __PAIR64__(v2, v3);
    v33 = v40[6];
    v34 = v40[7];
    v35 = v40[8];
    v29 = v40[2];
    v30 = v40[3];
    v32 = v40[5];
    v31 = v40[4];
    v28 = v40[1];
    v27 = v40[0];
    v8 = 1;
    v36 = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v7);
    v10 = 0;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ConnectionSendSyncResult(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v7 = *((_OWORD *)a3 + 5);
  v19 = *((_OWORD *)a3 + 6);
  v6 = v19;
  v8 = *((_OWORD *)a3 + 8);
  v20 = *((_OWORD *)a3 + 7);
  v21 = v8;
  v22 = *((_OWORD *)a3 + 9);
  v9 = *((_OWORD *)a3 + 4);
  v16 = *((_OWORD *)a3 + 3);
  v17 = v9;
  v11 = *((_OWORD *)a3 + 1);
  v15 = *((_OWORD *)a3 + 2);
  v10 = v15;
  v18 = v7;
  v14 = v11;
  v13[0] = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v13[1] = 0;
  *(_QWORD *)&v11 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 120) = v20;
  *(_OWORD *)(a1 + 136) = v21;
  *(_OWORD *)(a1 + 152) = v22;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 56) = v16;
  *(_OWORD *)(a1 + 72) = v17;
  *(_OWORD *)(a1 + 88) = v18;
  *(_OWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 168) = 0;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 168);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3600[v4])(&v7, result);
  *(_DWORD *)(v3 + 168) = -1;
  v5 = *(unsigned int *)(a2 + 168);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3B88[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 168) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages13RemoteAdapter13RequestDeviceEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 3);
  v5 = *(_OWORD *)(a3 + 5);
  v6 = *(_OWORD *)(a3 + 7);
  v7 = *(_OWORD *)(a3 + 9);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 11);
  *(_OWORD *)(a2 + 72) = v7;
  *(_OWORD *)(a2 + 56) = v6;
  *(_OWORD *)(a2 + 40) = v5;
  result = *(__n128 *)(a3 + 13);
  v9 = *(_OWORD *)(a3 + 15);
  v10 = *(_OWORD *)(a3 + 17);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a3 + 19);
  *(_OWORD *)(a2 + 136) = v10;
  *(_OWORD *)(a2 + 120) = v9;
  *(__n128 *)(a2 + 104) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages13RemoteAdapter13RequestDeviceEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void WebKit::WebGPU::RemoteBindGroupLayoutProxy::~RemoteBindGroupLayoutProxy(WebKit::WebGPU::RemoteBindGroupLayoutProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  IPC::Encoder *v62;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v59, v4 + 30.0);
  if (!v61)
    goto LABEL_78;
  v21 = v59;
  v20 = v60;
  v22 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v59;
  if (v22 < v59)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v60)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v59 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v59, v5);
  if (!v61)
    goto LABEL_78;
  v7 = v59;
  v8 = v60;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v59;
  if ((unint64_t)v9 < v59)
  {
    v11 = 0;
    if (v60)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v60)
      goto LABEL_60;
    *v9 = 706;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v61)
  {
    __break(1u);
LABEL_98:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v59;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_98;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v60)
    goto LABEL_98;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v3 + 8));
  v45 = v58;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 706;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v62 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v62, 1, 0);
  v48 = v62;
  v62 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v58);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E3E38;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = *((_QWORD *)this + 2);
  if (v54)
  {
    *(_QWORD *)(v54 + 8) = 0;
    v55 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v55)
    {
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteBindGroupLayoutProxy::~RemoteBindGroupLayoutProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteBindGroupLayoutProxy::setLabelInternal(WebKit::WebGPU::RemoteBindGroupLayoutProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)this + 4);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 707;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 707;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteBindGroupProxy::~RemoteBindGroupProxy(WebKit::WebGPU::RemoteBindGroupProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 708;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 708;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E3E60;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteBindGroupProxy::~RemoteBindGroupProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteBindGroupProxy::setLabelInternal(WebKit::WebGPU::RemoteBindGroupProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 709;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 709;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteBufferProxy::~RemoteBufferProxy(WebKit::WebGPU::RemoteBufferProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  unint64_t v53;
  unint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  IPC::Encoder *v74;

  v2 = *((_QWORD *)this + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v71, v4 + 30.0);
  if (!v73)
    goto LABEL_78;
  v21 = v71;
  v20 = v72;
  v22 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v71;
  if (v22 < v71)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v72)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v71 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v71, v5);
  if (!v73)
    goto LABEL_78;
  v7 = v71;
  v8 = v72;
  v9 = (_WORD *)((v71 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v71;
  if ((unint64_t)v9 < v71)
  {
    v11 = 0;
    if (v72)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v72)
      goto LABEL_60;
    *v9 = 712;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v73)
  {
    __break(1u);
LABEL_119:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v71;
  v9 = (_WORD *)((v71 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_119;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v72)
    goto LABEL_119;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v70, (uint64_t **)(v3 + 8));
  v45 = v70;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 712;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v74 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v74, 1, 0);
  v48 = v74;
  v74 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v70);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = *((_QWORD *)this + 4);
  v54 = *((_QWORD *)this + 5);
  v55 = (WTF *)*((_QWORD *)this + 6);
  if (v53 <= v54)
  {
    if (v53 == v54)
      goto LABEL_105;
    v62 = (uint64_t *)((char *)v55 + 8 * v53);
    v63 = 8 * v54 - 8 * v53;
    do
    {
      v64 = *v62;
      *v62 = 0;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      ++v62;
      v63 -= 8;
    }
    while (v63);
  }
  else
  {
    if (v54)
    {
      v56 = 8 * v54;
      do
      {
        v57 = *(_QWORD *)v55;
        *(_QWORD *)v55 = 0;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
        v55 = (WTF *)((char *)v55 + 8);
        v56 -= 8;
      }
      while (v56);
      v55 = (WTF *)*((_QWORD *)this + 6);
      v53 = *((_QWORD *)this + 4);
    }
    v58 = *((unsigned int *)this + 14);
    if (v53 != v58)
    {
      v59 = (uint64_t *)((char *)v55 + 8 * v53);
      v60 = 8 * v58 - 8 * v53;
      do
      {
        v61 = *v59;
        *v59 = 0;
        if (v61)
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
        ++v59;
        v60 -= 8;
      }
      while (v60);
    }
  }
  v55 = (WTF *)*((_QWORD *)this + 6);
LABEL_105:
  if (v55)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v55, v6);
  }
  *(_QWORD *)this = off_1E34E3E88;
  v65 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = *((_QWORD *)this + 2);
  if (v66)
  {
    *(_QWORD *)(v66 + 8) = 0;
    v67 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v67)
    {
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        atomic_store(1u, v67);
        WTF::fastFree((WTF *)v67, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteBufferProxy::~RemoteBufferProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteBufferProxy::mapAsync(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  unsigned __int8 ***result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  IPC::Encoder *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  void *v52;
  WTF::RunLoop *v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  IPC::Encoder *v60;
  WTF *v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  IPC::Encoder *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v70;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  unsigned int v80;
  unint64_t v81;
  size_t v82;
  char *v83;
  void *v84;
  unint64_t v85;
  size_t v86;
  char *v87;
  void *v88;
  uint64_t v89[2];
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[2];
  os_unfair_lock_s *v94;
  IPC::Encoder *v95;
  unint64_t v96;
  unsigned __int8 v97;
  IPC::Encoder *v98;
  unint64_t v99;
  unint64_t v100;

  v89[0] = a4;
  v89[1] = a5;
  v9 = *a6;
  *a6 = 0;
  ++*(_DWORD *)(a1 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 176) + 96) + 96);
  v11 = *(_QWORD *)(a1 + 64);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
  v13 = v12 + 30.0;
  if (*(_QWORD *)(v10 + 48) == v11)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v98, v12 + 30.0);
  if (!(_BYTE)v100)
    goto LABEL_90;
  v65 = v98;
  v64 = v99;
  v66 = ((unint64_t)v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v67 = v66 - (_QWORD)v98;
  if (v66 >= (unint64_t)v98)
  {
    v68 = v67 + 2;
    if (v67 <= 0xFFFFFFFFFFFFFFFDLL && v68 <= v99)
    {
      *(_WORD *)((char *)v98 + v67) = 2822;
      goto LABEL_69;
    }
    v64 = 0;
  }
  v68 = 0;
LABEL_69:
  v70 = (char *)(((unint64_t)v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v70 < (char *)v65 + v68)
    goto LABEL_75;
  v68 = v70 - (char *)v65 + 8;
  if ((unint64_t)(v70 - (char *)v65) > 0xFFFFFFFFFFFFFFF7 || v68 > v64)
  {
LABEL_90:
    if (*(_DWORD *)(a1 + 8) == 1)
    {
      result = (unsigned __int8 ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
      if (!v9)
        return result;
    }
    else
    {
      --*(_DWORD *)(a1 + 8);
      if (!v9)
        return result;
    }
    return (unsigned __int8 ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  *(_QWORD *)v70 = v11;
LABEL_75:
  if (!v64)
    goto LABEL_90;
  v72 = *(_QWORD *)(v10 + 64);
  v73 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v74 = *(_QWORD *)(v10 + 56);
  if (v73 + 16 >= v74)
    v73 = 0;
  if (v68 <= 0x10)
    v68 = 16;
  v75 = v73 + v68;
  if (v74 <= v75)
    v75 = 0;
  *(_QWORD *)(v10 + 72) = v75;
  v76 = (unint64_t *)(*(_QWORD *)(v72 + 16) + 128);
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v75, v76));
  v78 = *(_DWORD *)(v10 + 108);
  if (v77 == 0x80000000 || v78 != 0)
  {
    v80 = v78 + 1;
    *(_DWORD *)(v10 + 108) = v80;
    if (v80 >= *(_DWORD *)(v10 + 104))
    {
      if (*(_BYTE *)(v10 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
      *(_DWORD *)(v10 + 108) = 0;
    }
  }
  *(_QWORD *)(v10 + 48) = v11;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v95, v13);
  if (!v97)
    goto LABEL_90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v94, (uint64_t **)(v10 + 8));
  v15 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v15 = &off_1E34E4098;
  *(_QWORD *)(v15 + 8) = v9;
  *(_BYTE *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a1;
  v93[0] = v15;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v93[1] = v16;
  v92 = v16;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v94, v93);
  v18 = (IPC::Encoder *)v97;
  if (!v97)
    goto LABEL_112;
  v18 = v95;
  v19 = v96;
  v98 = v95;
  v99 = v96;
  v100 = 0;
  v20 = ((unint64_t)v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v21 = v20 - (_QWORD)v95;
  if (v20 < (unint64_t)v95)
  {
    v17 = 0;
  }
  else if (v21 > 0xFFFFFFFFFFFFFFFDLL || (v17 = v21 + 2, v21 + 2 > v96))
  {
    v19 = 0;
    v17 = 0;
    v99 = 0;
  }
  else
  {
    *(_WORD *)((char *)v95 + v21) = 713;
    v100 = v21 + 2;
  }
  if (v17 >= v19)
    goto LABEL_113;
  *((_BYTE *)v18 + v17++) = a2;
  v100 = v17;
  while (1)
  {
    v22 = (char *)(((unint64_t)v18 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v22 >= (char *)v18 + v17)
    {
      v23 = (char *)(v22 - (char *)v18);
      if ((unint64_t)(v22 - (char *)v18) > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v23 + 8) > v19)
      {
        v99 = 0;
      }
      else
      {
        *(_QWORD *)v22 = a3;
        v100 = (unint64_t)(v23 + 8);
      }
    }
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(&v98, (uint64_t)v89);
    v24 = v100;
    v25 = (char *)(((unint64_t)v98 + v100 + 7) & 0xFFFFFFFFFFFFFFF8);
    v17 = v25 - ((char *)v98 + v100);
    if (v25 >= (char *)v98 + v100)
    {
      v17 = v25 - (char *)v98;
      if ((unint64_t)(v25 - (char *)v98) > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_32;
      v24 = v17 + 8;
      if (v17 + 8 > v99)
        goto LABEL_32;
      *(_QWORD *)v25 = v16;
      v100 = v17 + 8;
    }
    if (v99)
    {
      v26 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_QWORD *)(v10 + 56);
      if (v26 + 16 >= v27)
        v26 = 0;
      if (v24 <= 0x10)
        v24 = 16;
      v28 = v26 + v24;
      if (v27 <= v28)
        v28 = 0;
      *(_QWORD *)(v10 + 72) = v28;
      v29 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 16) + 128);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v28, v29));
      if (v30 == 0x80000000 || *(_DWORD *)(v10 + 108))
      {
        if (*(_BYTE *)(v10 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
        *(_DWORD *)(v10 + 108) = 0;
      }
      goto LABEL_59;
    }
LABEL_32:
    v18 = (IPC::Encoder *)v97;
    if (v97)
      break;
LABEL_112:
    __break(1u);
LABEL_113:
    v19 = 0;
    v99 = 0;
  }
  v31 = ((unint64_t)v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v32 = v31 - (_QWORD)v95;
  if (v31 < (unint64_t)v95)
  {
    v33 = 0;
  }
  else
  {
    v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v96)
    {
      *(_WORD *)((char *)v95 + v32) = 2821;
      v33 = v32 + 2;
    }
  }
  v34 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v35 = *(_QWORD *)(v10 + 56);
  if (v34 + 16 >= v35)
    v34 = 0;
  if (v33 <= 0x10)
    v33 = 16;
  v36 = v34 + v33;
  if (v35 <= v36)
    v36 = 0;
  *(_QWORD *)(v10 + 72) = v36;
  v37 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 16) + 128);
  do
    __ldaxr(v37);
  while (__stlxr(v36, v37));
  *(_DWORD *)(v10 + 108) = 0;
  v38 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v38 = 713;
  *(_QWORD *)(v38 + 8) = v11;
  v39 = (void *)(v38 + 16);
  *(_QWORD *)(v38 + 528) = v38 + 16;
  *(_QWORD *)(v38 + 536) = v38 + 16;
  *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v38 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
  v98 = (IPC::Encoder *)v38;
  v40 = *(_QWORD *)(v38 + 544);
  v41 = v40 + 1;
  v42 = *(_QWORD *)(v38 + 552);
  if (v42 >= v40 + 1)
  {
    v43 = *(char **)(v38 + 528);
    v44 = *(_QWORD *)(v38 + 544);
    goto LABEL_47;
  }
  v81 = (2 * v42 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v82 = v81;
    v81 *= 2;
  }
  while (v82 < v41);
  v83 = (char *)mmap(0, v82, 3, 4098, -1, 0);
  if (v83 == (char *)-1)
    goto LABEL_120;
  v43 = v83;
  memcpy(v83, *(const void **)(v38 + 528), *(_QWORD *)(v38 + 544));
  v84 = *(void **)(v38 + 528);
  if (v84 != v39)
    munmap(v84, *(_QWORD *)(v38 + 552));
  *(_QWORD *)(v38 + 528) = v43;
  *(_QWORD *)(v38 + 552) = v82;
  v44 = *(_QWORD *)(v38 + 544);
LABEL_47:
  bzero(&v43[v44], v40 - v44);
  *(_QWORD *)(v38 + 544) = v41;
  v45 = (_BYTE *)(*(_QWORD *)(v38 + 528) + v40);
  *(_QWORD *)(v38 + 536) = v45 + 1;
  *v45 = a2;
  v46 = *(_QWORD *)(v38 + 544);
  v47 = (v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = v47 + 8;
  v49 = *(_QWORD *)(v38 + 552);
  if (v49 >= v47 + 8)
  {
    v50 = *(char **)(v38 + 528);
    goto LABEL_49;
  }
  v85 = (2 * v49 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v86 = v85;
    v85 *= 2;
  }
  while (v86 < v48);
  v87 = (char *)mmap(0, v86, 3, 4098, -1, 0);
  if (v87 == (char *)-1)
  {
LABEL_120:
    __break(0xC471u);
    JUMPOUT(0x197541DB4);
  }
  v50 = v87;
  memcpy(v87, *(const void **)(v38 + 528), *(_QWORD *)(v38 + 544));
  v88 = *(void **)(v38 + 528);
  if (v88 != v39)
    munmap(v88, *(_QWORD *)(v38 + 552));
  *(_QWORD *)(v38 + 528) = v50;
  *(_QWORD *)(v38 + 552) = v86;
  v46 = *(_QWORD *)(v38 + 544);
LABEL_49:
  bzero(&v50[v46], v47 - v46);
  *(_QWORD *)(v38 + 544) = v48;
  v51 = (_QWORD *)(*(_QWORD *)(v38 + 528) + v47);
  *(_QWORD *)(v38 + 536) = v51 + 1;
  *v51 = a3;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v38, v89);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v38, &v92);
  if (IPC::Connection::sendMessageImpl((uint64_t)v94, (uint64_t *)&v98, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v94, v92, &v91);
    if (v91)
    {
      v54 = (unsigned int *)(WTF::RunLoop::main(v53) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 + 1, v54));
      v56 = v91;
      v91 = 0;
      v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v57 = &off_1E34E40C0;
      v57[1] = v56;
      v90 = v57;
      WTF::RunLoop::dispatch();
      v58 = v90;
      v90 = 0;
      if (v58)
        (*(void (**)(_QWORD *))(*v58 + 8))(v58);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v54);
      v59 = v91;
      v91 = 0;
      if (v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    }
  }
  v60 = v98;
  v98 = 0;
  if (v60)
  {
    IPC::Encoder::~Encoder(v60, v52);
    WTF::fastFree(v61, v62);
  }
LABEL_59:
  v63 = v93[0];
  v93[0] = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v94);
}

void *WebKit::WebGPU::RemoteBufferProxy::getMappedRange(WTF::ApproximateTime *a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _BOOL8 v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  uint64_t *v47;
  char v48;
  unint64_t v49;
  int v50;
  void *v51;
  WTF *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  size_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  int v69;
  void *v70;
  WTF *v71;
  char v72;
  IPC::Encoder *v73;
  WTF *v74;
  void *v75;
  WTF *v76;
  char v77;
  unint64_t v78;
  void *result;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  WTF *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v88;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  int v96;
  unsigned int v98;
  unint64_t v99;
  size_t v100;
  uint64_t *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  WTF *v106;
  unint64_t v107;
  char v108;
  char v109;
  int v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  WTF *v115;
  unint64_t v116;
  char v117;
  char v118;
  uint64_t *v119;
  int v120;
  char v121;
  unint64_t v122;
  WTF *v123;
  unint64_t v124;
  char v125;
  int v126;
  IPC::Decoder *v127;

  v103 = a3;
  v104 = a4;
  v7 = *((_QWORD *)a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 10) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v10 = v9 + 30.0;
  if (*(_QWORD *)(v8 + 48) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 56, &v106, v9 + 30.0);
    if (!v108)
    {
LABEL_175:
      v102 = 15;
      goto LABEL_171;
    }
    v83 = v106;
    v82 = v107;
    v84 = ((unint64_t)v106 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v85 = v84 - (_QWORD)v106;
    if (v84 >= (unint64_t)v106)
    {
      v86 = v85 + 2;
      if (v85 <= 0xFFFFFFFFFFFFFFFDLL && v86 <= v107)
      {
        *(_WORD *)((char *)v106 + v85) = 2822;
        goto LABEL_135;
      }
      v82 = 0;
    }
    v86 = 0;
LABEL_135:
    v88 = (char *)(((unint64_t)v83 + v86 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v88 >= (char *)v83 + v86)
    {
      v86 = v88 - (char *)v83 + 8;
      if ((unint64_t)(v88 - (char *)v83) > 0xFFFFFFFFFFFFFFF7 || v86 > v82)
      {
LABEL_170:
        v102 = 17;
LABEL_171:
        v76 = 0;
        LOBYTE(v122) = v102;
        v77 = 1;
        v126 = 1;
        goto LABEL_117;
      }
      *(_QWORD *)v88 = v7;
    }
    if (v82)
    {
      v90 = *(_QWORD *)(v8 + 64);
      v91 = (*(_QWORD *)(v8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v92 = *(_QWORD *)(v8 + 56);
      if (v91 + 16 >= v92)
        v91 = 0;
      if (v86 <= 0x10)
        v86 = 16;
      v93 = v91 + v86;
      if (v92 <= v93)
        v93 = 0;
      *(_QWORD *)(v8 + 72) = v93;
      v94 = (unint64_t *)(*(_QWORD *)(v90 + 16) + 128);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v93, v94));
      v96 = *(_DWORD *)(v8 + 108);
      if (v95 == 0x80000000 || v96 != 0)
      {
        v98 = v96 + 1;
        *(_DWORD *)(v8 + 108) = v98;
        if (v98 >= *(_DWORD *)(v8 + 104))
        {
          if (*(_BYTE *)(v8 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v8 + 84));
          *(_DWORD *)(v8 + 108) = 0;
        }
      }
      *(_QWORD *)(v8 + 48) = v7;
      goto LABEL_2;
    }
    goto LABEL_170;
  }
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 56, &v112, v10);
  if (!v114)
  {
    LOBYTE(v122) = 15;
    v126 = 1;
    goto LABEL_110;
  }
  v11 = v112;
  v12 = v113;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v127, (uint64_t **)(v8 + 8));
  v13 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v127, v13))
  {
    LOBYTE(v122) = 11;
    v13 = 1;
    v126 = 1;
    LOBYTE(v106) = 0;
    v110 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v106, (uint64_t)&v122);
    v111 = 1;
    if (v126 != -1)
      ((void (*)(WTF **, unint64_t *))off_1E34E3ED0[v126])(&v115, &v122);
    goto LABEL_76;
  }
  v122 = v11;
  v123 = (WTF *)v12;
  v124 = 0;
  v14 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = v14 - v11;
  if (v14 < v11)
  {
    v16 = 0;
  }
  else
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_167;
    v16 = v15 + 2;
    if (v15 + 2 > v12)
      goto LABEL_167;
    *(_WORD *)(v11 + v15) = 3536;
    v124 = v15 + 2;
  }
  while (1)
  {
    v17 = (v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = v17 - (v11 + v16);
    if (v17 >= v11 + v16)
    {
      v19 = v17 - v11;
      v20 = v18 + v16 + 8;
      if (v19 > 0xFFFFFFFFFFFFFFF7 || v20 > v12)
      {
        v12 = 0;
        v123 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v19) = v13;
        v124 = v20;
        v16 = v20;
      }
    }
    v22 = (_QWORD *)((v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v22 >= v11 + v16)
    {
      v23 = (char *)v22 - v11;
      if ((unint64_t)v22 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v23 + 8) > v12)
      {
        v123 = 0;
      }
      else
      {
        *v22 = a2;
        v124 = (unint64_t)(v23 + 8);
      }
    }
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(&v122, (uint64_t)&v103);
    if (v123)
    {
      v24 = v124;
      v25 = *(_QWORD *)(v8 + 64);
      v26 = (*(_QWORD *)(v8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_QWORD *)(v8 + 56);
      if (v26 + 16 >= v27)
        v26 = 0;
      if (v124 <= 0x10)
        v24 = 16;
      v28 = v26 + v24;
      if (v27 <= v28)
        v29 = 0;
      else
        v29 = v28;
      *(_QWORD *)(v8 + 72) = v29;
      v30 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v29, v30));
      if (v31 == 0x80000000 || *(_DWORD *)(v8 + 108))
      {
        if (*(_BYTE *)(v8 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v8 + 84));
        *(_DWORD *)(v8 + 108) = 0;
      }
      v11 = v8 + 88;
      while (1)
      {
        v32 = *(unint64_t **)(*(_QWORD *)(v8 + 64) + 16);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(0x80000000uLL, v32));
        v34 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 64) + 16) + 128));
        if (!(v33 | v34 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*(_BYTE *)(v8 + 96))
        {
          v35 = IPC::Semaphore::waitFor((semaphore_t *)(v8 + 88), v10);
          if (v35)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v35);
            if (v36 < v10)
              continue;
          }
        }
        LOBYTE(v119) = 16;
        v120 = 1;
LABEL_51:
        v121 = 1;
        goto LABEL_52;
      }
      atomic_store(0, *(unint64_t **)(*(_QWORD *)(v8 + 64) + 16));
      *(_QWORD *)(v8 + 72) = 0;
      v37 = *(_QWORD *)(v8 + 64);
      v38 = *(_QWORD *)(v37 + 8);
      if (v38 <= 0xFF)
        goto LABEL_166;
      v39 = *(_QWORD *)(v8 + 56);
      v40 = *(_QWORD *)(v37 + 16);
      v41 = v38 - 256;
      if (v39)
      {
        v11 = v39 - 1;
        if (v41 < v39 - 1)
          goto LABEL_166;
      }
      else
      {
        v11 = v41;
      }
      v42 = v40 + 256;
      v43 = WTF::fastMalloc((WTF *)0x48);
      v44 = IPC::Decoder::Decoder(v43, v42, v11, *(_QWORD *)(v8 + 48));
      if (*(_WORD *)(v44 + 50) != 2821)
      {
        v119 = (uint64_t *)v44;
        v120 = 0;
        goto LABEL_51;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v44);
      WTF::fastFree(v45, v46);
      IPC::Connection::waitForSyncReply((uint64_t)v127, v13, 0xDD0u, (uint64_t)&v115, v10);
      LOBYTE(v119) = 0;
      v120 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v119, (uint64_t)&v115);
      v121 = 1;
      if ((_DWORD)v116 != -1)
        ((void (*)(uint64_t **, WTF **))off_1E34E40D8[v116])(&v105, &v115);
    }
    else
    {
      LOBYTE(v119) = 0;
      v121 = 0;
    }
LABEL_52:
    IPC::Connection::popPendingSyncRequestID(v127);
    if (!v121)
    {
      LOBYTE(v106) = 0;
      v111 = 0;
      goto LABEL_76;
    }
    if (v120 == 1)
    {
      LOBYTE(v106) = (_BYTE)v119;
      v50 = 1;
      v110 = 1;
      v111 = 1;
LABEL_75:
      ((void (*)(unint64_t *, uint64_t **))off_1E34E40D8[v50])(&v122, &v119);
      goto LABEL_76;
    }
    if (v120)
      goto LABEL_174;
    LOBYTE(v115) = 0;
    v118 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v119, (uint64_t)&v115);
    if (v118)
    {
      if (!v121)
        goto LABEL_166;
      if (v120)
        goto LABEL_174;
      v47 = v119;
      v119 = 0;
      v48 = v117;
      if (v117)
      {
        v123 = v115;
        v49 = v116;
        v115 = 0;
        v116 = 0;
        v124 = v49;
        v48 = 1;
      }
      else
      {
        LOBYTE(v123) = 0;
      }
      v122 = (unint64_t)v47;
      v125 = v48;
      v126 = 0;
      LOBYTE(v106) = 0;
      v110 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v106, (uint64_t)&v122);
      v111 = 1;
      if (v126 != -1)
        ((void (*)(uint64_t **, unint64_t *))off_1E34E3ED0[v126])(&v105, &v122);
      if (v118)
      {
        if (v117)
        {
          v52 = v115;
          if (v115)
          {
            v115 = 0;
            LODWORD(v116) = 0;
            WTF::fastFree(v52, v51);
          }
        }
      }
    }
    else
    {
      LOBYTE(v106) = 13;
      v110 = 1;
      v111 = 1;
    }
    if (v121)
    {
      v50 = v120;
      if (v120 != -1)
        goto LABEL_75;
    }
LABEL_76:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v127);
    if (v111)
    {
      LOBYTE(v122) = 0;
      v126 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v122, (uint64_t)&v106);
      if (v111 && v110 != -1)
        ((void (*)(WTF **, WTF **))off_1E34E3ED0[v110])(&v115, &v106);
      goto LABEL_110;
    }
    if (v114)
      break;
LABEL_166:
    __break(1u);
LABEL_167:
    v12 = 0;
    v16 = 0;
    v123 = 0;
  }
  v53 = (v112 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = v53 - v112;
  if (v53 < v112)
  {
    v55 = 0;
  }
  else
  {
    v55 = 0;
    if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v54 + 2 <= v113)
    {
      *(_WORD *)(v112 + v54) = 2821;
      v55 = v54 + 2;
    }
  }
  v56 = *(_QWORD *)(v8 + 64);
  v57 = (*(_QWORD *)(v8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = *(_QWORD *)(v8 + 56);
  if (v57 + 16 >= v58)
    v57 = 0;
  if (v55 <= 0x10)
    v55 = 16;
  v59 = v57 + v55;
  if (v58 <= v59)
    v59 = 0;
  *(_QWORD *)(v8 + 72) = v59;
  v60 = (unint64_t *)(*(_QWORD *)(v56 + 16) + 128);
  do
    __ldaxr(v60);
  while (__stlxr(v59, v60));
  *(_DWORD *)(v8 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v105, (uint64_t **)(v8 + 8));
  v61 = v105;
  v119 = 0;
  IPC::Connection::createSyncMessageEncoder(3536, v7, (uint64_t *)&v119, (uint64_t *)&v127);
  v62 = (uint64_t *)v127;
  v63 = *((_QWORD *)v127 + 68);
  v64 = (v63 + 7) & 0xFFFFFFFFFFFFFFF8;
  v65 = v64 + 8;
  v66 = *((_QWORD *)v127 + 69);
  if (v66 >= v64 + 8)
  {
    v67 = *((_QWORD *)v127 + 66);
    goto LABEL_95;
  }
  v99 = (2 * v66 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v100 = v99;
    v99 *= 2;
  }
  while (v100 < v65);
  result = mmap(0, v100, 3, 4098, -1, 0);
  if (result == (void *)-1)
  {
    __break(0xC471u);
    return result;
  }
  v67 = (uint64_t)result;
  memcpy(result, (const void *)v62[66], v62[68]);
  v101 = (uint64_t *)v62[66];
  if (v101 != v62 + 2)
    munmap(v101, v62[69]);
  v62[66] = v67;
  v62[69] = v100;
  v63 = v62[68];
LABEL_95:
  bzero((void *)(v67 + v63), v64 - v63);
  v62[68] = v65;
  v68 = (unint64_t *)(v62[66] + v64);
  v62[67] = (uint64_t)(v68 + 1);
  *v68 = a2;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v62, &v103);
  IPC::Connection::sendSyncMessage((uint64_t)v61, (uint64_t)v119, (uint64_t *)&v127, 0, (uint64_t)&v115, v10);
  if ((_DWORD)v116)
  {
    if ((_DWORD)v116 == 1)
    {
      LOBYTE(v122) = (_BYTE)v115;
      v69 = 1;
      v126 = 1;
      goto LABEL_106;
    }
LABEL_174:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_175;
  }
  LOBYTE(v106) = 0;
  v109 = 0;
  IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t *)v115, (uint64_t)&v106);
  if (v109)
  {
    if ((_DWORD)v116)
      goto LABEL_174;
    v71 = v115;
    v115 = 0;
    if (v108)
    {
      v123 = v106;
      v124 = v107;
      v72 = 1;
    }
    else
    {
      v72 = 0;
      LOBYTE(v123) = 0;
    }
    v69 = 0;
    v122 = (unint64_t)v71;
    v125 = v72;
    v126 = 0;
LABEL_106:
    ((void (*)(WTF **, WTF **))off_1E34E40D8[v69])(&v106, &v115);
  }
  else
  {
    LOBYTE(v122) = 13;
    v126 = 1;
    v69 = v116;
    if ((_DWORD)v116 != -1)
      goto LABEL_106;
  }
  v73 = v127;
  v127 = 0;
  if (v73)
  {
    IPC::Encoder::~Encoder(v73, v70);
    WTF::fastFree(v74, v75);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v105);
LABEL_110:
  v76 = 0;
  v77 = 1;
  if (v126 || !v125)
  {
LABEL_117:
    result = (void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a5 + 16))(*a5, 0, 0);
    if ((v77 & 1) == 0 && v76)
      goto LABEL_124;
  }
  else
  {
    v76 = v123;
    v78 = HIDWORD(v124);
    v123 = 0;
    v124 = 0;
    if (!v76 || v78 <= a2 || (_BYTE)v104 && v103 + a2 > v78)
    {
      v77 = 0;
      goto LABEL_117;
    }
    if ((_BYTE)v104)
      v81 = v103;
    else
      v81 = v78 - a2;
    (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, (char *)v76 + a2, v81);
LABEL_124:
    result = (void *)WTF::fastFree(v76, v80);
  }
  if (v126 != -1)
    return (void *)((uint64_t (*)(WTF **, unint64_t *))off_1E34E3ED0[v126])(&v106, &v122);
  return result;
}

void WebKit::WebGPU::RemoteBufferProxy::getBufferContents(WebKit::WebGPU::RemoteBufferProxy *this)
{
  __break(0xC471u);
}

unsigned int *WebKit::WebGPU::RemoteBufferProxy::copy(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v4;
  unsigned int *v6;
  WTF::ApproximateTime *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  size_t v12;
  double v13;
  double v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  void *v28;
  WTF::RunLoop *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v46;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v56;
  unsigned int v57;
  _BYTE v58[16];
  unsigned __int8 v59;
  WTF::ApproximateTime *v60;
  _QWORD *v61;
  uint64_t v62;
  IPC::Encoder *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_unfair_lock_s *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;

  if ((result[22] & 2) == 0)
    return result;
  v6 = result;
  WebCore::SharedMemory::copySpan();
  v58[0] = 0;
  v59 = 0;
  v7 = v60;
  if (v60)
  {
    WebCore::SharedMemory::createHandle();
    std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>((WTF::MachSendRight *)v58, (uint64_t)&v68);
    if (v70)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v68);
    v8 = (uint64_t)v60;
    if (v60)
    {
      do
        v9 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v9 + 1, (unsigned int *)v8));
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = v59;
  v11 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 10) + 176) + 96) + 96);
  v12 = *((_QWORD *)v6 + 8);
  WTF::ApproximateTime::now(v7);
  v14 = v13 + 30.0;
  if (*((_QWORD *)v11 + 6) == v12)
  {
LABEL_10:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 14), &v68, v14);
    if (v70)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)v11 + 1);
      v15 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v15 = &off_1E34E4108;
      *(_QWORD *)(v15 + 8) = v8;
      *(_BYTE *)(v15 + 16) = v10;
      v65 = v15;
      v66 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v64 = v66;
      IPC::Connection::addAsyncReplyHandler((uint64_t)v67, &v65);
      if (v70)
      {
        v17 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = v17 - v68;
        if (v17 < v68)
        {
          v19 = 0;
        }
        else
        {
          v19 = 0;
          if (v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= v69)
          {
            *(_WORD *)(v68 + v18) = 2821;
            v19 = v18 + 2;
          }
        }
        v20 = *((_QWORD *)v11 + 8);
        v21 = (*((_QWORD *)v11 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = *((_QWORD *)v11 + 7);
        if (v21 + 16 >= v22)
          v21 = 0;
        if (v19 <= 0x10)
          v19 = 16;
        v23 = v21 + v19;
        if (v22 <= v23)
          v23 = 0;
        *((_QWORD *)v11 + 9) = v23;
        v24 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
        do
          __ldaxr(v24);
        while (__stlxr(v23, v24));
        v11[27] = 0;
        v8 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v8 = 710;
        *(_QWORD *)(v8 + 8) = v12;
        *(_QWORD *)(v8 + 528) = v8 + 16;
        *(_QWORD *)(v8 + 536) = v8 + 16;
        *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v8 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
        v63 = (IPC::Encoder *)v8;
        IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>((IPC::Encoder *)v8, (unint64_t)v58);
        v25 = *(_QWORD *)(v8 + 544);
        v10 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
        v4 = v10 + 8;
        v26 = *(_QWORD *)(v8 + 552);
        if (v26 >= v10 + 8)
        {
          v11 = *(unsigned int **)(v8 + 528);
          goto LABEL_26;
        }
        v56 = (2 * v26 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v12 = v56;
          v56 *= 2;
        }
        while (v12 < v4);
        result = (unsigned int *)mmap(0, v12, 3, 4098, -1, 0);
        if (result == (unsigned int *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v11 = result;
        memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
        v16 = *(void **)(v8 + 528);
        if (v16 == (void *)(v8 + 16))
        {
LABEL_78:
          *(_QWORD *)(v8 + 528) = v11;
          *(_QWORD *)(v8 + 552) = v12;
          v25 = *(_QWORD *)(v8 + 544);
LABEL_26:
          bzero((char *)v11 + v25, v10 - v25);
          *(_QWORD *)(v8 + 544) = v4;
          v27 = (_QWORD *)(*(_QWORD *)(v8 + 528) + v10);
          *(_QWORD *)(v8 + 536) = v27 + 1;
          *v27 = a4;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, &v64);
          if (IPC::Connection::sendMessageImpl((uint64_t)v67, (uint64_t *)&v63, 1, 0))
          {
            IPC::Connection::takeAsyncReplyHandler(v67, v64, &v62);
            if (v62)
            {
              v30 = (unsigned int *)(WTF::RunLoop::main(v29) + 8);
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 + 1, v30));
              v32 = v62;
              v62 = 0;
              v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v33 = &off_1E34E4130;
              v33[1] = v32;
              v61 = v33;
              WTF::RunLoop::dispatch();
              v34 = v61;
              v61 = 0;
              if (v34)
                (*(void (**)(_QWORD *))(*v34 + 8))(v34);
              WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v30);
              v35 = v62;
              v62 = 0;
              if (v35)
                (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
            }
          }
          v36 = v63;
          v63 = 0;
          if (v36)
          {
            IPC::Encoder::~Encoder(v36, v28);
            WTF::fastFree(v37, v38);
          }
          v39 = v65;
          v65 = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
          v8 = 0;
          goto LABEL_39;
        }
      }
      else
      {
        __break(1u);
      }
      munmap(v16, *(_QWORD *)(v8 + 552));
      goto LABEL_78;
    }
    goto LABEL_39;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 14), &v68, v13 + 30.0);
  if (!v70)
    goto LABEL_39;
  v41 = v68;
  v40 = v69;
  v42 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v43 = v42 - v68;
  if (v42 >= v68)
  {
    v44 = v43 + 2;
    if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v44 <= v69)
    {
      *(_WORD *)(v68 + v43) = 2822;
      goto LABEL_53;
    }
    v40 = 0;
  }
  v44 = 0;
LABEL_53:
  v46 = (_QWORD *)((v41 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v46 >= v41 + v44)
  {
    v44 = (unint64_t)v46 - v41 + 8;
    if ((unint64_t)v46 - v41 > 0xFFFFFFFFFFFFFFF7 || v44 > v40)
      goto LABEL_39;
    *v46 = v12;
  }
  if (v40)
  {
    v48 = *((_QWORD *)v11 + 8);
    v49 = (*((_QWORD *)v11 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v50 = *((_QWORD *)v11 + 7);
    if (v49 + 16 >= v50)
      v49 = 0;
    if (v44 <= 0x10)
      v44 = 16;
    v51 = v49 + v44;
    if (v50 <= v51)
      v51 = 0;
    *((_QWORD *)v11 + 9) = v51;
    v52 = (unint64_t *)(*(_QWORD *)(v48 + 16) + 128);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v51, v52));
    v54 = v11[27];
    if (v53 == 0x80000000 || v54 != 0)
    {
      v57 = v54 + 1;
      v11[27] = v57;
      if (v57 >= v11[26])
      {
        if (*((_BYTE *)v11 + 96))
          MEMORY[0x19AEBA1A0](v11[21]);
        v11[27] = 0;
      }
    }
    *((_QWORD *)v11 + 6) = v12;
    goto LABEL_10;
  }
LABEL_39:
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v8);
  if (v59)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v58);
  result = (unsigned int *)v60;
  v60 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  return result;
}

uint64_t WebKit::WebGPU::RemoteBufferProxy::unmap(WebKit::WebGPU::RemoteBufferProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;

  v2 = *((_QWORD *)this + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v52, v4 + 30.0);
  if (!v54)
    goto LABEL_78;
  v21 = v52;
  v20 = v53;
  v22 = (v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v52;
  if (v22 < v52)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v53)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v52 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v52, v5);
  if (!v54)
    goto LABEL_78;
  v7 = v52;
  v8 = v53;
  v9 = (_WORD *)((v52 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v52;
  if ((unint64_t)v9 < v52)
  {
    v11 = 0;
    if (v53)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v53)
      goto LABEL_60;
    *v9 = 715;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          result = MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v54)
  {
    __break(1u);
LABEL_80:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v52;
  v9 = (_WORD *)((v52 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_80;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v53)
    goto LABEL_80;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(v3 + 8));
  v45 = v51;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 715;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v55 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v55, 1, 0);
  v48 = v55;
  v55 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
LABEL_78:
  *((_BYTE *)this + 88) = 0;
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteBufferProxy::destroy(WebKit::WebGPU::RemoteBufferProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 711;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 711;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebGPU::RemoteBufferProxy::setLabelInternal(WebKit::WebGPU::RemoteBufferProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 714;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 714;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteCommandBufferProxy::~RemoteCommandBufferProxy(WebKit::WebGPU::RemoteCommandBufferProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 738;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 738;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E3EF0;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteCommandBufferProxy::~RemoteCommandBufferProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteCommandBufferProxy::setLabelInternal(WTF::ApproximateTime **this, const WTF::String *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)a2;
  return WebKit::WebGPU::RemoteCommandBufferProxy::send<Messages::RemoteCommandBuffer::SetLabel>(this[3], *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[5] + 22) + 96) + 96), &v3);
}

unsigned __int8 ***WebKit::WebGPU::RemoteCommandBufferProxy::send<Messages::RemoteCommandBuffer::SetLabel>(WTF::ApproximateTime *a1, uint64_t a2, uint64_t **a3)
{
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  IPC::Encoder *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v50;
  uint64_t *v51;
  IPC::Encoder *v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;
  unint64_t v56;
  unint64_t v57;

  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(WTF::ApproximateTime **)(a2 + 48) == a1)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v52, v7);
      if (!v54)
        break;
      v55 = v52;
      v56 = v53;
      v57 = 0;
      v9 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= (unint64_t)v52;
      v11 = v9 - (_QWORD)v52;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v53)
        {
          v56 = 0;
        }
        else
        {
          *(_WORD *)((char *)v52 + v11) = 739;
          v57 = v11 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v55, *a3);
      if (v56)
      {
        v14 = v57;
        v15 = *(_QWORD *)(a2 + 64);
        v16 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(a2 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v57 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(a2 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(a2 + 108))
        {
          if (*(_BYTE *)(a2 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
        return result;
      }
      if (v54)
      {
        v22 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v52;
        if (v22 < (unint64_t)v52)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v53)
          {
            *(_WORD *)((char *)v52 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a2 + 64);
        v26 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a2 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a2 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a2 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(a2 + 8));
        v30 = v51;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 739;
        *(_QWORD *)(v31 + 8) = a1;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v55 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, *a3);
        IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v55, 1, 0);
        v33 = v55;
        v55 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
      }
      __break(1u);
LABEL_76:
      v36 = 0;
LABEL_77:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v13 + v39)
      {
        v39 = v41 - (char *)v13 + 8;
        if ((unint64_t)(v41 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return result;
        *(_QWORD *)v41 = a1;
      }
      if (!v36)
        return result;
      v43 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a2 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a2 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a2 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        *(_DWORD *)(a2 + 108) = v50;
        if (v50 >= *(_DWORD *)(a2 + 104))
        {
          if (*(_BYTE *)(a2 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
      }
      *(_QWORD *)(a2 + 48) = a1;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v55, v6 + 30.0);
    if ((_BYTE)v57)
    {
      v13 = v55;
      v36 = v56;
      v37 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v55;
      if (v37 < (unint64_t)v55)
        goto LABEL_77;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v56)
        goto LABEL_76;
      *(_WORD *)((char *)v55 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteCommandEncoderProxy::~RemoteCommandEncoderProxy(WebKit::WebGPU::RemoteCommandEncoderProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 747;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 747;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E3F18;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteCommandEncoderProxy::~RemoteCommandEncoderProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteCommandEncoderProxy::beginRenderPass@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, char a3@<W3>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  void *v9;
  WTF::ApproximateTime *v10;
  double v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unsigned int v62;
  WTF::ApproximateTime *v63;
  uint64_t v64[15];
  char v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 32), a2, a3, (uint64_t)v64, a5);
  if (!v65)
  {
    *a4 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v64, v9);
  }
  v10 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v63 = v10;
  if (!v65)
    goto LABEL_86;
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(v10);
  v12 = v11 + 30.0;
  if (*(_QWORD *)(v5 + 48) != v6)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v70, v11 + 30.0);
    if (!(_BYTE)v72)
      goto LABEL_50;
    v46 = v70;
    v47 = v71;
    v48 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v49 = v48 - v70;
    if (v48 < v70)
    {
      v51 = 0;
      v50 = v71;
    }
    else
    {
      v50 = 0;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v51 = 0;
      }
      else
      {
        v51 = 0;
        if (v49 + 2 <= v71)
        {
          *(_WORD *)(v70 + v49) = 2822;
          v50 = v47;
          v51 = v49 + 2;
        }
      }
    }
    v52 = (_QWORD *)((v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v52 >= v46 + v51)
    {
      v51 = (unint64_t)v52 - v46 + 8;
      if ((unint64_t)v52 - v46 > 0xFFFFFFFFFFFFFFF7 || v51 > v50)
        goto LABEL_50;
      *v52 = v6;
    }
    if (!v50)
    {
LABEL_50:
      v41 = 0;
      goto LABEL_53;
    }
    v54 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v55 = *(_QWORD *)(v5 + 56);
    if (v54 + 16 >= v55)
      v54 = 0;
    if (v51 <= 0x10)
      v51 = 16;
    v56 = v54 + v51;
    if (v55 <= v56)
      v57 = 0;
    else
      v57 = v56;
    *(_QWORD *)(v5 + 72) = v57;
    v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v57, v58));
    v60 = *(_DWORD *)(v5 + 108);
    if (v59 == 0x80000000 || v60 != 0)
    {
      v62 = v60 + 1;
      *(_DWORD *)(v5 + 108) = v62;
      if (v62 >= *(_DWORD *)(v5 + 104))
      {
        if (*(_BYTE *)(v5 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
        *(_DWORD *)(v5 + 108) = 0;
      }
    }
    *(_QWORD *)(v5 + 48) = v6;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v67, v12);
  if (!v69)
    goto LABEL_50;
  v70 = v67;
  v71 = v68;
  v72 = 0;
  v13 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v67;
  v15 = v13 - v67;
  if (v14)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v68)
      goto LABEL_87;
    *(_WORD *)(v67 + v15) = 741;
    v72 = v15 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::encode((char *)&v70, v64);
    v17 = v72;
    v18 = (_QWORD *)((v70 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v18 >= v70 + v72)
    {
      v17 = (unint64_t)v18 - v70 + 8;
      if ((unint64_t)v18 - v70 > 0xFFFFFFFFFFFFFFF7 || v17 > v71)
        goto LABEL_34;
      *v18 = v63;
      v72 = v17;
    }
    if (v71)
    {
      v20 = *(_QWORD *)(v5 + 64);
      v21 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_QWORD *)(v5 + 56);
      if (v21 + 16 >= v22)
        v21 = 0;
      if (v17 <= 0x10)
        v17 = 16;
      v23 = v21 + v17;
      if (v22 <= v23)
        v24 = 0;
      else
        v24 = v23;
      *(_QWORD *)(v5 + 72) = v24;
      v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v24, v25));
      if (v26 == 0x80000000 || *(_DWORD *)(v5 + 108))
      {
        if (*(_BYTE *)(v5 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
        *(_DWORD *)(v5 + 108) = 0;
      }
      goto LABEL_51;
    }
LABEL_34:
    if (v69)
      break;
LABEL_86:
    __break(1u);
LABEL_87:
    v71 = 0;
  }
  v27 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = v27 - v67;
  if (v27 < v67)
  {
    v29 = 0;
  }
  else
  {
    v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v68)
    {
      *(_WORD *)(v67 + v28) = 2821;
      v29 = v28 + 2;
    }
  }
  v30 = *(_QWORD *)(v5 + 64);
  v31 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v32 = *(_QWORD *)(v5 + 56);
  if (v31 + 16 >= v32)
    v31 = 0;
  if (v29 <= 0x10)
    v29 = 16;
  v33 = v31 + v29;
  if (v32 <= v33)
    v33 = 0;
  *(_QWORD *)(v5 + 72) = v33;
  v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
  do
    __ldaxr(v34);
  while (__stlxr(v33, v34));
  *(_DWORD *)(v5 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)(v5 + 8));
  v35 = v66;
  v36 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v36 = 741;
  *(_QWORD *)(v36 + 8) = v6;
  *(_QWORD *)(v36 + 528) = v36 + 16;
  *(_QWORD *)(v36 + 536) = v36 + 16;
  *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v36 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
  v70 = v36;
  IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::encode((IPC::Encoder *)v36, v64);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v36, (uint64_t *)&v63);
  v5 = IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)&v70, 1, 0);
  v38 = (IPC::Encoder *)v70;
  v70 = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v37);
    WTF::fastFree(v39, v40);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v66);
  if ((_DWORD)v5)
    goto LABEL_50;
LABEL_51:
  v42 = *(_QWORD *)(a1 + 32);
  v6 = (uint64_t)v63;
  v43 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(v43 + 16) = 0;
  *(_DWORD *)(v43 + 8) = 1;
  *(_QWORD *)v43 = off_1E34E4D50;
  *(_QWORD *)(v43 + 24) = v6;
  ++*(_DWORD *)(v42 + 8);
  *(_QWORD *)(v43 + 32) = v42;
  ++*(_DWORD *)(a1 + 8);
  *(_QWORD *)(v43 + 40) = a1;
  if (!v65)
    goto LABEL_86;
  v41 = v43;
  v44 = v64[0];
  v64[0] = 0;
  *(_QWORD *)(v43 + 16) = v44;
  WebKit::WebGPU::RemoteRenderPassEncoderProxy::setLabelInternal((WebKit::WebGPU::RemoteRenderPassEncoderProxy *)v43, (const WTF::String *)(v43 + 16));
LABEL_53:
  *a4 = v41;
  return std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v64, v9);
}

WTF::StringImpl *WebKit::WebGPU::RemoteCommandEncoderProxy::beginComputePass@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::ApproximateTime *v12;
  uint64_t *v13;
  double v14;
  double v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  _BYTE *v47;
  void *v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v62;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  unsigned int v71;
  unint64_t v72;
  void *v73;
  WTF::ApproximateTime *v74;
  WTF::StringImpl *v75;
  __int128 v76;
  uint64_t v77;
  unsigned __int8 v78;
  WTF::StringImpl *v79;
  __int128 v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  char v86;

  LOBYTE(v79) = 0;
  v82 = 0;
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_24;
  result = (WTF::StringImpl *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 32), a2, (uint64_t)&v75, a4);
  v8 = v78;
  if (v82 != v78)
  {
    if (!v82)
    {
      v10 = 0;
      v11 = v75;
      v75 = 0;
      v79 = v11;
      v80 = v76;
      v81 = v77;
      v82 = 1;
      goto LABEL_17;
    }
    result = v79;
    v79 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
    v82 = 0;
LABEL_16:
    v10 = 1;
    goto LABEL_17;
  }
  if (!v82)
    goto LABEL_16;
  v9 = v75;
  v75 = 0;
  result = v79;
  v79 = v9;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  v10 = 0;
  v80 = v76;
  LOBYTE(v81) = v77;
LABEL_17:
  if (v8)
  {
    result = v75;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v75, v7);
        if (v10)
          goto LABEL_22;
        goto LABEL_24;
      }
      *(_DWORD *)v75 -= 2;
    }
  }
  if (v10)
  {
LABEL_22:
    *a3 = 0;
    return result;
  }
LABEL_24:
  v74 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v12 = *(WTF::ApproximateTime **)(a1 + 24);
  v13 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(v74);
  v15 = v14 + 30.0;
  if ((WTF::ApproximateTime *)v13[6] == v12)
    goto LABEL_25;
  result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v13 + 7), &v75, v14 + 30.0);
  if (!BYTE8(v76))
    goto LABEL_79;
  v57 = v75;
  v56 = v76;
  v58 = ((unint64_t)v75 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v59 = v58 - (_QWORD)v75;
  if (v58 < (unint64_t)v75)
    goto LABEL_131;
  v60 = v59 + 2;
  if (v59 > 0xFFFFFFFFFFFFFFFDLL || v60 > (unint64_t)v76)
  {
    v56 = 0;
LABEL_131:
    v60 = 0;
    goto LABEL_95;
  }
  *(_WORD *)((char *)v75 + v59) = 2822;
LABEL_95:
  v62 = (char *)(((unint64_t)v57 + v60 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v62 >= (char *)v57 + v60)
  {
    v60 = v62 - (char *)v57 + 8;
    if ((unint64_t)(v62 - (char *)v57) > 0xFFFFFFFFFFFFFFF7 || v60 > v56)
      goto LABEL_79;
    *(_QWORD *)v62 = v12;
  }
  if (!v56)
    goto LABEL_79;
  v64 = (v13[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = v13[7];
  if (v64 + 16 >= v65)
    v64 = 0;
  if (v60 <= 0x10)
    v60 = 16;
  v66 = v64 + v60;
  if (v65 <= v66)
    v66 = 0;
  v13[9] = v66;
  v67 = (unint64_t *)(*(_QWORD *)(v13[8] + 16) + 128);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v66, v67));
  v69 = *((_DWORD *)v13 + 27);
  if (v68 == 0x80000000 || v69 != 0)
  {
    v71 = v69 + 1;
    *((_DWORD *)v13 + 27) = v71;
    if (v71 >= *((_DWORD *)v13 + 26))
    {
      if (*((_BYTE *)v13 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v13 + 21));
      *((_DWORD *)v13 + 27) = 0;
    }
  }
  v13[6] = (uint64_t)v12;
LABEL_25:
  result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v13 + 7), &v84, v15);
  if (v86)
  {
    v17 = v84;
    v18 = v85;
    v75 = v84;
    v76 = v85;
    v19 = ((unint64_t)v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v20 = v19 - (_QWORD)v84;
    if (v19 < (unint64_t)v84)
      goto LABEL_133;
    v21 = v20 + 2;
    if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v85)
      goto LABEL_127;
    *(_WORD *)((char *)v84 + v20) = 740;
    *((_QWORD *)&v76 + 1) = v20 + 2;
    while (1)
    {
      if (v82)
      {
        if (v21 >= v18)
        {
          *(_QWORD *)&v76 = 0;
        }
        else
        {
          *((_BYTE *)v17 + v21) = 1;
          *((_QWORD *)&v76 + 1) = v21 + 1;
          if (!v82)
            goto LABEL_132;
        }
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v75, (uint64_t *)&v79);
        IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>((uint64_t *)&v75, (uint64_t)&v80);
        v21 = *((_QWORD *)&v76 + 1);
        v18 = v76;
        v17 = v75;
      }
      else if (v21 >= v18)
      {
        v18 = 0;
        *(_QWORD *)&v76 = 0;
      }
      else
      {
        *((_BYTE *)v17 + v21++) = 0;
        *((_QWORD *)&v76 + 1) = v21;
      }
      v23 = (char *)(((unint64_t)v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v23 < (char *)v17 + v21)
        goto LABEL_42;
      v24 = v23 - (char *)v17;
      if ((unint64_t)(v23 - (char *)v17) <= 0xFFFFFFFFFFFFFFF7)
      {
        v21 = v24 + 8;
        if (v24 + 8 <= v18)
          break;
      }
LABEL_57:
      if (!v86)
        goto LABEL_126;
      v32 = ((unint64_t)v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v33 = v32 - (_QWORD)v84;
      if (v32 < (unint64_t)v84)
      {
        v34 = 0;
      }
      else
      {
        v34 = 0;
        if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v85)
        {
          *(_WORD *)((char *)v84 + v33) = 2821;
          v34 = v33 + 2;
        }
      }
      v35 = v13[8];
      v36 = (v13[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v13[7];
      if (v36 + 16 >= v37)
        v36 = 0;
      if (v34 <= 0x10)
        v34 = 16;
      v38 = v36 + v34;
      if (v37 <= v38)
        v38 = 0;
      v13[9] = v38;
      v39 = (unint64_t *)(*(_QWORD *)(v35 + 16) + 128);
      do
        __ldaxr(v39);
      while (__stlxr(v38, v39));
      *((_DWORD *)v13 + 27) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v83, (uint64_t **)v13 + 1);
      v13 = v83;
      v40 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v40 = 740;
      *(_QWORD *)(v40 + 8) = v12;
      *(_QWORD *)(v40 + 528) = v40 + 16;
      *(_QWORD *)(v40 + 536) = v40 + 16;
      *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v40 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
      v75 = (WTF::StringImpl *)v40;
      v41 = v82;
      v42 = *(_QWORD *)(v40 + 544);
      v43 = v42 + 1;
      v44 = *(_QWORD *)(v40 + 552);
      if (v44 < v42 + 1)
      {
        v72 = (2 * v44 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v12 = (WTF::ApproximateTime *)v72;
          v72 *= 2;
        }
        while ((unint64_t)v12 < v43);
        result = (WTF::StringImpl *)mmap(0, (size_t)v12, 3, 4098, -1, 0);
        if (result == (WTF::StringImpl *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v45 = result;
        memcpy(result, *(const void **)(v40 + 528), *(_QWORD *)(v40 + 544));
        v73 = *(void **)(v40 + 528);
        if (v73 != (void *)(v40 + 16))
          munmap(v73, *(_QWORD *)(v40 + 552));
        *(_QWORD *)(v40 + 528) = v45;
        *(_QWORD *)(v40 + 552) = v12;
        v46 = *(_QWORD *)(v40 + 544);
      }
      else
      {
        v45 = *(WTF::StringImpl **)(v40 + 528);
        v46 = *(_QWORD *)(v40 + 544);
      }
      bzero((char *)v45 + v46, v42 - v46);
      *(_QWORD *)(v40 + 544) = v43;
      v47 = (_BYTE *)(*(_QWORD *)(v40 + 528) + v42);
      *(_QWORD *)(v40 + 536) = v47 + 1;
      if (v41)
      {
        *v47 = 1;
        if (v82)
        {
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v40, (uint64_t *)&v79);
          IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>((IPC::Encoder *)v40, (uint64_t)&v80);
          goto LABEL_76;
        }
LABEL_132:
        std::__throw_bad_optional_access[abi:sn180100]();
LABEL_133:
        v21 = 0;
      }
      else
      {
        *v47 = 0;
LABEL_76:
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v40, (uint64_t *)&v74);
        v13 = (uint64_t *)IPC::Connection::sendMessageImpl((uint64_t)v13, (uint64_t *)&v75, 1, 0);
        v49 = v75;
        v75 = 0;
        if (v49)
        {
          IPC::Encoder::~Encoder(v49, v48);
          WTF::fastFree(v50, v51);
        }
        result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v83);
        if ((_DWORD)v13)
          goto LABEL_79;
LABEL_80:
        v53 = *(_QWORD *)(a1 + 32);
        v12 = v74;
        v54 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)(v54 + 16) = 0;
        *(_DWORD *)(v54 + 8) = 1;
        *(_QWORD *)v54 = off_1E34E3D98;
        *(_QWORD *)(v54 + 24) = v12;
        ++*(_DWORD *)(v53 + 8);
        *(_QWORD *)(v54 + 32) = v53;
        ++*(_DWORD *)(a1 + 8);
        *(_QWORD *)(v54 + 40) = a1;
        v17 = (WTF::StringImpl *)v82;
        if (v82)
        {
          v52 = v54;
          v55 = v79;
          v79 = 0;
          *(_QWORD *)(v54 + 16) = v55;
          v75 = (WTF::StringImpl *)(v54 + 16);
          result = (WTF::StringImpl *)WebKit::WebGPU::RemoteComputePassEncoderProxy::send<Messages::RemoteComputePassEncoder::SetLabel>(*(WTF::ApproximateTime **)(v54 + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 40) + 40)+ 176)+ 96)+ 96), (uint64_t **)&v75);
          goto LABEL_82;
        }
LABEL_126:
        __break(1u);
LABEL_127:
        v18 = 0;
        v21 = 0;
        *(_QWORD *)&v76 = 0;
      }
    }
    *(_QWORD *)v23 = v74;
    *((_QWORD *)&v76 + 1) = v24 + 8;
    v18 = v76;
LABEL_42:
    if (v18)
    {
      v25 = v13[8];
      v26 = (v13[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
      v27 = v13[7];
      if (v26 + 16 >= v27)
        v26 = 0;
      if (v21 <= 0x10)
        v21 = 16;
      v28 = v26 + v21;
      if (v27 <= v28)
        v29 = 0;
      else
        v29 = v28;
      v13[9] = v29;
      v30 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v29, v30));
      if (v31 == 0x80000000 || *((_DWORD *)v13 + 27))
      {
        if (*((_BYTE *)v13 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v13 + 21));
        *((_DWORD *)v13 + 27) = 0;
      }
      goto LABEL_80;
    }
    goto LABEL_57;
  }
LABEL_79:
  v52 = 0;
LABEL_82:
  *a3 = v52;
  if (v82)
  {
    result = v79;
    v79 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteCommandEncoderProxy::copyBufferToBuffer(WebKit::WebGPU::RemoteCommandEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3, const WebCore::WebGPU::Buffer *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  unsigned __int8 ***v7;
  unint64_t v8;
  size_t v9;
  unsigned __int8 ***result;
  BOOL v16;
  size_t v17;
  uint64_t *v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  size_t v66;
  unint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  size_t v72;
  unint64_t v73;
  char *v74;
  _QWORD *v75;
  void *v76;
  IPC::Encoder *v77;
  WTF *v78;
  void *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  unsigned int v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  size_t v100;
  char *v101;
  unsigned __int8 ***v102;
  unint64_t v103;
  size_t v104;
  char *v105;
  unsigned __int8 ***v106;
  unint64_t v107;
  unint64_t v108;
  unsigned __int8 ***v109;
  uint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  IPC::Encoder *v115;

  v110 = (*(uint64_t (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a4);
  v109 = result;
  if (v110)
    v16 = result == 0;
  else
    v16 = 1;
  if (v16)
    return result;
  v17 = *((_QWORD *)this + 3);
  v18 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v20 = v19 + 30.0;
  if (v18[6] != v17)
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v18 + 7), &v112, v19 + 30.0);
    if (!v114)
      return result;
    v80 = v112;
    v81 = v113;
    v82 = (v112 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v83 = v82 - v112;
    if (v82 < v112)
    {
      v85 = 0;
      v84 = v113;
    }
    else
    {
      v84 = 0;
      if (v83 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v85 = 0;
      }
      else
      {
        v85 = 0;
        if (v83 + 2 <= v113)
        {
          *(_WORD *)(v112 + v83) = 2822;
          v84 = v81;
          v85 = v83 + 2;
        }
      }
    }
    v86 = (_QWORD *)((v80 + v85 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v86 >= v80 + v85)
    {
      v85 = (unint64_t)v86 - v80 + 8;
      if ((unint64_t)v86 - v80 > 0xFFFFFFFFFFFFFFF7 || v85 > v84)
        return result;
      *v86 = v17;
    }
    if (!v84)
      return result;
    v88 = (v18[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v89 = v18[7];
    if (v88 + 16 >= v89)
      v88 = 0;
    if (v85 <= 0x10)
      v85 = 16;
    v90 = v88 + v85;
    if (v89 <= v90)
      v91 = 0;
    else
      v91 = v90;
    v18[9] = v91;
    v92 = (unint64_t *)(*(_QWORD *)(v18[8] + 16) + 128);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v91, v92));
    v94 = *((_DWORD *)v18 + 27);
    if (v93 == 0x80000000 || v94 != 0)
    {
      v96 = v94 + 1;
      *((_DWORD *)v18 + 27) = v96;
      if (v96 >= *((_DWORD *)v18 + 26))
      {
        if (*((_BYTE *)v18 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v18 + 21));
        *((_DWORD *)v18 + 27) = 0;
      }
    }
    v18[6] = v17;
  }
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v18 + 7), &v112, v20);
  if (!v114)
    return result;
  v21 = v112;
  v22 = v113;
  v23 = (v112 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v24 = v23 - v112;
  if (v23 >= v112)
  {
    v25 = v24 + 2;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v25 <= v113)
    {
      *(_WORD *)(v112 + v24) = 743;
      goto LABEL_13;
    }
    v22 = 0;
  }
  v25 = 0;
LABEL_13:
  v27 = (v21 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = v27 - (v21 + v25);
  if (v27 >= v21 + v25)
  {
    v29 = v27 - v21;
    v30 = v28 + v25 + 8;
    if (v29 > 0xFFFFFFFFFFFFFFF7 || v30 > v22)
    {
      v22 = 0;
    }
    else
    {
      *(_QWORD *)(v21 + v29) = v110;
      v25 = v30;
    }
  }
  v32 = (v21 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = v32 - (v21 + v25);
  if (v32 >= v21 + v25)
  {
    v34 = v32 - v21;
    v35 = v33 + v25 + 8;
    if (v34 > 0xFFFFFFFFFFFFFFF7 || v35 > v22)
    {
      v22 = 0;
    }
    else
    {
      *(_QWORD *)(v21 + v34) = a3;
      v25 = v35;
    }
  }
  v37 = (v21 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = v37 >= v21 + v25;
  v39 = v37 - (v21 + v25);
  if (v38)
  {
    v107 = 0;
    v40 = v39 + v25;
    if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= v22)
    {
      *(_QWORD *)(v21 + v40) = v109;
      v107 = v22;
      v25 = v40 + 8;
    }
  }
  else
  {
    v107 = v22;
  }
  v41 = (v21 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = v41 >= v21 + v25;
  v42 = v41 - (v21 + v25);
  if (v38)
  {
    v108 = 0;
    v43 = v42 + v25;
    if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= v107)
    {
      *(_QWORD *)(v21 + v43) = a5;
      v108 = v107;
      v25 = v43 + 8;
    }
  }
  else
  {
    v108 = v107;
  }
  v44 = (_QWORD *)((v21 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v44 >= v21 + v25)
  {
    v45 = (char *)v44 - v21;
    if ((unint64_t)v44 - v21 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_54;
    v25 = (unint64_t)(v45 + 8);
    if ((unint64_t)(v45 + 8) > v108)
      goto LABEL_54;
    *v44 = a6;
  }
  if (v108)
  {
    v46 = v18[8];
    v47 = (v18[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v18[7];
    if (v47 + 16 >= v48)
      v47 = 0;
    if (v25 <= 0x10)
      v25 = 16;
    v49 = v47 + v25;
    if (v48 <= v49)
      v50 = 0;
    else
      v50 = v49;
    v18[9] = v50;
    v51 = (unint64_t *)(*(_QWORD *)(v46 + 16) + 128);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v50, v51));
    if (v52 == 0x80000000 || *((_DWORD *)v18 + 27))
    {
      if (*((_BYTE *)v18 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v18 + 21));
      *((_DWORD *)v18 + 27) = 0;
    }
    return result;
  }
LABEL_54:
  if (!v114)
  {
    __break(1u);
LABEL_130:
    munmap(result, *((_QWORD *)a4 + 69));
    goto LABEL_112;
  }
  v53 = (v112 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = v53 - v112;
  if (v53 < v112)
  {
    v55 = 0;
  }
  else
  {
    v55 = 0;
    if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v54 + 2 <= v113)
    {
      *(_WORD *)(v112 + v54) = 2821;
      v55 = v54 + 2;
    }
  }
  v56 = v18[8];
  v57 = (v18[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v18[7];
  if (v57 + 16 >= v58)
    v57 = 0;
  if (v55 <= 0x10)
    v55 = 16;
  v59 = v57 + v55;
  if (v58 <= v59)
    v59 = 0;
  v18[9] = v59;
  v60 = (unint64_t *)(*(_QWORD *)(v56 + 16) + 128);
  do
    __ldaxr(v60);
  while (__stlxr(v59, v60));
  *((_DWORD *)v18 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v111, (uint64_t **)v18 + 1);
  v18 = v111;
  a4 = (const WebCore::WebGPU::Buffer *)WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)a4 = 743;
  *((_QWORD *)a4 + 1) = v17;
  v7 = (unsigned __int8 ***)((char *)a4 + 16);
  *((_QWORD *)a4 + 66) = (char *)a4 + 16;
  *((_QWORD *)a4 + 67) = (char *)a4 + 16;
  *((_OWORD *)a4 + 34) = xmmword_1978CE2D0;
  *((_OWORD *)a4 + 35) = 0u;
  IPC::Encoder::encodeHeader(a4);
  v115 = a4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a4, &v110);
  v61 = *((_QWORD *)a4 + 68);
  v8 = (v61 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  v62 = *((_QWORD *)a4 + 69);
  if (v62 >= v8 + 8)
  {
    v6 = (char *)*((_QWORD *)a4 + 66);
    goto LABEL_69;
  }
  v97 = (2 * v62 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v17 = v97;
    v97 *= 2;
  }
  while (v17 < v9);
  v98 = (char *)mmap(0, v17, 3, 4098, -1, 0);
  if (v98 == (char *)-1)
  {
    __break(0xC471u);
    goto LABEL_137;
  }
  v6 = v98;
  memcpy(v98, *((const void **)a4 + 66), *((_QWORD *)a4 + 68));
  result = (unsigned __int8 ***)*((_QWORD *)a4 + 66);
  if (result != v7)
    goto LABEL_130;
LABEL_112:
  *((_QWORD *)a4 + 66) = v6;
  *((_QWORD *)a4 + 69) = v17;
  v61 = *((_QWORD *)a4 + 68);
LABEL_69:
  bzero(&v6[v61], v8 - v61);
  *((_QWORD *)a4 + 68) = v9;
  v63 = (_QWORD *)(*((_QWORD *)a4 + 66) + v8);
  *((_QWORD *)a4 + 67) = v63 + 1;
  *v63 = a3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a4, (uint64_t *)&v109);
  v64 = *((_QWORD *)a4 + 68);
  v65 = (v64 + 7) & 0xFFFFFFFFFFFFFFF8;
  v66 = v65 + 8;
  v67 = *((_QWORD *)a4 + 69);
  if (v67 < v65 + 8)
  {
    v99 = (2 * v67 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v100 = v99;
      v99 *= 2;
    }
    while (v100 < v66);
    v101 = (char *)mmap(0, v100, 3, 4098, -1, 0);
    if (v101 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x197545628);
    }
    v68 = v101;
    memcpy(v101, *((const void **)a4 + 66), *((_QWORD *)a4 + 68));
    v102 = (unsigned __int8 ***)*((_QWORD *)a4 + 66);
    if (v102 != v7)
      munmap(v102, *((_QWORD *)a4 + 69));
    *((_QWORD *)a4 + 66) = v68;
    *((_QWORD *)a4 + 69) = v100;
    v64 = *((_QWORD *)a4 + 68);
  }
  else
  {
    v68 = (char *)*((_QWORD *)a4 + 66);
  }
  bzero(&v68[v64], v65 - v64);
  *((_QWORD *)a4 + 68) = v66;
  v69 = (_QWORD *)(*((_QWORD *)a4 + 66) + v65);
  *((_QWORD *)a4 + 67) = v69 + 1;
  *v69 = a5;
  v70 = *((_QWORD *)a4 + 68);
  v71 = (v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  v72 = v71 + 8;
  v73 = *((_QWORD *)a4 + 69);
  if (v73 < v71 + 8)
  {
    v103 = (2 * v73 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v104 = v103;
      v103 *= 2;
    }
    while (v104 < v72);
    v105 = (char *)mmap(0, v104, 3, 4098, -1, 0);
    if (v105 != (char *)-1)
    {
      v74 = v105;
      memcpy(v105, *((const void **)a4 + 66), *((_QWORD *)a4 + 68));
      v106 = (unsigned __int8 ***)*((_QWORD *)a4 + 66);
      if (v106 != v7)
        munmap(v106, *((_QWORD *)a4 + 69));
      *((_QWORD *)a4 + 66) = v74;
      *((_QWORD *)a4 + 69) = v104;
      v70 = *((_QWORD *)a4 + 68);
      goto LABEL_73;
    }
    __break(0xC471u);
LABEL_137:
    JUMPOUT(0x197545620);
  }
  v74 = (char *)*((_QWORD *)a4 + 66);
LABEL_73:
  bzero(&v74[v70], v71 - v70);
  *((_QWORD *)a4 + 68) = v72;
  v75 = (_QWORD *)(*((_QWORD *)a4 + 66) + v71);
  *((_QWORD *)a4 + 67) = v75 + 1;
  *v75 = a6;
  IPC::Connection::sendMessageImpl((uint64_t)v18, (uint64_t *)&v115, 1, 0);
  v77 = v115;
  v115 = 0;
  if (v77)
  {
    IPC::Encoder::~Encoder(v77, v76);
    WTF::fastFree(v78, v79);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v111);
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteCommandEncoderProxy::copyBufferToTexture(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v4;
  uint64_t v8;
  size_t v9;
  WTF::ApproximateTime *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WTF::ApproximateTime *result;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  double v18;
  double v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  unsigned int v63;
  unint64_t v64;
  const void *v65[2];
  int v66;
  unsigned __int8 v67;
  _QWORD v68[2];
  uint64_t v69;
  int v70;
  char v71;
  char v72;
  size_t v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v8 = a1[4];
  v9 = *(_QWORD *)a2;
  LODWORD(v68[0]) = *(_DWORD *)(a2 + 8);
  BYTE4(v68[0]) = *(_BYTE *)(a2 + 12);
  v10 = (WTF::ApproximateTime *)*(unsigned __int8 *)(a2 + 20);
  v11 = *(unsigned int *)(a2 + 16);
  v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8));
  if (v12)
  {
    v73 = v9;
    v74 = v68[0];
    v75 = BYTE4(v68[0]);
    v76 = (v11 | ((_QWORD)v10 << 32)) << 24;
    v77 = v12;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    LOBYTE(v73) = 0;
  }
  v78 = v13;
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[4], a3, (uint64_t)v68);
  result = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[4], a4);
  v15 = v67;
  if (!v78 || !v72 || !v67)
    goto LABEL_50;
  v16 = a1[3];
  v17 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 176) + 96) + 96);
  WTF::ApproximateTime::now(result);
  v19 = v18 + 30.0;
  if (v17[6] == v16)
  {
LABEL_8:
    result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v17 + 7), &v80, v19);
    if (v82)
    {
      v83 = v80;
      v84 = v81;
      v85 = 0;
      v20 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v21 = v20 >= v80;
      v22 = v20 - v80;
      if (v21)
      {
        if (v22 > 0xFFFFFFFFFFFFFFFDLL || v22 + 2 > v81)
        {
          v84 = 0;
        }
        else
        {
          *(_WORD *)(v80 + v22) = 744;
          v85 = v22 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode((char *)&v83, &v73);
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((uint64_t *)&v83, (uint64_t)v68);
      result = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((uint64_t *)&v83, (uint64_t)v65);
      if (v84)
      {
        v24 = v85;
        v25 = v17[8];
        v26 = (v17[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = v17[7];
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v85 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v29 = 0;
        else
          v29 = v28;
        v17[9] = v29;
        v30 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v29, v30));
        if (v31 == 0x80000000 || *((_DWORD *)v17 + 27))
        {
          if (*((_BYTE *)v17 + 96))
            result = (WTF::ApproximateTime *)MEMORY[0x19AEBA1A0](*((unsigned int *)v17 + 21));
          *((_DWORD *)v17 + 27) = 0;
        }
        goto LABEL_49;
      }
      if (v82)
      {
        v32 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v33 = v32 - v80;
        if (v32 < v80)
        {
          v34 = 0;
        }
        else
        {
          v34 = 0;
          if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v81)
          {
            *(_WORD *)(v80 + v33) = 2821;
            v34 = v33 + 2;
          }
        }
        v35 = v17[8];
        v36 = (v17[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v37 = v17[7];
        if (v36 + 16 >= v37)
          v36 = 0;
        if (v34 <= 0x10)
          v34 = 16;
        v38 = v36 + v34;
        if (v37 <= v38)
          v38 = 0;
        v17[9] = v38;
        v39 = (unint64_t *)(*(_QWORD *)(v35 + 16) + 128);
        do
          __ldaxr(v39);
        while (__stlxr(v38, v39));
        *((_DWORD *)v17 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v79, (uint64_t **)v17 + 1);
        v17 = v79;
        a4 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)a4 = 744;
        *(_QWORD *)(a4 + 8) = v16;
        *(_QWORD *)(a4 + 528) = a4 + 16;
        *(_QWORD *)(a4 + 536) = a4 + 16;
        *(_OWORD *)(a4 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(a4 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)a4);
        v83 = a4;
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode((IPC::Encoder *)a4, (int *)&v73);
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((IPC::Encoder *)a4, v68);
        v16 = v66;
        v11 = *(_QWORD *)(a4 + 544);
        v4 = v11 + 1;
        v40 = *(_QWORD *)(a4 + 552);
        if (v40 >= v11 + 1)
        {
          v10 = *(WTF::ApproximateTime **)(a4 + 528);
          v41 = *(_QWORD *)(a4 + 544);
LABEL_46:
          bzero((char *)v10 + v41, v11 - v41);
          *(_QWORD *)(a4 + 544) = v4;
          v42 = (_BYTE *)(*(_QWORD *)(a4 + 528) + v11);
          *(_QWORD *)(a4 + 536) = v42 + 1;
          *v42 = v16;
          IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((char *)a4, v65, v16);
          IPC::Connection::sendMessageImpl((uint64_t)v17, (uint64_t *)&v83, 1, 0);
          v44 = (IPC::Encoder *)v83;
          v83 = 0;
          if (v44)
          {
            IPC::Encoder::~Encoder(v44, v43);
            WTF::fastFree(v45, v46);
          }
          result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v79);
          goto LABEL_49;
        }
        v64 = (2 * v40 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v9 = v64;
          v64 *= 2;
        }
        while (v9 < v4);
        result = (WTF::ApproximateTime *)mmap(0, v9, 3, 4098, -1, 0);
        if (result == (WTF::ApproximateTime *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v10 = result;
        memcpy(result, *(const void **)(a4 + 528), *(_QWORD *)(a4 + 544));
        result = *(WTF::ApproximateTime **)(a4 + 528);
        if (result == (WTF::ApproximateTime *)(a4 + 16))
        {
LABEL_91:
          *(_QWORD *)(a4 + 528) = v10;
          *(_QWORD *)(a4 + 552) = v9;
          v41 = *(_QWORD *)(a4 + 544);
          goto LABEL_46;
        }
      }
      else
      {
        __break(1u);
      }
      munmap(result, *(_QWORD *)(a4 + 552));
      goto LABEL_91;
    }
    goto LABEL_49;
  }
  result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v17 + 7), &v83, v18 + 30.0);
  if ((_BYTE)v85)
  {
    v47 = v83;
    v48 = v84;
    v49 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v50 = v49 - v83;
    if (v49 < v83)
    {
      v52 = 0;
      v51 = v84;
    }
    else
    {
      v51 = 0;
      if (v50 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v52 = 0;
      }
      else
      {
        v52 = 0;
        if (v50 + 2 <= v84)
        {
          *(_WORD *)(v83 + v50) = 2822;
          v51 = v48;
          v52 = v50 + 2;
        }
      }
    }
    v53 = (_QWORD *)((v47 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v53 >= v47 + v52)
    {
      v54 = (char *)v53 - v47;
      if ((unint64_t)v53 - v47 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_49;
      v52 = (unint64_t)(v54 + 8);
      if ((unint64_t)(v54 + 8) > v51)
        goto LABEL_49;
      *v53 = v16;
    }
    if (v51)
    {
      v55 = (v17[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
      v56 = v17[7];
      if (v55 + 16 >= v56)
        v55 = 0;
      if (v52 <= 0x10)
        v52 = 16;
      v57 = v55 + v52;
      if (v56 <= v57)
        v58 = 0;
      else
        v58 = v57;
      v17[9] = v58;
      v59 = (unint64_t *)(*(_QWORD *)(v17[8] + 16) + 128);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v58, v59));
      v61 = *((_DWORD *)v17 + 27);
      if (v60 == 0x80000000 || v61 != 0)
      {
        v63 = v61 + 1;
        *((_DWORD *)v17 + 27) = v63;
        if (v63 >= *((_DWORD *)v17 + 26))
        {
          if (*((_BYTE *)v17 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v17 + 21));
          *((_DWORD *)v17 + 27) = 0;
        }
      }
      v17[6] = v16;
      goto LABEL_8;
    }
  }
LABEL_49:
  v15 = v67;
LABEL_50:
  if (v15 && v66 != -1)
    result = (WTF::ApproximateTime *)((uint64_t (*)(unint64_t *, const void **))off_1E34E3F98[v66])(&v83, v65);
  if (v72 && v71 && v70 != -1)
    return (WTF::ApproximateTime *)((uint64_t (*)(const void **, uint64_t *))off_1E34E3FA8[v70])(v65, &v69);
  return result;
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteCommandEncoderProxy::copyTextureToBuffer(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v4;
  uint64_t v8;
  size_t v9;
  WTF::ApproximateTime *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WTF::ApproximateTime *result;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  double v18;
  double v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  unsigned int v63;
  unint64_t v64;
  const void *v65[2];
  int v66;
  unsigned __int8 v67;
  size_t v68;
  int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _QWORD v74[2];
  uint64_t v75;
  int v76;
  char v77;
  char v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[4], a2, (uint64_t)v74);
  v8 = a1[4];
  v9 = *(_QWORD *)a3;
  LODWORD(v65[0]) = *(_DWORD *)(a3 + 8);
  BYTE4(v65[0]) = *(_BYTE *)(a3 + 12);
  v10 = (WTF::ApproximateTime *)*(unsigned __int8 *)(a3 + 20);
  v11 = *(unsigned int *)(a3 + 16);
  v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8));
  if (v12)
  {
    v68 = v9;
    v69 = (int)v65[0];
    v70 = BYTE4(v65[0]);
    v71 = (v11 | ((_QWORD)v10 << 32)) << 24;
    v72 = v12;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    LOBYTE(v68) = 0;
  }
  v73 = v13;
  result = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[4], a4);
  v15 = v67;
  if (!v78 || !v73 || !v67)
    goto LABEL_50;
  v16 = a1[3];
  v17 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 176) + 96) + 96);
  WTF::ApproximateTime::now(result);
  v19 = v18 + 30.0;
  if (v17[6] == v16)
  {
LABEL_8:
    result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v17 + 7), &v80, v19);
    if (v82)
    {
      v83 = v80;
      v84 = v81;
      v85 = 0;
      v20 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v21 = v20 >= v80;
      v22 = v20 - v80;
      if (v21)
      {
        if (v22 > 0xFFFFFFFFFFFFFFFDLL || v22 + 2 > v81)
        {
          v84 = 0;
        }
        else
        {
          *(_WORD *)(v80 + v22) = 745;
          v85 = v22 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((uint64_t *)&v83, (uint64_t)v74);
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode((char *)&v83, &v68);
      result = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((uint64_t *)&v83, (uint64_t)v65);
      if (v84)
      {
        v24 = v85;
        v25 = v17[8];
        v26 = (v17[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = v17[7];
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v85 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v29 = 0;
        else
          v29 = v28;
        v17[9] = v29;
        v30 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v29, v30));
        if (v31 == 0x80000000 || *((_DWORD *)v17 + 27))
        {
          if (*((_BYTE *)v17 + 96))
            result = (WTF::ApproximateTime *)MEMORY[0x19AEBA1A0](*((unsigned int *)v17 + 21));
          *((_DWORD *)v17 + 27) = 0;
        }
        goto LABEL_49;
      }
      if (v82)
      {
        v32 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v33 = v32 - v80;
        if (v32 < v80)
        {
          v34 = 0;
        }
        else
        {
          v34 = 0;
          if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v81)
          {
            *(_WORD *)(v80 + v33) = 2821;
            v34 = v33 + 2;
          }
        }
        v35 = v17[8];
        v36 = (v17[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v37 = v17[7];
        if (v36 + 16 >= v37)
          v36 = 0;
        if (v34 <= 0x10)
          v34 = 16;
        v38 = v36 + v34;
        if (v37 <= v38)
          v38 = 0;
        v17[9] = v38;
        v39 = (unint64_t *)(*(_QWORD *)(v35 + 16) + 128);
        do
          __ldaxr(v39);
        while (__stlxr(v38, v39));
        *((_DWORD *)v17 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v79, (uint64_t **)v17 + 1);
        v17 = v79;
        a4 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)a4 = 745;
        *(_QWORD *)(a4 + 8) = v16;
        *(_QWORD *)(a4 + 528) = a4 + 16;
        *(_QWORD *)(a4 + 536) = a4 + 16;
        *(_OWORD *)(a4 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(a4 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)a4);
        v83 = a4;
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((IPC::Encoder *)a4, v74);
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode((IPC::Encoder *)a4, (int *)&v68);
        v16 = v66;
        v11 = *(_QWORD *)(a4 + 544);
        v4 = v11 + 1;
        v40 = *(_QWORD *)(a4 + 552);
        if (v40 >= v11 + 1)
        {
          v10 = *(WTF::ApproximateTime **)(a4 + 528);
          v41 = *(_QWORD *)(a4 + 544);
LABEL_46:
          bzero((char *)v10 + v41, v11 - v41);
          *(_QWORD *)(a4 + 544) = v4;
          v42 = (_BYTE *)(*(_QWORD *)(a4 + 528) + v11);
          *(_QWORD *)(a4 + 536) = v42 + 1;
          *v42 = v16;
          IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((char *)a4, v65, v16);
          IPC::Connection::sendMessageImpl((uint64_t)v17, (uint64_t *)&v83, 1, 0);
          v44 = (IPC::Encoder *)v83;
          v83 = 0;
          if (v44)
          {
            IPC::Encoder::~Encoder(v44, v43);
            WTF::fastFree(v45, v46);
          }
          result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v79);
          goto LABEL_49;
        }
        v64 = (2 * v40 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v9 = v64;
          v64 *= 2;
        }
        while (v9 < v4);
        result = (WTF::ApproximateTime *)mmap(0, v9, 3, 4098, -1, 0);
        if (result == (WTF::ApproximateTime *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v10 = result;
        memcpy(result, *(const void **)(a4 + 528), *(_QWORD *)(a4 + 544));
        result = *(WTF::ApproximateTime **)(a4 + 528);
        if (result == (WTF::ApproximateTime *)(a4 + 16))
        {
LABEL_91:
          *(_QWORD *)(a4 + 528) = v10;
          *(_QWORD *)(a4 + 552) = v9;
          v41 = *(_QWORD *)(a4 + 544);
          goto LABEL_46;
        }
      }
      else
      {
        __break(1u);
      }
      munmap(result, *(_QWORD *)(a4 + 552));
      goto LABEL_91;
    }
    goto LABEL_49;
  }
  result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v17 + 7), &v83, v18 + 30.0);
  if ((_BYTE)v85)
  {
    v47 = v83;
    v48 = v84;
    v49 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v50 = v49 - v83;
    if (v49 < v83)
    {
      v52 = 0;
      v51 = v84;
    }
    else
    {
      v51 = 0;
      if (v50 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v52 = 0;
      }
      else
      {
        v52 = 0;
        if (v50 + 2 <= v84)
        {
          *(_WORD *)(v83 + v50) = 2822;
          v51 = v48;
          v52 = v50 + 2;
        }
      }
    }
    v53 = (_QWORD *)((v47 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v53 >= v47 + v52)
    {
      v54 = (char *)v53 - v47;
      if ((unint64_t)v53 - v47 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_49;
      v52 = (unint64_t)(v54 + 8);
      if ((unint64_t)(v54 + 8) > v51)
        goto LABEL_49;
      *v53 = v16;
    }
    if (v51)
    {
      v55 = (v17[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
      v56 = v17[7];
      if (v55 + 16 >= v56)
        v55 = 0;
      if (v52 <= 0x10)
        v52 = 16;
      v57 = v55 + v52;
      if (v56 <= v57)
        v58 = 0;
      else
        v58 = v57;
      v17[9] = v58;
      v59 = (unint64_t *)(*(_QWORD *)(v17[8] + 16) + 128);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v58, v59));
      v61 = *((_DWORD *)v17 + 27);
      if (v60 == 0x80000000 || v61 != 0)
      {
        v63 = v61 + 1;
        *((_DWORD *)v17 + 27) = v63;
        if (v63 >= *((_DWORD *)v17 + 26))
        {
          if (*((_BYTE *)v17 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v17 + 21));
          *((_DWORD *)v17 + 27) = 0;
        }
      }
      v17[6] = v16;
      goto LABEL_8;
    }
  }
LABEL_49:
  v15 = v67;
LABEL_50:
  if (v15 && v66 != -1)
    result = (WTF::ApproximateTime *)((uint64_t (*)(unint64_t *, const void **))off_1E34E3F98[v66])(&v83, v65);
  if (v78 && v77 && v76 != -1)
    return (WTF::ApproximateTime *)((uint64_t (*)(size_t *, uint64_t *))off_1E34E3FA8[v76])(&v68, &v75);
  return result;
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteCommandEncoderProxy::copyTextureToTexture(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v4;
  WTF::ApproximateTime *v5;
  uint64_t v6;
  size_t v7;
  WTF::ApproximateTime *result;
  int v12;
  BOOL v13;
  uint64_t v15;
  uint64_t *v16;
  double v17;
  double v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  void *v42;
  IPC::Encoder *v43;
  WTF *v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unsigned int v62;
  unint64_t v63;
  const void *v64[2];
  int v65;
  unsigned __int8 v66;
  _QWORD v67[2];
  uint64_t v68;
  int v69;
  char v70;
  char v71;
  _QWORD v72[2];
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[4], a2, (uint64_t)v72);
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[4], a3, (uint64_t)v67);
  result = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[4], a4);
  v12 = v66;
  if (v76)
    v13 = v71 == 0;
  else
    v13 = 1;
  if (v13 || v66 == 0)
    goto LABEL_51;
  v15 = a1[3];
  v16 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 176) + 96) + 96);
  WTF::ApproximateTime::now(result);
  v18 = v17 + 30.0;
  if (v16[6] == v15)
  {
LABEL_9:
    result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v16 + 7), &v78, v18);
    if (v80)
    {
      v81 = v78;
      v82 = v79;
      v83 = 0;
      v19 = (v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = v19 >= v78;
      v21 = v19 - v78;
      if (v20)
      {
        if (v21 > 0xFFFFFFFFFFFFFFFDLL || v21 + 2 > v79)
        {
          v82 = 0;
        }
        else
        {
          *(_WORD *)(v78 + v21) = 746;
          v83 = v21 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((uint64_t *)&v81, (uint64_t)v72);
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((uint64_t *)&v81, (uint64_t)v67);
      result = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((uint64_t *)&v81, (uint64_t)v64);
      if (v82)
      {
        v23 = v83;
        v24 = v16[8];
        v25 = (v16[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = v16[7];
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v83 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v28 = 0;
        else
          v28 = v27;
        v16[9] = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v28, v29));
        if (v30 == 0x80000000 || *((_DWORD *)v16 + 27))
        {
          if (*((_BYTE *)v16 + 96))
            result = (WTF::ApproximateTime *)MEMORY[0x19AEBA1A0](*((unsigned int *)v16 + 21));
          *((_DWORD *)v16 + 27) = 0;
        }
        goto LABEL_50;
      }
      if (v80)
      {
        v31 = (v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = v31 - v78;
        if (v31 < v78)
        {
          v33 = 0;
        }
        else
        {
          v33 = 0;
          if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v79)
          {
            *(_WORD *)(v78 + v32) = 2821;
            v33 = v32 + 2;
          }
        }
        v34 = v16[8];
        v35 = (v16[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v16[7];
        if (v35 + 16 >= v36)
          v35 = 0;
        if (v33 <= 0x10)
          v33 = 16;
        v37 = v35 + v33;
        if (v36 <= v37)
          v37 = 0;
        v16[9] = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 128);
        do
          __ldaxr(v38);
        while (__stlxr(v37, v38));
        *((_DWORD *)v16 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v77, (uint64_t **)v16 + 1);
        v16 = v77;
        a4 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)a4 = 746;
        *(_QWORD *)(a4 + 8) = v15;
        *(_QWORD *)(a4 + 528) = a4 + 16;
        *(_QWORD *)(a4 + 536) = a4 + 16;
        *(_OWORD *)(a4 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(a4 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)a4);
        v81 = a4;
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((IPC::Encoder *)a4, v72);
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((IPC::Encoder *)a4, v67);
        v15 = v65;
        v6 = *(_QWORD *)(a4 + 544);
        v7 = v6 + 1;
        v39 = *(_QWORD *)(a4 + 552);
        if (v39 >= v6 + 1)
        {
          v5 = *(WTF::ApproximateTime **)(a4 + 528);
          v40 = *(_QWORD *)(a4 + 544);
LABEL_47:
          bzero((char *)v5 + v40, v6 - v40);
          *(_QWORD *)(a4 + 544) = v7;
          v41 = (_BYTE *)(*(_QWORD *)(a4 + 528) + v6);
          *(_QWORD *)(a4 + 536) = v41 + 1;
          *v41 = v15;
          IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((char *)a4, v64, v15);
          IPC::Connection::sendMessageImpl((uint64_t)v16, (uint64_t *)&v81, 1, 0);
          v43 = (IPC::Encoder *)v81;
          v81 = 0;
          if (v43)
          {
            IPC::Encoder::~Encoder(v43, v42);
            WTF::fastFree(v44, v45);
          }
          result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v77);
          goto LABEL_50;
        }
        v63 = (2 * v39 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v4 = v63;
          v63 *= 2;
        }
        while (v4 < v7);
        result = (WTF::ApproximateTime *)mmap(0, v4, 3, 4098, -1, 0);
        if (result == (WTF::ApproximateTime *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v5 = result;
        memcpy(result, *(const void **)(a4 + 528), *(_QWORD *)(a4 + 544));
        result = *(WTF::ApproximateTime **)(a4 + 528);
        if (result == (WTF::ApproximateTime *)(a4 + 16))
        {
LABEL_96:
          *(_QWORD *)(a4 + 528) = v5;
          *(_QWORD *)(a4 + 552) = v4;
          v40 = *(_QWORD *)(a4 + 544);
          goto LABEL_47;
        }
      }
      else
      {
        __break(1u);
      }
      munmap(result, *(_QWORD *)(a4 + 552));
      goto LABEL_96;
    }
    goto LABEL_50;
  }
  result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v16 + 7), &v81, v17 + 30.0);
  if ((_BYTE)v83)
  {
    v46 = v81;
    v47 = v82;
    v48 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v49 = v48 - v81;
    if (v48 < v81)
    {
      v51 = 0;
      v50 = v82;
    }
    else
    {
      v50 = 0;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v51 = 0;
      }
      else
      {
        v51 = 0;
        if (v49 + 2 <= v82)
        {
          *(_WORD *)(v81 + v49) = 2822;
          v50 = v47;
          v51 = v49 + 2;
        }
      }
    }
    v52 = (_QWORD *)((v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v52 >= v46 + v51)
    {
      v53 = (char *)v52 - v46;
      if ((unint64_t)v52 - v46 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_50;
      v51 = (unint64_t)(v53 + 8);
      if ((unint64_t)(v53 + 8) > v50)
        goto LABEL_50;
      *v52 = v15;
    }
    if (v50)
    {
      v54 = (v16[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
      v55 = v16[7];
      if (v54 + 16 >= v55)
        v54 = 0;
      if (v51 <= 0x10)
        v51 = 16;
      v56 = v54 + v51;
      if (v55 <= v56)
        v57 = 0;
      else
        v57 = v56;
      v16[9] = v57;
      v58 = (unint64_t *)(*(_QWORD *)(v16[8] + 16) + 128);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v57, v58));
      v60 = *((_DWORD *)v16 + 27);
      if (v59 == 0x80000000 || v60 != 0)
      {
        v62 = v60 + 1;
        *((_DWORD *)v16 + 27) = v62;
        if (v62 >= *((_DWORD *)v16 + 26))
        {
          if (*((_BYTE *)v16 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v16 + 21));
          *((_DWORD *)v16 + 27) = 0;
        }
      }
      v16[6] = v15;
      goto LABEL_9;
    }
  }
LABEL_50:
  v12 = v66;
LABEL_51:
  if (v12 && v65 != -1)
    result = (WTF::ApproximateTime *)((uint64_t (*)(unint64_t *, const void **))off_1E34E3F98[v65])(&v81, v64);
  if (v71 && v70 && v69 != -1)
    result = (WTF::ApproximateTime *)((uint64_t (*)(const void **, uint64_t *))off_1E34E3FA8[v69])(v64, &v68);
  if (v76 && v75 && v74 != -1)
    return (WTF::ApproximateTime *)((uint64_t (*)(_QWORD *, uint64_t *))off_1E34E3FA8[v74])(v67, &v73);
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteCommandEncoderProxy::clearBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int8 ***v6;
  unint64_t v7;
  size_t v8;
  unsigned __int8 ***result;
  size_t v12;
  uint64_t *v13;
  double v14;
  double v15;
  IPC::Encoder *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  unint64_t v51;
  IPC::Encoder *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v66;
  unint64_t v67;
  unsigned __int8 ***v68;
  uint64_t v69[2];
  uint64_t *v70;
  IPC::Encoder *v71;
  unint64_t v72;
  char v73;
  IPC::Encoder *v74;
  unint64_t v75;
  unint64_t v76;

  v69[0] = a4;
  v69[1] = a5;
  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  v68 = result;
  if (!result)
    return result;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v15 = v14 + 30.0;
  if (v13[6] == v12)
    goto LABEL_3;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v13 + 7), &v74, v14 + 30.0);
  if (!(_BYTE)v76)
    return result;
  v52 = v74;
  v51 = v75;
  v53 = ((unint64_t)v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = v53 - (_QWORD)v74;
  if (v53 < (unint64_t)v74)
    goto LABEL_97;
  v55 = v54 + 2;
  if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v75)
  {
    v51 = 0;
LABEL_97:
    v55 = 0;
    goto LABEL_61;
  }
  *(_WORD *)((char *)v74 + v54) = 2822;
LABEL_61:
  v57 = (char *)(((unint64_t)v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v57 >= (char *)v52 + v55)
  {
    v55 = v57 - (char *)v52 + 8;
    if ((unint64_t)(v57 - (char *)v52) > 0xFFFFFFFFFFFFFFF7 || v55 > v51)
      return result;
    *(_QWORD *)v57 = v12;
  }
  if (!v51)
    return result;
  v59 = (v13[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v60 = v13[7];
  if (v59 + 16 >= v60)
    v59 = 0;
  if (v55 <= 0x10)
    v55 = 16;
  v61 = v59 + v55;
  if (v60 <= v61)
    v61 = 0;
  v13[9] = v61;
  v62 = (unint64_t *)(*(_QWORD *)(v13[8] + 16) + 128);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v61, v62));
  v64 = *((_DWORD *)v13 + 27);
  if (v63 == 0x80000000 || v64 != 0)
  {
    v66 = v64 + 1;
    *((_DWORD *)v13 + 27) = v66;
    if (v66 >= *((_DWORD *)v13 + 26))
    {
      if (*((_BYTE *)v13 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v13 + 21));
      *((_DWORD *)v13 + 27) = 0;
    }
  }
  v13[6] = v12;
LABEL_3:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v13 + 7), &v71, v15);
  if (!v73)
    return result;
  v16 = v71;
  v17 = v72;
  v74 = v71;
  v75 = v72;
  v76 = 0;
  v18 = ((unint64_t)v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v19 = v18 - (_QWORD)v71;
  if (v18 < (unint64_t)v71)
  {
    v20 = 0;
  }
  else if (v19 > 0xFFFFFFFFFFFFFFFDLL || (v20 = v19 + 2, v19 + 2 > v72))
  {
    v17 = 0;
    v20 = 0;
    v75 = 0;
  }
  else
  {
    *(_WORD *)((char *)v71 + v19) = 742;
    v76 = v19 + 2;
  }
  v21 = ((unint64_t)v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = v21 - ((_QWORD)v16 + v20);
  if (v21 >= (unint64_t)v16 + v20)
  {
    v23 = v21 - (_QWORD)v16;
    v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v17)
    {
      v17 = 0;
      v75 = 0;
    }
    else
    {
      *(_QWORD *)((char *)v16 + v23) = v68;
      v76 = v24;
      v20 = v24;
    }
  }
  v26 = (char *)(((unint64_t)v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v26 >= (char *)v16 + v20)
  {
    if ((unint64_t)(v26 - (char *)v16) > 0xFFFFFFFFFFFFFFF7 || v26 - (char *)v16 + 8 > v17)
    {
      v75 = 0;
    }
    else
    {
      *(_QWORD *)v26 = a3;
      v76 = v26 - (char *)v16 + 8;
    }
  }
  result = (unsigned __int8 ***)IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(&v74, (uint64_t)v69);
  if (v75)
  {
    v28 = v76;
    v29 = v13[8];
    v30 = (v13[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v31 = v13[7];
    if (v30 + 16 >= v31)
      v30 = 0;
    if (v76 <= 0x10)
      v28 = 16;
    v32 = v30 + v28;
    if (v31 <= v32)
      v33 = 0;
    else
      v33 = v32;
    v13[9] = v33;
    v34 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v33, v34));
    if (v35 == 0x80000000 || *((_DWORD *)v13 + 27))
    {
      if (*((_BYTE *)v13 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v13 + 21));
      *((_DWORD *)v13 + 27) = 0;
    }
    return result;
  }
  if (!v73)
  {
    __break(1u);
LABEL_95:
    munmap(result, *(_QWORD *)(v5 + 552));
LABEL_90:
    *(_QWORD *)(v5 + 528) = v6;
    *(_QWORD *)(v5 + 552) = v12;
    v44 = *(_QWORD *)(v5 + 544);
    goto LABEL_50;
  }
  v36 = ((unint64_t)v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v37 = v36 - (_QWORD)v71;
  if (v36 < (unint64_t)v71)
  {
    v38 = 0;
  }
  else
  {
    v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v72)
    {
      *(_WORD *)((char *)v71 + v37) = 2821;
      v38 = v37 + 2;
    }
  }
  v39 = v13[8];
  v40 = (v13[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = v13[7];
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v42 = v40 + v38;
  if (v41 <= v42)
    v42 = 0;
  v13[9] = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *((_DWORD *)v13 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v70, (uint64_t **)v13 + 1);
  v13 = v70;
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 742;
  *(_QWORD *)(v5 + 8) = v12;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v74 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, (uint64_t *)&v68);
  v44 = *(_QWORD *)(v5 + 544);
  v7 = (v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v45 = *(_QWORD *)(v5 + 552);
  if (v45 < v7 + 8)
  {
    v67 = (2 * v45 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v67;
      v67 *= 2;
    }
    while (v12 < v8);
    result = (unsigned __int8 ***)mmap(0, v12, 3, 4098, -1, 0);
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    v6 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    result = *(unsigned __int8 ****)(v5 + 528);
    if (result == (unsigned __int8 ***)(v5 + 16))
      goto LABEL_90;
    goto LABEL_95;
  }
  v6 = *(unsigned __int8 ****)(v5 + 528);
LABEL_50:
  bzero((char *)v6 + v44, v7 - v44);
  *(_QWORD *)(v5 + 544) = v8;
  v46 = (_QWORD *)(*(_QWORD *)(v5 + 528) + v7);
  *(_QWORD *)(v5 + 536) = v46 + 1;
  *v46 = a3;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v5, v69);
  IPC::Connection::sendMessageImpl((uint64_t)v13, (uint64_t *)&v74, 1, 0);
  v48 = v74;
  v74 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v70);
}

unsigned __int8 ***WebKit::WebGPU::RemoteCommandEncoderProxy::pushDebugGroup(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 751;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 751;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteCommandEncoderProxy::popDebugGroup(WebKit::WebGPU::RemoteCommandEncoderProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 750;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 750;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebGPU::RemoteCommandEncoderProxy::insertDebugMarker(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 749;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 749;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteCommandEncoderProxy::writeTimestamp(WebKit::WebGPU::RemoteCommandEncoderProxy *this, const WebCore::WebGPU::QuerySet *a2, int a3)
{
  uint64_t v3;
  unsigned __int8 ***v4;
  unint64_t v5;
  size_t v6;
  unsigned __int8 ***result;
  size_t v10;
  uint64_t *v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  void *v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned int v64;
  unint64_t v65;
  unsigned __int8 ***v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  IPC::Encoder *v71;

  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::QuerySet *))(**((_QWORD **)this + 4) + 136))(*((_QWORD *)this + 4), a2);
  v66 = result;
  if (!result)
    return result;
  v10 = *((_QWORD *)this + 3);
  v11 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v13 = v12 + 30.0;
  if (v11[6] == v10)
    goto LABEL_3;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v12 + 30.0);
  if (!v70)
    return result;
  v50 = v68;
  v49 = v69;
  v51 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = v51 - v68;
  if (v51 < v68)
    goto LABEL_99;
  v53 = v52 + 2;
  if (v52 > 0xFFFFFFFFFFFFFFFDLL || v53 > v69)
  {
    v49 = 0;
LABEL_99:
    v53 = 0;
    goto LABEL_63;
  }
  *(_WORD *)(v68 + v52) = 2822;
LABEL_63:
  v55 = (_QWORD *)((v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v55 >= v50 + v53)
  {
    v53 = (unint64_t)v55 - v50 + 8;
    if ((unint64_t)v55 - v50 > 0xFFFFFFFFFFFFFFF7 || v53 > v49)
      return result;
    *v55 = v10;
  }
  if (!v49)
    return result;
  v57 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v11[7];
  if (v57 + 16 >= v58)
    v57 = 0;
  if (v53 <= 0x10)
    v53 = 16;
  v59 = v57 + v53;
  if (v58 <= v59)
    v59 = 0;
  v11[9] = v59;
  v60 = (unint64_t *)(*(_QWORD *)(v11[8] + 16) + 128);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v59, v60));
  v62 = *((_DWORD *)v11 + 27);
  if (v61 == 0x80000000 || v62 != 0)
  {
    v64 = v62 + 1;
    *((_DWORD *)v11 + 27) = v64;
    if (v64 >= *((_DWORD *)v11 + 26))
    {
      if (*((_BYTE *)v11 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
  }
  v11[6] = v10;
LABEL_3:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v13);
  if (!v70)
    return result;
  v14 = v68;
  v15 = v69;
  v16 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v68;
  if (v16 >= v68)
  {
    v18 = v17 + 2;
    if (v17 <= 0xFFFFFFFFFFFFFFFDLL && v18 <= v69)
    {
      *(_WORD *)(v68 + v17) = 754;
      goto LABEL_10;
    }
    v15 = 0;
  }
  v18 = 0;
LABEL_10:
  v20 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 - (v14 + v18);
  if (v20 >= v14 + v18)
  {
    v22 = v20 - v14;
    v23 = v21 + v18 + 8;
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v15)
    {
      v15 = 0;
    }
    else
    {
      *(_QWORD *)(v14 + v22) = v66;
      v18 = v23;
    }
  }
  v25 = (_DWORD *)((v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v14 + v18)
  {
    v18 = (unint64_t)v25 - v14 + 4;
    if ((unint64_t)v25 - v14 > 0xFFFFFFFFFFFFFFFBLL || v18 > v15)
      goto LABEL_37;
    *v25 = a3;
  }
  if (v15)
  {
    v27 = v11[8];
    v28 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v29 = v11[7];
    if (v28 + 16 >= v29)
      v28 = 0;
    if (v18 <= 0x10)
      v18 = 16;
    v30 = v28 + v18;
    if (v29 <= v30)
      v31 = 0;
    else
      v31 = v30;
    v11[9] = v31;
    v32 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v31, v32));
    if (v33 == 0x80000000 || *((_DWORD *)v11 + 27))
    {
      if (*((_BYTE *)v11 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
    return result;
  }
LABEL_37:
  if (!v70)
  {
    __break(1u);
LABEL_97:
    munmap(result, *(_QWORD *)(v3 + 552));
LABEL_92:
    *(_QWORD *)(v3 + 528) = v4;
    *(_QWORD *)(v3 + 552) = v10;
    v42 = *(_QWORD *)(v3 + 544);
    goto LABEL_52;
  }
  v34 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v35 = v34 - v68;
  if (v34 < v68)
  {
    v36 = 0;
  }
  else
  {
    v36 = 0;
    if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v69)
    {
      *(_WORD *)(v68 + v35) = 2821;
      v36 = v35 + 2;
    }
  }
  v37 = v11[8];
  v38 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v39 = v11[7];
  if (v38 + 16 >= v39)
    v38 = 0;
  if (v36 <= 0x10)
    v36 = 16;
  v40 = v38 + v36;
  if (v39 <= v40)
    v40 = 0;
  v11[9] = v40;
  v41 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
  do
    __ldaxr(v41);
  while (__stlxr(v40, v41));
  *((_DWORD *)v11 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v11 + 1);
  v11 = v67;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 754;
  *(_QWORD *)(v3 + 8) = v10;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v71 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, (uint64_t *)&v66);
  v42 = *(_QWORD *)(v3 + 544);
  v5 = (v42 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 + 4;
  v43 = *(_QWORD *)(v3 + 552);
  if (v43 < v5 + 4)
  {
    v65 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v10 = v65;
      v65 *= 2;
    }
    while (v10 < v6);
    result = (unsigned __int8 ***)mmap(0, v10, 3, 4098, -1, 0);
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    v4 = result;
    memcpy(result, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
    result = *(unsigned __int8 ****)(v3 + 528);
    if (result == (unsigned __int8 ***)(v3 + 16))
      goto LABEL_92;
    goto LABEL_97;
  }
  v4 = *(unsigned __int8 ****)(v3 + 528);
LABEL_52:
  bzero((char *)v4 + v42, v5 - v42);
  *(_QWORD *)(v3 + 544) = v6;
  v44 = (_DWORD *)(*(_QWORD *)(v3 + 528) + v5);
  *(_QWORD *)(v3 + 536) = v44 + 1;
  *v44 = a3;
  IPC::Connection::sendMessageImpl((uint64_t)v11, (uint64_t *)&v71, 1, 0);
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v45);
    WTF::fastFree(v47, v48);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
}

unsigned __int8 ***WebKit::WebGPU::RemoteCommandEncoderProxy::resolveQuerySet(WebKit::WebGPU::RemoteCommandEncoderProxy *this, const WebCore::WebGPU::QuerySet *a2, int a3, int a4, const WebCore::WebGPU::Buffer *a5, uint64_t a6)
{
  char *v6;
  unsigned __int8 ***v7;
  unint64_t v8;
  size_t v9;
  unsigned __int8 ***result;
  BOOL v16;
  size_t v17;
  uint64_t *v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  unint64_t v65;
  size_t v66;
  unint64_t v67;
  char *v68;
  _DWORD *v69;
  uint64_t v70;
  unint64_t v71;
  size_t v72;
  unint64_t v73;
  char *v74;
  _QWORD *v75;
  void *v76;
  IPC::Encoder *v77;
  WTF *v78;
  void *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  unsigned int v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  size_t v100;
  char *v101;
  unsigned __int8 ***v102;
  unint64_t v103;
  size_t v104;
  char *v105;
  unsigned __int8 ***v106;
  unint64_t v107;
  unint64_t v108;
  unsigned __int8 ***v109;
  uint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  IPC::Encoder *v115;

  v110 = (*(uint64_t (**)(_QWORD, const WebCore::WebGPU::QuerySet *))(**((_QWORD **)this + 4) + 136))(*((_QWORD *)this + 4), a2);
  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a5);
  v109 = result;
  if (v110)
    v16 = result == 0;
  else
    v16 = 1;
  if (v16)
    return result;
  v17 = *((_QWORD *)this + 3);
  v18 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v20 = v19 + 30.0;
  if (v18[6] != v17)
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v18 + 7), &v112, v19 + 30.0);
    if (!v114)
      return result;
    v80 = v112;
    v81 = v113;
    v82 = (v112 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v83 = v82 - v112;
    if (v82 < v112)
    {
      v85 = 0;
      v84 = v113;
    }
    else
    {
      v84 = 0;
      if (v83 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v85 = 0;
      }
      else
      {
        v85 = 0;
        if (v83 + 2 <= v113)
        {
          *(_WORD *)(v112 + v83) = 2822;
          v84 = v81;
          v85 = v83 + 2;
        }
      }
    }
    v86 = (_QWORD *)((v80 + v85 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v86 >= v80 + v85)
    {
      v85 = (unint64_t)v86 - v80 + 8;
      if ((unint64_t)v86 - v80 > 0xFFFFFFFFFFFFFFF7 || v85 > v84)
        return result;
      *v86 = v17;
    }
    if (!v84)
      return result;
    v88 = (v18[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v89 = v18[7];
    if (v88 + 16 >= v89)
      v88 = 0;
    if (v85 <= 0x10)
      v85 = 16;
    v90 = v88 + v85;
    if (v89 <= v90)
      v91 = 0;
    else
      v91 = v90;
    v18[9] = v91;
    v92 = (unint64_t *)(*(_QWORD *)(v18[8] + 16) + 128);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v91, v92));
    v94 = *((_DWORD *)v18 + 27);
    if (v93 == 0x80000000 || v94 != 0)
    {
      v96 = v94 + 1;
      *((_DWORD *)v18 + 27) = v96;
      if (v96 >= *((_DWORD *)v18 + 26))
      {
        if (*((_BYTE *)v18 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v18 + 21));
        *((_DWORD *)v18 + 27) = 0;
      }
    }
    v18[6] = v17;
  }
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v18 + 7), &v112, v20);
  if (!v114)
    return result;
  v21 = v112;
  v22 = v113;
  v23 = (v112 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v24 = v23 - v112;
  if (v23 >= v112)
  {
    v25 = v24 + 2;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v25 <= v113)
    {
      *(_WORD *)(v112 + v24) = 752;
      goto LABEL_13;
    }
    v22 = 0;
  }
  v25 = 0;
LABEL_13:
  v27 = (v21 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = v27 - (v21 + v25);
  if (v27 >= v21 + v25)
  {
    v29 = v27 - v21;
    v30 = v28 + v25 + 8;
    if (v29 > 0xFFFFFFFFFFFFFFF7 || v30 > v22)
    {
      v22 = 0;
    }
    else
    {
      *(_QWORD *)(v21 + v29) = v110;
      v25 = v30;
    }
  }
  v32 = (v21 + v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v33 = v32 - (v21 + v25);
  if (v32 >= v21 + v25)
  {
    v34 = v32 - v21;
    v35 = v33 + v25 + 4;
    if (v34 > 0xFFFFFFFFFFFFFFFBLL || v35 > v22)
    {
      v22 = 0;
    }
    else
    {
      *(_DWORD *)(v21 + v34) = a3;
      v25 = v35;
    }
  }
  v37 = (v21 + v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v38 = v37 >= v21 + v25;
  v39 = v37 - (v21 + v25);
  if (v38)
  {
    v108 = 0;
    v40 = v39 + v25;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v22)
    {
      *(_DWORD *)(v21 + v40) = a4;
      v108 = v22;
      v25 = v40 + 4;
    }
  }
  else
  {
    v108 = v22;
  }
  v41 = (v21 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = v41 >= v21 + v25;
  v42 = v41 - (v21 + v25);
  if (v38)
  {
    v107 = 0;
    v43 = v42 + v25;
    if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= v108)
    {
      *(_QWORD *)(v21 + v43) = v109;
      v107 = v108;
      v25 = v43 + 8;
    }
  }
  else
  {
    v107 = v108;
  }
  v44 = (_QWORD *)((v21 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v44 >= v21 + v25)
  {
    v45 = (char *)v44 - v21;
    if ((unint64_t)v44 - v21 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_54;
    v25 = (unint64_t)(v45 + 8);
    if ((unint64_t)(v45 + 8) > v107)
      goto LABEL_54;
    *v44 = a6;
  }
  if (v107)
  {
    v46 = v18[8];
    v47 = (v18[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v18[7];
    if (v47 + 16 >= v48)
      v47 = 0;
    if (v25 <= 0x10)
      v25 = 16;
    v49 = v47 + v25;
    if (v48 <= v49)
      v50 = 0;
    else
      v50 = v49;
    v18[9] = v50;
    v51 = (unint64_t *)(*(_QWORD *)(v46 + 16) + 128);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v50, v51));
    if (v52 == 0x80000000 || *((_DWORD *)v18 + 27))
    {
      if (*((_BYTE *)v18 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v18 + 21));
      *((_DWORD *)v18 + 27) = 0;
    }
    return result;
  }
LABEL_54:
  if (!v114)
  {
    __break(1u);
LABEL_130:
    munmap(result, *((_QWORD *)a5 + 69));
    goto LABEL_112;
  }
  v53 = (v112 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = v53 - v112;
  if (v53 < v112)
  {
    v55 = 0;
  }
  else
  {
    v55 = 0;
    if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v54 + 2 <= v113)
    {
      *(_WORD *)(v112 + v54) = 2821;
      v55 = v54 + 2;
    }
  }
  v56 = v18[8];
  v57 = (v18[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v18[7];
  if (v57 + 16 >= v58)
    v57 = 0;
  if (v55 <= 0x10)
    v55 = 16;
  v59 = v57 + v55;
  if (v58 <= v59)
    v59 = 0;
  v18[9] = v59;
  v60 = (unint64_t *)(*(_QWORD *)(v56 + 16) + 128);
  do
    __ldaxr(v60);
  while (__stlxr(v59, v60));
  *((_DWORD *)v18 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v111, (uint64_t **)v18 + 1);
  v18 = v111;
  a5 = (const WebCore::WebGPU::Buffer *)WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)a5 = 752;
  *((_QWORD *)a5 + 1) = v17;
  v7 = (unsigned __int8 ***)((char *)a5 + 16);
  *((_QWORD *)a5 + 66) = (char *)a5 + 16;
  *((_QWORD *)a5 + 67) = (char *)a5 + 16;
  *((_OWORD *)a5 + 34) = xmmword_1978CE2D0;
  *((_OWORD *)a5 + 35) = 0u;
  IPC::Encoder::encodeHeader(a5);
  v115 = a5;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a5, &v110);
  v61 = *((_QWORD *)a5 + 68);
  v8 = (v61 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v8 + 4;
  v62 = *((_QWORD *)a5 + 69);
  if (v62 >= v8 + 4)
  {
    v6 = (char *)*((_QWORD *)a5 + 66);
    goto LABEL_69;
  }
  v97 = (2 * v62 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v17 = v97;
    v97 *= 2;
  }
  while (v17 < v9);
  v98 = (char *)mmap(0, v17, 3, 4098, -1, 0);
  if (v98 == (char *)-1)
  {
    __break(0xC471u);
    goto LABEL_137;
  }
  v6 = v98;
  memcpy(v98, *((const void **)a5 + 66), *((_QWORD *)a5 + 68));
  result = (unsigned __int8 ***)*((_QWORD *)a5 + 66);
  if (result != v7)
    goto LABEL_130;
LABEL_112:
  *((_QWORD *)a5 + 66) = v6;
  *((_QWORD *)a5 + 69) = v17;
  v61 = *((_QWORD *)a5 + 68);
LABEL_69:
  bzero(&v6[v61], v8 - v61);
  *((_QWORD *)a5 + 68) = v9;
  v63 = (_DWORD *)(*((_QWORD *)a5 + 66) + v8);
  *((_QWORD *)a5 + 67) = v63 + 1;
  *v63 = a3;
  v64 = *((_QWORD *)a5 + 68);
  v65 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v66 = v65 + 4;
  v67 = *((_QWORD *)a5 + 69);
  if (v67 < v65 + 4)
  {
    v99 = (2 * v67 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v100 = v99;
      v99 *= 2;
    }
    while (v100 < v66);
    v101 = (char *)mmap(0, v100, 3, 4098, -1, 0);
    if (v101 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x19754831CLL);
    }
    v68 = v101;
    memcpy(v101, *((const void **)a5 + 66), *((_QWORD *)a5 + 68));
    v102 = (unsigned __int8 ***)*((_QWORD *)a5 + 66);
    if (v102 != v7)
      munmap(v102, *((_QWORD *)a5 + 69));
    *((_QWORD *)a5 + 66) = v68;
    *((_QWORD *)a5 + 69) = v100;
    v64 = *((_QWORD *)a5 + 68);
  }
  else
  {
    v68 = (char *)*((_QWORD *)a5 + 66);
  }
  bzero(&v68[v64], v65 - v64);
  *((_QWORD *)a5 + 68) = v66;
  v69 = (_DWORD *)(*((_QWORD *)a5 + 66) + v65);
  *((_QWORD *)a5 + 67) = v69 + 1;
  *v69 = a4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a5, (uint64_t *)&v109);
  v70 = *((_QWORD *)a5 + 68);
  v71 = (v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  v72 = v71 + 8;
  v73 = *((_QWORD *)a5 + 69);
  if (v73 < v71 + 8)
  {
    v103 = (2 * v73 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v104 = v103;
      v103 *= 2;
    }
    while (v104 < v72);
    v105 = (char *)mmap(0, v104, 3, 4098, -1, 0);
    if (v105 != (char *)-1)
    {
      v74 = v105;
      memcpy(v105, *((const void **)a5 + 66), *((_QWORD *)a5 + 68));
      v106 = (unsigned __int8 ***)*((_QWORD *)a5 + 66);
      if (v106 != v7)
        munmap(v106, *((_QWORD *)a5 + 69));
      *((_QWORD *)a5 + 66) = v74;
      *((_QWORD *)a5 + 69) = v104;
      v70 = *((_QWORD *)a5 + 68);
      goto LABEL_73;
    }
    __break(0xC471u);
LABEL_137:
    JUMPOUT(0x197548314);
  }
  v74 = (char *)*((_QWORD *)a5 + 66);
LABEL_73:
  bzero(&v74[v70], v71 - v70);
  *((_QWORD *)a5 + 68) = v72;
  v75 = (_QWORD *)(*((_QWORD *)a5 + 66) + v71);
  *((_QWORD *)a5 + 67) = v75 + 1;
  *v75 = a6;
  IPC::Connection::sendMessageImpl((uint64_t)v18, (uint64_t *)&v115, 1, 0);
  v77 = v115;
  v115 = 0;
  if (v77)
  {
    IPC::Encoder::~Encoder(v77, v76);
    WTF::fastFree(v78, v79);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v111);
}

WTF::StringImpl *WebKit::WebGPU::RemoteCommandEncoderProxy::finish@<X0>(_QWORD *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::ApproximateTime *v6;
  uint64_t v7;
  double v8;
  double v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  int v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  IPC::Encoder *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  unsigned int v60;
  WTF::ApproximateTime *v61;
  WTF::StringImpl *v62;
  char v63;
  uint64_t *v64;
  IPC::Encoder *v65;
  unint64_t v66;
  char v67;
  IPC::Encoder *v68;
  unint64_t v69;
  unint64_t v70;

  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v62 = v5;
  v63 = 1;
  v61 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v6 = (WTF::ApproximateTime *)a1[3];
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 176) + 96) + 96);
  WTF::ApproximateTime::now(v61);
  v9 = v8 + 30.0;
  if (*(WTF::ApproximateTime **)(v7 + 48) == v6)
  {
LABEL_4:
    result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v65, v9);
    if (v67)
    {
      v68 = v65;
      v69 = v66;
      v70 = 0;
      v12 = ((unint64_t)v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v13 = v12 >= (unint64_t)v65;
      v14 = v12 - (_QWORD)v65;
      if (v13)
      {
        if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v66)
          goto LABEL_89;
        *(_WORD *)((char *)v65 + v14) = 748;
        v70 = v14 + 2;
      }
      while (1)
      {
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v68, (uint64_t *)&v62);
        v16 = v70;
        v17 = (char *)(((unint64_t)v68 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v17 >= (char *)v68 + v70)
        {
          v18 = v17 - (char *)v68;
          if ((unint64_t)(v17 - (char *)v68) > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_31;
          v16 = v18 + 8;
          if (v18 + 8 > v69)
            goto LABEL_31;
          *(_QWORD *)v17 = v61;
          v70 = v18 + 8;
        }
        if (v69)
        {
          v19 = *(_QWORD *)(v7 + 64);
          v20 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v21 = *(_QWORD *)(v7 + 56);
          if (v20 + 16 >= v21)
            v20 = 0;
          if (v16 <= 0x10)
            v16 = 16;
          v22 = v20 + v16;
          if (v21 <= v22)
            v23 = 0;
          else
            v23 = v22;
          *(_QWORD *)(v7 + 72) = v23;
          v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v23, v24));
          if (v25 == 0x80000000 || *(_DWORD *)(v7 + 108))
          {
            if (*(_BYTE *)(v7 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
            *(_DWORD *)(v7 + 108) = 0;
          }
          goto LABEL_48;
        }
LABEL_31:
        if (!v67)
          goto LABEL_88;
        v26 = ((unint64_t)v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = v26 - (_QWORD)v65;
        if (v26 < (unint64_t)v65)
        {
          v28 = 0;
        }
        else
        {
          v28 = 0;
          if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v66)
          {
            *(_WORD *)((char *)v65 + v27) = 2821;
            v28 = v27 + 2;
          }
        }
        v29 = *(_QWORD *)(v7 + 64);
        v30 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v31 = *(_QWORD *)(v7 + 56);
        if (v30 + 16 >= v31)
          v30 = 0;
        if (v28 <= 0x10)
          v28 = 16;
        v32 = v30 + v28;
        if (v31 <= v32)
          v32 = 0;
        *(_QWORD *)(v7 + 72) = v32;
        v33 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
        do
          __ldaxr(v33);
        while (__stlxr(v32, v33));
        *(_DWORD *)(v7 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)(v7 + 8));
        v34 = v64;
        v35 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v35 = 748;
        *(_QWORD *)(v35 + 8) = v6;
        *(_QWORD *)(v35 + 528) = v35 + 16;
        *(_QWORD *)(v35 + 536) = v35 + 16;
        *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v35 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
        v68 = (IPC::Encoder *)v35;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v35, (uint64_t *)&v62);
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v35, (uint64_t *)&v61);
        v37 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v68, 1, 0);
        v38 = v68;
        v68 = 0;
        if (v38)
        {
          IPC::Encoder::~Encoder(v38, v36);
          WTF::fastFree(v39, v40);
        }
        result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v64);
        if (v37)
          goto LABEL_47;
LABEL_48:
        v42 = a1[4];
        v7 = a1[5];
        v6 = v61;
        v43 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)(v43 + 16) = 0;
        *(_DWORD *)(v43 + 8) = 1;
        *(_QWORD *)v43 = off_1E34E3CA0;
        *(_QWORD *)(v43 + 24) = v6;
        ++*(_DWORD *)(v42 + 8);
        *(_QWORD *)(v43 + 32) = v42;
        ++*(_DWORD *)(v7 + 8);
        *(_QWORD *)(v43 + 40) = v7;
        if (v63)
        {
          v41 = v43;
          v44 = v62;
          v62 = 0;
          *(_QWORD *)(v43 + 16) = v44;
          v68 = (IPC::Encoder *)(v43 + 16);
          result = (WTF::StringImpl *)WebKit::WebGPU::RemoteCommandBufferProxy::send<Messages::RemoteCommandBuffer::SetLabel>(*(WTF::ApproximateTime **)(v43 + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 40) + 176) + 96) + 96), (uint64_t **)&v68);
          goto LABEL_50;
        }
LABEL_88:
        __break(1u);
LABEL_89:
        v69 = 0;
      }
    }
    goto LABEL_47;
  }
  result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v68, v8 + 30.0);
  if (!(_BYTE)v70)
    goto LABEL_47;
  v46 = v68;
  v45 = v69;
  v47 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v48 = v47 - (_QWORD)v68;
  if (v47 >= (unint64_t)v68)
  {
    v49 = v48 + 2;
    if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v69)
    {
      *(_WORD *)((char *)v68 + v48) = 2822;
      goto LABEL_63;
    }
    v45 = 0;
  }
  v49 = 0;
LABEL_63:
  v51 = (char *)(((unint64_t)v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v51 >= (char *)v46 + v49)
  {
    v49 = v51 - (char *)v46 + 8;
    if ((unint64_t)(v51 - (char *)v46) > 0xFFFFFFFFFFFFFFF7 || v49 > v45)
      goto LABEL_47;
    *(_QWORD *)v51 = v6;
  }
  if (v45)
  {
    v53 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = *(_QWORD *)(v7 + 56);
    if (v53 + 16 >= v54)
      v53 = 0;
    if (v49 <= 0x10)
      v49 = 16;
    v55 = v53 + v49;
    if (v54 <= v55)
      v55 = 0;
    *(_QWORD *)(v7 + 72) = v55;
    v56 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 64) + 16) + 128);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v55, v56));
    v58 = *(_DWORD *)(v7 + 108);
    if (v57 == 0x80000000 || v58 != 0)
    {
      v60 = v58 + 1;
      *(_DWORD *)(v7 + 108) = v60;
      if (v60 >= *(_DWORD *)(v7 + 104))
      {
        if (*(_BYTE *)(v7 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
        *(_DWORD *)(v7 + 108) = 0;
      }
    }
    *(_QWORD *)(v7 + 48) = v6;
    goto LABEL_4;
  }
LABEL_47:
  v41 = 0;
LABEL_50:
  *a3 = v41;
  if (v63)
  {
    result = v62;
    v62 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteCommandEncoderProxy::setLabelInternal(WebKit::WebGPU::RemoteCommandEncoderProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 753;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 753;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteCompositorIntegrationProxy::~RemoteCompositorIntegrationProxy(WebKit::WebGPU::RemoteCompositorIntegrationProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  IPC::Encoder *v62;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 96);
  v3 = *((_QWORD *)this + 3);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v59, v4 + 30.0);
  if (!v61)
    goto LABEL_78;
  v21 = v59;
  v20 = v60;
  v22 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v59;
  if (v22 < v59)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v60)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v59 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v3;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v2 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v2 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v2 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v2 + 108) = v35;
    if (v35 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v59, v5);
  if (!v61)
    goto LABEL_78;
  v7 = v59;
  v8 = v60;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v59;
  if ((unint64_t)v9 < v59)
  {
    v11 = 0;
    if (v60)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v60)
      goto LABEL_60;
    *v9 = 755;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v2 + 64);
      v14 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v2 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v2 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v61)
  {
    __break(1u);
LABEL_96:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v59;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_96;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v60)
    goto LABEL_96;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v2 + 64);
  v41 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v2 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v2 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v2 + 8));
  v45 = v58;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 755;
  *(_QWORD *)(v46 + 8) = v3;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v62 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v62, 1, 0);
  v48 = v62;
  v62 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v58);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v52)
    WTF::ThreadSafeRefCounted<WebKit::RemoteGPUProxy,(WTF::DestructionThread)0>::deref((unsigned int *)(v52 + 24), v6);
  v53 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v53)
  {
    if (v53[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
    else
      --v53[2];
  }
  v54 = *((_QWORD *)this + 2);
  if (v54)
  {
    *(_QWORD *)(v54 + 8) = 0;
    v55 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v55)
    {
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteCompositorIntegrationProxy::~RemoteCompositorIntegrationProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteCompositorIntegrationProxy::recreateRenderBuffers@<X0>(WTF::ApproximateTime *a1@<X0>, int a2@<W1>, int a3@<W2>, CFTypeRef *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t result;
  void *v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t *v60;
  IPC::Encoder *v61;
  int v62;
  void *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  WTF *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v76;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  unsigned int v86;
  char v87;
  int v88;
  CFTypeRef *v89;
  uint64_t v90;
  uint64_t *v91;
  WTF *v92;
  unint64_t v93;
  char v94;
  int v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  char v99;
  WTF *v100;
  int v101;
  char v102;
  IPC::Decoder *v103;
  int v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t *v110[2];

  v90 = *(_QWORD *)(a7 + 152);
  v14 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 96);
  v15 = *((_QWORD *)a1 + 3);
  WTF::ApproximateTime::now(a1);
  v17 = v16 + 30.0;
  if (*(_QWORD *)(v14 + 48) != v15)
  {
    result = IPC::StreamClientConnectionBuffer::tryAcquire(v14 + 56, &v92, v16 + 30.0);
    if (!v94)
    {
LABEL_145:
      v87 = 15;
      goto LABEL_143;
    }
    v71 = v92;
    v70 = v93;
    v72 = ((unint64_t)v92 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v73 = v72 - (_QWORD)v92;
    if (v72 >= (unint64_t)v92)
    {
      v74 = v73 + 2;
      if (v73 <= 0xFFFFFFFFFFFFFFFDLL && v74 <= v93)
      {
        *(_WORD *)((char *)v92 + v73) = 2822;
        goto LABEL_110;
      }
      v70 = 0;
    }
    v74 = 0;
LABEL_110:
    v76 = (char *)(((unint64_t)v71 + v74 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v76 >= (char *)v71 + v74)
    {
      v74 = v76 - (char *)v71 + 8;
      if ((unint64_t)(v76 - (char *)v71) > 0xFFFFFFFFFFFFFFF7 || v74 > v70)
      {
LABEL_142:
        v87 = 17;
LABEL_143:
        LOBYTE(v106) = v87;
        v67 = 1;
        v109 = 1;
        goto LABEL_98;
      }
      *(_QWORD *)v76 = v15;
    }
    if (v70)
    {
      v78 = *(_QWORD *)(v14 + 64);
      v79 = (*(_QWORD *)(v14 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v80 = *(_QWORD *)(v14 + 56);
      if (v79 + 16 >= v80)
        v79 = 0;
      if (v74 <= 0x10)
        v74 = 16;
      v81 = v79 + v74;
      if (v80 <= v81)
        v81 = 0;
      *(_QWORD *)(v14 + 72) = v81;
      v82 = (unint64_t *)(*(_QWORD *)(v78 + 16) + 128);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v81, v82));
      v84 = *(_DWORD *)(v14 + 108);
      if (v83 == 0x80000000 || v84 != 0)
      {
        v86 = v84 + 1;
        *(_DWORD *)(v14 + 108) = v86;
        if (v86 >= *(_DWORD *)(v14 + 104))
        {
          if (*(_BYTE *)(v14 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v14 + 84));
          *(_DWORD *)(v14 + 108) = 0;
        }
      }
      *(_QWORD *)(v14 + 48) = v15;
      goto LABEL_2;
    }
    goto LABEL_142;
  }
LABEL_2:
  result = IPC::StreamClientConnectionBuffer::tryAcquire(v14 + 56, &v97, v17);
  if (!v99)
  {
    LOBYTE(v106) = 15;
    v109 = 1;
    goto LABEL_97;
  }
  v88 = a3;
  v89 = a4;
  v20 = a5;
  v21 = a6;
  v22 = v97;
  v23 = v98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v110, (uint64_t **)(v14 + 8));
  v24 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v110[0], v24))
  {
    LOBYTE(v106) = 11;
    v109 = 1;
    LOBYTE(v92) = 0;
    v95 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v92, (uint64_t)&v106);
    v96 = 1;
    if (v109 != -1)
      ((void (*)(IPC::Decoder **, unint64_t *))off_1E34E3FB8[v109])(&v103, &v106);
    v22 = v21;
    v39 = v20;
    goto LABEL_67;
  }
  v106 = v22;
  v107 = v23;
  v108 = 0;
  v25 = (v22 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - v22;
  if (v25 < v22)
  {
    v27 = 0;
  }
  else
  {
    if (v26 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_136;
    v27 = v26 + 2;
    if (v26 + 2 > v23)
      goto LABEL_136;
    *(_WORD *)(v22 + v26) = 3543;
    v108 = v26 + 2;
  }
  while (1)
  {
    v28 = (v22 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    v29 = v28 - (v22 + v27);
    if (v28 >= v22 + v27)
    {
      v30 = v28 - v22;
      v31 = v29 + v27 + 8;
      if (v30 > 0xFFFFFFFFFFFFFFF7 || v31 > v23)
      {
        v23 = 0;
        v107 = 0;
      }
      else
      {
        *(_QWORD *)(v22 + v30) = v24;
        v108 = v31;
        v27 = v31;
      }
    }
    v33 = (_DWORD *)((v22 + v27 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v33 >= v22 + v27)
    {
      v34 = (char *)v33 - v22;
      if ((unint64_t)v33 - v22 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > v23)
      {
        v23 = 0;
        v107 = 0;
      }
      else
      {
        *v33 = a2;
        v108 = (unint64_t)(v34 + 4);
        v27 = (unint64_t)(v34 + 4);
      }
    }
    v35 = (_DWORD *)((v22 + v27 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v35 >= v22 + v27)
    {
      v36 = (char *)v35 - v22;
      if ((unint64_t)v35 - v22 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > v23)
      {
        v107 = 0;
      }
      else
      {
        *v35 = v88;
        v108 = (unint64_t)(v36 + 4);
      }
    }
    IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)&v106, v89);
    v37 = v108;
    if (v108 < v107)
    {
      v38 = v108 + 1;
      *(_BYTE *)(v106 + v108) = v20;
      v108 = v37 + 1;
      if (v37 + 1 < v107)
      {
        v39 = v20;
        v22 = v21;
        v37 += 2;
        *(_BYTE *)(v106 + v38) = v21;
        v108 = v37;
        v40 = v107;
        goto LABEL_25;
      }
      ++v37;
    }
    v40 = 0;
    v107 = 0;
    v22 = v21;
    v39 = v20;
LABEL_25:
    v41 = (_QWORD *)((v106 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v41 >= v106 + v37)
    {
      v42 = (char *)v41 - v106;
      if ((unint64_t)v41 - v106 > 0xFFFFFFFFFFFFFFF7
        || (v37 = (unint64_t)(v42 + 8), (unint64_t)(v42 + 8) > v40))
      {
LABEL_47:
        LOBYTE(v103) = 0;
        v105 = 0;
        goto LABEL_48;
      }
      *v41 = v90;
      v108 = (unint64_t)(v42 + 8);
      v40 = v107;
    }
    if (!v40)
      goto LABEL_47;
    v43 = *(_QWORD *)(v14 + 64);
    v44 = (*(_QWORD *)(v14 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v45 = *(_QWORD *)(v14 + 56);
    if (v44 + 16 >= v45)
      v44 = 0;
    if (v37 <= 0x10)
      v37 = 16;
    v46 = v44 + v37;
    if (v45 <= v46)
      v47 = 0;
    else
      v47 = v46;
    *(_QWORD *)(v14 + 72) = v47;
    v48 = (unint64_t *)(*(_QWORD *)(v43 + 16) + 128);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v47, v48));
    if (v49 == 0x80000000 || *(_DWORD *)(v14 + 108))
    {
      if (*(_BYTE *)(v14 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v14 + 84));
      *(_DWORD *)(v14 + 108) = 0;
    }
    *(_QWORD *)(v14 + 72) = 0;
    IPC::Connection::waitForSyncReply((uint64_t)v110[0], v24, 0xDD7u, (uint64_t)&v100, v17);
    LOBYTE(v103) = 0;
    v104 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v103, (uint64_t)&v100);
    v105 = 1;
    if (v101 != -1)
      ((void (*)(uint64_t **, WTF **))off_1E34E40D8[v101])(&v91, &v100);
LABEL_48:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder *)v110[0]);
    if (!v105)
    {
      LOBYTE(v92) = 0;
      v96 = 0;
      goto LABEL_67;
    }
    if (v104 == 1)
    {
      LOBYTE(v92) = (_BYTE)v103;
      v51 = 1;
      v95 = 1;
      v96 = 1;
LABEL_66:
      ((void (*)(unint64_t *, IPC::Decoder **))off_1E34E40D8[v51])(&v106, &v103);
      goto LABEL_67;
    }
    if (v104)
      goto LABEL_144;
    LOBYTE(v100) = 0;
    v102 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v103, &v100);
    if (v102)
    {
      if (!v105)
        goto LABEL_135;
      if (v104)
        goto LABEL_144;
      IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ConnectionSendSyncResult((uint64_t)&v106, (uint64_t *)&v103, (uint64_t *)&v100);
      LOBYTE(v92) = 0;
      v95 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v92, (uint64_t)&v106);
      v96 = 1;
      if (v109 != -1)
        ((void (*)(uint64_t **, unint64_t *))off_1E34E3FB8[v109])(&v91, &v106);
      if (v102)
        WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v50);
    }
    else
    {
      LOBYTE(v92) = 13;
      v95 = 1;
      v96 = 1;
    }
    if (v105)
    {
      v51 = v104;
      if (v104 != -1)
        goto LABEL_66;
    }
LABEL_67:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v110);
    if (v96)
    {
      LOBYTE(v106) = 0;
      v109 = -1;
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v106, (uint64_t)&v92);
      if (v96 && v95 != -1)
        result = ((uint64_t (*)(IPC::Decoder **, WTF **))off_1E34E3FB8[v95])(&v103, &v92);
      goto LABEL_97;
    }
    if (v99)
      break;
LABEL_135:
    __break(1u);
LABEL_136:
    v23 = 0;
    v27 = 0;
    v107 = 0;
  }
  v52 = (v97 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v97;
  if (v52 < v97)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v98)
    {
      *(_WORD *)(v97 + v53) = 2821;
      v54 = v53 + 2;
    }
  }
  v55 = *(_QWORD *)(v14 + 64);
  v56 = (*(_QWORD *)(v14 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v57 = *(_QWORD *)(v14 + 56);
  if (v56 + 16 >= v57)
    v56 = 0;
  if (v54 <= 0x10)
    v54 = 16;
  v58 = v56 + v54;
  if (v57 <= v58)
    v58 = 0;
  *(_QWORD *)(v14 + 72) = v58;
  v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
  do
    __ldaxr(v59);
  while (__stlxr(v58, v59));
  *(_DWORD *)(v14 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v91, (uint64_t **)(v14 + 8));
  v60 = v91;
  v100 = 0;
  IPC::Connection::createSyncMessageEncoder(3543, v15, (uint64_t *)&v100, (uint64_t *)v110);
  v61 = (IPC::Encoder *)v110[0];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v110[0], 4uLL, 4) = a2;
  *(_DWORD *)IPC::Encoder::grow(v61, 4uLL, 4) = v88;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v61, v89);
  *IPC::Encoder::grow(v61, 1uLL, 1) = v39;
  *IPC::Encoder::grow(v61, 1uLL, 1) = v22;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(v61, &v90);
  IPC::Connection::sendSyncMessage((uint64_t)v60, (uint64_t)v100, (uint64_t *)v110, 0, (uint64_t)&v103, v17);
  if (v104)
  {
    if (v104 == 1)
    {
      LOBYTE(v106) = (_BYTE)v103;
      v62 = 1;
      v109 = 1;
      goto LABEL_93;
    }
LABEL_144:
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_145;
  }
  LOBYTE(v92) = 0;
  v94 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v103, &v92);
  if (v94)
  {
    if (v104)
      goto LABEL_144;
    IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ConnectionSendSyncResult((uint64_t)&v106, (uint64_t *)&v103, (uint64_t *)&v92);
    if (v94)
      WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v92, v63);
  }
  else
  {
    LOBYTE(v106) = 13;
    v109 = 1;
  }
  v62 = v104;
  if (v104 != -1)
LABEL_93:
    ((void (*)(WTF **, IPC::Decoder **))off_1E34E40D8[v62])(&v92, &v103);
  v64 = (IPC::Encoder *)v110[0];
  v110[0] = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v63);
    WTF::fastFree(v65, v66);
  }
  result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v91);
LABEL_97:
  v67 = v109;
  if (v109)
  {
LABEL_98:
    *a8 = 0;
    a8[1] = 0;
  }
  else
  {
    v68 = v107;
    v107 = 0;
    v92 = 0;
    *a8 = v68;
    v93 = 0;
    v69 = v108;
    v108 = 0;
    a8[1] = v69;
    result = WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v92, v19);
    v67 = v109;
  }
  if (v67 != -1)
    return ((uint64_t (*)(WTF **, unint64_t *))off_1E34E3FB8[v67])(&v92, &v106);
  return result;
}

uint64_t WebKit::WebGPU::RemoteCompositorIntegrationProxy::prepareForDisplay(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  unsigned __int16 v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unsigned __int16 v37;
  void *v38;
  uint64_t *v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v50;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  char v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t result;
  unsigned int v65;
  uint64_t **v66;
  uint64_t *v67;
  unint64_t v68;
  int v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t *v74;
  int v75;
  int v76;
  uint64_t *v77;
  unsigned int v78;
  unsigned int v79;
  IPC::Decoder *v80;
  char v81;

  v4 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 96);
  v5 = *((_QWORD *)a1 + 3);
  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v5)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v67, v6 + 30.0);
  if (!(_BYTE)v69)
    goto LABEL_108;
  v45 = v67;
  v44 = v68;
  v46 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = v46 - (_QWORD)v67;
  if (v46 >= (unint64_t)v67)
  {
    v48 = v47 + 2;
    if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v68)
    {
      *(_WORD *)((char *)v67 + v47) = 2822;
      goto LABEL_87;
    }
    v44 = 0;
  }
  v48 = 0;
LABEL_87:
  v50 = (char *)(((unint64_t)v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v50 >= (char *)v45 + v48)
  {
    v48 = v50 - (char *)v45 + 8;
    if ((unint64_t)(v50 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v48 > v44)
      goto LABEL_125;
    *(_QWORD *)v50 = v5;
  }
  if (!v44)
  {
LABEL_125:
    v60 = 17;
    goto LABEL_109;
  }
  v52 = *(_QWORD *)(v4 + 64);
  v53 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = *(_QWORD *)(v4 + 56);
  if (v53 + 16 >= v54)
    v53 = 0;
  if (v48 <= 0x10)
    v48 = 16;
  v55 = v53 + v48;
  if (v54 <= v55)
    v55 = 0;
  *(_QWORD *)(v4 + 72) = v55;
  v56 = (unint64_t *)(*(_QWORD *)(v52 + 16) + 128);
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v55, v56));
  v58 = *(_DWORD *)(v4 + 108);
  if (v57 == 0x80000000 || v58 != 0)
  {
    v65 = v58 + 1;
    *(_DWORD *)(v4 + 108) = v65;
    if (v65 >= *(_DWORD *)(v4 + 104))
    {
      if (*(_BYTE *)(v4 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
      *(_DWORD *)(v4 + 108) = 0;
    }
  }
  *(_QWORD *)(v4 + 48) = v5;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v71, v7);
  if (!v73)
  {
LABEL_108:
    v60 = 15;
LABEL_109:
    LOBYTE(v77) = v60;
    v79 = 1;
    goto LABEL_110;
  }
  v8 = v71;
  v9 = v72;
  v10 = (uint64_t **)(v4 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v80, (uint64_t **)(v4 + 8));
  v11 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v80, v11))
  {
    LOBYTE(v77) = 11;
    v11 = 1;
    v79 = 1;
    LOBYTE(v67) = 0;
    v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v67, (uint64_t)&v77);
    v70 = 1;
    v25 = v79;
    if (v79 == -1)
      goto LABEL_43;
    v26 = off_1E34E3FC8;
    goto LABEL_42;
  }
  v12 = (v8 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v13 = v12 - v8;
  if (v12 < v8)
    goto LABEL_127;
  v14 = 0;
  if (v13 > 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_122;
  v15 = 0;
  if (v13 + 2 <= v9)
  {
    *(_WORD *)(v8 + v13) = 3542;
    v14 = v9;
    v15 = v13 + 2;
  }
  while (1)
  {
    while (1)
    {
      v16 = (_QWORD *)((v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v16 >= v8 + v15)
      {
        v15 = (unint64_t)v16 - v8 + 8;
        if ((unint64_t)v16 - v8 > 0xFFFFFFFFFFFFFFF7 || v15 > v14)
        {
LABEL_30:
          LOBYTE(v77) = 0;
          LOBYTE(v79) = 0;
          goto LABEL_31;
        }
        *v16 = v11;
      }
      if (!v14)
        goto LABEL_30;
      v18 = *(_QWORD *)(v4 + 64);
      v19 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_QWORD *)(v4 + 56);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v21 = v19 + v15;
      if (v20 <= v21)
        v22 = 0;
      else
        v22 = v21;
      *(_QWORD *)(v4 + 72) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      if (v24 == 0x80000000 || *(_DWORD *)(v4 + 108))
      {
        if (*(_BYTE *)(v4 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
        *(_DWORD *)(v4 + 108) = 0;
      }
      *(_QWORD *)(v4 + 72) = 0;
      IPC::Connection::waitForSyncReply((uint64_t)v80, v11, 0xDD6u, (uint64_t)&v74, v7);
      LOBYTE(v77) = 0;
      v78 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v77, (uint64_t)&v74);
      LOBYTE(v79) = 1;
      if (v75 != -1)
        ((void (*)(uint64_t ***, uint64_t **))off_1E34E40D8[v75])(&v66, &v74);
LABEL_31:
      IPC::Connection::popPendingSyncRequestID(v80);
      if ((_BYTE)v79)
      {
        if (v78 == 1)
        {
          v28 = (char)v77;
          goto LABEL_38;
        }
        if (v78)
          goto LABEL_126;
        v27 = IPC::Decoder::decode<std::tuple<BOOL>>(v77);
        if (v27 < 0x100u)
        {
          v28 = 13;
LABEL_38:
          LOBYTE(v67) = v28;
          v69 = 1;
          v70 = 1;
          goto LABEL_39;
        }
        if (!(_BYTE)v79)
          goto LABEL_121;
        if (v78)
          goto LABEL_126;
        v43 = v77;
        v77 = 0;
        v74 = v43;
        LOBYTE(v75) = v27;
        v76 = 0;
        LOBYTE(v67) = 0;
        v69 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v67, (uint64_t)&v74);
        v70 = 1;
        if (v76 != -1)
          ((void (*)(uint64_t ***, uint64_t **))off_1E34E3FC8[v76])(&v66, &v74);
      }
      else
      {
        LOBYTE(v67) = 0;
        v70 = 0;
      }
LABEL_39:
      if ((_BYTE)v79)
      {
        v25 = v78;
        if (v78 != -1)
        {
          v26 = off_1E34E40D8;
LABEL_42:
          ((void (*)(uint64_t **, uint64_t **))v26[v25])(&v74, &v77);
        }
      }
LABEL_43:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v80);
      if (v70)
      {
        LOBYTE(v77) = 0;
        v79 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v77, (uint64_t)&v67);
        if (v70 && v69 != -1)
          ((void (*)(uint64_t **, uint64_t **))off_1E34E3FC8[v69])(&v74, &v67);
        goto LABEL_110;
      }
      if (v73)
        break;
LABEL_121:
      __break(1u);
LABEL_122:
      v15 = v14;
    }
    v29 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v30 = v29 - v71;
    if (v29 < v71)
    {
      v31 = 0;
    }
    else
    {
      v31 = 0;
      if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v72)
      {
        *(_WORD *)(v71 + v30) = 2821;
        v31 = v30 + 2;
      }
    }
    v32 = *(_QWORD *)(v4 + 64);
    v33 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)(v4 + 56);
    if (v33 + 16 >= v34)
      v33 = 0;
    if (v31 <= 0x10)
      v31 = 16;
    v35 = v33 + v31;
    if (v34 <= v35)
      v35 = 0;
    *(_QWORD *)(v4 + 72) = v35;
    v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
    do
      __ldaxr(v36);
    while (__stlxr(v35, v36));
    *(_DWORD *)(v4 + 108) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, v10);
    v10 = v66;
    v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3542, v5, (uint64_t *)&v74, (uint64_t *)&v80);
    IPC::Connection::sendSyncMessage((uint64_t)v10, (uint64_t)v74, (uint64_t *)&v80, 0, (uint64_t)&v67, v7);
    v5 = v68;
    if ((_DWORD)v68)
    {
      if ((_DWORD)v68 == 1)
      {
        LOBYTE(v77) = (_BYTE)v67;
LABEL_68:
        v79 = v5;
        goto LABEL_69;
      }
      goto LABEL_126;
    }
    v37 = IPC::Decoder::decode<std::tuple<BOOL>>(v67);
    if (v37 < 0x100u)
      break;
    if (!(_DWORD)v68)
    {
      v39 = v67;
      v67 = 0;
      v77 = v39;
      LOBYTE(v78) = v37;
      goto LABEL_68;
    }
LABEL_126:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_127:
    v15 = 0;
    v14 = v9;
  }
  LOBYTE(v77) = 13;
  v79 = 1;
  LODWORD(v5) = v68;
  if ((_DWORD)v68 == -1)
    goto LABEL_70;
LABEL_69:
  ((void (*)(char *, uint64_t **))off_1E34E40D8[v5])(&v81, &v67);
LABEL_70:
  v40 = v80;
  v80 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v66);
LABEL_110:
  v61 = *((_QWORD *)a1 + 6);
  v62 = *(_DWORD **)(v61 + 40);
  *(_QWORD *)(v61 + 40) = 0;
  if (v62)
  {
    if (v62[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
    else
      --v62[2];
  }
  v63 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  if (v79 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34E3FC8[v79])(&v67, &v77);
  return result;
}

uint64_t WebKit::WebGPU::RemoteCompositorIntegrationProxy::paintCompositedResultsToCanvas(WebKit::WebGPU::RemoteCompositorIntegrationProxy *this, WebCore::ImageBuffer *a2, int a3)
{
  WTF::ApproximateTime *v6;
  uint64_t v7;
  IPC::Encoder *v8;
  double v9;
  double v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _BOOL8 v42;
  double v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  IPC::Decoder *v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  IPC::Decoder *v62;
  void *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  int v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  unsigned int v84;
  char v85;
  uint64_t v86;
  uint64_t **v87;
  IPC::Decoder *v88;
  unint64_t v89;
  int v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  int v96;
  int v97;
  IPC::Decoder *v98;
  int v99;
  int v100;
  IPC::Decoder *v101;
  char v102;

  v6 = (WTF::ApproximateTime *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)a2 + 24))(a2);
  v86 = *((_QWORD *)a2 + 15);
  v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 96);
  v8 = (IPC::Encoder *)*((_QWORD *)this + 3);
  WTF::ApproximateTime::now(v6);
  v10 = v9 + 30.0;
  if (*(IPC::Encoder **)(v7 + 48) != v8)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v88, v9 + 30.0);
    if (!(_BYTE)v90)
    {
      v85 = 15;
      goto LABEL_136;
    }
    v69 = (char *)v88;
    v68 = v89;
    v70 = ((unint64_t)v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v71 = v70 - (_QWORD)v88;
    if (v70 >= (unint64_t)v88)
    {
      v72 = v71 + 2;
      if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v89)
      {
        *(_WORD *)((char *)v88 + v71) = 2822;
        goto LABEL_105;
      }
      v68 = 0;
    }
    v72 = 0;
LABEL_105:
    v74 = (char *)((unint64_t)&v69[v72 + 7] & 0xFFFFFFFFFFFFFFF8);
    if (v74 >= &v69[v72])
    {
      v72 = v74 - v69 + 8;
      if ((unint64_t)(v74 - v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      {
LABEL_135:
        v85 = 17;
LABEL_136:
        LOBYTE(v98) = v85;
        v67 = 1;
        v100 = 1;
        return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1E34E3FD8[v67])(&v88, &v98);
      }
      *(_QWORD *)v74 = v8;
    }
    if (v68)
    {
      v76 = *(_QWORD *)(v7 + 64);
      v77 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v78 = *(_QWORD *)(v7 + 56);
      if (v77 + 16 >= v78)
        v77 = 0;
      if (v72 <= 0x10)
        v72 = 16;
      v79 = v77 + v72;
      if (v78 <= v79)
        v79 = 0;
      *(_QWORD *)(v7 + 72) = v79;
      v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v79, v80));
      v82 = *(_DWORD *)(v7 + 108);
      if (v81 == 0x80000000 || v82 != 0)
      {
        v84 = v82 + 1;
        *(_DWORD *)(v7 + 108) = v84;
        if (v84 >= *(_DWORD *)(v7 + 104))
        {
          if (*(_BYTE *)(v7 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
          *(_DWORD *)(v7 + 108) = 0;
        }
      }
      *(_QWORD *)(v7 + 48) = v8;
      goto LABEL_2;
    }
    goto LABEL_135;
  }
LABEL_2:
  result = IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v92, v10);
  if (!v94)
  {
    LOBYTE(v98) = 15;
    v100 = 1;
    goto LABEL_92;
  }
  v12 = v92;
  v13 = v93;
  v14 = (uint64_t **)(v7 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, (uint64_t **)(v7 + 8));
  v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v101, v15))
  {
    LOBYTE(v98) = 11;
    v15 = 1;
    v100 = 1;
    LOBYTE(v88) = 0;
    v90 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v88, (uint64_t)&v98);
    v91 = 1;
    if (v100 != -1)
      ((void (*)(uint64_t *, IPC::Decoder **))off_1E34E3FD8[v100])(&v95, &v98);
    goto LABEL_68;
  }
  v16 = (v12 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v12;
  if (v16 < v12)
  {
    v19 = 0;
    v18 = v13;
  }
  else
  {
    v18 = 0;
    if (v17 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v19 = 0;
    }
    else
    {
      v19 = 0;
      if (v17 + 2 <= v13)
      {
        *(_WORD *)(v12 + v17) = 3541;
        v18 = v13;
        v19 = v17 + 2;
      }
    }
  }
  v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 - (v12 + v19);
  if (v20 >= v12 + v19)
  {
    v22 = v20 - v12;
    v23 = v21 + v19 + 8;
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v18)
      goto LABEL_131;
    *(_QWORD *)(v12 + v22) = v15;
    v19 = v23;
  }
  while (1)
  {
    v25 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v26 = v25 >= v12 + v19;
    v27 = v25 - (v12 + v19);
    if (!v26)
      goto LABEL_138;
    v28 = 0;
    v29 = v27 + v19;
    if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= v18)
    {
      *(_QWORD *)(v12 + v29) = v86;
      v28 = v18;
      v19 = v29 + 8;
    }
LABEL_19:
    v30 = (_DWORD *)((v12 + v19 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v30 >= v12 + v19)
    {
      v31 = (char *)v30 - v12;
      if ((unint64_t)v30 - v12 > 0xFFFFFFFFFFFFFFFBLL
        || (v19 = (unint64_t)(v31 + 4), (unint64_t)(v31 + 4) > v28))
      {
LABEL_50:
        LOBYTE(v98) = 0;
        LOBYTE(v100) = 0;
        goto LABEL_57;
      }
      *v30 = a3;
    }
    if (!v28)
      goto LABEL_50;
    v32 = *(_QWORD *)(v7 + 64);
    v33 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)(v7 + 56);
    if (v33 + 16 >= v34)
      v33 = 0;
    if (v19 <= 0x10)
      v19 = 16;
    v35 = v33 + v19;
    if (v34 <= v35)
      v36 = 0;
    else
      v36 = v35;
    *(_QWORD *)(v7 + 72) = v36;
    v37 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v36, v37));
    if (v38 == 0x80000000 || *(_DWORD *)(v7 + 108))
    {
      if (*(_BYTE *)(v7 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
      *(_DWORD *)(v7 + 108) = 0;
    }
    v12 = v7 + 88;
    while (1)
    {
      v39 = *(unint64_t **)(*(_QWORD *)(v7 + 64) + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(0x80000000uLL, v39));
      v41 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 64) + 16) + 128));
      if (!(v40 | v41 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*(_BYTE *)(v7 + 96))
      {
        v42 = IPC::Semaphore::waitFor((semaphore_t *)(v7 + 88), v10);
        if (v42)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v42);
          if (v43 < v10)
            continue;
        }
      }
      LOBYTE(v98) = 16;
      v99 = 1;
LABEL_56:
      LOBYTE(v100) = 1;
      goto LABEL_57;
    }
    atomic_store(0, *(unint64_t **)(*(_QWORD *)(v7 + 64) + 16));
    *(_QWORD *)(v7 + 72) = 0;
    v19 = *(_QWORD *)(v7 + 64);
    v44 = *(_QWORD *)(v19 + 8);
    if (v44 <= 0xFF)
      goto LABEL_130;
    v45 = *(_QWORD *)(v7 + 56);
    v19 = *(_QWORD *)(v19 + 16);
    v46 = v44 - 256;
    if (v45)
    {
      v12 = v45 - 1;
      if (v46 < v45 - 1)
        goto LABEL_130;
    }
    else
    {
      v12 = v46;
    }
    v47 = v19 + 256;
    v48 = WTF::fastMalloc((WTF *)0x48);
    v49 = (IPC::Decoder *)IPC::Decoder::Decoder(v48, v47, v12, *(_QWORD *)(v7 + 48));
    if (*((_WORD *)v49 + 25) != 2821)
    {
      v98 = v49;
      v99 = 0;
      goto LABEL_56;
    }
    IPC::Decoder::~Decoder(v49);
    WTF::fastFree(v50, v51);
    IPC::Connection::waitForSyncReply((uint64_t)v101, v15, 0xDD5u, (uint64_t)&v95, v10);
    LOBYTE(v98) = 0;
    v99 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v98, (uint64_t)&v95);
    LOBYTE(v100) = 1;
    if (v96 != -1)
      ((void (*)(uint64_t ***, uint64_t *))off_1E34E40D8[v96])(&v87, &v95);
LABEL_57:
    IPC::Connection::popPendingSyncRequestID(v101);
    if (!(_BYTE)v100)
    {
      LOBYTE(v88) = 0;
      v91 = 0;
      goto LABEL_68;
    }
    if (v99 == 1)
    {
      LOBYTE(v88) = (_BYTE)v98;
      v53 = 1;
      v90 = 1;
      v91 = 1;
LABEL_67:
      ((void (*)(uint64_t *, IPC::Decoder **))off_1E34E40D8[v53])(&v95, &v98);
      goto LABEL_68;
    }
    if (v99)
      goto LABEL_137;
    v52 = (uint64_t)v98;
    v98 = 0;
    v95 = v52;
    v97 = 0;
    LOBYTE(v88) = 0;
    v90 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v88, (uint64_t)&v95);
    v91 = 1;
    if (v97 != -1)
      ((void (*)(uint64_t ***, uint64_t *))off_1E34E3FD8[v97])(&v87, &v95);
    if ((_BYTE)v100)
    {
      v53 = v99;
      if (v99 != -1)
        goto LABEL_67;
    }
LABEL_68:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
    if (v91)
    {
      LOBYTE(v98) = 0;
      v100 = -1;
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v98, (uint64_t)&v88);
      if (v91)
      {
        if (v90 != -1)
          result = ((uint64_t (*)(uint64_t *, IPC::Decoder **))off_1E34E3FD8[v90])(&v95, &v88);
      }
      goto LABEL_92;
    }
    v19 = v94;
    if (v94)
      break;
LABEL_130:
    __break(1u);
LABEL_131:
    v18 = 0;
  }
  v54 = (v92 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v55 = v54 - v92;
  if (v54 < v92)
  {
    v56 = 0;
  }
  else
  {
    v56 = 0;
    if (v55 <= 0xFFFFFFFFFFFFFFFDLL && v55 + 2 <= v93)
    {
      *(_WORD *)(v92 + v55) = 2821;
      v56 = v55 + 2;
    }
  }
  v57 = *(_QWORD *)(v7 + 64);
  v58 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v59 = *(_QWORD *)(v7 + 56);
  if (v58 + 16 >= v59)
    v58 = 0;
  if (v56 <= 0x10)
    v56 = 16;
  v60 = v58 + v56;
  if (v59 <= v60)
    v60 = 0;
  *(_QWORD *)(v7 + 72) = v60;
  v61 = (unint64_t *)(*(_QWORD *)(v57 + 16) + 128);
  do
    __ldaxr(v61);
  while (__stlxr(v60, v61));
  *(_DWORD *)(v7 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v87, v14);
  v14 = v87;
  v95 = 0;
  IPC::Connection::createSyncMessageEncoder(3541, (uint64_t)v8, &v95, (uint64_t *)&v101);
  v8 = v101;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(v101, &v86);
  *(_DWORD *)IPC::Encoder::grow(v8, 4uLL, 4) = a3;
  IPC::Connection::sendSyncMessage((uint64_t)v14, v95, (uint64_t *)&v101, 0, (uint64_t)&v88, v10);
  if ((_DWORD)v89)
  {
    if ((_DWORD)v89 == 1)
    {
      LOBYTE(v98) = (_BYTE)v88;
      goto LABEL_89;
    }
LABEL_137:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_138:
    v28 = v18;
    goto LABEL_19;
  }
  v62 = v88;
  v88 = 0;
  v98 = v62;
LABEL_89:
  v100 = v89;
  ((void (*)(char *, IPC::Decoder **))off_1E34E40D8[v89])(&v102, &v88);
  v64 = v101;
  v101 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v63);
    WTF::fastFree(v65, v66);
  }
  result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v87);
LABEL_92:
  v67 = v100;
  if (v100 != -1)
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1E34E3FD8[v67])(&v88, &v98);
  return result;
}

void WebKit::WebGPU::RemoteCompositorIntegrationProxy::withDisplayBufferAsNativeImage()
{
  __break(0xC471u);
}

void WebKit::WebGPU::RemoteComputePassEncoderProxy::~RemoteComputePassEncoderProxy(WebKit::WebGPU::RemoteComputePassEncoderProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 756;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 756;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E3FF8;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteComputePassEncoderProxy::~RemoteComputePassEncoderProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::setPipeline(WebKit::WebGPU::RemoteComputePassEncoderProxy *this, const WebCore::WebGPU::ComputePipeline *a2)
{
  unsigned __int8 ***result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v42;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unsigned int v51;
  unsigned __int8 ***v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  IPC::Encoder *v57;

  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::ComputePipeline *))(**((_QWORD **)this + 4) + 88))(*((_QWORD *)this + 4), a2);
  v52 = result;
  if (result)
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    v7 = v6 + 30.0;
    if (*(_QWORD *)(v5 + 48) == v4)
    {
      while (1)
      {
        result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v54, v7);
        if (!v56)
          return result;
        v9 = v54;
        v8 = v55;
        v10 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v11 = v10 - v54;
        if (v10 >= v54)
        {
          v12 = v11 + 2;
          if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v55)
          {
            *(_WORD *)(v54 + v11) = 765;
            goto LABEL_10;
          }
          v8 = 0;
        }
        v12 = 0;
LABEL_10:
        v14 = (_QWORD *)((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v14 >= v9 + v12)
        {
          v12 = (unint64_t)v14 - v9 + 8;
          if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFF7 || v12 > v8)
            goto LABEL_31;
          *v14 = v52;
        }
        if (v8)
        {
          v16 = *(_QWORD *)(v5 + 64);
          v17 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v18 = *(_QWORD *)(v5 + 56);
          if (v17 + 16 >= v18)
            v17 = 0;
          if (v12 <= 0x10)
            v12 = 16;
          v19 = v17 + v12;
          if (v18 <= v19)
            v20 = 0;
          else
            v20 = v19;
          *(_QWORD *)(v5 + 72) = v20;
          v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v20, v21));
          if (v22 == 0x80000000 || *(_DWORD *)(v5 + 108))
          {
            if (*(_BYTE *)(v5 + 96))
              result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
            *(_DWORD *)(v5 + 108) = 0;
          }
          return result;
        }
LABEL_31:
        if (v56)
        {
          v23 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v24 = v23 - v54;
          if (v23 < v54)
          {
            v25 = 0;
          }
          else
          {
            v25 = 0;
            if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v55)
            {
              *(_WORD *)(v54 + v24) = 2821;
              v25 = v24 + 2;
            }
          }
          v26 = *(_QWORD *)(v5 + 64);
          v27 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v28 = *(_QWORD *)(v5 + 56);
          if (v27 + 16 >= v28)
            v27 = 0;
          if (v25 <= 0x10)
            v25 = 16;
          v29 = v27 + v25;
          if (v28 <= v29)
            v29 = 0;
          *(_QWORD *)(v5 + 72) = v29;
          v30 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
          do
            __ldaxr(v30);
          while (__stlxr(v29, v30));
          *(_DWORD *)(v5 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)(v5 + 8));
          v31 = v53;
          v32 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v32 = 765;
          *(_QWORD *)(v32 + 8) = v4;
          *(_QWORD *)(v32 + 528) = v32 + 16;
          *(_QWORD *)(v32 + 536) = v32 + 16;
          *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v32 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
          v57 = (IPC::Encoder *)v32;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v32, (uint64_t *)&v52);
          IPC::Connection::sendMessageImpl((uint64_t)v31, (uint64_t *)&v57, 1, 0);
          v34 = v57;
          v57 = 0;
          if (v34)
          {
            IPC::Encoder::~Encoder(v34, v33);
            WTF::fastFree(v35, v36);
          }
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v53);
        }
        __break(1u);
LABEL_83:
        v37 = 0;
LABEL_84:
        v40 = 0;
LABEL_55:
        v42 = (_QWORD *)((v9 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v42 >= v9 + v40)
        {
          v40 = (unint64_t)v42 - v9 + 8;
          if ((unint64_t)v42 - v9 > 0xFFFFFFFFFFFFFFF7 || v40 > v37)
            return result;
          *v42 = v4;
        }
        if (!v37)
          return result;
        v44 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v45 = *(_QWORD *)(v5 + 56);
        if (v44 + 16 >= v45)
          v44 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v46 = v44 + v40;
        if (v45 <= v46)
          v46 = 0;
        *(_QWORD *)(v5 + 72) = v46;
        v47 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v46, v47));
        v49 = *(_DWORD *)(v5 + 108);
        if (v48 == 0x80000000 || v49 != 0)
        {
          v51 = v49 + 1;
          *(_DWORD *)(v5 + 108) = v51;
          if (v51 >= *(_DWORD *)(v5 + 104))
          {
            if (*(_BYTE *)(v5 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
            *(_DWORD *)(v5 + 108) = 0;
          }
        }
        *(_QWORD *)(v5 + 48) = v4;
      }
    }
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v54, v6 + 30.0);
    if (v56)
    {
      v9 = v54;
      v37 = v55;
      v38 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v39 = v38 - v54;
      if (v38 < v54)
        goto LABEL_84;
      v40 = v39 + 2;
      if (v39 > 0xFFFFFFFFFFFFFFFDLL || v40 > v55)
        goto LABEL_83;
      *(_WORD *)(v54 + v39) = 2822;
      goto LABEL_55;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::dispatch(WebKit::WebGPU::RemoteComputePassEncoderProxy *this, int a2, int a3, int a4)
{
  uint64_t v4;
  char *v5;
  unsigned __int8 ***v6;
  unint64_t v7;
  size_t v8;
  size_t v12;
  uint64_t *v13;
  double v14;
  double v15;
  unsigned __int8 ***result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t v54;
  size_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  size_t v61;
  unint64_t v62;
  char *v63;
  _DWORD *v64;
  void *v65;
  IPC::Encoder *v66;
  WTF *v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v75;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  unsigned int v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  size_t v88;
  char *v89;
  unsigned __int8 ***v90;
  unint64_t v91;
  size_t v92;
  char *v93;
  unsigned __int8 ***v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  IPC::Encoder *v99;

  v12 = *((_QWORD *)this + 3);
  v13 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v15 = v14 + 30.0;
  if (v13[6] == v12)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v13 + 7), &v96, v14 + 30.0);
  if (!v98)
    return result;
  v70 = v96;
  v69 = v97;
  v71 = (v96 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v71 - v96;
  if (v71 < v96)
    goto LABEL_119;
  v73 = v72 + 2;
  if (v72 > 0xFFFFFFFFFFFFFFFDLL || v73 > v97)
  {
    v69 = 0;
LABEL_119:
    v73 = 0;
    goto LABEL_70;
  }
  *(_WORD *)(v96 + v72) = 2822;
LABEL_70:
  v75 = (_QWORD *)((v70 + v73 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v75 >= v70 + v73)
  {
    v73 = (unint64_t)v75 - v70 + 8;
    if ((unint64_t)v75 - v70 > 0xFFFFFFFFFFFFFFF7 || v73 > v69)
      return result;
    *v75 = v12;
  }
  if (!v69)
    return result;
  v77 = (v13[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v13[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v73 <= 0x10)
    v73 = 16;
  v79 = v77 + v73;
  if (v78 <= v79)
    v79 = 0;
  v13[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v13[8] + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v13 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v84 = v82 + 1;
    *((_DWORD *)v13 + 27) = v84;
    if (v84 >= *((_DWORD *)v13 + 26))
    {
      if (*((_BYTE *)v13 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v13 + 21));
      *((_DWORD *)v13 + 27) = 0;
    }
  }
  v13[6] = v12;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v13 + 7), &v96, v15);
  if (!v98)
    return result;
  v17 = v96;
  v18 = v97;
  v19 = (v96 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v20 = v19 - v96;
  if (v19 >= v96)
  {
    v21 = v20 + 2;
    if (v20 <= 0xFFFFFFFFFFFFFFFDLL && v21 <= v97)
    {
      *(_WORD *)(v96 + v20) = 757;
      goto LABEL_9;
    }
    v18 = 0;
  }
  v21 = 0;
LABEL_9:
  v23 = (v17 + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v24 = v23 - (v17 + v21);
  if (v23 >= v17 + v21)
  {
    v25 = v23 - v17;
    v26 = v24 + v21 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > v18)
    {
      v18 = 0;
    }
    else
    {
      *(_DWORD *)(v17 + v25) = a2;
      v21 = v26;
    }
  }
  v28 = (v17 + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v29 = v28 - (v17 + v21);
  if (v28 >= v17 + v21)
  {
    v30 = v28 - v17;
    v31 = v29 + v21 + 4;
    if (v30 > 0xFFFFFFFFFFFFFFFBLL || v31 > v18)
    {
      v18 = 0;
    }
    else
    {
      *(_DWORD *)(v17 + v30) = a3;
      v21 = v31;
    }
  }
  v33 = (_DWORD *)((v17 + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v33 >= v17 + v21)
  {
    v34 = (char *)v33 - v17;
    if ((unint64_t)v33 - v17 > 0xFFFFFFFFFFFFFFFBLL)
      goto LABEL_40;
    v21 = (unint64_t)(v34 + 4);
    if ((unint64_t)(v34 + 4) > v18)
      goto LABEL_40;
    *v33 = a4;
  }
  if (v18)
  {
    v35 = v13[8];
    v36 = (v13[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v37 = v13[7];
    if (v36 + 16 >= v37)
      v36 = 0;
    if (v21 <= 0x10)
      v21 = 16;
    v38 = v36 + v21;
    if (v37 <= v38)
      v39 = 0;
    else
      v39 = v38;
    v13[9] = v39;
    v40 = (unint64_t *)(*(_QWORD *)(v35 + 16) + 128);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v39, v40));
    if (v41 == 0x80000000 || *((_DWORD *)v13 + 27))
    {
      if (*((_BYTE *)v13 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v13 + 21));
      *((_DWORD *)v13 + 27) = 0;
    }
    return result;
  }
LABEL_40:
  if (!v98)
  {
    __break(1u);
LABEL_117:
    munmap(result, *(_QWORD *)(v4 + 552));
    goto LABEL_99;
  }
  v42 = (v96 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v43 = v42 - v96;
  if (v42 < v96)
  {
    v44 = 0;
  }
  else
  {
    v44 = 0;
    if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v43 + 2 <= v97)
    {
      *(_WORD *)(v96 + v43) = 2821;
      v44 = v43 + 2;
    }
  }
  v45 = v13[8];
  v46 = (v13[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = v13[7];
  if (v46 + 16 >= v47)
    v46 = 0;
  if (v44 <= 0x10)
    v44 = 16;
  v48 = v46 + v44;
  if (v47 <= v48)
    v48 = 0;
  v13[9] = v48;
  v49 = (unint64_t *)(*(_QWORD *)(v45 + 16) + 128);
  do
    __ldaxr(v49);
  while (__stlxr(v48, v49));
  *((_DWORD *)v13 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v95, (uint64_t **)v13 + 1);
  v13 = v95;
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 757;
  *(_QWORD *)(v4 + 8) = v12;
  v6 = (unsigned __int8 ***)(v4 + 16);
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v99 = (IPC::Encoder *)v4;
  v50 = *(_QWORD *)(v4 + 544);
  v7 = (v50 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 + 4;
  v51 = *(_QWORD *)(v4 + 552);
  if (v51 >= v7 + 4)
  {
    v5 = *(char **)(v4 + 528);
    goto LABEL_55;
  }
  v85 = (2 * v51 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v85;
    v85 *= 2;
  }
  while (v12 < v8);
  v86 = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (v86 == (char *)-1)
    goto LABEL_123;
  v5 = v86;
  memcpy(v86, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
  result = *(unsigned __int8 ****)(v4 + 528);
  if (result != v6)
    goto LABEL_117;
LABEL_99:
  *(_QWORD *)(v4 + 528) = v5;
  *(_QWORD *)(v4 + 552) = v12;
  v50 = *(_QWORD *)(v4 + 544);
LABEL_55:
  bzero(&v5[v50], v7 - v50);
  *(_QWORD *)(v4 + 544) = v8;
  v52 = (_DWORD *)(*(_QWORD *)(v4 + 528) + v7);
  *(_QWORD *)(v4 + 536) = v52 + 1;
  *v52 = a2;
  v53 = *(_QWORD *)(v4 + 544);
  v54 = (v53 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v55 = v54 + 4;
  v56 = *(_QWORD *)(v4 + 552);
  if (v56 < v54 + 4)
  {
    v87 = (2 * v56 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v88 = v87;
      v87 *= 2;
    }
    while (v88 < v55);
    v89 = (char *)mmap(0, v88, 3, 4098, -1, 0);
    if (v89 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x19754B5A8);
    }
    v57 = v89;
    memcpy(v89, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v90 = *(unsigned __int8 ****)(v4 + 528);
    if (v90 != v6)
      munmap(v90, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v57;
    *(_QWORD *)(v4 + 552) = v88;
    v53 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v57 = *(char **)(v4 + 528);
  }
  bzero(&v57[v53], v54 - v53);
  *(_QWORD *)(v4 + 544) = v55;
  v58 = (_DWORD *)(*(_QWORD *)(v4 + 528) + v54);
  *(_QWORD *)(v4 + 536) = v58 + 1;
  *v58 = a3;
  v59 = *(_QWORD *)(v4 + 544);
  v60 = (v59 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v61 = v60 + 4;
  v62 = *(_QWORD *)(v4 + 552);
  if (v62 < v60 + 4)
  {
    v91 = (2 * v62 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v92 = v91;
      v91 *= 2;
    }
    while (v92 < v61);
    v93 = (char *)mmap(0, v92, 3, 4098, -1, 0);
    if (v93 != (char *)-1)
    {
      v63 = v93;
      memcpy(v93, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
      v94 = *(unsigned __int8 ****)(v4 + 528);
      if (v94 != v6)
        munmap(v94, *(_QWORD *)(v4 + 552));
      *(_QWORD *)(v4 + 528) = v63;
      *(_QWORD *)(v4 + 552) = v92;
      v59 = *(_QWORD *)(v4 + 544);
      goto LABEL_59;
    }
LABEL_123:
    __break(0xC471u);
    JUMPOUT(0x19754B5A0);
  }
  v63 = *(char **)(v4 + 528);
LABEL_59:
  bzero(&v63[v59], v60 - v59);
  *(_QWORD *)(v4 + 544) = v61;
  v64 = (_DWORD *)(*(_QWORD *)(v4 + 528) + v60);
  *(_QWORD *)(v4 + 536) = v64 + 1;
  *v64 = a4;
  IPC::Connection::sendMessageImpl((uint64_t)v13, (uint64_t *)&v99, 1, 0);
  v66 = v99;
  v99 = 0;
  if (v66)
  {
    IPC::Encoder::~Encoder(v66, v65);
    WTF::fastFree(v67, v68);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v95);
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::dispatchIndirect(WebKit::WebGPU::RemoteComputePassEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 ***v4;
  unint64_t v5;
  size_t v6;
  unsigned __int8 ***result;
  size_t v10;
  uint64_t *v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned int v64;
  unint64_t v65;
  unsigned __int8 ***v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  IPC::Encoder *v71;

  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  v66 = result;
  if (!result)
    return result;
  v10 = *((_QWORD *)this + 3);
  v11 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v13 = v12 + 30.0;
  if (v11[6] == v10)
    goto LABEL_3;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v12 + 30.0);
  if (!v70)
    return result;
  v50 = v68;
  v49 = v69;
  v51 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = v51 - v68;
  if (v51 < v68)
    goto LABEL_99;
  v53 = v52 + 2;
  if (v52 > 0xFFFFFFFFFFFFFFFDLL || v53 > v69)
  {
    v49 = 0;
LABEL_99:
    v53 = 0;
    goto LABEL_63;
  }
  *(_WORD *)(v68 + v52) = 2822;
LABEL_63:
  v55 = (_QWORD *)((v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v55 >= v50 + v53)
  {
    v53 = (unint64_t)v55 - v50 + 8;
    if ((unint64_t)v55 - v50 > 0xFFFFFFFFFFFFFFF7 || v53 > v49)
      return result;
    *v55 = v10;
  }
  if (!v49)
    return result;
  v57 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v11[7];
  if (v57 + 16 >= v58)
    v57 = 0;
  if (v53 <= 0x10)
    v53 = 16;
  v59 = v57 + v53;
  if (v58 <= v59)
    v59 = 0;
  v11[9] = v59;
  v60 = (unint64_t *)(*(_QWORD *)(v11[8] + 16) + 128);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v59, v60));
  v62 = *((_DWORD *)v11 + 27);
  if (v61 == 0x80000000 || v62 != 0)
  {
    v64 = v62 + 1;
    *((_DWORD *)v11 + 27) = v64;
    if (v64 >= *((_DWORD *)v11 + 26))
    {
      if (*((_BYTE *)v11 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
  }
  v11[6] = v10;
LABEL_3:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v13);
  if (!v70)
    return result;
  v14 = v68;
  v15 = v69;
  v16 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v68;
  if (v16 >= v68)
  {
    v18 = v17 + 2;
    if (v17 <= 0xFFFFFFFFFFFFFFFDLL && v18 <= v69)
    {
      *(_WORD *)(v68 + v17) = 758;
      goto LABEL_10;
    }
    v15 = 0;
  }
  v18 = 0;
LABEL_10:
  v20 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 - (v14 + v18);
  if (v20 >= v14 + v18)
  {
    v22 = v20 - v14;
    v23 = v21 + v18 + 8;
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v15)
    {
      v15 = 0;
    }
    else
    {
      *(_QWORD *)(v14 + v22) = v66;
      v18 = v23;
    }
  }
  v25 = (_QWORD *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v14 + v18)
  {
    v18 = (unint64_t)v25 - v14 + 8;
    if ((unint64_t)v25 - v14 > 0xFFFFFFFFFFFFFFF7 || v18 > v15)
      goto LABEL_37;
    *v25 = a3;
  }
  if (v15)
  {
    v27 = v11[8];
    v28 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v29 = v11[7];
    if (v28 + 16 >= v29)
      v28 = 0;
    if (v18 <= 0x10)
      v18 = 16;
    v30 = v28 + v18;
    if (v29 <= v30)
      v31 = 0;
    else
      v31 = v30;
    v11[9] = v31;
    v32 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v31, v32));
    if (v33 == 0x80000000 || *((_DWORD *)v11 + 27))
    {
      if (*((_BYTE *)v11 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
    return result;
  }
LABEL_37:
  if (!v70)
  {
    __break(1u);
LABEL_97:
    munmap(result, *(_QWORD *)(v3 + 552));
LABEL_92:
    *(_QWORD *)(v3 + 528) = v4;
    *(_QWORD *)(v3 + 552) = v10;
    v42 = *(_QWORD *)(v3 + 544);
    goto LABEL_52;
  }
  v34 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v35 = v34 - v68;
  if (v34 < v68)
  {
    v36 = 0;
  }
  else
  {
    v36 = 0;
    if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v69)
    {
      *(_WORD *)(v68 + v35) = 2821;
      v36 = v35 + 2;
    }
  }
  v37 = v11[8];
  v38 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v39 = v11[7];
  if (v38 + 16 >= v39)
    v38 = 0;
  if (v36 <= 0x10)
    v36 = 16;
  v40 = v38 + v36;
  if (v39 <= v40)
    v40 = 0;
  v11[9] = v40;
  v41 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
  do
    __ldaxr(v41);
  while (__stlxr(v40, v41));
  *((_DWORD *)v11 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v11 + 1);
  v11 = v67;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 758;
  *(_QWORD *)(v3 + 8) = v10;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v71 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, (uint64_t *)&v66);
  v42 = *(_QWORD *)(v3 + 544);
  v5 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  v43 = *(_QWORD *)(v3 + 552);
  if (v43 < v5 + 8)
  {
    v65 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v10 = v65;
      v65 *= 2;
    }
    while (v10 < v6);
    result = (unsigned __int8 ***)mmap(0, v10, 3, 4098, -1, 0);
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    v4 = result;
    memcpy(result, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
    result = *(unsigned __int8 ****)(v3 + 528);
    if (result == (unsigned __int8 ***)(v3 + 16))
      goto LABEL_92;
    goto LABEL_97;
  }
  v4 = *(unsigned __int8 ****)(v3 + 528);
LABEL_52:
  bzero((char *)v4 + v42, v5 - v42);
  *(_QWORD *)(v3 + 544) = v6;
  v44 = (_QWORD *)(*(_QWORD *)(v3 + 528) + v5);
  *(_QWORD *)(v3 + 536) = v44 + 1;
  *v44 = a3;
  IPC::Connection::sendMessageImpl((uint64_t)v11, (uint64_t *)&v71, 1, 0);
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v45);
    WTF::fastFree(v47, v48);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::end(WebKit::WebGPU::RemoteComputePassEncoderProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 759;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 759;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::setBindGroup(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  unsigned __int8 ***result;
  int *v7[3];
  unsigned __int8 ***v8;
  int v9;

  v9 = a2;
  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a3);
  v8 = result;
  if (result)
  {
    v7[0] = &v9;
    v7[1] = (int *)&v8;
    v7[2] = a4;
    return WebKit::WebGPU::RemoteComputePassEncoderProxy::send<Messages::RemoteComputePassEncoder::SetBindGroup>(*(WTF::ApproximateTime **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) + 176) + 96) + 96), v7);
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::send<Messages::RemoteComputePassEncoder::SetBindGroup>(WTF::ApproximateTime *a1, uint64_t a2, int **a3)
{
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  IPC::Encoder *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v50;
  uint64_t *v51;
  IPC::Encoder *v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;
  unint64_t v56;
  unint64_t v57;

  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(WTF::ApproximateTime **)(a2 + 48) == a1)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v52, v7);
      if (!v54)
        break;
      v55 = v52;
      v56 = v53;
      v57 = 0;
      v9 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= (unint64_t)v52;
      v11 = v9 - (_QWORD)v52;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v53)
        {
          v56 = 0;
        }
        else
        {
          *(_WORD *)((char *)v52 + v11) = 763;
          v57 = v11 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(&v55, (uint64_t)a3);
      if (v56)
      {
        v14 = v57;
        v15 = *(_QWORD *)(a2 + 64);
        v16 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(a2 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v57 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(a2 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(a2 + 108))
        {
          if (*(_BYTE *)(a2 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
        return result;
      }
      if (v54)
      {
        v22 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v52;
        if (v22 < (unint64_t)v52)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v53)
          {
            *(_WORD *)((char *)v52 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a2 + 64);
        v26 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a2 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a2 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a2 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(a2 + 8));
        v30 = v51;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 763;
        *(_QWORD *)(v31 + 8) = a1;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v55 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(v31, a3);
        IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v55, 1, 0);
        v33 = v55;
        v55 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
      }
      __break(1u);
LABEL_76:
      v36 = 0;
LABEL_77:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v13 + v39)
      {
        v39 = v41 - (char *)v13 + 8;
        if ((unint64_t)(v41 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return result;
        *(_QWORD *)v41 = a1;
      }
      if (!v36)
        return result;
      v43 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a2 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a2 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a2 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        *(_DWORD *)(a2 + 108) = v50;
        if (v50 >= *(_DWORD *)(a2 + 104))
        {
          if (*(_BYTE *)(a2 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
      }
      *(_QWORD *)(a2 + 48) = a1;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v55, v6 + 30.0);
    if ((_BYTE)v57)
    {
      v13 = v55;
      v36 = v56;
      v37 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v55;
      if (v37 < (unint64_t)v55)
        goto LABEL_77;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v56)
        goto LABEL_76;
      *(_WORD *)((char *)v55 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

WTF *WebKit::WebGPU::RemoteComputePassEncoderProxy::setBindGroup(WebKit::WebGPU::RemoteComputePassEncoderProxy *this, int a2, const WebCore::WebGPU::BindGroup *a3, const unsigned int *a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  WTF *result;
  uint64_t v12;
  void *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  char v19;
  int *v20[3];
  WTF *v21;
  int v22;

  v22 = a2;
  result = (WTF *)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::BindGroup *))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), a3);
  v21 = result;
  if (result)
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v15, (int *)&a4[a6], a7);
    v17 = v15;
    v12 = v16;
    v15 = 0;
    v16 = 0;
    v18 = v12;
    v19 = 1;
    v20[0] = &v22;
    v20[1] = (int *)&v21;
    v20[2] = (int *)&v17;
    WebKit::WebGPU::RemoteComputePassEncoderProxy::send<Messages::RemoteComputePassEncoder::SetBindGroup>(*((WTF::ApproximateTime **)this + 3), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96), v20);
    if (v19)
    {
      v14 = v17;
      if (v17)
      {
        v17 = 0;
        LODWORD(v18) = 0;
        WTF::fastFree(v14, v13);
      }
    }
    result = v15;
    if (v15)
    {
      v15 = 0;
      LODWORD(v16) = 0;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::pushDebugGroup(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 762;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 762;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::popDebugGroup(WebKit::WebGPU::RemoteComputePassEncoderProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 761;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 761;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::insertDebugMarker(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 760;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 760;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::setLabelInternal(WTF::ApproximateTime **this, const WTF::String *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)a2;
  return WebKit::WebGPU::RemoteComputePassEncoderProxy::send<Messages::RemoteComputePassEncoder::SetLabel>(this[3], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[5] + 5) + 176) + 96) + 96), &v3);
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePassEncoderProxy::send<Messages::RemoteComputePassEncoder::SetLabel>(WTF::ApproximateTime *a1, uint64_t a2, uint64_t **a3)
{
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  IPC::Encoder *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v50;
  uint64_t *v51;
  IPC::Encoder *v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;
  unint64_t v56;
  unint64_t v57;

  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(WTF::ApproximateTime **)(a2 + 48) == a1)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v52, v7);
      if (!v54)
        break;
      v55 = v52;
      v56 = v53;
      v57 = 0;
      v9 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= (unint64_t)v52;
      v11 = v9 - (_QWORD)v52;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v53)
        {
          v56 = 0;
        }
        else
        {
          *(_WORD *)((char *)v52 + v11) = 764;
          v57 = v11 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v55, *a3);
      if (v56)
      {
        v14 = v57;
        v15 = *(_QWORD *)(a2 + 64);
        v16 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(a2 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v57 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(a2 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(a2 + 108))
        {
          if (*(_BYTE *)(a2 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
        return result;
      }
      if (v54)
      {
        v22 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v52;
        if (v22 < (unint64_t)v52)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v53)
          {
            *(_WORD *)((char *)v52 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a2 + 64);
        v26 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a2 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a2 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a2 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(a2 + 8));
        v30 = v51;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 764;
        *(_QWORD *)(v31 + 8) = a1;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v55 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, *a3);
        IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v55, 1, 0);
        v33 = v55;
        v55 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
      }
      __break(1u);
LABEL_76:
      v36 = 0;
LABEL_77:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v13 + v39)
      {
        v39 = v41 - (char *)v13 + 8;
        if ((unint64_t)(v41 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return result;
        *(_QWORD *)v41 = a1;
      }
      if (!v36)
        return result;
      v43 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a2 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a2 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a2 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        *(_DWORD *)(a2 + 108) = v50;
        if (v50 >= *(_DWORD *)(a2 + 104))
        {
          if (*(_BYTE *)(a2 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
      }
      *(_QWORD *)(a2 + 48) = a1;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v55, v6 + 30.0);
    if ((_BYTE)v57)
    {
      v13 = v55;
      v36 = v56;
      v37 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v55;
      if (v37 < (unint64_t)v55)
        goto LABEL_77;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v56)
        goto LABEL_76;
      *(_WORD *)((char *)v55 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteComputePipelineProxy::~RemoteComputePipelineProxy(WebKit::WebGPU::RemoteComputePipelineProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 766;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 766;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E4068;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteComputePipelineProxy::~RemoteComputePipelineProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteComputePipelineProxy::getBindGroupLayout@<X0>(WebKit::WebGPU::RemoteComputePipelineProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  IPC::Encoder *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  void *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  WTF::ApproximateTime *v40;
  uint64_t result;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v47;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  unsigned int v56;
  int v57;
  uint64_t *v58;
  WTF::ApproximateTime *v59;
  uint64_t *v60;
  IPC::Encoder *v61;
  unint64_t v62;
  char v63;
  IPC::Encoder *v64;
  unint64_t v65;
  unint64_t v66;

  v57 = a2;
  v58 = (uint64_t *)&v59;
  v59 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v5 = *((_QWORD *)this + 3);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(v59);
  v8 = v7 + 30.0;
  if (*(_QWORD *)(v6 + 48) == v5)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v61, v8);
      if (!v63)
        break;
      v64 = v61;
      v65 = v62;
      v66 = 0;
      v9 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= (unint64_t)v61;
      v11 = v9 - (_QWORD)v61;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v62)
        {
          v65 = 0;
        }
        else
        {
          *(_WORD *)((char *)v61 + v11) = 767;
          v66 = v11 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul>(&v64, (uint64_t)&v57);
      if (v65)
      {
        v14 = v66;
        v15 = *(_QWORD *)(v6 + 64);
        v16 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(v6 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v66 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(v6 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(v6 + 108))
        {
          if (*(_BYTE *)(v6 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
          *(_DWORD *)(v6 + 108) = 0;
        }
        break;
      }
      if (v63)
      {
        v22 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v61;
        if (v22 < (unint64_t)v61)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v62)
          {
            *(_WORD *)((char *)v61 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(v6 + 64);
        v26 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(v6 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(v6 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(v6 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)(v6 + 8));
        v30 = v60;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 767;
        *(_QWORD *)(v31 + 8) = v5;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v64 = (IPC::Encoder *)v31;
        v32 = v57;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v31, v58);
        IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v64, 1, 0);
        v34 = v64;
        v64 = 0;
        if (v34)
        {
          IPC::Encoder::~Encoder(v34, v33);
          WTF::fastFree(v35, v36);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v60);
        break;
      }
      __break(1u);
LABEL_76:
      v42 = 0;
LABEL_77:
      v45 = 0;
LABEL_49:
      v47 = (char *)(((unint64_t)v13 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v47 >= (char *)v13 + v45)
      {
        v45 = v47 - (char *)v13 + 8;
        if ((unint64_t)(v47 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v45 > v42)
          break;
        *(_QWORD *)v47 = v5;
      }
      if (!v42)
        break;
      v49 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v50 = *(_QWORD *)(v6 + 56);
      if (v49 + 16 >= v50)
        v49 = 0;
      if (v45 <= 0x10)
        v45 = 16;
      v51 = v49 + v45;
      if (v50 <= v51)
        v51 = 0;
      *(_QWORD *)(v6 + 72) = v51;
      v52 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 16) + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v51, v52));
      v54 = *(_DWORD *)(v6 + 108);
      if (v53 == 0x80000000 || v54 != 0)
      {
        v56 = v54 + 1;
        *(_DWORD *)(v6 + 108) = v56;
        if (v56 >= *(_DWORD *)(v6 + 104))
        {
          if (*(_BYTE *)(v6 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
          *(_DWORD *)(v6 + 108) = 0;
        }
      }
      *(_QWORD *)(v6 + 48) = v5;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v64, v7 + 30.0);
    if ((_BYTE)v66)
    {
      v13 = v64;
      v42 = v65;
      v43 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = v43 - (_QWORD)v64;
      if (v43 < (unint64_t)v64)
        goto LABEL_77;
      v45 = v44 + 2;
      if (v44 > 0xFFFFFFFFFFFFFFFDLL || v45 > v65)
        goto LABEL_76;
      *(_WORD *)((char *)v64 + v44) = 2822;
      goto LABEL_49;
    }
  }
  v39 = (char *)this + 32;
  v37 = *((_QWORD *)this + 4);
  v38 = *((_QWORD *)v39 + 1);
  v40 = v59;
  result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E34E3BF8;
  *(_QWORD *)(result + 32) = v40;
  ++*(_DWORD *)(v37 + 8);
  *(_QWORD *)(result + 40) = v37;
  ++*(_DWORD *)(v38 + 8);
  *(_QWORD *)(result + 48) = v38;
  *a3 = result;
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteComputePipelineProxy::setLabelInternal(WebKit::WebGPU::RemoteComputePipelineProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 768;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 768;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12RemoteBuffer14GetMappedRangeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(WTF **)(a2 + 8);
    if (v3)
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v3, (void *)a2);
    }
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34E4098;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E4098;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u) && (_BYTE)v3)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 88) = *(_BYTE *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteBuffer::MapAsync &&,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E40C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteBuffer::MapAsync &&,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E40C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteBuffer::MapAsync &&,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t *IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(uint64_t *a1, uint64_t a2)
{
  void *v4;
  BOOL v5;
  WTF *v6;
  WTF *v8;
  int v9;
  char v10;
  char v11;

  IPC::Decoder::decode<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(a1, (uint64_t)&v8);
  std::__optional_storage_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>>(a2, (uint64_t)&v8);
  if (v11)
    v5 = v10 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = v8;
    if (v8)
    {
      v8 = 0;
      v9 = 0;
      WTF::fastFree(v6, v4);
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  _QWORD v5[2];
  char v6;
  char v7;

  result = IPC::Decoder::decode<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)v5);
  v4 = v7;
  if (v7)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v4 = 1;
    if (v6)
    {
      *(_QWORD *)a2 = v5[0];
      *(_QWORD *)(a2 + 8) = v5[1];
      *(_BYTE *)(a2 + 16) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

uint64_t std::__optional_storage_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
      return std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(result, a2);
  }
  else if (*(_BYTE *)(result + 24))
  {
    return (uint64_t)std::__optional_destruct_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::reset[abi:sn180100]((WTF *)result, (void *)a2);
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 16) = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v2 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)result = v2;
      LODWORD(v2) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = 0;
      *(_DWORD *)(result + 8) = v2;
      LODWORD(v2) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = 0;
      *(_DWORD *)(result + 12) = v2;
      *(_BYTE *)(result + 16) = 1;
    }
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

WTF *std::__optional_destruct_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::reset[abi:sn180100](WTF *result, void *a2)
{
  WTF *v2;

  if (*((_BYTE *)result + 24))
  {
    v2 = result;
    if (*((_BYTE *)result + 16))
    {
      result = *(WTF **)result;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
    }
    *((_BYTE *)v2 + 24) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3ED0[v4])(&v7, result);
  *(_DWORD *)(v3 + 32) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E40E8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12RemoteBuffer14GetMappedRangeEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*((_BYTE *)a3 + 24))
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(a2 + 8) = v4;
    LODWORD(v4) = *((_DWORD *)a3 + 4);
    *((_DWORD *)a3 + 4) = 0;
    *(_DWORD *)(a2 + 16) = v4;
    LODWORD(v4) = *((_DWORD *)a3 + 5);
    *((_DWORD *)a3 + 5) = 0;
    *(_DWORD *)(a2 + 20) = v4;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12RemoteBuffer14GetMappedRangeEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34E4108;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4108;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  BOOL v5;

  v2 = result;
  if (a2 && *a2)
  {
    result = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
    if (*(_QWORD *)(v2 + 8))
      v3 = 1;
    else
      v3 = *(_BYTE *)(v2 + 16) == 0;
    v4 = v3;
    if ((unsigned __int16)result >= 0x100u)
    {
      if ((v4 & 1) == 0)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x19754E2ECLL);
      }
    }
    else if ((v4 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  else
  {
    if (*(_QWORD *)(result + 8))
      v5 = 1;
    else
      v5 = *(_BYTE *)(result + 16) == 0;
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x19754E320);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteBuffer::Copy &&,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4130;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteBuffer::Copy &&,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4130;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteBuffer::Copy &&,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Decoder *this, WTF **a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  WTF **v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  WTF::MachSendRight *v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  unint64_t v35;
  char v36;
  _QWORD v37[2];
  char v38;
  _BYTE v39[4];
  char v40;

  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)this;
  v8 = ((*((_QWORD *)this + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)this;
  if (v6 < v8 || v6 - v8 <= 7)
  {
    v19 = 0;
    v20 = 0;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    v21 = *((_QWORD *)this + 3);
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v7, v6);
        v20 = *(_QWORD *)this;
        v19 = *((_QWORD *)this + 1);
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_38;
  }
  v10 = (WTF **)(v7 + v8);
  *((_QWORD *)this + 2) = v10 + 1;
  if (!v7)
  {
    v19 = v6;
    v20 = 0;
LABEL_38:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    v22 = *((_QWORD *)this + 3);
    if (v22 && v19)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
    goto LABEL_28;
  }
  v11 = *v10;
  v34 = 0;
  v35 = 0;
  if ((unint64_t)v11 >= 0x40000)
  {
    do
    {
      IPC::Decoder::takeLastAttachment(this, v39);
      if (!v40)
        goto LABEL_27;
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::MachSendRight>((uint64_t)&v34, (unint64_t)v39);
      }
      else
      {
        WTF::MachSendRight::MachSendRight();
        ++HIDWORD(v35);
      }
      if (v40)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v39);
      v11 = (WTF *)((char *)v11 - 1);
    }
    while (v11);
    v23 = HIDWORD(v35);
    v11 = v34;
    if (v35 > HIDWORD(v35))
    {
      v24 = v34;
      if (HIDWORD(v35))
      {
        if (HIDWORD(v35) >> 30)
        {
          __break(0xC471u);
          return;
        }
        v25 = (WTF *)WTF::fastMalloc((WTF *)(4 * HIDWORD(v35)));
        LODWORD(v35) = v23;
        v34 = v25;
        v24 = v11;
        if (v25 != v11)
        {
          WTF::VectorMover<false,WTF::MachSendRight>::move(v11, (WTF *)((char *)v11 + 4 * v23), (uint64_t)v25);
          v24 = v34;
        }
      }
      if (v11)
      {
        if (v24 == v11)
        {
          v34 = 0;
          LODWORD(v35) = 0;
        }
        WTF::fastFree(v11, a2);
LABEL_53:
        v11 = v34;
      }
      else
      {
        v11 = v24;
      }
    }
    v3 = v35;
    v2 = HIDWORD(v35);
    goto LABEL_55;
  }
  if (v11)
  {
    LODWORD(v35) = (_DWORD)v11;
    v34 = (WTF *)WTF::fastMalloc((WTF *)(4 * (_QWORD)v11));
    while (1)
    {
      IPC::Decoder::takeLastAttachment(this, v39);
      if (!v40)
        break;
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::MachSendRight>((uint64_t)&v34, (unint64_t)v39);
      }
      else
      {
        WTF::MachSendRight::MachSendRight();
        ++HIDWORD(v35);
      }
      if (v40)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v39);
      v11 = (WTF *)((char *)v11 - 1);
      if (!v11)
        goto LABEL_53;
    }
LABEL_27:
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v12);
LABEL_28:
    v13 = *(_QWORD *)this;
    v14 = *((_QWORD *)this + 1);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    v15 = *((_QWORD *)this + 3);
    if (v15)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        v16 = *(void **)this;
        v14 = *((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 3);
LABEL_31:
        LOBYTE(v34) = 0;
        v36 = 0;
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        if (v15 && v14)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v15 + 16))(v15, v16);
        v17 = 0;
        v18 = 1;
        goto LABEL_56;
      }
    }
    else
    {
      v14 = 0;
    }
    v16 = 0;
    goto LABEL_31;
  }
  v2 = 0;
  v3 = 0;
LABEL_55:
  v34 = 0;
  v35 = 0;
  v17 = 1;
  v38 = 1;
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
  v37[0] = 0;
  v37[1] = 0;
  v34 = v11;
  v35 = __PAIR64__(v2, v3);
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v26);
  v18 = 0;
  v36 = 1;
LABEL_56:
  if (*((unsigned __int8 *)a2 + 16) != v17)
  {
    if (*((_BYTE *)a2 + 16))
    {
      WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, v16);
      *((_BYTE *)a2 + 16) = 0;
      if ((v18 & 1) != 0)
        return;
    }
    else
    {
      v30 = v34;
      v34 = 0;
      v35 = 0;
      *a2 = v30;
      *((_DWORD *)a2 + 2) = v3;
      *((_DWORD *)a2 + 3) = v2;
      *((_BYTE *)a2 + 16) = 1;
      if ((v18 & 1) != 0)
        return;
    }
LABEL_62:
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v16);
    return;
  }
  if (*((_BYTE *)a2 + 16))
  {
    v27 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v27)
    {
      v31 = *a2;
      v32 = 4 * v27;
      do
      {
        WTF::MachSendRight::~MachSendRight(v31);
        v31 = (WTF::MachSendRight *)(v33 + 4);
        v32 -= 4;
      }
      while (v32);
    }
    v28 = *a2;
    if (*a2)
    {
      *a2 = 0;
      *((_DWORD *)a2 + 2) = 0;
      WTF::fastFree(v28, v16);
    }
    v29 = v34;
    v34 = 0;
    v35 = 0;
    *a2 = v29;
    *((_DWORD *)a2 + 2) = v3;
    *((_DWORD *)a2 + 3) = v2;
    if ((v18 & 1) == 0)
      goto LABEL_62;
  }
}

uint64_t IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ConnectionSendSyncResult(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v8[0] = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v8[1] = 0;
  v6 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 0;
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3FB8[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E4148[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3FC8[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E4158[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3FD8[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E4168[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = **(_DWORD **)a2;
      a1[2] = v10;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, *(_QWORD **)(a2 + 8));
  return IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, *(_QWORD *)(a2 + 16));
}

_QWORD *IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 16))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(result, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 16))
      return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(result, *(const void **)a2, *(unsigned int *)(a2 + 12));
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_QWORD *)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(uint64_t a1, int **a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = **a2;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 >= v6 + 4)
  {
    v9 = *(char **)(a1 + 528);
LABEL_3:
    bzero(&v9[v5], v6 - v5);
    *(_QWORD *)(a1 + 544) = v7;
    v10 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v6);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, (uint64_t *)a2[1]);
    IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)a2[2]);
    return;
  }
  v11 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v7);
  v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (v13 != (char *)-1)
  {
    v9 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v12;
    v5 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
}

void IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      goto LABEL_14;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 0;
    return;
  }
  *v10 = 1;
  if (*(_BYTE *)(a2 + 16))
  {
    IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_14:
  __break(0xC471u);
}

_QWORD *IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1[2];
  v3 = *a1 + v2;
  v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (v5)
  {
    v7 = v6 + v2;
    v8 = v7 + 4;
    if (v7 > 0xFFFFFFFFFFFFFFFBLL || v8 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v7) = *(_DWORD *)a2;
      a1[2] = v8;
    }
  }
  return IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, *(_QWORD **)(a2 + 8));
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::RemoteDeviceProxy(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 40) = v11;
  v12 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)a1 = off_1E34E4188;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = a6;
  *(_QWORD *)(a1 + 160) = 0;
  ++*(_DWORD *)(a5 + 8);
  ++*(_DWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 168) = a5;
  *(_QWORD *)(a1 + 176) = a4;
  v13 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)v13 = off_1E34E44E0;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_QWORD *)(v13 + 56) = a7;
  ++*(_DWORD *)(a5 + 8);
  *(_QWORD *)(v13 + 64) = a5;
  ++*(_DWORD *)(a4 + 8);
  *(_QWORD *)(v13 + 72) = a4;
  *(_QWORD *)(a1 + 184) = v13;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(a1 + 192));
  return a1;
}

void WebKit::WebGPU::RemoteDeviceProxy::~RemoteDeviceProxy(WebKit::WebGPU::RemoteDeviceProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  unsigned int *v50;
  void *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  unint64_t v55;
  unint64_t v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  WTF *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  IPC::Encoder *v103;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 22) + 96) + 96);
  v3 = *((_QWORD *)this + 19);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v100, v4 + 30.0);
  if (!v102)
    goto LABEL_78;
  v20 = v100;
  v19 = v101;
  v21 = (v100 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v100;
  if (v21 < v100)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v101)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v100 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      goto LABEL_78;
    *v25 = v3;
  }
  if (!v19)
    goto LABEL_78;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v100, v5);
  if (!v102)
    goto LABEL_78;
  v6 = v100;
  v7 = v101;
  v8 = (_WORD *)((v100 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v100;
  if ((unint64_t)v8 < v100)
  {
    v10 = 0;
    if (v101)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v101)
      goto LABEL_60;
    *v8 = 784;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v102)
  {
    __break(1u);
LABEL_175:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v100;
  v8 = (_WORD *)((v100 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_175;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v101)
    goto LABEL_175;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v99, (uint64_t **)(v2 + 8));
  v44 = v99;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 784;
  *(_QWORD *)(v45 + 8) = v3;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v103 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v103, 1, 0);
  v47 = v103;
  v103 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
LABEL_78:
  v50 = (unsigned int *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v50)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v50);
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 24, 0);
  v52 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v53)
  {
    if (v53[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
    else
      --v53[2];
  }
  v54 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
    else
      --v54[2];
  }
  v55 = *((_QWORD *)this + 15);
  v56 = *((_QWORD *)this + 16);
  v57 = (WTF *)*((_QWORD *)this + 17);
  if (v55 <= v56)
  {
    if (v55 == v56)
      goto LABEL_111;
    v64 = (uint64_t *)((char *)v57 + 8 * v55);
    v65 = 8 * v56 - 8 * v55;
    do
    {
      v66 = *v64;
      *v64 = 0;
      if (v66)
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      ++v64;
      v65 -= 8;
    }
    while (v65);
  }
  else
  {
    if (v56)
    {
      v58 = 8 * v56;
      do
      {
        v59 = *(_QWORD *)v57;
        *(_QWORD *)v57 = 0;
        if (v59)
          (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
        v57 = (WTF *)((char *)v57 + 8);
        v58 -= 8;
      }
      while (v58);
      v57 = (WTF *)*((_QWORD *)this + 17);
      v55 = *((_QWORD *)this + 15);
    }
    v60 = *((unsigned int *)this + 36);
    if (v55 != v60)
    {
      v61 = (uint64_t *)((char *)v57 + 8 * v55);
      v62 = 8 * v60 - 8 * v55;
      do
      {
        v63 = *v61;
        *v61 = 0;
        if (v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
        ++v61;
        v62 -= 8;
      }
      while (v62);
    }
  }
  v57 = (WTF *)*((_QWORD *)this + 17);
LABEL_111:
  if (v57)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v57, v51);
  }
  v67 = *((_QWORD *)this + 11);
  v68 = *((_QWORD *)this + 12);
  v69 = (WTF *)*((_QWORD *)this + 13);
  if (v67 <= v68)
  {
    if (v67 == v68)
      goto LABEL_132;
    v76 = (uint64_t *)((char *)v69 + 8 * v67);
    v77 = 8 * v68 - 8 * v67;
    do
    {
      v78 = *v76;
      *v76 = 0;
      if (v78)
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
      ++v76;
      v77 -= 8;
    }
    while (v77);
  }
  else
  {
    if (v68)
    {
      v70 = 8 * v68;
      do
      {
        v71 = *(_QWORD *)v69;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
        v69 = (WTF *)((char *)v69 + 8);
        v70 -= 8;
      }
      while (v70);
      v69 = (WTF *)*((_QWORD *)this + 13);
      v67 = *((_QWORD *)this + 11);
    }
    v72 = *((unsigned int *)this + 28);
    if (v67 != v72)
    {
      v73 = (uint64_t *)((char *)v69 + 8 * v67);
      v74 = 8 * v72 - 8 * v67;
      do
      {
        v75 = *v73;
        *v73 = 0;
        if (v75)
          (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
        ++v73;
        v74 -= 8;
      }
      while (v74);
    }
  }
  v69 = (WTF *)*((_QWORD *)this + 13);
LABEL_132:
  if (v69)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v69, v51);
  }
  v79 = *((_QWORD *)this + 7);
  v80 = *((_QWORD *)this + 8);
  v81 = (WTF *)*((_QWORD *)this + 9);
  if (v79 <= v80)
  {
    if (v79 == v80)
      goto LABEL_153;
    v88 = (uint64_t *)((char *)v81 + 8 * v79);
    v89 = 8 * v80 - 8 * v79;
    do
    {
      v90 = *v88;
      *v88 = 0;
      if (v90)
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
      ++v88;
      v89 -= 8;
    }
    while (v89);
  }
  else
  {
    if (v80)
    {
      v82 = 8 * v80;
      do
      {
        v83 = *(_QWORD *)v81;
        *(_QWORD *)v81 = 0;
        if (v83)
          (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
        v81 = (WTF *)((char *)v81 + 8);
        v82 -= 8;
      }
      while (v82);
      v81 = (WTF *)*((_QWORD *)this + 9);
      v79 = *((_QWORD *)this + 7);
    }
    v84 = *((unsigned int *)this + 20);
    if (v79 != v84)
    {
      v85 = (uint64_t *)((char *)v81 + 8 * v79);
      v86 = 8 * v84 - 8 * v79;
      do
      {
        v87 = *v85;
        *v85 = 0;
        if (v87)
          (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
        ++v85;
        v86 -= 8;
      }
      while (v86);
    }
  }
  v81 = (WTF *)*((_QWORD *)this + 9);
LABEL_153:
  if (v81)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v81, v51);
  }
  *(_QWORD *)this = off_1E34E45D0;
  v91 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 1)
      WTF::fastFree(v91, v51);
    else
      --*(_DWORD *)v91;
  }
  v92 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v92)
    WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref(v92, v51);
  v93 = *((_QWORD *)this + 4);
  if (v93)
    WTF::fastFree((WTF *)(v93 - 16), v51);
  v94 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v51);
    else
      *(_DWORD *)v94 -= 2;
  }
  v95 = *((_QWORD *)this + 2);
  if (v95)
  {
    *(_QWORD *)(v95 + 8) = 0;
    v96 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v96)
    {
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        atomic_store(1u, v96);
        WTF::fastFree((WTF *)v96, v51);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteDeviceProxy::~RemoteDeviceProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::queue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 184);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

unsigned __int8 ***WebKit::WebGPU::RemoteDeviceProxy::destroy(WebKit::WebGPU::RemoteDeviceProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 22) + 96) + 96);
  v2 = *((_QWORD *)this + 19);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v1 + 48) == v2)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v2;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v1 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v1 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v1 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v1 + 108) = v34;
    if (v34 >= *(_DWORD *)(v1 + 104))
    {
      if (*(_BYTE *)(v1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v1 + 84));
      *(_DWORD *)(v1 + 108) = 0;
    }
  }
  *(_QWORD *)(v1 + 48) = v2;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 783;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v1 + 64);
      v13 = (*(_QWORD *)(v1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v1 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v1 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v1 + 108))
      {
        if (*(_BYTE *)(v1 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v1 + 84));
        *(_DWORD *)(v1 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v1 + 64);
  v40 = (*(_QWORD *)(v1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v1 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v1 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v1 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 783;
  *(_QWORD *)(v45 + 8) = v2;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

WTF::StringImpl *WebKit::WebGPU::RemoteDeviceProxy::createBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int16 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  WTF::ApproximateTime *v43;
  char v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  IPC::Encoder *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  unsigned int v63;
  WTF::ApproximateTime *v64;
  WTF::StringImpl *v65[2];
  __int16 v66;
  char v67;
  char v68;
  uint64_t *v69;
  IPC::Encoder *v70;
  unint64_t v71;
  char v72;
  IPC::Encoder *v73;
  unint64_t v74;
  unint64_t v75;

  v5 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  v6 = *(WTF::StringImpl **)(a2 + 8);
  v7 = *(_WORD *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 18);
  v65[0] = v5;
  v65[1] = v6;
  v66 = v7;
  v67 = v8;
  v68 = 1;
  v64 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v10 = *(_QWORD *)(a1 + 152);
  WTF::ApproximateTime::now(v64);
  v12 = v11 + 30.0;
  if (*(_QWORD *)(v9 + 48) == v10)
  {
LABEL_4:
    result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 56, &v70, v12);
    if (v72)
    {
      v73 = v70;
      v74 = v71;
      v75 = 0;
      v15 = ((unint64_t)v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v16 = v15 >= (unint64_t)v70;
      v17 = v15 - (_QWORD)v70;
      if (v16)
      {
        if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v71)
          goto LABEL_87;
        *(_WORD *)((char *)v70 + v17) = 771;
        v75 = v17 + 2;
      }
      while (1)
      {
        IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::encode(&v73, (uint64_t)v65);
        v18 = v75;
        v19 = (char *)(((unint64_t)v73 + v75 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v19 >= (char *)v73 + v75)
        {
          v20 = v19 - (char *)v73;
          if ((unint64_t)(v19 - (char *)v73) > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_29;
          v18 = v20 + 8;
          if (v20 + 8 > v74)
            goto LABEL_29;
          *(_QWORD *)v19 = v64;
          v75 = v20 + 8;
        }
        if (v74)
        {
          v21 = *(_QWORD *)(v9 + 64);
          v22 = (*(_QWORD *)(v9 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v23 = *(_QWORD *)(v9 + 56);
          if (v22 + 16 >= v23)
            v22 = 0;
          if (v18 <= 0x10)
            v18 = 16;
          v24 = v22 + v18;
          if (v23 <= v24)
            v25 = 0;
          else
            v25 = v24;
          *(_QWORD *)(v9 + 72) = v25;
          v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v25, v26));
          if (v27 == 0x80000000 || *(_DWORD *)(v9 + 108))
          {
            if (*(_BYTE *)(v9 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v9 + 84));
            *(_DWORD *)(v9 + 108) = 0;
          }
          goto LABEL_46;
        }
LABEL_29:
        if (!v72)
          goto LABEL_86;
        v28 = ((unint64_t)v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = v28 - (_QWORD)v70;
        if (v28 < (unint64_t)v70)
        {
          v30 = 0;
        }
        else
        {
          v30 = 0;
          if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v71)
          {
            *(_WORD *)((char *)v70 + v29) = 2821;
            v30 = v29 + 2;
          }
        }
        v31 = *(_QWORD *)(v9 + 64);
        v32 = (*(_QWORD *)(v9 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v33 = *(_QWORD *)(v9 + 56);
        if (v32 + 16 >= v33)
          v32 = 0;
        if (v30 <= 0x10)
          v30 = 16;
        v34 = v32 + v30;
        if (v33 <= v34)
          v34 = 0;
        *(_QWORD *)(v9 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v31 + 16) + 128);
        do
          __ldaxr(v35);
        while (__stlxr(v34, v35));
        *(_DWORD *)(v9 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v69, (uint64_t **)(v9 + 8));
        v36 = v69;
        v37 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v37 = 771;
        *(_QWORD *)(v37 + 8) = v10;
        *(_QWORD *)(v37 + 528) = v37 + 16;
        *(_QWORD *)(v37 + 536) = v37 + 16;
        *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v37 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
        v73 = (IPC::Encoder *)v37;
        IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::encode((IPC::Encoder *)v37, (uint64_t *)v65);
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v37, (uint64_t *)&v64);
        v9 = IPC::Connection::sendMessageImpl((uint64_t)v36, (uint64_t *)&v73, 1, 0);
        v39 = v73;
        v73 = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v38);
          WTF::fastFree(v40, v41);
        }
        result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v69);
        if ((_DWORD)v9)
          goto LABEL_45;
LABEL_46:
        if (v68)
        {
          v43 = v64;
          v10 = *(_QWORD *)(a1 + 168);
          v44 = v67;
          v45 = WTF::fastMalloc((WTF *)0x60);
          *(_DWORD *)(v45 + 8) = 1;
          *(_QWORD *)(v45 + 16) = 0;
          *(_QWORD *)(v45 + 24) = 0;
          *(_QWORD *)v45 = off_1E34E3C48;
          *(_OWORD *)(v45 + 32) = 0u;
          *(_OWORD *)(v45 + 48) = 0u;
          *(_QWORD *)(v45 + 64) = v43;
          ++*(_DWORD *)(v10 + 8);
          *(_QWORD *)(v45 + 72) = v10;
          ++*(_DWORD *)(a1 + 8);
          *(_QWORD *)(v45 + 80) = a1;
          *(_BYTE *)(v45 + 88) = 2 * v44;
          if (v68)
          {
            v42 = v45;
            v46 = v65[0];
            v65[0] = 0;
            *(_QWORD *)(v45 + 24) = v46;
            result = (WTF::StringImpl *)WebKit::WebGPU::RemoteBufferProxy::setLabelInternal((WebKit::WebGPU::RemoteBufferProxy *)v45, (const WTF::String *)(v45 + 24));
            goto LABEL_49;
          }
        }
LABEL_86:
        __break(1u);
LABEL_87:
        v74 = 0;
      }
    }
    goto LABEL_45;
  }
  result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 56, &v73, v11 + 30.0);
  if ((_BYTE)v75)
  {
    v47 = v73;
    v48 = v74;
    v49 = ((unint64_t)v73 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v50 = v49 - (_QWORD)v73;
    if (v49 < (unint64_t)v73)
    {
      v52 = 0;
      v51 = v74;
    }
    else
    {
      v51 = 0;
      if (v50 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v52 = 0;
      }
      else
      {
        v52 = 0;
        if (v50 + 2 <= v74)
        {
          *(_WORD *)((char *)v73 + v50) = 2822;
          v51 = v48;
          v52 = v50 + 2;
        }
      }
    }
    v53 = (char *)(((unint64_t)v47 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v53 >= (char *)v47 + v52)
    {
      v52 = v53 - (char *)v47 + 8;
      if ((unint64_t)(v53 - (char *)v47) > 0xFFFFFFFFFFFFFFF7 || v52 > v51)
        goto LABEL_45;
      *(_QWORD *)v53 = v10;
    }
    if (v51)
    {
      v55 = (*(_QWORD *)(v9 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v56 = *(_QWORD *)(v9 + 56);
      if (v55 + 16 >= v56)
        v55 = 0;
      if (v52 <= 0x10)
        v52 = 16;
      v57 = v55 + v52;
      if (v56 <= v57)
        v58 = 0;
      else
        v58 = v57;
      *(_QWORD *)(v9 + 72) = v58;
      v59 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v9 + 64) + 16) + 128);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v58, v59));
      v61 = *(_DWORD *)(v9 + 108);
      if (v60 == 0x80000000 || v61 != 0)
      {
        v63 = v61 + 1;
        *(_DWORD *)(v9 + 108) = v63;
        if (v63 >= *(_DWORD *)(v9 + 104))
        {
          if (*(_BYTE *)(v9 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v9 + 84));
          *(_DWORD *)(v9 + 108) = 0;
        }
      }
      *(_QWORD *)(v9 + 48) = v10;
      goto LABEL_4;
    }
  }
LABEL_45:
  v42 = 0;
LABEL_49:
  *a3 = v42;
  if (v68)
  {
    result = v65[0];
    v65[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createTexture@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v7;
  WTF::ApproximateTime *v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  int v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned int v64;
  WTF::ApproximateTime *v65;
  _QWORD v66[8];
  char v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;

  v5 = a1;
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[21], a2, v66);
  if (!v67)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v66, v7);
  }
  v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v65 = v8;
  if (!v67)
    goto LABEL_92;
  v3 = *(_QWORD *)(*(_QWORD *)(v5[22] + 96) + 96);
  v4 = v5[19];
  WTF::ApproximateTime::now(v8);
  v10 = v9 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v72, v9 + 30.0);
    if (!(_BYTE)v74)
      goto LABEL_50;
    v48 = v72;
    v49 = v73;
    v50 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v50 - v72;
    if (v50 < v72)
    {
      v53 = 0;
      v52 = v73;
    }
    else
    {
      v52 = 0;
      if (v51 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v53 = 0;
      }
      else
      {
        v53 = 0;
        if (v51 + 2 <= v73)
        {
          *(_WORD *)(v72 + v51) = 2822;
          v52 = v49;
          v53 = v51 + 2;
        }
      }
    }
    v54 = (_QWORD *)((v48 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v54 >= v48 + v53)
    {
      v53 = (unint64_t)v54 - v48 + 8;
      if ((unint64_t)v54 - v48 > 0xFFFFFFFFFFFFFFF7 || v53 > v52)
        goto LABEL_50;
      *v54 = v4;
    }
    if (!v52)
    {
LABEL_50:
      v5 = 0;
      goto LABEL_59;
    }
    v56 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = *(_QWORD *)(v3 + 56);
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v53 <= 0x10)
      v53 = 16;
    v58 = v56 + v53;
    if (v57 <= v58)
      v59 = 0;
    else
      v59 = v58;
    *(_QWORD *)(v3 + 72) = v59;
    v60 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v59, v60));
    v62 = *(_DWORD *)(v3 + 108);
    if (v61 == 0x80000000 || v62 != 0)
    {
      v64 = v62 + 1;
      *(_DWORD *)(v3 + 108) = v64;
      if (v64 >= *(_DWORD *)(v3 + 104))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
    }
    *(_QWORD *)(v3 + 48) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v69, v10);
  if (!v71)
    goto LABEL_50;
  v72 = v69;
  v73 = v70;
  v74 = 0;
  v11 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v12 = v11 >= v69;
  v13 = v11 - v69;
  if (v12)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v70)
      goto LABEL_93;
    *(_WORD *)(v69 + v13) = 782;
    v74 = v13 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::TextureDescriptor,void>::encode((uint64_t *)&v72, (uint64_t)v66);
    v15 = v74;
    v16 = (_QWORD *)((v72 + v74 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v72 + v74)
    {
      v15 = (unint64_t)v16 - v72 + 8;
      if ((unint64_t)v16 - v72 > 0xFFFFFFFFFFFFFFF7 || v15 > v73)
        goto LABEL_34;
      *v16 = v65;
      v74 = v15;
    }
    if (v73)
    {
      v18 = *(_QWORD *)(v3 + 64);
      v19 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_QWORD *)(v3 + 56);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v21 = v19 + v15;
      if (v20 <= v21)
        v22 = 0;
      else
        v22 = v21;
      *(_QWORD *)(v3 + 72) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      if (v24 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_51;
    }
LABEL_34:
    if (v71)
      break;
LABEL_92:
    __break(1u);
LABEL_93:
    v73 = 0;
  }
  v25 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - v69;
  if (v25 < v69)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v70)
    {
      *(_WORD *)(v69 + v26) = 2821;
      v27 = v26 + 2;
    }
  }
  v28 = *(_QWORD *)(v3 + 64);
  v29 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v3 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v27 <= 0x10)
    v27 = 16;
  v31 = v29 + v27;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v3 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
  do
    __ldaxr(v32);
  while (__stlxr(v31, v32));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(v3 + 8));
  v33 = v68;
  v34 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v34 = 782;
  *(_QWORD *)(v34 + 8) = v4;
  *(_QWORD *)(v34 + 528) = v34 + 16;
  *(_QWORD *)(v34 + 536) = v34 + 16;
  *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v34 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
  v72 = v34;
  IPC::ArgumentCoder<WebKit::WebGPU::TextureDescriptor,void>::encode((IPC::Encoder *)v34, (uint64_t)v66);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v34, (uint64_t *)&v65);
  v36 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v72, 1, 0);
  v37 = (IPC::Encoder *)v72;
  v72 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v35);
    WTF::fastFree(v38, v39);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
  if (v36)
    goto LABEL_50;
LABEL_51:
  v40 = v5[21];
  v3 = *(_QWORD *)(v5[22] + 96);
  v4 = (uint64_t)v65;
  v41 = WTF::fastMalloc((WTF *)0x38);
  v5 = (_QWORD *)v41;
  *(_DWORD *)(v41 + 8) = 1;
  *(_QWORD *)(v41 + 16) = 0;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)v41 = off_1E34E4EA0;
  *(_QWORD *)(v41 + 32) = v4;
  ++*(_DWORD *)(v40 + 8);
  *(_QWORD *)(v41 + 40) = v40;
  v43 = (unsigned int *)(v3 + 24);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 + 1, v43));
  *(_QWORD *)(v41 + 48) = v3;
  if (!v67)
    goto LABEL_92;
  v45 = *(WTF::StringImpl **)(v41 + 24);
  v46 = v66[0];
  v66[0] = 0;
  v5[3] = v46;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v42);
    else
      *(_DWORD *)v45 -= 2;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v5 + 32))(v5, v5 + 3);
LABEL_59:
  *a3 = v5;
  return std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v66, v7);
}

WTF::StringImpl *WebKit::WebGPU::RemoteDeviceProxy::createSampler@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  __int16 v6;
  int v7;
  uint64_t v8;
  WTF::ApproximateTime *v9;
  double v10;
  double v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  IPC::Encoder *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v61;
  WTF::ApproximateTime *v62;
  WTF::StringImpl *v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t *v69;
  IPC::Encoder *v70;
  unint64_t v71;
  char v72;
  IPC::Encoder *v73;
  unint64_t v74;
  unint64_t v75;

  v5 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  v6 = *(_WORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 24);
  v63 = v5;
  v64 = *(_DWORD *)(a2 + 8);
  v65 = v6;
  v66 = *(_QWORD *)(a2 + 16);
  v67 = v7;
  v68 = 1;
  v62 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v9 = *(WTF::ApproximateTime **)(a1 + 152);
  WTF::ApproximateTime::now(v62);
  v11 = v10 + 30.0;
  if (*(WTF::ApproximateTime **)(v8 + 48) == v9)
  {
LABEL_4:
    result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 56, &v70, v11);
    if (v72)
    {
      v73 = v70;
      v74 = v71;
      v75 = 0;
      v14 = ((unint64_t)v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = v14 >= (unint64_t)v70;
      v16 = v14 - (_QWORD)v70;
      if (v15)
      {
        if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v71)
          goto LABEL_86;
        *(_WORD *)((char *)v70 + v16) = 780;
        v75 = v16 + 2;
      }
      while (1)
      {
        IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::encode(&v73, (uint64_t)&v63);
        v17 = v75;
        v18 = (char *)(((unint64_t)v73 + v75 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v18 >= (char *)v73 + v75)
        {
          v19 = v18 - (char *)v73;
          if ((unint64_t)(v18 - (char *)v73) > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_29;
          v17 = v19 + 8;
          if (v19 + 8 > v74)
            goto LABEL_29;
          *(_QWORD *)v18 = v62;
          v75 = v19 + 8;
        }
        if (v74)
        {
          v20 = *(_QWORD *)(v8 + 64);
          v21 = (*(_QWORD *)(v8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v22 = *(_QWORD *)(v8 + 56);
          if (v21 + 16 >= v22)
            v21 = 0;
          if (v17 <= 0x10)
            v17 = 16;
          v23 = v21 + v17;
          if (v22 <= v23)
            v24 = 0;
          else
            v24 = v23;
          *(_QWORD *)(v8 + 72) = v24;
          v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v24, v25));
          if (v26 == 0x80000000 || *(_DWORD *)(v8 + 108))
          {
            if (*(_BYTE *)(v8 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v8 + 84));
            *(_DWORD *)(v8 + 108) = 0;
          }
          goto LABEL_46;
        }
LABEL_29:
        if (!v72)
          goto LABEL_85;
        v27 = ((unint64_t)v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = v27 - (_QWORD)v70;
        if (v27 < (unint64_t)v70)
        {
          v29 = 0;
        }
        else
        {
          v29 = 0;
          if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v71)
          {
            *(_WORD *)((char *)v70 + v28) = 2821;
            v29 = v28 + 2;
          }
        }
        v30 = *(_QWORD *)(v8 + 64);
        v31 = (*(_QWORD *)(v8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *(_QWORD *)(v8 + 56);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v29 <= 0x10)
          v29 = 16;
        v33 = v31 + v29;
        if (v32 <= v33)
          v33 = 0;
        *(_QWORD *)(v8 + 72) = v33;
        v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          __ldaxr(v34);
        while (__stlxr(v33, v34));
        *(_DWORD *)(v8 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v69, (uint64_t **)(v8 + 8));
        v35 = v69;
        v36 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v36 = 780;
        *(_QWORD *)(v36 + 8) = v9;
        *(_QWORD *)(v36 + 528) = v36 + 16;
        *(_QWORD *)(v36 + 536) = v36 + 16;
        *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v36 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
        v73 = (IPC::Encoder *)v36;
        IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::encode((IPC::Encoder *)v36, (uint64_t *)&v63);
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v36, (uint64_t *)&v62);
        v8 = IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)&v73, 1, 0);
        v38 = v73;
        v73 = 0;
        if (v38)
        {
          IPC::Encoder::~Encoder(v38, v37);
          WTF::fastFree(v39, v40);
        }
        result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v69);
        if ((_DWORD)v8)
          goto LABEL_45;
LABEL_46:
        v42 = *(_QWORD *)(a1 + 168);
        v9 = v62;
        v43 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)(v43 + 16) = 0;
        *(_DWORD *)(v43 + 8) = 1;
        *(_QWORD *)v43 = off_1E34E4E48;
        *(_QWORD *)(v43 + 24) = v9;
        ++*(_DWORD *)(v42 + 8);
        *(_QWORD *)(v43 + 32) = v42;
        ++*(_DWORD *)(a1 + 8);
        *(_QWORD *)(v43 + 40) = a1;
        if (v68)
        {
          v41 = v43;
          v44 = v63;
          v63 = 0;
          *(_QWORD *)(v43 + 16) = v44;
          result = (WTF::StringImpl *)WebKit::WebGPU::RemoteSamplerProxy::setLabelInternal((WebKit::WebGPU::RemoteSamplerProxy *)v43, (const WTF::String *)(v43 + 16));
          goto LABEL_48;
        }
LABEL_85:
        __break(1u);
LABEL_86:
        v74 = 0;
      }
    }
    goto LABEL_45;
  }
  result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 56, &v73, v10 + 30.0);
  if ((_BYTE)v75)
  {
    v45 = v73;
    v46 = v74;
    v47 = ((unint64_t)v73 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - (_QWORD)v73;
    if (v47 < (unint64_t)v73)
    {
      v50 = 0;
      v49 = v74;
    }
    else
    {
      v49 = 0;
      if (v48 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v50 = 0;
      }
      else
      {
        v50 = 0;
        if (v48 + 2 <= v74)
        {
          *(_WORD *)((char *)v73 + v48) = 2822;
          v49 = v46;
          v50 = v48 + 2;
        }
      }
    }
    v51 = (char *)(((unint64_t)v45 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v51 >= (char *)v45 + v50)
    {
      v50 = v51 - (char *)v45 + 8;
      if ((unint64_t)(v51 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v50 > v49)
        goto LABEL_45;
      *(_QWORD *)v51 = v9;
    }
    if (v49)
    {
      v53 = (*(_QWORD *)(v8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v54 = *(_QWORD *)(v8 + 56);
      if (v53 + 16 >= v54)
        v53 = 0;
      if (v50 <= 0x10)
        v50 = 16;
      v55 = v53 + v50;
      if (v54 <= v55)
        v56 = 0;
      else
        v56 = v55;
      *(_QWORD *)(v8 + 72) = v56;
      v57 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 64) + 16) + 128);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v56, v57));
      v59 = *(_DWORD *)(v8 + 108);
      if (v58 == 0x80000000 || v59 != 0)
      {
        v61 = v59 + 1;
        *(_DWORD *)(v8 + 108) = v61;
        if (v61 >= *(_DWORD *)(v8 + 104))
        {
          if (*(_BYTE *)(v8 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v8 + 84));
          *(_DWORD *)(v8 + 108) = 0;
        }
      }
      *(_QWORD *)(v8 + 48) = v9;
      goto LABEL_4;
    }
  }
LABEL_45:
  v41 = 0;
LABEL_48:
  *a3 = v41;
  if (v68)
  {
    result = v63;
    v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::importExternalTexture@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  IPC::Encoder *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  __int128 v50;
  int v51;
  _BYTE v52[16];
  int v53;
  char v54;
  _QWORD v55[2];
  char v56;
  __int128 v57;
  int v58;
  _BYTE v59[16];
  int v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  IPC::Encoder *v66;

  v63 = WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v6 = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)v55);
  if (!v62)
    goto LABEL_41;
  if (v56)
    v8 = 0;
  else
    v8 = *(_DWORD *)(a2 + 32) == 1;
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 16);
    if (v9)
    {
      v10 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v10 = off_1E34E4988;
      *(_QWORD *)(v10 + 8) = a1;
      v66 = (IPC::Encoder *)v10;
      v11 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *v11 = (uint64_t)off_1E34E49B0;
      v11[1] = a1;
      v65 = v11;
      WebKit::SharedVideoFrameWriter::write((_QWORD *)(a1 + 192), v9, (uint64_t *)&v66, &v65, (uint64_t)&v50);
      if (!v62)
        goto LABEL_76;
      if (v61 == v54)
      {
        if (!v61)
          goto LABEL_21;
        *(_QWORD *)&v57 = v50;
        *(_QWORD *)((char *)&v57 + 5) = *(_QWORD *)((char *)&v50 + 5);
        v58 = v51;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v59, (uint64_t)v52);
      }
      else if (v61)
      {
        if (v60 != -1)
          ((void (*)(char *, _BYTE *))off_1E34E46A0[v60])(&v64, v59);
        v60 = -1;
        v61 = 0;
      }
      else
      {
        v57 = v50;
        v58 = v51;
        v59[0] = 0;
        v60 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v59, (uint64_t)v52);
        v61 = 1;
      }
      if (v54)
      {
        if (v53 != -1)
          ((void (*)(char *, _BYTE *))off_1E34E46A0[v53])(&v64, v52);
        v53 = -1;
      }
LABEL_21:
      (*(void (**)(uint64_t *))(*v11 + 8))(v11);
      v6 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      if (!v62)
        goto LABEL_76;
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v9 = *(_QWORD *)(a1 + 152);
  WTF::ApproximateTime::now(v6);
  v13 = v12 + 30.0;
  if (*(_QWORD *)(v10 + 48) == v9)
    goto LABEL_23;
  IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v50, v12 + 30.0);
  if ((_BYTE)v51)
  {
    v34 = v50;
    v35 = (v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v36 = v35 - v50;
    if (v35 < (unint64_t)v50)
    {
      v38 = 0;
      v37 = *((_QWORD *)&v50 + 1);
    }
    else
    {
      v37 = 0;
      if (v36 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v38 = 0;
      }
      else
      {
        v38 = 0;
        if (v36 + 2 <= *((_QWORD *)&v50 + 1))
        {
          *(_WORD *)(v50 + v36) = 2822;
          v37 = *((_QWORD *)&v34 + 1);
          v38 = v36 + 2;
        }
      }
    }
    v39 = (_QWORD *)((v34 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= (unint64_t)v34 + v38)
    {
      v38 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)((unint64_t)v39 - v34) > 0xFFFFFFFFFFFFFFF7 || v38 > v37)
        goto LABEL_41;
      *v39 = v9;
    }
    if (v37)
    {
      v41 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v42 = *(_QWORD *)(v10 + 56);
      if (v41 + 16 >= v42)
        v41 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v43 = v41 + v38;
      if (v42 <= v43)
        v44 = 0;
      else
        v44 = v43;
      *(_QWORD *)(v10 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v10 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v10 + 108) = v49;
        if (v49 >= *(_DWORD *)(v10 + 104))
        {
          if (*(_BYTE *)(v10 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
          *(_DWORD *)(v10 + 108) = 0;
        }
      }
      *(_QWORD *)(v10 + 48) = v9;
LABEL_23:
      IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v50, v13);
      if ((_BYTE)v51)
      {
        v14 = (v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v15 = v14 - v50;
        if (v14 < (unint64_t)v50)
          goto LABEL_77;
        v16 = v15 + 2;
        if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > *((_QWORD *)&v50 + 1))
          goto LABEL_77;
        *(_WORD *)(v50 + v15) = 2821;
        while (1)
        {
          v18 = *(_QWORD *)(v10 + 64);
          v19 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v20 = *(_QWORD *)(v10 + 56);
          if (v19 + 16 >= v20)
            v19 = 0;
          if (v16 <= 0x10)
            v16 = 16;
          v21 = v19 + v16;
          if (v20 <= v21)
            v21 = 0;
          *(_QWORD *)(v10 + 72) = v21;
          v22 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
          do
            __ldaxr(v22);
          while (__stlxr(v21, v22));
          *(_DWORD *)(v10 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, (uint64_t **)(v10 + 8));
          v23 = v65;
          v24 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v24 = 785;
          *(_QWORD *)(v24 + 8) = v9;
          *(_QWORD *)(v24 + 528) = v24 + 16;
          *(_QWORD *)(v24 + 536) = v24 + 16;
          *(_OWORD *)(v24 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v24 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v24);
          v66 = (IPC::Encoder *)v24;
          IPC::ArgumentCoder<WebKit::WebGPU::ExternalTextureDescriptor,void>::encode((IPC::Encoder *)v24, (uint64_t)v55);
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v24, &v63);
          v10 = IPC::Connection::sendMessageImpl((uint64_t)v23, (uint64_t *)&v66, 1, 0);
          v26 = v66;
          v66 = 0;
          if (v26)
          {
            IPC::Encoder::~Encoder(v26, v25);
            WTF::fastFree(v27, v28);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v65);
          if ((_DWORD)v10)
            break;
          v31 = *(_QWORD *)(a1 + 168);
          v9 = v63;
          v32 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)(v32 + 16) = 0;
          *(_DWORD *)(v32 + 8) = 1;
          *(_QWORD *)v32 = off_1E34E4258;
          *(_QWORD *)(v32 + 24) = v9;
          ++*(_DWORD *)(v31 + 8);
          *(_QWORD *)(v32 + 32) = v31;
          ++*(_DWORD *)(a1 + 8);
          *(_QWORD *)(v32 + 40) = a1;
          if (v62)
          {
            v29 = v32;
            v33 = v55[0];
            v55[0] = 0;
            *(_QWORD *)(v32 + 16) = v33;
            *(_QWORD *)&v50 = v32 + 16;
            WebKit::WebGPU::RemoteExternalTextureProxy::send<Messages::RemoteExternalTexture::SetLabel>(*(WTF::ApproximateTime **)(v32 + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 176) + 96) + 96), (uint64_t **)&v50);
            goto LABEL_42;
          }
LABEL_76:
          __break(1u);
LABEL_77:
          v16 = 0;
        }
      }
    }
  }
LABEL_41:
  v29 = 0;
LABEL_42:
  *a3 = v29;
  return std::__optional_destruct_base<WebKit::WebGPU::ExternalTextureDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createBindGroupLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  WTF::ApproximateTime *v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  int v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  IPC::Encoder *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unsigned int v62;
  WTF::ApproximateTime *v63;
  uint64_t v64;
  _BYTE v65[16];
  char v66;
  uint64_t *v67;
  IPC::Encoder *v68;
  unint64_t v69;
  char v70;
  IPC::Encoder *v71;
  unint64_t v72;
  unint64_t v73;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)&v64);
  if (!v66)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v7);
  }
  v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v63 = v8;
  if (!v66)
    goto LABEL_86;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v4 = *(_QWORD *)(a1 + 152);
  WTF::ApproximateTime::now(v8);
  v10 = v9 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v71, v9 + 30.0);
    if (!(_BYTE)v73)
      goto LABEL_50;
    v46 = v71;
    v47 = v72;
    v48 = ((unint64_t)v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v49 = v48 - (_QWORD)v71;
    if (v48 < (unint64_t)v71)
    {
      v51 = 0;
      v50 = v72;
    }
    else
    {
      v50 = 0;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v51 = 0;
      }
      else
      {
        v51 = 0;
        if (v49 + 2 <= v72)
        {
          *(_WORD *)((char *)v71 + v49) = 2822;
          v50 = v47;
          v51 = v49 + 2;
        }
      }
    }
    v52 = (char *)(((unint64_t)v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v52 >= (char *)v46 + v51)
    {
      v51 = v52 - (char *)v46 + 8;
      if ((unint64_t)(v52 - (char *)v46) > 0xFFFFFFFFFFFFFFF7 || v51 > v50)
        goto LABEL_50;
      *(_QWORD *)v52 = v4;
    }
    if (!v50)
    {
LABEL_50:
      v41 = 0;
      goto LABEL_53;
    }
    v54 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v55 = *(_QWORD *)(v3 + 56);
    if (v54 + 16 >= v55)
      v54 = 0;
    if (v51 <= 0x10)
      v51 = 16;
    v56 = v54 + v51;
    if (v55 <= v56)
      v57 = 0;
    else
      v57 = v56;
    *(_QWORD *)(v3 + 72) = v57;
    v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v57, v58));
    v60 = *(_DWORD *)(v3 + 108);
    if (v59 == 0x80000000 || v60 != 0)
    {
      v62 = v60 + 1;
      *(_DWORD *)(v3 + 108) = v62;
      if (v62 >= *(_DWORD *)(v3 + 104))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
    }
    *(_QWORD *)(v3 + 48) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v10);
  if (!v70)
    goto LABEL_50;
  v71 = v68;
  v72 = v69;
  v73 = 0;
  v11 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v12 = v11 >= (unint64_t)v68;
  v13 = v11 - (_QWORD)v68;
  if (v12)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v69)
      goto LABEL_87;
    *(_WORD *)((char *)v68 + v13) = 770;
    v73 = v13 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v71, &v64);
    IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v71, (uint64_t)v65);
    v15 = v73;
    v16 = (char *)(((unint64_t)v71 + v73 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= (char *)v71 + v73)
    {
      v17 = v16 - (char *)v71;
      v15 = v16 - (char *)v71 + 8;
      if ((unint64_t)(v16 - (char *)v71) > 0xFFFFFFFFFFFFFFF7 || v15 > v72)
        goto LABEL_34;
      *(_QWORD *)v16 = v63;
      v73 = v17 + 8;
    }
    if (v72)
    {
      v19 = *(_QWORD *)(v3 + 64);
      v20 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v21 = *(_QWORD *)(v3 + 56);
      if (v20 + 16 >= v21)
        v20 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v22 = v20 + v15;
      if (v21 <= v22)
        v23 = 0;
      else
        v23 = v22;
      *(_QWORD *)(v3 + 72) = v23;
      v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v23, v24));
      if (v25 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_51;
    }
LABEL_34:
    if (v70)
      break;
LABEL_86:
    __break(1u);
LABEL_87:
    v72 = 0;
  }
  v26 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v27 = v26 - (_QWORD)v68;
  if (v26 < (unint64_t)v68)
  {
    v28 = 0;
  }
  else
  {
    v28 = 0;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v69)
    {
      *(_WORD *)((char *)v68 + v27) = 2821;
      v28 = v27 + 2;
    }
  }
  v29 = *(_QWORD *)(v3 + 64);
  v30 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v31 = *(_QWORD *)(v3 + 56);
  if (v30 + 16 >= v31)
    v30 = 0;
  if (v28 <= 0x10)
    v28 = 16;
  v32 = v30 + v28;
  if (v31 <= v32)
    v32 = 0;
  *(_QWORD *)(v3 + 72) = v32;
  v33 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
  do
    __ldaxr(v33);
  while (__stlxr(v32, v33));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)(v3 + 8));
  v34 = v67;
  v35 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v35 = 770;
  *(_QWORD *)(v35 + 8) = v4;
  *(_QWORD *)(v35 + 528) = v35 + 16;
  *(_QWORD *)(v35 + 536) = v35 + 16;
  *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v35 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
  v71 = (IPC::Encoder *)v35;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v35, &v64);
  IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v35, (uint64_t)v65);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v35, (uint64_t *)&v63);
  v37 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v71, 1, 0);
  v38 = v71;
  v71 = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v36);
    WTF::fastFree(v39, v40);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
  if (v37)
    goto LABEL_50;
LABEL_51:
  v3 = *(_QWORD *)(a1 + 168);
  v42 = (uint64_t)v63;
  v43 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v43 + 8) = 1;
  *(_QWORD *)(v43 + 16) = 0;
  *(_QWORD *)(v43 + 24) = 0;
  *(_QWORD *)v43 = off_1E34E3BF8;
  *(_QWORD *)(v43 + 32) = v42;
  ++*(_DWORD *)(v3 + 8);
  *(_QWORD *)(v43 + 40) = v3;
  ++*(_DWORD *)(a1 + 8);
  *(_QWORD *)(v43 + 48) = a1;
  if (!v66)
    goto LABEL_86;
  v41 = v43;
  v44 = v64;
  v64 = 0;
  *(_QWORD *)(v43 + 24) = v44;
  WebKit::WebGPU::RemoteBindGroupLayoutProxy::setLabelInternal((WebKit::WebGPU::RemoteBindGroupLayoutProxy *)v43, (const WTF::String *)(v43 + 24));
LABEL_53:
  *a3 = v41;
  return std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createPipelineLayout@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  WTF::ApproximateTime *v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  int v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  IPC::Encoder *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unsigned int v62;
  WTF::ApproximateTime *v63;
  uint64_t v64;
  _BYTE v65[24];
  char v66;
  uint64_t *v67;
  IPC::Encoder *v68;
  unint64_t v69;
  char v70;
  IPC::Encoder *v71;
  unint64_t v72;
  unint64_t v73;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(WTF **)(a1 + 168), a2, (uint64_t)&v64);
  if (!v66)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::PipelineLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v7);
  }
  v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v63 = v8;
  if (!v66)
    goto LABEL_86;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v4 = *(_QWORD *)(a1 + 152);
  WTF::ApproximateTime::now(v8);
  v10 = v9 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v71, v9 + 30.0);
    if (!(_BYTE)v73)
      goto LABEL_50;
    v46 = v71;
    v47 = v72;
    v48 = ((unint64_t)v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v49 = v48 - (_QWORD)v71;
    if (v48 < (unint64_t)v71)
    {
      v51 = 0;
      v50 = v72;
    }
    else
    {
      v50 = 0;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v51 = 0;
      }
      else
      {
        v51 = 0;
        if (v49 + 2 <= v72)
        {
          *(_WORD *)((char *)v71 + v49) = 2822;
          v50 = v47;
          v51 = v49 + 2;
        }
      }
    }
    v52 = (char *)(((unint64_t)v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v52 >= (char *)v46 + v51)
    {
      v51 = v52 - (char *)v46 + 8;
      if ((unint64_t)(v52 - (char *)v46) > 0xFFFFFFFFFFFFFFF7 || v51 > v50)
        goto LABEL_50;
      *(_QWORD *)v52 = v4;
    }
    if (!v50)
    {
LABEL_50:
      v41 = 0;
      goto LABEL_53;
    }
    v54 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v55 = *(_QWORD *)(v3 + 56);
    if (v54 + 16 >= v55)
      v54 = 0;
    if (v51 <= 0x10)
      v51 = 16;
    v56 = v54 + v51;
    if (v55 <= v56)
      v57 = 0;
    else
      v57 = v56;
    *(_QWORD *)(v3 + 72) = v57;
    v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v57, v58));
    v60 = *(_DWORD *)(v3 + 108);
    if (v59 == 0x80000000 || v60 != 0)
    {
      v62 = v60 + 1;
      *(_DWORD *)(v3 + 108) = v62;
      if (v62 >= *(_DWORD *)(v3 + 104))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
    }
    *(_QWORD *)(v3 + 48) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v10);
  if (!v70)
    goto LABEL_50;
  v71 = v68;
  v72 = v69;
  v73 = 0;
  v11 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v12 = v11 >= (unint64_t)v68;
  v13 = v11 - (_QWORD)v68;
  if (v12)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v69)
      goto LABEL_87;
    *(_WORD *)((char *)v68 + v13) = 775;
    v73 = v13 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v71, &v64);
    IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(&v71, (uint64_t)v65);
    v15 = v73;
    v16 = (char *)(((unint64_t)v71 + v73 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= (char *)v71 + v73)
    {
      v17 = v16 - (char *)v71;
      v15 = v16 - (char *)v71 + 8;
      if ((unint64_t)(v16 - (char *)v71) > 0xFFFFFFFFFFFFFFF7 || v15 > v72)
        goto LABEL_34;
      *(_QWORD *)v16 = v63;
      v73 = v17 + 8;
    }
    if (v72)
    {
      v19 = *(_QWORD *)(v3 + 64);
      v20 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v21 = *(_QWORD *)(v3 + 56);
      if (v20 + 16 >= v21)
        v20 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v22 = v20 + v15;
      if (v21 <= v22)
        v23 = 0;
      else
        v23 = v22;
      *(_QWORD *)(v3 + 72) = v23;
      v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v23, v24));
      if (v25 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_51;
    }
LABEL_34:
    if (v70)
      break;
LABEL_86:
    __break(1u);
LABEL_87:
    v72 = 0;
  }
  v26 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v27 = v26 - (_QWORD)v68;
  if (v26 < (unint64_t)v68)
  {
    v28 = 0;
  }
  else
  {
    v28 = 0;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v69)
    {
      *(_WORD *)((char *)v68 + v27) = 2821;
      v28 = v27 + 2;
    }
  }
  v29 = *(_QWORD *)(v3 + 64);
  v30 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v31 = *(_QWORD *)(v3 + 56);
  if (v30 + 16 >= v31)
    v30 = 0;
  if (v28 <= 0x10)
    v28 = 16;
  v32 = v30 + v28;
  if (v31 <= v32)
    v32 = 0;
  *(_QWORD *)(v3 + 72) = v32;
  v33 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
  do
    __ldaxr(v33);
  while (__stlxr(v32, v33));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)(v3 + 8));
  v34 = v67;
  v35 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v35 = 775;
  *(_QWORD *)(v35 + 8) = v4;
  *(_QWORD *)(v35 + 528) = v35 + 16;
  *(_QWORD *)(v35 + 536) = v35 + 16;
  *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v35 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
  v71 = (IPC::Encoder *)v35;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v35, &v64);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>((IPC::Encoder *)v35, (uint64_t)v65);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v35, (uint64_t *)&v63);
  v37 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v71, 1, 0);
  v38 = v71;
  v71 = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v36);
    WTF::fastFree(v39, v40);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
  if (v37)
    goto LABEL_50;
LABEL_51:
  v3 = *(_QWORD *)(a1 + 168);
  v42 = (uint64_t)v63;
  v43 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v43 + 8) = 1;
  *(_QWORD *)(v43 + 16) = 0;
  *(_QWORD *)(v43 + 24) = 0;
  *(_QWORD *)v43 = off_1E34E4440;
  *(_QWORD *)(v43 + 32) = v42;
  ++*(_DWORD *)(v3 + 8);
  *(_QWORD *)(v43 + 40) = v3;
  ++*(_DWORD *)(a1 + 8);
  *(_QWORD *)(v43 + 48) = a1;
  if (!v66)
    goto LABEL_86;
  v41 = v43;
  v44 = v64;
  v64 = 0;
  *(_QWORD *)(v43 + 24) = v44;
  v71 = (IPC::Encoder *)(v43 + 24);
  WebKit::WebGPU::RemotePipelineLayoutProxy::send<Messages::RemotePipelineLayout::SetLabel>(*(WTF::ApproximateTime **)(v43 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 48) + 176) + 96) + 96), (uint64_t **)&v71);
LABEL_53:
  *a3 = v41;
  return std::__optional_destruct_base<WebKit::WebGPU::PipelineLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createBindGroup@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  WTF::ApproximateTime *v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  IPC::Encoder *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v61;
  WTF::ApproximateTime *v62;
  uint64_t v63[4];
  char v64;
  uint64_t *v65;
  IPC::Encoder *v66;
  unint64_t v67;
  char v68;
  IPC::Encoder *v69;
  unint64_t v70;
  unint64_t v71;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 168), a2, (uint64_t)v63);
  if (!v64)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::BindGroupDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63, v7);
  }
  v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v62 = v8;
  if (!v64)
    goto LABEL_86;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v4 = *(_QWORD *)(a1 + 152);
  WTF::ApproximateTime::now(v8);
  v10 = v9 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v69, v9 + 30.0);
    if (!(_BYTE)v71)
      goto LABEL_50;
    v45 = v69;
    v46 = v70;
    v47 = ((unint64_t)v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - (_QWORD)v69;
    if (v47 < (unint64_t)v69)
    {
      v50 = 0;
      v49 = v70;
    }
    else
    {
      v49 = 0;
      if (v48 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v50 = 0;
      }
      else
      {
        v50 = 0;
        if (v48 + 2 <= v70)
        {
          *(_WORD *)((char *)v69 + v48) = 2822;
          v49 = v46;
          v50 = v48 + 2;
        }
      }
    }
    v51 = (char *)(((unint64_t)v45 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v51 >= (char *)v45 + v50)
    {
      v50 = v51 - (char *)v45 + 8;
      if ((unint64_t)(v51 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v50 > v49)
        goto LABEL_50;
      *(_QWORD *)v51 = v4;
    }
    if (!v49)
    {
LABEL_50:
      v40 = 0;
      goto LABEL_53;
    }
    v53 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = *(_QWORD *)(v3 + 56);
    if (v53 + 16 >= v54)
      v53 = 0;
    if (v50 <= 0x10)
      v50 = 16;
    v55 = v53 + v50;
    if (v54 <= v55)
      v56 = 0;
    else
      v56 = v55;
    *(_QWORD *)(v3 + 72) = v56;
    v57 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v56, v57));
    v59 = *(_DWORD *)(v3 + 108);
    if (v58 == 0x80000000 || v59 != 0)
    {
      v61 = v59 + 1;
      *(_DWORD *)(v3 + 108) = v61;
      if (v61 >= *(_DWORD *)(v3 + 104))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
    }
    *(_QWORD *)(v3 + 48) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v66, v10);
  if (!v68)
    goto LABEL_50;
  v69 = v66;
  v70 = v67;
  v71 = 0;
  v11 = ((unint64_t)v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v12 = v11 >= (unint64_t)v66;
  v13 = v11 - (_QWORD)v66;
  if (v12)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v67)
      goto LABEL_87;
    *(_WORD *)((char *)v66 + v13) = 769;
    v71 = v13 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::encode(&v69, v63);
    v15 = v71;
    v16 = (char *)(((unint64_t)v69 + v71 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= (char *)v69 + v71)
    {
      v17 = v16 - (char *)v69;
      v15 = v16 - (char *)v69 + 8;
      if ((unint64_t)(v16 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v15 > v70)
        goto LABEL_34;
      *(_QWORD *)v16 = v62;
      v71 = v17 + 8;
    }
    if (v70)
    {
      v19 = *(_QWORD *)(v3 + 64);
      v20 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v21 = *(_QWORD *)(v3 + 56);
      if (v20 + 16 >= v21)
        v20 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v22 = v20 + v15;
      if (v21 <= v22)
        v23 = 0;
      else
        v23 = v22;
      *(_QWORD *)(v3 + 72) = v23;
      v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v23, v24));
      if (v25 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_51;
    }
LABEL_34:
    if (v68)
      break;
LABEL_86:
    __break(1u);
LABEL_87:
    v70 = 0;
  }
  v26 = ((unint64_t)v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v27 = v26 - (_QWORD)v66;
  if (v26 < (unint64_t)v66)
  {
    v28 = 0;
  }
  else
  {
    v28 = 0;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v67)
    {
      *(_WORD *)((char *)v66 + v27) = 2821;
      v28 = v27 + 2;
    }
  }
  v29 = *(_QWORD *)(v3 + 64);
  v30 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v31 = *(_QWORD *)(v3 + 56);
  if (v30 + 16 >= v31)
    v30 = 0;
  if (v28 <= 0x10)
    v28 = 16;
  v32 = v30 + v28;
  if (v31 <= v32)
    v32 = 0;
  *(_QWORD *)(v3 + 72) = v32;
  v33 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
  do
    __ldaxr(v33);
  while (__stlxr(v32, v33));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, (uint64_t **)(v3 + 8));
  v34 = v65;
  v35 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v35 = 769;
  *(_QWORD *)(v35 + 8) = v4;
  *(_QWORD *)(v35 + 528) = v35 + 16;
  *(_QWORD *)(v35 + 536) = v35 + 16;
  *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v35 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
  v69 = (IPC::Encoder *)v35;
  IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::encode((IPC::Encoder *)v35, v63);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v35, (uint64_t *)&v62);
  v3 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v69, 1, 0);
  v37 = v69;
  v69 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v36);
    WTF::fastFree(v38, v39);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v65);
  if ((_DWORD)v3)
    goto LABEL_50;
LABEL_51:
  v41 = *(_QWORD *)(a1 + 168);
  v4 = (uint64_t)v62;
  v42 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(v42 + 16) = 0;
  *(_DWORD *)(v42 + 8) = 1;
  *(_QWORD *)v42 = off_1E34E3C20;
  *(_QWORD *)(v42 + 24) = v4;
  ++*(_DWORD *)(v41 + 8);
  *(_QWORD *)(v42 + 32) = v41;
  ++*(_DWORD *)(a1 + 8);
  *(_QWORD *)(v42 + 40) = a1;
  if (!v64)
    goto LABEL_86;
  v40 = v42;
  v43 = v63[0];
  v63[0] = 0;
  *(_QWORD *)(v42 + 16) = v43;
  WebKit::WebGPU::RemoteBindGroupProxy::setLabelInternal((WebKit::WebGPU::RemoteBindGroupProxy *)v42, (const WTF::String *)(v42 + 16));
LABEL_53:
  *a3 = v40;
  return std::__optional_destruct_base<WebKit::WebGPU::BindGroupDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createShaderModule@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  WTF::ApproximateTime *v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  IPC::Encoder *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v61;
  WTF::ApproximateTime *v62;
  uint64_t v63[4];
  char v64;
  uint64_t *v65;
  IPC::Encoder *v66;
  unint64_t v67;
  char v68;
  IPC::Encoder *v69;
  unint64_t v70;
  unint64_t v71;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 168), a2, (uint64_t)v63);
  if (!v64)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::ShaderModuleDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63, v7);
  }
  v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v62 = v8;
  if (!v64)
    goto LABEL_86;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v4 = *(_QWORD *)(a1 + 152);
  WTF::ApproximateTime::now(v8);
  v10 = v9 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v69, v9 + 30.0);
    if (!(_BYTE)v71)
      goto LABEL_50;
    v45 = v69;
    v46 = v70;
    v47 = ((unint64_t)v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - (_QWORD)v69;
    if (v47 < (unint64_t)v69)
    {
      v50 = 0;
      v49 = v70;
    }
    else
    {
      v49 = 0;
      if (v48 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v50 = 0;
      }
      else
      {
        v50 = 0;
        if (v48 + 2 <= v70)
        {
          *(_WORD *)((char *)v69 + v48) = 2822;
          v49 = v46;
          v50 = v48 + 2;
        }
      }
    }
    v51 = (char *)(((unint64_t)v45 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v51 >= (char *)v45 + v50)
    {
      v50 = v51 - (char *)v45 + 8;
      if ((unint64_t)(v51 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v50 > v49)
        goto LABEL_50;
      *(_QWORD *)v51 = v4;
    }
    if (!v49)
    {
LABEL_50:
      v40 = 0;
      goto LABEL_53;
    }
    v53 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = *(_QWORD *)(v3 + 56);
    if (v53 + 16 >= v54)
      v53 = 0;
    if (v50 <= 0x10)
      v50 = 16;
    v55 = v53 + v50;
    if (v54 <= v55)
      v56 = 0;
    else
      v56 = v55;
    *(_QWORD *)(v3 + 72) = v56;
    v57 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v56, v57));
    v59 = *(_DWORD *)(v3 + 108);
    if (v58 == 0x80000000 || v59 != 0)
    {
      v61 = v59 + 1;
      *(_DWORD *)(v3 + 108) = v61;
      if (v61 >= *(_DWORD *)(v3 + 104))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
    }
    *(_QWORD *)(v3 + 48) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v66, v10);
  if (!v68)
    goto LABEL_50;
  v69 = v66;
  v70 = v67;
  v71 = 0;
  v11 = ((unint64_t)v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v12 = v11 >= (unint64_t)v66;
  v13 = v11 - (_QWORD)v66;
  if (v12)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v67)
      goto LABEL_87;
    *(_WORD *)((char *)v66 + v13) = 781;
    v71 = v13 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::ShaderModuleDescriptor,void>::encode(&v69, v63);
    v15 = v71;
    v16 = (char *)(((unint64_t)v69 + v71 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= (char *)v69 + v71)
    {
      v17 = v16 - (char *)v69;
      v15 = v16 - (char *)v69 + 8;
      if ((unint64_t)(v16 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v15 > v70)
        goto LABEL_34;
      *(_QWORD *)v16 = v62;
      v71 = v17 + 8;
    }
    if (v70)
    {
      v19 = *(_QWORD *)(v3 + 64);
      v20 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v21 = *(_QWORD *)(v3 + 56);
      if (v20 + 16 >= v21)
        v20 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v22 = v20 + v15;
      if (v21 <= v22)
        v23 = 0;
      else
        v23 = v22;
      *(_QWORD *)(v3 + 72) = v23;
      v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v23, v24));
      if (v25 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_51;
    }
LABEL_34:
    if (v68)
      break;
LABEL_86:
    __break(1u);
LABEL_87:
    v70 = 0;
  }
  v26 = ((unint64_t)v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v27 = v26 - (_QWORD)v66;
  if (v26 < (unint64_t)v66)
  {
    v28 = 0;
  }
  else
  {
    v28 = 0;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v67)
    {
      *(_WORD *)((char *)v66 + v27) = 2821;
      v28 = v27 + 2;
    }
  }
  v29 = *(_QWORD *)(v3 + 64);
  v30 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v31 = *(_QWORD *)(v3 + 56);
  if (v30 + 16 >= v31)
    v30 = 0;
  if (v28 <= 0x10)
    v28 = 16;
  v32 = v30 + v28;
  if (v31 <= v32)
    v32 = 0;
  *(_QWORD *)(v3 + 72) = v32;
  v33 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
  do
    __ldaxr(v33);
  while (__stlxr(v32, v33));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, (uint64_t **)(v3 + 8));
  v34 = v65;
  v35 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v35 = 781;
  *(_QWORD *)(v35 + 8) = v4;
  *(_QWORD *)(v35 + 528) = v35 + 16;
  *(_QWORD *)(v35 + 536) = v35 + 16;
  *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v35 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
  v69 = (IPC::Encoder *)v35;
  IPC::ArgumentCoder<WebKit::WebGPU::ShaderModuleDescriptor,void>::encode((IPC::Encoder *)v35, v63);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v35, (uint64_t *)&v62);
  v3 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v69, 1, 0);
  v37 = v69;
  v69 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v36);
    WTF::fastFree(v38, v39);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v65);
  if ((_DWORD)v3)
    goto LABEL_50;
LABEL_51:
  v41 = *(_QWORD *)(a1 + 168);
  v4 = (uint64_t)v62;
  v42 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v42 + 8) = 1;
  *(_QWORD *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 24) = 0;
  *(_QWORD *)v42 = off_1E34E4E70;
  *(_QWORD *)(v42 + 32) = v4;
  ++*(_DWORD *)(v41 + 8);
  *(_QWORD *)(v42 + 40) = v41;
  ++*(_DWORD *)(a1 + 8);
  *(_QWORD *)(v42 + 48) = a1;
  if (!v64)
    goto LABEL_86;
  v40 = v42;
  v43 = v63[0];
  v63[0] = 0;
  *(_QWORD *)(v42 + 24) = v43;
  WebKit::WebGPU::RemoteShaderModuleProxy::setLabelInternal((WebKit::WebGPU::RemoteShaderModuleProxy *)v42, (const WTF::String *)(v42 + 24));
LABEL_53:
  *a3 = v40;
  return std::__optional_destruct_base<WebKit::WebGPU::ShaderModuleDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createComputePipeline@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  WTF::ApproximateTime *v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  unsigned int v60;
  WTF::ApproximateTime *v61;
  uint64_t v62[7];
  char v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 168), a2, (uint64_t)v62);
  if (!v63)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v7);
  }
  v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v61 = v8;
  if (!v63)
    goto LABEL_86;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v4 = *(_QWORD *)(a1 + 152);
  WTF::ApproximateTime::now(v8);
  v10 = v9 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v9 + 30.0);
    if (!(_BYTE)v70)
      goto LABEL_50;
    v44 = v68;
    v45 = v69;
    v46 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v68;
    if (v46 < v68)
    {
      v49 = 0;
      v48 = v69;
    }
    else
    {
      v48 = 0;
      if (v47 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v49 = 0;
      }
      else
      {
        v49 = 0;
        if (v47 + 2 <= v69)
        {
          *(_WORD *)(v68 + v47) = 2822;
          v48 = v45;
          v49 = v47 + 2;
        }
      }
    }
    v50 = (_QWORD *)((v44 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v50 >= v44 + v49)
    {
      v49 = (unint64_t)v50 - v44 + 8;
      if ((unint64_t)v50 - v44 > 0xFFFFFFFFFFFFFFF7 || v49 > v48)
        goto LABEL_50;
      *v50 = v4;
    }
    if (!v48)
    {
LABEL_50:
      v39 = 0;
      goto LABEL_53;
    }
    v52 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v53 = *(_QWORD *)(v3 + 56);
    if (v52 + 16 >= v53)
      v52 = 0;
    if (v49 <= 0x10)
      v49 = 16;
    v54 = v52 + v49;
    if (v53 <= v54)
      v55 = 0;
    else
      v55 = v54;
    *(_QWORD *)(v3 + 72) = v55;
    v56 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v55, v56));
    v58 = *(_DWORD *)(v3 + 108);
    if (v57 == 0x80000000 || v58 != 0)
    {
      v60 = v58 + 1;
      *(_DWORD *)(v3 + 108) = v60;
      if (v60 >= *(_DWORD *)(v3 + 104))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
    }
    *(_QWORD *)(v3 + 48) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v65, v10);
  if (!v67)
    goto LABEL_50;
  v68 = v65;
  v69 = v66;
  v70 = 0;
  v11 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v12 = v11 >= v65;
  v13 = v11 - v65;
  if (v12)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v66)
      goto LABEL_87;
    *(_WORD *)(v65 + v13) = 773;
    v70 = v13 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode(&v68, v62);
    v15 = v70;
    v16 = (_QWORD *)((v68 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v68 + v70)
    {
      v15 = (unint64_t)v16 - v68 + 8;
      if ((unint64_t)v16 - v68 > 0xFFFFFFFFFFFFFFF7 || v15 > v69)
        goto LABEL_34;
      *v16 = v61;
      v70 = v15;
    }
    if (v69)
    {
      v18 = *(_QWORD *)(v3 + 64);
      v19 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_QWORD *)(v3 + 56);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v21 = v19 + v15;
      if (v20 <= v21)
        v22 = 0;
      else
        v22 = v21;
      *(_QWORD *)(v3 + 72) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      if (v24 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_51;
    }
LABEL_34:
    if (v67)
      break;
LABEL_86:
    __break(1u);
LABEL_87:
    v69 = 0;
  }
  v25 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - v65;
  if (v25 < v65)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v66)
    {
      *(_WORD *)(v65 + v26) = 2821;
      v27 = v26 + 2;
    }
  }
  v28 = *(_QWORD *)(v3 + 64);
  v29 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v3 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v27 <= 0x10)
    v27 = 16;
  v31 = v29 + v27;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v3 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
  do
    __ldaxr(v32);
  while (__stlxr(v31, v32));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)(v3 + 8));
  v33 = v64;
  v34 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v34 = 773;
  *(_QWORD *)(v34 + 8) = v4;
  *(_QWORD *)(v34 + 528) = v34 + 16;
  *(_QWORD *)(v34 + 536) = v34 + 16;
  *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v34 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
  v68 = v34;
  IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode((IPC::Encoder *)v34, v62);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v34, (uint64_t *)&v61);
  v3 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v68, 1, 0);
  v36 = (IPC::Encoder *)v68;
  v68 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v35);
    WTF::fastFree(v37, v38);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v64);
  if ((_DWORD)v3)
    goto LABEL_50;
LABEL_51:
  v40 = *(_QWORD *)(a1 + 168);
  v4 = (uint64_t)v61;
  v41 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(v41 + 16) = 0;
  *(_DWORD *)(v41 + 8) = 1;
  *(_QWORD *)v41 = off_1E34E3E08;
  *(_QWORD *)(v41 + 24) = v4;
  ++*(_DWORD *)(v40 + 8);
  *(_QWORD *)(v41 + 32) = v40;
  ++*(_DWORD *)(a1 + 8);
  *(_QWORD *)(v41 + 40) = a1;
  if (!v63)
    goto LABEL_86;
  v39 = v41;
  v42 = v62[0];
  v62[0] = 0;
  *(_QWORD *)(v41 + 16) = v42;
  WebKit::WebGPU::RemoteComputePipelineProxy::setLabelInternal((WebKit::WebGPU::RemoteComputePipelineProxy *)v41, (const WTF::String *)(v41 + 16));
LABEL_53:
  *a3 = v39;
  return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createRenderPipeline@<X0>(WebKit::WebGPU::ConvertToBackingContext **this@<X0>, const WebCore::WebGPU::RenderPipelineDescriptor *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  WTF::ApproximateTime *v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WebKit::WebGPU::ConvertToBackingContext *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  unsigned int v60;
  WTF::ApproximateTime *v61;
  uint64_t v62[26];
  char v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(this[21], a2, (uint64_t)v62);
  if (!v63)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v7);
  }
  v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v61 = v8;
  if (!v63)
    goto LABEL_86;
  v3 = *(_QWORD *)(*((_QWORD *)this[22] + 12) + 96);
  v4 = (uint64_t)this[19];
  WTF::ApproximateTime::now(v8);
  v10 = v9 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v9 + 30.0);
    if (!(_BYTE)v70)
      goto LABEL_50;
    v44 = v68;
    v45 = v69;
    v46 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v68;
    if (v46 < v68)
    {
      v49 = 0;
      v48 = v69;
    }
    else
    {
      v48 = 0;
      if (v47 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v49 = 0;
      }
      else
      {
        v49 = 0;
        if (v47 + 2 <= v69)
        {
          *(_WORD *)(v68 + v47) = 2822;
          v48 = v45;
          v49 = v47 + 2;
        }
      }
    }
    v50 = (_QWORD *)((v44 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v50 >= v44 + v49)
    {
      v49 = (unint64_t)v50 - v44 + 8;
      if ((unint64_t)v50 - v44 > 0xFFFFFFFFFFFFFFF7 || v49 > v48)
        goto LABEL_50;
      *v50 = v4;
    }
    if (!v48)
    {
LABEL_50:
      v39 = 0;
      goto LABEL_53;
    }
    v52 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v53 = *(_QWORD *)(v3 + 56);
    if (v52 + 16 >= v53)
      v52 = 0;
    if (v49 <= 0x10)
      v49 = 16;
    v54 = v52 + v49;
    if (v53 <= v54)
      v55 = 0;
    else
      v55 = v54;
    *(_QWORD *)(v3 + 72) = v55;
    v56 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v55, v56));
    v58 = *(_DWORD *)(v3 + 108);
    if (v57 == 0x80000000 || v58 != 0)
    {
      v60 = v58 + 1;
      *(_DWORD *)(v3 + 108) = v60;
      if (v60 >= *(_DWORD *)(v3 + 104))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
    }
    *(_QWORD *)(v3 + 48) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v65, v10);
  if (!v67)
    goto LABEL_50;
  v68 = v65;
  v69 = v66;
  v70 = 0;
  v11 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v12 = v11 >= v65;
  v13 = v11 - v65;
  if (v12)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v66)
      goto LABEL_87;
    *(_WORD *)(v65 + v13) = 778;
    v70 = v13 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode((WTF *)&v68, (uint64_t)v62);
    v15 = v70;
    v16 = (_QWORD *)((v68 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v68 + v70)
    {
      v15 = (unint64_t)v16 - v68 + 8;
      if ((unint64_t)v16 - v68 > 0xFFFFFFFFFFFFFFF7 || v15 > v69)
        goto LABEL_34;
      *v16 = v61;
      v70 = v15;
    }
    if (v69)
    {
      v18 = *(_QWORD *)(v3 + 64);
      v19 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_QWORD *)(v3 + 56);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v21 = v19 + v15;
      if (v20 <= v21)
        v22 = 0;
      else
        v22 = v21;
      *(_QWORD *)(v3 + 72) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      if (v24 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_51;
    }
LABEL_34:
    if (v67)
      break;
LABEL_86:
    __break(1u);
LABEL_87:
    v69 = 0;
  }
  v25 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - v65;
  if (v25 < v65)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v66)
    {
      *(_WORD *)(v65 + v26) = 2821;
      v27 = v26 + 2;
    }
  }
  v28 = *(_QWORD *)(v3 + 64);
  v29 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v3 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v27 <= 0x10)
    v27 = 16;
  v31 = v29 + v27;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v3 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
  do
    __ldaxr(v32);
  while (__stlxr(v31, v32));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)(v3 + 8));
  v33 = v64;
  v34 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v34 = 778;
  *(_QWORD *)(v34 + 8) = v4;
  *(_QWORD *)(v34 + 528) = v34 + 16;
  *(_QWORD *)(v34 + 536) = v34 + 16;
  *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v34 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
  v68 = v34;
  IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode((IPC::Encoder *)v34, v62);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v34, (uint64_t *)&v61);
  v3 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v68, 1, 0);
  v36 = (IPC::Encoder *)v68;
  v68 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v35);
    WTF::fastFree(v37, v38);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v64);
  if ((_DWORD)v3)
    goto LABEL_50;
LABEL_51:
  v40 = this[21];
  v4 = (uint64_t)v61;
  v41 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(v41 + 16) = 0;
  *(_DWORD *)(v41 + 8) = 1;
  *(_QWORD *)v41 = off_1E34E4E18;
  *(_QWORD *)(v41 + 24) = v4;
  ++*((_DWORD *)v40 + 2);
  *(_QWORD *)(v41 + 32) = v40;
  ++*((_DWORD *)this + 2);
  *(_QWORD *)(v41 + 40) = this;
  if (!v63)
    goto LABEL_86;
  v39 = v41;
  v42 = v62[0];
  v62[0] = 0;
  *(_QWORD *)(v41 + 16) = v42;
  WebKit::WebGPU::RemoteRenderPipelineProxy::setLabelInternal((WebKit::WebGPU::RemoteRenderPipelineProxy *)v41, (const WTF::String *)(v41 + 16));
LABEL_53:
  *a3 = v39;
  return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WTF::ApproximateTime *v7;
  WTF::ApproximateTime *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  double v11;
  double v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  void *v44;
  WTF::RunLoop *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  IPC::Encoder *v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v74;
  WTF::ApproximateTime *v75;
  uint64_t v76[7];
  char v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[2];
  os_unfair_lock_s *v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  char v85;
  WTF::StringImpl *v86;
  unint64_t v87;
  unint64_t v88;

  v6 = a1;
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 168), a2, (uint64_t)v76);
  if (!v77)
  {
    v86 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v33 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v33 + 16))(v33, &v86, &v83);
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v83;
    v83 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v13);
      else
        *(_DWORD *)v34 -= 2;
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*((_DWORD *)v56 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v56 + 8))(v56);
      else
        --*((_DWORD *)v56 + 2);
    }
    return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v13);
  }
  v7 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v75 = v7;
  if (!v77)
    goto LABEL_111;
  v8 = v7;
  v9 = *a3;
  *a3 = 0;
  ++*(_DWORD *)(v6 + 8);
  v10 = (WTF::StringImpl *)v76[0];
  v76[0] = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 176) + 96) + 96);
  v4 = *(_QWORD *)(v6 + 152);
  WTF::ApproximateTime::now(v7);
  v12 = v11 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v86, v11 + 30.0);
    if (!(_BYTE)v88)
      goto LABEL_63;
    v58 = v86;
    v59 = v87;
    v60 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v61 = v60 - (_QWORD)v86;
    if (v60 < (unint64_t)v86)
    {
      v63 = 0;
      v62 = v87;
    }
    else
    {
      v62 = 0;
      if (v61 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v63 = 0;
      }
      else
      {
        v63 = 0;
        if (v61 + 2 <= v87)
        {
          *(_WORD *)((char *)v86 + v61) = 2822;
          v62 = v59;
          v63 = v61 + 2;
        }
      }
    }
    v64 = (char *)(((unint64_t)v58 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v64 >= (char *)v58 + v63)
    {
      v63 = v64 - (char *)v58 + 8;
      if ((unint64_t)(v64 - (char *)v58) > 0xFFFFFFFFFFFFFFF7 || v63 > v62)
        goto LABEL_63;
      *(_QWORD *)v64 = v4;
    }
    if (!v62)
      goto LABEL_63;
    v66 = *(_QWORD *)(v3 + 64);
    v67 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v68 = *(_QWORD *)(v3 + 56);
    if (v67 + 16 >= v68)
      v67 = 0;
    if (v63 <= 0x10)
      v63 = 16;
    v69 = v67 + v63;
    if (v68 <= v69)
      v69 = 0;
    *(_QWORD *)(v3 + 72) = v69;
    v70 = (unint64_t *)(*(_QWORD *)(v66 + 16) + 128);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v69, v70));
    v72 = *(_DWORD *)(v3 + 108);
    if (v71 == 0x80000000 || v72 != 0)
    {
      v74 = v72 + 1;
      *(_DWORD *)(v3 + 108) = v74;
      if (v74 >= *(_DWORD *)(v3 + 104))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
    }
    *(_QWORD *)(v3 + 48) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v83, v12);
  if (!v85)
    goto LABEL_63;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v82, (uint64_t **)(v3 + 8));
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v14 = &off_1E34E49D8;
  v14[1] = v8;
  v14[2] = v9;
  v14[3] = v6;
  v14[4] = v10;
  v81[0] = (uint64_t)v14;
  v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v81[1] = v6;
  v80 = v6;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v82, v81);
  if (!v85)
    goto LABEL_111;
  v86 = v83;
  v87 = v84;
  v88 = 0;
  v15 = ((unint64_t)v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 >= (unint64_t)v83;
  v17 = v15 - (_QWORD)v83;
  if (v16)
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v84)
      goto LABEL_112;
    *(_WORD *)((char *)v83 + v17) = 774;
    v88 = v17 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode(&v86, v76);
    v19 = v87;
    v18 = v88;
    v20 = v86;
    v21 = ((unint64_t)v86 + v88 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = v21 - ((_QWORD)v86 + v88);
    if (v21 >= (unint64_t)v86 + v88)
    {
      v23 = v21 - (_QWORD)v86;
      if (v22 + v88 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > v87)
      {
        v19 = 0;
        v87 = 0;
      }
      else
      {
        *(_QWORD *)((char *)v86 + v23) = v75;
        v88 = v23 + 8;
        v20 = v86;
        v19 = v87;
        v18 = v23 + 8;
      }
    }
    v24 = (char *)(((unint64_t)v20 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v24 >= (char *)v20 + v18)
    {
      v25 = v24 - (char *)v20;
      if ((unint64_t)(v24 - (char *)v20) > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_37;
      v18 = v25 + 8;
      if (v25 + 8 > v19)
        goto LABEL_37;
      *(_QWORD *)v24 = v6;
      v88 = v25 + 8;
      v19 = v87;
    }
    if (v19)
    {
      v26 = *(_QWORD *)(v3 + 64);
      v27 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v28 = *(_QWORD *)(v3 + 56);
      if (v27 + 16 >= v28)
        v27 = 0;
      if (v18 <= 0x10)
        v18 = 16;
      v29 = v27 + v18;
      if (v28 <= v29)
        v30 = 0;
      else
        v30 = v29;
      *(_QWORD *)(v3 + 72) = v30;
      v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v30, v31));
      if (v32 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_60;
    }
LABEL_37:
    if (v85)
      break;
LABEL_111:
    __break(1u);
LABEL_112:
    v87 = 0;
  }
  v35 = ((unint64_t)v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v36 = v35 - (_QWORD)v83;
  if (v35 < (unint64_t)v83)
  {
    v37 = 0;
  }
  else
  {
    v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v84)
    {
      *(_WORD *)((char *)v83 + v36) = 2821;
      v37 = v36 + 2;
    }
  }
  v38 = *(_QWORD *)(v3 + 64);
  v39 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v40 = *(_QWORD *)(v3 + 56);
  if (v39 + 16 >= v40)
    v39 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v41 = v39 + v37;
  if (v40 <= v41)
    v41 = 0;
  *(_QWORD *)(v3 + 72) = v41;
  v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
  do
    __ldaxr(v42);
  while (__stlxr(v41, v42));
  *(_DWORD *)(v3 + 108) = 0;
  v43 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v43 = 774;
  *(_QWORD *)(v43 + 8) = v4;
  *(_QWORD *)(v43 + 528) = v43 + 16;
  *(_QWORD *)(v43 + 536) = v43 + 16;
  *(_OWORD *)(v43 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v43 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v43);
  v86 = (WTF::StringImpl *)v43;
  IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode((IPC::Encoder *)v43, v76);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v43, (uint64_t *)&v75);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v43, &v80);
  if (IPC::Connection::sendMessageImpl((uint64_t)v82, (uint64_t *)&v86, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v82, v80, &v79);
    if (v79)
    {
      v46 = (unsigned int *)(WTF::RunLoop::main(v45) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
      v48 = v79;
      v79 = 0;
      v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v49 = &off_1E34E4A00;
      v49[1] = v48;
      v78 = v49;
      WTF::RunLoop::dispatch();
      v50 = v78;
      v78 = 0;
      if (v50)
        (*(void (**)(_QWORD *))(*v50 + 8))(v50);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v46);
      v51 = v79;
      v79 = 0;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  v52 = v86;
  v86 = 0;
  if (v52)
  {
    IPC::Encoder::~Encoder(v52, v44);
    WTF::fastFree(v53, v54);
  }
LABEL_60:
  v55 = v81[0];
  v81[0] = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v82);
  v6 = 0;
  v9 = 0;
  v10 = 0;
LABEL_63:
  if (!v10)
  {
LABEL_66:
    if (v6)
      goto LABEL_69;
LABEL_71:
    if (!v9)
      return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v13);
LABEL_72:
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v13);
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_66;
  }
  WTF::StringImpl::destroy(v10, v13);
  if (!v6)
    goto LABEL_71;
LABEL_69:
  if (*(_DWORD *)(v6 + 8) != 1)
  {
    --*(_DWORD *)(v6 + 8);
    goto LABEL_71;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v9)
    goto LABEL_72;
  return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v13);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(uint64_t a1, const WebCore::WebGPU::RenderPipelineDescriptor *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WTF::ApproximateTime *v7;
  WTF::ApproximateTime *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  double v11;
  double v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  void *v44;
  WTF::RunLoop *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  IPC::Encoder *v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  _DWORD *v56;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v74;
  WTF::ApproximateTime *v75;
  uint64_t v76[26];
  char v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[2];
  os_unfair_lock_s *v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;

  v6 = a1;
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(WebKit::WebGPU::ConvertToBackingContext **)(a1 + 168), a2, (uint64_t)v76);
  if (!v77)
  {
    v86 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v33 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v33 + 16))(v33, &v86, &v83);
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = (WTF::StringImpl *)v83;
    v83 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v13);
      else
        *(_DWORD *)v34 -= 2;
    }
    v56 = (_DWORD *)v86;
    v86 = 0;
    if (v56)
    {
      if (v56[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
      else
        --v56[2];
    }
    return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v13);
  }
  v7 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v75 = v7;
  if (!v77)
    goto LABEL_111;
  v8 = v7;
  v9 = *a3;
  *a3 = 0;
  ++*(_DWORD *)(v6 + 8);
  v10 = (WTF::StringImpl *)v76[0];
  v76[0] = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 176) + 96) + 96);
  v4 = *(_QWORD *)(v6 + 152);
  WTF::ApproximateTime::now(v7);
  v12 = v11 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v86, v11 + 30.0);
    if (!(_BYTE)v88)
      goto LABEL_63;
    v58 = v86;
    v59 = v87;
    v60 = (v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v61 = v60 - v86;
    if (v60 < v86)
    {
      v63 = 0;
      v62 = v87;
    }
    else
    {
      v62 = 0;
      if (v61 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v63 = 0;
      }
      else
      {
        v63 = 0;
        if (v61 + 2 <= v87)
        {
          *(_WORD *)(v86 + v61) = 2822;
          v62 = v59;
          v63 = v61 + 2;
        }
      }
    }
    v64 = (_QWORD *)((v58 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v64 >= v58 + v63)
    {
      v63 = (unint64_t)v64 - v58 + 8;
      if ((unint64_t)v64 - v58 > 0xFFFFFFFFFFFFFFF7 || v63 > v62)
        goto LABEL_63;
      *v64 = v4;
    }
    if (!v62)
      goto LABEL_63;
    v66 = *(_QWORD *)(v3 + 64);
    v67 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v68 = *(_QWORD *)(v3 + 56);
    if (v67 + 16 >= v68)
      v67 = 0;
    if (v63 <= 0x10)
      v63 = 16;
    v69 = v67 + v63;
    if (v68 <= v69)
      v69 = 0;
    *(_QWORD *)(v3 + 72) = v69;
    v70 = (unint64_t *)(*(_QWORD *)(v66 + 16) + 128);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v69, v70));
    v72 = *(_DWORD *)(v3 + 108);
    if (v71 == 0x80000000 || v72 != 0)
    {
      v74 = v72 + 1;
      *(_DWORD *)(v3 + 108) = v74;
      if (v74 >= *(_DWORD *)(v3 + 104))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
    }
    *(_QWORD *)(v3 + 48) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v83, v12);
  if (!v85)
    goto LABEL_63;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v82, (uint64_t **)(v3 + 8));
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v14 = &off_1E34E4A28;
  v14[1] = v8;
  v14[2] = v9;
  v14[3] = v6;
  v14[4] = v10;
  v81[0] = (uint64_t)v14;
  v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v81[1] = v6;
  v80 = v6;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v82, v81);
  if (!v85)
    goto LABEL_111;
  v86 = v83;
  v87 = v84;
  v88 = 0;
  v15 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 >= v83;
  v17 = v15 - v83;
  if (v16)
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v84)
      goto LABEL_112;
    *(_WORD *)(v83 + v17) = 779;
    v88 = v17 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode((WTF *)&v86, (uint64_t)v76);
    v19 = v87;
    v18 = v88;
    v20 = v86;
    v21 = (v86 + v88 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = v21 - (v86 + v88);
    if (v21 >= v86 + v88)
    {
      v23 = v21 - v86;
      if (v22 + v88 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > v87)
      {
        v19 = 0;
        v87 = 0;
      }
      else
      {
        *(_QWORD *)(v86 + v23) = v75;
        v88 = v23 + 8;
        v20 = v86;
        v19 = v87;
        v18 = v23 + 8;
      }
    }
    v24 = (_QWORD *)((v20 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v24 >= v20 + v18)
    {
      v25 = (char *)v24 - v20;
      if ((unint64_t)v24 - v20 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_37;
      v18 = (unint64_t)(v25 + 8);
      if ((unint64_t)(v25 + 8) > v19)
        goto LABEL_37;
      *v24 = v6;
      v88 = (unint64_t)(v25 + 8);
      v19 = v87;
    }
    if (v19)
    {
      v26 = *(_QWORD *)(v3 + 64);
      v27 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v28 = *(_QWORD *)(v3 + 56);
      if (v27 + 16 >= v28)
        v27 = 0;
      if (v18 <= 0x10)
        v18 = 16;
      v29 = v27 + v18;
      if (v28 <= v29)
        v30 = 0;
      else
        v30 = v29;
      *(_QWORD *)(v3 + 72) = v30;
      v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v30, v31));
      if (v32 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_60;
    }
LABEL_37:
    if (v85)
      break;
LABEL_111:
    __break(1u);
LABEL_112:
    v87 = 0;
  }
  v35 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v36 = v35 - v83;
  if (v35 < v83)
  {
    v37 = 0;
  }
  else
  {
    v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v84)
    {
      *(_WORD *)(v83 + v36) = 2821;
      v37 = v36 + 2;
    }
  }
  v38 = *(_QWORD *)(v3 + 64);
  v39 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v40 = *(_QWORD *)(v3 + 56);
  if (v39 + 16 >= v40)
    v39 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v41 = v39 + v37;
  if (v40 <= v41)
    v41 = 0;
  *(_QWORD *)(v3 + 72) = v41;
  v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
  do
    __ldaxr(v42);
  while (__stlxr(v41, v42));
  *(_DWORD *)(v3 + 108) = 0;
  v43 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v43 = 779;
  *(_QWORD *)(v43 + 8) = v4;
  *(_QWORD *)(v43 + 528) = v43 + 16;
  *(_QWORD *)(v43 + 536) = v43 + 16;
  *(_OWORD *)(v43 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v43 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v43);
  v86 = v43;
  IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode((IPC::Encoder *)v43, v76);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v43, (uint64_t *)&v75);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v43, &v80);
  if (IPC::Connection::sendMessageImpl((uint64_t)v82, (uint64_t *)&v86, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v82, v80, &v79);
    if (v79)
    {
      v46 = (unsigned int *)(WTF::RunLoop::main(v45) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
      v48 = v79;
      v79 = 0;
      v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v49 = &off_1E34E4A50;
      v49[1] = v48;
      v78 = v49;
      WTF::RunLoop::dispatch();
      v50 = v78;
      v78 = 0;
      if (v50)
        (*(void (**)(_QWORD *))(*v50 + 8))(v50);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v46);
      v51 = v79;
      v79 = 0;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  v52 = (IPC::Encoder *)v86;
  v86 = 0;
  if (v52)
  {
    IPC::Encoder::~Encoder(v52, v44);
    WTF::fastFree(v53, v54);
  }
LABEL_60:
  v55 = v81[0];
  v81[0] = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v82);
  v6 = 0;
  v9 = 0;
  v10 = 0;
LABEL_63:
  if (!v10)
  {
LABEL_66:
    if (v6)
      goto LABEL_69;
LABEL_71:
    if (!v9)
      return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v13);
LABEL_72:
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v13);
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_66;
  }
  WTF::StringImpl::destroy(v10, v13);
  if (!v6)
    goto LABEL_71;
LABEL_69:
  if (*(_DWORD *)(v6 + 8) != 1)
  {
    --*(_DWORD *)(v6 + 8);
    goto LABEL_71;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v9)
    goto LABEL_72;
  return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v13);
}

_DWORD *WebKit::WebGPU::RemoteDeviceProxy::createCommandEncoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t *v6;
  WTF::ApproximateTime *v7;
  double v8;
  double v9;
  _DWORD *result;
  WTF::StringImpl *v11;
  IPC::Encoder *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  _BYTE *v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  IPC::Encoder *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v66;
  unint64_t v67;
  void *v68;
  WTF::ApproximateTime *v69;
  WTF::StringImpl *v70;
  unsigned __int8 v71;
  uint64_t *v72;
  IPC::Encoder *v73;
  unint64_t v74;
  char v75;
  IPC::Encoder *v76;
  unint64_t v77;
  unint64_t v78;

  LOBYTE(v70) = 0;
  v71 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v5 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v5 += 2;
    v70 = v5;
    v71 = 1;
  }
  v69 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v6 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v7 = *(WTF::ApproximateTime **)(a1 + 152);
  WTF::ApproximateTime::now(v69);
  v9 = v8 + 30.0;
  if ((WTF::ApproximateTime *)v6[6] == v7)
    goto LABEL_6;
  result = (_DWORD *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 7), &v76, v8 + 30.0);
  if (!(_BYTE)v78)
    goto LABEL_60;
  v52 = v76;
  v51 = v77;
  v53 = ((unint64_t)v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = v53 - (_QWORD)v76;
  if (v53 < (unint64_t)v76)
    goto LABEL_112;
  v55 = v54 + 2;
  if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v77)
  {
    v51 = 0;
LABEL_112:
    v55 = 0;
    goto LABEL_76;
  }
  *(_WORD *)((char *)v76 + v54) = 2822;
LABEL_76:
  v57 = (char *)(((unint64_t)v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v57 >= (char *)v52 + v55)
  {
    v55 = v57 - (char *)v52 + 8;
    if ((unint64_t)(v57 - (char *)v52) > 0xFFFFFFFFFFFFFFF7 || v55 > v51)
      goto LABEL_60;
    *(_QWORD *)v57 = v7;
  }
  if (!v51)
    goto LABEL_60;
  v59 = (v6[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v60 = v6[7];
  if (v59 + 16 >= v60)
    v59 = 0;
  if (v55 <= 0x10)
    v55 = 16;
  v61 = v59 + v55;
  if (v60 <= v61)
    v61 = 0;
  v6[9] = v61;
  v62 = (unint64_t *)(*(_QWORD *)(v6[8] + 16) + 128);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v61, v62));
  v64 = *((_DWORD *)v6 + 27);
  if (v63 == 0x80000000 || v64 != 0)
  {
    v66 = v64 + 1;
    *((_DWORD *)v6 + 27) = v66;
    if (v66 >= *((_DWORD *)v6 + 26))
    {
      if (*((_BYTE *)v6 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
      *((_DWORD *)v6 + 27) = 0;
    }
  }
  v6[6] = (uint64_t)v7;
LABEL_6:
  result = (_DWORD *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 7), &v73, v9);
  if (v75)
  {
    v12 = v73;
    v13 = v74;
    v76 = v73;
    v77 = v74;
    v78 = 0;
    v14 = ((unint64_t)v73 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v15 = v14 - (_QWORD)v73;
    if (v14 < (unint64_t)v73)
      goto LABEL_114;
    v16 = v15 + 2;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v74)
      goto LABEL_108;
    *(_WORD *)((char *)v73 + v15) = 772;
    v78 = v15 + 2;
    while (1)
    {
      if (v71)
      {
        if (v16 >= v13)
        {
          v77 = 0;
        }
        else
        {
          *((_BYTE *)v12 + v16) = 1;
          v78 = v16 + 1;
          if (!v71)
            goto LABEL_113;
        }
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v76, (uint64_t *)&v70);
        v13 = v77;
        v16 = v78;
        v12 = v76;
      }
      else if (v16 >= v13)
      {
        v13 = 0;
        v77 = 0;
      }
      else
      {
        *((_BYTE *)v12 + v16++) = 0;
        v78 = v16;
      }
      v18 = (char *)(((unint64_t)v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v18 < (char *)v12 + v16)
        goto LABEL_23;
      v19 = v18 - (char *)v12;
      if ((unint64_t)(v18 - (char *)v12) <= 0xFFFFFFFFFFFFFFF7)
      {
        v16 = v19 + 8;
        if (v19 + 8 <= v13)
          break;
      }
LABEL_38:
      if (!v75)
        goto LABEL_107;
      v27 = ((unint64_t)v73 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v28 = v27 - (_QWORD)v73;
      if (v27 < (unint64_t)v73)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v74)
        {
          *(_WORD *)((char *)v73 + v28) = 2821;
          v29 = v28 + 2;
        }
      }
      v30 = v6[8];
      v31 = (v6[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
      v32 = v6[7];
      if (v31 + 16 >= v32)
        v31 = 0;
      if (v29 <= 0x10)
        v29 = 16;
      v33 = v31 + v29;
      if (v32 <= v33)
        v33 = 0;
      v6[9] = v33;
      v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
      do
        __ldaxr(v34);
      while (__stlxr(v33, v34));
      *((_DWORD *)v6 + 27) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v72, (uint64_t **)v6 + 1);
      v6 = v72;
      v35 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v35 = 772;
      *(_QWORD *)(v35 + 8) = v7;
      *(_QWORD *)(v35 + 528) = v35 + 16;
      *(_QWORD *)(v35 + 536) = v35 + 16;
      *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v35 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
      v76 = (IPC::Encoder *)v35;
      v36 = v71;
      v37 = *(_QWORD *)(v35 + 544);
      v38 = v37 + 1;
      v39 = *(_QWORD *)(v35 + 552);
      if (v39 < v37 + 1)
      {
        v67 = (2 * v39 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v7 = (WTF::ApproximateTime *)v67;
          v67 *= 2;
        }
        while ((unint64_t)v7 < v38);
        result = mmap(0, (size_t)v7, 3, 4098, -1, 0);
        if (result == (_DWORD *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v40 = result;
        memcpy(result, *(const void **)(v35 + 528), *(_QWORD *)(v35 + 544));
        v68 = *(void **)(v35 + 528);
        if (v68 != (void *)(v35 + 16))
          munmap(v68, *(_QWORD *)(v35 + 552));
        *(_QWORD *)(v35 + 528) = v40;
        *(_QWORD *)(v35 + 552) = v7;
        v41 = *(_QWORD *)(v35 + 544);
      }
      else
      {
        v40 = *(_DWORD **)(v35 + 528);
        v41 = *(_QWORD *)(v35 + 544);
      }
      bzero((char *)v40 + v41, v37 - v41);
      *(_QWORD *)(v35 + 544) = v38;
      v42 = (_BYTE *)(*(_QWORD *)(v35 + 528) + v37);
      *(_QWORD *)(v35 + 536) = v42 + 1;
      if (v36)
      {
        *v42 = 1;
        if (v71)
        {
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v35, (uint64_t *)&v70);
          goto LABEL_57;
        }
LABEL_113:
        std::__throw_bad_optional_access[abi:sn180100]();
LABEL_114:
        v16 = 0;
      }
      else
      {
        *v42 = 0;
LABEL_57:
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v35, (uint64_t *)&v69);
        v6 = (uint64_t *)IPC::Connection::sendMessageImpl((uint64_t)v6, (uint64_t *)&v76, 1, 0);
        v44 = v76;
        v76 = 0;
        if (v44)
        {
          IPC::Encoder::~Encoder(v44, v43);
          WTF::fastFree(v45, v46);
        }
        result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v72);
        if ((_DWORD)v6)
          goto LABEL_60;
LABEL_61:
        v48 = *(_QWORD *)(a1 + 168);
        v7 = v69;
        v49 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)(v49 + 16) = 0;
        v12 = (IPC::Encoder *)off_1E34E3CC8;
        *(_DWORD *)(v49 + 8) = 1;
        *(_QWORD *)v49 = off_1E34E3CC8;
        *(_QWORD *)(v49 + 24) = v7;
        ++*(_DWORD *)(v48 + 8);
        *(_QWORD *)(v49 + 32) = v48;
        ++*(_DWORD *)(a1 + 8);
        *(_QWORD *)(v49 + 40) = a1;
        if (v71)
        {
          v47 = v49;
          v50 = v70;
          v70 = 0;
          *(_QWORD *)(v49 + 16) = v50;
          result = WebKit::WebGPU::RemoteCommandEncoderProxy::setLabelInternal((WebKit::WebGPU::RemoteCommandEncoderProxy *)v49, (const WTF::String *)(v49 + 16));
          goto LABEL_63;
        }
LABEL_107:
        __break(1u);
LABEL_108:
        v13 = 0;
        v16 = 0;
        v77 = 0;
      }
    }
    *(_QWORD *)v18 = v69;
    v78 = v19 + 8;
    v13 = v77;
LABEL_23:
    if (v13)
    {
      v20 = v6[8];
      v21 = (v6[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
      v22 = v6[7];
      if (v21 + 16 >= v22)
        v21 = 0;
      if (v16 <= 0x10)
        v16 = 16;
      v23 = v21 + v16;
      if (v22 <= v23)
        v24 = 0;
      else
        v24 = v23;
      v6[9] = v24;
      v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v24, v25));
      if (v26 == 0x80000000 || *((_DWORD *)v6 + 27))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
      goto LABEL_61;
    }
    goto LABEL_38;
  }
LABEL_60:
  v47 = 0;
LABEL_63:
  *a3 = v47;
  if (v71)
  {
    result = v70;
    v70 = 0;
    if (result)
    {
      if (*result == 2)
        return (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
      else
        *result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createRenderBundleEncoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v5;
  uint64_t v6;
  WTF::ApproximateTime *v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v43;
  IPC::Encoder *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unsigned int v58;
  WTF::ApproximateTime *v59;
  uint64_t v60[5];
  char v61;
  uint64_t *v62;
  IPC::Encoder *v63;
  unint64_t v64;
  char v65;
  IPC::Encoder *v66;
  unint64_t v67;
  unint64_t v68;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)v60);
  if (!v61)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::RenderBundleEncoderDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v60, v5);
  }
  v59 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v7 = *(WTF::ApproximateTime **)(a1 + 152);
  WTF::ApproximateTime::now(v59);
  v9 = v8 + 30.0;
  if (*(WTF::ApproximateTime **)(v6 + 48) == v7)
    goto LABEL_3;
  IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v66, v8 + 30.0);
  if (!(_BYTE)v68)
    goto LABEL_47;
  v44 = v66;
  v43 = v67;
  v45 = ((unint64_t)v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v46 = v45 - (_QWORD)v66;
  if (v45 < (unint64_t)v66)
    goto LABEL_87;
  v47 = v46 + 2;
  if (v46 > 0xFFFFFFFFFFFFFFFDLL || v47 > v67)
  {
    v43 = 0;
LABEL_87:
    v47 = 0;
    goto LABEL_59;
  }
  *(_WORD *)((char *)v66 + v46) = 2822;
LABEL_59:
  v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v49 >= (char *)v44 + v47)
  {
    v47 = v49 - (char *)v44 + 8;
    if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43)
      goto LABEL_47;
    *(_QWORD *)v49 = v7;
  }
  if (!v43)
  {
LABEL_47:
    v38 = 0;
    goto LABEL_50;
  }
  v51 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = *(_QWORD *)(v6 + 56);
  if (v51 + 16 >= v52)
    v51 = 0;
  if (v47 <= 0x10)
    v47 = 16;
  v53 = v51 + v47;
  if (v52 <= v53)
    v53 = 0;
  *(_QWORD *)(v6 + 72) = v53;
  v54 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 16) + 128);
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v53, v54));
  v56 = *(_DWORD *)(v6 + 108);
  if (v55 == 0x80000000 || v56 != 0)
  {
    v58 = v56 + 1;
    *(_DWORD *)(v6 + 108) = v58;
    if (v58 >= *(_DWORD *)(v6 + 104))
    {
      if (*(_BYTE *)(v6 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
      *(_DWORD *)(v6 + 108) = 0;
    }
  }
  *(_QWORD *)(v6 + 48) = v7;
LABEL_3:
  IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v63, v9);
  if (!v65)
    goto LABEL_47;
  v66 = v63;
  v67 = v64;
  v68 = 0;
  v10 = ((unint64_t)v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 >= (unint64_t)v63;
  v12 = v10 - (_QWORD)v63;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v64)
      goto LABEL_85;
    *(_WORD *)((char *)v63 + v12) = 777;
    v68 = v12 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::encode(&v66, (uint64_t)v60);
    v14 = v68;
    v15 = (char *)(((unint64_t)v66 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v15 >= (char *)v66 + v68)
    {
      v16 = v15 - (char *)v66;
      if ((unint64_t)(v15 - (char *)v66) > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_31;
      v14 = v16 + 8;
      if (v16 + 8 > v67)
        goto LABEL_31;
      *(_QWORD *)v15 = v59;
      v68 = v16 + 8;
    }
    if (v67)
    {
      v17 = *(_QWORD *)(v6 + 64);
      v18 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v19 = *(_QWORD *)(v6 + 56);
      if (v18 + 16 >= v19)
        v18 = 0;
      if (v14 <= 0x10)
        v14 = 16;
      v20 = v18 + v14;
      if (v19 <= v20)
        v21 = 0;
      else
        v21 = v20;
      *(_QWORD *)(v6 + 72) = v21;
      v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v21, v22));
      if (v23 == 0x80000000 || *(_DWORD *)(v6 + 108))
      {
        if (*(_BYTE *)(v6 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
        *(_DWORD *)(v6 + 108) = 0;
      }
      goto LABEL_48;
    }
LABEL_31:
    if (v65)
      break;
LABEL_84:
    __break(1u);
LABEL_85:
    v67 = 0;
  }
  v24 = ((unint64_t)v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v25 = v24 - (_QWORD)v63;
  if (v24 < (unint64_t)v63)
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v64)
    {
      *(_WORD *)((char *)v63 + v25) = 2821;
      v26 = v25 + 2;
    }
  }
  v27 = *(_QWORD *)(v6 + 64);
  v28 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v6 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v26 <= 0x10)
    v26 = 16;
  v30 = v28 + v26;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v6 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
  do
    __ldaxr(v31);
  while (__stlxr(v30, v31));
  *(_DWORD *)(v6 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v62, (uint64_t **)(v6 + 8));
  v32 = v62;
  v33 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v33 = 777;
  *(_QWORD *)(v33 + 8) = v7;
  *(_QWORD *)(v33 + 528) = v33 + 16;
  *(_QWORD *)(v33 + 536) = v33 + 16;
  *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v33 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
  v66 = (IPC::Encoder *)v33;
  IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::encode((IPC::Encoder *)v33, v60);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v33, (uint64_t *)&v59);
  v6 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v66, 1, 0);
  v35 = v66;
  v66 = 0;
  if (v35)
  {
    IPC::Encoder::~Encoder(v35, v34);
    WTF::fastFree(v36, v37);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v62);
  if ((_DWORD)v6)
    goto LABEL_47;
LABEL_48:
  v39 = *(_QWORD *)(a1 + 168);
  v7 = v59;
  v40 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(v40 + 16) = 0;
  *(_DWORD *)(v40 + 8) = 1;
  *(_QWORD *)v40 = off_1E34E4540;
  *(_QWORD *)(v40 + 24) = v7;
  ++*(_DWORD *)(v39 + 8);
  *(_QWORD *)(v40 + 32) = v39;
  ++*(_DWORD *)(a1 + 8);
  *(_QWORD *)(v40 + 40) = a1;
  if (!v61)
    goto LABEL_84;
  v38 = v40;
  v41 = v60[0];
  v60[0] = 0;
  *(_QWORD *)(v40 + 16) = v41;
  v66 = (IPC::Encoder *)(v40 + 16);
  WebKit::WebGPU::RemoteRenderBundleEncoderProxy::send<Messages::RemoteRenderBundleEncoder::SetLabel>(*(WTF::ApproximateTime **)(v40 + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 40) + 176) + 96) + 96), (uint64_t **)&v66);
LABEL_50:
  *a3 = v38;
  return std::__optional_destruct_base<WebKit::WebGPU::RenderBundleEncoderDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v60, v5);
}

WTF::StringImpl *WebKit::WebGPU::RemoteDeviceProxy::createQuerySet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::ApproximateTime *v8;
  double v9;
  double v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  IPC::Encoder *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v59;
  WTF::ApproximateTime *v60;
  WTF::StringImpl *v61[2];
  char v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  unint64_t v65;
  char v66;
  IPC::Encoder *v67;
  unint64_t v68;
  unint64_t v69;

  v5 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  v6 = (WTF::StringImpl *)(*(unsigned __int8 *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 12) << 32));
  v61[0] = v5;
  v61[1] = v6;
  v62 = 1;
  v60 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 96);
  v8 = *(WTF::ApproximateTime **)(a1 + 152);
  WTF::ApproximateTime::now(v60);
  v10 = v9 + 30.0;
  if (*(WTF::ApproximateTime **)(v7 + 48) == v8)
  {
LABEL_4:
    result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v64, v10);
    if (v66)
    {
      v67 = v64;
      v68 = v65;
      v69 = 0;
      v13 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = v13 >= (unint64_t)v64;
      v15 = v13 - (_QWORD)v64;
      if (v14)
      {
        if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v65)
          goto LABEL_87;
        *(_WORD *)((char *)v64 + v15) = 776;
        v69 = v15 + 2;
      }
      while (1)
      {
        IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::encode(&v67, (uint64_t)v61);
        v16 = v69;
        v17 = (char *)(((unint64_t)v67 + v69 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v17 >= (char *)v67 + v69)
        {
          v18 = v17 - (char *)v67;
          if ((unint64_t)(v17 - (char *)v67) > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_29;
          v16 = v18 + 8;
          if (v18 + 8 > v68)
            goto LABEL_29;
          *(_QWORD *)v17 = v60;
          v69 = v18 + 8;
        }
        if (v68)
        {
          v19 = *(_QWORD *)(v7 + 64);
          v20 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v21 = *(_QWORD *)(v7 + 56);
          if (v20 + 16 >= v21)
            v20 = 0;
          if (v16 <= 0x10)
            v16 = 16;
          v22 = v20 + v16;
          if (v21 <= v22)
            v23 = 0;
          else
            v23 = v22;
          *(_QWORD *)(v7 + 72) = v23;
          v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v23, v24));
          if (v25 == 0x80000000 || *(_DWORD *)(v7 + 108))
          {
            if (*(_BYTE *)(v7 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
            *(_DWORD *)(v7 + 108) = 0;
          }
          goto LABEL_46;
        }
LABEL_29:
        if (!v66)
          goto LABEL_86;
        v26 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = v26 - (_QWORD)v64;
        if (v26 < (unint64_t)v64)
        {
          v28 = 0;
        }
        else
        {
          v28 = 0;
          if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v65)
          {
            *(_WORD *)((char *)v64 + v27) = 2821;
            v28 = v27 + 2;
          }
        }
        v29 = *(_QWORD *)(v7 + 64);
        v30 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v31 = *(_QWORD *)(v7 + 56);
        if (v30 + 16 >= v31)
          v30 = 0;
        if (v28 <= 0x10)
          v28 = 16;
        v32 = v30 + v28;
        if (v31 <= v32)
          v32 = 0;
        *(_QWORD *)(v7 + 72) = v32;
        v33 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
        do
          __ldaxr(v33);
        while (__stlxr(v32, v33));
        *(_DWORD *)(v7 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)(v7 + 8));
        v34 = v63;
        v35 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v35 = 776;
        *(_QWORD *)(v35 + 8) = v8;
        *(_QWORD *)(v35 + 528) = v35 + 16;
        *(_QWORD *)(v35 + 536) = v35 + 16;
        *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v35 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
        v67 = (IPC::Encoder *)v35;
        IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::encode((IPC::Encoder *)v35, (uint64_t *)v61);
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v35, (uint64_t *)&v60);
        v7 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v67, 1, 0);
        v37 = v67;
        v67 = 0;
        if (v37)
        {
          IPC::Encoder::~Encoder(v37, v36);
          WTF::fastFree(v38, v39);
        }
        result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v63);
        if ((_DWORD)v7)
          goto LABEL_45;
LABEL_46:
        v41 = *(_QWORD *)(a1 + 168);
        v8 = v60;
        v42 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v42 + 8) = 1;
        *(_QWORD *)(v42 + 16) = 0;
        *(_QWORD *)(v42 + 24) = 0;
        *(_QWORD *)v42 = off_1E34E44B0;
        *(_QWORD *)(v42 + 32) = v8;
        ++*(_DWORD *)(v41 + 8);
        *(_QWORD *)(v42 + 40) = v41;
        ++*(_DWORD *)(a1 + 8);
        *(_QWORD *)(v42 + 48) = a1;
        if (v62)
        {
          v40 = v42;
          v43 = v61[0];
          v61[0] = 0;
          *(_QWORD *)(v42 + 24) = v43;
          v67 = (IPC::Encoder *)(v42 + 24);
          result = (WTF::StringImpl *)WebKit::WebGPU::RemoteQuerySetProxy::send<Messages::RemoteQuerySet::SetLabel>(*(WTF::ApproximateTime **)(v42 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 48) + 176) + 96) + 96), (uint64_t **)&v67);
          goto LABEL_48;
        }
LABEL_86:
        __break(1u);
LABEL_87:
        v68 = 0;
      }
    }
    goto LABEL_45;
  }
  result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v67, v9 + 30.0);
  if (!(_BYTE)v69)
    goto LABEL_45;
  v45 = v67;
  v44 = v68;
  v46 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = v46 - (_QWORD)v67;
  if (v46 >= (unint64_t)v67)
  {
    v48 = v47 + 2;
    if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v68)
    {
      *(_WORD *)((char *)v67 + v47) = 2822;
      goto LABEL_61;
    }
    v44 = 0;
  }
  v48 = 0;
LABEL_61:
  v50 = (char *)(((unint64_t)v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v50 >= (char *)v45 + v48)
  {
    v48 = v50 - (char *)v45 + 8;
    if ((unint64_t)(v50 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v48 > v44)
      goto LABEL_45;
    *(_QWORD *)v50 = v8;
  }
  if (v44)
  {
    v52 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v53 = *(_QWORD *)(v7 + 56);
    if (v52 + 16 >= v53)
      v52 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v54 = v52 + v48;
    if (v53 <= v54)
      v54 = 0;
    *(_QWORD *)(v7 + 72) = v54;
    v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 64) + 16) + 128);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v54, v55));
    v57 = *(_DWORD *)(v7 + 108);
    if (v56 == 0x80000000 || v57 != 0)
    {
      v59 = v57 + 1;
      *(_DWORD *)(v7 + 108) = v59;
      if (v59 >= *(_DWORD *)(v7 + 104))
      {
        if (*(_BYTE *)(v7 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
        *(_DWORD *)(v7 + 108) = 0;
      }
    }
    *(_QWORD *)(v7 + 48) = v8;
    goto LABEL_4;
  }
LABEL_45:
  v40 = 0;
LABEL_48:
  *a3 = v40;
  if (v62)
  {
    result = v61[0];
    v61[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteDeviceProxy::pushErrorScope(WTF::ApproximateTime *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  unint64_t v50;
  unsigned __int8 ***v51;
  uint64_t v52;
  _BYTE *v53;
  void *v54;
  IPC::Encoder *v55;
  WTF *v56;
  void *v57;
  unint64_t v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  unsigned __int8 ***__dst;
  size_t v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  IPC::Encoder *v68;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 22) + 96) + 96);
  v4 = *((_QWORD *)a1 + 19);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v4)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v65, v5 + 30.0);
  if (!v67)
    return result;
  v22 = v65;
  v21 = v66;
  v23 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v24 = v23 - v65;
  if (v23 < v65)
    goto LABEL_79;
  v25 = v24 + 2;
  if (v24 > 0xFFFFFFFFFFFFFFFDLL || v25 > v66)
  {
    v21 = 0;
LABEL_79:
    v25 = 0;
    goto LABEL_32;
  }
  *(_WORD *)(v65 + v24) = 2822;
LABEL_32:
  v27 = (_QWORD *)((v22 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v27 >= v22 + v25)
  {
    v25 = (unint64_t)v27 - v22 + 8;
    if ((unint64_t)v27 - v22 > 0xFFFFFFFFFFFFFFF7 || v25 > v21)
      return result;
    *v27 = v4;
  }
  if (!v21)
    return result;
  v29 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v3 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v25 <= 0x10)
    v25 = 16;
  v31 = v29 + v25;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v3 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v31, v32));
  v34 = *(_DWORD *)(v3 + 108);
  if (v33 == 0x80000000 || v34 != 0)
  {
    v36 = v34 + 1;
    *(_DWORD *)(v3 + 108) = v36;
    if (v36 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v4;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v65, v6);
  if (!v67)
    return result;
  v8 = v65;
  v9 = v66;
  v10 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v65;
  if (v10 < v65)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v66)
      goto LABEL_59;
    *(_WORD *)(v65 + v11) = 787;
  }
  if (v12 < v9)
  {
    *(_BYTE *)(v8 + v12) = a2;
    v14 = *(_QWORD *)(v3 + 64);
    v15 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v16 = *(_QWORD *)(v3 + 56);
    if (v15 + 16 >= v16)
      v15 = 0;
    if (v12 <= 0xF)
      v12 = 15;
    v17 = v12 + v15;
    if (v16 > v17 + 1)
      v18 = v17 + 1;
    else
      v18 = 0;
    *(_QWORD *)(v3 + 72) = v18;
    v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v18, v19));
    if (v20 == 0x80000000 || *(_DWORD *)(v3 + 108))
    {
      if (*(_BYTE *)(v3 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
    return result;
  }
  if (!v67)
  {
    __break(1u);
LABEL_87:
    v39 = 0;
    goto LABEL_65;
  }
  v8 = v65;
LABEL_59:
  v37 = (v8 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v38 = v37 - v8;
  if (v37 < v8)
    goto LABEL_87;
  v39 = v38 + 2;
  if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v66)
    goto LABEL_87;
  *(_WORD *)(v8 + v38) = 2821;
LABEL_65:
  v41 = *(_QWORD *)(v3 + 64);
  v42 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v43 = *(_QWORD *)(v3 + 56);
  if (v42 + 16 >= v43)
    v42 = 0;
  if (v39 <= 0x10)
    v39 = 16;
  v44 = v42 + v39;
  if (v43 <= v44)
    v44 = 0;
  *(_QWORD *)(v3 + 72) = v44;
  v45 = (unint64_t *)(*(_QWORD *)(v41 + 16) + 128);
  do
    __ldaxr(v45);
  while (__stlxr(v44, v45));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)(v3 + 8));
  v46 = v64;
  v47 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v47 = 787;
  *(_QWORD *)(v47 + 8) = v4;
  *(_QWORD *)(v47 + 528) = v47 + 16;
  *(_QWORD *)(v47 + 536) = v47 + 16;
  *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v47 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
  v68 = (IPC::Encoder *)v47;
  v48 = *(_QWORD *)(v47 + 544);
  v49 = v48 + 1;
  v50 = *(_QWORD *)(v47 + 552);
  if (v50 < v48 + 1)
  {
    v61 = *(_QWORD *)(v47 + 544);
    v63 = v48 + 1;
    v58 = (2 * v50 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v59 = v58;
      v58 *= 2;
    }
    while (v59 < v49);
    result = (unsigned __int8 ***)mmap(0, v59, 3, 4098, -1, 0);
    __dst = result;
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    memcpy(result, *(const void **)(v47 + 528), *(_QWORD *)(v47 + 544));
    v60 = *(void **)(v47 + 528);
    if (v60 != (void *)(v47 + 16))
      munmap(v60, *(_QWORD *)(v47 + 552));
    v51 = __dst;
    v49 = v63;
    *(_QWORD *)(v47 + 528) = __dst;
    *(_QWORD *)(v47 + 552) = v59;
    v52 = *(_QWORD *)(v47 + 544);
    v48 = v61;
  }
  else
  {
    v51 = *(unsigned __int8 ****)(v47 + 528);
    v52 = *(_QWORD *)(v47 + 544);
  }
  bzero((char *)v51 + v52, v48 - v52);
  *(_QWORD *)(v47 + 544) = v49;
  v53 = (_BYTE *)(*(_QWORD *)(v47 + 528) + v48);
  *(_QWORD *)(v47 + 536) = v53 + 1;
  *v53 = a2;
  IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v68, 1, 0);
  v55 = v68;
  v68 = 0;
  if (v55)
  {
    IPC::Encoder::~Encoder(v55, v54);
    WTF::fastFree(v56, v57);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v64);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  void *v34;
  WTF::RunLoop *v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v51;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  IPC::Encoder *v64;
  uint64_t v65;
  uint64_t v66[2];
  os_unfair_lock_s *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int8 v70;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 22) + 96) + 96);
  v4 = *((_QWORD *)a1 + 19);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v5 + 30.0);
    if (!v70)
      goto LABEL_53;
    v46 = v68;
    v45 = v69;
    v47 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - v68;
    if (v47 >= v68)
    {
      v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v69)
      {
        *(_WORD *)(v68 + v48) = 2822;
LABEL_63:
        v51 = (_QWORD *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v51 >= v46 + v49)
        {
          v49 = (unint64_t)v51 - v46 + 8;
          if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45)
            goto LABEL_53;
          *v51 = v4;
        }
        if (!v45)
          goto LABEL_53;
        v53 = *(_QWORD *)(v3 + 64);
        v54 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v55 = *(_QWORD *)(v3 + 56);
        if (v54 + 16 >= v55)
          v54 = 0;
        if (v49 <= 0x10)
          v49 = 16;
        v56 = v54 + v49;
        if (v55 <= v56)
          v56 = 0;
        *(_QWORD *)(v3 + 72) = v56;
        v57 = (unint64_t *)(*(_QWORD *)(v53 + 16) + 128);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v56, v57));
        v59 = *(_DWORD *)(v3 + 108);
        if (v58 == 0x80000000 || v59 != 0)
        {
          v61 = v59 + 1;
          *(_DWORD *)(v3 + 108) = v61;
          if (v61 >= *(_DWORD *)(v3 + 104))
          {
            if (*(_BYTE *)(v3 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
            *(_DWORD *)(v3 + 108) = 0;
          }
        }
        *(_QWORD *)(v3 + 48) = v4;
        goto LABEL_2;
      }
      v45 = 0;
    }
    v49 = 0;
    goto LABEL_63;
  }
LABEL_2:
  result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v6);
  if (!v70)
    goto LABEL_53;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)(v3 + 8));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34E4A78;
  v8[1] = v2;
  v66[0] = (uint64_t)v8;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v66[1] = v9;
  v65 = v9;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v67, v66);
  v11 = v70;
  if (!v70)
    goto LABEL_88;
  v11 = v68;
  v12 = v69;
  v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 - v68;
  if (v13 < v68)
  {
    v15 = 0;
    v10 = v69;
  }
  else
  {
    v10 = 0;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_89;
    v15 = 0;
    if (v14 + 2 <= v69)
    {
      *(_WORD *)(v68 + v14) = 786;
      v10 = v12;
      v15 = v14 + 2;
    }
  }
  while (1)
  {
    v16 = (_QWORD *)((v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v11 + v15)
    {
      v17 = (char *)v16 - v11;
      if ((unint64_t)v16 - v11 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_27;
      v15 = (unint64_t)(v17 + 8);
      if ((unint64_t)(v17 + 8) > v10)
        goto LABEL_27;
      *v16 = v9;
    }
    if (v10)
    {
      v18 = *(_QWORD *)(v3 + 64);
      v19 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_QWORD *)(v3 + 56);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v21 = v19 + v15;
      if (v20 <= v21)
        v22 = 0;
      else
        v22 = v21;
      *(_QWORD *)(v3 + 72) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      if (v24 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_50;
    }
LABEL_27:
    v11 = v70;
    if (v70)
      break;
LABEL_88:
    __break(1u);
LABEL_89:
    v15 = v10;
  }
  v25 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - v68;
  if (v25 < v68)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v69)
    {
      *(_WORD *)(v68 + v26) = 2821;
      v27 = v26 + 2;
    }
  }
  v28 = *(_QWORD *)(v3 + 64);
  v29 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v3 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v27 <= 0x10)
    v27 = 16;
  v31 = v29 + v27;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v3 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
  do
    __ldaxr(v32);
  while (__stlxr(v31, v32));
  *(_DWORD *)(v3 + 108) = 0;
  v33 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v33 = 786;
  *(_QWORD *)(v33 + 8) = v4;
  *(_QWORD *)(v33 + 528) = v33 + 16;
  *(_QWORD *)(v33 + 536) = v33 + 16;
  *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v33 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
  v64 = (IPC::Encoder *)v33;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v33, &v65);
  if (IPC::Connection::sendMessageImpl((uint64_t)v67, (uint64_t *)&v64, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v67, v65, &v63);
    if (v63)
    {
      v36 = (unsigned int *)(WTF::RunLoop::main(v35) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v38 = v63;
      v63 = 0;
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v39 = &off_1E34E4AE8;
      v39[1] = v38;
      v62 = v39;
      WTF::RunLoop::dispatch();
      if (v62)
        (*(void (**)(_QWORD *))(*v62 + 8))(v62);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v36);
      v40 = v63;
      v63 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  v41 = v64;
  v64 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v34);
    WTF::fastFree(v42, v43);
  }
LABEL_50:
  v44 = v66[0];
  v66[0] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
  v2 = 0;
LABEL_53:
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return result;
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  void *v34;
  WTF::RunLoop *v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v51;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  IPC::Encoder *v64;
  uint64_t v65;
  uint64_t v66[2];
  os_unfair_lock_s *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int8 v70;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 22) + 96) + 96);
  v4 = *((_QWORD *)a1 + 19);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v5 + 30.0);
    if (!v70)
      goto LABEL_53;
    v46 = v68;
    v45 = v69;
    v47 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - v68;
    if (v47 >= v68)
    {
      v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v69)
      {
        *(_WORD *)(v68 + v48) = 2822;
LABEL_63:
        v51 = (_QWORD *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v51 >= v46 + v49)
        {
          v49 = (unint64_t)v51 - v46 + 8;
          if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45)
            goto LABEL_53;
          *v51 = v4;
        }
        if (!v45)
          goto LABEL_53;
        v53 = *(_QWORD *)(v3 + 64);
        v54 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v55 = *(_QWORD *)(v3 + 56);
        if (v54 + 16 >= v55)
          v54 = 0;
        if (v49 <= 0x10)
          v49 = 16;
        v56 = v54 + v49;
        if (v55 <= v56)
          v56 = 0;
        *(_QWORD *)(v3 + 72) = v56;
        v57 = (unint64_t *)(*(_QWORD *)(v53 + 16) + 128);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v56, v57));
        v59 = *(_DWORD *)(v3 + 108);
        if (v58 == 0x80000000 || v59 != 0)
        {
          v61 = v59 + 1;
          *(_DWORD *)(v3 + 108) = v61;
          if (v61 >= *(_DWORD *)(v3 + 104))
          {
            if (*(_BYTE *)(v3 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
            *(_DWORD *)(v3 + 108) = 0;
          }
        }
        *(_QWORD *)(v3 + 48) = v4;
        goto LABEL_2;
      }
      v45 = 0;
    }
    v49 = 0;
    goto LABEL_63;
  }
LABEL_2:
  result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v6);
  if (!v70)
    goto LABEL_53;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)(v3 + 8));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34E4B10;
  v8[1] = v2;
  v66[0] = (uint64_t)v8;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v66[1] = v9;
  v65 = v9;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v67, v66);
  v11 = v70;
  if (!v70)
    goto LABEL_88;
  v11 = v68;
  v12 = v69;
  v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 - v68;
  if (v13 < v68)
  {
    v15 = 0;
    v10 = v69;
  }
  else
  {
    v10 = 0;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_89;
    v15 = 0;
    if (v14 + 2 <= v69)
    {
      *(_WORD *)(v68 + v14) = 789;
      v10 = v12;
      v15 = v14 + 2;
    }
  }
  while (1)
  {
    v16 = (_QWORD *)((v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v11 + v15)
    {
      v17 = (char *)v16 - v11;
      if ((unint64_t)v16 - v11 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_27;
      v15 = (unint64_t)(v17 + 8);
      if ((unint64_t)(v17 + 8) > v10)
        goto LABEL_27;
      *v16 = v9;
    }
    if (v10)
    {
      v18 = *(_QWORD *)(v3 + 64);
      v19 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_QWORD *)(v3 + 56);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v21 = v19 + v15;
      if (v20 <= v21)
        v22 = 0;
      else
        v22 = v21;
      *(_QWORD *)(v3 + 72) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      if (v24 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_50;
    }
LABEL_27:
    v11 = v70;
    if (v70)
      break;
LABEL_88:
    __break(1u);
LABEL_89:
    v15 = v10;
  }
  v25 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - v68;
  if (v25 < v68)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v69)
    {
      *(_WORD *)(v68 + v26) = 2821;
      v27 = v26 + 2;
    }
  }
  v28 = *(_QWORD *)(v3 + 64);
  v29 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v3 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v27 <= 0x10)
    v27 = 16;
  v31 = v29 + v27;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v3 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
  do
    __ldaxr(v32);
  while (__stlxr(v31, v32));
  *(_DWORD *)(v3 + 108) = 0;
  v33 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v33 = 789;
  *(_QWORD *)(v33 + 8) = v4;
  *(_QWORD *)(v33 + 528) = v33 + 16;
  *(_QWORD *)(v33 + 536) = v33 + 16;
  *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v33 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
  v64 = (IPC::Encoder *)v33;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v33, &v65);
  if (IPC::Connection::sendMessageImpl((uint64_t)v67, (uint64_t *)&v64, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v67, v65, &v63);
    if (v63)
    {
      v36 = (unsigned int *)(WTF::RunLoop::main(v35) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v38 = v63;
      v63 = 0;
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v39 = &off_1E34E4B50;
      v39[1] = v38;
      v62 = v39;
      WTF::RunLoop::dispatch();
      if (v62)
        (*(void (**)(_QWORD *))(*v62 + 8))(v62);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v36);
      v40 = v63;
      v63 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  v41 = v64;
  v64 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v34);
    WTF::fastFree(v42, v43);
  }
LABEL_50:
  v44 = v66[0];
  v66[0] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
  v2 = 0;
LABEL_53:
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteDeviceProxy::setLabelInternal(WebKit::WebGPU::RemoteDeviceProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 22) + 96) + 96);
  v4 = *((_QWORD *)this + 19);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v4)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 790;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v3 + 64);
        v15 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v3 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v3 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v3 + 108))
        {
          if (*(_BYTE *)(v3 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v3 + 64);
        v25 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v3 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v3 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v3 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v3 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 790;
        *(_QWORD *)(v30 + 8) = v4;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v4;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v3 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v3 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v3 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v3 + 108) = v49;
        if (v49 >= *(_DWORD *)(v3 + 104))
        {
          if (*(_BYTE *)(v3 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
      }
      *(_QWORD *)(v3 + 48) = v4;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  void *v34;
  WTF::RunLoop *v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v51;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  IPC::Encoder *v64;
  uint64_t v65;
  uint64_t v66[2];
  os_unfair_lock_s *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int8 v70;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 22) + 96) + 96);
  v4 = *((_QWORD *)a1 + 19);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v5 + 30.0);
    if (!v70)
      goto LABEL_53;
    v46 = v68;
    v45 = v69;
    v47 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - v68;
    if (v47 >= v68)
    {
      v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v69)
      {
        *(_WORD *)(v68 + v48) = 2822;
LABEL_63:
        v51 = (_QWORD *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v51 >= v46 + v49)
        {
          v49 = (unint64_t)v51 - v46 + 8;
          if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45)
            goto LABEL_53;
          *v51 = v4;
        }
        if (!v45)
          goto LABEL_53;
        v53 = *(_QWORD *)(v3 + 64);
        v54 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v55 = *(_QWORD *)(v3 + 56);
        if (v54 + 16 >= v55)
          v54 = 0;
        if (v49 <= 0x10)
          v49 = 16;
        v56 = v54 + v49;
        if (v55 <= v56)
          v56 = 0;
        *(_QWORD *)(v3 + 72) = v56;
        v57 = (unint64_t *)(*(_QWORD *)(v53 + 16) + 128);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v56, v57));
        v59 = *(_DWORD *)(v3 + 108);
        if (v58 == 0x80000000 || v59 != 0)
        {
          v61 = v59 + 1;
          *(_DWORD *)(v3 + 108) = v61;
          if (v61 >= *(_DWORD *)(v3 + 104))
          {
            if (*(_BYTE *)(v3 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
            *(_DWORD *)(v3 + 108) = 0;
          }
        }
        *(_QWORD *)(v3 + 48) = v4;
        goto LABEL_2;
      }
      v45 = 0;
    }
    v49 = 0;
    goto LABEL_63;
  }
LABEL_2:
  result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v6);
  if (!v70)
    goto LABEL_53;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)(v3 + 8));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34E4B78;
  v8[1] = v2;
  v66[0] = (uint64_t)v8;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v66[1] = v9;
  v65 = v9;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v67, v66);
  v11 = v70;
  if (!v70)
    goto LABEL_88;
  v11 = v68;
  v12 = v69;
  v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 - v68;
  if (v13 < v68)
  {
    v15 = 0;
    v10 = v69;
  }
  else
  {
    v10 = 0;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_89;
    v15 = 0;
    if (v14 + 2 <= v69)
    {
      *(_WORD *)(v68 + v14) = 788;
      v10 = v12;
      v15 = v14 + 2;
    }
  }
  while (1)
  {
    v16 = (_QWORD *)((v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v11 + v15)
    {
      v17 = (char *)v16 - v11;
      if ((unint64_t)v16 - v11 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_27;
      v15 = (unint64_t)(v17 + 8);
      if ((unint64_t)(v17 + 8) > v10)
        goto LABEL_27;
      *v16 = v9;
    }
    if (v10)
    {
      v18 = *(_QWORD *)(v3 + 64);
      v19 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_QWORD *)(v3 + 56);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v21 = v19 + v15;
      if (v20 <= v21)
        v22 = 0;
      else
        v22 = v21;
      *(_QWORD *)(v3 + 72) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      if (v24 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_50;
    }
LABEL_27:
    v11 = v70;
    if (v70)
      break;
LABEL_88:
    __break(1u);
LABEL_89:
    v15 = v10;
  }
  v25 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - v68;
  if (v25 < v68)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v69)
    {
      *(_WORD *)(v68 + v26) = 2821;
      v27 = v26 + 2;
    }
  }
  v28 = *(_QWORD *)(v3 + 64);
  v29 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v3 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v27 <= 0x10)
    v27 = 16;
  v31 = v29 + v27;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v3 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
  do
    __ldaxr(v32);
  while (__stlxr(v31, v32));
  *(_DWORD *)(v3 + 108) = 0;
  v33 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v33 = 788;
  *(_QWORD *)(v33 + 8) = v4;
  *(_QWORD *)(v33 + 528) = v33 + 16;
  *(_QWORD *)(v33 + 536) = v33 + 16;
  *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v33 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
  v64 = (IPC::Encoder *)v33;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v33, &v65);
  if (IPC::Connection::sendMessageImpl((uint64_t)v67, (uint64_t *)&v64, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v67, v65, &v63);
    if (v63)
    {
      v36 = (unsigned int *)(WTF::RunLoop::main(v35) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v38 = v63;
      v63 = 0;
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v39 = &off_1E34E4BA0;
      v39[1] = v38;
      v62 = v39;
      WTF::RunLoop::dispatch();
      if (v62)
        (*(void (**)(_QWORD *))(*v62 + 8))(v62);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v36);
      v40 = v63;
      v63 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  v41 = v64;
  v64 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v34);
    WTF::fastFree(v42, v43);
  }
LABEL_50:
  v44 = v66[0];
  v66[0] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
  v2 = 0;
LABEL_53:
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return result;
}

void WebKit::WebGPU::RemoteExternalTextureProxy::~RemoteExternalTextureProxy(WebKit::WebGPU::RemoteExternalTextureProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 870;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 870;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E46D0;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteExternalTextureProxy::~RemoteExternalTextureProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteExternalTextureProxy::setLabelInternal(WTF::ApproximateTime **this, const WTF::String *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)a2;
  return WebKit::WebGPU::RemoteExternalTextureProxy::send<Messages::RemoteExternalTexture::SetLabel>(this[3], *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[5] + 22) + 96) + 96), &v3);
}

unsigned __int8 ***WebKit::WebGPU::RemoteExternalTextureProxy::send<Messages::RemoteExternalTexture::SetLabel>(WTF::ApproximateTime *a1, uint64_t a2, uint64_t **a3)
{
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  IPC::Encoder *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v50;
  uint64_t *v51;
  IPC::Encoder *v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;
  unint64_t v56;
  unint64_t v57;

  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(WTF::ApproximateTime **)(a2 + 48) == a1)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v52, v7);
      if (!v54)
        break;
      v55 = v52;
      v56 = v53;
      v57 = 0;
      v9 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= (unint64_t)v52;
      v11 = v9 - (_QWORD)v52;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v53)
        {
          v56 = 0;
        }
        else
        {
          *(_WORD *)((char *)v52 + v11) = 871;
          v57 = v11 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v55, *a3);
      if (v56)
      {
        v14 = v57;
        v15 = *(_QWORD *)(a2 + 64);
        v16 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(a2 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v57 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(a2 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(a2 + 108))
        {
          if (*(_BYTE *)(a2 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
        return result;
      }
      if (v54)
      {
        v22 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v52;
        if (v22 < (unint64_t)v52)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v53)
          {
            *(_WORD *)((char *)v52 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a2 + 64);
        v26 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a2 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a2 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a2 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(a2 + 8));
        v30 = v51;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 871;
        *(_QWORD *)(v31 + 8) = a1;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v55 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, *a3);
        IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v55, 1, 0);
        v33 = v55;
        v55 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
      }
      __break(1u);
LABEL_76:
      v36 = 0;
LABEL_77:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v13 + v39)
      {
        v39 = v41 - (char *)v13 + 8;
        if ((unint64_t)(v41 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return result;
        *(_QWORD *)v41 = a1;
      }
      if (!v36)
        return result;
      v43 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a2 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a2 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a2 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        *(_DWORD *)(a2 + 108) = v50;
        if (v50 >= *(_DWORD *)(a2 + 104))
        {
          if (*(_BYTE *)(a2 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
      }
      *(_QWORD *)(a2 + 48) = a1;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v55, v6 + 30.0);
    if ((_BYTE)v57)
    {
      v13 = v55;
      v36 = v56;
      v37 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v55;
      if (v37 < (unint64_t)v55)
        goto LABEL_77;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v56)
        goto LABEL_76;
      *(_WORD *)((char *)v55 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteExternalTextureProxy::destroy(WebKit::WebGPU::RemoteExternalTextureProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 869;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 869;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebGPU::RemoteExternalTextureProxy::undestroy(WebKit::WebGPU::RemoteExternalTextureProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 872;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 872;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

uint64_t WebKit::RemoteGPUProxy::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  IPC::StreamClientConnection *v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  void *v14;
  IPC::StreamClientConnection *v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[4];
  char v20;

  IPC::StreamClientConnection::create((IPC::StreamClientConnection *)0x15, v19);
  if (v20)
  {
    v8 = (IPC::StreamClientConnection *)v19[0];
    v19[0] = 0;
    v16 = v8;
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight();
    v18[1] = v19[3];
    v9 = (uint64_t *)WTF::fastMalloc((WTF *)0x78);
    WebKit::RemoteGPUProxy::RemoteGPUProxy((uint64_t)v9, a1, a3);
    WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection((unsigned int *)a2);
    WebKit::RemoteGPUProxy::initializeIPC((uint64_t)v9, (unsigned int **)&v16, *(_QWORD *)(a2 + 56), (uint64_t)&v17);
    WebKit::RemoteGPUProxy::waitUntilInitialized(v9);
    *a4 = v9;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v18);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v17);
    v10 = (unsigned int *)v16;
    v16 = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v10);
        WTF::fastFree(v13, v14);
      }
    }
  }
  else
  {
    *a4 = 0;
  }
  return std::__optional_destruct_base<IPC::StreamClientConnection::StreamConnectionPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19);
}

uint64_t WebKit::RemoteGPUProxy::initializeIPC(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  v9 = a3;
  WTF::RefPtr<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::operator=<IPC::StreamClientConnection>((unsigned int **)(a1 + 96), a2);
  IPC::StreamClientConnection::open(*(_QWORD *)(a1 + 96), (void *)(a1 + 8), a1 + 32);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34E4BC8;
  v6[1] = a1;
  v6[2] = &v9;
  v6[3] = a4;
  v8 = v6;
  WTF::callOnMainRunLoopAndWait();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t *WebKit::RemoteGPUProxy::waitUntilInitialized(uint64_t *this)
{
  uint64_t ***v1;
  uint64_t v2;
  uint64_t v3;
  double v4;

  if (!*((_BYTE *)this + 112))
  {
    v1 = (uint64_t ***)this;
    v2 = this[12];
    v3 = this[13];
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    this = IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteGPUProxy::WasCreated,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v2, v3, 0, v4 + 30.0);
    if ((_DWORD)this)
    {
      this = (uint64_t *)IPC::StreamClientConnection::invalidate(v1[12]);
      *((_BYTE *)v1 + 113) = 1;
    }
  }
  return this;
}

uint64_t WebKit::RemoteGPUProxy::RemoteGPUProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = off_1E34E3BA8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E34E4708;
  *(_DWORD *)(a1 + 24) = 1;
  WTF::FunctionDispatcher::FunctionDispatcher((WTF::FunctionDispatcher *)(a1 + 32));
  *(_QWORD *)a1 = off_1E34E4290;
  *(_QWORD *)(a1 + 8) = &unk_1E34E43C0;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = &unk_1E34E4410;
  *(_QWORD *)(a1 + 40) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a3;
  *(_QWORD *)(a1 + 104) = WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_WORD *)(a1 + 112) = 0;
  return a1;
}

void WebKit::RemoteGPUProxy::~RemoteGPUProxy(WebKit::RemoteGPUProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  void *v25;
  WTF *v26;
  void *v27;
  _QWORD *v28;

  if (!*((_BYTE *)this + 113))
  {
    IPC::StreamClientConnection::invalidate(*((uint64_t ***)this + 12));
    v3 = *((_QWORD *)this + 13);
    v4 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = &off_1E34E4BF0;
    v5[1] = v3;
    v5[2] = v4;
    v28 = v5;
    WTF::ensureOnMainRunLoop();
    if (v28)
      (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v6);
      WTF::fastFree(v26, v27);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *((_QWORD *)this + 6);
  v13 = *((_QWORD *)this + 7);
  v14 = (WTF *)*((_QWORD *)this + 8);
  if (v12 <= v13)
  {
    if (v12 == v13)
      goto LABEL_31;
    v21 = (uint64_t *)((char *)v14 + 8 * v12);
    v22 = 8 * v13 - 8 * v12;
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  else
  {
    if (v13)
    {
      v15 = 8 * v13;
      do
      {
        v16 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        v14 = (WTF *)((char *)v14 + 8);
        v15 -= 8;
      }
      while (v15);
      v14 = (WTF *)*((_QWORD *)this + 8);
      v12 = *((_QWORD *)this + 6);
    }
    v17 = *((unsigned int *)this + 18);
    if (v12 != v17)
    {
      v18 = (uint64_t *)((char *)v14 + 8 * v12);
      v19 = 8 * v17 - 8 * v12;
      do
      {
        v20 = *v18;
        *v18 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
  }
  v14 = (WTF *)*((_QWORD *)this + 8);
LABEL_31:
  if (v14)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v14, a2);
  }
  v24 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  WTF::FunctionDispatcher::~FunctionDispatcher((WebKit::RemoteGPUProxy *)((char *)this + 32));
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v25);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteGPUProxy::~RemoteGPUProxy(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteGPUProxy::~RemoteGPUProxy(WebKit::RemoteGPUProxy *this, void *a2)
{
  WebKit::RemoteGPUProxy::~RemoteGPUProxy((WebKit::RemoteGPUProxy *)((char *)this - 8), a2);
}

{
  WebKit::RemoteGPUProxy::~RemoteGPUProxy((WebKit::RemoteGPUProxy *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteGPUProxy::~RemoteGPUProxy((WebKit::RemoteGPUProxy *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteGPUProxy::~RemoteGPUProxy((WebKit::RemoteGPUProxy *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 ***WebKit::RemoteGPUProxy::didClose(uint64_t ***this, IPC::Connection *a2)
{
  unsigned __int8 ***result;

  result = IPC::StreamClientConnection::invalidate(this[12]);
  *((_BYTE *)this + 113) = 1;
  return result;
}

unsigned __int8 ***`non-virtual thunk to'WebKit::RemoteGPUProxy::didClose(uint64_t ***this, IPC::Connection *a2)
{
  unsigned __int8 ***result;

  result = IPC::StreamClientConnection::invalidate(this[11]);
  *((_BYTE *)this + 105) = 1;
  return result;
}

void WebKit::RemoteGPUProxy::wasCreated(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v5;

  *(_BYTE *)(a1 + 112) = 1;
  v5 = *(uint64_t ***)(a1 + 96);
  if (a2)
  {
    IPC::StreamClientConnectionBuffer::setSemaphores((uint64_t)(v5 + 7), a3, a4);
  }
  else
  {
    IPC::StreamClientConnection::invalidate(v5);
    *(_BYTE *)(a1 + 113) = 1;
  }
}

uint64_t *IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteGPUProxy::WasCreated,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t *v7;
  uint64_t *v9;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, (uint64_t **)(a1 + 8));
  v7 = IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteGPUProxy::WasCreated>((uint64_t)v9, a2, a3, a4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v9);
  return v7;
}

_DWORD *WebKit::RemoteGPUProxy::requestAdapter(uint64_t a1, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v4;
  _DWORD *result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL8 v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  void *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t *v56;
  IPC::Encoder *v57;
  int v58;
  void *v59;
  IPC::Encoder *v60;
  WTF *v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  char v72;
  uint64_t v73;
  WTF::ApproximateTime *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  void *v80;
  _DWORD *v81;
  uint64_t v82;
  void *v83;
  _DWORD *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v91;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  unsigned int v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  WTF::ApproximateTime *v109;
  int v110;
  char v111;
  uint64_t *v112;
  __int128 v113;
  int v114;
  int v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char v125;
  char v126;
  char v127;
  int v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  char v132;
  __int128 v133[11];
  char v134;
  uint64_t *v135;
  int v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char v151;
  char v152;
  int v153;
  IPC::Decoder *v154;

  if (*(_BYTE *)(a1 + 113))
  {
    *(_QWORD *)&v113 = 0;
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 16))(v4, &v113);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_DWORD *)v113;
    *(_QWORD *)&v113 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    return result;
  }
  v7 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16) | 0x1000000;
  v111 = 0;
  v110 = v7;
  v109 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v9 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  WTF::ApproximateTime::now(v109);
  v11 = v10 + 30.0;
  if (*(_QWORD *)(v9 + 48) == v8)
    goto LABEL_6;
  IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 56, &v113, v10 + 30.0);
  if (!(_BYTE)v114)
    goto LABEL_169;
  v85 = *((_QWORD *)&v113 + 1);
  v86 = v113;
  v87 = (v113 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v88 = v87 - v113;
  if (v87 >= (unint64_t)v113)
  {
    v89 = v88 + 2;
    if (v88 <= 0xFFFFFFFFFFFFFFFDLL && v89 <= *((_QWORD *)&v113 + 1))
    {
      *(_WORD *)(v113 + v88) = 2822;
      goto LABEL_136;
    }
    v85 = 0;
  }
  v89 = 0;
LABEL_136:
  v91 = (_QWORD *)((v86 + v89 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v91 >= v86 + v89)
  {
    v89 = (unint64_t)v91 - v86 + 8;
    if ((unint64_t)v91 - v86 > 0xFFFFFFFFFFFFFFF7 || v89 > v85)
      goto LABEL_166;
    *v91 = v8;
  }
  if (!v85)
  {
LABEL_166:
    v102 = 17;
    goto LABEL_167;
  }
  v93 = *(_QWORD *)(v9 + 64);
  v94 = (*(_QWORD *)(v9 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v95 = *(_QWORD *)(v9 + 56);
  if (v94 + 16 >= v95)
    v94 = 0;
  if (v89 <= 0x10)
    v89 = 16;
  v96 = v94 + v89;
  if (v95 <= v96)
    v96 = 0;
  *(_QWORD *)(v9 + 72) = v96;
  v97 = (unint64_t *)(*(_QWORD *)(v93 + 16) + 128);
  do
    v98 = __ldaxr(v97);
  while (__stlxr(v96, v97));
  v99 = *(_DWORD *)(v9 + 108);
  if (v98 == 0x80000000 || v99 != 0)
  {
    v101 = v99 + 1;
    *(_DWORD *)(v9 + 108) = v101;
    if (v101 >= *(_DWORD *)(v9 + 104))
    {
      if (*(_BYTE *)(v9 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v9 + 84));
      *(_DWORD *)(v9 + 108) = 0;
    }
  }
  *(_QWORD *)(v9 + 48) = v8;
LABEL_6:
  IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 56, &v130, v11);
  if (!v132)
  {
    LOBYTE(v138) = 15;
    v153 = 1;
    goto LABEL_104;
  }
  v12 = v130;
  v13 = v131;
  v14 = (uint64_t **)(v9 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v154, (uint64_t **)(v9 + 8));
  v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v154, v15))
  {
    LOBYTE(v138) = 11;
    v15 = 1;
    v153 = 1;
    LOBYTE(v113) = 0;
    v128 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v113, (uint64_t)&v138);
    v129 = 1;
    if (v153 != -1)
      ((void (*)(__int128 *, unint64_t *))off_1E34E4800[v153])(v133, &v138);
    goto LABEL_74;
  }
  v138 = v12;
  v139 = v13;
  v140 = 0;
  v16 = (v12 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v12;
  if (v16 < v12)
  {
    v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_162;
    v18 = v17 + 2;
    if (v17 + 2 > v13)
      goto LABEL_162;
    *(_WORD *)(v12 + v17) = 3545;
    v140 = v17 + 2;
  }
  while (1)
  {
    v19 = (_QWORD *)((v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v12 + v18)
    {
      v20 = (char *)v19 - v12;
      if ((unint64_t)v19 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v13)
      {
        v139 = 0;
      }
      else
      {
        *v19 = v15;
        v140 = (unint64_t)(v20 + 8);
      }
    }
    IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::encode(&v138, &v110);
    v21 = v140;
    v22 = (_QWORD *)((v138 + v140 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v22 >= v138 + v140)
    {
      v23 = (char *)v22 - v138;
      if ((unint64_t)v22 - v138 > 0xFFFFFFFFFFFFFFF7
        || (v21 = (unint64_t)(v23 + 8), (unint64_t)(v23 + 8) > v139))
      {
LABEL_48:
        LOBYTE(v135) = 0;
        v137 = 0;
        goto LABEL_55;
      }
      *v22 = v109;
      v140 = (unint64_t)(v23 + 8);
    }
    if (!v139)
      goto LABEL_48;
    v24 = *(_QWORD *)(v9 + 64);
    v25 = (*(_QWORD *)(v9 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v26 = *(_QWORD *)(v9 + 56);
    if (v25 + 16 >= v26)
      v25 = 0;
    if (v21 <= 0x10)
      v21 = 16;
    v27 = v25 + v21;
    if (v26 <= v27)
      v28 = 0;
    else
      v28 = v27;
    *(_QWORD *)(v9 + 72) = v28;
    v29 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v28, v29));
    if (v30 == 0x80000000 || *(_DWORD *)(v9 + 108))
    {
      if (*(_BYTE *)(v9 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v9 + 84));
      *(_DWORD *)(v9 + 108) = 0;
    }
    v12 = v9 + 88;
    while (1)
    {
      v31 = *(unint64_t **)(*(_QWORD *)(v9 + 64) + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(0x80000000uLL, v31));
      v33 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v9 + 64) + 16) + 128));
      if (!(v32 | v33 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*(_BYTE *)(v9 + 96))
      {
        v34 = IPC::Semaphore::waitFor((semaphore_t *)(v9 + 88), v11);
        if (v34)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v34);
          if (v35 < v11)
            continue;
        }
      }
      LOBYTE(v135) = 16;
      v136 = 1;
LABEL_54:
      v137 = 1;
      goto LABEL_55;
    }
    atomic_store(0, *(unint64_t **)(*(_QWORD *)(v9 + 64) + 16));
    *(_QWORD *)(v9 + 72) = 0;
    v36 = *(_QWORD *)(v9 + 64);
    v37 = *(_QWORD *)(v36 + 8);
    if (v37 <= 0xFF)
      goto LABEL_161;
    v38 = *(_QWORD *)(v9 + 56);
    v39 = *(_QWORD *)(v36 + 16);
    v40 = v37 - 256;
    if (v38)
    {
      v12 = v38 - 1;
      if (v40 < v38 - 1)
        goto LABEL_161;
    }
    else
    {
      v12 = v40;
    }
    v41 = v39 + 256;
    v42 = WTF::fastMalloc((WTF *)0x48);
    v43 = IPC::Decoder::Decoder(v42, v41, v12, *(_QWORD *)(v9 + 48));
    if (*(_WORD *)(v43 + 50) != 2821)
    {
      v135 = (uint64_t *)v43;
      v136 = 0;
      goto LABEL_54;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v43);
    WTF::fastFree(v44, v45);
    IPC::Connection::waitForSyncReply((uint64_t)v154, v15, 0xDD9u, (uint64_t)v133, v11);
    LOBYTE(v135) = 0;
    v136 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v135, (uint64_t)v133);
    v137 = 1;
    if (DWORD2(v133[0]) != -1)
      ((void (*)(uint64_t **, __int128 *))off_1E34E4C08[DWORD2(v133[0])])(&v112, v133);
LABEL_55:
    IPC::Connection::popPendingSyncRequestID(v154);
    if (!v137)
    {
      LOBYTE(v113) = 0;
      v129 = 0;
      goto LABEL_74;
    }
    if (v136 == 1)
    {
      LOBYTE(v113) = (_BYTE)v135;
      v47 = 1;
      v128 = 1;
      v129 = 1;
LABEL_73:
      ((void (*)(unint64_t *, uint64_t **))off_1E34E4C08[v47])(&v138, &v135);
      goto LABEL_74;
    }
    if (v136)
      goto LABEL_168;
    LOBYTE(v133[0]) = 0;
    v134 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WebKit::RemoteGPURequestAdapterResponse>>>(v135, (uint64_t)v133);
    if (v134)
    {
      if (!v137)
        goto LABEL_161;
      if (v136)
        goto LABEL_168;
      IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ConnectionSendSyncResult((uint64_t)&v138, (uint64_t *)&v135, v133);
      LOBYTE(v113) = 0;
      v128 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v113, (uint64_t)&v138);
      v129 = 1;
      if (v153 != -1)
        ((void (*)(uint64_t **, unint64_t *))off_1E34E4800[v153])(&v112, &v138);
      if (v134)
        std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v133, v46);
    }
    else
    {
      LOBYTE(v113) = 13;
      v128 = 1;
      v129 = 1;
    }
    if (v137)
    {
      v47 = v136;
      if (v136 != -1)
        goto LABEL_73;
    }
LABEL_74:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v154);
    if (!v129)
      break;
    LOBYTE(v138) = 0;
    v153 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v138, (uint64_t)&v113);
    if (v129 && v128 != -1)
      ((void (*)(__int128 *, __int128 *))off_1E34E4800[v128])(v133, &v113);
LABEL_104:
    if (v153)
      goto LABEL_105;
    LOBYTE(v113) = 0;
    v126 = 0;
    if (!v152)
    {
      *(_QWORD *)&v133[0] = 0;
      v82 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v82 + 16))(v82, v133);
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
      v84 = *(_DWORD **)&v133[0];
      *(_QWORD *)&v133[0] = 0;
      if (v84)
      {
        if (v84[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v84 + 8))(v84);
        else
          --v84[2];
      }
      goto LABEL_124;
    }
    v14 = (uint64_t **)&v113;
    v122 = v148;
    v123 = v149;
    v124 = v150;
    v118 = v144;
    v119 = v145;
    v120 = v146;
    v121 = v147;
    v116 = v142;
    v64 = v140;
    *(_QWORD *)&v113 = v139;
    v140 = 0;
    v139 = 0;
    v65 = v141;
    v66 = HIDWORD(v141);
    v141 = 0;
    v125 = v151;
    v117 = v143;
    v15 = 1;
    v126 = 1;
    v8 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v8 = 1;
    *((_QWORD *)&v113 + 1) = 0;
    *(_QWORD *)(v8 + 8) = v64;
    v114 = 0;
    *(_DWORD *)(v8 + 16) = v65;
    v115 = 0;
    *(_DWORD *)(v8 + 20) = v66;
    v12 = *((_QWORD *)&v119 + 1);
    v67 = v120;
    v9 = v121;
    v68 = *((_QWORD *)&v121 + 1);
    v104 = v117;
    v105 = v116;
    v103 = v118;
    v11 = *(double *)&v119;
    v69 = *((_QWORD *)&v120 + 1);
    v107 = v123;
    v108 = v122;
    v106 = v124;
    v70 = WTF::fastMalloc((WTF *)0x98);
    *(_DWORD *)v70 = 1;
    *(_OWORD *)(v70 + 4) = v105;
    *(_OWORD *)(v70 + 20) = v104;
    *(_OWORD *)(v70 + 36) = v103;
    *(double *)(v70 + 52) = v11;
    *(_QWORD *)(v70 + 64) = v12;
    *(_QWORD *)(v70 + 72) = v67;
    *(_QWORD *)(v70 + 80) = v69;
    *(_DWORD *)(v70 + 88) = v9;
    *(_QWORD *)(v70 + 96) = v68;
    *(_OWORD *)(v70 + 104) = v108;
    *(_OWORD *)(v70 + 120) = v107;
    *(_OWORD *)(v70 + 136) = v106;
    if (v126)
    {
      v71 = (WTF *)v70;
      v72 = v125;
      v73 = *(_QWORD *)(a1 + 40);
      v74 = v109;
      v75 = WTF::fastMalloc((WTF *)0x68);
      *(_DWORD *)(v75 + 8) = 1;
      v76 = v113;
      *(_QWORD *)&v113 = 0;
      *(_QWORD *)(v75 + 16) = v76;
      ++*(_DWORD *)v8;
      *(_QWORD *)(v75 + 24) = v8;
      ++*(_DWORD *)v71;
      *(_QWORD *)(v75 + 32) = v71;
      *(_BYTE *)(v75 + 40) = v72;
      *(_QWORD *)v75 = off_1E34E2FF8;
      *(_OWORD *)(v75 + 48) = 0u;
      *(_OWORD *)(v75 + 64) = 0u;
      *(_QWORD *)(v75 + 80) = v74;
      ++*(_DWORD *)(v73 + 8);
      *(_QWORD *)(v75 + 88) = v73;
      v77 = (unsigned int *)(a1 + 24);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 + 1, v77));
      *(_QWORD *)(v75 + 96) = a1;
      *(_QWORD *)&v133[0] = v75;
      v79 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v79 + 16))(v79, v133);
      (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
      v81 = *(_DWORD **)&v133[0];
      *(_QWORD *)&v133[0] = 0;
      if (v81)
      {
        if (v81[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 8))(v81);
        else
          --v81[2];
      }
      if (*(_DWORD *)v71 == 1)
        WTF::fastFree(v71, v80);
      else
        --*(_DWORD *)v71;
      WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref((WTF *)v8, v80);
LABEL_124:
      result = (_DWORD *)std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v113, v83);
      goto LABEL_125;
    }
LABEL_161:
    __break(1u);
LABEL_162:
    v13 = 0;
    v18 = 0;
    v139 = 0;
  }
  if (!v132)
    goto LABEL_161;
  v48 = (v130 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v49 = v48 - v130;
  if (v48 < v130)
  {
    v50 = 0;
  }
  else
  {
    v50 = 0;
    if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= v131)
    {
      *(_WORD *)(v130 + v49) = 2821;
      v50 = v49 + 2;
    }
  }
  v51 = *(_QWORD *)(v9 + 64);
  v52 = (*(_QWORD *)(v9 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = *(_QWORD *)(v9 + 56);
  if (v52 + 16 >= v53)
    v52 = 0;
  if (v50 <= 0x10)
    v50 = 16;
  v54 = v52 + v50;
  if (v53 <= v54)
    v54 = 0;
  *(_QWORD *)(v9 + 72) = v54;
  v55 = (unint64_t *)(*(_QWORD *)(v51 + 16) + 128);
  do
    __ldaxr(v55);
  while (__stlxr(v54, v55));
  *(_DWORD *)(v9 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v112, v14);
  v56 = v112;
  v135 = 0;
  IPC::Connection::createSyncMessageEncoder(3545, v8, (uint64_t *)&v135, (uint64_t *)&v154);
  v57 = v154;
  IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::encode(v154, (char *)&v110);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(v57, (uint64_t *)&v109);
  IPC::Connection::sendSyncMessage((uint64_t)v56, (uint64_t)v135, (uint64_t *)&v154, 0, (uint64_t)v133, v11);
  if (DWORD2(v133[0]))
  {
    if (DWORD2(v133[0]) != 1)
      goto LABEL_168;
    LOBYTE(v138) = v133[0];
    v58 = 1;
    v153 = 1;
LABEL_100:
    ((void (*)(__int128 *, __int128 *))off_1E34E4C08[v58])(&v113, v133);
LABEL_101:
    v60 = v154;
    v154 = 0;
    if (v60)
    {
      IPC::Encoder::~Encoder(v60, v59);
      WTF::fastFree(v61, v62);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v112);
    goto LABEL_104;
  }
  LOBYTE(v113) = 0;
  v127 = 0;
  IPC::Decoder::operator>><std::tuple<std::optional<WebKit::RemoteGPURequestAdapterResponse>>>(*(uint64_t **)&v133[0], (uint64_t)&v113);
  if (!v127)
  {
    LOBYTE(v138) = 13;
    v153 = 1;
    goto LABEL_99;
  }
  if (!DWORD2(v133[0]))
  {
    IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ConnectionSendSyncResult((uint64_t)&v138, (uint64_t *)v133, &v113);
    if (v127)
      std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v113, v59);
LABEL_99:
    v58 = DWORD2(v133[0]);
    if (DWORD2(v133[0]) != -1)
      goto LABEL_100;
    goto LABEL_101;
  }
LABEL_168:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_169:
  v102 = 15;
LABEL_167:
  LOBYTE(v138) = v102;
  v153 = 1;
LABEL_105:
  IPC::StreamClientConnection::invalidate(*(uint64_t ***)(a1 + 96));
  *(_BYTE *)(a1 + 113) = 1;
  *(_QWORD *)&v113 = 0;
  v63 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v63 + 16))(v63, &v113);
  (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  result = (_DWORD *)v113;
  *(_QWORD *)&v113 = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
LABEL_125:
  if (v153 != -1)
    return (_DWORD *)((uint64_t (*)(__int128 *, unint64_t *))off_1E34E4800[v153])(&v113, &v138);
  return result;
}

_DWORD *WebKit::RemoteGPUProxy::createPresentationContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _DWORD *result;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  int v44;
  IPC::Encoder *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::ApproximateTime *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  unsigned int v68;
  WTF::ApproximateTime *v69;
  uint64_t v70[2];
  uint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 v74;
  IPC::Encoder *v75;

  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), *a2);
  result = (_DWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 72))(*(_QWORD *)(a1 + 40), *a2);
  v70[0] = (uint64_t)result;
  v70[1] = result != 0;
  if (!result)
  {
    *a3 = 0;
    return result;
  }
  v69 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  WTF::ApproximateTime::now(v69);
  v11 = v10 + 30.0;
  if (*(_QWORD *)(v8 + 48) != v9)
  {
    result = (_DWORD *)IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 56, &v72, v10 + 30.0);
    if (v74)
    {
      v32 = v72;
      v54 = v73;
      v55 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v56 = v55 - v72;
      if (v55 < v72)
      {
        v57 = 0;
        v13 = v73;
      }
      else
      {
        v13 = 0;
        if (v56 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_95;
        v57 = 0;
        if (v56 + 2 <= v73)
        {
          *(_WORD *)(v72 + v56) = 2822;
          v13 = v54;
          v57 = v56 + 2;
        }
      }
      goto LABEL_67;
    }
    goto LABEL_54;
  }
  while (1)
  {
    result = (_DWORD *)IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 56, &v72, v11);
    if (!v74)
      goto LABEL_54;
    v12 = v72;
    v13 = v73;
    v14 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v15 = v14 - v72;
    if (v14 >= v72)
    {
      v16 = v15 + 2;
      if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v73)
      {
        *(_WORD *)(v72 + v15) = 876;
        goto LABEL_10;
      }
      v13 = 0;
    }
    v16 = 0;
LABEL_10:
    v18 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = v18 - (v12 + v16);
    if (v18 >= v12 + v16)
    {
      v20 = v18 - v12;
      v21 = v19 + v16 + 8;
      if (v20 > 0xFFFFFFFFFFFFFFF7 || v21 > v13)
      {
        v13 = 0;
      }
      else
      {
        *(_QWORD *)(v12 + v20) = v70[0];
        v16 = v21;
      }
    }
    v23 = (_QWORD *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v23 >= v12 + v16)
    {
      v16 = (unint64_t)v23 - v12 + 8;
      if ((unint64_t)v23 - v12 > 0xFFFFFFFFFFFFFFF7 || v16 > v13)
        goto LABEL_38;
      *v23 = v69;
    }
    if (v13)
    {
      v25 = *(_QWORD *)(v8 + 64);
      v26 = (*(_QWORD *)(v8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_QWORD *)(v8 + 56);
      if (v26 + 16 >= v27)
        v26 = 0;
      if (v16 <= 0x10)
        v16 = 16;
      v28 = v26 + v16;
      if (v27 <= v28)
        v29 = 0;
      else
        v29 = v28;
      *(_QWORD *)(v8 + 72) = v29;
      v30 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v29, v30));
      if (v31 == 0x80000000 || *(_DWORD *)(v8 + 108))
      {
        if (*(_BYTE *)(v8 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v8 + 84));
        *(_DWORD *)(v8 + 108) = 0;
      }
LABEL_55:
      v49 = *(_QWORD *)(a1 + 40);
      v50 = v69;
      v51 = WTF::fastMalloc((WTF *)0x30);
      v48 = v51;
      *(_DWORD *)(v51 + 8) = 1;
      *(_QWORD *)v51 = off_1E34E4468;
      *(_QWORD *)(v51 + 16) = v50;
      ++*(_DWORD *)(v49 + 8);
      *(_QWORD *)(v51 + 24) = v49;
      v52 = (unsigned int *)(a1 + 24);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 + 1, v52));
      *(_QWORD *)(v51 + 32) = a1;
      *(_QWORD *)(v51 + 40) = 0;
      ++*(_DWORD *)(v51 + 8);
      result = *(_DWORD **)(v6 + 48);
      *(_QWORD *)(v6 + 48) = v48;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      goto LABEL_61;
    }
LABEL_38:
    v32 = v74;
    if (v74)
      break;
    __break(1u);
LABEL_95:
    v57 = v13;
LABEL_67:
    v58 = (_QWORD *)((v32 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v58 >= v32 + v57)
    {
      v59 = (char *)v58 - v32;
      if ((unint64_t)v58 - v32 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_54;
      v57 = (unint64_t)(v59 + 8);
      if ((unint64_t)(v59 + 8) > v13)
        goto LABEL_54;
      *v58 = v9;
    }
    if (!v13)
      goto LABEL_54;
    v60 = (*(_QWORD *)(v8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v61 = *(_QWORD *)(v8 + 56);
    if (v60 + 16 >= v61)
      v60 = 0;
    if (v57 <= 0x10)
      v57 = 16;
    v62 = v60 + v57;
    if (v61 <= v62)
      v63 = 0;
    else
      v63 = v62;
    *(_QWORD *)(v8 + 72) = v63;
    v64 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 64) + 16) + 128);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v63, v64));
    v66 = *(_DWORD *)(v8 + 108);
    if (v65 == 0x80000000 || v66 != 0)
    {
      v68 = v66 + 1;
      *(_DWORD *)(v8 + 108) = v68;
      if (v68 >= *(_DWORD *)(v8 + 104))
      {
        if (*(_BYTE *)(v8 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v8 + 84));
        *(_DWORD *)(v8 + 108) = 0;
      }
    }
    *(_QWORD *)(v8 + 48) = v9;
  }
  v33 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v34 = v33 - v72;
  if (v33 < v72)
  {
    v35 = 0;
  }
  else
  {
    v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v73)
    {
      *(_WORD *)(v72 + v34) = 2821;
      v35 = v34 + 2;
    }
  }
  v36 = *(_QWORD *)(v8 + 64);
  v37 = (*(_QWORD *)(v8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v38 = *(_QWORD *)(v8 + 56);
  if (v37 + 16 >= v38)
    v37 = 0;
  if (v35 <= 0x10)
    v35 = 16;
  v39 = v37 + v35;
  if (v38 <= v39)
    v39 = 0;
  *(_QWORD *)(v8 + 72) = v39;
  v40 = (unint64_t *)(*(_QWORD *)(v36 + 16) + 128);
  do
    __ldaxr(v40);
  while (__stlxr(v39, v40));
  *(_DWORD *)(v8 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v71, (uint64_t **)(v8 + 8));
  v41 = v71;
  v42 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v42 = 876;
  *(_QWORD *)(v42 + 8) = v9;
  *(_QWORD *)(v42 + 528) = v42 + 16;
  *(_QWORD *)(v42 + 536) = v42 + 16;
  *(_OWORD *)(v42 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v42 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v42);
  v75 = (IPC::Encoder *)v42;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v42, v70);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v42, (uint64_t *)&v69);
  v44 = IPC::Connection::sendMessageImpl((uint64_t)v41, (uint64_t *)&v75, 1, 0);
  v45 = v75;
  v75 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v43);
    WTF::fastFree(v46, v47);
  }
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v71);
  if (!v44)
    goto LABEL_55;
LABEL_54:
  v48 = 0;
LABEL_61:
  *a3 = v48;
  return result;
}

uint64_t WebKit::RemoteGPUProxy::createCompositorIntegration@<X0>(WebKit::RemoteGPUProxy *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  int v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  uint64_t result;
  uint64_t v39;
  WTF::ApproximateTime *v40;
  unsigned int *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  unsigned int v57;
  WTF::ApproximateTime *v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  IPC::Encoder *v63;

  v58 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v4 = *((_QWORD *)this + 12);
  v5 = *((_QWORD *)this + 13);
  WTF::ApproximateTime::now(v58);
  v7 = v6 + 30.0;
  if (*(_QWORD *)(v4 + 48) != v5)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v60, v6 + 30.0);
    if (v62)
    {
      v9 = v60;
      v43 = v61;
      v44 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v45 = v44 - v60;
      if (v44 < v60)
        goto LABEL_87;
      v46 = v45 + 2;
      if (v45 > 0xFFFFFFFFFFFFFFFDLL || v46 > v61)
        goto LABEL_86;
      *(_WORD *)(v60 + v45) = 2822;
      goto LABEL_58;
    }
    goto LABEL_46;
  }
  while (1)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v60, v7);
    if (!v62)
      goto LABEL_46;
    v9 = v60;
    v8 = v61;
    v10 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 - v60;
    if (v10 >= v60)
    {
      v12 = v11 + 2;
      if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v61)
      {
        *(_WORD *)(v60 + v11) = 875;
        goto LABEL_9;
      }
      v8 = 0;
    }
    v12 = 0;
LABEL_9:
    v14 = (_QWORD *)((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v14 >= v9 + v12)
    {
      v12 = (unint64_t)v14 - v9 + 8;
      if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFF7 || v12 > v8)
        goto LABEL_30;
      *v14 = v58;
    }
    if (v8)
    {
      v16 = *(_QWORD *)(v4 + 64);
      v17 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = *(_QWORD *)(v4 + 56);
      if (v17 + 16 >= v18)
        v17 = 0;
      if (v12 <= 0x10)
        v12 = 16;
      v19 = v17 + v12;
      if (v18 <= v19)
        v20 = 0;
      else
        v20 = v19;
      *(_QWORD *)(v4 + 72) = v20;
      v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v20, v21));
      if (v22 == 0x80000000 || *(_DWORD *)(v4 + 108))
      {
        if (*(_BYTE *)(v4 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
        *(_DWORD *)(v4 + 108) = 0;
      }
LABEL_47:
      v39 = *((_QWORD *)this + 5);
      v40 = v58;
      result = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(result + 8) = 1;
      *(_QWORD *)result = off_1E34E3D58;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = v40;
      ++*(_DWORD *)(v39 + 8);
      *(_QWORD *)(result + 32) = v39;
      v41 = (unsigned int *)((char *)this + 24);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
      *(_QWORD *)(result + 40) = this;
      *(_QWORD *)(result + 48) = 0;
      goto LABEL_50;
    }
LABEL_30:
    if (v62)
      break;
    __break(1u);
LABEL_86:
    v43 = 0;
LABEL_87:
    v46 = 0;
LABEL_58:
    v48 = (_QWORD *)((v9 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v48 >= v9 + v46)
    {
      v46 = (unint64_t)v48 - v9 + 8;
      if ((unint64_t)v48 - v9 > 0xFFFFFFFFFFFFFFF7 || v46 > v43)
        goto LABEL_46;
      *v48 = v5;
    }
    if (!v43)
      goto LABEL_46;
    v50 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = *(_QWORD *)(v4 + 56);
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v46 <= 0x10)
      v46 = 16;
    v52 = v50 + v46;
    if (v51 <= v52)
      v52 = 0;
    *(_QWORD *)(v4 + 72) = v52;
    v53 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v52, v53));
    v55 = *(_DWORD *)(v4 + 108);
    if (v54 == 0x80000000 || v55 != 0)
    {
      v57 = v55 + 1;
      *(_DWORD *)(v4 + 108) = v57;
      if (v57 >= *(_DWORD *)(v4 + 104))
      {
        if (*(_BYTE *)(v4 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
        *(_DWORD *)(v4 + 108) = 0;
      }
    }
    *(_QWORD *)(v4 + 48) = v5;
  }
  v23 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v24 = v23 - v60;
  if (v23 < v60)
  {
    v25 = 0;
  }
  else
  {
    v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v61)
    {
      *(_WORD *)(v60 + v24) = 2821;
      v25 = v24 + 2;
    }
  }
  v26 = *(_QWORD *)(v4 + 64);
  v27 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v4 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v25 <= 0x10)
    v25 = 16;
  v29 = v27 + v25;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v4 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
  do
    __ldaxr(v30);
  while (__stlxr(v29, v30));
  *(_DWORD *)(v4 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v4 + 8));
  v31 = v59;
  v32 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v32 = 875;
  *(_QWORD *)(v32 + 8) = v5;
  *(_QWORD *)(v32 + 528) = v32 + 16;
  *(_QWORD *)(v32 + 536) = v32 + 16;
  *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v32 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
  v63 = (IPC::Encoder *)v32;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v32, (uint64_t *)&v58);
  v34 = IPC::Connection::sendMessageImpl((uint64_t)v31, (uint64_t *)&v63, 1, 0);
  v35 = v63;
  v63 = 0;
  if (v35)
  {
    IPC::Encoder::~Encoder(v35, v33);
    WTF::fastFree(v36, v37);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v59);
  if (!v34)
    goto LABEL_47;
LABEL_46:
  result = 0;
LABEL_50:
  *a2 = result;
  return result;
}

void WebKit::RemoteGPUProxy::isValid()
{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::Buffer *a2)
{
  __break(0xC471u);
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::Adapter *a2)
{
  __break(0xC471u);
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::BindGroup *a2)
{
  __break(0xC471u);
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::BindGroupLayout *a2)
{
  __break(0xC471u);
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::CommandBuffer *a2)
{
  __break(0xC471u);
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::CommandEncoder *a2)
{
  __break(0xC471u);
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::ComputePassEncoder *a2)
{
  __break(0xC471u);
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::ComputePipeline *a2)
{
  __break(0xC471u);
}

void WebKit::WebGPU::RemotePipelineLayoutProxy::~RemotePipelineLayoutProxy(WebKit::WebGPU::RemotePipelineLayoutProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  IPC::Encoder *v62;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v59, v4 + 30.0);
  if (!v61)
    goto LABEL_78;
  v21 = v59;
  v20 = v60;
  v22 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v59;
  if (v22 < v59)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v60)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v59 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v59, v5);
  if (!v61)
    goto LABEL_78;
  v7 = v59;
  v8 = v60;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v59;
  if ((unint64_t)v9 < v59)
  {
    v11 = 0;
    if (v60)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v60)
      goto LABEL_60;
    *v9 = 1234;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v61)
  {
    __break(1u);
LABEL_98:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v59;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_98;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v60)
    goto LABEL_98;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v3 + 8));
  v45 = v58;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1234;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v62 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v62, 1, 0);
  v48 = v62;
  v62 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v58);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E4820;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = *((_QWORD *)this + 2);
  if (v54)
  {
    *(_QWORD *)(v54 + 8) = 0;
    v55 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v55)
    {
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemotePipelineLayoutProxy::~RemotePipelineLayoutProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemotePipelineLayoutProxy::setLabelInternal(WTF::ApproximateTime **this, const WTF::String *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)a2;
  return WebKit::WebGPU::RemotePipelineLayoutProxy::send<Messages::RemotePipelineLayout::SetLabel>(this[4], *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[6] + 22) + 96) + 96), &v3);
}

unsigned __int8 ***WebKit::WebGPU::RemotePipelineLayoutProxy::send<Messages::RemotePipelineLayout::SetLabel>(WTF::ApproximateTime *a1, uint64_t a2, uint64_t **a3)
{
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  IPC::Encoder *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v50;
  uint64_t *v51;
  IPC::Encoder *v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;
  unint64_t v56;
  unint64_t v57;

  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(WTF::ApproximateTime **)(a2 + 48) == a1)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v52, v7);
      if (!v54)
        break;
      v55 = v52;
      v56 = v53;
      v57 = 0;
      v9 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= (unint64_t)v52;
      v11 = v9 - (_QWORD)v52;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v53)
        {
          v56 = 0;
        }
        else
        {
          *(_WORD *)((char *)v52 + v11) = 1235;
          v57 = v11 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v55, *a3);
      if (v56)
      {
        v14 = v57;
        v15 = *(_QWORD *)(a2 + 64);
        v16 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(a2 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v57 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(a2 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(a2 + 108))
        {
          if (*(_BYTE *)(a2 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
        return result;
      }
      if (v54)
      {
        v22 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v52;
        if (v22 < (unint64_t)v52)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v53)
          {
            *(_WORD *)((char *)v52 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a2 + 64);
        v26 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a2 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a2 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a2 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(a2 + 8));
        v30 = v51;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1235;
        *(_QWORD *)(v31 + 8) = a1;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v55 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, *a3);
        IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v55, 1, 0);
        v33 = v55;
        v55 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
      }
      __break(1u);
LABEL_76:
      v36 = 0;
LABEL_77:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v13 + v39)
      {
        v39 = v41 - (char *)v13 + 8;
        if ((unint64_t)(v41 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return result;
        *(_QWORD *)v41 = a1;
      }
      if (!v36)
        return result;
      v43 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a2 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a2 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a2 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        *(_DWORD *)(a2 + 108) = v50;
        if (v50 >= *(_DWORD *)(a2 + 104))
        {
          if (*(_BYTE *)(a2 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
      }
      *(_QWORD *)(a2 + 48) = a1;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v55, v6 + 30.0);
    if ((_BYTE)v57)
    {
      v13 = v55;
      v36 = v56;
      v37 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v55;
      if (v37 < (unint64_t)v55)
        goto LABEL_77;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v56)
        goto LABEL_76;
      *(_WORD *)((char *)v55 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemotePresentationContextProxy::~RemotePresentationContextProxy(WebKit::WebGPU::RemotePresentationContextProxy *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::RemoteGPUProxy,(WTF::DestructionThread)0>::deref((unsigned int *)(v4 + 24), a2);
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebGPU::RemotePresentationContextProxy::~RemotePresentationContextProxy(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebKit::WebGPU::RemotePresentationContextProxy::configure(_QWORD *a1, uint64_t a2)
{
  WTF::ApproximateTime *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  void *v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  int v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unsigned int v54;
  WTF *v55[2];
  WTF *v56;
  int v57;
  char v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;

  v3 = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[3], a2, (uint64_t)v55);
  if (!v58)
    return 0;
  v4 = *(_QWORD *)(a1[4] + 96);
  v5 = a1[2];
  WTF::ApproximateTime::now(v3);
  v7 = v6 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v5)
    goto LABEL_3;
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v63, v6 + 30.0);
  if (!(_BYTE)v65)
    goto LABEL_83;
  v40 = v63;
  v39 = v64;
  v41 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = v41 - v63;
  if (v41 >= v63)
  {
    v43 = v42 + 2;
    if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v43 <= v64)
    {
      *(_WORD *)(v63 + v42) = 2822;
      goto LABEL_56;
    }
    v39 = 0;
  }
  v43 = 0;
LABEL_56:
  v45 = (_QWORD *)((v40 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v45 >= v40 + v43)
  {
    v43 = (unint64_t)v45 - v40 + 8;
    if ((unint64_t)v45 - v40 > 0xFFFFFFFFFFFFFFF7 || v43 > v39)
      goto LABEL_83;
    *v45 = v5;
  }
  if (v39)
  {
    v47 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = *(_QWORD *)(v4 + 56);
    if (v47 + 16 >= v48)
      v47 = 0;
    if (v43 <= 0x10)
      v43 = 16;
    v49 = v47 + v43;
    if (v48 <= v49)
      v49 = 0;
    *(_QWORD *)(v4 + 72) = v49;
    v50 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v49, v50));
    v52 = *(_DWORD *)(v4 + 108);
    if (v51 == 0x80000000 || v52 != 0)
    {
      v54 = v52 + 1;
      *(_DWORD *)(v4 + 108) = v54;
      if (v54 >= *(_DWORD *)(v4 + 104))
      {
        if (*(_BYTE *)(v4 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
        *(_DWORD *)(v4 + 108) = 0;
      }
    }
    *(_QWORD *)(v4 + 48) = v5;
LABEL_3:
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v60, v7);
    if (!v62)
    {
      v21 = 0;
      goto LABEL_42;
    }
    v63 = v60;
    v64 = v61;
    v65 = 0;
    v9 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v10 = v9 >= v60;
    v11 = v9 - v60;
    if (v10)
    {
      if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v61)
      {
        v64 = 0;
      }
      else
      {
        *(_WORD *)(v60 + v11) = 1236;
        v65 = v11 + 2;
      }
    }
    IPC::ArgumentCoder<WebKit::WebGPU::CanvasConfiguration,void>::encode(&v63, (uint64_t)v55);
    if (v64)
    {
      v13 = v65;
      v14 = *(_QWORD *)(v4 + 64);
      v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v16 = *(_QWORD *)(v4 + 56);
      if (v15 + 16 >= v16)
        v15 = 0;
      if (v65 <= 0x10)
        v13 = 16;
      v17 = v15 + v13;
      if (v16 <= v17)
        v18 = 0;
      else
        v18 = v17;
      *(_QWORD *)(v4 + 72) = v18;
      v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v18, v19));
      if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
      {
        if (*(_BYTE *)(v4 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
        *(_DWORD *)(v4 + 108) = 0;
      }
      v21 = 1;
      goto LABEL_42;
    }
    if (v62)
    {
      v22 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v23 = v22 - v60;
      if (v22 < v60)
      {
        v24 = 0;
      }
      else
      {
        v24 = 0;
        if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v61)
        {
          *(_WORD *)(v60 + v23) = 2821;
          v24 = v23 + 2;
        }
      }
      v25 = *(_QWORD *)(v4 + 64);
      v26 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_QWORD *)(v4 + 56);
      if (v26 + 16 >= v27)
        v26 = 0;
      if (v24 <= 0x10)
        v24 = 16;
      v28 = v26 + v24;
      if (v27 <= v28)
        v28 = 0;
      *(_QWORD *)(v4 + 72) = v28;
      v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
      do
        __ldaxr(v29);
      while (__stlxr(v28, v29));
      *(_DWORD *)(v4 + 108) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v4 + 8));
      v30 = v59;
      v31 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v31 = 1236;
      *(_QWORD *)(v31 + 8) = v5;
      *(_QWORD *)(v31 + 528) = v31 + 16;
      *(_QWORD *)(v31 + 536) = v31 + 16;
      *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v31 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
      v63 = v31;
      IPC::ArgumentCoder<WebKit::WebGPU::CanvasConfiguration,void>::encode((IPC::Encoder *)v31, v55);
      v33 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v63, 1, 0);
      v34 = (IPC::Encoder *)v63;
      v63 = 0;
      if (v34)
      {
        IPC::Encoder::~Encoder(v34, v32);
        WTF::fastFree(v35, v36);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v59);
      v21 = v33 == 0;
LABEL_42:
      if (!v58)
        return v21;
      goto LABEL_43;
    }
    __break(1u);
  }
LABEL_83:
  v21 = 0;
LABEL_43:
  v37 = v56;
  if (v56)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree(v37, v8);
  }
  return v21;
}

unsigned __int8 ***WebKit::WebGPU::RemotePresentationContextProxy::unconfigure(WebKit::WebGPU::RemotePresentationContextProxy *this)
{
  WTF::ApproximateTime *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  unint64_t v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  unsigned int v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;

  v2 = (WTF::ApproximateTime *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) == 1)
      v2 = (WTF::ApproximateTime *)(*(uint64_t (**)(WTF::ApproximateTime *))(*(_QWORD *)v2 + 8))(v2);
    else
      --*((_DWORD *)v2 + 2);
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 4) + 96);
  v4 = *((_QWORD *)this + 2);
  WTF::ApproximateTime::now(v2);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v4)
    goto LABEL_6;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v52, v5 + 30.0);
  if (!v54)
    return result;
  v22 = v52;
  v21 = v53;
  v23 = (v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v24 = v23 - v52;
  if (v23 < v52)
    goto LABEL_60;
  v25 = v24 + 2;
  if (v24 > 0xFFFFFFFFFFFFFFFDLL || v25 > v53)
  {
    v21 = 0;
LABEL_60:
    v25 = 0;
    goto LABEL_34;
  }
  *(_WORD *)(v52 + v24) = 2822;
LABEL_34:
  v27 = (_QWORD *)((v22 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v27 >= v22 + v25)
  {
    v25 = (unint64_t)v27 - v22 + 8;
    if ((unint64_t)v27 - v22 > 0xFFFFFFFFFFFFFFF7 || v25 > v21)
      return result;
    *v27 = v4;
  }
  if (!v21)
    return result;
  v29 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v3 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v25 <= 0x10)
    v25 = 16;
  v31 = v29 + v25;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v3 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v31, v32));
  v34 = *(_DWORD *)(v3 + 108);
  if (v33 == 0x80000000 || v34 != 0)
  {
    v36 = v34 + 1;
    *(_DWORD *)(v3 + 108) = v36;
    if (v36 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v4;
LABEL_6:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v52, v6);
  if (!v54)
    return result;
  v8 = v52;
  v9 = v53;
  v10 = (_WORD *)((v52 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v11 = (unint64_t)v10 - v52;
  if ((unint64_t)v10 < v52)
  {
    v12 = 0;
    if (v53)
      goto LABEL_13;
LABEL_62:
    if (!v54)
    {
      __break(1u);
      return result;
    }
    v8 = v52;
    v10 = (_WORD *)((v52 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_64;
  }
  v12 = v11 + 2;
  if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v53)
  {
    *v10 = 1239;
    if (v9)
    {
LABEL_13:
      v14 = *(_QWORD *)(v3 + 64);
      v15 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v16 = *(_QWORD *)(v3 + 56);
      if (v15 + 16 >= v16)
        v15 = 0;
      if (v12 <= 0x10)
        v12 = 16;
      v17 = v15 + v12;
      if (v16 <= v17)
        v18 = 0;
      else
        v18 = v17;
      *(_QWORD *)(v3 + 72) = v18;
      v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v18, v19));
      if (v20 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      return result;
    }
    goto LABEL_62;
  }
LABEL_64:
  v37 = 0;
  v38 = (unint64_t)v10 >= v8;
  v39 = (unint64_t)v10 - v8;
  if (v38 && v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v53)
  {
    *(_WORD *)(v8 + v39) = 2821;
    v37 = v39 + 2;
  }
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v43 = v41 + v37;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(v3 + 8));
  v45 = v51;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1239;
  *(_QWORD *)(v46 + 8) = v4;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v55 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v55, 1, 0);
  v48 = v55;
  v55 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
}

uint64_t WebKit::WebGPU::RemotePresentationContextProxy::getCurrentTexture@<X0>(WebKit::WebGPU::RemotePresentationContextProxy *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  int v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::ApproximateTime *v41;
  unsigned int *v42;
  unsigned int v43;
  _DWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v59;
  WTF::ApproximateTime *v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;

  result = *((_QWORD *)this + 5);
  if (result)
  {
LABEL_2:
    ++*(_DWORD *)(result + 8);
LABEL_3:
    *a2 = result;
    return result;
  }
  v60 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v5 = *(_QWORD *)(*((_QWORD *)this + 4) + 96);
  v6 = *((_QWORD *)this + 2);
  WTF::ApproximateTime::now(v60);
  v8 = v7 + 30.0;
  if (*(_QWORD *)(v5 + 48) == v6)
  {
    while (1)
    {
      result = IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v62, v8);
      if (!v64)
        goto LABEL_49;
      v10 = v62;
      v9 = v63;
      v11 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v12 = v11 - v62;
      if (v11 >= v62)
      {
        v13 = v12 + 2;
        if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v63)
        {
          *(_WORD *)(v62 + v12) = 1237;
          goto LABEL_12;
        }
        v9 = 0;
      }
      v13 = 0;
LABEL_12:
      v15 = (_QWORD *)((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v15 >= v10 + v13)
      {
        v13 = (unint64_t)v15 - v10 + 8;
        if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFF7 || v13 > v9)
          goto LABEL_33;
        *v15 = v60;
      }
      if (v9)
      {
        v17 = *(_QWORD *)(v5 + 64);
        v18 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v19 = *(_QWORD *)(v5 + 56);
        if (v18 + 16 >= v19)
          v18 = 0;
        if (v13 <= 0x10)
          v13 = 16;
        v20 = v18 + v13;
        if (v19 <= v20)
          v21 = 0;
        else
          v21 = v20;
        *(_QWORD *)(v5 + 72) = v21;
        v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v21, v22));
        if (v23 == 0x80000000 || *(_DWORD *)(v5 + 108))
        {
          if (*(_BYTE *)(v5 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
          *(_DWORD *)(v5 + 108) = 0;
        }
        goto LABEL_50;
      }
LABEL_33:
      if (v64)
      {
        v24 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v62;
        if (v24 < v62)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v63)
          {
            *(_WORD *)(v62 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(v5 + 64);
        v28 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(v5 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(v5 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(v5 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(v5 + 8));
        v32 = v61;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 1237;
        *(_QWORD *)(v33 + 8) = v6;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v65 = (IPC::Encoder *)v33;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v33, (uint64_t *)&v60);
        v35 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v65, 1, 0);
        v36 = v65;
        v65 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v34);
          WTF::fastFree(v37, v38);
        }
        result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        if (v35)
          goto LABEL_49;
LABEL_50:
        v40 = *((_QWORD *)this + 3);
        v39 = *((_QWORD *)this + 4);
        v41 = v60;
        result = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(result + 8) = 1;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_QWORD *)result = off_1E34E4EA0;
        *(_QWORD *)(result + 32) = v41;
        ++*(_DWORD *)(v40 + 8);
        *(_QWORD *)(result + 40) = v40;
        v42 = (unsigned int *)(v39 + 24);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
        *(_QWORD *)(result + 48) = v39;
        v44 = (_DWORD *)*((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = result;
        if (!v44)
          goto LABEL_2;
        if (v44[2] != 1)
        {
          --v44[2];
          goto LABEL_2;
        }
        (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
        result = *((_QWORD *)this + 5);
        if (result)
          goto LABEL_2;
        goto LABEL_3;
      }
      __break(1u);
LABEL_92:
      v45 = 0;
LABEL_93:
      v48 = 0;
LABEL_64:
      v50 = (_QWORD *)((v10 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v10 + v48)
      {
        v48 = (unint64_t)v50 - v10 + 8;
        if ((unint64_t)v50 - v10 > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
          goto LABEL_49;
        *v50 = v6;
      }
      if (!v45)
        goto LABEL_49;
      v52 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v53 = *(_QWORD *)(v5 + 56);
      if (v52 + 16 >= v53)
        v52 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v54 = v52 + v48;
      if (v53 <= v54)
        v54 = 0;
      *(_QWORD *)(v5 + 72) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *(_DWORD *)(v5 + 108);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v59 = v57 + 1;
        *(_DWORD *)(v5 + 108) = v59;
        if (v59 >= *(_DWORD *)(v5 + 104))
        {
          if (*(_BYTE *)(v5 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
          *(_DWORD *)(v5 + 108) = 0;
        }
      }
      *(_QWORD *)(v5 + 48) = v6;
    }
  }
  result = IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v62, v7 + 30.0);
  if (v64)
  {
    v10 = v62;
    v45 = v63;
    v46 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v62;
    if (v46 < v62)
      goto LABEL_93;
    v48 = v47 + 2;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v63)
      goto LABEL_92;
    *(_WORD *)(v62 + v47) = 2822;
    goto LABEL_64;
  }
LABEL_49:
  *a2 = 0;
  return result;
}

WTF::ApproximateTime *WebKit::WebGPU::RemotePresentationContextProxy::present(WebKit::WebGPU::RemotePresentationContextProxy *this, int a2)
{
  WTF::ApproximateTime *result;
  uint64_t v5;
  uint64_t v6;
  double v7;
  char v8;

  result = (WTF::ApproximateTime *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!result)
  {
LABEL_4:
    if (!a2)
      return result;
    goto LABEL_5;
  }
  if (*((_DWORD *)result + 2) != 1)
  {
    --*((_DWORD *)result + 2);
    goto LABEL_4;
  }
  result = (WTF::ApproximateTime *)(*(uint64_t (**)(WTF::ApproximateTime *))(*(_QWORD *)result + 8))(result);
  if (!a2)
    return result;
LABEL_5:
  v8 = 0;
  v5 = *(_QWORD *)(*((_QWORD *)this + 4) + 96);
  v6 = *((_QWORD *)this + 2);
  WTF::ApproximateTime::now(result);
  return (WTF::ApproximateTime *)IPC::StreamClientConnection::send<Messages::RemotePresentationContext::Present,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, v7 + 30.0, (uint64_t)&v8, v6);
}

void WebKit::WebGPU::RemotePresentationContextProxy::getMetalTextureAsNativeImage(WebKit::WebGPU::RemotePresentationContextProxy *this)
{
  __break(0xC471u);
}

void WebKit::WebGPU::RemoteQuerySetProxy::~RemoteQuerySetProxy(WebKit::WebGPU::RemoteQuerySetProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  IPC::Encoder *v62;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v59, v4 + 30.0);
  if (!v61)
    goto LABEL_78;
  v21 = v59;
  v20 = v60;
  v22 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v59;
  if (v22 < v59)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v60)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v59 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v59, v5);
  if (!v61)
    goto LABEL_78;
  v7 = v59;
  v8 = v60;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v59;
  if ((unint64_t)v9 < v59)
  {
    v11 = 0;
    if (v60)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v60)
      goto LABEL_60;
    *v9 = 1241;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v61)
  {
    __break(1u);
LABEL_98:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v59;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_98;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v60)
    goto LABEL_98;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v3 + 8));
  v45 = v58;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1241;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v62 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v62, 1, 0);
  v48 = v62;
  v62 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v58);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E4848;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = *((_QWORD *)this + 2);
  if (v54)
  {
    *(_QWORD *)(v54 + 8) = 0;
    v55 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v55)
    {
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteQuerySetProxy::~RemoteQuerySetProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteQuerySetProxy::destroy(WebKit::WebGPU::RemoteQuerySetProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 4);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 1240;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 1240;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebGPU::RemoteQuerySetProxy::setLabelInternal(WTF::ApproximateTime **this, const WTF::String *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)a2;
  return WebKit::WebGPU::RemoteQuerySetProxy::send<Messages::RemoteQuerySet::SetLabel>(this[4], *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[6] + 22) + 96) + 96), &v3);
}

unsigned __int8 ***WebKit::WebGPU::RemoteQuerySetProxy::send<Messages::RemoteQuerySet::SetLabel>(WTF::ApproximateTime *a1, uint64_t a2, uint64_t **a3)
{
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  IPC::Encoder *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v50;
  uint64_t *v51;
  IPC::Encoder *v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;
  unint64_t v56;
  unint64_t v57;

  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(WTF::ApproximateTime **)(a2 + 48) == a1)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v52, v7);
      if (!v54)
        break;
      v55 = v52;
      v56 = v53;
      v57 = 0;
      v9 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= (unint64_t)v52;
      v11 = v9 - (_QWORD)v52;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v53)
        {
          v56 = 0;
        }
        else
        {
          *(_WORD *)((char *)v52 + v11) = 1242;
          v57 = v11 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v55, *a3);
      if (v56)
      {
        v14 = v57;
        v15 = *(_QWORD *)(a2 + 64);
        v16 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(a2 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v57 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(a2 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(a2 + 108))
        {
          if (*(_BYTE *)(a2 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
        return result;
      }
      if (v54)
      {
        v22 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v52;
        if (v22 < (unint64_t)v52)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v53)
          {
            *(_WORD *)((char *)v52 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a2 + 64);
        v26 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a2 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a2 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a2 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(a2 + 8));
        v30 = v51;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1242;
        *(_QWORD *)(v31 + 8) = a1;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v55 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, *a3);
        IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v55, 1, 0);
        v33 = v55;
        v55 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
      }
      __break(1u);
LABEL_76:
      v36 = 0;
LABEL_77:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v13 + v39)
      {
        v39 = v41 - (char *)v13 + 8;
        if ((unint64_t)(v41 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return result;
        *(_QWORD *)v41 = a1;
      }
      if (!v36)
        return result;
      v43 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a2 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a2 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a2 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        *(_DWORD *)(a2 + 108) = v50;
        if (v50 >= *(_DWORD *)(a2 + 104))
        {
          if (*(_BYTE *)(a2 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
      }
      *(_QWORD *)(a2 + 48) = a1;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v55, v6 + 30.0);
    if ((_BYTE)v57)
    {
      v13 = v55;
      v36 = v56;
      v37 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v55;
      if (v37 < (unint64_t)v55)
        goto LABEL_77;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v56)
        goto LABEL_76;
      *(_WORD *)((char *)v55 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteQueueProxy::~RemoteQueueProxy(WebKit::WebGPU::RemoteQueueProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  unint64_t v53;
  unint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  IPC::Encoder *v70;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 96) + 96);
  v3 = *((_QWORD *)this + 7);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v67, v4 + 30.0);
  if (!v69)
    goto LABEL_78;
  v21 = v67;
  v20 = v68;
  v22 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v67;
  if (v22 < v67)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v68)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v67 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v3;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v2 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v2 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v2 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v2 + 108) = v35;
    if (v35 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v67, v5);
  if (!v69)
    goto LABEL_78;
  v7 = v67;
  v8 = v68;
  v9 = (_WORD *)((v67 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v67;
  if ((unint64_t)v9 < v67)
  {
    v11 = 0;
    if (v68)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v68)
      goto LABEL_60;
    *v9 = 1244;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v2 + 64);
      v14 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v2 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v2 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v69)
  {
    __break(1u);
LABEL_113:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v67;
  v9 = (_WORD *)((v67 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_113;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v68)
    goto LABEL_113;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v2 + 64);
  v41 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v2 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v2 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)(v2 + 8));
  v45 = v66;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1244;
  *(_QWORD *)(v46 + 8) = v3;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v70 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v70, 1, 0);
  v48 = v70;
  v70 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v66);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = *((_QWORD *)this + 3);
  v54 = *((_QWORD *)this + 4);
  v55 = (WTF *)*((_QWORD *)this + 5);
  if (v53 <= v54)
  {
    if (v53 == v54)
      goto LABEL_105;
    v62 = (uint64_t *)((char *)v55 + 8 * v53);
    v63 = 8 * v54 - 8 * v53;
    do
    {
      v64 = *v62;
      *v62 = 0;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      ++v62;
      v63 -= 8;
    }
    while (v63);
  }
  else
  {
    if (v54)
    {
      v56 = 8 * v54;
      do
      {
        v57 = *(_QWORD *)v55;
        *(_QWORD *)v55 = 0;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
        v55 = (WTF *)((char *)v55 + 8);
        v56 -= 8;
      }
      while (v56);
      v55 = (WTF *)*((_QWORD *)this + 5);
      v53 = *((_QWORD *)this + 3);
    }
    v58 = *((unsigned int *)this + 12);
    if (v53 != v58)
    {
      v59 = (uint64_t *)((char *)v55 + 8 * v53);
      v60 = 8 * v58 - 8 * v53;
      do
      {
        v61 = *v59;
        *v59 = 0;
        if (v61)
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
        ++v59;
        v60 -= 8;
      }
      while (v60);
    }
  }
  v55 = (WTF *)*((_QWORD *)this + 5);
LABEL_105:
  if (v55)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v55, v6);
  }
  *(_QWORD *)this = off_1E34E4878;
  v65 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v65 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteQueueProxy::~RemoteQueueProxy(this);
  WTF::fastFree(v1, v2);
}

WTF *WebKit::WebGPU::RemoteQueueProxy::submit(WTF *result, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  IPC::Encoder *v8;
  _QWORD *v9;
  unint64_t v10;
  WTF::ApproximateTime *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  void *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  unint64_t v43;
  IPC::Encoder *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unsigned int v58;
  WTF *v59;
  uint64_t v60;
  uint64_t *v61;
  IPC::Encoder *v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;
  unint64_t v66;
  unint64_t v67;

  v2 = result;
  v59 = 0;
  v60 = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v3)
    goto LABEL_12;
  if (v3 >> 29)
  {
    __break(0xC471u);
    goto LABEL_93;
  }
  LODWORD(v60) = *(_DWORD *)(a2 + 12);
  v59 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)a2;
    v7 = 8 * v5;
    do
    {
      v8 = (IPC::Encoder *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 8) + 48))(*((_QWORD *)v2 + 8), *v6);
      if (v8)
      {
        v65 = v8;
        if (HIDWORD(v60) == (_DWORD)v60)
        {
          v9 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, HIDWORD(v60) + 1, (unint64_t)&v65);
          *((_QWORD *)v59 + HIDWORD(v60)) = *v9;
        }
        else
        {
          *((_QWORD *)v59 + HIDWORD(v60)) = v8;
        }
        ++HIDWORD(v60);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    v10 = HIDWORD(v60);
  }
  else
  {
LABEL_12:
    v10 = 0;
  }
  v11 = (WTF::ApproximateTime *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v59, v10);
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 9) + 96) + 96);
  v13 = *((_QWORD *)v2 + 7);
  WTF::ApproximateTime::now(v11);
  v15 = v14 + 30.0;
  if (*(_QWORD *)(v12 + 48) == v13)
    goto LABEL_14;
  IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 56, &v65, v14 + 30.0);
  if (!(_BYTE)v67)
    goto LABEL_53;
  v44 = v65;
  v43 = v66;
  v45 = ((unint64_t)v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v46 = v45 - (_QWORD)v65;
  if (v45 >= (unint64_t)v65)
  {
    v47 = v46 + 2;
    if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v66)
    {
      *(_WORD *)((char *)v65 + v46) = 2822;
      goto LABEL_63;
    }
    v43 = 0;
  }
  v47 = 0;
LABEL_63:
  v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v49 >= (char *)v44 + v47)
  {
    v47 = v49 - (char *)v44 + 8;
    if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43)
      goto LABEL_53;
    *(_QWORD *)v49 = v13;
  }
  if (v43)
  {
    v51 = (*(_QWORD *)(v12 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = *(_QWORD *)(v12 + 56);
    if (v51 + 16 >= v52)
      v51 = 0;
    if (v47 <= 0x10)
      v47 = 16;
    v53 = v51 + v47;
    if (v52 <= v53)
      v53 = 0;
    *(_QWORD *)(v12 + 72) = v53;
    v54 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v12 + 64) + 16) + 128);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v53, v54));
    v56 = *(_DWORD *)(v12 + 108);
    if (v55 == 0x80000000 || v56 != 0)
    {
      v58 = v56 + 1;
      *(_DWORD *)(v12 + 108) = v58;
      if (v58 >= *(_DWORD *)(v12 + 104))
      {
        if (*(_BYTE *)(v12 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v12 + 84));
        *(_DWORD *)(v12 + 108) = 0;
      }
    }
    *(_QWORD *)(v12 + 48) = v13;
LABEL_14:
    IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 56, &v62, v15);
    if (v64)
    {
      v65 = v62;
      v66 = v63;
      v67 = 0;
      v17 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = v17 >= (unint64_t)v62;
      v19 = v17 - (_QWORD)v62;
      if (v18)
      {
        if (v19 > 0xFFFFFFFFFFFFFFFDLL || v19 + 2 > v63)
        {
          v66 = 0;
        }
        else
        {
          *(_WORD *)((char *)v62 + v19) = 1247;
          v67 = v19 + 2;
        }
      }
      result = (WTF *)IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v65, (uint64_t)&v59);
      if (v66)
      {
        v21 = v67;
        v22 = *(_QWORD *)(v12 + 64);
        v23 = (*(_QWORD *)(v12 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = *(_QWORD *)(v12 + 56);
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v67 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        *(_QWORD *)(v12 + 72) = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *(_DWORD *)(v12 + 108))
        {
          if (*(_BYTE *)(v12 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v12 + 84));
          *(_DWORD *)(v12 + 108) = 0;
        }
        goto LABEL_53;
      }
      if (v64)
      {
        v29 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - (_QWORD)v62;
        if (v29 < (unint64_t)v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)((char *)v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(v12 + 64);
        v33 = (*(_QWORD *)(v12 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(v12 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(v12 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(v12 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(v12 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 1247;
        *(_QWORD *)(v38 + 8) = v13;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v38, (uint64_t)&v59);
        IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v40 = v65;
        v65 = 0;
        if (v40)
        {
          IPC::Encoder::~Encoder(v40, v39);
          WTF::fastFree(v41, v42);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        goto LABEL_53;
      }
LABEL_93:
      __break(1u);
      return result;
    }
  }
LABEL_53:
  result = v59;
  if (v59)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    return (WTF *)WTF::fastFree(result, v16);
  }
  return result;
}

