void sub_19738E444(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF *a11, int a12, WTF *a13, int a14, uint64_t a15, uint64_t a16, WTF *a17, int a18)
{
  if (a17)
    WTF::fastFree(a17, a2);
  _Unwind_Resume(exception_object);
}

void sub_19738E4D0(int a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  if (a15)
    WTF::fastFree(a15, a2);
  JUMPOUT(0x19738E4C0);
}

uint64_t *WebKit::WebPage::getContentsAsAttributedString(uint64_t a1, Node *a2)
{
  uint64_t v3;
  BOOL v4;
  char v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t *result;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[40];

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  v5 = !v4;
  if (v4)
  {
    v6 = *(WebCore **)(v3 + 296);
    *((_DWORD *)v6 + 6) += 2;
    v9 = v6;
    WebCore::makeRangeSelectingNodeContents(v6, a2);
    WebCore::attributedString();
  }
  else
  {
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v12);
  }
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  result = (uint64_t *)MEMORY[0x19AEAEECC](v12);
  if ((v5 & 1) == 0)
  {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v9);
  }
  return result;
}

void sub_19738E5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::pdfSnapshotAtSize@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x2_t a4@<X3>, __int16 a5@<W4>, __CFData **a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  WebKit::WebPage *v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::LocalFrameView *v12;
  int64x2_t v13;
  CGContext *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  CFDataRef v19;
  __int32 v20;
  __CFData **v21;
  CGDataConsumer *cf;
  __CFData *Mutable;
  WebCore::LocalFrameView *v24;
  FloatSize v26;
  UInt8 bytes[8];
  uint64_t v28;
  double v29;
  double v30;
  CGRect mediaBox;
  int32x2_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[752];
  uint64_t v36;
  _QWORD v37[3];

  v37[1] = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v34 = a3;
  v32 = a4;
  v7 = *(_QWORD *)(*((_QWORD *)result + 11) + 24);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0 && !*(_BYTE *)(v8 + 144))
  {
    v9 = (WebKit::WebPage *)result;
    v10 = (unsigned int *)(v8 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(WebCore::LocalFrameView **)(v8 + 288);
    if (v12)
    {
      ++*((_DWORD *)v12 + 2);
      v24 = v12;
      Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      v21 = a6;
      cf = CGDataConsumerCreateWithCFData(Mutable);
      mediaBox.origin.x = 0.0;
      mediaBox.origin.y = 0.0;
      v13.i64[0] = v32.i32[0];
      v13.i64[1] = v32.i32[1];
      mediaBox.size = (CGSize)vcvtq_f64_s64(v13);
      v14 = CGPDFContextCreate(cf, &mediaBox, 0);
      v15 = v32.u32[1];
      if (v32.i32[1] >= 1)
      {
        v16 = HIDWORD(v33);
        v17 = *MEMORY[0x1E0C9DB58];
        do
        {
          if (v15 >= 0x3840)
            v18 = 14400;
          else
            v18 = v15;
          v32.i32[1] = v18;
          HIDWORD(v34) = v18;
          HIDWORD(v33) = v16;
          *(_QWORD *)bytes = 0;
          v28 = 0;
          v29 = (double)v32.i32[0];
          v30 = (double)v18;
          v19 = CFDataCreate(0, bytes, 32);
          v36 = v17;
          v37[0] = v19;
          CGPDFContextBeginPage(v14, (CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, &v36, 1));
          WebCore::GraphicsContextCG::GraphicsContextCG();
          v26 = (FloatSize)0xBF8000003F800000;
          WebCore::GraphicsContextCG::scale((WebCore::GraphicsContextCG *)v35, &v26);
          WebCore::GraphicsContextCG::translate((WebCore::GraphicsContextCG *)v35, 0.0, (float)-v32.i32[1]);
          WebKit::WebPage::paintSnapshotAtSize(v9, (const WebCore::IntRect *)&v33, &v32, a5, (WebCore::LocalFrame *)v8, v12, (WebCore::GraphicsContext *)v35);
          CGPDFContextEndPage(v14);
          v20 = v32.i32[1];
          WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)v35);
          if (v19)
            CFRelease(v19);
          v16 += v20;
          v15 -= 14400;
          v12 = v24;
        }
        while (v15 + 14400 > 0x3840);
      }
      CGPDFContextClose(v14);
      *v21 = Mutable;
      if (v14)
        CFRelease(v14);
      if (cf)
        CFRelease(cf);
      if (*((_DWORD *)v12 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v12 + 8))(v12);
      else
        --*((_DWORD *)v12 + 2);
    }
    else
    {
      *a6 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
  }
  else
  {
    *a6 = 0;
  }
  return result;
}

void sub_19738E8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, CFTypeRef a12, _DWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  unsigned int *v27;
  const void *v28;

  if (v28)
    CFRelease(v28);
  if (cf)
    CFRelease(cf);
  if (a12)
    CFRelease(a12);
  if (a13[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)a13 + 8))(a13);
  else
    --a13[2];
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v27);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::getProcessDisplayName(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  v5 = 0;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, &v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19738E9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::isTransparentOrFullyClipped(WebKit::WebPage *this, const WebCore::Element *a2)
{
  WebCore::RenderObject *v2;
  WebCore::RenderLayer *v3;
  uint64_t result;

  v2 = (WebCore::RenderObject *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL);
  if (!v2)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    v3 = (WebCore::RenderLayer *)WebCore::RenderObject::enclosingLayer((WebCore::RenderObject *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL));
    if (v3 && (WebCore::RenderLayer::isTransparentRespectingParentFrames(v3) & 1) != 0)
      return 1;
    else
      return WebCore::RenderObject::hasNonEmptyVisibleRectRespectingParentFrames(v2);
  }
  return result;
}

uint64_t WebKit::WebPage::getPlatformEditorStateCommon(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _BYTE *v6;
  WTF::StringImpl *v7;
  int hasStyle;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WebCore::EditingStyle *v14;
  int v15;
  unsigned __int16 v16;
  int v17;
  char v18;
  void *v19;
  WebCore *v20;
  Node *v21;
  WebCore *v22;
  uint64_t v23;
  char v24;
  WebCore::Editor *v25;
  const WebCore::Node *v26;
  WebKit::WebPage *v27;
  uint64_t v28;
  WebCore::Node *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::EditingStyle *v34;

  if (!*(_BYTE *)(a3 + 336))
    return result;
  if (!*(_BYTE *)(a3 + 464))
    return result;
  v5 = a2;
  v6 = *(_BYTE **)(*(_QWORD *)(a2 + 296) + 3064);
  if (!v6[153])
    return result;
  if (!*(_BYTE *)(a3 + 13))
    goto LABEL_58;
  v3 = result;
  WebCore::EditingStyle::styleAtSelectionStart();
  if (v34)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    hasStyle = WebCore::EditingStyle::hasStyle();
    v33 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v7);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (hasStyle)
      *(_BYTE *)(a3 + 32) |= 1u;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v33 = v29;
    if ((WebCore::EditingStyle::hasStyle() & 1) != 0)
    {
      v10 = 1;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = WebCore::EditingStyle::hasStyle();
      v32 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v9);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
    v11 = v33;
    v33 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (v10)
      *(_BYTE *)(a3 + 32) |= 2u;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = WebCore::EditingStyle::hasStyle();
    v33 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v12);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (v13)
      *(_BYTE *)(a3 + 32) |= 4u;
    v14 = v34;
    if (*((_QWORD *)v34 + 1))
    {
      WebCore::StyleProperties::propertyAsValueID();
      v15 = WebCore::StyleProperties::propertyAsValueID();
      if ((v15 & 0xFF0000) != 0)
        v16 = v15;
      else
        v16 = 0;
      v17 = v16 - 258;
      v18 = 2;
      switch(v17)
      {
        case 0:
        case 4:
          v18 = 1;
          goto LABEL_39;
        case 1:
        case 5:
          goto LABEL_39;
        case 2:
        case 6:
          v18 = 3;
          goto LABEL_39;
        case 3:
          v18 = 4;
LABEL_39:
          *(_BYTE *)(a3 + 48) = v18;
          break;
        default:
          break;
      }
      WebCore::StyleProperties::propertyAsColor();
      if ((_BYTE)v30)
        WebCore::Color::operator=();
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v19);
      v14 = v34;
      v34 = 0;
      if (!v14)
        goto LABEL_44;
    }
    else
    {
      v34 = 0;
    }
    WTF::RefCounted<WebCore::EditingStyle>::deref(v14);
  }
LABEL_44:
  v20 = (WebCore *)WebCore::Position::containerNode((WebCore::Position *)(v6 + 120));
  v22 = v20;
  if (v20)
    *((_DWORD *)v20 + 6) += 2;
  WebCore::enclosingList(v20, v21);
  if (v22)
  {
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v22);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
  }
  result = (uint64_t)v29;
  if (v29)
  {
    v23 = *(_QWORD *)(*((_QWORD *)v29 + 12) + 24);
    if (v23 == *(_QWORD *)(*MEMORY[0x1E0DD5F78] + 24))
    {
      v24 = 2;
    }
    else
    {
      if (v23 != *(_QWORD *)(*MEMORY[0x1E0DD5F58] + 24))
      {
LABEL_55:
        v29 = 0;
        if (*(_DWORD *)(result + 24) == 2)
          goto LABEL_72;
        *(_DWORD *)(result + 24) -= 2;
        goto LABEL_57;
      }
      v24 = 1;
    }
    *(_BYTE *)(a3 + 64) = v24;
    goto LABEL_55;
  }
LABEL_57:
  while (1)
  {
    v25 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v5 + 296));
    *(_BYTE *)(a3 + 65) = WebCore::Editor::baseWritingDirectionForSelectionStart(v25);
    v29 = (WebCore::Node *)(v6 + 56);
    v30 = v3;
    v31 = v5;
    *(_BYTE *)(a3 + 67) = WebKit::WebPage::getPlatformEditorStateCommon(WebCore::LocalFrame const&,WebKit::EditorState &)const::$_0::operator()((uint64_t)&v29);
LABEL_58:
    result = WebCore::enclosingTextFormControl();
    v5 = result;
    if (!result)
    {
      result = WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)(v6 + 56));
      v5 = result;
      if (!result)
        break;
    }
    *(_DWORD *)(v5 + 24) += 2;
    if (*(_BYTE *)(a3 + 464))
    {
      v27 = (WebKit::WebPage *)WebKit::WebPage::rootViewInteractionBounds((WebKit::WebPage *)v5, v26);
      *(_QWORD *)(a3 + 368) = v27;
      *(_QWORD *)(a3 + 376) = v28;
      if (*(_BYTE *)(a3 + 13))
        result = WebKit::WebPage::isTransparentOrFullyClipped(v27, (const WebCore::Element *)v5);
      else
        result = 0;
      *(_BYTE *)(a3 + 66) = result;
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      return result;
    }
    __break(1u);
LABEL_72:
    if ((*(_WORD *)(result + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  return result;
}

void sub_19738EF2C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WebCore::EditingStyle *a14)
{
  WebCore::EditingStyle *v15;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  v15 = a14;
  a14 = 0;
  if (v15)
    WTF::RefCounted<WebCore::EditingStyle>::deref(v15);
  _Unwind_Resume(a1);
}

void sub_19738EFD0()
{
  uint64_t v0;

  if (*(_DWORD *)(v0 + 24) == 2)
  {
    if ((*(_WORD *)(v0 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v0);
  }
  else
  {
    *(_DWORD *)(v0 + 24) -= 2;
  }
  JUMPOUT(0x19738EFC8);
}

uint64_t WebKit::WebPage::getPlatformEditorStateCommon(WebCore::LocalFrame const&,WebKit::EditorState &)const::$_0::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Editor *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BOOL8 v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (!WebCore::VisibleSelection::canEnableWritingSuggestions(*(WebCore::VisibleSelection **)a1))
    return 0;
  v3 = *(_QWORD *)(v2 + 2328);
  if (!v3)
    return 1;
  if (!*(_QWORD *)(v3 + 8))
    return 1;
  v4 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(*(_QWORD *)(a1 + 16) + 296));
  v5 = WebCore::Editor::nodeBeforeWritingSuggestions(v4);
  if (!v5)
    return 1;
  v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 2;
  v7 = *(_QWORD *)(v2 + 2328);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  v8 = v7 == v5;
  if (v6)
  {
    *(_DWORD *)(v5 + 24) = v6;
  }
  else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  return v8;
}

void WebKit::WebPage::getPDFFirstPageSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::LocalFrame *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::PluginView *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  WebKit::WebProcess *v18;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = WebKit::WebProcess::webFrame((uint64_t)v7, a2, a3);
  if (v8)
  {
    v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v11 = *(_QWORD *)(v9 + 24);
    if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0)
    {
      if (*(_BYTE *)(v12 + 144))
        v13 = 0;
      else
        v13 = v12;
    }
    else
    {
      v13 = 0;
    }
    v14 = (WebKit::PluginView *)WebKit::WebPage::pluginViewForFrame(v13, v10);
    if (v14)
    {
      v15 = WebKit::PluginView::pdfDocumentSizeForPrinting(v14);
      v16 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, float))(*(_QWORD *)v16 + 16))(v16, v15);
    }
    else
    {
      v16 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)v16 + 16))(v16, 0.0, 0.0);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    v17 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, float, float))(*(_QWORD *)v17 + 16))(v17, 0.0, 0.0);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_19738F204(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::replaceImageForRemoveBackground(uint64_t a1, const ElementContext *a2, uint64_t a3, char *a4, WTF *a5)
{
  unsigned int *result;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Node *v25;
  int v26;
  uint64_t v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int **v41;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unsigned int **v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  int i;
  unsigned int v59;
  unsigned int **v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  void *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  WebCore::Node *v73;
  void *v74;
  Node *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  double v82;
  double v83;
  double v84;
  unsigned int v85;
  void *v86;
  WebCore::Node *v87[3];
  WebCore::Node *v88;
  int v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93[2];
  uint64_t v94[2];
  char v95;
  WebCore::Node *v96;
  int v97;
  char v98;
  char v99;
  uint64_t v100[2];
  uint64_t v101[14];
  const WTF::String *v102[2];
  uint64_t v103;
  int v104;
  char v105;
  uint64_t v106;
  int v107;
  char v108;
  uint64_t v109;
  int v110;
  char v111;
  uint64_t v112;
  int v113;
  char v114;
  uint64_t v115;
  int v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  __int16 v121;
  char v122;
  WebCore::Document *v123;
  WebCore::Node *v124;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v87[0]);
  v11 = result;
  if (result)
  {
    v12 = result + 2;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = v87[0];
  v87[0] = 0;
  if (v14)
  {
    if (!*(_DWORD *)v14)
    {
      __break(0xC471u);
      JUMPOUT(0x19738FADCLL);
    }
    --*(_DWORD *)v14;
  }
  if (!result)
    return result;
  WebKit::WebPage::elementForContext(a1, a2, &v124);
  v15 = v124;
  if (!v124)
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11 + 2);
  if ((WebCore::Node::isContentEditable(v124) & 1) == 0)
    goto LABEL_113;
  v16 = *(_QWORD *)(*((_QWORD *)v15 + 5) + 8);
  *(_DWORD *)(v16 + 24) += 2;
  v123 = (WebCore::Document *)v16;
  if (*((_QWORD *)v11 + 37) != v16)
  {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v123);
    goto LABEL_113;
  }
  v17 = *(_QWORD *)(v16 + 3064);
  v18 = *(_QWORD *)(v17 + 56);
  if (v18)
    *(_DWORD *)(v18 + 24) += 2;
  v103 = v18;
  v104 = *(_DWORD *)(v17 + 64);
  v105 = *(_BYTE *)(v17 + 68);
  v19 = *(_QWORD *)(v17 + 72);
  if (v19)
    *(_DWORD *)(v19 + 24) += 2;
  v106 = v19;
  v107 = *(_DWORD *)(v17 + 80);
  v108 = *(_BYTE *)(v17 + 84);
  v20 = *(_QWORD *)(v17 + 88);
  if (v20)
    *(_DWORD *)(v20 + 24) += 2;
  v109 = v20;
  v110 = *(_DWORD *)(v17 + 96);
  v111 = *(_BYTE *)(v17 + 100);
  v21 = *(_QWORD *)(v17 + 104);
  if (v21)
    *(_DWORD *)(v21 + 24) += 2;
  v112 = v21;
  v113 = *(_DWORD *)(v17 + 112);
  v114 = *(_BYTE *)(v17 + 116);
  v22 = *(_QWORD *)(v17 + 120);
  if (v22)
    *(_DWORD *)(v22 + 24) += 2;
  v115 = v22;
  v116 = *(_DWORD *)(v17 + 128);
  v117 = *(_BYTE *)(v17 + 132);
  v23 = *(_QWORD *)(v17 + 136);
  if (v23)
    *(_DWORD *)(v23 + 24) += 2;
  v118 = v23;
  v119 = *(_DWORD *)(v17 + 144);
  v120 = *(_BYTE *)(v17 + 148);
  v121 = *(_WORD *)(v17 + 152);
  v122 = *(_BYTE *)(v17 + 154);
  v24 = WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)&v103);
  if (!v24)
  {
    v24 = WebCore::Document::body(v123);
    if (!v24)
      goto LABEL_112;
  }
  *(_DWORD *)(v24 + 24) += 2;
  WebCore::VisibleSelection::range((WebCore::VisibleSelection *)&v103);
  v26 = v89;
  if ((_BYTE)v89)
  {
    WebCore::makeRangeSelectingNodeContents((WebCore *)v24, v25);
    WebCore::SimpleRange::SimpleRange();
    WebCore::characterCount();
    WebCore::characterCount();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v101);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v100);
    v27 = WebCore::characterCount();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v94);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v93);
  }
  else
  {
    v27 = 0;
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v87);
  WebKit::OverridePasteboardForSelectionReplacement::OverridePasteboardForSelectionReplacement((uint64_t)v102, a3, a4, a5);
  WebCore::IgnoreSelectionChangeForScope::IgnoreSelectionChangeForScope((WebCore::IgnoreSelectionChangeForScope *)v100, (WebCore::LocalFrame *)v11);
  WebCore::Document::editor(*((WebCore::Document **)v11 + 37));
  {
    v87[0] = (WebCore::Node *)"ReplaceSelectionPasteboard";
    v87[1] = (WebCore::Node *)27;
    WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::replaceSelectionPasteboardName(void)::string, (uint64_t)v87);
  }
  WebCore::Editor::replaceNodeFromPasteboard();
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::VisiblePosition::previous();
  v28 = v96;
  if (v96)
    *((_DWORD *)v96 + 6) += 2;
  v88 = v28;
  v89 = v97;
  v90 = v98;
  v91 = v99;
  WebCore::makeSimpleRange();
  v29 = v88;
  v88 = 0;
  if (v29)
  {
    if (*((_DWORD *)v29 + 6) == 2)
    {
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v29);
    }
    else
    {
      *((_DWORD *)v29 + 6) -= 2;
    }
  }
  v30 = v87[0];
  v87[0] = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  if (!v95)
    goto LABEL_96;
  WebCore::TextIterator::TextIterator();
  v31 = MEMORY[0x1E0DD5FB0];
  while (1)
  {
    if (!v92)
      goto LABEL_95;
    v32 = WebCore::TextIterator::node((WebCore::TextIterator *)v87);
    v34 = v32;
    if (v32)
    {
      if ((*(_WORD *)(v32 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) == *(_QWORD *)(*(_QWORD *)v31 + 24))
      {
        break;
      }
    }
    WebCore::TextIterator::advance((WebCore::TextIterator *)v87);
  }
  *(_DWORD *)(v32 + 24) += 2;
  v35 = (uint64_t *)(a1 + 2448);
  v36 = *(_DWORD *)(a1 + 2456) + 1;
  *(_DWORD *)(a1 + 2456) = v36;
  if (v36 <= *(_DWORD *)(a1 + 2460))
    goto LABEL_62;
  v37 = *v35;
  if (!*v35)
    goto LABEL_59;
  v38 = *(_DWORD *)(v37 - 4);
  if (!v38)
    goto LABEL_125;
  v39 = 0;
  v40 = v38 - 1;
  do
  {
    v41 = (unsigned int **)(v37 + 8 * v40);
    if ((unint64_t)*v41 + 1 >= 2 && !*((_QWORD *)*v41 + 1))
    {
      *WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::~Ref(v41, v33) = (unsigned int *)-1;
      ++v39;
    }
  }
  while ((unint64_t)v40--);
  v37 = *v35;
  if (v39)
  {
    *(_DWORD *)(v37 - 16) += v39;
    v43 = *v35;
    if (*v35)
      v44 = *(_DWORD *)(v43 - 12);
    else
      v44 = 0;
    *(_DWORD *)(v43 - 12) = v44 - v39;
    v37 = *v35;
  }
  if (v37)
  {
    v76 = *(_DWORD *)(v37 - 4);
    v77 = *(unsigned int *)(v37 - 12);
    if (v76 >= 9 && 6 * (int)v77 < v76)
    {
      v79 = (v77 - 1) | ((v77 - 1) >> 1) | ((((_DWORD)v77 - 1) | ((v77 - 1) >> 1)) >> 2);
      v80 = v79 | (v79 >> 4) | ((v79 | (v79 >> 4)) >> 8);
      v81 = (v80 | HIWORD(v80)) + 1;
      if (v81 > 0x400)
      {
        if (v81 > 2 * v77)
          goto LABEL_149;
      }
      else if (3 * v81 > 4 * v77)
      {
LABEL_134:
        v82 = (double)v77;
        v83 = (double)v81;
        v84 = 0.604166667;
        goto LABEL_150;
      }
      LODWORD(v81) = 2 * v81;
      if (v81 <= 0x400)
        goto LABEL_134;
LABEL_149:
      v82 = (double)v77;
      v83 = (double)v81;
      v84 = 0.416666667;
LABEL_150:
      if (v83 * v84 <= v82)
        LODWORD(v81) = 2 * v81;
      if (v81 <= 8)
        v85 = 8;
      else
        v85 = v81;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)(a1 + 2448), v85);
      v45 = 0;
      v37 = *(_QWORD *)(a1 + 2448);
      *(_DWORD *)(a1 + 2456) = 0;
      if (!v37)
        goto LABEL_60;
LABEL_126:
      v45 = *(_DWORD *)(v37 - 12);
      v46 = 0x7FFFFFFF;
      if (v45 >= 0x7FFFFFFF)
        goto LABEL_61;
      goto LABEL_60;
    }
LABEL_125:
    *(_DWORD *)(a1 + 2456) = 0;
    goto LABEL_126;
  }
LABEL_59:
  v45 = 0;
  *(_DWORD *)(a1 + 2456) = 0;
LABEL_60:
  v46 = v45;
LABEL_61:
  *(_DWORD *)(a1 + 2460) = 2 * v46;
LABEL_62:
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)(v34 + 16), v34);
  v47 = *(_QWORD *)(v34 + 16);
  v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 + 1, v48));
  do
    v50 = __ldaxr(v48);
  while (__stlxr(v50 + 1, v48));
  v51 = *v35;
  if (*v35
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(v35),
        (v51 = *v35) != 0))
  {
    v52 = *(_DWORD *)(v51 - 8);
  }
  else
  {
    v52 = 0;
  }
  v53 = 0;
  v54 = ((unint64_t)v48 + ~(v47 << 32)) ^ (((unint64_t)v48 + ~(v47 << 32)) >> 22);
  v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
  v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
  v57 = (v56 >> 31) ^ v56;
  for (i = 1; ; ++i)
  {
    v59 = v57 & v52;
    v60 = (unsigned int **)(v51 + 8 * v59);
    v61 = *v60;
    if (*v60 == (unsigned int *)-1)
    {
      v53 = (unsigned int **)(v51 + 8 * v59);
      goto LABEL_74;
    }
    if (!v61)
      break;
    if (v61 == v48)
    {
      if (!v48)
        goto LABEL_93;
      do
      {
        v62 = __ldaxr(v48);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v48));
      if (!v63)
      {
        atomic_store(1u, v48);
        WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v48 + 4), v53);
        WTF::fastFree((WTF *)v48, v64);
      }
      goto LABEL_90;
    }
LABEL_74:
    v57 = i + v59;
  }
  if (v53)
  {
    *v53 = 0;
    --*(_DWORD *)(*v35 - 16);
    *v53 = v48;
  }
  else
  {
    *v60 = v48;
    v53 = (unsigned int **)(v51 + 8 * v59);
  }
  v65 = *v35;
  if (*v35)
    v66 = *(_DWORD *)(v65 - 12) + 1;
  else
    v66 = 1;
  *(_DWORD *)(v65 - 12) = v66;
  v67 = *v35;
  if (*v35)
    v68 = *(_DWORD *)(v67 - 12);
  else
    v68 = 0;
  v69 = (*(_DWORD *)(v67 - 16) + v68);
  v70 = *(unsigned int *)(v67 - 4);
  if (v70 > 0x400)
  {
    if (v70 <= 2 * v69)
LABEL_88:
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(v35);
  }
  else if (3 * v70 <= 4 * v69)
  {
    goto LABEL_88;
  }
  if (!v48)
    goto LABEL_93;
  do
  {
LABEL_90:
    v71 = __ldaxr(v48);
    v72 = v71 - 1;
  }
  while (__stlxr(v72, v48));
  if (!v72)
  {
    atomic_store(1u, v48);
    WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v48 + 4), v53);
    WTF::fastFree((WTF *)v48, v86);
  }
LABEL_93:
  if (*(_DWORD *)(v34 + 24) == 2)
  {
    if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v34);
  }
  else
  {
    *(_DWORD *)(v34 + 24) -= 2;
  }
LABEL_95:
  MEMORY[0x19AEAD924](v87);
LABEL_96:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v93);
  v73 = v96;
  v96 = 0;
  if (v73)
  {
    if (*((_DWORD *)v73 + 6) == 2)
    {
      if ((*((_WORD *)v73 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v73);
    }
    else
    {
      *((_DWORD *)v73 + 6) -= 2;
    }
  }
  MEMORY[0x19AEB2B98](v100);
  WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement(v102, v74);
  if (HIBYTE(v121) && (!v115 || (*(_BYTE *)(v115 + 22) & 8) != 0) && (!v118 || (*(_BYTE *)(v118 + 22) & 8) != 0))
  {
    WebCore::FrameSelection::setSelection();
  }
  else if (v26 && (*(_BYTE *)(v24 + 22) & 8) != 0)
  {
    WebCore::makeRangeSelectingNodeContents((WebCore *)v24, v75);
    if (v27 == WebCore::characterCount())
    {
      WebCore::resolveCharacterRange();
      WebCore::VisibleSelection::VisibleSelection();
      WebCore::FrameSelection::setSelection();
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v87);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v94);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v93);
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v101);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v100);
  }
  if (*(_DWORD *)(v24 + 24) == 2)
  {
    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v24);
  }
  else
  {
    *(_DWORD *)(v24 + 24) -= 2;
  }
LABEL_112:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v103);
  v15 = v124;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v123);
  if (v15)
  {
LABEL_113:
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11 + 2);
}

void sub_19738FC6C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, uint64_t a15, WebCore::Node *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,WebCore::Node *a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v59;
  unsigned int v60;
  void *v61;
  WebCore::Node *v62;
  void *v63;
  uint64_t v64;

  if (v55)
  {
    do
    {
      v59 = __ldaxr(v55);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v55));
    if (!v60)
    {
      atomic_store(1u, v55);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v55 + 4), a2);
      WTF::fastFree((WTF *)v55, v61);
    }
  }
  if (*(_DWORD *)(v56 + 24) == 2)
  {
    if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v56);
  }
  else
  {
    *(_DWORD *)(v56 + 24) -= 2;
  }
  MEMORY[0x19AEAD924](&a13);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a45);
  v62 = a50;
  a50 = 0;
  if (v62)
  {
    if (*((_DWORD *)v62 + 6) == 2)
    {
      if ((*((_WORD *)v62 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v62);
    }
    else
    {
      *((_DWORD *)v62 + 6) -= 2;
    }
  }
  MEMORY[0x19AEB2B98](&a53);
  WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement((const WTF::String **)(v57 - 224), v63);
  if (*(_DWORD *)(v54 + 24) == 2)
  {
    if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v54);
  }
  else
  {
    *(_DWORD *)(v54 + 24) -= 2;
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v57 - 208));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v57 - 104));
  v64 = *(_QWORD *)(v57 - 96);
  if (v64)
  {
    if (*(_DWORD *)(v64 + 24) == 2)
    {
      if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef(*(WebCore::Node **)(v57 - 96));
    }
    else
    {
      *(_DWORD *)(v64 + 24) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v53 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebPage::replaceSelectionWithPasteboardData(uint64_t a1, uint64_t a2, char *a3, WTF *a4)
{
  _QWORD *v5;
  void *v6;
  const WTF::String *v7[2];
  uint64_t v8[2];

  WebKit::OverridePasteboardForSelectionReplacement::OverridePasteboardForSelectionReplacement((uint64_t)v7, a2, a3, a4);
  {
    v8[0] = (uint64_t)"ReplaceSelectionPasteboard";
    v8[1] = 27;
    WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::replaceSelectionPasteboardName(void)::string, (uint64_t)v8);
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34D6E28;
  v8[0] = (uint64_t)v5;
  WebKit::WebPage::readSelectionFromPasteboard(a1, (const WTF::String *)&WebKit::replaceSelectionPasteboardName(void)::string, v8);
  if (v8[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v8[0] + 8))(v8[0]);
  WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement(v7, v6);
}

void sub_197390000(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const WTF::String *a9)
{
  WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement(&a9, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::readSelectionFromPasteboard(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::Document *v8;
  WebCore::Editor *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v5 = WebCore::FocusController::focusedOrMainFrame(*(WebCore::FocusController **)(*(_QWORD *)(a1 + 48) + 72));
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *(WebCore::Document **)(v5 + 296);
    if (*(_BYTE *)(*((_QWORD *)v8 + 383) + 153))
    {
      v9 = (WebCore::Editor *)WebCore::Document::editor(v8);
      WebCore::Editor::readSelectionFromPasteboard(v9, a2);
      v13 = 1;
      v10 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 16))(v10, &v13);
    }
    else
    {
      v14 = 0;
      v10 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 16))(v10, &v14);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    v15 = 0;
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v12 + 16))(v12, &v15);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_197390138(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::insertMultiRepresentationHEIC(uint64_t a1)
{
  unsigned int *result;
  unsigned int *v2;
  unsigned int v3;
  WebCore::Document *v4;

  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(*(WebCore::FocusController **)(*(_QWORD *)(a1 + 48) + 72));
  if (result)
  {
    v2 = result + 2;
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
    v4 = (WebCore::Document *)*((_QWORD *)result + 37);
    if (*(_BYTE *)(*((_QWORD *)v4 + 383) + 153))
    {
      WebCore::Document::editor(v4);
      WebCore::Editor::insertMultiRepresentationHEIC();
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
  }
  return result;
}

void sub_1973901F4(_Unwind_Exception *a1)
{
  unsigned int *v1;

  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::willBeginWritingToolsSession()
{
  return WebCore::Page::willBeginWritingToolsSession();
}

IPC::Encoder *WebKit::WebPage::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t *v13[3];
  _QWORD v14[2];
  IPC::Encoder *v15;

  v14[0] = a4;
  v14[1] = a5;
  v6 = a1 + 32;
  v5 = *(_QWORD *)(a1 + 32);
  v13[0] = a2;
  v13[1] = a3;
  v13[2] = v14;
  v7 = (*(uint64_t (**)(uint64_t))(v5 + 56))(a1 + 32);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1994;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::UUID const&,WTF::UUID const&,WebCore::IntRect const&>,void>::encode<IPC::Encoder,std::tuple<WTF::UUID const&,WTF::UUID const&,WebCore::IntRect const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, v13);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v15, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1973902D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::proofreadingSessionUpdateStateForSuggestionWithID(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  IPC::Encoder *v15;

  v5 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 32);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1995;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::tuple<WTF::UUID const&,WebCore::WritingTools::TextSuggestionState,WTF::UUID const&>,void>::encode<IPC::Encoder,std::tuple<WTF::UUID const&,WebCore::WritingTools::TextSuggestionState,WTF::UUID const&>,0ul,1ul,2ul>((IPC::Encoder *)v7, (uint64_t)&v12);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v15, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void sub_1973903B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebKit::GraphicsLayerCARemote::~GraphicsLayerCARemote(WebKit::GraphicsLayerCARemote *this, void *a2)
{
  WebKit::GraphicsLayerCARemote::~GraphicsLayerCARemote((WebKit::GraphicsLayerCARemote *)((char *)this - 608), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::GraphicsLayerCARemote::~GraphicsLayerCARemote((WebKit::GraphicsLayerCARemote *)((char *)this - 608), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformCALayer@<X0>(uint64_t a1@<X0>, WebCore::PlatformCALayerCocoa *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 904);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    result = WebKit::PlatformCALayerRemoteCustom::create(a2, a3, v6, &v8);
    *a4 = v8;
  }
  else
  {
    result = 77;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformCALayer@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 904);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    result = WebKit::PlatformCALayerRemoteCustom::create(a2, a3, v6, &v8);
    *a4 = v8;
  }
  else
  {
    result = 83;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformCALayer@<X0>(uint64_t a1@<X0>, WebCore::Model **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::Model *v7;
  uint64_t result;
  uint64_t v9;
  WebCore::Model *v10;

  v5 = *(_QWORD *)(a1 + 904);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = *a2;
    *(_DWORD *)v7 = *(_DWORD *)*a2 + 2;
    v10 = v7;
    WebKit::PlatformCALayerRemoteModelHosting::create(&v10, a3, v6, &v9);
    WTF::RefCounted<WebCore::Model>::deref(v7);
    *a4 = v9;
    return (uint64_t)WTF::RefCounted<WebCore::Model>::deref(v7);
  }
  else
  {
    result = 90;
    __break(0xC471u);
  }
  return result;
}

void sub_197390568(_Unwind_Exception *a1)
{
  WebCore::Model *v1;

  WTF::RefCounted<WebCore::Model>::deref(v1);
  WTF::RefCounted<WebCore::Model>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformCALayerHost@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 904);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    result = WebKit::PlatformCALayerRemoteHost::create(a2, a3, v6, &v8);
    *a4 = v8;
  }
  else
  {
    result = 97;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformVideoLayer@<X0>(uint64_t a1@<X0>, WebCore::HTMLMediaElement *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 904);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    result = WebKit::PlatformCALayerRemoteCustom::create(a2, a3, v6, &v8);
    *a4 = v8;
  }
  else
  {
    result = 104;
    __break(0xC471u);
  }
  return result;
}

unsigned int *WebKit::GraphicsLayerCARemote::moveToContext(WebKit::GraphicsLayerCARemote *this, WebKit::RemoteLayerTreeContext *a2)
{
  uint64_t v4;
  WebKit::RemoteLayerTreeContext *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v4 = *((_QWORD *)this + 113);
  if (v4)
  {
    v5 = *(WebKit::RemoteLayerTreeContext **)(v4 + 8);
    if (v5)
    {
      ++*((_DWORD *)v5 + 2);
      WebKit::RemoteLayerTreeContext::graphicsLayerWillLeaveContext(v5, this);
      if (*((_DWORD *)v5 + 2) == 1)
        (*(void (**)(WebKit::RemoteLayerTreeContext *))(*(_QWORD *)v5 + 8))(v5);
      else
        --*((_DWORD *)v5 + 2);
    }
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
  v7 = (unsigned int *)*((_QWORD *)a2 + 2);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)*((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = v7;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v6);
    }
  }
  return WebKit::RemoteLayerTreeContext::graphicsLayerDidEnterContext(a2, this);
}

void sub_197390734(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

void WebKit::GraphicsLayerCARemote::pageTiledBackingBorderColor(_QWORD *a1@<X8>)
{
  *a1 = 0x110400001C4A7880;
}

WebKit::WebProcess *WebKit::GraphicsLayerCARemote::createAsyncContentsDisplayDelegate@<X0>(WebKit::WebProcess *this@<X0>, WebCore::GraphicsLayerAsyncContentsDisplayDelegate *a2@<X1>, WebCore::GraphicsLayerAsyncContentsDisplayDelegate **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::GraphicsLayerAsyncContentsDisplayDelegate *v7;
  int v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  WebCore::GraphicsLayerAsyncContentsDisplayDelegate *v14;
  WebKit::WebProcess *v15;
  WebKit::WebProcess *v16;

  v4 = *((_QWORD *)this + 113);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    ++*(_DWORD *)(v5 + 8);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 72);
    if (v6
      && *(_QWORD *)(v6 + 32)
        ? (WebKit::WebProcess *)(v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330),
                                 this = WebKit::WebProcess::WebProcess(v15),
                                 WebKit::WebProcess::singleton(void)::process = (uint64_t)this,
        : (this = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process),
          *((_QWORD *)this + 4)))
    {
      if (v7
        && ((*(uint64_t (**)(WebCore::GraphicsLayerAsyncContentsDisplayDelegate *))(*(_QWORD *)v7 + 56))(v7) & 1) != 0)
      {
        v8 = *((_DWORD *)v7 + 2) + 1;
        *((_DWORD *)v7 + 2) = v8;
      }
      else
      {
        v7 = (WebCore::GraphicsLayerAsyncContentsDisplayDelegate *)WTF::fastMalloc((WTF *)0x90);
        {
          v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v9 = WebKit::WebProcess::WebProcess(v16);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
        }
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 72);
        if (v10)
          v11 = *(_QWORD *)(v10 + 32);
        else
          v11 = 0;
        v12 = (unsigned __int8 **)*((_QWORD *)v9 + 4);
        *((_DWORD *)v7 + 2) = 1;
        *(_QWORD *)v7 = off_1E34D6C58;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v7 + 2, v12);
        *((_BYTE *)v7 + 56) = 0;
        *((_BYTE *)v7 + 128) = 0;
        *((_QWORD *)v7 + 17) = 0;
        *((_QWORD *)v7 + 4) = 0;
        *((_QWORD *)v7 + 5) = 0;
        *((_QWORD *)v7 + 3) = v11;
        *((_BYTE *)v7 + 48) = 0;
        v8 = *((_DWORD *)v7 + 2);
      }
      *((_DWORD *)v7 + 2) = v8 + 1;
      v13 = WebCore::GraphicsLayerCA::setContentsToAsyncDisplayDelegate();
      v14 = a2;
      this = v7;
      if (v7)
      {
        if (*((_DWORD *)v7 + 2) == 1)
          this = (WebKit::WebProcess *)(*(uint64_t (**)(WebCore::GraphicsLayerAsyncContentsDisplayDelegate *))(*(_QWORD *)v7 + 8))(v7);
        else
          --*((_DWORD *)v7 + 2);
      }
      *((_QWORD *)v7 + 4) = v13;
      *((_QWORD *)v7 + 5) = v14;
    }
    else
    {
      v7 = 0;
    }
    *a3 = v7;
    if (*(_DWORD *)(v5 + 8) == 1)
      return (WebKit::WebProcess *)(*(uint64_t (**)(uint64_t, WebCore::GraphicsLayerAsyncContentsDisplayDelegate *))(*(_QWORD *)v5 + 8))(v5, a2);
    else
      --*(_DWORD *)(v5 + 8);
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

void sub_197390960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _DWORD *v10;

  if (v10[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
  else
    --v10[2];
  _Unwind_Resume(exception_object);
}

BOOL WebKit::GraphicsLayerCARemote::layerMode(WebKit::GraphicsLayerCARemote *this)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 result;

  v1 = *((_QWORD *)this + 113);
  result = 1;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(*(_QWORD *)(v2 + 24) + 64))
        return 0;
    }
  }
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::copy@<X0>(WebKit::PlatformCAAnimationRemote *this@<X0>, uint64_t *a2@<X8>)
{
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  WTF::StringImpl *v12;

  v4 = *((_BYTE *)this + 24);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  if (v5)
    *(_DWORD *)v5 += 2;
  v12 = v5;
  WebKit::PlatformCAAnimationRemote::create(a2, v4, (WTF::StringImpl *)&v12);
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_BYTE *)*a2;
  (*(void (**)(uint64_t, double))(*(_QWORD *)*a2 + 64))(*a2, *((double *)this + 4));
  (*(void (**)(_BYTE *, double))(*(_QWORD *)v8 + 80))(v8, *((double *)this + 5));
  (*(void (**)(_BYTE *, float))(*(_QWORD *)v8 + 96))(v8, *((float *)this + 15));
  (*(void (**)(_BYTE *, double))(*(_QWORD *)v8 + 112))(v8, *((double *)this + 6));
  (*(void (**)(_BYTE *, float))(*(_QWORD *)v8 + 128))(v8, *((float *)this + 14));
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v8 + 144))(v8, *((unsigned __int8 *)this + 80));
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v8 + 160))(v8, *((unsigned __int8 *)this + 64));
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v8 + 192))(v8, *((unsigned __int8 *)this + 81));
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v8 + 208))(v8, *((unsigned __int8 *)this + 82));
  (*(void (**)(_BYTE *, WebKit::PlatformCAAnimationRemote *))(*(_QWORD *)v8 + 176))(v8, this);
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v8 + 224))(v8, *((unsigned __int8 *)this + 65));
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 32))(v8) & 1) != 0)
  {
    v8[84] = *((_BYTE *)this + 84);
    v9 = *(_QWORD *)v8;
    if (*((_BYTE *)this + 24) == 2)
    {
      (*(void (**)(_BYTE *, WebKit::PlatformCAAnimationRemote *))(v9 + 368))(v8, this);
      (*(void (**)(_BYTE *, WebKit::PlatformCAAnimationRemote *))(*(_QWORD *)v8 + 384))(v8, this);
      v10 = 50;
    }
    else
    {
      (*(void (**)(_BYTE *, WebKit::PlatformCAAnimationRemote *))(v9 + 272))(v8, this);
      v10 = 40;
    }
    (*(void (**)(_BYTE *, WebKit::PlatformCAAnimationRemote *))(*(_QWORD *)v8 + 8 * v10))(v8, this);
    return (*(uint64_t (**)(_BYTE *, WebKit::PlatformCAAnimationRemote *))(*(_QWORD *)v8 + 416))(v8, this);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void sub_197390C60(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::keyPath@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 16);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

double WebKit::PlatformCAAnimationRemote::beginTime(WebKit::PlatformCAAnimationRemote *this)
{
  return *((double *)this + 4);
}

double WebKit::PlatformCAAnimationRemote::duration(WebKit::PlatformCAAnimationRemote *this)
{
  return *((double *)this + 5);
}

float WebKit::PlatformCAAnimationRemote::speed(WebKit::PlatformCAAnimationRemote *this)
{
  return *((float *)this + 15);
}

double WebKit::PlatformCAAnimationRemote::timeOffset(WebKit::PlatformCAAnimationRemote *this)
{
  return *((double *)this + 6);
}

float WebKit::PlatformCAAnimationRemote::repeatCount(WebKit::PlatformCAAnimationRemote *this)
{
  return *((float *)this + 14);
}

uint64_t WebKit::PlatformCAAnimationRemote::autoreverses(WebKit::PlatformCAAnimationRemote *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t WebKit::PlatformCAAnimationRemote::isRemovedOnCompletion(WebKit::PlatformCAAnimationRemote *this)
{
  return *((unsigned __int8 *)this + 81);
}

uint64_t WebKit::PlatformCAAnimationRemote::isAdditive(WebKit::PlatformCAAnimationRemote *this)
{
  return *((unsigned __int8 *)this + 82);
}

uint64_t WebKit::PlatformCAAnimationRemote::valueFunction(WebKit::PlatformCAAnimationRemote *this)
{
  return *((unsigned __int8 *)this + 65);
}

uint64_t WebKit::PlatformCAAnimationRemote::setSpeed(uint64_t this, float a2)
{
  *(float *)(this + 60) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setTimeOffset(uint64_t this, double a2)
{
  *(double *)(this + 48) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::copyTimingFunctionFrom(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  if (((*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2) & 1) != 0)
  {
    v4 = a2[9];
    if (v4)
      ++*(_DWORD *)(v4 + 8);
    result = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v4;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setFromValue(uint64_t this, float a2)
{
  uint64_t v3;
  uint64_t *v4;
  _DWORD v5[32];
  int v6;
  char v7;

  if (!*(_BYTE *)(this + 24))
  {
    v3 = this;
    v4 = (uint64_t *)(this + 88);
    this = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    *(float *)v5 = a2;
    v6 = 0;
    if (*(_DWORD *)(v3 + 100))
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4, (uint64_t)v5);
      if (v6 != -1)
        return ((uint64_t (*)(char *, _DWORD *))off_1E34D6CA8[v6])(&v7, v5);
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

void sub_197390E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D6CA8[a25])(v25 - 33, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v1 = result;
  v2 = *(_DWORD *)(result + 12);
  if (v2 >= 2)
  {
    if (v2 != 2)
    {
      v7 = *(_QWORD *)result + 272;
      v8 = 136 * v2 - 272;
      do
      {
        v9 = *(unsigned int *)(v7 + 128);
        if ((_DWORD)v9 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E34D6CA8[v9])(&v10, v7);
        *(_DWORD *)(v7 + 128) = -1;
        v7 += 136;
        v8 -= 136;
      }
      while (v8);
    }
  }
  else
  {
    if (*(_DWORD *)(result + 8) <= 1u)
      result = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, 0x10uLL);
    v3 = *(_QWORD *)v1;
    if (*(_QWORD *)v1)
    {
      v4 = *(unsigned int *)(v1 + 12);
      if ((_DWORD)v4 != 2)
      {
        v5 = 136 * v4;
        do
        {
          v6 = (_DWORD *)(v3 + v5);
          *v6 = 0;
          v6[32] = 0;
          v5 += 136;
        }
        while (v5 != 272);
      }
    }
  }
  *(_DWORD *)(v1 + 12) = 2;
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setFromValue(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  if (!*(_BYTE *)(result + 24))
  {
    v3 = result;
    v4 = (uint64_t *)(result + 88);
    result = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(result + 88);
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 2);
    v7 = 2;
    if (*(_DWORD *)(v3 + 100))
    {
      result = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4, (uint64_t)&v5);
      if (v7 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E34D6CA8[v7])(&v8, &v5);
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void sub_197391010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D6CA8[a25])(v25 - 33, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::setFromValue(uint64_t this, const Color *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[128];
  int v6;
  char v7;

  if (!*(_BYTE *)(this + 24))
  {
    v3 = this;
    v4 = (uint64_t *)(this + 88);
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    this = WebCore::Color::Color((WebCore::Color *)v5, a2);
    v6 = 1;
    if (*(_DWORD *)(v3 + 100))
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4, (uint64_t)v5);
      if (v6 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34D6CA8[v6])(&v7, v5);
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

void sub_1973910D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D6CA8[a25])(v25 - 33, &a9);
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlatformCAAnimationRemote::setFromValue(_QWORD *this, const WebCore::FilterOperation *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD v10[16];
  int v11;
  char v12;

  if (!*((_BYTE *)this + 24))
  {
    v3 = this;
    v4 = this + 11;
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)(this + 11));
    this = (*(_QWORD *(**)(_QWORD **__return_ptr, const WebCore::FilterOperation *))(*(_QWORD *)a2 + 16))(&v9, a2);
    v5 = v9;
    v9 = 0;
    v10[0] = v5;
    v11 = 4;
    if (*((_DWORD *)v3 + 25))
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4, (uint64_t)v10);
      if (v11 != -1)
        ((void (*)(char *, _QWORD *))off_1E34D6CA8[v11])(&v12, v10);
      v11 = -1;
      this = v9;
      v9 = 0;
      if (this)
      {
        v6 = (unsigned int *)(this + 1);
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)this + 2);
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        }
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

void sub_1973911F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  uint64_t v27;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  if (a27 != -1)
    ((void (*)(uint64_t, char *))off_1E34D6CA8[a27])(v27 - 33, &a11);
  a27 = -1;
  if (a10)
  {
    v29 = a10 + 2;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::copyFromValueFrom(WebKit::PlatformCAAnimationRemote *this, const WebCore::PlatformCAAnimation *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(const WebCore::PlatformCAAnimation *))(*(_QWORD *)a2 + 32))(a2);
  if ((result & 1) == 0)
    goto LABEL_9;
  if (*((_DWORD *)a2 + 25))
  {
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)this + 88);
    if (!*((_DWORD *)a2 + 25))
    {
      __break(0xC471u);
      JUMPOUT(0x19739130CLL);
    }
    if (*((_DWORD *)this + 25))
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1> const&>(*((_QWORD *)this + 11), *((_QWORD *)a2 + 11));
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x197391304);
  }
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setToValue(uint64_t this, float a2)
{
  uint64_t v3;
  _QWORD *v4;
  _DWORD v5[32];
  int v6;
  char v7;

  if (!*(_BYTE *)(this + 24))
  {
    v3 = this;
    v4 = (_QWORD *)(this + 88);
    this = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    *(float *)v5 = a2;
    v6 = 0;
    if (*(_DWORD *)(v3 + 100) <= 1u)
    {
      __break(0xC471u);
    }
    else
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4 + 136, (uint64_t)v5);
      if (v6 != -1)
        return ((uint64_t (*)(char *, _DWORD *))off_1E34D6CA8[v6])(&v7, v5);
    }
  }
  return this;
}

void sub_1973913AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D6CA8[a25])(v25 - 33, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::setToValue(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  if (!*(_BYTE *)(result + 24))
  {
    v3 = result;
    v4 = (_QWORD *)(result + 88);
    result = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(result + 88);
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 2);
    v7 = 2;
    if (*(_DWORD *)(v3 + 100) <= 1u)
    {
      __break(0xC471u);
    }
    else
    {
      result = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4 + 136, (uint64_t)&v5);
      if (v7 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E34D6CA8[v7])(&v8, &v5);
    }
  }
  return result;
}

void sub_197391480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D6CA8[a25])(v25 - 33, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::setToValue(uint64_t this, const Color *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _BYTE v5[128];
  int v6;
  char v7;

  if (!*(_BYTE *)(this + 24))
  {
    v3 = this;
    v4 = (_QWORD *)(this + 88);
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    this = WebCore::Color::Color((WebCore::Color *)v5, a2);
    v6 = 1;
    if (*(_DWORD *)(v3 + 100) <= 1u)
    {
      __break(0xC471u);
    }
    else
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4 + 136, (uint64_t)v5);
      if (v6 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34D6CA8[v6])(&v7, v5);
    }
  }
  return this;
}

void sub_197391550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D6CA8[a25])(v25 - 33, &a9);
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlatformCAAnimationRemote::setToValue(_QWORD *this, const WebCore::FilterOperation *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD v10[16];
  int v11;
  char v12;

  if (!*((_BYTE *)this + 24))
  {
    v3 = this;
    v4 = this + 11;
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)(this + 11));
    this = (*(_QWORD *(**)(_QWORD **__return_ptr, const WebCore::FilterOperation *))(*(_QWORD *)a2 + 16))(&v9, a2);
    v5 = v9;
    v9 = 0;
    v10[0] = v5;
    v11 = 4;
    if (*((_DWORD *)v3 + 25) <= 1u)
    {
      __break(0xC471u);
    }
    else
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4 + 136, (uint64_t)v10);
      if (v11 != -1)
        ((void (*)(char *, _QWORD *))off_1E34D6CA8[v11])(&v12, v10);
      v11 = -1;
      this = v9;
      v9 = 0;
      if (this)
      {
        v6 = (unsigned int *)(this + 1);
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)this + 2);
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        }
      }
    }
  }
  return this;
}

void sub_197391678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  uint64_t v27;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  if (a27 != -1)
    ((void (*)(uint64_t, char *))off_1E34D6CA8[a27])(v27 - 33, &a11);
  a27 = -1;
  if (a10)
  {
    v29 = a10 + 2;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::copyToValueFrom(WebKit::PlatformCAAnimationRemote *this, const WebCore::PlatformCAAnimation *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(const WebCore::PlatformCAAnimation *))(*(_QWORD *)a2 + 32))(a2);
  if ((result & 1) == 0)
    goto LABEL_8;
  if (*((_DWORD *)a2 + 25) < 2u)
    return result;
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)this + 88);
  if (*((_DWORD *)a2 + 25) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x1973917A0);
  }
  if (*((_DWORD *)this + 25) <= 1u)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x197391798);
  }
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1> const&>(*((_QWORD *)this + 11) + 136, *((_QWORD *)a2 + 11) + 136);
}

uint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD *)a1;
    v7 = 136 * v4;
    do
    {
      v8 = *(unsigned int *)(v6 + 128);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))off_1E34D6CA8[v8])(&v9, v6);
      *(_DWORD *)(v6 + 128) = -1;
      v6 += 136;
      v7 -= 136;
    }
    while (v7);
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

void sub_197391890(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1973918F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_197391A2C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_197391BB0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCAAnimationRemote::copyValuesFrom(WebKit::PlatformCAAnimationRemote *this, const WebCore::PlatformCAAnimation *a2)
{
  uint64_t result;

  if (((*(uint64_t (**)(const WebCore::PlatformCAAnimation *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
    return (uint64_t)WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 22, (uint64_t)a2 + 88);
  result = 96;
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((unsigned int *)a2 != a1)
  {
    v4 = *(unsigned int *)(a2 + 12);
    if (a1[3] <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
      }
    }
    else
    {
      WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)a1, v4);
    }
    v5 = *(_QWORD *)a2;
    v6 = a1[3];
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)a1;
      v8 = 136 * v6;
      do
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1> const&>(v7, v5);
        v5 += 136;
        v7 += 136;
        v8 -= 136;
      }
      while (v8);
      v5 = *(_QWORD *)a2;
      LODWORD(v6) = a1[3];
    }
    v9 = *(_DWORD *)(a2 + 12);
    if ((_DWORD)v6 != v9)
    {
      v10 = *(_QWORD *)a1 + 136 * v6;
      v11 = v5 + 136 * v6;
      v12 = 136 * v9 - 136 * v6;
      do
      {
        v10 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(v10, v11)+ 136;
        v11 += 136;
        v12 -= 136;
      }
      while (v12);
      LODWORD(v6) = *(_DWORD *)(a2 + 12);
    }
    a1[3] = v6;
  }
  return a1;
}

uint64_t WebKit::PlatformCAAnimationRemote::copyKeyTimesFrom(WebKit::PlatformCAAnimationRemote *this, const void **a2)
{
  uint64_t result;

  if (((*((uint64_t (**)(const void **))*a2 + 4))(a2) & 1) != 0)
    return WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 104, a2 + 13);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setTimingFunctions(uint64_t a1, uint64_t a2, char a3)
{
  void *v5;
  uint64_t result;
  _QWORD v7[2];

  WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebKit::PlatformCAAnimationRemote::setTimingFunctions(WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL)::$_0>(v7, a2);
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 120, v7);
  result = WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  *(_BYTE *)(a1 + 83) = a3;
  return result;
}

void sub_197391DE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebKit::PlatformCAAnimationRemote::setTimingFunctions(WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL)::$_0>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;

  *result = 0;
  result[1] = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v2));
      v5 = result;
      *((_DWORD *)v4 + 2) = v2;
      *v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        v6 = 0;
        do
        {
          result = (***(_QWORD *(****)(uint64_t *__return_ptr))(*(_QWORD *)a2 + 8 * v6))(&v7);
          v5[v6] = v7;
          *((_DWORD *)v4 + 3) = ++v6;
        }
        while (v6 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

void sub_197391EA0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
    WTF::VectorTypeOperations<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(_QWORD *)a1 + 8 * v4));
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WebKit::PlatformCAAnimationRemote::copyTimingFunctionsFrom(WebKit::PlatformCAAnimationRemote *this, const WebCore::PlatformCAAnimation *a2)
{
  uint64_t result;

  if (((*(uint64_t (**)(const WebCore::PlatformCAAnimation *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
  {
    result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 30, (unsigned int *)a2 + 30);
    *((_BYTE *)this + 83) = *((_BYTE *)a2 + 83);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 != a1)
  {
    v4 = a1[3];
    v5 = a2[3];
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
        LODWORD(v4) = a1[3];
      }
    }
    else
    {
      WTF::VectorTypeOperations<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>::destruct((_DWORD *)(*(_QWORD *)a1 + 8 * v5), (_DWORD **)(*(_QWORD *)a1 + 8 * v4));
      a1[3] = v5;
      LODWORD(v4) = v5;
    }
    v6 = *(_QWORD *)a2;
    if ((_DWORD)v4)
    {
      v7 = *(_DWORD ***)a1;
      v8 = 8 * v4;
      do
      {
        v9 = *(_DWORD **)v6;
        v9[2] = *(_DWORD *)(*(_QWORD *)v6 + 8) + 1;
        v10 = *v7;
        *v7 = v9;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
          else
            --v10[2];
        }
        v6 += 8;
        ++v7;
        v8 -= 8;
      }
      while (v8);
      v6 = *(_QWORD *)a2;
      v11 = a1[3];
    }
    else
    {
      v11 = 0;
    }
    v12 = a2[3];
    if (v11 != (_DWORD)v12)
    {
      v13 = (_QWORD *)(*(_QWORD *)a1 + 8 * v11);
      v14 = (uint64_t *)(v6 + 8 * v11);
      v15 = 8 * v12 - 8 * v11;
      do
      {
        v16 = *v14++;
        ++*(_DWORD *)(v16 + 8);
        *v13++ = v16;
        v15 -= 8;
      }
      while (v15);
    }
    a1[3] = v12;
  }
  return a1;
}

_QWORD *WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebKit::PlatformCAAnimationRemote::setAnimations(WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  unint64_t v6;
  _DWORD *i;
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  _DWORD *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  void *v18;
  void *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  _OWORD v25[2];
  _DWORD *v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  int v31;
  WTF *v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;

  *result = 0;
  result[1] = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
      goto LABEL_21;
    }
    v4 = result;
    v5 = 136 * v2;
    result = (_QWORD *)WTF::fastMalloc((WTF *)(136 * v2));
    *((_DWORD *)v4 + 2) = v5 / 0x88;
    *v4 = result;
    if (*(_DWORD *)(a2 + 12))
    {
      v6 = 0;
      for (i = (_DWORD *)result + 33; ; i += 34)
      {
        v8 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v6);
        if (v8)
        {
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 32))(*(_QWORD *)(*(_QWORD *)a2 + 8 * v6)) & 1) == 0)
            break;
        }
        WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties((WebKit::PlatformCAAnimationRemoteProperties *)&v23, (const WebKit::PlatformCAAnimationRemoteProperties *)(v8 + 16));
        v9 = v23;
        v23 = 0;
        *(_QWORD *)(i - 33) = v9;
        v10 = v24;
        v11 = v25[0];
        *(_OWORD *)((char *)i - 98) = *(_OWORD *)((char *)v25 + 10);
        *(_OWORD *)(i - 27) = v11;
        *(_OWORD *)(i - 31) = v10;
        v12 = v26;
        v26 = 0;
        *(_QWORD *)(i - 19) = v12;
        LODWORD(v12) = v27;
        *((_BYTE *)i - 64) = v28;
        *(i - 17) = (_DWORD)v12;
        *(_QWORD *)(i - 13) = 0;
        v13 = v29;
        v29 = 0;
        *(_QWORD *)(i - 15) = v13;
        LODWORD(v13) = v30;
        v30 = 0;
        *(i - 13) = v13;
        LODWORD(v13) = v31;
        v31 = 0;
        *(i - 12) = v13;
        *(_QWORD *)(i - 9) = 0;
        v14 = v32;
        v32 = 0;
        *(_QWORD *)(i - 11) = v14;
        LODWORD(v14) = v33;
        v33 = 0;
        *(i - 9) = (_DWORD)v14;
        LODWORD(v14) = v34;
        v34 = 0;
        *(i - 8) = (_DWORD)v14;
        *(_QWORD *)(i - 5) = 0;
        v15 = v35;
        v35 = 0;
        *(_QWORD *)(i - 7) = v15;
        LODWORD(v15) = v36;
        v36 = 0;
        *(i - 5) = v15;
        LODWORD(v15) = v37;
        v37 = 0;
        *(i - 4) = v15;
        *(_QWORD *)(i - 1) = 0;
        v16 = v38;
        v38 = 0;
        *(_QWORD *)(i - 3) = v16;
        LODWORD(v16) = v39;
        v39 = 0;
        *(i - 1) = v16;
        LODWORD(v16) = v40;
        v40 = 0;
        *i = v16;
        *((_DWORD *)v4 + 3) = ++v6;
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v17);
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v18);
        v20 = v32;
        if (v32)
        {
          v32 = 0;
          v33 = 0;
          WTF::fastFree(v20, v19);
        }
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v19);
        v22 = v26;
        v26 = 0;
        if (v22)
        {
          if (v22[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
          else
            --v22[2];
        }
        result = v23;
        v23 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
          else
            *(_DWORD *)result -= 2;
        }
        if (v6 >= *(unsigned int *)(a2 + 12))
          return result;
      }
      __break(0xC471u);
LABEL_21:
      JUMPOUT(0x197392320);
    }
  }
  return result;
}

void sub_19739232C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCAAnimationRemote::copyAnimationsFrom(WebKit::PlatformCAAnimationRemote *this, const WebCore::PlatformCAAnimation *a2)
{
  uint64_t result;

  if (((*(uint64_t (**)(const WebCore::PlatformCAAnimation *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
    return (uint64_t)WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 34, (unsigned int *)a2 + 34);
  result = 96;
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  unsigned int v17;
  WebKit::PlatformCAAnimationRemoteProperties *v18;
  const WebKit::PlatformCAAnimationRemoteProperties *v19;
  uint64_t v20;

  if (a2 != a1)
  {
    v4 = (WTF::StringImpl *)a2[3];
    if (a1[3] <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
      }
    }
    else
    {
      WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    v5 = *(_QWORD *)a2;
    v6 = a1[3];
    if (v6)
    {
      v7 = 0;
      v8 = v5 + 136 * v6;
      v9 = *(_QWORD *)a1;
      do
      {
        v10 = v9 + v7;
        v11 = v5 + v7;
        WTF::String::operator=((WTF::StringImpl **)(v9 + v7), (WTF::StringImpl *)(v5 + v7));
        v12 = *(_OWORD *)(v5 + v7 + 8);
        v13 = *(_OWORD *)(v5 + v7 + 24);
        *(_OWORD *)(v10 + 34) = *(_OWORD *)(v5 + v7 + 34);
        *(_OWORD *)(v10 + 24) = v13;
        *(_OWORD *)(v10 + 8) = v12;
        v14 = *(_QWORD *)(v5 + v7 + 56);
        if (v14)
          ++*(_DWORD *)(v14 + 8);
        v15 = *(_DWORD **)(v10 + 56);
        *(_QWORD *)(v10 + 56) = v14;
        if (v15)
        {
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[2];
        }
        v16 = *(_DWORD *)(v11 + 64);
        *(_BYTE *)(v10 + 68) = *(_BYTE *)(v11 + 68);
        *(_DWORD *)(v10 + 64) = v16;
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v9 + v7 + 72), v5 + v7 + 72);
        WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v9 + v7 + 88, (const void **)(v5 + v7 + 88));
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v9 + v7 + 104), (unsigned int *)(v5 + v7 + 104));
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v9 + v7 + 120, v5 + v7 + 120);
        v7 += 136;
      }
      while (v11 + 136 != v8);
      v5 = *(_QWORD *)a2;
      v6 = a1[3];
    }
    v17 = a2[3];
    if (v6 != v17)
    {
      v18 = (WebKit::PlatformCAAnimationRemoteProperties *)(*(_QWORD *)a1 + 136 * v6);
      v19 = (const WebKit::PlatformCAAnimationRemoteProperties *)(v5 + 136 * v6);
      v20 = 136 * v17 - 136 * v6;
      do
      {
        v18 = (WebKit::PlatformCAAnimationRemoteProperties *)((char *)WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties(v18, v19)+ 136);
        v19 = (const WebKit::PlatformCAAnimationRemoteProperties *)((char *)v19 + 136);
        v20 -= 136;
      }
      while (v20);
      v6 = a2[3];
    }
    a1[3] = v6;
  }
  return a1;
}

void WebKit::PlatformCALayerRemote::clone(WebKit::PlatformCALayerRemote *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *((_QWORD *)a1 + 104);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v6 = WTF::fastMalloc((WTF *)0x348);
    WebCore::PlatformCALayer::PlatformCALayer();
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)v6 = &off_1E34D6898;
    WebKit::LayerProperties::LayerProperties((WebKit::LayerProperties *)(v6 + 64));
    *(_OWORD *)(v6 + 792) = 0u;
    *(_OWORD *)(v6 + 808) = 0u;
    *(_BYTE *)(v6 + 824) = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)a1 + 448))(a1);
    *(_BYTE *)(v6 + 825) = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 16), v4);
    v7 = *(unsigned int **)(v4 + 16);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    *(_QWORD *)(v6 + 832) = v7;
    WebKit::RemoteLayerTreeContext::layerDidEnterContext(v4, (unsigned int *)v6, *((unsigned __int8 *)a1 + 12));
    WebKit::PlatformCALayerRemote::updateClonedLayerProperties(a1, (int8x16_t *)v6, 1);
    WebKit::PlatformCALayerRemote::setClonedLayer((int8x16_t *)v6, (uint64_t)a1);
    *a2 = v6;
  }
  else
  {
    __break(0xC471u);
  }
}

void sub_19739267C(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemote::updateClonedLayerProperties(WebKit::PlatformCALayerRemote *this, int8x16_t *a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;

  LODWORD(v24) = (*(float (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 264))(this);
  HIDWORD(v24) = v6;
  v25 = v7;
  (*(void (**)(int8x16_t *, uint64_t *))(a2->i64[0] + 272))(a2, &v24);
  LODWORD(v24) = (*(float (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 248))(this);
  HIDWORD(v24) = v8;
  v25 = v9;
  v26 = v10;
  (*(void (**)(int8x16_t *, uint64_t *))(a2->i64[0] + 256))(a2, &v24);
  LODWORD(v24) = (*(float (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 280))(this);
  HIDWORD(v24) = v11;
  v25 = v12;
  (*(void (**)(int8x16_t *, uint64_t *))(a2->i64[0] + 288))(a2, &v24);
  if (*((_QWORD *)this + 11))
    (*(void (**)(int8x16_t *))(a2->i64[0] + 304))(a2);
  if (*((_QWORD *)this + 12))
    (*(void (**)(int8x16_t *))(a2->i64[0] + 320))(a2);
  if (a3)
  {
    v13 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 488))(this);
    (*(void (**)(int8x16_t *, uint64_t))(a2->i64[0] + 496))(a2, v13);
  }
  v14 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 432))(this);
  (*(void (**)(int8x16_t *, uint64_t))(a2->i64[0] + 440))(a2, v14);
  v15 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 416))(this);
  (*(void (**)(int8x16_t *, uint64_t))(a2->i64[0] + 424))(a2, v15);
  v16 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 232))(this);
  (*(void (**)(int8x16_t *, uint64_t))(a2->i64[0] + 240))(a2, v16);
  (*(void (**)(uint64_t *__return_ptr, WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 568))(&v24, this);
  (*(void (**)(int8x16_t *, uint64_t *))(a2->i64[0] + 576))(a2, &v24);
  if ((v24 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v17);
    }
  }
  (*(void (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 664))(this);
  (*(void (**)(int8x16_t *))(a2->i64[0] + 672))(a2);
  (*(void (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 680))(this);
  (*(void (**)(int8x16_t *))(a2->i64[0] + 688))(a2);
  v18 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 704))(this);
  (*(void (**)(int8x16_t *, uint64_t))(a2->i64[0] + 712))(a2, v18);
  a2[41].i8[8] = *((_BYTE *)this + 664);
  a2[4] = vorrq_s8(a2[4], (int8x16_t)vdupq_n_s64(0x8000000000uLL));
  if ((WebCore::Path::isEmpty((WebKit::PlatformCALayerRemote *)((char *)this + 496)) & 1) == 0)
    (*(void (**)(int8x16_t *, char *))(a2->i64[0] + 744))(a2, (char *)this + 496);
  if (*((_QWORD *)this + 13))
    (*(void (**)(int8x16_t *))(a2->i64[0] + 728))(a2);
  if (*((_QWORD *)this + 61))
    (*(void (**)(int8x16_t *, WebKit::PlatformCALayerRemote *))(a2->i64[0] + 624))(a2, this);
  v19 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 784))(this);
  return (*(uint64_t (**)(int8x16_t *, uint64_t))(a2->i64[0] + 792))(a2, v19);
}

void sub_1973929B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if ((a9 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

int8x16_t WebKit::PlatformCALayerRemote::setClonedLayer(int8x16_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t *v10;
  int8x16_t result;

  v3 = a1[36].i64[1];
  if (v3)
  {
    v5 = v3 & 0xFFFFFFFFFFFFFF00;
    v2 = a1[37].i64[0];
    v4 = a1[36].i64[1];
    if (!a2)
      goto LABEL_3;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    if (!a2)
    {
LABEL_3:
      v6 = 0;
      v7 = 0;
      goto LABEL_4;
    }
  }
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
LABEL_4:
  if (v3)
    v8 = (v5 | v4) == v6;
  else
    v8 = 0;
  if (!v8 || v2 != v7)
  {
    v10 = &a1[36].u64[1];
    if (a2)
    {
      *(_OWORD *)v10 = *(_OWORD *)(a2 + 16);
    }
    else
    {
      *v10 = 0;
      a1[37].i64[0] = 0;
    }
    result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x4000uLL));
    a1[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::moveToContext(WebKit::PlatformCALayerRemote *this, WebKit::RemoteLayerTreeContext *a2)
{
  uint64_t v4;
  WebKit::RemoteLayerTreeContext *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;

  v4 = *((_QWORD *)this + 104);
  if (v4)
  {
    v5 = *(WebKit::RemoteLayerTreeContext **)(v4 + 8);
    if (v5)
    {
      ++*((_DWORD *)v5 + 2);
      WebKit::RemoteLayerTreeContext::layerWillLeaveContext(v5, this);
      if (*((_DWORD *)v5 + 2) == 1)
        (*(void (**)(WebKit::RemoteLayerTreeContext *))(*(_QWORD *)v5 + 8))(v5);
      else
        --*((_DWORD *)v5 + 2);
    }
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
  v7 = (unsigned int *)*((_QWORD *)a2 + 2);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = v7;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v6);
    }
  }
  result = WebKit::RemoteLayerTreeContext::layerDidEnterContext((uint64_t)a2, (unsigned int *)this, *((unsigned __int8 *)this + 12));
  *((_QWORD *)this + 8) |= *((_QWORD *)this + 9);
  return result;
}

void sub_197392B4C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

int8x16_t WebKit::PlatformCALayerRemote::setBackdropRootIsOpaque(int8x16_t *this, __int8 a2)
{
  int8x16_t result;

  this[41].i8[8] = a2;
  result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x8000000000uLL));
  this[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::backdropRootIsOpaque(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 664);
}

uint64_t WebKit::PlatformCALayerRemote::recursiveMarkWillBeDisplayedWithRenderingSuppresion(WebKit::PlatformCALayerRemote *this)
{
  uint64_t result;
  uint64_t v3;
  WebKit::PlatformCALayerRemote *v4;

  result = *((_QWORD *)this + 59);
  if (result)
  {
    if (*((_BYTE *)this + 656))
      result = WebKit::RemoteLayerBackingStore::layerWillBeDisplayedWithRenderingSuppression((WebKit::RemoteLayerBackingStore *)result);
  }
  if (*((_DWORD *)this + 201))
  {
    v3 = 0;
    while (1)
    {
      v4 = *(WebKit::PlatformCALayerRemote **)(*((_QWORD *)this + 99) + 8 * v3);
      if ((*(unsigned int (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)v4 + 32))(v4) - 1 >= 4)
        break;
      result = WebKit::PlatformCALayerRemote::recursiveMarkWillBeDisplayedWithRenderingSuppresion(v4);
      if (++v3 >= (unint64_t)*((unsigned int *)this + 201))
        return result;
    }
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WebKit::RemoteLayerBackingStore *WebKit::PlatformCALayerRemote::needsDisplay(WebKit::PlatformCALayerRemote *this)
{
  WebKit::RemoteLayerBackingStore *result;

  result = (WebKit::RemoteLayerBackingStore *)*((_QWORD *)this + 59);
  if (result)
    return (WebKit::RemoteLayerBackingStore *)WebKit::RemoteLayerBackingStore::needsDisplay(result);
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::copyContentsFromLayer(int8x16_t *this, WebCore::PlatformCALayer *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  WebKit::RemoteLayerTreeTransaction *v6;
  int8x16_t result;

  v3 = this[52].i64[0];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 8);
      *(_DWORD *)(v4 + 8) = v5 + 1;
      if (!this[4].i64[0])
      {
        v6 = *(WebKit::RemoteLayerTreeTransaction **)(v4 + 200);
        if (v6)
        {
          WebKit::RemoteLayerTreeTransaction::layerPropertiesChanged(v6, (WebKit::PlatformCALayerRemote *)this);
          v5 = *(_DWORD *)(v4 + 8) - 1;
        }
      }
      if (v5)
        *(_DWORD *)(v4 + 8) = v5;
      else
        (*(void (**)(uint64_t, WebCore::PlatformCALayer *))(*(_QWORD *)v4 + 8))(v4, a2);
    }
  }
  result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x4000uLL));
  this[4] = result;
  return result;
}

void sub_197392CD8(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCALayerRemote::insertSublayer(int8x16_t *this, WebCore::PlatformCALayer *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t result;
  WebCore::PlatformCALayer *v9;

  v6 = (unsigned int *)((char *)a2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  (*(void (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 112))(a2);
  v9 = a2;
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::PlatformCALayer*>((uint64_t)&this[49].i64[1], a3, (uint64_t *)&v9);
  if (((*(uint64_t (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 32))(a2) - 1) >= 4u)
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 101) = this;
    this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x10uLL));
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v6);
  }
  return result;
}

void sub_197392DD0(_Unwind_Exception *a1)
{
  unsigned int *v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

void *WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::PlatformCALayer*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  _QWORD *v7;
  void *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 8))
  {
    v12 = v6 + (v6 >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 <= v6 + 1)
      v14 = v6 + 1;
    else
      v14 = v13;
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v14);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * a2);
  result = memmove(v7 + 1, v7, *(_QWORD *)a1 + 8 * v6 - (_QWORD)v7);
  v9 = *a3;
  if (*a3)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *v7 = v9;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unsigned int *WebKit::PlatformCALayerRemote::replaceSublayer(int8x16_t *this, WebCore::PlatformCALayer *a2, WebCore::PlatformCALayer *a3)
{
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v6 = (unsigned int *)((char *)a3 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  (*(void (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a3 + 112))(a3);
  v8 = this[50].u32[1];
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = &this[49].i64[1];
    while (*(WebCore::PlatformCALayer **)(this[49].i64[1] + 8 * v9) != a2)
    {
      if (++v9 == v8)
        goto LABEL_14;
    }
    if (v9 >= v8)
      goto LABEL_22;
    (*(void (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 112))(a2);
    v11 = this[50].u32[1];
    if ((_DWORD)v11 == this[50].i32[0])
    {
      v16 = v11 + (v11 >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= v11 + 1)
        v18 = v11 + 1;
      else
        v18 = v17;
      WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&this[49].i64[1], v18);
      LODWORD(v11) = this[50].i32[1];
    }
    v12 = *v10;
    v13 = (_QWORD *)(*v10 + 8 * v9);
    memmove(v13 + 1, v13, v12 + 8 * v11 - (_QWORD)v13);
    do
      v14 = __ldaxr(v6);
    while (__stlxr(v14 + 1, v6));
    *v13 = a3;
    ++this[50].i32[1];
    if (((*(uint64_t (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a3 + 32))(a3) - 1) >= 4u)
    {
LABEL_22:
      __break(0xC471u);
      JUMPOUT(0x197393004);
    }
    *((_QWORD *)a3 + 101) = this;
  }
LABEL_14:
  this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x10uLL));
  return WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v6);
}

void sub_197393010(_Unwind_Exception *a1)
{
  unsigned int *v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemote::adoptSublayers(WebKit::PlatformCALayerRemote *this, WebCore::PlatformCALayer *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  void *__dst;
  unsigned int v17;

  if ((*(unsigned int (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 32))(a2) - 1 >= 4)
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&__dst, (uint64_t)a2 + 792);
    v4 = (*(uint64_t (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 168))(a2);
    if (v4)
    {
      v7 = *(unsigned int *)(v4 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(uint64_t **)v4;
        v9 = *(_QWORD *)v4 + 8 * v7;
        v10 = v17;
        v11 = v17;
        do
        {
          if (v11)
          {
            v12 = v11;
            v13 = __dst;
            v14 = *v8;
            v15 = (char *)__dst + 8;
            while (*v13 != v14)
            {
              ++v13;
              v15 += 8;
              if (!--v12)
                goto LABEL_12;
            }
            *v13 = 0;
            if (v14)
            {
              WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
              v10 = v17;
            }
            memmove(v13, v13 + 1, (_BYTE *)__dst + 8 * v10 - v15);
            v10 = --v17;
            v11 = v17;
          }
LABEL_12:
          ++v8;
        }
        while (v8 != (uint64_t *)v9);
      }
    }
    (*(void (**)(WebKit::PlatformCALayerRemote *, void **))(*(_QWORD *)this + 120))(this, &__dst);
    return WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&__dst, v5);
  }
  return result;
}

void sub_197393174(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCAAnimationRemoteProperties::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  v6 = *(_QWORD *)(a2 + 56);
  if (v6)
    ++*(_DWORD *)(v6 + 8);
  v7 = *(_DWORD **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
  }
  v8 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v8;
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 72), a2 + 72);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 88, (const void **)(a2 + 88));
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 104), (unsigned int *)(a2 + 104));
  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 120), (unsigned int *)(a2 + 120));
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<WebKit::PlatformCALayerRemote::removeAnimationForKey(WTF::String const&)::$_0>(uint64_t result, const WTF::StringImpl ***a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  if (*(_DWORD *)(result + 12))
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      result = WTF::equal(*(WTF **)(*(_QWORD *)v4 + v5), **a2, a3);
      if ((_DWORD)result)
        break;
      ++v6;
      v5 += 144;
      if (v6 >= *(unsigned int *)(v4 + 12))
        return result;
    }
    v8 = *(_QWORD *)v4 + v5;
    std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair(v8, v7);
    result = WTF::VectorMover<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>::move(v8 + 144, (uint64_t *)(*(_QWORD *)v4 + 144 * *(unsigned int *)(v4 + 12)), v8);
    --*(_DWORD *)(v4 + 12);
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::animationEnded(WebKit::PlatformCALayerRemote *this, const WTF::String *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)result + 40))(result, a2);
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setMaskLayer(int8x16_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t *v11;
  uint64_t v12;
  int8x16_t result;

  v4 = *a2;
  v5 = a1[35].i64[1];
  if (v5)
  {
    v7 = v5 & 0xFFFFFFFFFFFFFF00;
    v2 = a1[36].i64[0];
    v6 = a1[35].i64[1];
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 16);
    v4 = *(_QWORD *)(v4 + 24);
  }
  else
  {
    v8 = 0;
  }
  if (v5)
    v9 = (v7 | v6) == v8;
  else
    v9 = 0;
  if (!v9 || v2 != v4)
  {
    v11 = &a1[35].u64[1];
    WebCore::PlatformCALayer::setMaskLayer();
    v12 = WebCore::PlatformCALayer::maskLayer((WebCore::PlatformCALayer *)a1);
    if (v12)
    {
      *(_OWORD *)v11 = *(_OWORD *)(v12 + 16);
    }
    else
    {
      *v11 = 0;
      a1[36].i64[0] = 0;
    }
    result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x2000uLL));
    a1[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::isOpaque(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 660);
}

float WebKit::PlatformCALayerRemote::anchorPoint(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 107);
}

__n128 WebKit::PlatformCALayerRemote::transform@<Q0>(WebKit::PlatformCALayerRemote *this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = (__int128 *)*((_QWORD *)this + 11);
  if (!v2)
    v2 = &xmmword_1978D0710;
  v3 = v2[5];
  *(_OWORD *)(a2 + 64) = v2[4];
  *(_OWORD *)(a2 + 80) = v3;
  v4 = v2[7];
  *(_OWORD *)(a2 + 96) = v2[6];
  *(_OWORD *)(a2 + 112) = v4;
  v5 = v2[1];
  *(_OWORD *)a2 = *v2;
  *(_OWORD *)(a2 + 16) = v5;
  result = (__n128)v2[2];
  v7 = v2[3];
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

__n128 WebKit::PlatformCALayerRemote::sublayerTransform@<Q0>(WebKit::PlatformCALayerRemote *this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = (__int128 *)*((_QWORD *)this + 12);
  if (!v2)
    v2 = &xmmword_1978D0710;
  v3 = v2[5];
  *(_OWORD *)(a2 + 64) = v2[4];
  *(_OWORD *)(a2 + 80) = v3;
  v4 = v2[7];
  *(_OWORD *)(a2 + 96) = v2[6];
  *(_OWORD *)(a2 + 112) = v4;
  v5 = v2[1];
  *(_OWORD *)a2 = *v2;
  *(_OWORD *)(a2 + 16) = v5;
  result = (__n128)v2[2];
  v7 = v2[3];
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setSublayerTransform(int8x16_t *this, const WebCore::TransformationMatrix *a2)
{
  void *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  WTF *v12;
  int8x16_t result;

  v5 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
  v6 = *((_OWORD *)a2 + 3);
  v8 = *(_OWORD *)a2;
  v7 = *((_OWORD *)a2 + 1);
  v5[2] = *((_OWORD *)a2 + 2);
  v5[3] = v6;
  *v5 = v8;
  v5[1] = v7;
  v9 = *((_OWORD *)a2 + 7);
  v11 = *((_OWORD *)a2 + 4);
  v10 = *((_OWORD *)a2 + 5);
  v5[6] = *((_OWORD *)a2 + 6);
  v5[7] = v9;
  v5[4] = v11;
  v5[5] = v10;
  v12 = (WTF *)this[6].i64[0];
  this[6].i64[0] = (uint64_t)v5;
  if (v12)
    WTF::fastFree(v12, v4);
  result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(4uLL));
  this[4] = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setIsBackdropRoot(int8x16_t *this, __int8 a2)
{
  int8x16_t result;

  this[41].i8[7] = a2;
  result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x4000000000uLL));
  this[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::isHidden(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 655);
}

int8x16_t WebKit::PlatformCALayerRemote::setHidden(int8x16_t *this, int a2)
{
  int8x16_t result;

  if (this[40].u8[15] != a2)
  {
    this[40].i8[15] = a2;
    result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x40000000uLL));
    this[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::contentsHidden(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 661);
}

uint64_t WebKit::PlatformCALayerRemote::userInteractionEnabled(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 662);
}

int8x16_t WebKit::PlatformCALayerRemote::setUserInteractionEnabled(int8x16_t *this, int a2)
{
  int8x16_t result;

  if (this[41].u8[6] != a2)
  {
    this[41].i8[6] = a2;
    result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x2000000000uLL));
    this[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::backingStoreAttached(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 656);
}

int8x16_t WebKit::PlatformCALayerRemote::setGeometryFlipped(int8x16_t *this, __int8 a2)
{
  int8x16_t result;

  this[41].i8[1] = a2;
  result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x100000000uLL));
  this[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::geometryFlipped(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 657);
}

uint64_t WebKit::PlatformCALayerRemote::isDoubleSided(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 658);
}

int8x16_t WebKit::PlatformCALayerRemote::setDoubleSided(int8x16_t *this, __int8 a2)
{
  int8x16_t result;

  this[41].i8[2] = a2;
  result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x200000000uLL));
  this[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::masksToBounds(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 659);
}

uint64_t WebKit::PlatformCALayerRemote::acceleratesDrawing(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 824);
}

uint64_t WebKit::PlatformCALayerRemote::wantsDeepColorBackingStore(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 825);
}

BOOL WebKit::PlatformCALayerRemote::hasContents(WebKit::PlatformCALayerRemote *this)
{
  return *((_QWORD *)this + 59) != 0;
}

uint64_t WebKit::PlatformCALayerRemote::contents(WebKit::PlatformCALayerRemote *this)
{
  return 0;
}

void WebKit::PlatformCALayerRemote::setDelegatedContents(uint64_t *a1, uint64_t a2)
{
  WebKit::PlatformCALayerRemote *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[4];
  _BYTE v14[64];
  int v15;
  unsigned int *v16;
  uint64_t v17;
  char v18;
  char v19;

  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v13, (const WTF::MachSendRight *)a2);
  WTF::MachSendRight::MachSendRight();
  v15 = 1;
  v5 = *(unsigned int **)(a2 + 8);
  if (v5)
  {
    v6 = v5 + 2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a2 + 16);
  v16 = v5;
  v17 = v8;
  v18 = *(_BYTE *)(a2 + 24);
  WebKit::PlatformCALayerRemote::ensureBackingStore((WebKit::PlatformCALayerRemote *)a1, v4);
  WebKit::RemoteLayerBackingStore::setDelegatedContents(a1[59], (uint64_t)v14);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  if (v15 != -1)
    off_1E34D6C98[v15]((int)&v19, (WTF::MachSendRight *)v14);
  v15 = -1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
}

void sub_197393694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  _Unwind_Resume(a1);
}

int8x16_t WebKit::PlatformCALayerRemote::setContentsRect(WebKit::PlatformCALayerRemote *this, const FloatRect *a2)
{
  int8x16_t result;

  *(FloatRect *)((char *)this + 456) = *a2;
  result = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x200uLL));
  *((int8x16_t *)this + 4) = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setMinificationFilter(int8x16_t *a1, __int8 a2)
{
  int8x16_t result;

  a1[40].i8[9] = a2;
  result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x1000000uLL));
  a1[4] = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setMagnificationFilter(int8x16_t *a1, __int8 a2)
{
  int8x16_t result;

  a1[40].i8[10] = a2;
  result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x2000000uLL));
  a1[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::backgroundColor@<X0>(const Color *this@<X0>, WebCore::Color *a2@<X8>)
{
  return WebCore::Color::Color(a2, this + 79);
}

float WebKit::PlatformCALayerRemote::opacity(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 156);
}

int8x16_t WebKit::PlatformCALayerRemote::setFilters(int8x16_t *a1, uint64_t a2)
{
  void *v4;
  int8x16_t result;

  v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4, a2);
  std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100](&a1[30].i64[1], v4);
  result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x800uLL));
  a1[4] = result;
  return result;
}

void sub_1973937E8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemote::copyFiltersFrom(int8x16_t *this, const WebCore::PlatformCALayer *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(const WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 32))(a2);
  if ((result - 1) >= 4)
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    if (*((_QWORD *)a2 + 61))
    {
      result = (*(uint64_t (**)(int8x16_t *))(this->i64[0] + 616))(this);
    }
    else if (this[30].i64[1])
    {
      result = std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100](&this[30].i64[1], 0);
    }
    this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x800uLL));
  }
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setBlendMode(int8x16_t *a1, __int8 a2)
{
  int8x16_t result;

  a1[40].i8[11] = a2;
  result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x4000000uLL));
  a1[4] = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setSpeed(WebKit::PlatformCALayerRemote *this, float a2)
{
  int8x16_t result;

  *((float *)this + 152) = a2;
  result = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x10000uLL));
  *((int8x16_t *)this + 4) = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setTimeOffset(WebKit::PlatformCALayerRemote *this, double a2)
{
  int8x16_t result;

  *((double *)this + 75) = a2;
  result = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x8000uLL));
  *((int8x16_t *)this + 4) = result;
  return result;
}

float WebKit::PlatformCALayerRemote::cornerRadius(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 154);
}

int8x16_t WebKit::PlatformCALayerRemote::setCornerRadius(int8x16_t *this, int8x16_t result)
{
  if (*(float *)&this[38].i32[2] != *(float *)result.i32)
  {
    this[38].i32[2] = result.i32[0];
    result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x40000uLL));
    this[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::videoGravity(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 653);
}

int8x16_t WebKit::PlatformCALayerRemote::setVideoGravity(int8x16_t *a1, int a2)
{
  int8x16_t result;

  if (a1[40].u8[13] != a2)
  {
    a1[40].i8[13] = a2;
    result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x10000000uLL));
    a1[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::shapeRoundedRect@<X0>(uint64_t this@<X0>, WebCore::FloatRoundedRect *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  Radii v5;
  FloatRect v6;

  v2 = *(__int128 **)(this + 104);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[2];
    *((_OWORD *)a2 + 1) = v2[1];
    *((_OWORD *)a2 + 2) = v4;
    *(_OWORD *)a2 = v3;
  }
  else
  {
    v6.m_location = 0;
    v6.m_size = 0;
    memset(&v5, 0, sizeof(v5));
    return WebCore::FloatRoundedRect::FloatRoundedRect(a2, &v6, &v5);
  }
  return this;
}

float WebKit::PlatformCALayerRemote::setShapeRoundedRect(int8x16_t *this, const WebCore::FloatRoundedRect *a2)
{
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  void *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  WTF *v14;
  int8x16_t v15;

  v4 = this[6].i64[1];
  if (!v4
    || (*(float *)v4 == *(float *)a2 ? (v5 = *(float *)(v4 + 4) == *((float *)a2 + 1)) : (v5 = 0),
        !v5
     || (*(float *)(v4 + 8) == *((float *)a2 + 2) ? (v6 = *(float *)(v4 + 12) == *((float *)a2 + 3)) : (v6 = 0),
         !v6
      || (*(float *)(v4 + 16) == *((float *)a2 + 4) ? (v7 = *(float *)(v4 + 20) == *((float *)a2 + 5)) : (v7 = 0),
          !v7
       || (*(float *)(v4 + 24) == *((float *)a2 + 6) ? (v8 = *(float *)(v4 + 28) == *((float *)a2 + 7)) : (v8 = 0),
           !v8
        || (*(float *)(v4 + 32) == *((float *)a2 + 8) ? (v9 = *(float *)(v4 + 36) == *((float *)a2 + 9)) : (v9 = 0),
            !v9
         || *(float *)(v4 + 40) != *((float *)a2 + 10)
         || (v15.i32[0] = *(_DWORD *)(v4 + 44), *(float *)v15.i32 != *((float *)a2 + 11))))))))
  {
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)0x30);
    v13 = *((_OWORD *)a2 + 1);
    v12 = *((_OWORD *)a2 + 2);
    *v11 = *(_OWORD *)a2;
    v11[1] = v13;
    v11[2] = v12;
    v14 = (WTF *)this[6].i64[1];
    this[6].i64[1] = (uint64_t)v11;
    if (v14)
      WTF::fastFree(v14, v10);
    v15 = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(8uLL));
    this[4] = v15;
  }
  return *(float *)v15.i32;
}

uint64_t WebKit::PlatformCALayerRemote::shapePath@<X0>(WebKit::PlatformCALayerRemote *this@<X0>, WebCore::Path *a2@<X8>)
{
  return WebCore::Path::Path(a2, (WebKit::PlatformCALayerRemote *)((char *)this + 496));
}

int8x16_t WebKit::PlatformCALayerRemote::setShapePath(int8x16_t *this, const Path *a2)
{
  uint64_t v3;
  uint64_t m_x_low;
  int8x16_t result;
  char *v6;
  char v7;

  v3 = this[35].u32[0];
  m_x_low = LODWORD(a2[1].m_data.__impl_.__data.__tail.__head.__value.m_data.__impl_.__data.__head.__value.point.m_x);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)m_x_low == -1)
      goto LABEL_6;
LABEL_5:
    v6 = &this[31].i8[8];
    ((void (*)(char **))off_1E34D6D88[m_x_low])(&v6);
    goto LABEL_6;
  }
  if ((_DWORD)m_x_low != -1)
    goto LABEL_5;
  ((void (*)(char *, unint64_t *))off_1E34D6D48[v3])(&v7, &this[31].u64[1]);
  this[35].i32[0] = -1;
LABEL_6:
  result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x1000uLL));
  this[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::shapeWindRule(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 652);
}

int8x16_t WebKit::PlatformCALayerRemote::setShapeWindRule(int8x16_t *a1, __int8 a2)
{
  int8x16_t result;

  a1[40].i8[12] = a2;
  result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x8000000uLL));
  a1[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::customAppearance(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 648);
}

int8x16_t WebKit::PlatformCALayerRemote::updateCustomAppearance(int8x16_t *a1, int a2)
{
  int8x16_t result;

  if ((((a1[40].i8[8] == 0) ^ a2) & 1) == 0)
  {
    a1[40].i8[8] = a2;
    result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x800000uLL));
    a1[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::hostingContextID(WebKit::PlatformCALayerRemote *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemote::backingStoreBytesPerPixel(WebKit::PlatformCALayerRemote *this)
{
  _BYTE *v1;
  unsigned __int8 v2;

  v1 = (_BYTE *)*((_QWORD *)this + 59);
  if (!v1)
    return 4;
  if (v1[24] || !v1[52])
  {
    v2 = v1[53] ^ 1;
  }
  else if (v1[53])
  {
    v2 = 2;
  }
  else
  {
    v2 = 3;
  }
  if (v2 < 3u)
    return 4;
  else
    return 5;
}

int8x16_t WebKit::PlatformCALayerRemote::clearAcceleratedEffectsAndBaseValues(int8x16_t *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int8x16_t result;
  _OWORD v12[6];
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[3];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v12[0] = 0uLL;
  v3 = this[10].u32[1];
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)this[9].i64[1];
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 56))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)this[9].i64[1];
  if (v7)
  {
    this[9].i64[1] = 0;
    this[10].i32[0] = 0;
    WTF::fastFree(v7, a2);
    v9 = *((_QWORD *)&v12[0] + 1);
    v8 = *(_QWORD *)&v12[0];
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v12[0] = 0uLL;
  this[9].i64[1] = v8;
  this[10].i64[0] = v9;
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, a2);
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v14 = 1;
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  LODWORD(v12[0]) = 1065353216;
  LODWORD(v13) = 0;
  *(_DWORD *)((char *)&v13 + 3) = 0;
  DWORD2(v13) = 0;
  *(_DWORD *)((char *)&v13 + 11) = 0;
  LODWORD(v18) = 0;
  *(_DWORD *)((char *)&v18 + 3) = 0;
  DWORD2(v18) = 0;
  *(_DWORD *)((char *)&v18 + 11) = 0;
  LODWORD(v19) = 0;
  *(_DWORD *)((char *)&v19 + 3) = 0;
  DWORD2(v19) = 0;
  *(_DWORD *)((char *)&v19 + 11) = 0;
  v15 = 0u;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  v21 = 0u;
  v22 = 0u;
  WebCore::AcceleratedEffectValues::operator=((uint64_t)&this[10].i64[1], (uint64_t)v12);
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v12, v10);
  result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x20uLL));
  this[4] = result;
  return result;
}

void sub_197393D48(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

int8x16_t WebKit::PlatformCALayerRemote::setAcceleratedEffectsAndBaseValues(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _DWORD *v24;
  unsigned int v25;
  int v26;
  _DWORD *v27;
  unsigned int v28;
  int v29;
  _DWORD ***v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  unsigned int v53;
  int v54;
  _DWORD *v55;
  unsigned int v56;
  int v57;
  _DWORD *v58;
  unsigned int v59;
  int v60;
  _DWORD *v61;
  unsigned int v62;
  int v63;
  _DWORD *v64;
  unsigned int v65;
  int v66;
  int v67;
  int8x16_t result;

  v5 = (_QWORD *)(a1 + 152);
  if ((uint64_t *)(a1 + 152) != a2)
  {
    v7 = *((unsigned int *)a2 + 3);
    if (*(_DWORD *)(a1 + 164) <= v7)
    {
      if (v7 > *(_DWORD *)(a1 + 160))
      {
        WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 152), 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v5, *((unsigned int *)a2 + 3));
      }
    }
    else
    {
      WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((_DWORD *)(a1 + 152), v7);
    }
    v8 = *a2;
    v9 = *(unsigned int *)(a1 + 164);
    if ((_DWORD)v9)
    {
      v10 = (_DWORD **)*v5;
      v11 = 8 * v9;
      do
      {
        v12 = *(_DWORD **)v8;
        v12[2] = *(_DWORD *)(*(_QWORD *)v8 + 8) + 1;
        v13 = *v10;
        *v10 = v12;
        if (v13)
        {
          if (v13[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 56))(v13);
          else
            --v13[2];
        }
        v8 += 8;
        ++v10;
        v11 -= 8;
      }
      while (v11);
      v8 = *a2;
      v14 = *(_DWORD *)(a1 + 164);
    }
    else
    {
      v14 = 0;
    }
    v15 = *((unsigned int *)a2 + 3);
    if (v14 != (_DWORD)v15)
    {
      v16 = (_QWORD *)(*v5 + 8 * v14);
      v17 = (uint64_t *)(v8 + 8 * v14);
      v18 = 8 * v15 - 8 * v14;
      do
      {
        v19 = *v17++;
        ++*(_DWORD *)(v19 + 8);
        *v16++ = v19;
        v18 -= 8;
      }
      while (v18);
    }
    *(_DWORD *)(a1 + 164) = v15;
  }
  v20 = *a3;
  *(_OWORD *)(a1 + 184) = a3[1];
  *(_OWORD *)(a1 + 168) = v20;
  v21 = a3[2];
  v22 = a3[3];
  v23 = a3[4];
  *(_OWORD *)(a1 + 245) = *(__int128 *)((char *)a3 + 77);
  *(_OWORD *)(a1 + 232) = v23;
  *(_OWORD *)(a1 + 216) = v22;
  *(_OWORD *)(a1 + 200) = v21;
  if ((__int128 *)(a1 + 168) == a3)
  {
    *(_BYTE *)(a1 + 280) = *((_BYTE *)a3 + 112);
  }
  else
  {
    v24 = (_DWORD *)(a1 + 264);
    if (*(_BYTE *)(a1 + 268) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 264));
    v25 = *((unsigned __int8 *)a3 + 100);
    *(_BYTE *)(a1 + 268) = v25;
    *(_BYTE *)(a1 + 269) = *((_BYTE *)a3 + 101);
    if (v25 <= 0xD)
    {
      v26 = 1 << v25;
      if ((v26 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 270) = *((_BYTE *)a3 + 102);
        *v24 = *((_DWORD *)a3 + 24);
      }
      else if ((v26 & 0x3003) != 0)
      {
        *v24 = 0;
      }
      else
      {
        *v24 = *((_DWORD *)a3 + 24);
        WebCore::Length::ref((WebCore::Length *)(a1 + 264));
      }
    }
    v27 = (_DWORD *)(a1 + 272);
    if (*(_BYTE *)(a1 + 276) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 272));
    v28 = *((unsigned __int8 *)a3 + 108);
    *(_BYTE *)(a1 + 276) = v28;
    *(_BYTE *)(a1 + 277) = *((_BYTE *)a3 + 109);
    if (v28 <= 0xD)
    {
      v29 = 1 << v28;
      if ((v29 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 278) = *((_BYTE *)a3 + 110);
        *v27 = *((_DWORD *)a3 + 26);
      }
      else if ((v29 & 0x3003) != 0)
      {
        *v27 = 0;
      }
      else
      {
        *v27 = *((_DWORD *)a3 + 26);
        WebCore::Length::ref((WebCore::Length *)(a1 + 272));
      }
    }
    *(_BYTE *)(a1 + 280) = *((_BYTE *)a3 + 112);
    v30 = (_DWORD ***)(a1 + 288);
    v31 = *((unsigned int *)a3 + 33);
    if (*(_DWORD *)(a1 + 300) <= v31)
    {
      if (v31 > *(_DWORD *)(a1 + 296))
      {
        WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 288), 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 288, *((unsigned int *)a3 + 33));
      }
    }
    else
    {
      WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((_DWORD *)(a1 + 288), v31);
    }
    v32 = *((_QWORD *)a3 + 15);
    v33 = *(unsigned int *)(a1 + 300);
    if ((_DWORD)v33)
    {
      v34 = *v30;
      v35 = 8 * v33;
      do
      {
        v36 = *(_DWORD **)v32;
        v36[2] = *(_DWORD *)(*(_QWORD *)v32 + 8) + 1;
        v37 = *v34;
        *v34 = v36;
        if (v37)
        {
          if (v37[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
          else
            --v37[2];
        }
        v32 += 8;
        ++v34;
        v35 -= 8;
      }
      while (v35);
      v32 = *((_QWORD *)a3 + 15);
      v38 = *(_DWORD *)(a1 + 300);
    }
    else
    {
      v38 = 0;
    }
    v39 = *((unsigned int *)a3 + 33);
    if (v38 != (_DWORD)v39)
    {
      v40 = &(*v30)[v38];
      v41 = (uint64_t *)(v32 + 8 * v38);
      v42 = 8 * v39 - 8 * v38;
      do
      {
        v43 = *v41++;
        ++*(_DWORD *)(v43 + 8);
        *v40++ = v43;
        v42 -= 8;
      }
      while (v42);
    }
    *(_DWORD *)(a1 + 300) = v39;
  }
  v44 = *((_QWORD *)a3 + 17);
  if (v44)
    ++*(_DWORD *)(v44 + 8);
  v45 = *(_DWORD **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v44;
  if (v45)
  {
    if (v45[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
    else
      --v45[2];
  }
  v46 = *((_QWORD *)a3 + 18);
  if (v46)
    ++*(_DWORD *)(v46 + 8);
  v47 = *(_DWORD **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v46;
  if (v47)
  {
    if (v47[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
    else
      --v47[2];
  }
  v48 = *((_QWORD *)a3 + 19);
  if (v48)
    ++*(_DWORD *)(v48 + 8);
  v49 = *(_DWORD **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v48;
  if (v49)
  {
    if (v49[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
    else
      --v49[2];
  }
  v50 = *((_QWORD *)a3 + 20);
  if (v50)
    ++*(_DWORD *)(v50 + 8);
  v51 = *(_DWORD **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v50;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  if ((__int128 *)(a1 + 168) != a3)
  {
    v52 = (_DWORD *)(a1 + 336);
    if (*(_BYTE *)(a1 + 340) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 336));
    v53 = *((unsigned __int8 *)a3 + 172);
    *(_BYTE *)(a1 + 340) = v53;
    *(_BYTE *)(a1 + 341) = *((_BYTE *)a3 + 173);
    if (v53 <= 0xD)
    {
      v54 = 1 << v53;
      if ((v54 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 342) = *((_BYTE *)a3 + 174);
        *v52 = *((_DWORD *)a3 + 42);
      }
      else if ((v54 & 0x3003) != 0)
      {
        *v52 = 0;
      }
      else
      {
        *v52 = *((_DWORD *)a3 + 42);
        WebCore::Length::ref((WebCore::Length *)(a1 + 336));
      }
    }
    v55 = (_DWORD *)(a1 + 344);
    if (*(_BYTE *)(a1 + 348) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 344));
    v56 = *((unsigned __int8 *)a3 + 180);
    *(_BYTE *)(a1 + 348) = v56;
    *(_BYTE *)(a1 + 349) = *((_BYTE *)a3 + 181);
    if (v56 <= 0xD)
    {
      v57 = 1 << v56;
      if ((v57 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 350) = *((_BYTE *)a3 + 182);
        *v55 = *((_DWORD *)a3 + 44);
      }
      else if ((v57 & 0x3003) != 0)
      {
        *v55 = 0;
      }
      else
      {
        *v55 = *((_DWORD *)a3 + 44);
        WebCore::Length::ref((WebCore::Length *)(a1 + 344));
      }
    }
    v58 = (_DWORD *)(a1 + 352);
    if (*(_BYTE *)(a1 + 356) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 352));
    v59 = *((unsigned __int8 *)a3 + 188);
    *(_BYTE *)(a1 + 356) = v59;
    *(_BYTE *)(a1 + 357) = *((_BYTE *)a3 + 189);
    if (v59 <= 0xD)
    {
      v60 = 1 << v59;
      if ((v60 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 358) = *((_BYTE *)a3 + 190);
        *v58 = *((_DWORD *)a3 + 46);
      }
      else if ((v60 & 0x3003) != 0)
      {
        *v58 = 0;
      }
      else
      {
        *v58 = *((_DWORD *)a3 + 46);
        WebCore::Length::ref((WebCore::Length *)(a1 + 352));
      }
    }
    v61 = (_DWORD *)(a1 + 360);
    if (*(_BYTE *)(a1 + 364) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 360));
    v62 = *((unsigned __int8 *)a3 + 196);
    *(_BYTE *)(a1 + 364) = v62;
    *(_BYTE *)(a1 + 365) = *((_BYTE *)a3 + 197);
    if (v62 <= 0xD)
    {
      v63 = 1 << v62;
      if ((v63 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 366) = *((_BYTE *)a3 + 198);
        *v61 = *((_DWORD *)a3 + 48);
      }
      else if ((v63 & 0x3003) != 0)
      {
        *v61 = 0;
      }
      else
      {
        *v61 = *((_DWORD *)a3 + 48);
        WebCore::Length::ref((WebCore::Length *)(a1 + 360));
      }
    }
    v64 = (_DWORD *)(a1 + 368);
    if (*(_BYTE *)(a1 + 372) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 368));
    v65 = *((unsigned __int8 *)a3 + 204);
    *(_BYTE *)(a1 + 372) = v65;
    *(_BYTE *)(a1 + 373) = *((_BYTE *)a3 + 205);
    if (v65 <= 0xD)
    {
      v66 = 1 << v65;
      if ((v66 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 374) = *((_BYTE *)a3 + 206);
        *v64 = *((_DWORD *)a3 + 50);
      }
      else if ((v66 & 0x3003) != 0)
      {
        *v64 = 0;
      }
      else
      {
        *v64 = *((_DWORD *)a3 + 50);
        WebCore::Length::ref((WebCore::Length *)(a1 + 368));
      }
    }
  }
  v67 = *((_DWORD *)a3 + 52);
  *(_BYTE *)(a1 + 380) = *((_BYTE *)a3 + 212);
  *(_DWORD *)(a1 + 376) = v67;
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 384), (unsigned int *)a3 + 54);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 400), (unsigned int *)a3 + 58);
  result = vorrq_s8(*(int8x16_t *)(a1 + 64), (int8x16_t)vdupq_n_s64(0x20uLL));
  *(int8x16_t *)(a1 + 64) = result;
  return result;
}

WebKit::RemoteLayerBackingStore *WebKit::PlatformCALayerRemote::purgeFrontBufferForTesting(WebKit::PlatformCALayerRemote *this)
{
  WebKit::RemoteLayerBackingStore *result;

  result = (WebKit::RemoteLayerBackingStore *)*((_QWORD *)this + 59);
  if (result)
    return WebKit::RemoteLayerBackingStore::purgeFrontBufferForTesting(result);
  return result;
}

WebKit::RemoteLayerBackingStore *WebKit::PlatformCALayerRemote::purgeBackBufferForTesting(WebKit::PlatformCALayerRemote *this)
{
  WebKit::RemoteLayerBackingStore *result;

  result = (WebKit::RemoteLayerBackingStore *)*((_QWORD *)this + 59);
  if (result)
    return WebKit::RemoteLayerBackingStore::purgeBackBufferForTesting(result);
  return result;
}

WebKit::RemoteLayerBackingStore *WebKit::PlatformCALayerRemote::markFrontBufferVolatileForTesting(WebKit::PlatformCALayerRemote *this)
{
  WebKit::RemoteLayerBackingStore *result;

  result = (WebKit::RemoteLayerBackingStore *)*((_QWORD *)this + 59);
  if (result)
    return WebKit::RemoteLayerBackingStore::markFrontBufferVolatileForTesting(result);
  return result;
}

void WebKit::PlatformCAAnimationRemote::~PlatformCAAnimationRemote(WebKit::PlatformCAAnimationRemote *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::PlatformCAAnimationRemote::~PlatformCAAnimationRemote(this, a2);
  WTF::fastFree(v2, v3);
}

{
  void *v3;
  void *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;

  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, a2);
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, v3);
  v5 = (WTF *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v5, v4);
  }
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, v4);
  v7 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t WebCore::PlatformCAAnimation::isPlatformCAAnimationCocoa(WebCore::PlatformCAAnimation *this)
{
  return 0;
}

uint64_t WebCore::PlatformCAAnimation::isPlatformCAAnimationWin(WebCore::PlatformCAAnimation *this)
{
  return 0;
}

FloatSize *WebCore::GraphicsLayer::setContentsTilePhase(FloatSize *this, const FloatSize *a2)
{
  this[38] = *a2;
  return this;
}

FloatSize *WebCore::GraphicsLayer::setContentsTileSize(FloatSize *this, const FloatSize *a2)
{
  this[39] = *a2;
  return this;
}

uint64_t WebKit::GraphicsLayerCARemote::shouldDirectlyCompositeImage(WebKit::GraphicsLayerCARemote *this, Image *a2)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::setContentsOrientation(uint64_t result, char a2)
{
  *(_BYTE *)(result + 176) = a2;
  return result;
}

float WebCore::GraphicsLayer::zPosition(WebCore::GraphicsLayer *this)
{
  return *((float *)this + 33);
}

float WebCore::GraphicsLayerCA::pixelAlignmentOffset(WebCore::GraphicsLayerCA *this)
{
  return *((float *)this + 188);
}

uint64_t WebCore::GraphicsLayer::setAllowsTiling(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 1024;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFBFF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setShouldUpdateRootRelativeScaleFactor(uint64_t this, char a2)
{
  *(_BYTE *)(this + 890) = *(_BYTE *)(this + 890) & 0xFE | a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::isTrackingDisplayListReplay(WebCore::GraphicsLayer *this)
{
  return (*((unsigned __int8 *)this + 179) >> 1) & 1;
}

uint64_t WebCore::GraphicsLayer::isGraphicsLayerTextureMapper(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::isCoordinatedGraphicsLayer(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerIdentifier(WebCore::GraphicsLayerCA *this)
{
  return (*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 32))(this);
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerRespondsToLayoutChanges(WebCore::GraphicsLayerCA *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerContentsOrientation(WebCore::GraphicsLayerCA *this)
{
  return *((unsigned __int8 *)this + 176);
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerShowDebugBorders(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 13) & 1;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerRepaintCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerIncrementRepaintCount(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_DWORD *)(a1 + 180) + 1);
  *(_DWORD *)(a1 + 180) = v1;
  return v1;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerContentsOpaque(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 1) & 1;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerDrawsContent(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 5) & 1;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerRenderingIsSuppressedIncludingDescendants(WebCore::GraphicsLayerCA *this)
{
  return (*((unsigned __int8 *)this + 179) >> 5) & 1;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerContainsBitmapOnly(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 224))(*(_QWORD *)(a1 + 24), a1);
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerShouldPaintUsingCompositeCopy(WebCore::GraphicsLayerCA *this)
{
  return (*((unsigned __int8 *)this + 179) >> 4) & 1;
}

uint64_t WebCore::GraphicsLayerCA::isCommittingChanges(WebCore::GraphicsLayerCA *this)
{
  return *((unsigned __int8 *)this + 889);
}

uint64_t WebCore::GraphicsLayerCA::isUsingDisplayListDrawing(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 177) >> 9) & 1;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerIdentifier(WebCore::GraphicsLayerCA *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 76) + 32))((char *)this - 608);
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerRespondsToLayoutChanges(WebCore::GraphicsLayerCA *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerContentsOrientation(WebCore::GraphicsLayerCA *this)
{
  return *((unsigned __int8 *)this - 432);
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerShowDebugBorders(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this - 431) >> 13) & 1;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerContentsOpaque(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this - 431) >> 1) & 1;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerRenderingIsSuppressedIncludingDescendants(WebCore::GraphicsLayerCA *this)
{
  return (*((unsigned __int8 *)this - 429) >> 5) & 1;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::isCommittingChanges(WebCore::GraphicsLayerCA *this)
{
  return *((unsigned __int8 *)this + 281);
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::isUsingDisplayListDrawing(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 - 431) >> 9) & 1;
}

uint64_t WebCore::PlatformCALayer::hostingContextIdentifier(WebCore::PlatformCALayer *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemote::platformLayer(WebKit::PlatformCALayerRemote *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemote::sublayersForLogging@<X0>(WebKit::PlatformCALayerRemote *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 792);
}

uint64_t WebCore::PlatformCALayer::eventRegion(WebCore::PlatformCALayer *this)
{
  return 0;
}

uint64_t std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(a1 + 32));
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(a1 + 16));
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF *WebKit::OverridePasteboardForSelectionReplacement::OverridePasteboardForSelectionReplacement(uint64_t a1, uint64_t a2, char *a3, WTF *a4)
{
  WTF *result;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF *v12;
  WTF *v13;
  char *v14;
  char v15;
  void *v16;
  WTF *v17;
  uint64_t v18;

  result = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
  v9 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v9)
    return (WTF *)a1;
  v10 = *(WTF::StringImpl ***)a2;
  v11 = &v10[v9];
  while (1)
  {
    {
      WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
    }
    {
      v17 = (WTF *)"ReplaceSelectionPasteboard";
      v18 = 27;
      result = (WTF *)WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::replaceSelectionPasteboardName(void)::string, (uint64_t)&v17);
    }
    v17 = 0;
    LODWORD(v18) = 0;
    HIDWORD(v18) = (_DWORD)a4;
    if (!a4)
      goto LABEL_11;
    if ((unint64_t)a4 >> 32)
      break;
    v12 = (WTF *)WTF::fastMalloc(a4);
    LODWORD(v18) = (_DWORD)a4;
    v17 = v12;
    v13 = a4;
    v14 = a3;
    do
    {
      v15 = *v14++;
      *(_BYTE *)v12 = v15;
      v12 = (WTF *)((char *)v12 + 1);
      v13 = (WTF *)((char *)v13 - 1);
    }
    while (v13);
LABEL_11:
    WebKit::WebPasteboardOverrides::addOverride(&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, &WebKit::replaceSelectionPasteboardName(void)::string, v10, (const WTF::StringImpl *)&v17);
    result = v17;
    if (v17)
    {
      v17 = 0;
      LODWORD(v18) = 0;
      result = (WTF *)WTF::fastFree(result, v16);
    }
    if (++v10 == v11)
      return (WTF *)a1;
  }
  __break(0xC471u);
  return result;
}

void sub_197394978(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::IgnoreSelectionChangeForScope *WebCore::IgnoreSelectionChangeForScope::IgnoreSelectionChangeForScope(WebCore::IgnoreSelectionChangeForScope *this, WebCore::LocalFrame *a2)
{
  WebCore::TemporarySelectionChange::TemporarySelectionChange();
  return this;
}

void sub_1973949E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22)
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a9);
  _Unwind_Resume(exception_object);
}

void WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement(const WTF::String **this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const WTF::String *v5;
  _QWORD v6[2];

  v3 = *((unsigned int *)this + 3);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = *this;
    do
    {
      {
        WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
      }
      {
        v6[0] = "ReplaceSelectionPasteboard";
        v6[1] = 27;
        WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::replaceSelectionPasteboardName(void)::string, (uint64_t)v6);
      }
      WebKit::WebPasteboardOverrides::removeOverride((WebKit::WebPasteboardOverrides *)&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, &WebKit::replaceSelectionPasteboardName(void)::string, v5);
      v5 = (const WTF::String *)((char *)v5 + 8);
      v4 -= 8;
    }
    while (v4);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this, a2);
}

void sub_197394AD8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate::~GraphicsLayerCARemoteAsyncContentsDisplayDelegate(WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E34D6C58;
  if (*((_BYTE *)this + 128))
  {
    v2 = *((unsigned int *)this + 30);
    if ((_DWORD)v2 != -1)
      off_1E34D6C98[v2]((int)&v3, (WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate *)((char *)this + 56));
    *((_DWORD *)this + 30) = -1;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 2);
  WebCore::GraphicsLayerContentsDisplayDelegate::~GraphicsLayerContentsDisplayDelegate(this);
}

{
  uint64_t v2;
  WTF *v3;
  void *v4;
  char v5;

  *(_QWORD *)this = off_1E34D6C58;
  if (*((_BYTE *)this + 128))
  {
    v2 = *((unsigned int *)this + 30);
    if ((_DWORD)v2 != -1)
      off_1E34D6C98[v2]((int)&v5, (WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate *)((char *)this + 56));
    *((_DWORD *)this + 30) = -1;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 2);
  WebCore::GraphicsLayerContentsDisplayDelegate::~GraphicsLayerContentsDisplayDelegate(this);
  WTF::fastFree(v3, v4);
}

uint64_t WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate::display(uint64_t this, WebCore::PlatformCALayer *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::PlatformCALayerRemote *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15[16];
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = this;
  v4 = (unsigned __int8 *)(this + 48);
  if (__ldaxr((unsigned __int8 *)(this + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEABB3C](this + 48);
LABEL_5:
  if (!*(_BYTE *)(v3 + 128))
    goto LABEL_14;
  this = (*(uint64_t (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 32))(a2);
  if ((this - 1) >= 4u)
  {
    v6 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Develope"
         "r/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
    v7 = "match_constness_t<Source, Target> &WTF::downcast(Source &) [Target = WebKit::PlatformCALayerRemote, Source = We"
         "bCore::PlatformCALayer]";
    this = 96;
    v8 = 1;
    __break(0xC471u);
  }
  else if (*(_BYTE *)(v3 + 128))
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__copy_constructor(v15, (unsigned int *)(v3 + 56));
    v9 = *(_QWORD *)(v3 + 136);
    v17 = 0;
    v18 = v9;
    v19 = 1;
    WebKit::PlatformCALayerRemote::ensureBackingStore(a2, v10);
    WebKit::RemoteLayerBackingStore::setDelegatedContents(*((_QWORD *)a2 + 59), (uint64_t)v15);
    this = v17;
    v17 = 0;
    if (!this)
      goto LABEL_12;
    v11 = (unsigned int *)(this + 8);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (v13)
      goto LABEL_12;
    goto LABEL_22;
  }
  __break(1u);
LABEL_22:
  atomic_store(1u, (unsigned int *)(this + 8));
  this = (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)this + 8))(this, v6, v7, v8);
LABEL_12:
  if (v16 != -1)
    this = off_1E34D6C98[v16]((int)&v20, (WTF::MachSendRight *)v15);
LABEL_14:
  v14 = __ldxr(v4);
  if (v14 == 1)
  {
    if (!__stlxr(0, v4))
      return this;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void sub_197394D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  goto LABEL_6;
}

_QWORD *WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate::tryCopyToLayer(WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate *this, WebCore::ImageBuffer *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *result;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  IPC::Encoder *v28[8];
  int v29;
  unsigned int v30[16];
  int v31;
  char v32;
  _QWORD *v33;
  char v34;

  WebCore::ImageBuffer::clone(a2);
  if (!v33)
    return 0;
  (*(void (**)(_QWORD *))(*v33 + 24))(v33);
  v3 = (*(uint64_t (**)(_QWORD *))(*v33 + 128))(v33);
  v5 = v3;
  if (!v3 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) & 1) == 0)
  {
    v9 = 0;
    goto LABEL_25;
  }
  result = (*(_QWORD *(**)(unsigned int *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 24))(v30, v5, 0);
  v7 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_10;
  }
  result = (_QWORD *)MEMORY[0x19AEABB3C]((char *)this + 48);
LABEL_10:
  if (!v32)
    goto LABEL_44;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v28, v30);
  result = (_QWORD *)std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::operator=[abi:sn180100]<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>((uint64_t)this + 56, (uint64_t)v28);
  if (v29 != -1)
    result = (_QWORD *)off_1E34D6C98[v29]((int)&v34, (WTF::MachSendRight *)v28);
  *((_QWORD *)this + 17) = v33[15];
  v10 = __ldxr(v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v7))
LABEL_17:
    result = (_QWORD *)WTF::Lock::unlockSlow((WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate *)((char *)this + 48));
  if (v32)
  {
    v11 = v33[15];
    v12 = *((_QWORD *)this + 2);
    v13 = *((_QWORD *)this + 3);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 1105;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v28[0] = (IPC::Encoder *)v14;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v14, (uint64_t *)this + 4);
    LOBYTE(v13) = v31;
    v15 = v31;
    *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = v13;
    IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>((IPC::Encoder *)v14, (unint64_t)v30, v15);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = v11;
    IPC::Connection::sendMessageImpl(v12, (uint64_t *)v28, 0, 0);
    v16 = v28[0];
    v28[0] = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v4);
      WTF::fastFree(v17, v18);
    }
    if (v32 && v31 != -1)
      off_1E34D6C98[v31]((int)v28, (WTF::MachSendRight *)v30);
    v9 = 1;
LABEL_25:
    v19 = v33;
    v33 = 0;
    if (!v19)
      return (_QWORD *)v9;
    v20 = v19[1];
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_30;
    }
    MEMORY[0x19AEABB3C](v20);
LABEL_30:
    v22 = *(_QWORD *)(v20 + 8);
    v23 = v22 - 1;
    *(_QWORD *)(v20 + 8) = v22 - 1;
    if (v22 == 1)
    {
      v27 = *(_QWORD *)(v20 + 16);
      v24 = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v20 + 24) = 0;
      v25 = v27 != 0;
    }
    else
    {
      v24 = 0;
      v25 = 1;
    }
    v26 = __ldxr((unsigned __int8 *)v20);
    if (v26 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
      {
        if (!v23)
          goto LABEL_38;
        return (_QWORD *)v9;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
    if (!v23)
    {
LABEL_38:
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      if (!v25)
        WTF::fastFree((WTF *)v20, v4);
    }
    return (_QWORD *)v9;
  }
LABEL_44:
  __break(1u);
  return result;
}

void sub_1973950C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,int a29,char a30)
{
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;

  if (a30 && a28 != -1)
    off_1E34D6C98[a28](v30 - 49, (WTF::MachSendRight *)&a20);
  v32 = *(_QWORD *)(v30 - 64);
  *(_QWORD *)(v30 - 64) = 0;
  if (!v32)
LABEL_22:
    _Unwind_Resume(exception_object);
  v33 = *(_QWORD *)(v32 + 8);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
LABEL_10:
    v35 = *(_QWORD *)(v33 + 8);
    v36 = v35 - 1;
    *(_QWORD *)(v33 + 8) = v35 - 1;
    if (v35 == 1)
    {
      v40 = *(_QWORD *)(v33 + 16);
      v37 = *(_QWORD *)(v33 + 24);
      *(_QWORD *)(v33 + 24) = 0;
      v38 = v40 != 0;
    }
    else
    {
      v37 = 0;
      v38 = 1;
    }
    v39 = __ldxr((unsigned __int8 *)v33);
    if (v39 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v33))
      {
LABEL_17:
        if (!v36)
        {
          if (v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          if (!v38)
            WTF::fastFree((WTF *)v33, a2);
        }
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
    goto LABEL_17;
  }
  MEMORY[0x19AEABB3C](v33);
  goto LABEL_10;
}

uint64_t WebCore::GraphicsLayerAsyncContentsDisplayDelegate::isGraphicsLayerAsyncContentsDisplayDelegateCocoa(WebCore::GraphicsLayerAsyncContentsDisplayDelegate *this)
{
  return 0;
}

uint64_t WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate::isGraphicsLayerCARemoteAsyncContentsDisplayDelegate(WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate *this)
{
  return 1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 128);
  v4 = *(unsigned int *)(a2 + 128);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34D6CA8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 128) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34D6CD0[v4])(&v5, result, a2);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  _DWORD *v4;
  uint64_t v5;
  float result;
  char v7;

  v4 = *(_DWORD **)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 128);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *(_DWORD *)a3;
      return result;
    }
    ((void (*)(char *, _DWORD *))off_1E34D6CA8[v5])(&v7, v4);
  }
  result = *a3;
  *v4 = *(_DWORD *)a3;
  v4[32] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v4;

  v1 = *a1;
  v2 = *(unsigned int *)(*a1 + 128);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return WebCore::Color::operator=();
    ((void (*)(char *, uint64_t))off_1E34D6CA8[v2])(&v4, v1);
  }
  *(_DWORD *)(v1 + 128) = -1;
  result = WebCore::Color::Color();
  *(_DWORD *)(v1 + 128) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 128);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D6CA8[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 128) = -1;
  v7 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 128) = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 128);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v6 = *a3;
      v7 = a3[1];
      v8 = a3[3];
      *(_OWORD *)(a2 + 32) = a3[2];
      *(_OWORD *)(a2 + 48) = v8;
      *(_OWORD *)a2 = v6;
      *(_OWORD *)(a2 + 16) = v7;
      result = (__n128)a3[4];
      v10 = a3[5];
      v11 = a3[7];
      *(_OWORD *)(a2 + 96) = a3[6];
      *(_OWORD *)(a2 + 112) = v11;
      *(__n128 *)(a2 + 64) = result;
      *(_OWORD *)(a2 + 80) = v10;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E34D6CA8[v5])(&v17, v4);
  }
  *(_DWORD *)(v4 + 128) = -1;
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[3];
  *(_OWORD *)(v4 + 32) = a3[2];
  *(_OWORD *)(v4 + 48) = v14;
  *(_OWORD *)v4 = v12;
  *(_OWORD *)(v4 + 16) = v13;
  result = (__n128)a3[4];
  v15 = a3[5];
  v16 = a3[7];
  *(_OWORD *)(v4 + 96) = a3[6];
  *(_OWORD *)(v4 + 112) = v16;
  *(__n128 *)(v4 + 64) = result;
  *(_OWORD *)(v4 + 80) = v15;
  *(_DWORD *)(v4 + 128) = 3;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSY_EEEDcSQ_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 128);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 4)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E34D6CA8[v5])(&v11, v4);
LABEL_9:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    *(_DWORD *)(v4 + 128) = 4;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 128);
  v4 = *(unsigned int *)(a2 + 128);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34D6CA8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 128) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E34D6CF8 + v4))(&v5, result, a2);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  _DWORD *v4;
  uint64_t v5;
  float result;
  char v7;

  v4 = *(_DWORD **)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 128);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *(_DWORD *)a3;
      return result;
    }
    ((void (*)(char *, _DWORD *))off_1E34D6CA8[v5])(&v7, v4);
  }
  result = *a3;
  *v4 = *(_DWORD *)a3;
  v4[32] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS10_EEEDcSS_DpT0_(WebCore::Color **a1, int a2, Color *a3)
{
  WebCore::Color *v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  v4 = *a1;
  v5 = *((unsigned int *)*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return WebCore::Color::operator=();
    ((void (*)(char *, WebCore::Color *))off_1E34D6CA8[v5])(&v7, v4);
  }
  *((_DWORD *)v4 + 32) = -1;
  result = WebCore::Color::Color(v4, a3);
  *((_DWORD *)v4 + 32) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 128);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D6CA8[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 128) = -1;
  v7 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 128) = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 128);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v6 = *a3;
      v7 = a3[1];
      v8 = a3[3];
      *(_OWORD *)(a2 + 32) = a3[2];
      *(_OWORD *)(a2 + 48) = v8;
      *(_OWORD *)a2 = v6;
      *(_OWORD *)(a2 + 16) = v7;
      result = (__n128)a3[4];
      v10 = a3[5];
      v11 = a3[7];
      *(_OWORD *)(a2 + 96) = a3[6];
      *(_OWORD *)(a2 + 112) = v11;
      *(__n128 *)(a2 + 64) = result;
      *(_OWORD *)(a2 + 80) = v10;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E34D6CA8[v5])(&v17, v4);
  }
  *(_DWORD *)(v4 + 128) = -1;
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[3];
  *(_OWORD *)(v4 + 32) = a3[2];
  *(_OWORD *)(v4 + 48) = v14;
  *(_OWORD *)v4 = v12;
  *(_OWORD *)(v4 + 16) = v13;
  result = (__n128)a3[4];
  v15 = a3[5];
  v16 = a3[7];
  *(_OWORD *)(v4 + 96) = a3[6];
  *(_OWORD *)(v4 + 112) = v16;
  *(__n128 *)(v4 + 64) = result;
  *(_OWORD *)(v4 + 80) = v15;
  *(_DWORD *)(v4 + 128) = 3;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS10_EEEDcSS_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 128);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5 != 4)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E34D6CA8[v5])(&v15, v4);
LABEL_11:
    *(_DWORD *)(v4 + 128) = -1;
    v12 = *a3;
    v13 = *a3 + 2;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    *(_QWORD *)v4 = v12;
    *(_DWORD *)(v4 + 128) = 4;
    return result;
  }
  v6 = *a3;
  v7 = *a3 + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  result = *a2;
  *a2 = v6;
  if (result)
  {
    v9 = result + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::animationValueFromKeyframeValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(a2 + 128);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_0,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_1,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_2,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_3,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E34D6D20[v2])(&v6);
  }
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_0,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_1,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_2,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_3,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&>@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>, double a3@<D0>)
{
  CFTypeRef result;

  LODWORD(a3) = *a1;
  result = (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_0,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_1,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_2,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_3,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&>@<X0>(const Color *a1@<X1>, _QWORD *a2@<X8>)
{
  int8x16_t v3;
  unsigned int v4;
  float v5;
  float v6;
  float v7;
  int8x16_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int8x16_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int8x16_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int8x16_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int8x16_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int8x16_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int8x16_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int8x16_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int8x16_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int8x16_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int8x16_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int8x16_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int8x16_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int8x16_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int8x16_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int8x16_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int8x16_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int8x16_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int8x16_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  void *result;
  void *v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  int8x16_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  WebCore::Color::Color((WebCore::Color *)&v89, a1);
  if ((v89 & 0x8000000000000) != 0)
  {
    v3.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
    v5 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 8);
    v6 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 0xC);
    v7 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 0x10);
    switch(HIBYTE(v89))
    {
      case 0u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v8.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v90);
        v91 = __PAIR64__(v9, v8.u32[0]);
        v92 = __PAIR64__(v11, v10);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v8);
        break;
      case 1u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v53.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v90);
        v91 = __PAIR64__(v54, v53.u32[0]);
        v92 = __PAIR64__(v56, v55);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v53);
        break;
      case 2u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v37.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v90);
        v91 = __PAIR64__(v38, v37.u32[0]);
        v92 = __PAIR64__(v40, v39);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v37);
        break;
      case 3u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v45.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v90);
        v91 = __PAIR64__(v46, v45.u32[0]);
        v92 = __PAIR64__(v48, v47);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v45);
        break;
      case 4u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v25.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v90);
        v91 = __PAIR64__(v26, v25.u32[0]);
        v92 = __PAIR64__(v28, v27);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v25);
        break;
      case 5u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v57.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(&v90);
        v91 = __PAIR64__(v58, v57.u32[0]);
        v92 = __PAIR64__(v60, v59);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v57);
        break;
      case 6u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v65.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v90);
        v91 = __PAIR64__(v66, v65.u32[0]);
        v92 = __PAIR64__(v68, v67);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v65);
        break;
      case 7u:
        *(float *)v49.i32 = WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v3, v5, v6, v7);
        v91 = __PAIR64__(v50, v49.u32[0]);
        v92 = __PAIR64__(v52, v51);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v49);
        break;
      case 8u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v73.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert();
        v91 = __PAIR64__(v74, v73.u32[0]);
        v92 = __PAIR64__(v76, v75);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v73);
        break;
      case 9u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v33.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert();
        v91 = __PAIR64__(v34, v33.u32[0]);
        v92 = __PAIR64__(v36, v35);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v33);
        break;
      case 0xAu:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v77.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::LCHA<float>,void>::convert();
        v91 = __PAIR64__(v78, v77.u32[0]);
        v92 = __PAIR64__(v80, v79);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v77);
        break;
      case 0xBu:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v21.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::Lab<float>,void>::convert();
        v91 = __PAIR64__(v22, v21.u32[0]);
        v92 = __PAIR64__(v24, v23);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v21);
        break;
      case 0xCu:
        LODWORD(v91) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *((float *)&v91 + 1) = v5;
        v92 = __PAIR64__(LODWORD(v7), LODWORD(v6));
        *(float *)v29.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)&v91, v3);
        v91 = __PAIR64__(v30, v29.u32[0]);
        v92 = __PAIR64__(v32, v31);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v29);
        break;
      case 0xDu:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v61.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLCHA<float>,void>::convert();
        v91 = __PAIR64__(v62, v61.u32[0]);
        v92 = __PAIR64__(v64, v63);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v61);
        break;
      case 0xEu:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v17.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLab<float>,void>::convert();
        v91 = __PAIR64__(v18, v17.u32[0]);
        v92 = __PAIR64__(v20, v19);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v17);
        break;
      case 0xFu:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v41.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(&v90);
        v91 = __PAIR64__(v42, v41.u32[0]);
        v92 = __PAIR64__(v44, v43);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v41);
        break;
      case 0x10u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v13.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v90);
        v91 = __PAIR64__(v14, v13.u32[0]);
        v92 = __PAIR64__(v16, v15);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v13);
        break;
      case 0x12u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v69.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v90, v3);
        v91 = __PAIR64__(v70, v69.u32[0]);
        v92 = __PAIR64__(v72, v71);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v69);
        break;
      case 0x13u:
        v90.i32[0] = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *(uint64_t *)((char *)v90.i64 + 4) = __PAIR64__(LODWORD(v6), LODWORD(v5));
        *(float *)&v90.i32[3] = v7;
        *(float *)v81.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((uint64_t)&v90, v3);
        v91 = __PAIR64__(v82, v81.u32[0]);
        v92 = __PAIR64__(v84, v83);
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v81);
        break;
      default:
        LODWORD(v91) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        *((float *)&v91 + 1) = v5;
        v92 = __PAIR64__(LODWORD(v7), LODWORD(v6));
        v12 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v91, v3);
        break;
    }
    v4 = v12;
  }
  else
  {
    v4 = bswap32(v89);
  }
  v91 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v4);
  v92 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", BYTE1(v4));
  v93 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", BYTE2(v4));
  v94 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", HIBYTE(v4));
  result = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v91, 4);
  *a2 = result;
  if (result)
    result = (void *)CFRetain(result);
  if ((v89 & 0x8000000000000) != 0)
  {
    result = (void *)(v89 & 0xFFFFFFFFFFFFLL);
    do
    {
      v87 = __ldaxr((unsigned int *)result);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, (unsigned int *)result));
    if (!v88)
    {
      atomic_store(1u, (unsigned int *)result);
      return (void *)WTF::fastFree((WTF *)result, v86);
    }
  }
  return result;
}

void sub_197395DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Unwind_Resume(exception_object);
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_0,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_1,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_2,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_3,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&>@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>, double a3@<D0>)
{
  int v4;
  int v5;
  uint64_t v6;
  double v7;
  double v8;
  CFTypeRef result;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  LODWORD(a3) = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3);
  LODWORD(v7) = v4;
  v10[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7, v6);
  LODWORD(v8) = v5;
  v10[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
  result = (CFTypeRef)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 3);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_0,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_1,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_2,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_3,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v3;
  CFTypeRef result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  v12 = a1[7];
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v3 = (void *)MEMORY[0x1E0CB3B18];
  WebCore::TransformationMatrix::operator CATransform3D();
  result = (CFTypeRef)objc_msgSend(v3, "valueWithCATransform3D:", v13, v5, v6, v7, v8, v9, v10, v11, v12);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_0,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_1,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_2,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_3,WebKit::animationValueFromKeyframeValue(std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&>@<X0>(const WebCore::FilterOperation *a1@<X1>, _QWORD *a2@<X8>)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *(unsigned int **)a1;
  v4 = (unsigned int *)(*(_QWORD *)a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  result = WebCore::PlatformCAFilters::filterValueForOperation((WebCore::PlatformCAFilters *)v3, a1);
  *a2 = v9;
  do
  {
    v7 = __ldaxr(v4);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v4));
  if (!v8)
  {
    atomic_store(1u, v3 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

void sub_197395FAC(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v1)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v1 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion(uint64_t a1, int8x16_t a2)
{
  double v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  _DWORD v9[4];
  unsigned int v10;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v3 = 0;
  v9[0] = LODWORD(v2);
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v10 = 0;
  do
  {
    v7 = llroundf(*(float *)&v9[v3] * 255.0);
    if (v7 >= 255)
      v7 = 255;
    *((_BYTE *)&v10 + v3++) = v7 & ~(v7 >> 63);
  }
  while (v3 != 4);
  return v10;
}

double WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(int8x16_t a1, float a2, float a3, float a4)
{
  *(float *)&a1.i32[1] = a2;
  a1.i64[1] = __PAIR64__(LODWORD(a4), LODWORD(a3));
  a1.i64[0] = vandq_s8(a1, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a1), (int8x16_t)vcgezq_f32((float32x4_t)a1))).u64[0];
  return *(double *)a1.i64;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(int8x16_t *a1)
{
  int8x16_t v1;
  int v2;
  int v3;
  int v4;
  _DWORD v6[4];

  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>(uint64_t a1, int8x16_t a2)
{
  double v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v4 = v3;
  v6 = v5;
  if (*(float *)&v2 >= 0.0031308)
  {
    v9 = (float)(powf(*(float *)&v2, 0.41667) * 1.055) + -0.055;
    v10 = 0.0;
    if (v9 > 0.0)
      v10 = v9;
    if (v9 >= 1.0)
      v8 = 1.0;
    else
      v8 = v10;
  }
  else
  {
    v7 = *(float *)&v2 * 12.92;
    if (v7 >= 0.0)
      v8 = v7;
    else
      v8 = 0.0;
  }
  if (v4 >= 0.0031308)
    powf(v4, 0.41667);
  if (v6 >= 0.0031308)
    powf(v6, 0.41667);
  return v8;
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  a2.i32[0] = *(_DWORD *)a1;
  *(double *)v2.i64 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  float v3;
  float v4;
  float v5;

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::handleMatrixConversion(a1, a2);
  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(int8x16_t a1, float a2, float a3, float a4)
{
  double v4;
  float v5;

  v4 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a1, a2, a3, a4);
  if (*(float *)&v4 <= 1.0)
    v5 = *(float *)&v4;
  else
    v5 = 1.0;
  if (*(float *)&v4 >= 0.0)
    return v5;
  else
    return 0.0;
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  double v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _OWORD v10[2];
  int v11;
  _DWORD v12[4];
  _OWORD v13[2];
  int v14;
  _DWORD v15[4];

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v12[0] = LODWORD(v2);
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  v11 = 1065207884;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
  v10[1] = unk_1978D07A0;
  v15[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v10, (uint64_t)v12);
  v15[1] = v6;
  v15[2] = v7;
  v15[3] = v8;
  v14 = 1065831128;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v13[1] = unk_1978D07C4;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v13, (uint64_t)v15);
}

float WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  float v4;
  uint64_t v6;

  for (i = 0; i != 3; ++i)
  {
    v3 = 0;
    v4 = *((float *)&v6 + i);
    do
    {
      v4 = v4 + (float)(*(float *)(a1 + v3) * *(float *)(a2 + v3));
      v3 += 4;
    }
    while (v3 != 12);
    *((float *)&v6 + i) = v4;
    a1 += 12;
  }
  return *(float *)&v6;
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>>(uint64_t a1, int8x16_t a2)
{
  double v2;
  float v3;
  float v4;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;
  float v10;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v4 = v3;
  v6 = v5;
  v7 = LODWORD(v2);
  v8 = powf(fabsf(*(float *)&v2), 2.1992);
  if (v7 < 0)
    v8 = -v8;
  if (v8 > 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  if (v8 >= 1.0)
    v10 = 1.0;
  else
    v10 = v9;
  powf(fabsf(v4), 2.1992);
  powf(fabsf(v6), 2.1992);
  return v10;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(int8x16_t *a1)
{
  int8x16_t v1;
  int v2;
  int v3;
  int v4;
  _DWORD v6[4];

  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  a2.i32[0] = *(_DWORD *)a1;
  *(double *)v2.i64 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  float v3;
  float v4;
  float v5;

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::handleMatrixConversion(a1, a2);
  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  double v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _OWORD v10[2];
  int v11;
  _DWORD v12[4];
  _OWORD v13[2];
  int v14;
  _DWORD v15[4];

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v12[0] = LODWORD(v2);
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  v11 = 1065721848;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v10[1] = unk_1978D07E8;
  v15[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v10, (uint64_t)v12);
  v15[1] = v6;
  v15[2] = v7;
  v15[3] = v8;
  v14 = 1065831128;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v13[1] = unk_1978D07C4;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v13, (uint64_t)v15);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(uint64_t a1, int8x16_t a2)
{
  double v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v4 = v3;
  v6 = v5;
  if (*(float *)&v2 <= 0.04045)
  {
    v10 = *(float *)&v2 / 12.92;
    if (v10 >= 0.0)
      v9 = v10;
    else
      v9 = 0.0;
  }
  else
  {
    v7 = powf((float)(*(float *)&v2 + 0.055) / 1.055, 2.4);
    v8 = 0.0;
    if (v7 > 0.0)
      v8 = v7;
    if (v7 >= 1.0)
      v9 = 1.0;
    else
      v9 = v8;
  }
  if (v4 > 0.04045)
    powf((float)(v4 + 0.055) / 1.055, 2.4);
  if (v6 > 0.04045)
    powf((float)(v6 + 0.055) / 1.055, 2.4);
  return v9;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(int8x16_t *a1)
{
  int8x16_t v1;
  int v2;
  int v3;
  int v4;
  _DWORD v6[4];

  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(uint64_t a1, int8x16_t a2)
{
  double v2;
  float v3;
  float v4;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v4 = v3;
  v6 = v5;
  v7 = LODWORD(v2);
  v8 = powf(fabsf(*(float *)&v2), 2.1992);
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = -v8;
  powf(fabsf(v4), 2.1992);
  powf(fabsf(v6), 2.1992);
  return v9;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(int8x16_t *a1)
{
  int8x16_t v1;
  int v2;
  int v3;
  int v4;
  _DWORD v6[4];

  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(uint64_t a1, int8x16_t a2)
{
  double v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v3 = LODWORD(v2);
  v5 = v4;
  v7 = v6;
  v8 = fabsf(*(float *)&v2);
  if (v8 <= 0.04045)
    v9 = v8 / 12.92;
  else
    v9 = powf((float)(v8 + 0.055) / 1.055, 2.4);
  v10 = fabsf(v5);
  if (v10 > 0.04045)
    powf((float)(v10 + 0.055) / 1.055, 2.4);
  v11 = fabsf(v7);
  if (v11 > 0.04045)
    powf((float)(v11 + 0.055) / 1.055, 2.4);
  if (v3 >= 0)
    return v9;
  else
    return -v9;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(int8x16_t *a1)
{
  int8x16_t v1;
  float v2;
  float v3;
  float v4;
  int8x16_t v6;

  v6 = *a1;
  WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)&v6, v6);
  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v1, v2, v3, v4);
}

void WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(uint64_t a1, int8x16_t a2)
{
  double v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v4 = v3;
  v6 = v5;
  v7 = fabsf(*(float *)&v2);
  if (v7 >= 0.0031308)
    powf(v7, 0.41667);
  v8 = fabsf(v4);
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
  v9 = fabsf(v6);
  if (v9 >= 0.0031308)
    powf(v9, 0.41667);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(int8x16_t *a1)
{
  int8x16_t v1;
  int v2;
  int v3;
  int v4;
  _DWORD v6[4];

  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  float v3;
  float v4;
  float v5;

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::handleMatrixConversion(a1, a2);
  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  double v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _OWORD v13[2];
  int v14;
  _DWORD v15[4];
  _OWORD v16[2];
  int v17;
  _DWORD v18[4];
  _OWORD v19[2];
  int v20;
  _DWORD v21[4];

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v15[0] = LODWORD(v2);
  v15[1] = v3;
  v15[2] = v4;
  v15[3] = v5;
  v14 = 1062418958;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>::linearToXYZ;
  v13[1] = unk_1978D080C;
  v18[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v13, (uint64_t)v15);
  v18[1] = v6;
  v18[2] = v7;
  v18[3] = v8;
  v17 = 1068124526;
  v16[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v16[1] = unk_1978D0830;
  v21[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v16, (uint64_t)v18);
  v21[1] = v9;
  v21[2] = v10;
  v21[3] = v11;
  v20 = 1065831128;
  v19[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v19[1] = unk_1978D07C4;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v19, (uint64_t)v21);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(uint64_t a1, int8x16_t a2)
{
  double v2;
  float v3;
  float v4;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v4 = v3;
  v6 = v5;
  if (fabsf(*(float *)&v2) <= 0.03125)
  {
    v9 = *(float *)&v2 * 0.0625;
  }
  else
  {
    v7 = LODWORD(v2);
    v8 = powf(*(float *)&v2, 1.8);
    if (v7 >= 0)
      v9 = v8;
    else
      v9 = -v8;
  }
  if (fabsf(v4) > 0.03125)
    powf(v4, 1.8);
  if (fabsf(v6) > 0.03125)
    powf(v6, 1.8);
  return v9;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(int8x16_t *a1)
{
  int8x16_t v1;
  int v2;
  int v3;
  int v4;
  _DWORD v6[4];

  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  float v3;
  float v4;
  float v5;

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::handleMatrixConversion(a1, a2);
  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  double v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _OWORD v10[2];
  int v11;
  _DWORD v12[4];
  _OWORD v13[2];
  int v14;
  _DWORD v15[4];

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v12[0] = LODWORD(v2);
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  v11 = 1065864796;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v10[1] = unk_1978D0854;
  v15[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v10, (uint64_t)v12);
  v15[1] = v6;
  v15[2] = v7;
  v15[3] = v8;
  v14 = 1065831128;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v13[1] = unk_1978D07C4;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v13, (uint64_t)v15);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(uint64_t a1, int8x16_t a2)
{
  double v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  int v8;
  double v9;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v4 = v3;
  v6 = v5;
  if (fabsf(*(float *)&v2) >= 0.081243)
  {
    v8 = LODWORD(v2);
    v9 = pow(((float)(*(float *)&v2 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v8 < 0)
      v9 = -v9;
    v7 = v9;
  }
  else
  {
    v7 = *(float *)&v2 / 4.5;
  }
  if (fabsf(v4) >= 0.081243)
    pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
  if (fabsf(v6) >= 0.081243)
    pow(((float)(v6 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
  return v7;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert()
{
  int8x16_t v0;
  float v1;
  float v2;
  float v3;

  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert();
  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v0, v1, v2, v3);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert()
{
  int8x16_t v0;
  float v1;
  float v2;
  float v3;

  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert();
  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v0, v1, v2, v3);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::LCHA<float>,void>::convert()
{
  WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert();
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::Lab<float>,void>::convert();
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::Lab<float>,void>::convert()
{
  int8x16_t v0;
  int v1;
  int v2;
  int v3;
  _DWORD v5[4];

  WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert();
  v5[0] = v0.i32[0];
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v5, v0);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  float v3;
  float v4;
  float v5;

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::handleMatrixConversion(a1, a2);
  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  double v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _OWORD v10[2];
  int v11;
  _DWORD v12[4];
  _OWORD v13[2];
  int v14;
  _DWORD v15[4];

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v12[0] = LODWORD(v2);
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  v11 = 1068124526;
  v10[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v10[1] = unk_1978D0830;
  v15[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v10, (uint64_t)v12);
  v15[1] = v6;
  v15[2] = v7;
  v15[3] = v8;
  v14 = 1065831128;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v13[1] = unk_1978D07C4;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v13, (uint64_t)v15);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLCHA<float>,void>::convert()
{
  WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert();
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLab<float>,void>::convert();
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLab<float>,void>::convert()
{
  int8x16_t v0;
  int v1;
  int v2;
  int v3;
  _DWORD v5[4];

  WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert();
  v5[0] = v0.i32[0];
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((uint64_t)v5, v0);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  float v3;
  float v4;
  float v5;

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::handleMatrixConversion(a1, a2);
  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  double v2;
  int v3;
  int v4;
  int v5;
  _OWORD v7[2];
  int v8;
  _DWORD v9[4];

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v9[0] = LODWORD(v2);
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v8 = 1065831128;
  v7[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v7[1] = unk_1978D07C4;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v7, (uint64_t)v9);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(int8x16_t *a1)
{
  int8x16_t v1;
  int v2;
  int v3;
  int v4;
  _DWORD v6[4];

  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  a2.i32[0] = *(_DWORD *)a1;
  *(double *)v2.i64 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(uint64_t a1, int8x16_t a2)
{
  double v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v4 = v3;
  v6 = v5;
  if (*(float *)&v2 <= 0.03125)
  {
    v9 = *(float *)&v2 * 0.0625;
  }
  else
  {
    v7 = powf(*(float *)&v2, 1.8);
    v8 = 0.0;
    if (v7 > 0.0)
      v8 = v7;
    if (v7 >= 1.0)
      v9 = 1.0;
    else
      v9 = v8;
  }
  if (v4 > 0.03125)
    powf(v4, 1.8);
  if (v6 > 0.03125)
    powf(v6, 1.8);
  return v9;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(int8x16_t *a1)
{
  int8x16_t v1;
  int v2;
  int v3;
  int v4;
  _DWORD v6[4];

  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[4];

  a2.i32[0] = *(_DWORD *)a1;
  *(double *)v2.i64 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v7[0] = v2.i32[0];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>>(uint64_t a1, int8x16_t a2)
{
  double v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  double v8;

  a2.i32[0] = *(_DWORD *)a1;
  v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v4 = v3;
  v6 = v5;
  if (*(float *)&v2 >= 0.081243)
  {
    v8 = pow(((float)(*(float *)&v2 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    v7 = 1.0;
    if (v8 < 1.0)
    {
      v7 = 0.0;
      if (v8 > 0.0)
        v7 = v8;
    }
  }
  else
  {
    v7 = *(float *)&v2 / 4.5;
  }
  if (v4 >= 0.081243)
    pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
  if (v6 >= 0.081243)
    pow(((float)(v6 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
  return v7;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_DWORD **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          if (v6[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
            v5 = *(WTF::StringImpl **)v4;
          }
          else
          {
            --v6[2];
          }
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

_QWORD *std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100]<true,0>(_QWORD *a1, _DWORD *a2, WebKit::PlatformCAAnimationRemoteProperties *a3)
{
  if (a2)
    *a2 += 2;
  *a1 = a2;
  WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties((WebKit::PlatformCAAnimationRemoteProperties *)(a1 + 1), a3);
  return a1;
}

void sub_197397814(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 128) = -1;
  v3 = *(unsigned int *)(a2 + 128);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))*(&off_1E34D6D60 + v3))(&v5, a1, a2);
    *(_DWORD *)(a1 + 128) = v3;
  }
  return a1;
}

void sub_1973978A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(unsigned int *)(v12 + 128);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_1E34D6CA8[v14])(&a12, v12);
  *(_DWORD *)(v12 + 128) = -1;
  _Unwind_Resume(exception_object);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS11_EEEDcST_DpT0_(int a1, WebCore::Color *this, Color *a3)
{
  return WebCore::Color::Color(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  result = (__n128)a3[4];
  v7 = a3[5];
  v8 = a3[7];
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_OWORD *)(a2 + 112) = v8;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v7;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  v4 = (unsigned int *)(*a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *a2 = v3;
}

BOOL WebCore::outOfLineComponentsEqual(unint64_t this, unint64_t a2, const Color *a3)
{
  uint64_t v3;
  BOOL v4;
  unint64_t i;
  _BOOL4 v6;
  _OWORD v8[2];

  v3 = 0;
  if ((this & 0x8000000000000) != 0 && (a2 & 0x8000000000000) != 0)
  {
    v4 = 0;
    for (i = 0; i != 4; ++i)
    {
      if (*((float *)&v8[1] + i) != *((float *)v8 + i))
        break;
      v4 = i > 2;
    }
    v6 = HIBYTE(this) == HIBYTE(a2) && BYTE6(this) == BYTE6(a2);
    return v4 && v6;
  }
  return v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 56);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D6D48[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 56);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      v8 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(__n128 *)a2 = result;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E34D6D48[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 56) = -1;
  result = *(__n128 *)a3;
  v9 = *(_OWORD *)(a3 + 16);
  v10 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 16) = v9;
  *(_OWORD *)(v4 + 32) = v10;
  *(__n128 *)v4 = result;
  *(_DWORD *)(v4 + 56) = 1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEERKSV_EEEDcSN_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 56);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E34D6D48[v5])(&v15, v4);
LABEL_11:
    *(_DWORD *)(v4 + 56) = -1;
    v12 = *a3;
    v13 = *a3 + 2;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    *(_QWORD *)v4 = v12;
    *(_DWORD *)(v4 + 56) = 2;
    return result;
  }
  v6 = *a3;
  v7 = *a3 + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  result = *a2;
  *a2 = v6;
  if (result)
  {
    v9 = result + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int **v18;
  unsigned int **v19;
  unsigned int **v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;

  if (a2 != a1)
  {
    v4 = a2[3];
    if (a1[3] <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
      }
    }
    else
    {
      WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    v5 = *(unsigned int ***)a2;
    v6 = a1[3];
    if ((_DWORD)v6)
    {
      v7 = &v5[v6];
      v8 = *(unsigned int ***)a1;
      do
      {
        v9 = *v5;
        v10 = *v5 + 2;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        v12 = *v8;
        *v8 = v9;
        if (v12)
        {
          v13 = v12 + 2;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v12 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
          }
        }
        ++v5;
        ++v8;
      }
      while (v5 != v7);
      v5 = *(unsigned int ***)a2;
      v16 = a1[3];
    }
    else
    {
      v16 = 0;
    }
    v17 = a2[3];
    if (v16 != (_DWORD)v17)
    {
      v18 = &v5[v17];
      v19 = (unsigned int **)(*(_QWORD *)a1 + 8 * v16);
      v20 = &v5[v16];
      do
      {
        v21 = *v20;
        v22 = *v20 + 2;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 + 1, v22));
        *v19++ = v21;
        ++v20;
      }
      while (v20 != v18);
      v16 = a2[3];
    }
    a1[3] = v16;
  }
  return a1;
}

void WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t *v16;
  BOOL v17;
  int v18;
  __int16 v19;
  char v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v18 = -1640531527;
    v19 = 0;
    v20 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v18, a2);
    v7 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v18);
    v8 = *a2;
    v9 = a2[1];
    v10 = v7 & v6;
    v11 = (uint64_t *)(v4 + 80 * (v7 & v6));
    v12 = *v11;
    v13 = v11[1];
    if (v13 == v9 && v12 == v8)
    {
LABEL_13:
      std::__optional_copy_base<WebKit::TextAnimationUnstyledRangeData,false>::__optional_copy_base[abi:sn180100]((uint64_t)a3, (__n128 *)(v4 + 80 * v10 + 16));
      return;
    }
    v15 = 1;
    while (v12 | v13)
    {
      v10 = (v10 + v15) & v6;
      v16 = (uint64_t *)(v4 + 80 * v10);
      v12 = *v16;
      v13 = v16[1];
      v17 = v13 == v9 && v12 == v8;
      ++v15;
      if (v17)
        goto LABEL_13;
    }
  }
  LOBYTE(v18) = 0;
  v21 = 0;
  *a3 = 0;
  a3[48] = 0;
  std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18);
}

__n128 std::__optional_copy_base<WebKit::TextAnimationUnstyledRangeData,false>::__optional_copy_base[abi:sn180100](uint64_t a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (a2[3].n128_u8[0])
  {
    result = *a2;
    *(__n128 *)a1 = *a2;
    v3 = a2[1].n128_u64[0];
    *(_DWORD *)(v3 + 24) += 2;
    *(_QWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 24) = a2[1].n128_u32[2];
    v4 = a2[2].n128_u64[0];
    *(_DWORD *)(v4 + 24) += 2;
    *(_QWORD *)(a1 + 32) = v4;
    *(_DWORD *)(a1 + 40) = a2[2].n128_u32[2];
    *(_BYTE *)(a1 + 48) = 1;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *result;
  if (*result)
    v4 += 32 * *(unsigned int *)(v4 - 4);
  if ((_QWORD *)v4 == a2)
  {
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  *a3 = a2[2];
  v5 = a2[3];
  a2[2] = 0;
  a2[3] = 0;
  a3[1] = v5;
  if (*result)
  {
    v6 = *result + 32 * *(unsigned int *)(*result - 4);
    if ((_QWORD *)v6 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v6 = 0;
  }
  if ((_QWORD *)v6 != a2)
    return (uint64_t *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(result, a2);
  return result;
}

void sub_197397F94(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v3;

  if (v3)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(uint64_t *a1, void *a2)
{
  WTF *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = 1;
  *((_QWORD *)a2 + 1) = 0;
  result = (WTF *)*((_QWORD *)a2 + 2);
  if (result)
  {
    *((_QWORD *)a2 + 2) = 0;
    *((_DWORD *)a2 + 6) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  _QWORD *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  WTF *v33;
  uint64_t result;
  int v36;
  __int16 v37;
  char v38;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 32 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v5 + 32 * v12;
      if (*(_QWORD *)v14 ^ 1 | *(_QWORD *)(v14 + 8))
      {
        if (*(_OWORD *)v14 == 0)
        {
          v15 = v5 + 32 * v12;
          v18 = *(WTF **)(v15 + 16);
          v17 = (_QWORD *)(v15 + 16);
          v16 = v18;
          if (v18)
          {
            *v17 = 0;
            *(_DWORD *)(v5 + 32 * v12 + 24) = 0;
            WTF::fastFree(v16, v9);
          }
        }
        else
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v36 = -1640531527;
          v37 = 0;
          v38 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v36, (_QWORD *)(v5 + 32 * v12));
          v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v36);
          v22 = 0;
          do
          {
            v23 = v21 & v20;
            v24 = v19 + 32 * v23;
            v21 = ++v22 + v23;
          }
          while (*(_OWORD *)v24 != 0);
          v26 = (_QWORD *)(v24 + 16);
          v25 = *(WTF **)(v24 + 16);
          if (v25)
          {
            *v26 = 0;
            *(_DWORD *)(v19 + 32 * v23 + 24) = 0;
            WTF::fastFree(v25, v9);
          }
          *(_OWORD *)v24 = *(_OWORD *)v14;
          v27 = v5 + 32 * v12;
          *v26 = 0;
          *(_QWORD *)(v24 + 24) = 0;
          v29 = *(_QWORD *)(v27 + 16);
          v28 = v27 + 16;
          *(_QWORD *)v28 = 0;
          *v26 = v29;
          v30 = *(_DWORD *)(v28 + 8);
          *(_DWORD *)(v28 + 8) = 0;
          v31 = v19 + 32 * v23;
          *(_DWORD *)(v31 + 24) = v30;
          v32 = *(_DWORD *)(v28 + 12);
          *(_DWORD *)(v28 + 12) = 0;
          *(_DWORD *)(v31 + 28) = v32;
          v33 = *(WTF **)v28;
          if (*(_QWORD *)v28)
          {
            *(_QWORD *)v28 = 0;
            *(_DWORD *)(v28 + 8) = 0;
            WTF::fastFree(v33, v9);
          }
          if (v14 == a3)
            v13 = v19 + 32 * v23;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID(WTF::UUID const&)::$_0,WebCore::FilterMarkerResult,WebCore::RenderedDocumentMarker const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_DWORD *)(a2 + 96) == 6)
    return *(_QWORD *)(a2 + 48) == **(_QWORD **)(a1 + 8)
        && *(_QWORD *)(a2 + 56) == *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(v4);
}

uint64_t *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = 1;
  a2[1] = 0;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t result;
  int v24;
  __int16 v25;
  char v26;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 32 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_OWORD *)(v6 + 32 * v13);
      if (*v15 >= 2uLL)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v24 = -1640531527;
        v25 = 0;
        v26 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v24, (_QWORD *)(v6 + 32 * v13));
        v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v24);
        v19 = 0;
        do
        {
          v20 = v18 & v17;
          v21 = (_OWORD *)(v16 + 32 * v20);
          v18 = ++v19 + v20;
        }
        while (*v21 != 0);
        v22 = v15[1];
        *v21 = *v15;
        v21[1] = v22;
        if (v15 == a3)
          v14 = v16 + 32 * v20;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

__n128 WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::inlineSet<WTF::UUID const&,WTF::UUID&>@<Q0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  int v15;
  __n128 result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  __int16 v27;
  char v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v26 = -1640531527;
  v27 = 0;
  v28 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v26, a2);
  v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v26) & v9;
  v11 = v8 + 32 * v10;
  v13 = *(_QWORD *)v11;
  v12 = *(_QWORD *)(v11 + 8);
  if (*(_OWORD *)v11 != 0)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (v12 == a2[1] && v13 == *a2)
      {
        v20 = *a1;
        if (*a1)
          v21 = *(unsigned int *)(v20 - 4);
        else
          v21 = 0;
        *(_QWORD *)a4 = v11;
        *(_QWORD *)(a4 + 8) = v20 + 32 * v21;
        *(_BYTE *)(a4 + 16) = 0;
        result = *a3;
        *(__n128 *)(v11 + 16) = *a3;
        return result;
      }
      if (!(v13 ^ 1 | v12))
        v14 = (_OWORD *)v11;
      v10 = ((_DWORD)v10 + v15) & v9;
      v11 = v8 + 32 * v10;
      v13 = *(_QWORD *)v11;
      v12 = *(_QWORD *)(v11 + 8);
      ++v15;
    }
    while (*(_OWORD *)v11 != 0);
    if (v14)
    {
      *v14 = 0u;
      v14[1] = 0u;
      --*(_DWORD *)(*a1 - 16);
      v11 = (uint64_t)v14;
    }
  }
  *(_OWORD *)v11 = *(_OWORD *)a2;
  result = *a3;
  *(__n128 *)(v11 + 16) = *a3;
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_25:
      v11 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, (_OWORD *)v11);
      v22 = *a1;
      if (*a1)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_25;
  }
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v22 + 32 * v25;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

uint64_t std::optional<WebKit::TextAnimationUnstyledRangeData>::operator=[abi:sn180100]<WebKit::TextAnimationUnstyledRangeData&,void>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(unsigned __int8 *)(a1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(v5 + 24) += 2;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    v13 = v6;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(v7 + 24) += 2;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v7;
    v13 = v8;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
    v9 = *(_DWORD *)(a2 + 40);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(v10 + 24) += 2;
    *(_QWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(v11 + 24) += 2;
    *(_QWORD *)(a1 + 32) = v11;
    v9 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_DWORD *)(a1 + 40) = v9;
  return a1;
}

_OWORD *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *result;
  int v29;
  __int16 v30;
  char v31;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = (_BYTE *)(v8 + 80);
    do
    {
      *v11 = 0;
      *((_QWORD *)v11 - 8) = 0;
      *((_QWORD *)v11 - 7) = 0;
      *(v11 - 48) = 0;
      v11 += 80;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v5 + 80 * v12;
      if (*(_QWORD *)v14 ^ 1 | *(_QWORD *)(v14 + 8))
      {
        if (*(_OWORD *)v14 == 0)
        {
          std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100](v5 + 80 * v12 + 16);
        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v29 = -1640531527;
          v30 = 0;
          v31 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v29, (_QWORD *)(v5 + 80 * v12));
          v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v20 = (_OWORD *)(v15 + 80 * (v17 & v16));
            v17 = ++v18 + (v17 & v16);
          }
          while (*v20 != 0);
          v21 = v15 + 80 * v19;
          v22 = std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100](v21 + 16);
          *v20 = *(_OWORD *)v14;
          v23 = v5 + 80 * v12;
          v24 = v23 + 16;
          *(_BYTE *)(v21 + 16) = 0;
          *(_BYTE *)(v21 + 64) = 0;
          if (*(_BYTE *)(v23 + 64))
          {
            *(_OWORD *)v22 = *(_OWORD *)v24;
            v25 = *(_QWORD *)(v23 + 32);
            *(_QWORD *)(v24 + 16) = 0;
            *(_QWORD *)(v22 + 16) = v25;
            *(_DWORD *)(v22 + 24) = *(_DWORD *)(v24 + 24);
            v26 = *(_QWORD *)(v24 + 32);
            *(_QWORD *)(v24 + 32) = 0;
            *(_QWORD *)(v22 + 32) = v26;
            *(_DWORD *)(v22 + 40) = *(_DWORD *)(v24 + 40);
            *(_BYTE *)(v22 + 48) = 1;
          }
          std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100](v24);
          if (v14 == a3)
            v13 = v20;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::TextAnimationController::addDestinationTextAnimation(WTF::UUID const&,WebCore::CharacterRange const&,WTF::String)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D6DD8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextAnimationController::addDestinationTextAnimation(WTF::UUID const&,WebCore::CharacterRange const&,WTF::String)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D6DD8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextAnimationController::addDestinationTextAnimation(WTF::UUID const&,WebCore::CharacterRange const&,WTF::String)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return WebKit::TextAnimationController::addInitialTextAnimation(*(WebKit::TextAnimationController **)(v2 + 2456), (const WTF::UUID *)(result + 32));
  }
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

uint64_t std::optional<WebKit::ReplacedRangeAndString>::operator=[abi:sn180100]<WebKit::ReplacedRangeAndString&,void>(uint64_t a1, _OWORD *a2)
{
  int v3;
  _DWORD *v4;

  v3 = *(unsigned __int8 *)(a1 + 24);
  *(_OWORD *)a1 = *a2;
  if (v3)
  {
    WTF::String::operator=((WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(a2 + 1));
  }
  else
  {
    v4 = (_DWORD *)*((_QWORD *)a2 + 2);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  WTF::StringImpl *v18;
  int v19;
  unsigned int v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  WTF::StringImpl *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  int v31;
  __int16 v32;
  char v33;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_BYTE *)(v7 + 56);
    do
    {
      *v10 = 0;
      *((_QWORD *)v10 - 5) = 0;
      *((_QWORD *)v10 - 4) = 0;
      *(v10 - 24) = 0;
      v10 += 48;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = v4 + 48 * v11;
      if (*(_QWORD *)v14 ^ 1 | *(_QWORD *)(v14 + 8))
      {
        if (*(_OWORD *)v14 == 0)
        {
          std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](v4 + 48 * v11 + 16, v8);
        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v31 = -1640531527;
          v32 = 0;
          v33 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v31, (_QWORD *)(v4 + 48 * v11));
          v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          v19 = 0;
          do
          {
            v20 = v17 & v16;
            v21 = (_OWORD *)(v15 + 48 * (v17 & v16));
            v17 = ++v19 + (v17 & v16);
          }
          while (*v21 != 0);
          v22 = v15 + 48 * v20;
          v23 = (_OWORD *)std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](v22 + 16, v18);
          *v21 = *(_OWORD *)v14;
          *(_BYTE *)(v22 + 16) = 0;
          *(_BYTE *)(v22 + 40) = 0;
          v25 = (_BYTE *)(v22 + 40);
          if (*(_BYTE *)(v4 + 48 * v11 + 40))
          {
            v26 = v4 + 48 * v11;
            *v23 = *(_OWORD *)(v26 + 16);
            v27 = *(_QWORD *)(v26 + 32);
            *(_QWORD *)(v26 + 32) = 0;
            *(_QWORD *)(v15 + 48 * v20 + 32) = v27;
            *v25 = 1;
          }
          std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](v4 + 48 * v11 + 16, v24);
          if (v14 == a3)
            v12 = v15 + 48 * v20;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t *WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *result;
  if (*result)
    v5 = v4 + 48 * *(unsigned int *)(v4 - 4);
  else
    v5 = 0;
  if (v5 == a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return result;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    *(_OWORD *)a3 = *(_OWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a3 + 16) = v6;
    *(_BYTE *)(a3 + 24) = 1;
    v4 = *result;
  }
  if (v4)
  {
    v7 = v4 + 48 * *(unsigned int *)(v4 - 4);
    if (v7 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v7 = 0;
  }
  if (v7 != a2)
    return (uint64_t *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(result, (WTF::StringImpl *)a2);
  return result;
}

void sub_197398DBC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = 1;
  *((_QWORD *)a2 + 1) = 0;
  result = std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 16, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  int v14;
  BOOL v15;
  int v16;
  __int16 v17;
  char v18;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v16 = -1640531527;
  v17 = 0;
  v18 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v16, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
  v7 = *a2;
  v8 = a2[1];
  v9 = v6 & v5;
  result = (uint64_t *)(v2 + 48 * (v6 & v5));
  v11 = *result;
  v12 = result[1];
  if (v12 != v8 || v11 != v7)
  {
    v14 = 1;
    while (v11 | v12)
    {
      v9 = (v9 + v14) & v5;
      result = (uint64_t *)(v2 + 48 * v9);
      v11 = *result;
      v12 = result[1];
      v15 = v12 == v8 && v11 == v7;
      ++v14;
      if (v15)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 48 * *(unsigned int *)(*a1 - 4));
    else
      return 0;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[72];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *result;
  if (*result)
    v5 = v4 + 80 * *(unsigned int *)(v4 - 4);
  else
    v5 = 0;
  if (v5 == a2)
  {
    v9[0] = 0;
    v9[48] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
    return (uint64_t *)std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 48) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    *(_OWORD *)a3 = *(_OWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a3 + 16) = v6;
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a2 + 40);
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a3 + 32) = v7;
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a3 + 48) = 1;
    v4 = *result;
  }
  if (v4)
  {
    v8 = v4 + 80 * *(unsigned int *)(v4 - 4);
    if (v8 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v8 = 0;
  }
  if (v8 != a2)
    return (uint64_t *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(result, (_QWORD *)a2);
  return result;
}

void sub_197399060(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

_OWORD *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(uint64_t *a1, _QWORD *a2)
{
  _OWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *a2 = 1;
  a2[1] = 0;
  result = (_OWORD *)std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a2 + 2));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  int v14;
  BOOL v15;
  int v16;
  __int16 v17;
  char v18;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v16 = -1640531527;
  v17 = 0;
  v18 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v16, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
  v7 = *a2;
  v8 = a2[1];
  v9 = v6 & v5;
  result = (uint64_t *)(v2 + 80 * (v6 & v5));
  v11 = *result;
  v12 = result[1];
  if (v12 != v8 || v11 != v7)
  {
    v14 = 1;
    while (v11 | v12)
    {
      v9 = (v9 + v14) & v5;
      result = (uint64_t *)(v2 + 80 * v9);
      v11 = *result;
      v12 = result[1];
      v15 = v12 == v8 && v11 == v7;
      ++v14;
      if (v15)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 80 * *(unsigned int *)(*a1 - 4));
    else
      return 0;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t result;
  int v29;
  __int16 v30;
  char v31;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= 2 * v5);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = v7;
  v9 = WTF::fastMalloc((WTF *)((32 * v7) | 0x10));
  if (v7)
  {
    v11 = (_QWORD *)(v9 + 16);
    do
    {
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      v11 += 4;
      --v8;
    }
    while (v8);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    do
    {
      v15 = v4 + 32 * v12;
      if (*(_QWORD *)v15 ^ 1 | *(_QWORD *)(v15 + 8))
      {
        if (*(_OWORD *)v15 == 0)
        {
          v16 = v4 + 32 * v12;
          v17 = *(_DWORD **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            if (v17[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
            else
              --v17[2];
          }
        }
        else
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v29 = -1640531527;
          v30 = 0;
          v31 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v29, (_QWORD *)(v4 + 32 * v12));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = v18 + 32 * v22;
            v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          v24 = *(_DWORD **)(v23 + 16);
          *(_QWORD *)(v23 + 16) = 0;
          if (v24)
          {
            if (v24[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
            else
              --v24[2];
          }
          *(_OWORD *)v23 = *(_OWORD *)v15;
          v25 = v4 + 32 * v12;
          v26 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          *(_QWORD *)(v23 + 16) = v26;
          v27 = *(_DWORD **)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          if (v27)
          {
            if (v27[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
            else
              --v27[2];
          }
          if (v15 == a2)
            v13 = v23;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v10);
  return v13;
}

const char *WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(uint64_t *a1, WTF::ASCIILiteralHash *this)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  const char *result;
  const char *v7;
  int v8;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::ASCIILiteralHash::hash(this, this) & v4;
  result = *(const char **)(v2 + 24 * v5);
  if (result)
  {
    v7 = *(const char **)this;
    v8 = 1;
    while (result == (const char *)-1 || !v7 || strcmp(result, v7))
    {
      v5 = ((_DWORD)v5 + v8) & v4;
      result = *(const char **)(v2 + 24 * v5);
      ++v8;
      if (!result)
        return result;
    }
    return *(const char **)(v2 + 24 * v5 + 16);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(8 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = *(_QWORD *)(v2 + 8 * i);
      if ((unint64_t)(v9 + 1) >= 2)
      {
        v10 = *a1;
        if (*a1)
          v11 = *(_DWORD *)(v10 - 8);
        else
          v11 = 0;
        v12 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
        v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v15 = v11 & ((v14 >> 31) ^ v14);
        v16 = 1;
        do
        {
          v17 = v15;
          v7 = *(void **)(v10 + 8 * v15);
          v15 = (v15 + v16++) & v11;
        }
        while (v7);
        *(_QWORD *)(v10 + 8 * v17) = v9;
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebPage::clearDictationAlternatives(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WebCore::FilterMarkerResult,WebCore::DocumentMarker const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL8 result;
  int v11;

  if (*(_DWORD *)(a2 + 96) != 1)
    return 0;
  v2 = **(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_DWORD *)(v2 - 8);
  v5 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v2 + 8 * v8);
  if (v9 == v3)
    return 1;
  v11 = 1;
  do
  {
    result = v9 != 0;
    if (!v9)
      break;
    v8 = (v8 + v11) & v4;
    v9 = *(_QWORD *)(v2 + 8 * v8);
    ++v11;
  }
  while (v9 != v3);
  return result;
}

char *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, **(const void ***)a2, *(_QWORD *)(*(_QWORD *)a2 + 8));
  return IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)(a2 + 8));
}

WebCore::EditingStyle *WTF::RefCounted<WebCore::EditingStyle>::deref(WebCore::EditingStyle *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::EditingStyle::~EditingStyle(result);
    return (WebCore::EditingStyle *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::HandleClickForDataDetectionResult>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  objc_object **v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1947;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  v9 = *(objc_object ***)a2;
  IPC::encodeObjectDirectly<DDScannerResult>(v8, **(objc_object ***)a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v8, (uint64_t *)v9 + 1);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v8, *(_DWORD **)(a2 + 8));
  v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v16, a4);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  return v11;
}

void sub_197399820(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int **v22;
  unsigned int *v23;
  void *v24;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    do
    {
      v11 = (unsigned int **)(v4 + 8 * v9);
      v12 = *v11;
      if (*v11 != (unsigned int *)-1)
      {
        if (v12)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(v13 + 8 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          v22 = (unsigned int **)(v13 + 8 * v20);
          WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::~Ref(v22, v8);
          v23 = *v11;
          *v11 = 0;
          *v22 = v23;
          WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::~Ref((unsigned int **)(v4 + 8 * v9), v24);
        }
        else
        {
          WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::~Ref((unsigned int **)(v4 + 8 * v9), v8);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::applyLinkDecorationFilteringWithResult(WTF::URL const&,WebCore::LinkDecorationFilteringTrigger)::$_2,BOOL,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  uint64_t v21;
  WTF::URL *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  WTF::StringImpl *v28[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 2432);
  if (!v4)
    return 0;
  v7 = *(_DWORD *)(v4 - 8);
  v8 = *((_DWORD *)*a2 + 4);
  v9 = v8 >= 0x100 ? v8 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v9 = ++i + v11)
  {
    v11 = v9 & v7;
    v12 = *(WTF **)(v4 + 32 * v11);
    if (v12 != (WTF *)-1)
    {
      if (!v12)
      {
        v13 = *(_QWORD *)(v3 + 2432);
        if (!v13)
          return 0;
        v14 = v13 + 32 * *(unsigned int *)(v13 - 4);
        goto LABEL_13;
      }
      if ((WTF::equal(v12, *a2, a3) & 1) != 0)
        break;
    }
  }
  v14 = v4 + 32 * v11;
  v13 = *(_QWORD *)(v3 + 2432);
  if (!v13)
    goto LABEL_14;
LABEL_13:
  v13 += 32 * *(unsigned int *)(v13 - 4);
LABEL_14:
  if (v13 == v14)
    return 0;
  v15 = *(_QWORD *)(v14 + 8);
  if (v15 && *(_DWORD *)(v15 - 12))
  {
    WebCore::RegistrableDomain::RegistrableDomain(v28, *(const WTF::URL **)(a1 + 16));
    v17 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v14 + 8), v28);
    v18 = v28[0];
    v28[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    v17 = 1;
  }
  v20 = *(unsigned int *)(v14 + 28);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD *)(v14 + 16);
    v22 = *(WTF::URL **)(a1 + 16);
    v23 = 8 * v20 - 8;
    do
    {
      v28[0] = (WTF::StringImpl *)WTF::URL::path(v22);
      v28[1] = v24;
      v25 = WTF::StringView::find();
      v26 = v25 != -1;
      if (v25 != -1)
        break;
      v27 = v23;
      v23 -= 8;
      v21 += 8;
    }
    while (v27);
  }
  else
  {
    v26 = 1;
  }
  return v17 & v26;
}

void sub_197399BCC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t result, const WTF::StringImpl *a2, const WTF::StringImpl **a3)
{
  uint64_t *v3;
  unsigned int v6;
  uint64_t v7;
  WTF **v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  int v11;

  v3 = (uint64_t *)result;
  if (!a2
    || (v6 = *((_DWORD *)a2 - 2),
        v7 = WTF::ASCIICaseInsensitiveHash::hash(*a3, a2) & v6,
        v8 = (WTF **)((char *)a2 + 16 * v7),
        result = WTF::equal(*v8, 0, v9),
        (result & 1) != 0))
  {
LABEL_7:
    *v3 = 0;
  }
  else
  {
    v11 = 1;
    while (*v8 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v8, *a3, v10) & 1) == 0)
    {
      v7 = ((_DWORD)v7 + v11) & v6;
      v8 = (WTF **)((char *)a2 + 16 * v7);
      result = WTF::equal(*v8, 0, v10);
      ++v11;
      if ((_DWORD)result)
        goto LABEL_7;
    }
    return (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v3, (_QWORD **)a2 + 2 * v7 + 1);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::allowedQueryParametersForAdvancedPrivacyProtections(WTF::URL const&)::$_0,BOOL,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  WTF *v11;

  v3 = **(_QWORD **)(a1 + 8);
  if (!v3)
    return 1;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 8 * (v8 & v6));
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        return 1;
      if ((WTF::equal(v11, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return 0;
}

char *IPC::ArgumentCoder<std::tuple<WTF::UUID const&,WTF::UUID const&,WebCore::IntRect const&>,void>::encode<IPC::Encoder,std::tuple<WTF::UUID const&,WTF::UUID const&,WebCore::IntRect const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, a2[1]);
  return IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2[2]);
}

char *IPC::ArgumentCoder<std::tuple<WTF::UUID const&,WebCore::WritingTools::TextSuggestionState,WTF::UUID const&>,void>::encode<IPC::Encoder,std::tuple<WTF::UUID const&,WebCore::WritingTools::TextSuggestionState,WTF::UUID const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, *(uint64_t **)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, *(uint64_t **)(a2 + 16));
}

_QWORD *WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<float>(WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(float&)#1}>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD v8[32];
  int v9;
  char v10;

  *result = 0;
  result[1] = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      v5 = 136 * v2;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(136 * v2));
      v6 = (uint64_t)result;
      *((_DWORD *)v4 + 2) = v5 / 0x88;
      *v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        v7 = 0;
        do
        {
          v8[0] = *(_DWORD *)(*(_QWORD *)a2 + 4 * v7);
          v9 = 0;
          result = (_QWORD *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, (uint64_t)v8);
          *((_DWORD *)v4 + 3) = v7 + 1;
          if (v9 != -1)
            result = (_QWORD *)((uint64_t (*)(char *, _DWORD *))off_1E34D6CA8[v9])(&v10, v8);
          ++v7;
          v6 += 136;
        }
        while (v7 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

void sub_197399EE0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Vector<WebCore::TransformationMatrix,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<WebCore::TransformationMatrix>(WTF::Vector<WebCore::TransformationMatrix,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebCore::TransformationMatrix&)#1}>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[8];
  int v17;
  char v18;

  *result = 0;
  result[1] = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      v5 = 136 * v2;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(136 * v2));
      v6 = (uint64_t)result;
      *((_DWORD *)v4 + 2) = v5 / 0x88;
      *v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        v7 = 0;
        v8 = 0;
        do
        {
          v9 = (__int128 *)(*(_QWORD *)a2 + v7);
          v10 = *v9;
          v11 = v9[1];
          v12 = v9[3];
          v16[2] = v9[2];
          v16[3] = v12;
          v16[0] = v10;
          v16[1] = v11;
          v13 = v9[4];
          v14 = v9[5];
          v15 = v9[7];
          v16[6] = v9[6];
          v16[7] = v15;
          v16[4] = v13;
          v16[5] = v14;
          v17 = 3;
          result = (_QWORD *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, (uint64_t)v16);
          *((_DWORD *)v4 + 3) = v8 + 1;
          if (v17 != -1)
            result = (_QWORD *)((uint64_t (*)(char *, _OWORD *))off_1E34D6CA8[v17])(&v18, v16);
          ++v8;
          v6 += 136;
          v7 += 128;
        }
        while (v8 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

void sub_19739A03C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_19739A050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int a25)
{
  uint64_t v25;
  uint64_t v26;

  if (a25 != -1)
    (*(void (**)(uint64_t, uint64_t *))(v25 + 8 * a25))(v26 - 65, &a9);
  JUMPOUT(0x19739A040);
}

_QWORD *WTF::Vector<WebCore::FloatPoint3D,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<WebCore::FloatPoint3D>(WTF::Vector<WebCore::FloatPoint3D,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebCore::FloatPoint3D&)#1}>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;

  *result = 0;
  result[1] = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      v5 = 136 * v2;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(136 * v2));
      v6 = (uint64_t)result;
      *((_DWORD *)v4 + 2) = v5 / 0x88;
      *v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        v7 = 0;
        v8 = 0;
        do
        {
          v9 = (uint64_t *)(*(_QWORD *)a2 + v7);
          v10 = *((_DWORD *)v9 + 2);
          v11 = *v9;
          v12 = v10;
          v13 = 2;
          result = (_QWORD *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, (uint64_t)&v11);
          *((_DWORD *)v4 + 3) = v8 + 1;
          if (v13 != -1)
            result = (_QWORD *)((uint64_t (*)(char *, uint64_t *))off_1E34D6CA8[v13])(&v14, &v11);
          ++v8;
          v6 += 136;
          v7 += 12;
        }
        while (v8 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

void sub_19739A188(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_19739A19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int a25)
{
  uint64_t v25;
  uint64_t v26;

  if (a25 != -1)
    (*(void (**)(uint64_t, uint64_t *))(v25 + 8 * a25))(v26 - 65, &a9);
  JUMPOUT(0x19739A18CLL);
}

unsigned int *WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if (v4 != a2)
  {
    v5 = (uint64_t *)(*(_QWORD *)result + 8 * a2);
    v6 = 8 * v4 - 8 * a2;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        result = WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *a2;
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = *((_DWORD *)v4 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(v4);
  v8 = 0;
  do
  {
    v9 = v7 & v5;
    v7 = ++v8 + v9;
  }
  while (*(_QWORD *)(a1 + 16 * v9));
  v10 = (WTF::StringImpl **)(a1 + 16 * v9);
  v11 = v10[1];
  v10[1] = 0;
  if (!v11)
    goto LABEL_11;
  if (*((_DWORD *)v11 + 2) != 1)
  {
    --*((_DWORD *)v11 + 2);
LABEL_11:
    *v10 = 0;
    goto LABEL_16;
  }
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 8))(v11);
  v13 = *v10;
  *v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_16:
  v14 = *a2;
  *a2 = 0;
  *v10 = v14;
  v15 = a2[1];
  a2[1] = 0;
  v10[1] = v15;
  return v10;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (WTF::StringImpl **)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

unsigned int *WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages(unsigned __int8 *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int *result;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  char v14;
  _QWORD v15[2];

  WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages(a1);
  v15[0] = 179;
  v15[1] = a3;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(a2 + 160), (unsigned __int8 *)v15, a4, &v12);
  v8 = (unsigned int *)(a2 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v12 = a3;
  v13 = a2;
  v14 = 1;
  result = std::__optional_storage_base<WebKit::WebPageProxyMessageReceiverRegistration::Data,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebPageProxyMessageReceiverRegistration::Data,false>>((unsigned int *)a1, (uint64_t)&v12);
  if (v14)
  {
    v11 = v13;
    v13 = 0;
    if (v11)
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
  }
  return result;
}

unsigned __int8 *WebKit::WebPageProxyMessageReceiverRegistration::transferMessageReceivingFrom(WebKit::WebPageProxyMessageReceiverRegistration *this, WebKit::WebPageProxyMessageReceiverRegistration *a2, IPC::MessageReceiver *a3)
{
  unsigned int *v5;
  uint64_t v6;

  if (!*((_BYTE *)a2 + 16))
    return WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)this);
  v5 = *(unsigned int **)a2;
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *((_BYTE *)a2 + 16) = 0;
  IPC::MessageReceiverMap::removeMessageReceiver(v6 + 152, 0xB3u, (uint64_t)v5);
  WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages((unsigned __int8 *)this, v6, v5, (uint64_t)a3);
  return (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
}

uint64_t WebKit::WebPageProxyTesting::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v7 = *(_QWORD *)(v6 + 208);
  v8 = (unsigned int *)(v7 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  LOBYTE(v13) = 0;
  v14 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(v7, a2, a3, (uint64_t)&v13, 1);
  if (v14)
  {
    v11 = v13;
    v13 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (v7)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
  return v10;
}

uint64_t WebKit::WebPageProxyTesting::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  char v18;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v9 = *(_QWORD *)(v8 + 208);
  v10 = (unsigned int *)(v9 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *a3;
  v13 = a3[1];
  *a3 = 0;
  v17[0] = v12;
  v17[1] = v13;
  v18 = 1;
  v14 = WebKit::AuxiliaryProcessProxy::sendMessage(v9, a2, a4, (uint64_t)v17, 1);
  if (v18)
  {
    v15 = v17[0];
    v17[0] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v9)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v9 + 16));
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
  return v14;
}

uint64_t WebKit::WebPageProxyTesting::messageSenderConnection(WebKit::WebPageProxyTesting *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(_QWORD *)(*(_QWORD *)(v2 + 208) + 144);
}

uint64_t WebKit::WebPageProxyTesting::messageSenderDestinationID(WebKit::WebPageProxyTesting *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(_QWORD *)(*(_QWORD *)(v2 + 32) + 1896);
}

char *WebKit::WebPageProxyTesting::setDefersLoading(WebKit::WebPageProxyTesting *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = (*(uint64_t (**)(WebKit::WebPageProxyTesting *))(*(_QWORD *)this + 56))(this);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2097;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  (*(void (**)(WebKit::WebPageProxyTesting *, IPC::Encoder **, _QWORD))(*(_QWORD *)this + 32))(this, &v19, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t WebKit::WebPageProxyTesting::dispatchActivityStateUpdate(WebKit::WebPageProxyTesting *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WTF::RunLoop::current(this);
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  CFRetain(*(CFTypeRef *)(v3 + 8));
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34D7410;
  v4[1] = v3;
  v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageTesting::IsLayerTreeFrozen,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  _QWORD v17[2];
  IPC::Encoder *v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2096;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v18 = (IPC::Encoder *)v6;
  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34D7438;
  v8[1] = v7;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v17[0] = v8;
  v17[1] = v9;
  v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, &v18, v17, 0);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  if (v11)
    return v9;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::setCrossSiteLoadWithLinkDecorationForTesting(uint64_t a1, const WTF::URL *a2, const WTF::URL *a3, char a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  CFTypeRef *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  CFRetain(*(CFTypeRef *)(v11 + 8));
  v12 = *(CFTypeRef **)(v11 + 264);
  CFRetain(v12[1]);
  v13 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v12);
  v14 = (unsigned int *)(v13 + 16);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v16)
    v17 = v16 - 16;
  else
    v17 = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 264) + 24);
  WebCore::RegistrableDomain::RegistrableDomain(&v23, a2);
  WebCore::RegistrableDomain::RegistrableDomain(&v22, a3);
  WebKit::NetworkProcessProxy::setCrossSiteLoadWithLinkDecorationForTesting(v13, v18, (uint64_t *)&v23, (uint64_t *)&v22, a4, a5);
  v20 = v22;
  v22 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
  CFRelease(v12[1]);
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 - 8));
}

void WebKit::WebPageProxyTesting::setPermissionLevel(WebKit::WebPageProxyTesting *this, const WTF::String *a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  v9 = a3;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34D7460;
  v6[1] = a2;
  v6[2] = &v9;
  v8 = v6;
  WebKit::WebPageProxy::forEachWebContentProcess((_QWORD *)v5, &v8);
  v7 = v8;
  v8 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

BOOL WebKit::WebPageProxyTesting::isEditingCommandEnabled(WebKit::WebPageProxyTesting *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v15;
  const WTF::String *v16;
  _BYTE v17[16];
  int v18;
  _BYTE v19[7];
  _QWORD v20[2];
  _QWORD v21[2];
  char v22;
  _BYTE v23[7];

  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v6 = v5 - 16;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 296);
  if (v7 || (v7 = *(_QWORD *)(v6 + 280)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v7 + 8));
    v8 = 0;
    v2 = *(_QWORD *)(v7 + 280);
    v9 = *(_QWORD *)(v7 + 272) & 0xFFFFFFFFFFFFFF00;
    v10 = *(_QWORD *)(v7 + 272);
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v8 = 1;
  }
  if (v5)
    v12 = v5 - 16;
  else
    v12 = 0;
  CFRetain(*(CFTypeRef *)(v12 + 8));
  *(_DWORD *)v23 = *(_DWORD *)v19;
  *(_DWORD *)&v23[3] = *(_DWORD *)&v19[3];
  v15 = 0x7FF0000000000000;
  v16 = a2;
  v21[0] = v9 | v10;
  v21[1] = v2;
  v22 = v11;
  v20[0] = &v16;
  v20[1] = &v15;
  WebKit::WebPageProxy::sendToWebPage<IPC::ConnectionSendSyncResult<Messages::WebPageTesting::IsEditingCommandEnabled> WebKit::WebPageProxy::sendSyncToProcessContainingFrame<Messages::WebPageTesting::IsEditingCommandEnabled>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPageTesting::IsEditingCommandEnabled&&,IPC::Timeout const&)::{lambda(Messages::WebPageTesting::IsEditingCommandEnabled&)#1}>(v12, (uint64_t)v21, (uint64_t)v20, (uint64_t)v17);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
  v13 = 0;
  if (v18 != -1)
  {
    if (!v18)
      v13 = v17[8] != 0;
    ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14WebPageTesting23IsEditingCommandEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v18])(v21, v17);
  }
  if ((v8 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return v13;
}

void WebKit::WebPageProxyTesting::dumpPrivateClickMeasurement(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v6 = *(CFTypeRef **)(v5 + 264);
  CFRetain(v6[1]);
  v7 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v6);
  v8 = (unsigned int *)(v7 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 264) + 24);
  v13 = &v12;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DumpPrivateClickMeasurement,WTF::CompletionHandler<void ()(WTF::String const&)>>(v7, &v13, a2, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
  CFRelease(v6[1]);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DumpPrivateClickMeasurement,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 385;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D7488;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::clearPrivateClickMeasurement(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v6 = *(CFTypeRef **)(v5 + 264);
  CFRetain(v6[1]);
  v7 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v6);
  v8 = (unsigned int *)(v7 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 264) + 24);
  v13 = &v12;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearPrivateClickMeasurement,WTF::CompletionHandler<void ()(void)>>(v7, &v13, a2, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
  CFRelease(v6[1]);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearPrivateClickMeasurement,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 365;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D74B0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementOverrideTimer(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = *(CFTypeRef **)(v7 + 264);
  CFRetain(v8[1]);
  v9 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v8);
  v10 = (unsigned int *)(v9 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v12)
    v13 = v12 - 16;
  else
    v13 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 264) + 24);
  v15 = &v14;
  v16 = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementOverrideTimerForTesting,WTF::CompletionHandler<void ()(void)>>(v9, (uint64_t)&v15, a3, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
  CFRelease(v8[1]);
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementOverrideTimerForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 465;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *(uint64_t **)a2);
  LOBYTE(a4) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D74D8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::markAttributedPrivateClickMeasurementsAsExpired(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v6 = *(CFTypeRef **)(v5 + 264);
  CFRetain(v6[1]);
  v7 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v6);
  v8 = (unsigned int *)(v7 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 264) + 24);
  v13 = &v12;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MarkAttributedPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(v7, &v13, a2, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
  CFRelease(v6[1]);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MarkAttributedPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 412;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D7500;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementEphemeralMeasurement(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = *(CFTypeRef **)(v7 + 264);
  CFRetain(v8[1]);
  v9 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v8);
  v10 = (unsigned int *)(v9 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v12)
    v13 = v12 - 16;
  else
    v13 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 264) + 24);
  v15 = &v14;
  v16 = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementEphemeralMeasurementForTesting,WTF::CompletionHandler<void ()(void)>>(v9, (uint64_t)&v15, a3, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
  CFRelease(v8[1]);
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementEphemeralMeasurementForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 464;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *(uint64_t **)a2);
  LOBYTE(a4) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D7528;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::simulatePrivateClickMeasurementSessionRestart(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v6 = *(CFTypeRef **)(v5 + 264);
  CFRetain(v6[1]);
  v7 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v6);
  v8 = (unsigned int *)(v7 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 264) + 24);
  v13 = &v12;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SimulatePrivateClickMeasurementSessionRestart,WTF::CompletionHandler<void ()(void)>>(v7, &v13, a2, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
  CFRelease(v6[1]);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SimulatePrivateClickMeasurementSessionRestart,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 492;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D7550;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementTokenPublicKeyURL(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15[2];

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = *(CFTypeRef **)(v7 + 264);
  CFRetain(v8[1]);
  v9 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v8);
  v10 = (unsigned int *)(v9 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v12)
    v13 = v12 - 16;
  else
    v13 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 264) + 24);
  v15[0] = &v14;
  v15[1] = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementTokenPublicKeyURLForTesting,WTF::CompletionHandler<void ()(void)>>(v9, v15, a3, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
  CFRelease(v8[1]);
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementTokenPublicKeyURLForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 466;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D7578;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementTokenSignatureURL(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15[2];

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = *(CFTypeRef **)(v7 + 264);
  CFRetain(v8[1]);
  v9 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v8);
  v10 = (unsigned int *)(v9 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v12)
    v13 = v12 - 16;
  else
    v13 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 264) + 24);
  v15[0] = &v14;
  v15[1] = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementTokenSignatureURLForTesting,WTF::CompletionHandler<void ()(void)>>(v9, v15, a3, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
  CFRelease(v8[1]);
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementTokenSignatureURLForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 467;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D75A0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementAttributionReportURLs(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  CFTypeRef *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17[3];

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v8)
    v9 = v8 - 16;
  else
    v9 = 0;
  CFRetain(*(CFTypeRef *)(v9 + 8));
  v10 = *(CFTypeRef **)(v9 + 264);
  CFRetain(v10[1]);
  v11 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v10);
  v12 = (unsigned int *)(v11 + 16);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v14)
    v15 = v14 - 16;
  else
    v15 = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 264) + 24);
  v17[0] = &v16;
  v17[1] = a2;
  v17[2] = a3;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementAttributionReportURLsForTesting,WTF::CompletionHandler<void ()(void)>>(v11, v17, a4, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
  CFRelease(v10[1]);
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementAttributionReportURLsForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 462;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D75C8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::markPrivateClickMeasurementsAsExpired(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v6 = *(CFTypeRef **)(v5 + 264);
  CFRetain(v6[1]);
  v7 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v6);
  v8 = (unsigned int *)(v7 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 264) + 24);
  v13 = &v12;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MarkPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(v7, &v13, a2, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
  CFRelease(v6[1]);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MarkPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 413;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D75F0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::setPCMFraudPreventionValues(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  CFTypeRef *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21[5];

  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v12)
    v13 = v12 - 16;
  else
    v13 = 0;
  CFRetain(*(CFTypeRef *)(v13 + 8));
  v14 = *(CFTypeRef **)(v13 + 264);
  CFRetain(v14[1]);
  v15 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v14);
  v16 = (unsigned int *)(v15 + 16);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v18)
    v19 = v18 - 16;
  else
    v19 = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(v19 + 264) + 24);
  v21[0] = &v20;
  v21[1] = a2;
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPCMFraudPreventionValuesForTesting,WTF::CompletionHandler<void ()(void)>>(v15, v21, a6, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v16);
  CFRelease(v14[1]);
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPCMFraudPreventionValuesForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 458;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D7618;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementAppBundleID(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15[2];

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = *(CFTypeRef **)(v7 + 264);
  CFRetain(v8[1]);
  v9 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v8);
  v10 = (unsigned int *)(v9 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v12)
    v13 = v12 - 16;
  else
    v13 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 264) + 24);
  v15[0] = &v14;
  v15[1] = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementAppBundleIDForTesting,WTF::CompletionHandler<void ()(void)>>(v9, v15, a3, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
  CFRelease(v8[1]);
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 - 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementAppBundleIDForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 461;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D7640;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

IPC::Encoder *WebKit::WebPageProxyTesting::clearNotificationPermissionState(WebKit::WebPageProxyTesting *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = (*(uint64_t (**)(WebKit::WebPageProxyTesting *))(*(_QWORD *)this + 56))(this);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2094;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(WebKit::WebPageProxyTesting *, IPC::Encoder **, _QWORD))(*(_QWORD *)this + 32))(this, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxyTesting::clearWheelEventTestMonitor(IPC::Encoder *this)
{
  uint64_t v1;
  uint64_t v2;
  IPC::Encoder *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  if (!*(_BYTE *)(v2 + 729) && *(_BYTE *)(v2 + 728))
  {
    v3 = this;
    v4 = (*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)this + 56))(this);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 2095;
    *(_QWORD *)(v5 + 8) = v4;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v9 = (IPC::Encoder *)v5;
    (*(void (**)(IPC::Encoder *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v9, 0);
    this = v9;
    v9 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v6);
      return (IPC::Encoder *)WTF::fastFree(v7, v8);
    }
  }
  return this;
}

uint64_t WebKit::WebPasteboardProxy::webProcessProxyForConnection(WebKit::WebPasteboardProxy *this, IPC::Connection *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (char *)this + 16;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 2, &v14);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v4;
  v10 = v7;
  v11 = v7;
  v12 = v7;
  v13 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    result = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if (*(IPC::Connection **)(result + 144) == a2)
      return result;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return 0;
}

void WebKit::WebPermissionControllerProxy::~WebPermissionControllerProxy(WebKit::WebPermissionControllerProxy *this)
{
  void *v2;

  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*((_QWORD *)this + 2) + 152), 0xB9u);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  void *v2;
  void *v3;

  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*((_QWORD *)this + 2) + 152), 0xB9u);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
  WTF::fastFree(this, v3);
}

void WebKit::WebPermissionControllerProxy::query(uint64_t a1, const WebCore::ClientOrigin *a2, _BYTE *a3, uint64_t a4, char a5, int a6, uint64_t *a7)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  WebKit::WebProcessProxy **v15;
  void *v16;
  unsigned int v17;
  int v18;
  WebKit::WebPageProxy *v19;
  WebKit::WebProcessProxy **v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  CFTypeRef *v24;
  CFTypeRef *v25;
  const WTF::URL *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  _QWORD **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  WebKit::WebPageProxy *v37;
  void *v38;
  WebKit::WebPageProxy **v39;
  uint64_t v40;
  CFTypeRef *v41;
  CFTypeRef *v42;
  const WTF::URL *v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  _BYTE *v52;
  WebKit::WebProcessProxy **v53;
  WebKit::WebPageProxy *v54;
  WebKit::WebProcessProxy **v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unsigned int v59;
  WebKit::WebPageProxy **v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  _QWORD *v63;
  char v64;
  WTF::StringImpl *v65[3];
  int v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    WebKit::WebProcessProxy::webPage(a4, (uint64_t *)&v54);
    goto LABEL_69;
  }
  v11 = a1;
  v54 = 0;
  v12 = *(unsigned int **)(a1 + 16);
  v13 = v12 + 4;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v56 = 1;
  v15 = (WebKit::WebProcessProxy **)WTF::fastMalloc((WTF *)8);
  v55 = v15;
  do
    v17 = __ldaxr(v13);
  while (__stlxr(v17 + 1, v13));
  v52 = a3;
  *v15 = (WebKit::WebProcessProxy *)v12;
  v18 = ++HIDWORD(v56);
  if (v12)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12 + 4);
  if (v18)
  {
    v49 = a6;
    v50 = v11;
    v51 = a7;
    v19 = v54;
    v20 = v55;
    v53 = &v55[v18];
    while (1)
    {
      WebKit::WebProcessProxy::pages(*v20, (uint64_t)&v58);
      if (v59)
        break;
LABEL_32:
      WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v21);
      if (++v20 == v53)
      {
        v54 = v19;
        v11 = v50;
        a7 = v51;
        a6 = v49;
        goto LABEL_34;
      }
    }
    v22 = v58;
    v23 = 8 * v59;
    v24 = (CFTypeRef *)v19;
    while (1)
    {
      v19 = *(WebKit::WebPageProxy **)v22;
      v25 = (CFTypeRef *)(*(_QWORD *)v22 + 8);
      CFRetain(*v25);
      WebKit::WebPageProxy::currentURL(v19, v65);
      MEMORY[0x19AEABB0C](&v62, v65, 0);
      WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)&v62, v26);
      v27 = WebCore::operator==();
      if ((_DWORD)v70 != -1)
        ((void (*)(WebKit::WebPageProxy ***, _QWORD ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_8[v70])(&v60, &v67);
      LODWORD(v70) = -1;
      v28 = v62;
      v62 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v21);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = v65[0];
      v65[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v21);
          if (!v27)
            goto LABEL_28;
          goto LABEL_25;
        }
        *(_DWORD *)v29 -= 2;
      }
      if (!v27)
        goto LABEL_28;
LABEL_25:
      if (!v24)
      {
        v24 = (CFTypeRef *)v19;
        goto LABEL_29;
      }
      if (*((_QWORD *)v24[4] + 93) <= *(_QWORD *)(*((_QWORD *)v19 + 4) + 744))
      {
        v25 = v24 + 1;
        v24 = (CFTypeRef *)v19;
      }
LABEL_28:
      CFRelease(*v25);
      v19 = (WebKit::WebPageProxy *)v24;
LABEL_29:
      v22 = (WTF::StringImpl *)((char *)v22 + 8);
      v23 -= 8;
      if (!v23)
        goto LABEL_32;
    }
  }
LABEL_34:
  if (a6 == 2)
  {
    v32 = *(_QWORD *)(v11 + 16);
    if (!*(_BYTE *)(v32 + 952))
      goto LABEL_68;
    v31 = (_QWORD **)(v32 + 936);
  }
  else
  {
    if (a6 != 3)
    {
      __break(0xC471u);
      return;
    }
    v30 = *(_QWORD *)(v11 + 16);
    if (!*(_BYTE *)(v30 + 872))
      goto LABEL_68;
    v31 = (_QWORD **)(v30 + 856);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v31, &v62);
  v33 = *v31;
  if (*v31)
  {
    v34 = *((unsigned int *)v33 - 1);
    v35 = &v33[v34];
  }
  else
  {
    v35 = 0;
    v34 = 0;
  }
  v67 = v31;
  v68 = v35;
  v69 = v35;
  v70 = v35;
  v71 = &v33[v34];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v67);
  v36 = v63;
  if (v63 != v68)
  {
    v37 = v54;
    while (1)
    {
      WebKit::WebProcessProxy::pages(*(WebKit::WebProcessProxy **)(*v36 + 8), (uint64_t)&v60);
      if (v61)
        break;
LABEL_66:
      WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v38);
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v62);
      v36 = v63;
      if (v63 == v68)
      {
        v54 = v37;
        goto LABEL_68;
      }
    }
    v39 = v60;
    v40 = 8 * v61;
    v41 = (CFTypeRef *)v37;
    while (1)
    {
      v37 = *v39;
      v42 = (CFTypeRef *)((char *)*v39 + 8);
      CFRetain(*v42);
      WebKit::WebPageProxy::currentURL(v37, &v57);
      MEMORY[0x19AEABB0C](&v58, &v57, 0);
      WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)&v58, v43);
      v44 = WebCore::operator==();
      if (v66 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_8[v66])(&v64, v65);
      v66 = -1;
      v45 = v58;
      v58 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v38);
        else
          *(_DWORD *)v45 -= 2;
      }
      v46 = v57;
      v57 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v38);
          if (!v44)
            goto LABEL_62;
          goto LABEL_59;
        }
        *(_DWORD *)v46 -= 2;
      }
      if (!v44)
        goto LABEL_62;
LABEL_59:
      if (!v41)
      {
        v41 = (CFTypeRef *)v37;
        goto LABEL_63;
      }
      if (*((_QWORD *)v41[4] + 93) <= *(_QWORD *)(*((_QWORD *)v37 + 4) + 744))
      {
        v42 = v41 + 1;
        v41 = (CFTypeRef *)v37;
      }
LABEL_62:
      CFRelease(*v42);
      v37 = (WebKit::WebPageProxy *)v41;
LABEL_63:
      ++v39;
      v40 -= 8;
      if (!v40)
        goto LABEL_66;
    }
  }
LABEL_68:
  WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v16);
  a3 = v52;
LABEL_69:
  v47 = (uint64_t)v54;
  if (v54)
  {
    WebKit::WebPageProxy::queryPermission((uint64_t)v54, a2, a3, a7);
    CFRelease(*(CFTypeRef *)(v47 + 8));
  }
  else
  {
    v48 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, 258);
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
}

uint64_t WebKit::WebProcessProxy::webPage@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v5 = a1;
  {
    WebKit::WebProcessProxy::globalPageMap(void)::pageMap = 0;
  }
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::globalPageMap(void)::pageMap, &v5);
  v4 = result;
  if (result)
    result = (uint64_t)CFRetain(*(CFTypeRef *)(result + 8));
  *a2 = v4;
  return result;
}

WebKit::WebPreferences *WebKit::WebPreferences::WebPreferences(WebKit::WebPreferences *this, const WebKit::WebPreferences *a2)
{
  _DWORD *v4;
  _DWORD *v5;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D6F28;
  *((_QWORD *)this + 2) = 0;
  v4 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 3) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 4) = v5;
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)this + 40, (uint64_t *)a2 + 5);
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)this + 64, (uint64_t *)a2 + 8);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)((char *)this + 101) = 0;
  WebKit::WebPreferences::platformInitializeStore((WebKit **)this);
  return this;
}

uint64_t *WebKit::WebPreferences::experimentalFeatures(WebKit::WebPreferences *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  {
    v15 = 0;
    v16 = 0;
    v2 = WebKit::WebPreferences::features(this);
    v4 = *(unsigned int *)(v2 + 12);
    if ((_DWORD)v4)
    {
      v5 = *(uint64_t **)v2;
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        if (*v5)
          CFRetain(*(CFTypeRef *)(v7 + 8));
        v8 = *(unsigned __int8 *)(v7 + 40);
        CFRelease(*(CFTypeRef *)(v7 + 8));
        if ((v8 - 3) <= 3)
        {
          v9 = HIDWORD(v16);
          if (HIDWORD(v16) == (_DWORD)v16)
          {
            WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>> const&>((uint64_t)&v15, (unint64_t)v5);
          }
          else
          {
            v10 = v15;
            v11 = *v5;
            if (*v5)
              CFRetain(*(CFTypeRef *)(v11 + 8));
            v12 = HIDWORD(v16);
            *(_QWORD *)(v10 + 8 * v9) = v11;
            HIDWORD(v16) = v12 + 1;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
      v13 = v15;
      v14 = v16;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    v15 = 0;
    v16 = 0;
    WebKit::WebPreferences::experimentalFeatures(void)::experimentalFeatures = v13;
    qword_1EE341E80 = v14;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v3);
  }
  return &WebKit::WebPreferences::experimentalFeatures(void)::experimentalFeatures;
}

uint64_t *WebKit::WebPreferences::internalDebugFeatures(WebKit::WebPreferences *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  {
    v15 = 0;
    v16 = 0;
    v2 = WebKit::WebPreferences::features(this);
    v4 = *(unsigned int *)(v2 + 12);
    if ((_DWORD)v4)
    {
      v5 = *(uint64_t **)v2;
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        if (*v5)
          CFRetain(*(CFTypeRef *)(v7 + 8));
        v8 = *(unsigned __int8 *)(v7 + 40);
        CFRelease(*(CFTypeRef *)(v7 + 8));
        if ((v8 - 1) <= 1)
        {
          v9 = HIDWORD(v16);
          if (HIDWORD(v16) == (_DWORD)v16)
          {
            WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>> const&>((uint64_t)&v15, (unint64_t)v5);
          }
          else
          {
            v10 = v15;
            v11 = *v5;
            if (*v5)
              CFRetain(*(CFTypeRef *)(v11 + 8));
            v12 = HIDWORD(v16);
            *(_QWORD *)(v10 + 8 * v9) = v11;
            HIDWORD(v16) = v12 + 1;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
      v13 = v15;
      v14 = v16;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    v15 = 0;
    v16 = 0;
    WebKit::WebPreferences::internalDebugFeatures(void)::internalDebugFeatures = v13;
    qword_1EE341E98 = v14;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v3);
  }
  return &WebKit::WebPreferences::internalDebugFeatures(void)::internalDebugFeatures;
}

_QWORD *WebKit::WebPreferences::setBoolValueForKey(WebKit::WebPreferences *this, WTF::StringImpl **a2, const WTF::StringImpl *a3, char a4)
{
  _QWORD *result;

  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), a2, a3);
  if ((_DWORD)result)
    return WebKit::WebPreferences::updateBoolValueForKey(this, a2, a3, a4);
  return result;
}

uint64_t WebKit::WebPreferences::setUInt32ValueForKey(WebKit::WebPreferences *this, WTF::StringImpl **a2, unsigned int a3)
{
  uint64_t result;

  result = WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferences *)((char *)this + 40), a2, a3);
  if ((_DWORD)result)
  {
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, a2, a3);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setStringValueForKey(WebKit::WebPreferences *this, WTF::StringImpl **a2, const WTF::StringImpl **a3)
{
  _QWORD *result;

  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferences *)((char *)this + 40), a2, a3);
  if ((_DWORD)result)
  {
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, a2, (const WTF::String *)a3);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::deleteKey(WebKit::WebPreferences *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WebKit::WebPreferencesStore::deleteKey((WebKit::WebPreferences *)((char *)this + 40), a2, a3);
  WebKit::WebPreferences::platformDeleteKey((uint64_t)this, a2);
  return WebKit::WebPreferences::update(this);
}

uint64_t WebKit::WebProcessCache::canCacheProcess(WebKit::WebProcessCache *this, WebKit::WebProcessProxy *a2)
{
  WTF::StringImpl *v4;
  int v5;
  int v6;
  WTF::MemoryPressureHandler *v7;
  WTF::StringImpl *v8;
  char v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  const char *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  WebKit::WebProcessCache *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 1))
  {
    v10 = qword_1ECE71668;
    v11 = os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v11)
      return result;
    v13 = *((_QWORD *)a2 + 17);
    if (v13)
      LODWORD(v13) = *(_DWORD *)(v13 + 108);
    v23 = 134218240;
    v24 = this;
    v25 = 1024;
    v26 = v13;
    v14 = "%p - [PID=%d] WebProcessCache::canCacheProcess: Not caching process because the cache has no capacity";
    goto LABEL_17;
  }
  if (!*((_BYTE *)a2 + 704))
    goto LABEL_13;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 87);
  if (!v4)
    goto LABEL_13;
  v5 = *(_DWORD *)v4;
  v6 = *((_DWORD *)v4 + 1);
  *(_DWORD *)v4 += 2;
  if (!v6)
  {
    if (v5)
      *(_DWORD *)v4 = v5;
    else
      WTF::StringImpl::destroy(v4, a2);
    goto LABEL_13;
  }
  v7 = (WTF::MemoryPressureHandler *)MEMORY[0x19AEABBCC](v4, "nullOrigin", 10);
  v9 = (char)v7;
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    if (!(_DWORD)v7)
      goto LABEL_19;
LABEL_13:
    v10 = qword_1ECE71668;
    v15 = os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v15)
      return result;
    v16 = *((_QWORD *)a2 + 17);
    if (v16)
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    v23 = 134218240;
    v24 = this;
    v25 = 1024;
    v26 = v16;
    v14 = "%p - [PID=%d] WebProcessCache::canCacheProcess: Not caching process because it does not have an associated registrable domain";
    goto LABEL_17;
  }
  v7 = (WTF::MemoryPressureHandler *)WTF::StringImpl::destroy(v4, v8);
  if ((v9 & 1) != 0)
    goto LABEL_13;
LABEL_19:
  v17 = WTF::MemoryPressureHandler::singleton(v7);
  v18 = atomic_load((unsigned __int8 *)(v17 + 4));
  if (v18 == 2 || *(_BYTE *)(v17 + 7))
  {
    v10 = qword_1ECE71668;
    v19 = os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v19)
    {
      v20 = *((_QWORD *)a2 + 17);
      if (v20)
        LODWORD(v20) = *(_DWORD *)(v20 + 108);
      v23 = 134218240;
      v24 = this;
      v25 = 1024;
      v26 = v20;
      v14 = "%p - [PID=%d] WebProcessCache::canCacheProcess: Not caching process because we are under memory pressure";
      goto LABEL_17;
    }
  }
  else
  {
    if (*((_QWORD *)a2 + 94))
      return 1;
    v10 = qword_1ECE71668;
    v21 = os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v21)
    {
      v22 = *((_QWORD *)a2 + 17);
      if (v22)
        LODWORD(v22) = *(_DWORD *)(v22 + 108);
      v23 = 134218240;
      v24 = this;
      v25 = 1024;
      v26 = v22;
      v14 = "%p - [PID=%d] WebProcessCache::canCacheProcess: Not caching process because this session has been destroyed";
LABEL_17:
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v23, 0x12u);
      return 0;
    }
  }
  return result;
}

BOOL WebKit::WebProcessProxy::hasSameGPUAndNetworkProcessPreferencesAs(WebKit::WebProcessProxy *this, WebKit::WebPreferences **a2)
{
  uint64_t v4;
  __int16 v5;
  _BOOL8 result;

  result = 0;
  if (!*((_BYTE *)this + 1094)
    || (v4 = API::PageConfiguration::preferencesForGPUProcess(a2),
        __PAIR64__(*((unsigned __int8 *)this + 1089), *((unsigned __int8 *)this + 1088)) == __PAIR64__(BYTE1(v4), v4))&& __PAIR64__(*((unsigned __int8 *)this + 1091), *((unsigned __int8 *)this + 1090)) == __PAIR64__(BYTE3(v4), BYTE2(v4))&& __PAIR64__(*((unsigned __int8 *)this + 1093), *((unsigned __int8 *)this + 1092)) == __PAIR64__(BYTE5(v4), BYTE4(v4)))
  {
    if (!*((_BYTE *)this + 1097))
      return 1;
    v5 = API::PageConfiguration::preferencesForNetworkProcess(a2);
    if (*((unsigned __int8 *)this + 1095) == v5 && *((unsigned __int8 *)this + 1096) == HIBYTE(v5))
      return 1;
  }
  return result;
}

uint64_t WebKit::WebProcessCache::clearAllProcessesForSession(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::ASCIICaseInsensitiveHash **v17;
  WTF::ASCIICaseInsensitiveHash *v18;
  WTF::ASCIICaseInsensitiveHash **v19;
  uint64_t i;
  WTF::StringImpl **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl **v42;
  uint64_t *v44;
  uint64_t v45;
  WTF::ASCIICaseInsensitiveHash **v46;
  uint64_t v47;
  _BYTE buf[18];
  uint64_t v49;

  v3 = a2;
  v49 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  v47 = 0;
  v6 = (uint64_t *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = 0;
    v10 = 0;
LABEL_6:
    v8 = v5 + 16 * v10;
    goto LABEL_7;
  }
  if (!*(_DWORD *)(v5 - 12))
  {
    v10 = *(unsigned int *)(v5 - 4);
    v9 = v5 + 16 * v10;
    goto LABEL_6;
  }
  v7 = v5 + 16 * *(unsigned int *)(v5 - 4);
  *(_QWORD *)buf = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&buf[8] = v7;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)buf, (uint64_t)a2, a3);
  v9 = *(_QWORD *)buf;
  v8 = *(_QWORD *)&buf[8];
  v5 = *v6;
LABEL_7:
  v44 = (uint64_t *)v9;
  v45 = v8;
  if (v5)
    v11 = v5 + 16 * *(unsigned int *)(v5 - 4);
  else
    v11 = 0;
  if (v11 != v9)
  {
    do
    {
      v12 = **(_QWORD **)(v9 + 8);
      v13 = *(_QWORD *)(v12 + 752);
      if (!v13 || *(WTF::StringImpl ***)(v13 + 24) == v3)
      {
        v14 = qword_1ECE71668;
        if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
        {
          v15 = *(_QWORD *)(v12 + 136);
          if (v15)
            LODWORD(v15) = *(_DWORD *)(v15 + 108);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::clearAllProcessesForSession: Evicting process because its session was destroyed", buf, 0x12u);
        }
        v16 = HIDWORD(v47);
        if (HIDWORD(v47) == (_DWORD)v47)
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v46, v9);
        }
        else
        {
          v17 = v46;
          v18 = *(WTF::ASCIICaseInsensitiveHash **)v9;
          if (*(_QWORD *)v9)
            *(_DWORD *)v18 += 2;
          v17[v16] = v18;
          HIDWORD(v47) = v16 + 1;
        }
      }
      v44 = (uint64_t *)(v9 + 16);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v44, (uint64_t)a2, a3);
      v9 = (unint64_t)v44;
    }
    while (v44 != (uint64_t *)v11);
    if (HIDWORD(v47))
    {
      v19 = v46;
      for (i = 8 * HIDWORD(v47); i; i -= 8)
      {
        v21 = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v6, v19);
        a2 = v21;
        if (*v6)
        {
          v22 = *v6 + 16 * *(unsigned int *)(*v6 - 4);
          if ((WTF::StringImpl **)v22 != v21)
            goto LABEL_30;
        }
        else if (v21)
        {
          v22 = 0;
LABEL_30:
          if ((WTF::StringImpl **)v22 != v21)
            WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(v6, v21);
        }
        ++v19;
      }
    }
  }
  v44 = 0;
  v45 = 0;
  v24 = (uint64_t *)(a1 + 8);
  v23 = *(_QWORD *)(a1 + 8);
  if (v23)
  {
    v25 = *(unsigned int *)(v23 - 4);
    v26 = v23 + 16 * v25;
    if (*(_DWORD *)(v23 - 12))
    {
      v27 = *(_QWORD *)(a1 + 8);
      if ((_DWORD)v25)
      {
        v28 = 16 * v25;
        v27 = *(_QWORD *)(a1 + 8);
        while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
        {
          v27 += 16;
          v28 -= 16;
          if (!v28)
          {
            v27 = v26;
            goto LABEL_40;
          }
        }
      }
      goto LABEL_40;
    }
    v27 = v23 + 16 * v25;
  }
  else
  {
    v27 = 0;
    v25 = 0;
  }
  v26 = v23 + 16 * v25;
  if (v23)
  {
LABEL_40:
    v29 = v23 + 16 * *(unsigned int *)(v23 - 4);
    goto LABEL_45;
  }
  v29 = 0;
LABEL_45:
  if (v29 != v27)
  {
    v30 = 0;
    v31 = 0;
    do
    {
      v32 = **(_QWORD **)(v27 + 8);
      v33 = *(_QWORD *)(v32 + 752);
      if (!v33 || *(WTF::StringImpl ***)(v33 + 24) == v3)
      {
        v34 = qword_1ECE71668;
        if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
        {
          v35 = *(_QWORD *)(v32 + 136);
          if (v35)
            LODWORD(v35) = *(_DWORD *)(v35 + 108);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v35;
          _os_log_impl(&dword_196BCC000, v34, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::clearAllProcessesForSession: Evicting process because its session was destroyed", buf, 0x12u);
          v31 = HIDWORD(v45);
        }
        if (v31 == (_DWORD)v45)
        {
          v36 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, v31 + 1, v27);
          v31 = HIDWORD(v45);
          v30 = v44;
          v37 = &v44[HIDWORD(v45)];
        }
        else
        {
          v30 = v44;
          v37 = &v44[v31];
          v36 = (uint64_t *)v27;
        }
        ++v31;
        *v37 = *v36;
        HIDWORD(v45) = v31;
      }
      v38 = v27 + 16;
      v27 = v26;
      if (v38 != v26)
      {
        v27 = v38;
        while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
        {
          v27 += 16;
          if (v27 == v26)
          {
            v27 = v26;
            break;
          }
        }
      }
    }
    while (v27 != v29);
    if (v31)
    {
      v39 = 8 * v31;
      while (1)
      {
        v40 = *v24;
        v41 = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*v24, *v30);
        a2 = v41;
        if (v40)
        {
          v42 = (WTF::StringImpl **)(v40 + 16 * *(unsigned int *)(v40 - 4));
          if (v42 != v41)
            goto LABEL_70;
        }
        else if (v41)
        {
          v42 = 0;
LABEL_70:
          if (v42 != v41)
            WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v24, v41);
        }
        ++v30;
        v39 -= 8;
        if (!v39)
        {
          v30 = v44;
          break;
        }
      }
    }
    if (v30)
    {
      v44 = 0;
      LODWORD(v45) = 0;
      WTF::fastFree((WTF *)v30, a2);
    }
  }
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, a2);
}

uint64_t WebKit::WebProcessCache::removeProcess(uint64_t a1, uint64_t a2, char a3)
{
  WTF::StringImpl *v4;
  int v5;
  int v6;
  int v9;
  WTF::StringImpl *v10;
  char v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  uint64_t result;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  _BYTE v36[12];
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 704))
    goto LABEL_64;
  v4 = *(WTF::StringImpl **)(a2 + 696);
  if (!v4)
    goto LABEL_64;
  v5 = *(_DWORD *)v4;
  v6 = *((_DWORD *)v4 + 1);
  *(_DWORD *)v4 += 2;
  if (!v6)
  {
    if (v5)
      *(_DWORD *)v4 = v5;
    else
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    goto LABEL_64;
  }
  v9 = MEMORY[0x19AEABBCC](v4, "nullOrigin", 10);
  v11 = v9;
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::destroy(v4, v10);
    if ((v11 & 1) != 0)
    {
LABEL_64:
      result = 269;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    *(_DWORD *)v4 -= 2;
    if (v9)
      goto LABEL_64;
  }
  v12 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a2 + 136);
    if (v13)
      LODWORD(v13) = *(_DWORD *)(v13 + 108);
    *(_DWORD *)v36 = 134218240;
    *(_QWORD *)&v36[4] = a1;
    v37 = 1024;
    v38 = v13;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::removeProcess: Evicting process from WebProcess cache because it expired", v36, 0x12u);
  }
  v14 = (uint64_t *)(a1 + 16);
  if (*(_BYTE *)(a2 + 704))
  {
    v15 = *(WTF::StringImpl **)(a2 + 696);
    if (v15)
      *(_DWORD *)v15 += 2;
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)v36 = v15;
  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 16), (WTF::ASCIICaseInsensitiveHash **)v36);
  v18 = result;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      result = WTF::StringImpl::destroy(v15, v17);
    else
      *(_DWORD *)v15 -= 2;
  }
  v19 = *v14;
  if (*v14)
    v19 += 16 * *(unsigned int *)(v19 - 4);
  if (v19 != v18)
  {
    v20 = *(uint64_t **)(v18 + 8);
    if (*v20 == a2)
    {
      *(_QWORD *)(v18 + 8) = 0;
      v28 = *v14;
      if (!*v14 || (v28 += 16 * *(unsigned int *)(v28 - 4), v28 != v18))
      {
        if (v28 != v18)
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove((uint64_t *)(a1 + 16), (WTF::StringImpl **)v18);
      }
      goto LABEL_56;
    }
  }
  v23 = *(uint64_t **)(a1 + 8);
  v22 = (uint64_t *)(a1 + 8);
  v21 = v23;
  if (!v23)
  {
    v26 = 0;
    v24 = 0;
LABEL_37:
    v25 = &v21[2 * v24];
    goto LABEL_38;
  }
  v24 = *((unsigned int *)v21 - 1);
  v25 = &v21[2 * v24];
  if (!*((_DWORD *)v21 - 3))
  {
    v26 = &v21[2 * v24];
    goto LABEL_37;
  }
  v26 = v21;
  if ((_DWORD)v24)
  {
    v27 = 16 * v24;
    v26 = v21;
    while ((unint64_t)(*v26 + 1) <= 1)
    {
      v26 += 2;
      v27 -= 16;
      if (!v27)
      {
        v26 = v25;
        break;
      }
    }
  }
LABEL_38:
  if (v21)
    v21 += 2 * *((unsigned int *)v21 - 1);
  if (v21 != v26)
  {
    while (1)
    {
      v20 = (uint64_t *)v26[1];
      if (*v20 == a2)
        break;
      v29 = v26 + 2;
      v26 = v25;
      if (v29 != v25)
      {
        v26 = v29;
        while ((unint64_t)(*v26 + 1) <= 1)
        {
          v26 += 2;
          if (v26 == v25)
          {
            v26 = v25;
            break;
          }
        }
      }
      if (v26 == v21)
        return result;
    }
    v26[1] = 0;
    v30 = *v22;
    v31 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*v22, *v26);
    if (v30)
    {
      v32 = (_QWORD *)(v30 + 16 * *(unsigned int *)(v30 - 4));
      if (v32 == v31)
        goto LABEL_56;
    }
    else
    {
      if (!v31)
      {
LABEL_56:
        if ((a3 & 1) == 0)
        {
          WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v20 + 1));
          WebKit::WebProcessProxy::setIsInProcessCache(*v20, 0, 0);
          v33 = *v20;
          *v20 = 0;
          if (v33)
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v33 + 16));
        }
        WebKit::WebProcessCache::CachedProcess::~CachedProcess((WebKit::WebProcessCache::CachedProcess *)v20);
        return WTF::fastFree(v34, v35);
      }
      v32 = 0;
    }
    if (v32 != v31)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v22, v31);
    goto LABEL_56;
  }
  return result;
}

uint64_t WebKit::WebProcessCache::CachedProcess::evictionTimerFired(WebKit::WebProcessCache::CachedProcess *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = (unsigned int *)(v1 + 16);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 512) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  v6 = *(_DWORD **)(v5 + 768);
  ++*v6;
  WebKit::WebProcessCache::removeProcess((uint64_t)v6, v1, 1);
  if (*v6)
  {
    --*v6;
    return (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v1 + 16));
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

void WebKit::WebProcessProxy::setIsInProcessCache(uint64_t a1, int a2, char a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  char v19;
  uint64_t v20;
  IPC::Encoder *v21;
  _BYTE buf[18];
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 136);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v7;
    v23 = 1024;
    v24 = a2;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::setIsInProcessCache(%d)", buf, 0x18u);
  }
  if (a2)
  {
    v8 = *(_QWORD *)(a1 + 552);
    if (v8 && *(_DWORD *)(v8 - 12))
    {
      __break(0xC471u);
      JUMPOUT(0x19739DF18);
    }
    if (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 592)))
    {
      __break(0xC471u);
      JUMPOUT(0x19739DED8);
    }
    if (!WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 576)))
    {
      __break(0xC471u);
      JUMPOUT(0x19739DEF8);
    }
    v10 = *(WTF::StringImpl ***)(a1 + 544);
    if (v10)
    {
      *(_QWORD *)(a1 + 544) = 0;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v9);
    }
  }
  *(_BYTE *)(a1 + 712) = a2;
  if ((a3 & 1) == 0)
  {
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 2640;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v21 = (IPC::Encoder *)v11;
    *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a2;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E34D7C40;
    v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    *(_QWORD *)buf = v12;
    *(_QWORD *)&buf[8] = v13;
    buf[16] = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v21, 0, (uint64_t)buf, 1);
    if (buf[16])
    {
      v15 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
    if (*(_BYTE *)(a1 + 712))
    {
      v19 = 1;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 512);
      if (!v20 || !*(_QWORD *)(v20 + 8))
      {
        __break(0xC471u);
        JUMPOUT(0x19739DF38);
      }
      v19 = 0;
    }
    *(_BYTE *)(a1 + 504) = v19;
    WebKit::WebProcessProxy::WeakOrStrongPtr<WebKit::WebProcessPool>::updateStrongReference(a1 + 504);
    WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
  }
}

void WebKit::WebProcessCache::CachedProcess::~CachedProcess(WebKit::WebProcessProxy **this)
{
  WebKit::WebProcessProxy *v2;
  WebKit::WebProcessProxy *v3;
  WebKit::WebProcessProxy *v4;

  v2 = *this;
  if (v2)
  {
    WebKit::WebProcessProxy::setIsInProcessCache((uint64_t)v2, 0, 1);
    WebKit::WebProcessProxy::shutDown(*this);
  }
  this[1] = (WebKit::WebProcessProxy *)off_1E34ABE00;
  v3 = this[4];
  this[4] = 0;
  if (v3)
    (*(void (**)(WebKit::WebProcessProxy *))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(this + 1));
  v4 = *this;
  *this = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v4 + 4);
}

WebKit::WebProcessPool *WebKit::WebProcessPool::create@<X0>(WebKit::WebProcessPool *this@<X0>, WebKit::WebProcessPool **a2@<X8>)
{
  WebKit::WebProcessPool *v5;
  WebKit::WebProcessPool *result;

  WebKit::InitializeWebKit2(this);
  v5 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
  result = WebKit::WebProcessPool::WebProcessPool(v5, this);
  *a2 = result;
  return result;
}

IPC::Encoder *WebKit::WebProcessPool::updateHiddenPageThrottlingAutoIncreaseLimit(IPC::Encoder *this)
{
  uint64_t v1;
  IPC::Encoder **v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double *v6;

  v5 = (double)(20000 * *(_DWORD *)(*((_QWORD *)this + 71) + 8)) / 1000.0;
  v1 = *((unsigned int *)this + 21);
  if ((_DWORD)v1)
  {
    v2 = (IPC::Encoder **)*((_QWORD *)this + 9);
    v3 = 8 * v1;
    do
    {
      this = *v2;
      v4 = *((_QWORD *)*v2 + 17);
      if ((v4 && *(_BYTE *)(v4 + 104) || *((_QWORD *)this + 18)) && (!*((_BYTE *)this + 389) || *((_QWORD *)this + 28)))
      {
        v6 = &v5;
        this = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHiddenPageDOMTimerThrottlingIncreaseLimit>((uint64_t)this, (uint64_t **)&v6);
      }
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

void WebKit::WebProcessPool::clearAudibleActivity(WebKit::WebProcessPool *this)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebKit::WebProcessPool *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::clearAudibleActivity: The number of processes playing audible media is now zero. Releasing UI process assertion.", (uint8_t *)&v6, 0xCu);
  }
  if (*((_BYTE *)this + 824))
  {
    v4 = *((_QWORD *)this + 102);
    *((_QWORD *)this + 102) = 0;
    if (v4)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), v3);
    v5 = *((_QWORD *)this + 101);
    *((_QWORD *)this + 101) = 0;
    if (v5)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 8), v3);
    *((_BYTE *)this + 824) = 0;
  }
}

void `non-virtual thunk to'WebKit::WebProcessPool::~WebProcessPool(WebKit::WebProcessPool *this)
{
  WebKit::WebProcessPool::~WebProcessPool((WebKit::WebProcessPool *)((char *)this - 16));
}

{
  WebKit::WebProcessPool::~WebProcessPool((WebKit::WebProcessPool *)((char *)this - 32));
}

{
  WebKit::WebProcessPool::~WebProcessPool((WebKit::WebProcessPool *)((char *)this - 16));
  JUMPOUT(0x19AEB936CLL);
}

{
  WebKit::WebProcessPool::~WebProcessPool((WebKit::WebProcessPool *)((char *)this - 32));
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebProcessPool::setInjectedBundleClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34D71E0;
  }
  result = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebProcessPool::setHistoryClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34D7248;
  }
  result = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebProcessPool::setAutomationClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34D7218;
  }
  result = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::FullKeyboardAccessModeChanged>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::FullKeyboardAccessModeChanged>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void WebKit::WebProcessPool::networkProcessDidTerminate(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;

  if (a3 <= 5 && ((1 << a3) & 0x33) != 0)
  {
    v5 = (_QWORD *)(a1 + 208);
    v6 = *(_QWORD *)(a2 + 136);
    if (v6)
      v7 = *(unsigned int *)(v6 + 108);
    else
      v7 = 0;
    WebKit::WebContextClient::networkProcessDidCrash(v5, a1, v7, a3);
  }
  v8 = *(CFTypeRef **)(a1 + 320);
  if (v8)
  {
    CFRetain(v8[1]);
    WebKit::WebAutomationSession::terminate((WebKit::WebAutomationSession *)v8);
    CFRelease(v8[1]);
  }
  WebKit::WebProcessPool::terminateServiceWorkers((CFTypeRef *)a1);
}

void WebKit::WebProcessPool::terminateServiceWorkers(CFTypeRef *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  void *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;

  CFRetain(this[1]);
  v12 = 0;
  v13 = 0;
  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    *(_QWORD *)algn_1ECE73828 = 0;
  }
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34D7970;
  v2[1] = &v12;
  v11 = v2;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v11);
  v4 = v11;
  v11 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  if (!HIDWORD(v13))
  {
    WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v3);
LABEL_15:
    CFRelease(this[1]);
    return;
  }
  v5 = v12;
  v6 = &v12[HIDWORD(v13)];
  do
  {
    v7 = *v5;
    v8 = (unsigned int *)(*v5 + 16);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    WebKit::WebProcessProxy::disableRemoteWorkers(v7, 1);
    if (v7)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
    ++v5;
  }
  while (v5 != v6);
  WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v10);
  if (this)
    goto LABEL_15;
}

uint64_t WebKit::WebProcessPool::gpuProcessExited(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  WebKit::WebProcessProxy **v10;
  WebKit::WebProcessProxy **v11;
  WebKit::WebProcessProxy *v12;
  unsigned int *v13;
  unsigned int v14;
  NSObject *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  unsigned int v23;
  NSObject *v24;
  WebKit::WebProcessProxy **v26;
  int v27;
  _BYTE buf[12];
  _BYTE v29[6];
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "ExceededMemoryLimit";
    switch(a3)
    {
      case 0u:
        break;
      case 1u:
        v7 = "ExceededCPULimit";
        break;
      case 2u:
        v7 = "RequestedByClient";
        break;
      case 3u:
        v7 = "IdleExit";
        break;
      case 4u:
        v7 = "Unresponsive";
        break;
      case 5u:
        v7 = "Crash";
        break;
      case 6u:
        v7 = "ExceededProcessCountLimit";
        break;
      case 7u:
        v7 = "NavigationSwap";
        break;
      case 8u:
        v7 = "RequestedByNetworkProcess";
        break;
      case 9u:
        v7 = "RequestedByGPUProcess";
        break;
      default:
        v7 = (const char *)&str_10_5;
        break;
    }
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)v29 = 1024;
    *(_DWORD *)&v29[2] = a2;
    v30 = 2082;
    v31 = (uint64_t)v7;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::gpuProcessDidExit: PID=%d, reason=%{public}s", buf, 0x1Cu);
  }
  v8 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  if (a3 <= 5 && ((1 << a3) & 0x33) != 0)
    WebKit::WebContextClient::gpuProcessDidCrash((_QWORD *)(a1 + 208), a1, a2, a3);
  WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v26, a1 + 72);
  if (v27)
  {
    v10 = v26;
    v11 = &v26[v27];
    do
    {
      v12 = *v10;
      v13 = (unsigned int *)((char *)*v10 + 16);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v15 = qword_1ECE71C68;
      if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
      {
        v21 = *((_QWORD *)v12 + 17);
        if (v21)
          LODWORD(v21) = *(_DWORD *)(v21 + 108);
        v22 = "ExceededMemoryLimit";
        switch(a3)
        {
          case 0u:
            break;
          case 1u:
            v22 = "ExceededCPULimit";
            break;
          case 2u:
            v22 = "RequestedByClient";
            break;
          case 3u:
            v22 = "IdleExit";
            break;
          case 4u:
            v22 = "Unresponsive";
            break;
          case 5u:
            v22 = "Crash";
            break;
          case 6u:
            v22 = "ExceededProcessCountLimit";
            break;
          case 7u:
            v22 = "NavigationSwap";
            break;
          case 8u:
            v22 = "RequestedByNetworkProcess";
            break;
          case 9u:
            v22 = "RequestedByGPUProcess";
            break;
          default:
            v22 = (const char *)&str_10_5;
            break;
        }
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)v29 = 1024;
        *(_DWORD *)&v29[2] = v21;
        v30 = 2082;
        v31 = (uint64_t)v22;
        _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::gpuProcessExited: reason=%{public}s", buf, 0x1Cu);
      }
      *((_QWORD *)v12 + 135) = 0;
      WebKit::WebProcessProxy::pages(v12, (uint64_t)buf);
      if (*(_DWORD *)v29)
      {
        v17 = *(uint64_t **)buf;
        v18 = 8 * *(unsigned int *)v29;
        do
        {
          v19 = *v17++;
          CFRetain(*(CFTypeRef *)(v19 + 8));
          WebKit::WebPageProxy::gpuProcessExited(v19);
          CFRelease(*(CFTypeRef *)(v19 + 8));
          v18 -= 8;
        }
        while (v18);
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v20);
        if (!v12)
          goto LABEL_31;
      }
      else
      {
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v16);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
LABEL_31:
      ++v10;
    }
    while (v10 != v11);
  }
  if ((a3 & 0xFE) == 4)
  {
    v23 = *(_DWORD *)(a1 + 640) + 1;
    *(_DWORD *)(a1 + 640) = v23;
    if (v23 < 3)
    {
      if ((WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(a1 + 608)) & 1) == 0)
        WTF::RunLoop::TimerBase::start();
    }
    else
    {
      v24 = qword_1ECE71C68;
      if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)v29 = 1024;
        *(_DWORD *)&v29[2] = 2;
        v30 = 2048;
        v31 = 0x403E000000000000;
        _os_log_error_impl(&dword_196BCC000, v24, OS_LOG_TYPE_ERROR, "%p - WebProcessPool::gpuProcessDidExit: GPU Process has crashed more than %u times in the last %g seconds, terminating all WebProcesses", buf, 0x1Cu);
      }
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 608));
      *(_DWORD *)(a1 + 640) = 0;
      WebKit::WebProcessPool::terminateAllWebContentProcesses((WebKit::WebProcessPool *)a1);
    }
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v9);
}

uint64_t WebKit::WebProcessPool::terminateAllWebContentProcesses(WebKit::WebProcessPool *this)
{
  NSObject *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v10[12];
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v10 = 134217984;
    *(_QWORD *)&v10[4] = this;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - WebProcessPool::terminateAllWebContentProcesses", v10, 0xCu);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v10, (uint64_t)this + 72);
  if (v11)
  {
    v4 = *(_QWORD **)v10;
    v5 = *(_QWORD *)v10 + 8 * v11;
    do
    {
      v6 = *v4;
      v7 = (unsigned int *)(*v4 + 16);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
      ++v4;
    }
    while (v4 != (_QWORD *)v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v3);
}

unsigned int *WebKit::WebProcessPool::createGPUProcessConnection(WebKit::WebProcessPool *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _OWORD *v8;
  int v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  v7 = *((_QWORD *)a1 + 6);
  v8 = (_OWORD *)(v7 + 100);
  v9 = *(unsigned __int8 *)(v7 + 132);
  v10 = (_OWORD *)(a4 + 12);
  if (*(unsigned __int8 *)(a4 + 44) == v9)
  {
    if (*(_BYTE *)(a4 + 44))
    {
      v11 = v8[1];
      *v10 = *v8;
      *(_OWORD *)(a4 + 28) = v11;
    }
  }
  else if (*(_BYTE *)(a4 + 44))
  {
    *(_BYTE *)(a4 + 44) = 0;
  }
  else
  {
    v12 = v8[1];
    *v10 = *v8;
    *(_OWORD *)(a4 + 28) = v12;
    *(_BYTE *)(a4 + 44) = 1;
  }
  v13 = WebKit::WebProcessPool::ensureGPUProcess(a1);
  v14 = (unsigned int *)(v13 + 16);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  WebKit::GPUProcessProxy::createGPUProcessConnection(v13, a2, a3, a4);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
}

void WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit *a1, const WTF::StringImpl **a2, WebKit::WebsiteDataStore *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  IPC::Encoder *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _BOOL4 isLockdownModeEnabledBySystemIgnoringCaching;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  IPC::Encoder *v33;
  const WTF::StringImpl *v34;
  unsigned int v35;
  _DWORD *v36;
  const char *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  WebKit::WebPreferencesStore *v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unsigned int *v49;
  unsigned int v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  IPC::Encoder *v54;
  const WTF::StringImpl *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 BoolValueForKey;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  IPC::Encoder *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  _QWORD *v73;
  uint64_t v74;
  __int128 v75;
  unsigned int v76;
  NSObject *v77;
  uint64_t v78;
  const char *v79;
  BOOL v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  IPC::Encoder *v95;
  WTF *v96;
  void *v97;
  unsigned int v98;
  unsigned int v99;
  CFTypeRef *v100;
  WebKit *v101;
  WebKit::WebProcessPool *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  IPC::Encoder *v110;
  _OWORD v111[3];
  _BYTE buf[28];
  uint64_t v113;

  LOBYTE(v9) = a4;
  v11 = (uint64_t)a1;
  v113 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)buf = a6;
  v12 = WebKit::allDataStores(a1);
  v13 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v12, buf);
  if (v13)
  {
    v108 = v13;
    v14 = (uint64_t)CFRetain(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    WebKit::WebsiteDataStore::defaultDataStore(0, (WebKit::WebsiteDataStore **)buf);
    v108 = *(_QWORD *)buf;
  }
  v15 = (IPC::Encoder *)&_MergedGlobals_106;
  v16 = (uint64_t)&_MergedGlobals_106;
    goto LABEL_172;
  if (dword_1ECE73864)
    goto LABEL_7;
  while (2)
  {
    {
      v100 = (CFTypeRef *)API::Object::newObject(0xA8uLL, 90);
      v101 = API::ProcessPoolConfiguration::ProcessPoolConfiguration((API::ProcessPoolConfiguration *)v100);
      WebKit::InitializeWebKit2(v101);
      v102 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
      WebKit::WebProcessPool::WebProcessPool(v102, (API::ProcessPoolConfiguration *)v100);
      CFRelease(v100[1]);
    }
    if (!(_BYTE)v9)
      goto LABEL_17;
LABEL_7:
    *(_QWORD *)buf = a3;
    {
      WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    }
    v14 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, buf);
    a3 = (WebKit::WebsiteDataStore *)v108;
    if (v14)
    {
      v17 = (unsigned int *)(v14 + 16);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      isLockdownModeEnabledBySystemIgnoringCaching = *(_BYTE *)(v14 + 779) != 0;
      v107 = v14;
      v20 = *(_QWORD *)(v14 + 512);
      if (v20)
      {
        v16 = 0;
        v21 = *(_QWORD *)(v20 + 8);
        if (v21)
          v9 = v21 - 16;
        else
          v9 = 0;
      }
      else
      {
        v16 = 0;
        v9 = 0;
      }
    }
    else
    {
LABEL_17:
      if (HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
      {
        isLockdownModeEnabledBySystemIgnoringCaching = (_BYTE)WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally != 0;
      }
      else
      {
        isLockdownModeEnabledBySystemIgnoringCaching = WebKit::isLockdownModeEnabledBySystemIgnoringCaching((WebKit *)v14);
        WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = isLockdownModeEnabledBySystemIgnoringCaching | 0x100;
      }
      a3 = (WebKit::WebsiteDataStore *)v108;
      if ((*((_BYTE *)v15 + 2152) & 1) == 0)
      {
        WebKit::processPools(void)::processPools = 0;
        *(_QWORD *)&dword_1ECE73860 = 0;
        *((_BYTE *)v15 + 2152) = 1;
        goto LABEL_174;
      }
      if (!*(_DWORD *)(v16 + 2148))
        goto LABEL_174;
      v107 = 0;
      v22 = *(_QWORD *)(*(_QWORD *)WebKit::processPools(void)::processPools + 8);
      if (v22)
        v9 = v22 - 16;
      else
        v9 = 0;
      v16 = 1;
    }
    CFRetain(*(CFTypeRef *)(v9 + 8));
    if (*(_BYTE *)(a5 + 32))
    {
      *(_QWORD *)buf = *(_QWORD *)(a5 + 16);
      {
        WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
      }
      v24 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, buf);
      if (v24)
      {
        v15 = (IPC::Encoder *)v24;
        v25 = v11;
        v11 = v24 + 16;
        do
          v26 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v26 + 1, (unsigned int *)v11));
        do
          v27 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v27 + 1, (unsigned int *)v11));
        *(_QWORD *)buf = WebKit::WebProcessPool::userContentControllerIdentifierForRemoteWorkers((WebKit::WebProcessPool *)v9);
        WebKit::WebProcessProxy::enableRemoteWorkers((uint64_t)v15, v25, (uint64_t *)buf);
        if (!*((_BYTE *)v15 + 712))
          goto LABEL_37;
        v28 = *(_DWORD **)(v9 + 768);
        ++*v28;
        WebKit::WebProcessCache::removeProcess((uint64_t)v28, (uint64_t)v15, 0);
        if (*v28)
        {
          --*v28;
          goto LABEL_37;
        }
LABEL_174:
        __break(0xC471u);
        JUMPOUT(0x19739F6F4);
      }
    }
    if (WebKit::WebProcessPool::s_useSeparateServiceWorkerProcess)
      v29 = 1;
    else
      v29 = v16;
    if ((v29 & 1) != 0)
    {
      if (WebKit::WebProcessPool::s_useSeparateServiceWorkerProcess)
        goto LABEL_81;
    }
    else if (a3 == *(WebKit::WebsiteDataStore **)(v107 + 752) && *(_BYTE *)(v107 + 704))
    {
      v16 = v107;
      if ((WTF::equal(*(WTF **)(v107 + 696), *a2, v23) & 1) != 0)
      {
        v39 = (unsigned int *)(v107 + 16);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 + 1, v39));
        *(_QWORD *)buf = WebKit::WebProcessPool::userContentControllerIdentifierForRemoteWorkers((WebKit::WebProcessPool *)v9);
        v15 = (IPC::Encoder *)v107;
        WebKit::WebProcessProxy::enableRemoteWorkers(v107, v11, (uint64_t *)buf);
        if (*(_BYTE *)(v107 + 712))
        {
          v41 = *(_DWORD **)(v9 + 768);
          ++*v41;
          v15 = (IPC::Encoder *)v107;
          WebKit::WebProcessCache::removeProcess((uint64_t)v41, v107, 0);
          if (!*v41)
          {
            __break(0xC471u);
            JUMPOUT(0x19739F714);
          }
          --*v41;
        }
        goto LABEL_82;
      }
      if (WebKit::WebProcessPool::s_useSeparateServiceWorkerProcess)
      {
LABEL_81:
        v15 = 0;
        goto LABEL_82;
      }
    }
    v30 = *(unsigned int *)(v9 + 84);
    if (!(_DWORD)v30)
      goto LABEL_81;
    v25 = v11;
    v16 = *(_QWORD *)(v9 + 72);
    v31 = v16 + 8 * v30;
    while (1)
    {
      v15 = *(IPC::Encoder **)v16;
      v11 = *(_QWORD *)v16 + 16;
      do
        v32 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v32 + 1, (unsigned int *)v11));
      v33 = *(IPC::Encoder **)(v9 + 88);
      if (v33)
        v33 = (IPC::Encoder *)*((_QWORD *)v33 + 1);
      if (v15 == v33 || WebKit::WebProcessProxy::isDummyProcessProxy(v15))
      {
        if (!v15)
          goto LABEL_58;
        goto LABEL_57;
      }
      if (a3 == *((WebKit::WebsiteDataStore **)v15 + 94)
        && *((_BYTE *)v15 + 704)
        && WTF::equal(*((WTF **)v15 + 87), *a2, v34)
        && ((isLockdownModeEnabledBySystemIgnoringCaching ^ (*((_BYTE *)v15 + 779) != 0)) & 1) == 0)
      {
        break;
      }
LABEL_57:
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v11);
LABEL_58:
      v16 += 8;
      if (v16 == v31)
      {
        v15 = 0;
        goto LABEL_38;
      }
    }
    do
      v35 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v35 + 1, (unsigned int *)v11));
    *(_QWORD *)buf = WebKit::WebProcessPool::userContentControllerIdentifierForRemoteWorkers((WebKit::WebProcessPool *)v9);
    WebKit::WebProcessProxy::enableRemoteWorkers((uint64_t)v15, v25, (uint64_t *)buf);
    if (!*((_BYTE *)v15 + 712))
      goto LABEL_67;
    v36 = *(_DWORD **)(v9 + 768);
    ++*v36;
    WebKit::WebProcessCache::removeProcess((uint64_t)v36, (uint64_t)v15, 0);
    if (!*v36)
    {
      v14 = 286;
      __break(0xC471u);
      goto LABEL_171;
    }
    --*v36;
LABEL_67:
    v16 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
    {
      v37 = "shared";
      if ((_DWORD)v25 == 1)
        v37 = "service";
      v38 = *((_QWORD *)v15 + 17);
      if (v38)
        LODWORD(v38) = *(_DWORD *)(v38 + 108);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v37;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v38;
      _os_log_impl(&dword_196BCC000, (os_log_t)v16, OS_LOG_TYPE_DEFAULT, "WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess reusing an existing web process (process=%p, workerType=%{public}s, PID=%d)", buf, 0x1Cu);
    }
LABEL_37:
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v11);
LABEL_38:
    v11 = v25;
LABEL_82:
    if ((_DWORD)v11 == 1)
    {
      v42 = *((_QWORD *)a3 + 55);
      if (v42)
      {
        v106 = *((_QWORD *)a3 + 55);
        CFRetain(*(CFTypeRef *)(v42 + 8));
        v104 = 0;
        v105 = 0;
        v43 = *((_QWORD *)a3 + 55);
        goto LABEL_90;
      }
    }
    if (*(_BYTE *)(v9 + 152))
    {
      v14 = (uint64_t)CFRetain(*(CFTypeRef *)(v9 + 8));
      if (*(_BYTE *)(v9 + 152))
      {
        v105 = 0;
        v106 = 0;
        v44 = (WebKit::WebPreferencesStore *)(v9 + 104);
        v104 = v9;
        if (!v15)
          goto LABEL_91;
        goto LABEL_119;
      }
      goto LABEL_171;
    }
    v105 = *(_QWORD *)(v9 + 184);
    CFRetain(*(CFTypeRef *)(v105 + 8));
    v104 = 0;
    v106 = 0;
    v43 = *(_QWORD *)(*(_QWORD *)(v9 + 184) + 40);
LABEL_90:
    v44 = (WebKit::WebPreferencesStore *)(v43 + 40);
    if (!v15)
    {
LABEL_91:
      v45 = *a2;
      if (*a2)
        *(_DWORD *)v45 += 2;
      v46 = WTF::fastMalloc((WTF *)0x478);
      v110 = (IPC::Encoder *)WebKit::WebProcessProxy::WebProcessProxy(v46, v9, (uint64_t)a3, 0, 0, isLockdownModeEnabledBySystemIgnoringCaching);
      if (*((_BYTE *)v110 + 704))
      {
        v48 = *(WTF::StringImpl **)(v46 + 696);
        *(_QWORD *)(v46 + 696) = v45;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, v47);
          else
            *(_DWORD *)v48 -= 2;
        }
      }
      else
      {
        *(_QWORD *)(v46 + 696) = v45;
        *(_BYTE *)(v46 + 704) = 1;
      }
      *(_QWORD *)buf = WebKit::WebProcessPool::userContentControllerIdentifierForRemoteWorkers((WebKit::WebProcessPool *)v9);
      WebKit::WebProcessProxy::enableRemoteWorkers(v46, v11, (uint64_t *)buf);
      WebKit::AuxiliaryProcessProxy::connect((WebKit::AuxiliaryProcessProxy *)v46);
      v15 = v110;
      v49 = (unsigned int *)((char *)v110 + 16);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 + 1, v49));
      v51 = qword_1ECE71848;
      if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
      {
        v52 = "shared";
        if ((_DWORD)v11 == 1)
          v52 = "service";
        v53 = *((_QWORD *)v15 + 17);
        if (v53)
          LODWORD(v53) = *(_DWORD *)(v53 + 108);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v52;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v53;
        _os_log_impl(&dword_196BCC000, v51, OS_LOG_TYPE_DEFAULT, "WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess creating a new service worker process (process=%p, workerType=%{public}s, PID=%d)", buf, 0x1Cu);
      }
      v54 = v110;
      WebKit::WebProcessPool::initializeNewWebProcess(v9, (uint64_t)v110, a3, 0);
      v56 = (uint64_t *)(v9 + 72);
      v57 = *(unsigned int *)(v9 + 84);
      if ((_DWORD)v57 == *(_DWORD *)(v9 + 80))
      {
        v58 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, v57 + 1, (unint64_t)&v110);
        v57 = *(unsigned int *)(v9 + 84);
        v59 = *(_QWORD *)(v9 + 72);
        v60 = *v58;
        *v58 = 0;
        *(_QWORD *)(v59 + 8 * v57) = v60;
      }
      else
      {
        v61 = *v56;
        v110 = 0;
        *(_QWORD *)(v61 + 8 * v57) = v54;
      }
      *(_DWORD *)(v9 + 84) = v57 + 1;
      {
        WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey(v44, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key, v55);
      v63 = *(_QWORD *)(*((_QWORD *)v15 + 64) + 8);
      if (v63)
        v64 = v63 - 16;
      else
        v64 = 0;
      v65 = *(unsigned __int8 *)(*(_QWORD *)(v64 + 48) + 96);
      if (!*((_BYTE *)v15 + 1097))
        *((_BYTE *)v15 + 1097) = 1;
      *(_WORD *)((char *)v15 + 1095) = BoolValueForKey | (v65 << 8);
      v66 = v110;
      v110 = 0;
      if (v66)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v66 + 4);
    }
LABEL_119:
    v103 = (uint64_t)v44;
    v67 = *(_QWORD *)a7;
    *(_QWORD *)a7 = 0;
    v16 = *((_QWORD *)v15 + 22);
    v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v68 = &off_1E34D78C0;
    v68[1] = v67;
    v68[2] = v16;
    a7 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)a7 = 1;
    *(_QWORD *)(a7 + 8) = v68;
    v69 = WebKit::WebsiteDataStore::networkProcess(a3);
    v70 = (unsigned int *)(v69 + 16);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 + 1, v70));
    do
      v72 = __ldaxr((unsigned int *)a7);
    while (__stlxr(v72 + 1, (unsigned int *)a7));
    v73 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v73 = off_1E34D78E8;
    v73[1] = a7;
    *(_QWORD *)buf = v73;
    WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v69, (uint64_t)v15, a2, 0, (uint64_t *)buf);
    v74 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v74)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v70);
    v75 = *(_OWORD *)(a5 + 16);
    v111[0] = *(_OWORD *)a5;
    v111[1] = v75;
    v111[2] = *(_OWORD *)(a5 + 32);
    do
      v76 = __ldaxr((unsigned int *)a7);
    while (__stlxr(v76 + 1, (unsigned int *)a7));
    a5 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)a5 = off_1E34D7910;
    *(_QWORD *)(a5 + 8) = a7;
    v77 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v78 = *((_QWORD *)v15 + 17);
      if (v78)
        LODWORD(v78) = *(_DWORD *)(v78 + 108);
      v79 = "shared";
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v15;
      if ((_DWORD)v11 == 1)
        v79 = "service";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v78;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v79;
      _os_log_impl(&dword_196BCC000, v77, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::establishRemoteWorkerContext: Started (workerType=%{public}s)", buf, 0x1Cu);
    }
    {
      WebKit::liveProcessesLRU(void)::processes = 0u;
      unk_1ECE73890 = 0u;
    }
    v14 = WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, (uint64_t)v15);
    a3 = (WebKit::WebsiteDataStore *)v11;
    v80 = (_DWORD)v11 == 1;
    if ((_DWORD)v11 == 1)
      v11 = 800;
    else
      v11 = 880;
    if (v80)
      v81 = (char *)v15 + 800;
    else
      v81 = (char *)v15 + 880;
    v82 = *(_QWORD *)(*((_QWORD *)v15 + 64) + 8);
    if (v82)
      v83 = v82 - 16;
    else
      v83 = 0;
    if (!v81[72])
    {
LABEL_171:
      __break(1u);
LABEL_172:
      WebKit::processPools(void)::processPools = 0;
      *(_QWORD *)&dword_1ECE73860 = 0;
      *((_BYTE *)v15 + 2152) = 1;
      continue;
    }
    break;
  }
  v84 = *(_QWORD *)(*(_QWORD *)(v83 + 184) + 32);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v15 + 2, (uint64_t)v15);
  v85 = (unsigned int *)*((_QWORD *)v15 + 1);
  if (v85)
  {
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 + 1, v85));
  }
  v87 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v87 = 2587;
  *(_QWORD *)(v87 + 8) = 0;
  *(_QWORD *)(v87 + 528) = v87 + 16;
  *(_QWORD *)(v87 + 536) = v87 + 16;
  *(_OWORD *)(v87 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v87 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v87);
  v110 = (IPC::Encoder *)v87;
  *IPC::Encoder::grow((IPC::Encoder *)v87, 1uLL, 1) = (char)a3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v87, 8uLL, 8) = v84;
  v88 = *(_QWORD *)((char *)v15 + v11);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v87, 8uLL, 8) = v88;
  v89 = *((_QWORD *)v81 + 1);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v87, 8uLL, 8) = v89;
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>((IPC::Encoder *)v87, v103);
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>((IPC::Encoder *)v87, v103 + 24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v87, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>((IPC::Encoder *)v87, (uint64_t)v111);
  v90 = *((_QWORD *)v81 + 2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v87, 8uLL, 8) = v90;
  IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v87, (uint64_t)(v81 + 24));
  v91 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v91 = &off_1E34D7E48;
  *(_QWORD *)(v91 + 8) = v15;
  *(_QWORD *)(v91 + 16) = v85;
  *(_BYTE *)(v91 + 24) = (_BYTE)a3;
  *(_QWORD *)(v91 + 32) = a5;
  v92 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)buf = v91;
  *(_QWORD *)&buf[8] = v92;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)v15, &v110, 0, (uint64_t)buf, 1);
  if (buf[16])
  {
    v94 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v94)
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  }
  v95 = v110;
  v110 = 0;
  if (v95)
  {
    IPC::Encoder::~Encoder(v95, v93);
    WTF::fastFree(v96, v97);
  }
  if (*(_QWORD *)(v9 + 168))
    WebKit::WebProcessProxy::setRemoteWorkerUserAgent((uint64_t)v15, (const WTF::String *)(v9 + 168));
  do
  {
    v98 = __ldaxr((unsigned int *)a7);
    v99 = v98 - 1;
  }
  while (__stlxr(v99, (unsigned int *)a7));
  if (!v99)
  {
    atomic_store(1u, (unsigned int *)a7);
    *(_QWORD *)buf = a7;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf);
  }
  if (v105)
    CFRelease(*(CFTypeRef *)(v105 + 8));
  if (v104)
    CFRelease(*(CFTypeRef *)(v104 + 8));
  if (v106)
    CFRelease(*(CFTypeRef *)(v106 + 8));
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v15 + 4);
  CFRelease(*(CFTypeRef *)(v9 + 8));
  if (v107)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v107 + 16));
  if (v108)
    CFRelease(*(CFTypeRef *)(v108 + 8));
}

uint64_t WebKit::WebProcessProxy::setRemoteWorkerUserAgent(uint64_t this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = this;
  if (*(_BYTE *)(this + 872))
  {
    v4 = (uint64_t *)a2;
    this = WebKit::AuxiliaryProcessProxy::send<Messages::WebSWContextManagerConnection::SetUserAgent>(this, &v4, 0, 0);
  }
  if (*(_BYTE *)(v3 + 952))
  {
    v4 = (uint64_t *)a2;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebSharedWorkerContextManagerConnection::SetUserAgent>(v3, &v4, 0, 0);
  }
  return this;
}

WTF::StringImpl *WebKit::WebProcessPool::didReceiveInvalidMessage(WTF::StringImpl *result)
{
  void (*v1)(uint64_t);
  unsigned int v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WebKit *v5;
  WTF::StringImpl *v6;
  WebKit *v7;

  v1 = (void (*)(uint64_t))WebKit::s_invalidMessageCallback;
  if (WebKit::s_invalidMessageCallback)
  {
    if (result >= 0xE98)
      v2 = 3736;
    else
      v2 = result;
    WTF::String::String((WTF::String *)&v6, (&IPC::Detail::messageDescriptions)[3 * v2]);
    API::String::create(&v6, &v7);
    if (v7)
      v3 = *((_QWORD *)v7 + 1);
    else
      v3 = 0;
    v1(v3);
    v5 = v7;
    v7 = 0;
    if (v5)
      CFRelease(*((CFTypeRef *)v5 + 1));
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if ((unsigned int *)a2 != a1)
  {
    v4 = a1[3];
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
        v4 = a1[3];
      }
    }
    else
    {
      a1[3] = v5;
      v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      v6 = a1[3];
    }
    else
    {
      v6 = 0;
    }
    memcpy((void *)(*(_QWORD *)a1 + 8 * v6), (const void *)(*(_QWORD *)a2 + 8 * v6), *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 12) - (*(_QWORD *)a2 + 8 * v6));
    a1[3] = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::EnsureAutomationSessionProxy>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2586;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::enableProcessTermination(WebKit::WebProcessPool *this)
{
  NSObject *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v10[12];
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v10 = 134217984;
    *(_QWORD *)&v10[4] = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::enableProcessTermination:", v10, 0xCu);
  }
  *((_BYTE *)this + 504) = 1;
  WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v10, (uint64_t)this + 72);
  if (v11)
  {
    v4 = *(_QWORD **)v10;
    v5 = *(_QWORD *)v10 + 8 * v11;
    do
    {
      v6 = *v4;
      v7 = (unsigned int *)(*v4 + 16);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      if (*((_BYTE *)this + 504) && !*(_BYTE *)(*((_QWORD *)this + 6) + 87))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
      }
      else if (!v6)
      {
        goto LABEL_13;
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
LABEL_13:
      ++v4;
    }
    while (v4 != (_QWORD *)v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v3);
}

void WebKit::WebProcessPool::disableProcessTermination(WebKit::WebProcessPool *this)
{
  NSObject *v2;
  int v3;
  WebKit::WebProcessPool *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 504))
  {
    v2 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 134217984;
      v4 = this;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::disableProcessTermination:", (uint8_t *)&v3, 0xCu);
    }
    *((_BYTE *)this + 504) = 0;
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::StartMemorySampler>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  char v12;
  IPC::Encoder *v13;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2651;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v13 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode((IPC::Encoder *)v4, *(const char ****)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, *(uint64_t **)(a2 + 8));
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  LOBYTE(v11) = 0;
  v12 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v13, 0, (uint64_t)&v11, 1);
  if (v12)
  {
    v7 = v11;
    v11 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void WebKit::WebProcessProxy::disableRemoteWorkers(uint64_t a1, char a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  IPC::Encoder *v26;
  _BYTE buf[12];
  __int16 v28;
  int v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if ((a2 & 2) != 0)
  {
    v4 = *(unsigned __int8 *)(a1 + 952);
    if (*(_BYTE *)(a1 + 952))
    {
      v5 = qword_1ECE71C68;
      if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(a1 + 136);
        if (v6)
          LODWORD(v6) = *(_DWORD *)(v6 + 108);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a1;
        v28 = 1024;
        v29 = v6;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::disableWorkers: Disabling shared workers", buf, 0x12u);
      }
      buf[0] = 0;
      v30 = 0;
      std::__optional_storage_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>>(a1 + 880, buf);
      std::__optional_destruct_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v7);
      v4 = 1;
    }
  }
  else
  {
    v4 = 0;
  }
  if ((a2 & 1) != 0 && *(_BYTE *)(a1 + 872))
  {
    v8 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 136);
      if (v9)
        LODWORD(v9) = *(_DWORD *)(v9 + 108);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a1;
      v28 = 1024;
      v29 = v9;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::disableWorkers: Disabling service workers", buf, 0x12u);
      if (!*(_BYTE *)(a1 + 872))
        __break(1u);
    }
    IPC::MessageReceiverMap::removeMessageReceiver(a1 + 152, 0x2Cu, *(_QWORD *)(a1 + 808));
    buf[0] = 0;
    v30 = 0;
    std::__optional_storage_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>>(a1 + 800, buf);
    std::__optional_destruct_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v10);
  }
  else if (!v4)
  {
    return;
  }
  WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
  if (!*(_BYTE *)(a1 + 952) && !*(_BYTE *)(a1 + 872))
  {
    v11 = *(_QWORD *)(a1 + 512);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        v13 = v12 - 16;
      else
        v13 = 0;
    }
    else
    {
      v13 = 0;
    }
    CFRetain(*(CFTypeRef *)(v13 + 8));
    {
      WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
      *(_QWORD *)algn_1ECE73828 = 0;
    }
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, (_QWORD *)a1);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  if ((a2 & 2) != 0)
  {
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 2774;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v26 = (IPC::Encoder *)v14;
    buf[0] = 0;
    BYTE2(v29) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, 0, (uint64_t)buf, 1);
    if (BYTE2(v29))
    {
      v16 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
  }
  if ((a2 & 1) != 0)
  {
    v20 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v20 = 2693;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 528) = v20 + 16;
    *(_QWORD *)(v20 + 536) = v20 + 16;
    *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v20 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
    v26 = (IPC::Encoder *)v20;
    buf[0] = 0;
    BYTE2(v29) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, 0, (uint64_t)buf, 1);
    if (BYTE2(v29))
    {
      v22 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v21);
      WTF::fastFree(v24, v25);
    }
  }
  WebKit::WebProcessProxy::maybeShutDown((WebKit::WebProcessProxy *)a1);
}

uint64_t WebKit::WebProcessPool::processStoppedUsingGamepads(WebKit::WebProcessPool *this, WebKit::WebProcessProxy *a2)
{
  _QWORD **v4;
  BOOL isEmptyIgnoringNullReferences;
  uint64_t result;

  v4 = (_QWORD **)((char *)this + 664);
  isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 83);
  result = WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)v4, a2);
  if (!isEmptyIgnoringNullReferences)
  {
    result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v4);
    if ((_DWORD)result)
    {
      {
        WebKit::UIGamepadProvider::UIGamepadProvider((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider);
      }
      return WebKit::UIGamepadProvider::processPoolStoppedUsingGamepads((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider, this);
    }
  }
  return result;
}

uint64_t WebKit::WebProcessPool::userContentControllerIdentifierForRemoteWorkers(WebKit::WebProcessPool *this)
{
  WebKit::WebUserContentControllerProxy *v2;
  WebKit::WebUserContentControllerProxy *v3;
  uint64_t v4;

  v2 = (WebKit::WebUserContentControllerProxy *)*((_QWORD *)this + 20);
  if (!v2)
  {
    v3 = (WebKit::WebUserContentControllerProxy *)API::Object::newObject(0x70uLL, 104);
    v2 = WebKit::WebUserContentControllerProxy::WebUserContentControllerProxy(v3);
    v4 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v2;
    if (v4)
    {
      CFRelease(*(CFTypeRef *)(v4 + 8));
      v2 = (WebKit::WebUserContentControllerProxy *)*((_QWORD *)this + 20);
    }
  }
  return *((_QWORD *)v2 + 4);
}

unsigned int *WebKit::WebProcessPool::createWebPage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, API::PageConfiguration **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v7;
  API::PageConfiguration *v8;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  API::PageConfiguration *v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  WebKit::WebUserContentControllerProxy *v23;
  WebKit::WebPageProxy *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::IOSApplication *BoolValueForKey;
  char v48;
  uint64_t v49;
  const WTF::StringImpl *v50;
  uint64_t v51;
  _BOOL4 v52;
  WebKit::WebProcessCache *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v59;
  unsigned int v60;
  _BOOL4 Load;
  NSObject *v62;
  _BOOL4 v63;
  WebKit::WebsiteDataStore *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  WebKit::WebsiteDataStore *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WebKit::WebsiteDataStore *v71;
  WebKit::WebsiteDataStore *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  int v84;
  void *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  CFTypeRef *v102;
  char v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[2];
  char v110;
  IPC::Encoder *v111;
  _OWORD buf[3];
  uint64_t v113;

  v7 = a4;
  v113 = *MEMORY[0x1E0C80C00];
  v8 = *a3;
  if (!*((_QWORD *)*a3 + 16))
  {
    v10 = *(_QWORD *)(a1 + 184);
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v11 = *((_QWORD *)v8 + 16);
    *((_QWORD *)v8 + 16) = v10;
    v7 = a4;
    if (v11)
      CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  v12 = API::PageConfiguration::lockdownModeEnabled(*a3);
  v13 = *a3;
  v14 = *((_QWORD *)*a3 + 17);
  if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    v16 = (CFTypeRef *)(v15 - 16);
    CFRetain(*(CFTypeRef *)(v15 - 8));
    v13 = *a3;
    v17 = *((_QWORD *)*a3 + 18);
    if (v17)
    {
      v103 = 0;
LABEL_9:
      v18 = (unsigned int *)(v17 + 16);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v18);
      v20 = *((_QWORD *)*a3 + 18);
      if (v20)
      {
        v21 = (unsigned int *)(v20 + 16);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 + 1, v21));
      }
      goto LABEL_14;
    }
    if (*(_BYTE *)(v15 + 713))
    {
      v103 = 0;
    }
    else
    {
      if (WebKit::WebPageProxy::hasSameGPUAndNetworkProcessPreferencesAs((WebKit::WebPreferences ***)(v15 - 16), (WebKit::WebPreferences **)v13))
      {
        v20 = WebKit::WebPageProxy::ensureRunningProcess((WebKit::WebPageProxy *)v16);
        v59 = (unsigned int *)(v20 + 16);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 + 1, v59));
        v103 = 0;
        goto LABEL_14;
      }
      v103 = 0;
      v13 = *a3;
    }
  }
  else
  {
    v16 = 0;
    v17 = *((_QWORD *)v13 + 18);
    v103 = 1;
    if (v17)
      goto LABEL_9;
  }
  Load = API::PageConfiguration::delaysWebProcessLaunchUntilFirstLoad(v13);
  v62 = qword_1ECE71C68;
  v63 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
  if (Load)
  {
    if (v63)
    {
      LODWORD(buf[0]) = 134217984;
      *(_QWORD *)((char *)buf + 4) = a1;
      _os_log_impl(&dword_196BCC000, v62, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::createWebPage: delaying WebProcess launch until first load", (uint8_t *)buf, 0xCu);
    }
    v64 = API::PageConfiguration::websiteDataStore(*a3);
    v65 = WebKit::WebProcessPool::dummyProcessProxy(a1, *((_QWORD *)v64 + 3));
    if (v65)
    {
      v20 = v65;
      v66 = (unsigned int *)(v65 + 16);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 + 1, v66));
      goto LABEL_14;
    }
    v71 = API::PageConfiguration::websiteDataStore(*a3);
    CFRetain(*((CFTypeRef *)v71 + 1));
    v20 = WTF::fastMalloc((WTF *)0x478);
    WebKit::WebProcessProxy::WebProcessProxy(v20, a1, (uint64_t)v71, 0, 0, v12);
    CFRelease(*((CFTypeRef *)v71 + 1));
    v72 = API::PageConfiguration::websiteDataStore(*a3);
    v74 = (uint64_t *)(a1 + 96);
    v73 = *(_QWORD *)(a1 + 96);
    v75 = *((_QWORD *)v72 + 3);
    if (v73
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand((uint64_t *)(a1 + 96)),
          (v73 = *v74) != 0))
    {
      v76 = *(_DWORD *)(v73 - 8);
    }
    else
    {
      v76 = 0;
    }
    v77 = (v75 + ~(v75 << 32)) ^ ((unint64_t)(v75 + ~(v75 << 32)) >> 22);
    v78 = 9 * ((v77 + ~(v77 << 13)) ^ ((v77 + ~(v77 << 13)) >> 8));
    v79 = (v78 ^ (v78 >> 15)) + ~((v78 ^ (v78 >> 15)) << 27);
    v80 = v76 & ((v79 >> 31) ^ v79);
    v81 = (_QWORD *)(v73 + 16 * v80);
    v82 = *v81;
    if (*v81)
    {
      v83 = 0;
      v84 = 1;
      while (v82 != v75)
      {
        if (v82 == -1)
          v83 = v81;
        v80 = (v80 + v84) & v76;
        v81 = (_QWORD *)(v73 + 16 * v80);
        v82 = *v81;
        ++v84;
        if (!*v81)
        {
          if (v83)
          {
            *v83 = 0;
            v83[1] = 0;
            --*(_DWORD *)(*v74 - 16);
            v81 = v83;
          }
          goto LABEL_97;
        }
      }
      goto LABEL_112;
    }
LABEL_97:
    *v81 = v75;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v20 + 8), v20);
    v86 = *(unsigned int **)(v20 + 8);
    if (v86)
    {
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 + 1, v86));
    }
    v88 = (unsigned int *)v81[1];
    v81[1] = v86;
    if (v88)
    {
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        atomic_store(1u, v88);
        WTF::fastFree((WTF *)v88, v85);
      }
    }
    v91 = *v74;
    if (*v74)
      v92 = *(_DWORD *)(v91 - 12) + 1;
    else
      v92 = 1;
    *(_DWORD *)(v91 - 12) = v92;
    v93 = *v74;
    if (*v74)
      v94 = *(_DWORD *)(v93 - 12);
    else
      v94 = 0;
    v95 = (*(_DWORD *)(v93 - 16) + v94);
    v96 = *(unsigned int *)(v93 - 4);
    if (v96 > 0x400)
    {
      if (v96 > 2 * v95)
      {
LABEL_112:
        v97 = (uint64_t *)(a1 + 72);
        v98 = *(unsigned int *)(a1 + 84);
        if ((_DWORD)v98 == *(_DWORD *)(a1 + 80))
        {
          WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebProcessProxy&>((uint64_t)v97, v20);
        }
        else
        {
          v99 = *v97;
          v100 = (unsigned int *)(v20 + 16);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 + 1, v100));
          *(_QWORD *)(v99 + 8 * v98) = v20;
          ++*(_DWORD *)(a1 + 84);
        }
        goto LABEL_14;
      }
    }
    else if (3 * v96 > 4 * v95)
    {
      goto LABEL_112;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand((uint64_t *)(a1 + 96));
    goto LABEL_112;
  }
  if (v63)
  {
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = a1;
    _os_log_impl(&dword_196BCC000, v62, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::createWebPage: Not delaying WebProcess launch", (uint8_t *)buf, 0xCu);
  }
  v68 = API::PageConfiguration::websiteDataStore(*a3);
  CFRetain(*((CFTypeRef *)v68 + 1));
  v104 = 0;
  WebKit::WebProcessPool::processForRegistrableDomain(a1, (uint64_t)v68, &v104, v12, (WebKit::WebPreferences **)*a3, (unsigned int **)buf);
  v20 = *(_QWORD *)&buf[0];
  v70 = v104;
  v104 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v69);
    else
      *(_DWORD *)v70 -= 2;
  }
  CFRelease(*((CFTypeRef *)v68 + 1));
LABEL_14:
  v23 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebUserContentControllerProxy,&API::PageConfiguration::Data::createWebUserContentControllerProxy>::get((WebKit::WebUserContentControllerProxy **)*a3 + 4);
  CFRetain(*((CFTypeRef *)v23 + 1));
  *(_BYTE *)(v20 + 1024) = *((_BYTE *)*a3 + 200);
  v24 = (WebKit::WebPageProxy *)API::Object::newObject(0x5B0uLL, 86);
  *v7 = WebKit::WebPageProxy::WebPageProxy((uint64_t)v24, a2, v20, (uint64_t *)a3);
  WebKit::WebProcessProxy::addExistingWebPage(v20, v24, 1);
  if (!*(_BYTE *)(a1 + 152))
  {
    std::optional<WebKit::WebPreferencesStore>::operator=[abi:sn180100]<WebKit::WebPreferencesStore const&,void>(a1 + 104, (uint64_t *)(*((_QWORD *)v24 + 28) + 40));
    {
      WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
      *(_QWORD *)algn_1ECE73828 = 0;
    }
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, buf);
    v102 = v16;
    if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
    {
      v25 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
      v26 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v25;
    }
    else
    {
      v26 = 0;
      v25 = 0;
    }
    v104 = (WTF::StringImpl *)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
    v105 = v26;
    v106 = v26;
    v107 = v26;
    v108 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v25;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v104);
    v27 = *((_QWORD *)&buf[0] + 1);
    if (*((_QWORD *)&buf[0] + 1) != v105)
    {
      while (1)
      {
        v28 = *(_QWORD *)(*(_QWORD *)v27 + 8);
        v29 = (unsigned int *)(v28 + 16);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 + 1, v29));
        if (!*(_BYTE *)(a1 + 152))
          break;
        if (*(_BYTE *)(v28 + 872))
        {
          v31 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v31 = 2718;
          *(_QWORD *)(v31 + 8) = 0;
          *(_QWORD *)(v31 + 528) = v31 + 16;
          *(_QWORD *)(v31 + 536) = v31 + 16;
          *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v31 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
          v111 = (IPC::Encoder *)v31;
          IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>((IPC::Encoder *)v31, a1 + 104);
          IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>((IPC::Encoder *)v31, a1 + 128);
          LOBYTE(v109[0]) = 0;
          v110 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v28, &v111, 0, (uint64_t)v109, 1);
          if (v110)
          {
            v33 = v109[0];
            v109[0] = 0;
            if (v33)
              (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          }
          v34 = v111;
          v111 = 0;
          if (v34)
          {
            IPC::Encoder::~Encoder(v34, v32);
            WTF::fastFree(v35, v36);
          }
        }
        if (*(_BYTE *)(v28 + 952))
        {
          v37 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v37 = 2781;
          *(_QWORD *)(v37 + 8) = 0;
          *(_QWORD *)(v37 + 528) = v37 + 16;
          *(_QWORD *)(v37 + 536) = v37 + 16;
          *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v37 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
          v111 = (IPC::Encoder *)v37;
          IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>((IPC::Encoder *)v37, a1 + 104);
          IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>((IPC::Encoder *)v37, a1 + 128);
          LOBYTE(v109[0]) = 0;
          v110 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v28, &v111, 0, (uint64_t)v109, 1);
          if (v110)
          {
            v39 = v109[0];
            v109[0] = 0;
            if (v39)
              (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          }
          v40 = v111;
          v111 = 0;
          if (v40)
          {
            IPC::Encoder::~Encoder(v40, v38);
            WTF::fastFree(v41, v42);
          }
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v28 + 16));
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
        v27 = *((_QWORD *)&buf[0] + 1);
        if (*((_QWORD *)&buf[0] + 1) == v105)
          goto LABEL_37;
      }
      __break(1u);
LABEL_63:
      __break(0xC471u);
      JUMPOUT(0x1973A0724);
    }
LABEL_37:
    v16 = v102;
  }
  CFRetain(*((CFTypeRef *)v23 + 1));
  v44 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v23;
  if (v44)
    CFRelease(*(CFTypeRef *)(v44 + 8));
  v45 = *v7;
  v46 = *(_QWORD *)(*v7 + 224);
  {
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (WebCore::IOSApplication *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v46 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, v43);
  v48 = (char)BoolValueForKey;
  if (WebCore::IOSApplication::isFirefox(BoolValueForKey))
    v48 &= WTF::linkedOnOrAfterSDKWithBehavior();
  v49 = *(_QWORD *)(a1 + 48);
  CFRetain(*(CFTypeRef *)(v49 + 8));
  v51 = 84;
  if (!*(_BYTE *)(v49 + 85))
    v51 = 86;
  v52 = *(_BYTE *)(v49 + v51) != 0;
  *(_BYTE *)(v49 + 86) = v48;
  if (v52 != (*(_BYTE *)(v49 + v51) != 0))
  {
    v53 = *(WebKit::WebProcessCache **)(a1 + 768);
    ++*(_DWORD *)v53;
    WebKit::WebProcessCache::updateCapacity(v53, *(WebKit::WebProcessPool **)(a1 + 48));
    if (!*(_DWORD *)v53)
      goto LABEL_63;
    --*(_DWORD *)v53;
  }
  v54 = *(_QWORD *)(v45 + 224);
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v54 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v50))WebKit::WebProcessPool::ensureGPUProcess((WebKit::WebProcessPool *)a1);
  {
    if (WebKit::singleton(void)::singleton)
    {
      v55 = *(_QWORD *)(WebKit::singleton(void)::singleton + 8);
      if (v55)
      {
        v56 = (unsigned int *)(v55 + 16);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 + 1, v56));
        WebKit::GPUProcessProxy::updatePreferences(v55, (WebKit::WebProcessProxy *)v20);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v56);
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  CFRelease(*(CFTypeRef *)(v49 + 8));
  CFRelease(*((CFTypeRef *)v23 + 1));
  if ((v103 & 1) == 0)
    CFRelease(v16[1]);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v20 + 16));
}

uint64_t std::optional<WebKit::WebPreferencesStore>::operator=[abi:sn180100]<WebKit::WebPreferencesStore const&,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = a1 + 24;
  v4 = a2 + 3;
  if (*(_BYTE *)(a1 + 48))
  {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(a1, a2);
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(v3, v4);
  }
  else
  {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable(a1, a2);
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable(v3, v4);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t *WTF::HashMap<PAL::SessionID,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v24;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  v20 = *a3;
  *a3 = 0;
  v21 = v16[1];
  *v16 = v11;
  v16[1] = v20;
  if (v21)
    result = (uint64_t *)WTF::fastFree((WTF *)(v21 - 16), a2);
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_24:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v25 = *v6;
      if (*v6)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_24;
  }
  v30 = v25 + 16 * v28;
  v29 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

BOOL WebKit::WebProcessPool::hasPagesUsingWebsiteDataStore(WebKit::WebProcessPool *this, WebKit::WebsiteDataStore *a2)
{
  WTF::RunLoop *v4;
  uint64_t v6;

  v4 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0 || (unint64_t)(*((_QWORD *)a2 + 3) - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1973A0DD8);
  }
  v6 = *((_QWORD *)a2 + 3);
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 90, &v6);
}

void WebKit::WebProcessPool::download(WebKit::WebProcessPool *this@<X0>, WebKit::WebsiteDataStore *a2@<X1>, WebKit::WebPageProxy *a3@<X2>, const WebCore::ResourceRequest *a4@<X3>, const WTF::String *a5@<X4>, const WebKit::DownloadProxy **a6@<X8>)
{
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const void *v14;
  char v15;
  __int16 v16;
  _BYTE v17[192];
  const void *v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[5];
  char v22;
  int v23;
  __int16 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v17);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v19 = 0u;
  v20 = 0u;
  memset(v21, 0, 25);
  WebKit::WebProcessPool::createDownloadProxy(this, a2, a4, a3, (const WebKit::FrameInfoData *)&v16, (uint64_t)a6);
  v13 = (WTF::StringImpl *)v21[0];
  v21[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (DWORD2(v20) != -1)
    ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_8[DWORD2(v20)])(&v15, &v19);
  DWORD2(v20) = -1;
  v14 = v18;
  v18 = 0;
  if (v14)
    CFRelease(v14);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v17);
  WebKit::WebsiteDataStore::download(a2, *a6, a5);
}

_DWORD *WebKit::WebProcessPool::createDownloadProxy@<X0>(WebKit::WebProcessPool *this@<X0>, WebKit::WebsiteDataStore *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, WebKit::WebPageProxy *a4@<X3>, const WebKit::FrameInfoData *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  _DWORD *result;
  _DWORD *v13;

  v11 = *((_QWORD *)this + 38);
  if (v11)
  {
    ++*(_DWORD *)(v11 + 8);
  }
  else
  {
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v11 + 8) = 1;
    *(_QWORD *)v11 = off_1E34D72A8;
  }
  v13 = (_DWORD *)v11;
  WebKit::WebsiteDataStore::createDownloadProxy(a2, (uint64_t *)&v13, a3, (uint64_t)a4, (uint64_t)a5, a6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebKit::WebProcessPool::resumeDownload(WebKit::WebProcessPool *a1@<X0>, WebKit::WebsiteDataStore *a2@<X1>, WebKit::WebPageProxy *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  _BYTE v18[192];
  CFTypeRef v19;
  char v20;
  __int16 v21;
  _BYTE v22[192];
  CFTypeRef cf;
  __int128 v24;
  __int128 v25;
  _QWORD v26[5];
  char v27;
  int v28;
  __int16 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v18);
  v21 = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v22);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, 25);
  WebKit::WebProcessPool::createDownloadProxy(a1, a2, (const WebCore::ResourceRequest *)v18, a3, (const WebKit::FrameInfoData *)&v21, (uint64_t)a7);
  v15 = (WTF::StringImpl *)v26[0];
  v26[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (DWORD2(v25) != -1)
    ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_8[DWORD2(v25)])(&v20, &v24);
  DWORD2(v25) = -1;
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v22);
  v17 = v19;
  v19 = 0;
  if (v17)
    CFRelease(v17);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
  WebKit::WebsiteDataStore::resumeDownload(a2, *a7, a4, a5, a6);
}

void WebKit::WebProcessPool::postMessageToInjectedBundle(WebKit::WebProcessPool *this, const WTF::String *a2, API::Object *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  CFTypeRef *v11;
  CFTypeRef *v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  CFTypeRef *v15;
  uint64_t *v16[2];

  v3 = *((unsigned int *)this + 21);
  if ((_DWORD)v3)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 9);
    v7 = &v6[v3];
    do
    {
      v8 = *v6;
      v9 = (unsigned int *)(*v6 + 16);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v16[0] = (uint64_t *)&off_1E34D7358;
      WebKit::UserData::transform(a3, (uint64_t)v16, (WebKit **)&v14);
      v11 = v14;
      if (v14)
        CFRetain(v14[1]);
      v15 = v11;
      v16[0] = (uint64_t *)a2;
      v16[1] = (uint64_t *)&v15;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::HandleInjectedBundleMessage>(v8, v16, 0, 0);
      v12 = v15;
      v15 = 0;
      if (v12)
        CFRelease(v12[1]);
      v13 = v14;
      v14 = 0;
      if (v13)
        CFRelease(v13[1]);
      if (v8)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
      ++v6;
    }
    while (v6 != v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::HandleInjectedBundleMessage>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2596;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

unsigned int *WebKit::WebProcessPool::handleMemoryPressureWarning(_QWORD *a1)
{
  NSObject *v2;
  WebKit::WebBackForwardCache *v3;
  _DWORD *v4;
  unsigned int *result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71578;
  if (os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 134217984;
    v10 = a1;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::handleMemoryPressureWarning:", (uint8_t *)&v9, 0xCu);
  }
  v3 = (WebKit::WebBackForwardCache *)a1[95];
  ++*(_DWORD *)v3;
  WebKit::WebBackForwardCache::clear(v3);
  if (!*(_DWORD *)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1973A14ACLL);
  }
  --*(_DWORD *)v3;
  v4 = (_DWORD *)a1[96];
  ++*v4;
  result = (unsigned int *)WebKit::WebProcessCache::clear((uint64_t)v4);
  if (!*v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1973A14CCLL);
  }
  --*v4;
  v6 = a1[11];
  if (v6)
  {
    result = *(unsigned int **)(v6 + 8);
    if (result)
    {
      v7 = result + 4;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      WebKit::WebProcessProxy::shutDown((WebKit::WebProcessProxy *)result);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
    }
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::activePagesOriginsInWebProcessForTesting(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[2];

  v4 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v4)
  {
    v6 = *(uint64_t **)(a1 + 72);
    v7 = &v6[v4];
    while (1)
    {
      v8 = *v6;
      v9 = (unsigned int *)(*v6 + 16);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(v8 + 136);
      if (v11)
        LODWORD(v11) = *(_DWORD *)(v11 + 108);
      if ((_DWORD)v11 == a2)
        break;
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
      if (++v6 == v7)
        goto LABEL_9;
    }
    LOBYTE(v15[0]) = 0;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v8, (uint64_t)v15, a3, 0, 0, 1);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  else
  {
LABEL_9:
    v15[0] = 0;
    v15[1] = 0;
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 16))(v12, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v13);
  }
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetAlwaysUsesComplexTextCodePath>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetAlwaysUsesComplexTextCodePath>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDisableFontSubpixelAntialiasingForTesting>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDisableFontSubpixelAntialiasingForTesting>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsEmptyDocument>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsEmptyDocument>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsSecure>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsSecure>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::RegisterURLSchemeAsSecure>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 426;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 423;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDomainRelaxationForbiddenForURLScheme>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDomainRelaxationForbiddenForURLScheme>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WebKit *WebKit::WebProcessPool::unregisterGlobalURLSchemeAsHavingCustomProtocolHandlers(WebKit *this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  WTF::ASCIICaseInsensitiveHash **v14;

  if (!*(_QWORD *)this)
    return this;
  v2 = (WTF::ASCIICaseInsensitiveHash **)this;
  WebKit::InitializeWebKit2(this);
  {
    WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set = 0;
  }
  v3 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set, v2);
  v4 = v3;
  if (WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set)
  {
    v5 = WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set
       + 8 * *(unsigned int *)(WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set - 4);
    if ((WTF::StringImpl **)v5 == v3)
      goto LABEL_11;
LABEL_9:
    if ((WTF::StringImpl **)v5 != v3)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(&WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set, v3);
    goto LABEL_11;
  }
  if (v3)
  {
    v5 = 0;
    goto LABEL_9;
  }
LABEL_11:
  WebKit::NetworkProcessProxy::allNetworkProcesses(v4, (uint64_t)&v12);
  if (v13)
  {
    v7 = v12;
    v8 = &v12[v13];
    do
    {
      v9 = *v7;
      v10 = (unsigned int *)(*v7 + 16);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v14 = v2;
      WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::UnregisterScheme>(v9, (uint64_t **)&v14, 0, 0);
      if (v9)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
      ++v7;
    }
    while (v7 != v8);
  }
  return (WebKit *)WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v6);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsCachePartitioned>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsCachePartitioned>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsCanDisplayOnlyIfCanRequest>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsCanDisplayOnlyIfCanRequest>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::setCacheModel(uint64_t a1, char a2)
{
  void *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  char v12;
  uint64_t *v13;
  int v14;

  WebKit::WebProcessPool::updateBackForwardCacheCapacity(a1);
  LOBYTE(v13) = a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetCacheModel>(a1, (char *)&v13, 0);
  WebKit::NetworkProcessProxy::allNetworkProcesses(v4, (uint64_t)&v13);
  if (v14)
  {
    v6 = v13;
    v7 = &v13[v14];
    do
    {
      v8 = *v6;
      v9 = (unsigned int *)(*v6 + 16);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v12 = a2;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetCacheModel>(v8, &v12, 0, 0);
      if (v8)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
      ++v6;
    }
    while (v6 != v7);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetCacheModel>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetCacheModel>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetCacheModel>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 444;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::setCacheModelSynchronouslyForTesting(uint64_t a1, char a2)
{
  void *v3;
  WTF::ApproximateTime *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  double v11;
  char v13;
  _BYTE v14[16];
  int v15;
  uint64_t *v16;
  int v17;
  char v18;

  WebKit::WebProcessPool::updateBackForwardCacheCapacity(a1);
  v4 = (WTF::ApproximateTime *)WebKit::NetworkProcessProxy::allNetworkProcesses(v3, (uint64_t)&v16);
  if (v17)
  {
    v6 = v16;
    v7 = &v16[v17];
    do
    {
      v8 = *v6;
      v9 = (unsigned int *)(*v6 + 16);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v13 = a2;
      WTF::ApproximateTime::now(v4);
      v4 = (WTF::ApproximateTime *)WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::SetCacheModelSynchronouslyForTesting>(v8, &v13, 0, 0, (uint64_t)v14, v11 + 1.0);
      if (v15 != -1)
        v4 = (WTF::ApproximateTime *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess36SetCacheModelSynchronouslyForTestingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v15])(&v18, v14);
      v15 = -1;
      if (v8)
        v4 = (WTF::ApproximateTime *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
      ++v6;
    }
    while (v6 != v7);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::SetCacheModelSynchronouslyForTesting>@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;

  if (*(_QWORD *)(result + 144))
  {
    v11 = result;
    kdebug_trace();
    IPC::Connection::sendSync<Messages::NetworkProcess::SetCacheModelSynchronouslyForTesting>(*(_QWORD *)(v11 + 144), a2, a3, a4, a5, a6);
    return kdebug_trace();
  }
  else
  {
    *(_BYTE *)a5 = 1;
    *(_DWORD *)(a5 + 16) = 1;
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDefaultRequestTimeoutInterval>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDefaultRequestTimeoutInterval>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void WebKit::WebProcessPool::startMemorySampler(WebKit::WebProcessPool *this, double a2)
{
  WebKit::WebMemorySampler *v4;
  WTF::WallTime *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WebKit::SandboxExtensionImpl *v13;
  const char **v14;
  WTF *v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebKit::SandboxExtensionImpl **v22;
  uint64_t v23;
  double v24;
  WTF::StringImpl *v25;
  WebKit::SandboxExtensionImpl *v26;
  unint64_t v27;

  *((_BYTE *)this + 440) = 1;
  *((double *)this + 56) = a2;
  v4 = WebKit::WebMemorySampler::singleton(this);
  v5 = WebKit::WebMemorySampler::start(v4, a2);
  v6 = *((unsigned int *)this + 21);
  if (!(_DWORD)v6)
    return;
  v7 = (uint64_t *)*((_QWORD *)this + 9);
  v8 = 8 * v6;
  while (1)
  {
    v9 = *(_QWORD *)(*v7 + 136);
    if ((!v9 || !*(_BYTE *)(v9 + 104)) && !*(_QWORD *)(*v7 + 144))
      goto LABEL_23;
    v26 = 0;
    WTF::WallTime::now(v5);
    v11 = (unint64_t)v10;
    if (v10 <= 0.0)
      v11 = 0;
    if (v10 >= 1.84467441e19)
      v11 = -1;
    v22 = (WebKit::SandboxExtensionImpl **)"WebProcess";
    v23 = 11;
    v27 = v11;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>((uint64_t *)&v22, &v27, &v25);
    if (!v25)
      break;
    WebKit::SandboxExtension::createHandleForTemporaryFile(*((const char ***)v25 + 1), (const char **)(*((unsigned int *)v25 + 1) | ((unint64_t)((*((_DWORD *)v25 + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v22);
    if (LOBYTE(v24))
    {
      v13 = (WebKit::SandboxExtensionImpl *)v22;
      v22 = 0;
      v14 = (const char **)v26;
      v26 = v13;
      if (v14)
      {
        WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v14);
        WTF::fastFree(v15, v16);
        if (!LOBYTE(v24))
          goto LABEL_26;
      }
      v17 = (WTF::StringImpl *)v23;
      v23 = 0;
      v18 = v25;
      v25 = v17;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v12);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    std::__optional_destruct_base<std::pair<WebKit::SandboxExtensionHandle,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::SandboxExtensionHandle *)&v22, v12);
    v19 = *v7;
    v22 = &v26;
    v23 = (uint64_t)&v25;
    v24 = a2;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::StartMemorySampler>(v19, (uint64_t)&v22);
    v21 = v25;
    v25 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v26);
LABEL_23:
    ++v7;
    v8 -= 8;
    if (!v8)
      return;
  }
  __break(0xC471u);
LABEL_26:
  __break(1u);
}

uint64_t WebKit::WebProcessPool::stopMemorySampler(WebKit::WebProcessPool *this)
{
  WebKit::WebMemorySampler *v2;
  int *v3;
  char v5;

  *((_BYTE *)this + 440) = 0;
  v2 = WebKit::WebMemorySampler::singleton(this);
  WebKit::WebMemorySampler::stop((uint64_t)v2, v3);
  v5 = 0;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::StopMemorySampler>((uint64_t)this, &v5, 0);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::StopMemorySampler>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::StopMemorySampler>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void WebKit::WebProcessPool::setAutomationSession(WebKit::WebProcessPool *a1, uint64_t *a2)
{
  CFTypeRef *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;

  v4 = (CFTypeRef *)*((_QWORD *)a1 + 40);
  if (v4)
  {
    CFRetain(v4[1]);
    WebKit::WebAutomationSession::setProcessPool((WebKit::WebAutomationSession *)v4, 0);
    CFRelease(v4[1]);
  }
  v5 = *a2;
  *a2 = 0;
  v6 = *((_QWORD *)a1 + 40);
  *((_QWORD *)a1 + 40) = v5;
  if (v6)
  {
    CFRelease(*(CFTypeRef *)(v6 + 8));
    v5 = *((_QWORD *)a1 + 40);
  }
  if (v5)
  {
    CFRetain(*(CFTypeRef *)(v5 + 8));
    Inspector::RemoteControllableTarget::init(*(Inspector::RemoteControllableTarget **)(v5 + 312));
    WebKit::WebAutomationSession::setProcessPool((WebKit::WebAutomationSession *)v5, a1);
    v7 = *(WTF::StringImpl **)(v5 + 64);
    if (v7)
      *(_DWORD *)v7 += 2;
    v10 = v7;
    v11 = &v10;
    WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::EnsureAutomationSessionProxy>((uint64_t)a1, (uint64_t **)&v11, 0);
    v9 = v10;
    v10 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  else
  {
    LOBYTE(v11) = 0;
    WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::DestroyAutomationSessionProxy>((uint64_t)a1, (char *)&v11, 0);
  }
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::EnsureAutomationSessionProxy>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::EnsureAutomationSessionProxy>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::DestroyAutomationSessionProxy>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DestroyAutomationSessionProxy>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::handleMessage(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef **a4)
{
  unsigned int *result;
  WebKit::WebProcessProxy *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  CFTypeRef *v12;
  WebKit *v13;
  WebKit *v14;

  result = (unsigned int *)WebKit::webProcessProxyFromConnection(a2, a1 + 72);
  if (result)
  {
    v8 = (WebKit::WebProcessProxy *)result;
    v9 = result + 4;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(_QWORD *)(a1 + 200);
    v12 = *a4;
    if (v12)
      CFRetain(v12[1]);
    WebKit::WebProcessProxy::transformHandlesToObjects(v8, (API::Object *)v12, &v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t, WebKit *))(*(_QWORD *)v11 + 16))(v11, a1, a3, v14);
    v13 = v14;
    v14 = 0;
    if (v13)
      CFRelease(*((CFTypeRef *)v13 + 1));
    if (v12)
      CFRelease(v12[1]);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  return result;
}

uint64_t WebKit::webProcessProxyFromConnection(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD *)a2 + 8 * v2;
  while (1)
  {
    v6 = *v4;
    v7 = (unsigned int *)(*v4 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(_QWORD *)(v6 + 144);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
    if (v9 == a1)
      break;
    if (++v4 == (_QWORD *)v5)
      return 0;
  }
  return v6;
}

void WebKit::WebProcessPool::handleSynchronousMessage(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef **a4, uint64_t *a5)
{
  uint64_t v9;
  WebKit::WebProcessProxy *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  CFTypeRef *v14;
  WebKit *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  WebKit *v20;
  uint64_t v21;
  WebKit *v22;
  _QWORD *v23;
  WebKit *v24;

  v9 = WebKit::webProcessProxyFromConnection(a2, a1 + 72);
  if (v9)
  {
    v10 = (WebKit::WebProcessProxy *)v9;
    v11 = (unsigned int *)(v9 + 16);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = *(_QWORD *)(a1 + 200);
    v14 = *a4;
    if (v14)
      CFRetain(v14[1]);
    WebKit::WebProcessProxy::transformHandlesToObjects(v10, (API::Object *)v14, &v24);
    v15 = v24;
    do
      v16 = __ldaxr(v11);
    while (__stlxr(v16 + 1, v11));
    v17 = *a5;
    *a5 = 0;
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v18 = &off_1E34D7998;
    v18[1] = v10;
    v18[2] = v17;
    v23 = v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t, WebKit *, _QWORD **))(*(_QWORD *)v13 + 24))(v13, a1, a3, v15, &v23);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    v20 = v24;
    v24 = 0;
    if (v20)
      CFRelease(*((CFTypeRef *)v20 + 1));
    if (v14)
      CFRelease(v14[1]);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
  }
  else
  {
    v24 = 0;
    v21 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WebKit **))(*(_QWORD *)v21 + 16))(v21, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v24;
    v24 = 0;
    if (v22)
      CFRelease(*((CFTypeRef *)v22 + 1));
  }
}

unsigned int *WebKit::WebProcessPool::startedUsingGamepads(WebKit::WebProcessPool *this, IPC::Connection *a2)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  _BOOL4 isEmptyIgnoringNullReferences;
  void *v8;
  _BYTE *v9;
  _BYTE v10[24];

  result = (unsigned int *)WebKit::webProcessProxyFromConnection((uint64_t)a2, (uint64_t)this + 72);
  if (result)
  {
    v4 = result;
    v5 = result + 4;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 83);
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)this + 664, v4, (uint64_t)v10);
    if (isEmptyIgnoringNullReferences)
    {
      {
        WebKit::UIGamepadProvider::UIGamepadProvider((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider);
      }
      WebKit::UIGamepadProvider::processPoolStartedUsingGamepads((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider, this);
    }
    {
      WebKit::UIGamepadProvider::UIGamepadProvider((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider);
    }
    WebKit::UIGamepadProvider::snapshotGamepads((uint64_t)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider, (uint64_t)v10);
    v9 = v10;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetInitialGamepads>((uint64_t)v4, (uint64_t *)&v9, 0, 0);
    WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v8);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetInitialGamepads>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2637;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::WebProcessPool::stoppedUsingGamepads(WebKit::WebProcessPool *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WebKit::WebProcessProxy *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *a3;
  *a3 = 0;
  v8 = v4;
  v5 = (WebKit::WebProcessProxy *)WebKit::webProcessProxyFromConnection(a2, (uint64_t)a1 + 72);
  if (v5)
  {
    v6 = (unsigned int *)((char *)v5 + 16);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    WebKit::WebProcessPool::processStoppedUsingGamepads(a1, v5);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
  }
  WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope((WTF::CompletionHandlerCallingScope *)&v8);
}

uint64_t WebKit::WebProcessPool::playGamepadEffect(WebCore::GamepadProvider *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  v11 = WebCore::GamepadProvider::singleton(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, a2, a3, a4, a5, a6);
}

uint64_t WebKit::WebProcessPool::stopGamepadEffects(WebCore::GamepadProvider *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = WebCore::GamepadProvider::singleton(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, a2, a3, a4);
}

_QWORD *WebKit::WebProcessPool::gamepadConnected(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t i;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  int v29;
  WTF *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  IPC::Encoder *v42;

  v6 = a1 + 664;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 664), &v38);
  v7 = *(_QWORD *)(a1 + 664);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = v7 + 8 * v8;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v33 = v6;
  v34 = v9;
  v35 = v9;
  v36 = v9;
  v37 = v7 + 8 * v8;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v33);
  for (i = v39; v39 != v34; i = v39)
  {
    v12 = *(_QWORD *)(*(_QWORD *)i + 8);
    v13 = (unsigned int *)(v12 + 16);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    WebKit::GamepadData::GamepadData((uint64_t)&v25, *(_DWORD *)a2, (_DWORD **)(a2 + 8), (_DWORD **)(a2 + 16), (uint64_t *)(a2 + 24), (uint64_t *)(a2 + 40), (unsigned __int8 **)(a2 + 64), *(double *)(a2 + 56));
    v15 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v15 = 2590;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 528) = v15 + 16;
    *(_QWORD *)(v15 + 536) = v15 + 16;
    *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v15 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
    v42 = (IPC::Encoder *)v15;
    IPC::ArgumentCoder<WebKit::GamepadData,void>::encode((IPC::Encoder *)v15, &v25);
    *IPC::Encoder::grow((IPC::Encoder *)v15, 1uLL, 1) = a3;
    LOBYTE(v40) = 0;
    v41 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v42, 0, (uint64_t)&v40, 1);
    if (v41)
    {
      v17 = v40;
      v40 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    v18 = v42;
    v42 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v16);
      WTF::fastFree(v19, v20);
    }
    if (v32)
      WTF::fastFree((WTF *)(v32 - 16), v16);
    v21 = v30;
    if (v30)
    {
      v30 = 0;
      v31 = 0;
      WTF::fastFree(v21, v16);
    }
    v22 = v28;
    if (v28)
    {
      v28 = 0;
      v29 = 0;
      WTF::fastFree(v22, v16);
    }
    v23 = v27;
    v27 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v26;
    v26 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v16);
        if (!v12)
          goto LABEL_27;
LABEL_26:
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
        goto LABEL_27;
      }
      *(_DWORD *)v24 -= 2;
    }
    if (v12)
      goto LABEL_26;
LABEL_27:
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v38);
  }
  return result;
}

_QWORD *WebKit::WebProcessPool::gamepadDisconnected(WebKit::WebProcessPool *this, const WebKit::UIGamepad *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t i;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (char *)this + 664;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 83, &v20);
  v5 = *((_QWORD *)this + 83);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v15 = v4;
  v16 = v7;
  v17 = v7;
  v18 = v7;
  v19 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v15);
  for (i = v21; v21 != v16; i = v21)
  {
    v10 = *(_QWORD *)(*(_QWORD *)i + 8);
    v11 = (unsigned int *)(v10 + 16);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = *(_DWORD *)a2;
    v14 = &v13;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GamepadDisconnected>(v10, &v14, 0, 0);
    if (v10)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v20);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GamepadDisconnected>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2591;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = **a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::GarbageCollectJavaScriptObjects>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GarbageCollectJavaScriptObjects>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetJavaScriptGarbageCollectorTimerEnabled>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetJavaScriptGarbageCollectorTimerEnabled>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetMemoryCacheDisabled>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMemoryCacheDisabled>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcessPool::setFontAllowList(WebKit::WebProcessPool *this, API::Array *a2)
{
  char *v4;
  WTF::StringImpl *result;
  unint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = (char *)this + 408;
  result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 102, 0);
  if (a2 && *((_DWORD *)a2 + 7))
  {
    v6 = 0;
    do
    {
      result = (WTF::StringImpl *)API::Array::at<API::String>((uint64_t)a2, v6);
      if (result)
      {
        WTF::String::isolatedCopy();
        v8 = *((unsigned int *)this + 105);
        if ((_DWORD)v8 == *((_DWORD *)this + 104))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)v4, (unint64_t)&v11);
        }
        else
        {
          v9 = *((_QWORD *)this + 51);
          v10 = v11;
          v11 = 0;
          *(_QWORD *)(v9 + 8 * v8) = v10;
          *((_DWORD *)this + 105) = v8 + 1;
        }
        result = v11;
        v11 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
          else
            *(_DWORD *)result -= 2;
        }
      }
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 7));
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcessPool::processForNavigation(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, _BYTE *a8, WebKit::WebsiteDataStore **a9, uint64_t *a10)
{
  uint64_t *v16;
  WebKit::WebsiteDataStore **v17;
  WebCore::ResourceRequestBase *v18;
  const WTF::URL *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  WebKit::WebsiteDataStore *v55;
  const WTF::URL *v56;
  WTF::StringImpl *v57;
  const WTF::StringImpl *v58;
  uint64_t v59;
  unsigned int *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  const WTF::StringImpl *v74;
  unsigned int *v75;
  NSObject *v76;
  unint64_t v77;
  const WTF::StringImpl *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  unsigned int v83;
  _QWORD *v84;
  const WTF::StringImpl *v85;
  _QWORD *v86;
  int v87;
  WTF::StringImpl *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *result;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  WTF::URL *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  const void *v126;
  uint64_t v127;
  int BoolValueForKey;
  BOOL v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  int v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  _BOOL4 hasSameGPUAndNetworkProcessPreferencesAs;
  uint64_t v150;
  _DWORD *v151;
  uint64_t v152;
  uint64_t v153;
  const void *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  NSObject *v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned __int8 *v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  WTF **v183;
  const WTF::StringImpl *v184;
  const WTF::StringImpl *v185;
  int v186;
  _QWORD *v187;
  unsigned int *v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t *v194;
  WebKit::WebsiteDataStore **v195;
  unsigned int *v196;
  unsigned int *v197;
  _BYTE *v198;
  _QWORD *v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  WTF::URL *v205;
  int v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  _BYTE v214[24];
  uint64_t v215;
  _BYTE buf[24];
  __int128 v217;
  uint64_t v218;

  v17 = a9;
  v16 = a10;
  v218 = *MEMORY[0x1E0C80C00];
  v18 = (WebCore::ResourceRequestBase *)(a4 + 232);
  v19 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a4 + 232));
  WebKit::Site::Site(&v209, v19);
  v21 = *(_QWORD *)(a2 + 224);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v208 = a3;
  v198 = a8;
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v21 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v20)|| !v210|| !*((_DWORD *)v210 + 1)|| (MEMORY[0x19AEABBCC]() & 1) != 0)
  {
    goto LABEL_57;
  }
  if (*a8)
  {
    v24 = v209;
    if (v209)
      *(_DWORD *)v209 += 2;
    *(_QWORD *)v214 = v24;
    v25 = v210;
    if (v210)
      *(_DWORD *)v210 += 2;
    *(_QWORD *)&v214[8] = v25;
  }
  else
  {
    WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 968), &v212);
    MEMORY[0x19AEABB0C](buf, &v212, 0);
    WebKit::Site::Site((WTF::StringImpl **)v214, (const WTF::URL *)buf);
    v26 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v22);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v212;
    v212 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v22);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  v28 = *(_QWORD *)(a3 + 24);
  if ((!v28
     || (v29 = *(_QWORD *)(v28 + 8)) == 0
     || *(_QWORD *)(v29 + 264) != a3 && ((v30 = *(_QWORD *)(v29 + 1104)) == 0 || *(_QWORD *)(v30 + 72) != a3))
    && WTF::equal(v209, *(const WTF::StringImpl **)v214, v23)
    && WTF::equal(v210, *(const WTF::StringImpl **)&v214[8], v31))
  {
    v32 = a7;
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 280) + 32) + 16);
    v34 = (unsigned int *)(v33 + 16);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    if (!*(_BYTE *)(v33 + 712))
    {
      v203 = a6;
      do
        v112 = __ldaxr(v34);
      while (__stlxr(v112 + 1, v34));
      *(_QWORD *)buf = v33;
      v113 = *a10;
      *a10 = 0;
      (*(void (**)(uint64_t, _BYTE *, _QWORD, const char *, uint64_t))(*(_QWORD *)v113 + 16))(v113, buf, 0, "Found process for the same site as main frame", 46);
      (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
      v114 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v114)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v114 + 16));
      v42 = 1;
      a6 = v203;
LABEL_46:
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v34);
      a7 = v32;
      goto LABEL_47;
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v33 + 16));
    a7 = v32;
  }
  if (*(WebKit::WebsiteDataStore **)(a2 + 264) == *a9)
  {
    v36 = WebKit::BrowsingContextGroup::processForSite(*(WebKit::BrowsingContextGroup **)(a2 + 1344), &v209);
    if (v36)
    {
      v201 = a6;
      v37 = a1;
      v38 = a2;
      v39 = a7;
      v40 = *(_QWORD *)(v36 + 16);
      if (!v40)
      {
        v42 = 0;
        a2 = v38;
        a1 = v37;
        a3 = v208;
        a6 = v201;
        goto LABEL_47;
      }
      v34 = (unsigned int *)(v40 + 16);
      do
        v41 = __ldaxr(v34);
      while (__stlxr(v41 + 1, v34));
      if (*(_BYTE *)(v40 + 712))
      {
        v42 = 0;
      }
      else
      {
        v43 = WebKit::WebsiteDataStore::networkProcess(*a9);
        v44 = *a10;
        *a10 = 0;
        do
          v45 = __ldaxr(v34);
        while (__stlxr(v45 + 1, v34));
        v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v46 = &off_1E34D7A10;
        v46[1] = v44;
        v46[2] = v40;
        *(_QWORD *)buf = v46;
        WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v43, v40, (WTF::ASCIICaseInsensitiveHash **)&v214[8], 0, (uint64_t *)buf);
        v47 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        v42 = 1;
      }
      v32 = v39;
      a2 = v38;
      a1 = v37;
      a3 = v208;
      a6 = v201;
      v16 = a10;
      goto LABEL_46;
    }
  }
  v42 = 0;
LABEL_47:
  v48 = *(WTF::StringImpl **)&v214[8];
  *(_QWORD *)&v214[8] = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v22);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = *(WTF::StringImpl **)v214;
  *(_QWORD *)v214 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::destroy(v49, v22);
      if (v42)
        goto LABEL_147;
      goto LABEL_57;
    }
    *(_DWORD *)v49 -= 2;
  }
  if (v42)
    goto LABEL_147;
LABEL_57:
  v50 = v16;
  v207 = a7;
  v51 = *(unsigned int **)(*(_QWORD *)(a3 + 32) + 16);
  v52 = v51 + 4;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 + 1, v52));
  do
    v54 = __ldaxr(v52);
  while (__stlxr(v54 + 1, v52));
  v55 = *a9;
  CFRetain(*((CFTypeRef *)*a9 + 1));
  v56 = (const WTF::URL *)WebCore::ResourceRequestBase::url(v18);
  WebKit::Site::Site(&v212, v56);
  v59 = a1[6];
  if (*(_BYTE *)(v59 + 96))
  {
    v60 = 0;
    *(_QWORD *)v214 = v51;
    *(_QWORD *)&v214[8] = 0;
    v61 = "Single WebProcess mode is enabled";
    v62 = 34;
LABEL_62:
    *(_QWORD *)&v214[16] = v61;
    v215 = v62;
    goto LABEL_77;
  }
  v202 = a6;
  v63 = *(_QWORD *)(a2 + 48);
  v64 = *(_QWORD *)(v63 + 136);
  if (v64)
  {
    v65 = !*(_QWORD *)(v64 + 8) || *(_BYTE *)(a2 + 1051) == 0;
    if (!v65)
    {
      v60 = 0;
      *(_QWORD *)v214 = v51;
      *(_QWORD *)&v214[8] = 0;
      v68 = "Always using related page process";
      v69 = 34;
LABEL_75:
      *(_QWORD *)&v214[16] = v68;
      v215 = v69;
      goto LABEL_76;
    }
  }
  if ((*((_BYTE *)v51 + 779) != 0) != v207)
  {
    CFRetain(*(CFTypeRef *)(v63 + 8));
    WebKit::WebProcessPool::processForRegistrableDomain((uint64_t)a1, (uint64_t)v55, &v213, v207, (WebKit::WebPreferences **)v63, (unsigned int **)buf);
    CFRelease(*(CFTypeRef *)(v63 + 8));
    *(_QWORD *)v214 = *(_QWORD *)buf;
    *(_QWORD *)&v214[8] = 0;
    v66 = "Process swap due to Lockdown mode change";
LABEL_73:
    v67 = 41;
LABEL_74:
    *(_QWORD *)&v214[16] = v66;
    v215 = v67;
    v60 = v51;
LABEL_76:
    LOBYTE(a6) = v202;
    goto LABEL_77;
  }
  if (v202)
  {
    CFRetain(*(CFTypeRef *)(v63 + 8));
    WebKit::WebProcessPool::processForRegistrableDomain((uint64_t)a1, (uint64_t)v55, &v213, v207, (WebKit::WebPreferences **)v63, (unsigned int **)buf);
    CFRelease(*(CFTypeRef *)(v63 + 8));
    *(_QWORD *)v214 = *(_QWORD *)buf;
    *(_QWORD *)&v214[8] = 0;
    v66 = "Process swap was requested by the client";
    goto LABEL_73;
  }
  v111 = 84;
  if (!*(_BYTE *)(v59 + 85))
    v111 = 86;
  if (!*(_BYTE *)(v59 + v111))
  {
    v60 = 0;
    *(_QWORD *)v214 = v51;
    *(_QWORD *)&v214[8] = 0;
    v68 = "Feature is disabled";
    v69 = 20;
    goto LABEL_75;
  }
  LOBYTE(a6) = 0;
  if (a1[40])
  {
    v60 = 0;
    *(_QWORD *)v214 = v51;
    *(_QWORD *)&v214[8] = 0;
    v61 = "An automation session is active";
    v62 = 32;
    goto LABEL_62;
  }
  if ((*(_BYTE *)(a4 + 738) & 1) == 0)
  {
    v115 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a4 + 32));
    v116 = (unsigned __int8 *)WTF::URL::protocol(v115);
    v118 = v117;
    v119 = (unsigned __int8 *)WTF::URL::protocol(v56);
    if (!WTF::operator==(v116, v118, v119, v120))
    {
      WTF::URL::protocol(v56);
      if ((v121 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      if (*(_QWORD *)buf)
      {
        v123 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a2 + 1056), (WTF::StringImpl **)buf, v58);
        v124 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v124)
        {
          if (*(_DWORD *)v124 == 2)
            WTF::StringImpl::destroy(v124, v122);
          else
            *(_DWORD *)v124 -= 2;
        }
        if (v123)
        {
          v125 = *(_QWORD *)(a2 + 48);
          CFRetain(*(CFTypeRef *)(v125 + 8));
          WebKit::WebProcessPool::processForRegistrableDomain((uint64_t)a1, (uint64_t)v55, &v213, v207, (WebKit::WebPreferences **)v125, (unsigned int **)buf);
          v126 = *(const void **)(v125 + 8);
          v17 = a9;
          CFRelease(v126);
          *(_QWORD *)v214 = *(_QWORD *)buf;
          *(_QWORD *)&v214[8] = 0;
          v66 = "Redirect to a different scheme for which the app registered a custom handler";
          v67 = 77;
          goto LABEL_74;
        }
      }
    }
  }
  v127 = *(_QWORD *)(a2 + 224);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v127 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v58);
  LOBYTE(a6) = 0;
  if (!*((_BYTE *)v51 + 776) && (BoolValueForKey & 1) == 0)
  {
    WebKit::WebProcessPool::tryPrewarmWithDomainInformation(a1[98], (WebKit::WebProcessProxy *)v51, &v213);
    v60 = 0;
    *(_QWORD *)v214 = v51;
    *(_QWORD *)&v214[8] = 0;
    v61 = "Process has not yet committed any provisional loads";
    v62 = 52;
    goto LABEL_62;
  }
  v197 = v51;
  if (*(_BYTE *)(a4 + 856))
    v129 = *(_QWORD *)(a4 + 496) == 0;
  else
    v129 = 0;
  v130 = v129;
  if (*(_BYTE *)(a4 + 859))
  {
    v131 = *(_QWORD *)(a2 + 288) ? v130 : 1;
    if (((v131 | BoolValueForKey) & 1) == 0)
    {
      v132 = BoolValueForKey;
      v65 = WebKit::WebsiteDataStore::openerTypeForDomain(*(WebKit::WebsiteDataStore **)(a2 + 264), &v213) == 1;
      BoolValueForKey = v132;
      if (!v65)
      {
        v60 = 0;
        v51 = v197;
        *(_QWORD *)v214 = v197;
        *(_QWORD *)&v214[8] = 0;
        v61 = "Browsing context been opened by DOM without 'noopener'";
        v62 = 55;
        goto LABEL_62;
      }
    }
  }
  if (*(_BYTE *)(a4 + 858))
  {
    v133 = BoolValueForKey;
    v134 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(*(_QWORD *)(a2 + 32) + 1952)) | BoolValueForKey;
    BoolValueForKey = v133;
    if (((v134 | v130) & 1) == 0)
    {
      v60 = 0;
      v51 = v197;
      *(_QWORD *)v214 = v197;
      *(_QWORD *)&v214[8] = 0;
      v61 = "Browsing context has opened other windows";
      v62 = 42;
      goto LABEL_62;
    }
  }
  v192 = BoolValueForKey;
  v135 = *(_QWORD *)(a4 + 464);
  v136 = v198;
  if (v135)
  {
    CFRetain(*(CFTypeRef *)(v135 + 8));
    v137 = *(_QWORD *)(v135 + 416);
    if (v137)
    {
      v138 = *(_QWORD *)(v137 + 32);
      if (v138)
      {
        v139 = *(_DWORD *)(v138 + 16);
        *(_DWORD *)(v138 + 16) = v139 + 1;
        v140 = *(_QWORD *)(v138 + 40);
        v141 = *(_QWORD *)(v140 + 136);
        if (v141 && *(_BYTE *)(v141 + 104) || *(_QWORD *)(v140 + 144))
        {
          v142 = (unsigned int *)(v140 + 16);
          v51 = v197;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 + 1, v142));
          *(_QWORD *)v214 = v140;
          *(_QWORD *)&v214[8] = v138;
          *(_QWORD *)&v214[16] = "Using target back/forward item's process and suspended page";
          v215 = 60;
          v144 = *(_DWORD *)(v138 + 16);
          if (!v144)
          {
            __break(0xC471u);
            JUMPOUT(0x1973A46E8);
          }
          *(_DWORD *)(v138 + 16) = v144 - 1;
LABEL_227:
          CFRelease(*(CFTypeRef *)(v135 + 8));
LABEL_228:
          v60 = v51;
          goto LABEL_77;
        }
        if (v139 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1973A476CLL);
        }
        *(_DWORD *)(v138 + 16) = v139;
      }
    }
    *(_QWORD *)buf = *(_QWORD *)(v135 + 392);
    {
      WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    }
    v145 = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, buf);
    v51 = v197;
    if (v145)
    {
      v146 = v145 + 4;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 + 1, v146));
      v148 = *((_QWORD *)v145 + 17);
      if (v148 && *(_BYTE *)(v148 + 104) || *((_QWORD *)v145 + 18))
      {
        v193 = (uint64_t)v145;
        hasSameGPUAndNetworkProcessPreferencesAs = WebKit::WebProcessProxy::hasSameGPUAndNetworkProcessPreferencesAs((WebKit::WebProcessProxy *)v145, *(WebKit::WebPreferences ***)(a2 + 48));
        v150 = v193;
        if (hasSameGPUAndNetworkProcessPreferencesAs)
        {
          LOBYTE(a6) = 0;
          if (*(_BYTE *)(v193 + 712))
          {
            v151 = (_DWORD *)a1[96];
            ++*v151;
            WebKit::WebProcessCache::removeProcess((uint64_t)v151, v193, 0);
            if (!*v151)
            {
              __break(0xC471u);
              JUMPOUT(0x1973A478CLL);
            }
            --*v151;
            v150 = v193;
          }
          *(_QWORD *)v214 = v150;
          *(_QWORD *)&v214[8] = 0;
          *(_QWORD *)&v214[16] = "Using target back/forward item's process";
          v215 = 41;
          goto LABEL_227;
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v146);
    }
    CFRelease(*(CFTypeRef *)(v135 + 8));
    LOBYTE(a6) = 0;
    v136 = v198;
  }
  if (*(_BYTE *)(a2 + 1048))
  {
    if (!*(_BYTE *)(a4 + 859) && !*(_BYTE *)(a2 + 1049))
    {
      v152 = *((_QWORD *)v136 + 30);
      if ((!v152 || !*(_DWORD *)(v152 + 4)) && (WTF::URL::protocolIs() & 1) == 0)
      {
        v153 = *(_QWORD *)(a2 + 48);
        CFRetain(*(CFTypeRef *)(v153 + 8));
        WebKit::WebProcessPool::processForRegistrableDomain((uint64_t)a1, (uint64_t)v55, &v213, v207, (WebKit::WebPreferences **)v153, (unsigned int **)buf);
        v154 = *(const void **)(v153 + 8);
        v17 = a9;
        CFRelease(v154);
        *(_QWORD *)v214 = *(_QWORD *)buf;
        *(_QWORD *)&v214[8] = 0;
        *(_QWORD *)&v214[16] = "Process swap because this is a first navigation in a DOM popup without opener";
        v215 = 78;
        v51 = v197;
        goto LABEL_228;
      }
    }
  }
  v51 = v197;
  if (*(_BYTE *)(a4 + 857))
  {
    v60 = 0;
    *(_QWORD *)v214 = v197;
    *(_QWORD *)&v214[8] = 0;
    v61 = "The treatAsSameOriginNavigation flag is set";
    v62 = 44;
    goto LABEL_62;
  }
  *(_QWORD *)buf = 0;
  WTF::URL::invalidate((WTF::URL *)buf);
  if (!*(_BYTE *)(a2 + 1048)
    || *(_BYTE *)(a2 + 1049)
    || (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(a4 + 864)) & 1) != 0)
  {
    WTF::String::operator=((WTF::StringImpl **)buf, (WTF::StringImpl *)a5);
    *(_OWORD *)&buf[8] = *(_OWORD *)(a5 + 8);
    v217 = *(_OWORD *)(a5 + 24);
  }
  else
  {
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(a4 + 864));
    MEMORY[0x19AEABB0C](v214, &v211, 0);
    WTF::URL::operator=((uint64_t)buf, (WTF::StringImpl *)v214);
    v155 = *(WTF::StringImpl **)v214;
    *(_QWORD *)v214 = 0;
    if (v155)
    {
      if (*(_DWORD *)v155 == 2)
        WTF::StringImpl::destroy(v155, v57);
      else
        *(_DWORD *)v155 -= 2;
    }
    v156 = v211;
    v211 = 0;
    if (v156)
    {
      if (*(_DWORD *)v156 == 2)
        WTF::StringImpl::destroy(v156, v57);
      else
        *(_DWORD *)v156 -= 2;
    }
    v51 = v197;
  }
  if (!*(_QWORD *)buf || !*(_DWORD *)(*(_QWORD *)buf + 4))
  {
    v157 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 136);
    if (v157)
    {
      v158 = *(_QWORD *)(v157 + 8);
      if (v158)
      {
        WTF::URL::URL((uint64_t)v214, (WTF::StringImpl **)(*(_QWORD *)(v158 + 16) + 1000));
        WTF::URL::operator=((uint64_t)buf, (WTF::StringImpl *)v214);
        v160 = *(WTF::StringImpl **)v214;
        *(_QWORD *)v214 = 0;
        if (v160)
        {
          if (*(_DWORD *)v160 == 2)
            WTF::StringImpl::destroy(v160, v159);
          else
            *(_DWORD *)v160 -= 2;
        }
        v161 = qword_1ECE71668;
        if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
        {
          v162 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 136);
          if (v162)
          {
            v163 = *(_QWORD *)(v162 + 8);
            if (v163)
              v162 = v163 - 16;
            else
              v162 = 0;
          }
          *(_DWORD *)v214 = 134218240;
          *(_QWORD *)&v214[4] = a1;
          *(_WORD *)&v214[12] = 2048;
          *(_QWORD *)&v214[14] = v162;
          _os_log_impl(&dword_196BCC000, v161, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processForNavigationInternal: Using related page's URL as source URL for process swap decision (page=%p)", v214, 0x16u);
          v51 = v197;
        }
      }
    }
  }
  v200 = (uint64_t)a1;
  if (!*(_BYTE *)(a1[6] + 88) && (buf[8] & 2) == 0)
  {
    v164 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)buf);
    v166 = v165;
    v167 = (unsigned __int8 *)WTF::URL::protocol(v56);
    if (((!WTF::operator==(v164, v166, v167, v168) | v192) & 1) == 0)
    {
      v60 = 0;
      *(_QWORD *)v214 = v51;
      *(_QWORD *)&v214[8] = 0;
      v171 = "Navigation within the same non-HTTP(s) protocol";
      v172 = 48;
LABEL_283:
      *(_QWORD *)&v214[16] = v171;
      v215 = v172;
      goto LABEL_284;
    }
  }
  if ((buf[8] & 1) == 0 || (*((_BYTE *)v56 + 8) & 1) == 0 || !*(_QWORD *)buf || !*(_DWORD *)(*(_QWORD *)buf + 4))
    goto LABEL_282;
  v169 = a2;
  v194 = v50;
  if (!v192)
  {
    v173 = WTF::URL::host((WTF::URL *)buf);
    v51 = v197;
    if (!WebCore::RegistrableDomain::matches(&v213, v173, v174))
      goto LABEL_276;
    goto LABEL_282;
  }
  v51 = v197;
  if ((WebKit::Site::matches((WebKit::Site *)&v212, (const WTF::URL *)buf) & 1) != 0)
  {
LABEL_282:
    v60 = 0;
    *(_QWORD *)v214 = v51;
    *(_QWORD *)&v214[8] = 0;
    v171 = "Navigation is same-site";
    v172 = 24;
    goto LABEL_283;
  }
LABEL_276:
  if (WTF::URL::protocolIs())
  {
    if (*((_BYTE *)v197 + 704))
    {
      v170 = (_DWORD *)*((_QWORD *)v197 + 87);
      if (v170)
        *v170 += 2;
    }
    else
    {
      v170 = 0;
    }
    *(_QWORD *)v214 = v170;
    v176 = WTF::URL::host(v56);
    v178 = WebCore::RegistrableDomain::matches(v214, v176, v177);
    v179 = *(WTF::StringImpl **)v214;
    *(_QWORD *)v214 = 0;
    if (v179)
    {
      if (*(_DWORD *)v179 == 2)
        WTF::StringImpl::destroy(v179, v57);
      else
        *(_DWORD *)v179 -= 2;
    }
    if (v178 || (v192 & 1) == 0 && !*((_BYTE *)v197 + 777))
    {
      v60 = 0;
      v51 = v197;
      *(_QWORD *)v214 = v197;
      *(_QWORD *)&v214[8] = 0;
      *(_QWORD *)&v214[16] = "Navigation is treated as same-site";
      v215 = 35;
LABEL_295:
      v50 = v194;
      a2 = v169;
      goto LABEL_284;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v200 + 48) + 87))
  {
    v180 = *(_QWORD *)(v200 + 776);
    if (v180)
    {
      v181 = *(_DWORD *)(v180 - 8);
      v182 = WTF::ASCIICaseInsensitiveHash::hash(v213, v57) & v181;
      v183 = (WTF **)(v180 + 16 * v182);
      if ((WTF::equal(*v183, 0, v184) & 1) == 0)
      {
        v186 = 1;
        while (*v183 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v183, v213, v185) & 1) == 0)
        {
          v182 = ((_DWORD)v182 + v186) & v181;
          v183 = (WTF **)(v180 + 16 * v182);
          ++v186;
          if ((WTF::equal(*v183, 0, v185) & 1) != 0)
            goto LABEL_311;
        }
        v187 = *(_QWORD **)(v180 + 16 * v182 + 8);
        if (v187)
        {
          v188 = (unsigned int *)(v187 + 2);
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 + 1, v188));
          if ((WebKit::WebsiteDataStore *)v187[94] == v55
            && ((v191 = v187[17]) != 0 && *(_BYTE *)(v191 + 104) || v187[18]))
          {
            *(_QWORD *)v214 = v187;
            *(_QWORD *)&v214[8] = 0;
            *(_QWORD *)&v214[16] = "Navigation is cross-site";
            v215 = 25;
            v51 = v197;
            v60 = v197;
            goto LABEL_295;
          }
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v188);
        }
      }
    }
  }
LABEL_311:
  a2 = v169;
  v190 = *(_QWORD *)(v169 + 48);
  CFRetain(*(CFTypeRef *)(v190 + 8));
  WebKit::WebProcessPool::processForRegistrableDomain(v200, (uint64_t)v55, &v213, v207, (WebKit::WebPreferences **)v190, (unsigned int **)&v211);
  CFRelease(*(CFTypeRef *)(v190 + 8));
  *(_QWORD *)v214 = v211;
  *(_QWORD *)&v214[8] = 0;
  *(_QWORD *)&v214[16] = "Navigation is cross-site";
  v215 = 25;
  v51 = v197;
  v60 = v197;
  v50 = v194;
LABEL_284:
  v17 = a9;
  v175 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  a1 = (_QWORD *)v200;
  LOBYTE(a6) = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
      WTF::StringImpl::destroy(v175, v57);
    else
      *(_DWORD *)v175 -= 2;
  }
LABEL_77:
  v70 = v213;
  v213 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v57);
    else
      *(_DWORD *)v70 -= 2;
  }
  v71 = v212;
  v212 = 0;
  if (!v71)
  {
LABEL_84:
    if (!v55)
      goto LABEL_86;
    goto LABEL_85;
  }
  if (*(_DWORD *)v71 != 2)
  {
    *(_DWORD *)v71 -= 2;
    goto LABEL_84;
  }
  WTF::StringImpl::destroy(v71, v57);
  if (v55)
LABEL_85:
    CFRelease(*((CFTypeRef *)v55 + 1));
LABEL_86:
  if (v60)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v60 + 4);
  v72 = v208;
  if ((a6 & 1) != 0)
  {
    v73 = a1[6];
    CFRetain(*(CFTypeRef *)(v73 + 8));
  }
  else
  {
    v75 = *(unsigned int **)v214;
    v73 = a1[6];
    CFRetain(*(CFTypeRef *)(v73 + 8));
    if (v75 != v51 && !*(_BYTE *)(v73 + 90) && !*(_BYTE *)(v73 + 93))
    {
      v76 = qword_1ECE71578;
      if (os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a1;
        _os_log_impl(&dword_196BCC000, v76, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processForNavigation: Automatically turning on process prewarming because the client would benefit from it", buf, 0xCu);
      }
      *(_BYTE *)(v73 + 93) = 1;
    }
  }
  if (!*(_BYTE *)(v73 + 87) || *(unsigned int **)v214 == v51)
    goto LABEL_134;
  v77 = atomic_load(&WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::onceFlag);
  if (v77 != -1)
  {
    *(_QWORD *)buf = &v211;
    v212 = (WTF::StringImpl *)buf;
    std::__call_once(&WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::onceFlag, &v212, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::$_1 &&>>);
  }
  WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, (const WTF::URL *)a5);
  v79 = a1 + 97;
  v196 = v51;
  v199 = a1;
  v80 = a1[97];
  v195 = v17;
  if (v80
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1 + 97),
        (v80 = *v79) != 0))
  {
    v81 = v50;
    v82 = *(_DWORD *)(v80 - 8);
  }
  else
  {
    v81 = v50;
    v82 = 0;
  }
  v205 = (WTF::URL *)a2;
  v83 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)buf, v78) & v82;
  v84 = (_QWORD *)(v80 + 16 * v83);
  if ((WTF::equal((WTF *)*v84, 0, v85) & 1) == 0)
  {
    v86 = 0;
    v87 = 1;
    do
    {
      if (*v84 == -1)
      {
        v86 = v84;
      }
      else if ((WTF::equalIgnoringASCIICase((WTF *)*v84, *(const WTF::StringImpl **)buf, v74) & 1) != 0)
      {
        do
          v93 = __ldaxr(v52);
        while (__stlxr(v93 + 1, v52));
        v94 = v84[1];
        v84[1] = v196;
        v50 = v81;
        a2 = (uint64_t)v205;
        a1 = v199;
        v72 = v208;
        if (v94)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v94 + 16));
        goto LABEL_130;
      }
      v83 = (v83 + v87) & v82;
      v84 = (_QWORD *)(v80 + 16 * v83);
      ++v87;
    }
    while (!WTF::equal((WTF *)*v84, 0, v74));
    if (v86)
    {
      *v86 = 0;
      v86[1] = 0;
      --*(_DWORD *)(*v79 - 16);
      v84 = v86;
    }
  }
  WTF::String::operator=((WTF::StringImpl **)v84, (WTF::StringImpl *)buf);
  v50 = v81;
  v72 = v208;
  do
    v89 = __ldaxr(v52);
  while (__stlxr(v89 + 1, v52));
  v90 = v84[1];
  v84[1] = v196;
  a1 = v199;
  if (v90)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v90 + 16));
  v91 = *v79;
  if (*v79)
    v92 = *(_DWORD *)(v91 - 12) + 1;
  else
    v92 = 1;
  a2 = (uint64_t)v205;
  *(_DWORD *)(v91 - 12) = v92;
  v95 = *v79;
  if (*v79)
    v96 = *(_DWORD *)(v95 - 12);
  else
    v96 = 0;
  v97 = (*(_DWORD *)(v95 - 16) + v96);
  v98 = *(unsigned int *)(v95 - 4);
  if (v98 <= 0x400)
  {
    if (3 * v98 > 4 * v97)
      goto LABEL_130;
    goto LABEL_129;
  }
  if (v98 <= 2 * v97)
LABEL_129:
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v79);
LABEL_130:
  v99 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  v17 = v195;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
      WTF::StringImpl::destroy(v99, v88);
    else
      *(_DWORD *)v99 -= 2;
  }
LABEL_134:
  v100 = *(_QWORD *)(v72 + 24);
  if (v100)
  {
    v101 = *(_QWORD *)(v100 + 8);
    if (v101)
    {
      if (*(_QWORD *)(v101 + 264) == v72)
        goto LABEL_143;
      v102 = *(_QWORD *)(v101 + 1104);
      if (v102)
      {
        if (*(_QWORD *)(v102 + 72) == v72)
          goto LABEL_143;
      }
    }
  }
  v103 = *(_QWORD *)(a2 + 224);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v103 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v74))
  {
LABEL_143:
    WebKit::WebProcessPool::prepareProcessForNavigation((uint64_t)a1, (uint64_t *)v214, a2, *(uint64_t *)&v214[8], *(uint64_t *)&v214[16], v215, &v210, a4, v207, v17, v50, 0);
  }
  else
  {
    v104 = *(_QWORD *)&v214[8];
    v105 = *(_QWORD *)&v214[16];
    v106 = v215;
    v107 = *v50;
    *v50 = 0;
    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v214, v104, v105, v106);
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  }
  CFRelease(*(CFTypeRef *)(v73 + 8));
  v108 = *(_QWORD *)v214;
  *(_QWORD *)v214 = 0;
  if (v108)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v108 + 16));
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v52);
LABEL_147:
  v109 = v210;
  v210 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, v22);
    else
      *(_DWORD *)v109 -= 2;
  }
  result = v209;
  v209 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebKit::WebProcessPool::prepareProcessForNavigation(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::ASCIICaseInsensitiveHash **a7, uint64_t a8, char a9, WebKit::WebsiteDataStore **a10, uint64_t *a11, int a12)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  WebKit::WebsiteDataStore *v22;
  WTF::ASCIICaseInsensitiveHash *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v45;
  uint64_t v46;
  WebKit::WebsiteDataStore *v49;
  uint64_t v50;
  __int128 v51;
  unsigned __int128 v52;
  __int128 v53;
  __int128 v54;
  WebKit::WebsiteDataStore *v55;
  uint64_t v56;
  WTF::ASCIICaseInsensitiveHash *v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  WTF::ASCIICaseInsensitiveHash *v67;

  v17 = *(_QWORD *)(*a2 + 1016);
  if (v17)
  {
    v18 = *(_QWORD **)v17;
    ++*(_QWORD *)(v17 + 8);
    if (v18)
    {
      if (*v18)
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v18 + 16))(*v18, 1);
    }
  }
  v60 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v19 = *a11;
  *a11 = 0;
  *(_QWORD *)&v61 = a1;
  *((_QWORD *)&v61 + 1) = v19;
  CFRetain(*(CFTypeRef *)(a3 + 8));
  *(_QWORD *)&v62 = a3;
  CFRetain(*(CFTypeRef *)(a8 + 8));
  *((_QWORD *)&v62 + 1) = a8;
  v46 = *a2;
  v20 = (unsigned int *)(*a2 + 16);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  *(_QWORD *)&v64 = a5;
  *((_QWORD *)&v64 + 1) = a6;
  v22 = *a10;
  CFRetain(*((CFTypeRef *)*a10 + 1));
  LOBYTE(v66) = a9;
  HIDWORD(v66) = a12;
  v23 = *a7;
  if (*a7)
    *(_DWORD *)v23 += 2;
  v67 = v23;
  v24 = *(_QWORD *)(a8 + 496);
  v49 = v22;
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
      v45 = WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>(v25, "application/x-webarchive");
    else
      v45 = 0;
  }
  else
  {
    v45 = 0;
  }
  v26 = WebKit::WebsiteDataStore::networkProcess(*a10);
  v27 = *a2;
  v28 = *((_QWORD *)&v61 + 1);
  v30 = *((_QWORD *)&v62 + 1);
  v29 = v62;
  v31 = v66;
  v62 = 0u;
  v63 = 0u;
  v32 = v60;
  v33 = v61;
  v50 = v60;
  *(_QWORD *)&v51 = v61;
  v61 = 0u;
  *((_QWORD *)&v51 + 1) = v28;
  v52 = __PAIR128__(v30, v29);
  v34 = v46;
  *(_QWORD *)&v53 = v46;
  *((_QWORD *)&v53 + 1) = v17;
  v54 = v64;
  v65 = 0;
  v55 = v49;
  v56 = v66;
  if (v23)
    *(_DWORD *)v23 += 2;
  v42 = v27;
  v57 = v23;
  v35 = (unsigned int *)a4;
  v43 = v26;
  if (a4)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 8), a4);
    v35 = *(unsigned int **)(a4 + 8);
    if (v35)
    {
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 + 1, v35));
      v32 = v50;
      v28 = *((_QWORD *)&v51 + 1);
      v33 = v51;
      v30 = *((_QWORD *)&v52 + 1);
      v29 = v52;
      v17 = *((_QWORD *)&v53 + 1);
      v34 = v53;
      v31 = v56;
      v49 = v55;
      v23 = v57;
    }
    else
    {
      v34 = v46;
    }
  }
  v58 = v35;
  v37 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v37 = off_1E34D7A38;
  *(_QWORD *)(v37 + 8) = v32;
  *(_QWORD *)(v37 + 16) = v33;
  *(_QWORD *)(v37 + 24) = v28;
  *(_QWORD *)(v37 + 32) = v29;
  *(_QWORD *)(v37 + 40) = v30;
  v51 = 0u;
  v52 = 0u;
  *(_QWORD *)(v37 + 48) = v34;
  *(_QWORD *)(v37 + 56) = v17;
  v53 = 0u;
  *(_OWORD *)(v37 + 64) = v54;
  v55 = 0;
  *(_QWORD *)(v37 + 80) = v49;
  *(_QWORD *)(v37 + 88) = v31;
  if (v23)
    *(_DWORD *)v23 += 2;
  *(_QWORD *)(v37 + 96) = v23;
  *(_QWORD *)(v37 + 104) = v35;
  v59 = v37;
  WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v43, v42, a7, v45, &v59);
  v39 = v59;
  v59 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v58 = 0;
  WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0(&v50, v38);
  return WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0(&v60, v40);
}

_QWORD *WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (WTF::StringImpl *)a1[11];
  a1[11] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[9];
  a1[9] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = a1[6];
  a1[6] = 0;
  if (v5)
  {
    v6 = *(uint64_t **)v5;
    v7 = *(_QWORD *)(v5 + 8) - 1;
    *(_QWORD *)(v5 + 8) = v7;
    if (v6)
    {
      v8 = *v6;
      if (!*v6)
        goto LABEL_14;
      v9 = *(_BYTE *)(v5 + 16);
      *(_BYTE *)(v5 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
      *(_BYTE *)(v5 + 16) = v9;
      if (*(_QWORD *)v5)
        goto LABEL_14;
      v7 = *(_QWORD *)(v5 + 8);
    }
    if (!v7)
      MEMORY[0x19AEB936C](v5, 0x1020C40545B2139);
  }
LABEL_14:
  v10 = a1[5];
  a1[5] = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
  v11 = a1[4];
  a1[4] = 0;
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  v12 = a1[3];
  a1[3] = 0;
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  v13 = a1[2];
  a1[2] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = a1[1];
  a1[1] = 0;
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 + 8));
  return a1;
}

unsigned int *WebKit::WebProcessPool::addMockMediaDevice(WebKit::WebProcessPool *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;

  WebCore::MockRealtimeMediaSourceCenter::addDevice();
  v8 = a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::AddMockMediaDevice>((uint64_t)a1, &v8, 0);
  v4 = WebKit::WebProcessPool::ensureGPUProcess(a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::AddMockMediaDevice>(v4, &v8, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::AddMockMediaDevice>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::AddMockMediaDevice>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::clearMockMediaDevices(WebKit::WebProcessPool *this)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  WebCore::MockRealtimeMediaSourceCenter::setDevices();
  WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v2);
  LOBYTE(v7[0]) = 0;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ClearMockMediaDevices>((uint64_t)this, (char *)v7, 0);
  v3 = WebKit::WebProcessPool::ensureGPUProcess(this);
  v4 = (unsigned int *)(v3 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  LOBYTE(v7[0]) = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::ClearMockMediaDevices>(v3, (uint64_t)v7, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ClearMockMediaDevices>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ClearMockMediaDevices>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::removeMockMediaDevice(WebKit::WebProcessPool *this, const WTF::String *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t *v8;

  WebCore::MockRealtimeMediaSourceCenter::removeDevice(a2, a2);
  v8 = (uint64_t *)a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RemoveMockMediaDevice>((uint64_t)this, &v8, 0);
  v4 = WebKit::WebProcessPool::ensureGPUProcess(this);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = (uint64_t *)a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::RemoveMockMediaDevice>(v4, &v8, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RemoveMockMediaDevice>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RemoveMockMediaDevice>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::setMockMediaDeviceIsEphemeral(WebKit::WebProcessPool *this, const WTF::String *a2, WTF::String *a3)
{
  char v3;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  __int128 v10;

  v3 = (char)a3;
  WebCore::MockRealtimeMediaSourceCenter::setDeviceIsEphemeral(a2, a3);
  *(_QWORD *)&v10 = a2;
  BYTE8(v10) = v3;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetMockMediaDeviceIsEphemeral>((uint64_t)this, &v10, 0);
  v6 = WebKit::WebProcessPool::ensureGPUProcess(this);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)&v10 = a2;
  BYTE8(v10) = v3;
  WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockMediaDeviceIsEphemeral>(v6, (uint64_t)&v10, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetMockMediaDeviceIsEphemeral>(uint64_t result, __int128 *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMockMediaDeviceIsEphemeral>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::resetMockMediaDevices(WebKit::WebProcessPool *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  char v6;
  char v7;

  WebCore::MockRealtimeMediaSourceCenter::resetDevices(this);
  v6 = 0;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ResetMockMediaDevices>((uint64_t)this, &v6, 0);
  v2 = WebKit::WebProcessPool::ensureGPUProcess(this);
  v3 = (unsigned int *)(v2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v7 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::ResetMockMediaDevices>(v2, (uint64_t)&v7, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ResetMockMediaDevices>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ResetMockMediaDevices>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ClearCurrentModifierStateForTesting>(uint64_t result, char *a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ClearCurrentModifierStateForTesting>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebProcessPool::setDomainsWithUserInteraction(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl **result;
  uint64_t *v7;

  v7 = a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDomainsWithUserInteraction>(a1, &v7, 0);
  v5 = *a2;
  *a2 = 0;
  result = *(WTF::StringImpl ***)(a1 + 888);
  *(_QWORD *)(a1 + 888) = v5;
  if (result)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v4);
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDomainsWithUserInteraction>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDomainsWithUserInteraction>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  IPC::Encoder *result;
  IPC::Encoder *v25;
  const WTF::StringImpl **v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  WTF **v31;
  const WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  int v34;
  const WTF::StringImpl *v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  WTF **v40;
  const WTF::StringImpl *v41;
  const WTF::StringImpl *v42;
  WTF **v43;
  int v44;
  WTF **v45;
  void *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  const WTF::StringImpl *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  uint64_t *v59;
  _QWORD v60[2];
  IPC::Encoder *v61[2];
  _QWORD *v62;
  uint64_t v63;
  char v64;

  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(v8 + 8) = v9;
  v10 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a1 + 72);
    v12 = &v11[v10];
    do
    {
      v13 = *v11;
      v14 = (unsigned int *)(*v11 + 16);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      do
        v16 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v16 + 1, (unsigned int *)v8));
      v17 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v17 = 2630;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 528) = v17 + 16;
      *(_QWORD *)(v17 + 536) = v17 + 16;
      *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v17 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
      v61[0] = (IPC::Encoder *)v17;
      IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>((IPC::Encoder *)v17, a2);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E34D7A88;
      v18[1] = v8;
      v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v62 = v18;
      v63 = v19;
      v64 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v13, v61, 0, (uint64_t)&v62, 1);
      if (v64)
      {
        v20 = (uint64_t)v62;
        v62 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
      v21 = v61[0];
      v61[0] = 0;
      if (v21)
      {
        IPC::Encoder::~Encoder(v21, v6);
        WTF::fastFree(v22, v23);
      }
      if (v13)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
      ++v11;
    }
    while (v11 != v12);
  }
  result = (IPC::Encoder *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)v6, v7);
  v26 = (const WTF::StringImpl **)result;
  v27 = *a2;
  if (*a2)
    v27 += 24 * *(unsigned int *)(v27 - 4);
  v61[0] = result;
  v61[1] = v25;
  if ((IPC::Encoder *)v27 != result)
  {
    v57 = a2;
    v58 = (IPC::Encoder *)v27;
    v59 = (uint64_t *)(a1 + 896);
    while (1)
    {
      v28 = *a2;
      if (!*a2
        || (v29 = *(_DWORD *)(v28 - 8),
            v30 = WTF::ASCIICaseInsensitiveHash::hash(*v26, v25) & v29,
            v31 = (WTF **)(v28 + 24 * v30),
            (WTF::equal(*v31, 0, v32) & 1) != 0))
      {
LABEL_24:
        v62 = 0;
        v60[0] = 0;
        v63 = 0;
        v60[1] = 0;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v25);
      }
      else
      {
        v34 = 1;
        while (*v31 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v31, *v26, v33) & 1) == 0)
        {
          v30 = ((_DWORD)v30 + v34) & v29;
          v31 = (WTF **)(v28 + 24 * v30);
          ++v34;
          if (WTF::equal(*v31, 0, v33))
            goto LABEL_24;
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v60, v28 + 24 * v30 + 8);
      }
      v36 = v59;
      v37 = *v59;
      if (*v59
        || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v59, 0), (v37 = *v59) != 0))
      {
        v38 = *(_DWORD *)(v37 - 8);
      }
      else
      {
        v38 = 0;
      }
      v39 = WTF::ASCIICaseInsensitiveHash::hash(*v26, v35) & v38;
      v40 = (WTF **)(v37 + 24 * v39);
      if ((WTF::equal(*v40, 0, v41) & 1) == 0)
      {
        v43 = 0;
        v44 = 1;
        do
        {
          v45 = v40;
          if (*v40 != (WTF *)-1)
          {
            v45 = v43;
            if (WTF::equalIgnoringASCIICase(*v40, *v26, v42))
            {
              WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v37 + 24 * v39 + 8, v60);
              a2 = v57;
              goto LABEL_45;
            }
          }
          v39 = ((_DWORD)v39 + v44) & v38;
          v40 = (WTF **)(v37 + 24 * v39);
          ++v44;
          v43 = v45;
        }
        while (!WTF::equal(*v40, 0, v42));
        v36 = v59;
        if (v45)
        {
          *v45 = 0;
          v45[1] = 0;
          v45[2] = 0;
          --*(_DWORD *)(*v59 - 16);
          v40 = v45;
        }
      }
      WTF::String::operator=(v40, (WTF::StringImpl *)v26);
      WTF::GenericHashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(v40 + 1), v60);
      v47 = *v36;
      v48 = *v36 ? *(_DWORD *)(v47 - 12) + 1 : 1;
      a2 = v57;
      *(_DWORD *)(v47 - 12) = v48;
      v49 = *v36;
      v50 = *v36 ? *(_DWORD *)(v49 - 12) : 0;
      v51 = (*(_DWORD *)(v49 - 16) + v50);
      v52 = *(unsigned int *)(v49 - 4);
      if (v52 > 0x400)
        break;
      if (3 * v52 <= 4 * v51)
        goto LABEL_43;
LABEL_45:
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v46);
      v61[0] = (IPC::Encoder *)((char *)v61[0] + 24);
      result = (IPC::Encoder *)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v61, v53, v54);
      v26 = (const WTF::StringImpl **)v61[0];
      if (v61[0] == v58)
        goto LABEL_51;
    }
    if (v52 > 2 * v51)
      goto LABEL_45;
LABEL_43:
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v36, v40);
    goto LABEL_45;
  }
  do
  {
LABEL_51:
    v55 = __ldaxr((unsigned int *)v8);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, (unsigned int *)v8));
  if (!v56)
  {
    atomic_store(1u, (unsigned int *)v8);
    v62 = (_QWORD *)v8;
    return (IPC::Encoder *)WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v62);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::seedResourceLoadStatisticsForTesting(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4, uint64_t *a5)
{
  unsigned int *result;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29[2];
  char v30;
  uint64_t v31[2];
  char v32;
  IPC::Encoder *v33;

  result = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  v11 = result;
  *result = 1;
  v12 = *a5;
  *a5 = 0;
  *((_QWORD *)result + 1) = v12;
  v13 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v13)
  {
    v14 = *(uint64_t **)(a1 + 72);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      v17 = (unsigned int *)(*v14 + 16);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v29[0] = a2;
      v29[1] = a3;
      v30 = a4;
      do
        v19 = __ldaxr(v11);
      while (__stlxr(v19 + 1, v11));
      v20 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v20 = 2622;
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 528) = v20 + 16;
      *(_QWORD *)(v20 + 536) = v20 + 16;
      *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v20 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
      v33 = (IPC::Encoder *)v20;
      IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v20, v29);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v21 = off_1E34D7AB0;
      v21[1] = v11;
      v22 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v31[0] = (uint64_t)v21;
      v31[1] = v22;
      v32 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v16, &v33, 0, (uint64_t)v31, 1);
      if (v32)
      {
        v24 = v31[0];
        v31[0] = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      result = (unsigned int *)v33;
      v33 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v23);
        result = (unsigned int *)WTF::fastFree(v25, v26);
      }
      if (v16)
        result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17);
      ++v14;
    }
    while (v14 != v15);
  }
  do
  {
    v27 = __ldaxr(v11);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v11));
  if (!v28)
  {
    atomic_store(1u, v11);
    v31[0] = (uint64_t)v11;
    return (unsigned int *)WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v31);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::setUseSeparateServiceWorkerProcess(uint64_t this)
{
  int v1;
  NSObject *v2;
  void *v3;
  CFTypeRef **v4;
  uint64_t v5;
  CFTypeRef *v6;
  CFTypeRef **v7;
  unsigned int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebProcessPool::s_useSeparateServiceWorkerProcess != (_DWORD)this)
  {
    v1 = this;
    v2 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v7) = 67109120;
      HIDWORD(v7) = v1;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "WebProcessPool::setUseSeparateServiceWorkerProcess: (useSeparateServiceWorkerProcess=%d)", (uint8_t *)&v7, 8u);
    }
    WebKit::WebProcessPool::s_useSeparateServiceWorkerProcess = v1;
    WebKit::WebProcessPool::allProcessPools((uint64_t)&v7);
    if (v8)
    {
      v4 = v7;
      v5 = 8 * v8;
      do
      {
        v6 = *v4++;
        CFRetain(v6[1]);
        WebKit::WebProcessPool::terminateServiceWorkers(v6);
        CFRelease(v6[1]);
        v5 -= 8;
      }
      while (v5);
    }
    return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v3);
  }
  return this;
}

uint64_t WebKit::WebProcessPool::serviceWorkerProxiesCount(WebKit::WebProcessPool *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  unsigned int v5;

  v5 = 0;
  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    *(_QWORD *)algn_1ECE73828 = 0;
  }
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E34D7B00;
  v1[1] = &v5;
  v4 = v1;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v4);
  v2 = v4;
  v4 = 0;
  if (v2)
    (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  return v5;
}

uint64_t *WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;

  v3 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v3 = 1;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(v3 + 8) = v4;
  *(_BYTE *)(v3 + 16) = 1;
  v10 = v3;
  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    *(_QWORD *)algn_1ECE73828 = 0;
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34D7B28;
  v5[1] = &v10;
  v9 = v5;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(&v10, v6);
}

uint64_t *WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(unsigned __int8 *)(v3 + 16);
        *(_QWORD *)(v3 + 8) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v6 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      else
      {
        *(_QWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebKit::WebProcessPool::hasServiceWorkerForegroundActivityForTesting(WebKit::WebProcessPool *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    *(_QWORD *)algn_1ECE73828 = 0;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v12);
  if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
  {
    v1 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
    v2 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v1;
  }
  else
  {
    v2 = 0;
    v1 = 0;
  }
  v7 = &WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
  v8 = v2;
  v9 = v2;
  v10 = v2;
  v11 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v1;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (1)
  {
    if (v13 == v8)
      return 0;
    v3 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if (*(_BYTE *)(v3 + 872))
    {
      if (*(_DWORD *)(v3 + 848) == 1)
      {
        v4 = *(_QWORD *)(v3 + 840);
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (*(_QWORD *)(v5 + 8) && *(_BYTE *)(v4 + 32))
            break;
        }
      }
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return 1;
}

uint64_t WebKit::WebProcessPool::hasServiceWorkerBackgroundActivityForTesting(WebKit::WebProcessPool *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    *(_QWORD *)algn_1ECE73828 = 0;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v12);
  if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
  {
    v1 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
    v2 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v1;
  }
  else
  {
    v2 = 0;
    v1 = 0;
  }
  v7 = &WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
  v8 = v2;
  v9 = v2;
  v10 = v2;
  v11 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v1;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (1)
  {
    if (v13 == v8)
      return 0;
    v3 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if (*(_BYTE *)(v3 + 872))
    {
      if (*(_DWORD *)(v3 + 848) == 1)
      {
        v4 = *(_QWORD *)(v3 + 840);
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (*(_QWORD *)(v5 + 8) && !*(_BYTE *)(v4 + 32))
            break;
        }
      }
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return 1;
}

void WebKit::WebProcessProxy::allProcesses(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;

  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v3 = WebKit::WebProcessProxy::allProcessMap(void)::map;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 12);
    if (!(_DWORD)v4)
      goto LABEL_24;
    if (v4 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v5 = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a1 + 8) = v4;
    *(_QWORD *)a1 = v5;
    v3 = WebKit::WebProcessProxy::allProcessMap(void)::map;
    if (WebKit::WebProcessProxy::allProcessMap(void)::map)
    {
LABEL_24:
      if (*(_DWORD *)(v3 - 12))
      {
        v6 = *(unsigned int *)(v3 - 4);
        i = (_QWORD *)v3;
        if ((_DWORD)v6)
        {
          v8 = 16 * v6;
          for (i = (_QWORD *)v3; (unint64_t)(*i + 1) <= 1; i += 2)
          {
            v8 -= 16;
            if (!v8)
              return;
          }
        }
        v9 = (_QWORD *)(v3 + 16 * v6);
        if (v9 != i)
        {
LABEL_13:
          v10 = i[1];
          v11 = (unsigned int *)(v10 + 16);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          v13 = *(unsigned int *)(a1 + 12);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v10;
          *(_DWORD *)(a1 + 12) = v13 + 1;
          while (1)
          {
            i += 2;
            if (i == v9)
              break;
            if ((unint64_t)(*i + 1) > 1)
            {
              if (i != v9)
                goto LABEL_13;
              return;
            }
          }
        }
      }
    }
  }
}

_QWORD *WebKit::WebProcessProxy::mainPages@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (uint64_t)this;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = this[69];
  if (v4 && (v5 = *(unsigned int *)(v4 - 12), (_DWORD)v5))
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v6 = WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v6;
  }
  else
  {
    v6 = 0;
  }
  v7 = (_QWORD *)(v2 + 552);
  this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v2 + 552));
  v8 = this;
  v10 = v9;
  if (*v7)
    v11 = *v7 + 16 * *(unsigned int *)(*v7 - 4);
  else
    v11 = 0;
  if ((_QWORD *)v11 != this)
  {
    v12 = 0;
    do
    {
      v13 = v12;
      v14 = *(_QWORD *)(v8[1] + 8);
      if (v14)
        v15 = v14 - 16;
      else
        v15 = 0;
      this = CFRetain(*(CFTypeRef *)(v15 + 8));
      v12 = v13 + 1;
      *(_QWORD *)(v6 + 8 * v13) = v15;
      *(_DWORD *)(a2 + 12) = v13 + 1;
      while (1)
      {
        v8 += 2;
        if (v8 == v10)
          break;
        if ((unint64_t)(*v8 + 1) > 1)
          goto LABEL_19;
      }
      v8 = v10;
LABEL_19:
      ;
    }
    while (v8 != (_QWORD *)v11);
  }
  return this;
}

uint64_t WebKit::WebProcessProxy::forWebPagesWithOrigin(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t *v6;
  uint64_t i;
  uint64_t v8;
  const WTF::URL *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16[5];
  uint64_t *v17;
  unsigned int v18;
  char v19;
  _BYTE v20[24];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  WebKit::WebProcessProxy::globalPages((uint64_t)&v17);
  if (v18)
  {
    v6 = v17;
    for (i = 8 * v18; i; i -= 8)
    {
      v8 = *v6;
      CFRetain(*(CFTypeRef *)(*v6 + 8));
      if (*(_QWORD *)(*(_QWORD *)(v8 + 264) + 24) == a1)
      {
        WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)v8, &v15);
        MEMORY[0x19AEABB0C](v16, &v15, 0);
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)v16, v9);
        v11 = WebCore::operator==();
        if (v21 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_8[v21])(&v19, v20);
        v21 = -1;
        v12 = v16[0];
        v16[0] = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v10);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = v15;
        v15 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::destroy(v13, v10);
            if (!v11)
              goto LABEL_15;
LABEL_14:
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v8);
            goto LABEL_15;
          }
          *(_DWORD *)v13 -= 2;
        }
        if (v11)
          goto LABEL_14;
      }
LABEL_15:
      CFRelease(*(CFTypeRef *)(v8 + 8));
      ++v6;
    }
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v5);
}

unsigned int *WebKit::WebProcessProxy::requestTermination(unsigned int *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v3 = (uint64_t)result;
  v15 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 17);
  if (v4 && *(_BYTE *)(v4 + 104) || *((_QWORD *)result + 18))
  {
    v5 = result + 4;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(v3 + 136);
      if (v8)
        LODWORD(v8) = *(_DWORD *)(v8 + 108);
      v9 = 134218496;
      v10 = v3;
      v11 = 1024;
      v12 = v8;
      v13 = 1024;
      v14 = a2;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::requestTermination: reason=%d", (uint8_t *)&v9, 0x18u);
    }
    WebKit::AuxiliaryProcessProxy::terminate((WebKit::AuxiliaryProcessProxy *)v3);
    WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch(v3, a2);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return result;
}

void WebKit::WebProcessProxy::enableRemoteWorkers(uint64_t a1, int a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebKit::ServiceWorkerNotificationHandler *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[2];
  _BYTE buf[24];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 136);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v7;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::enableWorkers: workerType=%u", buf, 0x18u);
  }
  if (a2 == 2)
    v8 = a1 + 880;
  else
    v8 = a1 + 800;
  *(_QWORD *)buf = WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  v9 = WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = *a3;
  *(_QWORD *)&buf[8] = v9;
  *(_QWORD *)&buf[16] = v10;
  v11 = buf;
  v23[0] = v10;
  v12 = &_MergedGlobals_106;
    goto LABEL_31;
  while (1)
  {
    v13 = v11 + 24;
    v14 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::webUserContentControllerProxies(void)::proxies, v23);
    if (v14)
    {
      v15 = v14;
      CFRetain(*(CFTypeRef *)(v14 + 8));
      WebKit::WebUserContentControllerProxy::contentRuleListData((_QWORD *)v15, (uint64_t)v13);
      CFRelease(*(CFTypeRef *)(v15 + 8));
    }
    else
    {
      *v13 = 0;
      v13[1] = 0;
    }
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    if (*(_BYTE *)(v8 + 72))
    {
      WebKit::WebProcessProxy::RemoteWorkerInformation::operator=(v8, (uint64_t)buf);
    }
    else
    {
      std::construct_at[abi:sn180100]<WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation*>(v8, (uint64_t)buf);
      *(_BYTE *)(v8 + 72) = 1;
    }
    if (v27)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v27, v16);
    if (v26 != -1)
      ((void (*)(_QWORD *, uint64_t *))off_1E34D73F0[v26])(v23, &v25);
    v26 = -1;
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, (WTF::StringImpl *)v16);
    v17 = *(_QWORD *)(a1 + 512);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      v19 = v18 ? v18 - 16 : 0;
    }
    else
    {
      v19 = 0;
    }
    CFRetain(*(CFTypeRef *)(v19 + 8));
    {
      WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
      *(_QWORD *)algn_1ECE73828 = 0;
    }
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, (unsigned int *)a1, (uint64_t)buf);
    CFRelease(*(CFTypeRef *)(v19 + 8));
    if (a2 != 1)
      break;
    v11 = (_BYTE *)*(unsigned __int8 *)(a1 + 872);
    if (*(_BYTE *)(a1 + 872))
    {
      v21 = WebKit::ServiceWorkerNotificationHandler::singleton(v20);
      v22 = *(_QWORD *)(a1 + 808);
      v23[0] = 44;
      v23[1] = v22;
      WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(a1 + 160), (unsigned __int8 *)v23, (uint64_t)v21, (unsigned int **)buf);
      break;
    }
    __break(1u);
LABEL_31:
    WebKit::webUserContentControllerProxies(void)::proxies = 0;
    v12[2408] = 1;
  }
  WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
  WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(a1, a2);
}

void `non-virtual thunk to'WebKit::WebProcessProxy::~WebProcessProxy(WebKit::WebProcessProxy *this)
{
  WebKit::WebProcessProxy::~WebProcessProxy((WebKit::WebProcessProxy *)((char *)this - 24));
}

{
  WebKit::WebProcessProxy::~WebProcessProxy((WebKit::WebProcessProxy *)((char *)this - 32));
}

{
  WebKit::WebProcessProxy::operator delete((WebKit::WebProcessProxy *)((char *)this - 24));
}

{
  WebKit::WebProcessProxy::operator delete((WebKit::WebProcessProxy *)((char *)this - 32));
}

void WebKit::WebProcessProxy::operator delete(WebKit::WebProcessProxy *a1)
{
  unsigned int *v1;
  void *v2;

  WebKit::WebProcessProxy::~WebProcessProxy(a1);
  if (atomic_load(v1 + 12))
    bzero(v1, 0x478uLL);
  else
    WTF::fastFree((WTF *)v1, v2);
}

uint64_t WebKit::WebProcessProxy::updateRuntimeStatistics(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  double v4;
  int v5;
  double *v6;
  uint64_t v7;

  v1 = this;
  v2 = 0;
  if (*(_BYTE *)(this + 778) || *(_BYTE *)(this + 712))
  {
    v3 = 0;
  }
  else
  {
    v3 = *(_BYTE *)(this + 384);
    if (!v3)
    {
      if (*(_BYTE *)(this + 389))
        v3 = *(_QWORD *)(this + 224) != 0;
      else
        v3 = 1;
    }
    this = WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    v2 = v7;
  }
  if (*(double *)(v1 + 1104) != 0.0)
  {
    this = WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    v5 = *(unsigned __int8 *)(v1 + 1098);
    if (v5 == 2)
    {
      v6 = (double *)(v1 + 1112);
      goto LABEL_11;
    }
    if (v5 == 1)
    {
      v6 = (double *)(v1 + 1120);
      goto LABEL_11;
    }
    if (!*(_BYTE *)(v1 + 1098))
    {
      v6 = (double *)(v1 + 1128);
LABEL_11:
      *v6 = v4 - *(double *)(v1 + 1104) + *v6;
    }
  }
  *(_BYTE *)(v1 + 1098) = v3;
  *(_QWORD *)(v1 + 1104) = v2;
  return this;
}

uint64_t WebKit::WebProcessProxy::initializePreferencesForGPUAndNetworkProcesses(uint64_t this, WebKit::WebPreferences ***a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = this + 1088;
  if (!*(_BYTE *)(this + 1094))
  {
    this = API::PageConfiguration::preferencesForGPUProcess(a2[6]);
    v5 = *(unsigned __int8 *)(v3 + 1094);
    *(_DWORD *)v4 = this;
    *(_WORD *)(v4 + 4) = WORD2(this);
    if (!v5)
      *(_BYTE *)(v3 + 1094) = 1;
  }
  if (!*(_BYTE *)(v3 + 1097))
  {
    this = API::PageConfiguration::preferencesForNetworkProcess(a2[6]);
    if (!*(_BYTE *)(v3 + 1097))
      *(_BYTE *)(v3 + 1097) = 1;
    *(_WORD *)(v4 + 7) = this;
  }
  return this;
}

void WebKit::WebProcessProxy::addProvisionalPageProxy(WebKit::WebProcessProxy *this, WebKit::ProvisionalPageProxy *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  WTF *v36;
  uint8_t buf[4];
  WebKit::WebProcessProxy *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  WebKit::ProvisionalPageProxy *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 17);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 108);
    v6 = *((_QWORD *)a2 + 4);
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v7)
      v8 = v7 - 16;
    else
      v8 = 0;
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 744);
    *(_DWORD *)buf = 134219008;
    v38 = this;
    v39 = 1024;
    v40 = v5;
    v41 = 2048;
    v42 = a2;
    v43 = 2048;
    v44 = v9;
    v45 = 2048;
    v46 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::addProvisionalPageProxy: provisionalPage=%p, pageProxyID=%llu, webPageID=%llu", buf, 0x30u);
  }
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, (uint64_t)this);
  v11 = (uint64_t *)((char *)this + 576);
  v12 = *((_DWORD *)this + 146) + 1;
  *((_DWORD *)this + 146) = v12;
  if (v12 > *((_DWORD *)this + 147))
  {
    v13 = *v11;
    if (*v11)
    {
      v14 = *(_DWORD *)(v13 - 4);
      if (!v14)
        goto LABEL_34;
      v15 = 0;
      do
      {
        while (1)
        {
          v16 = *(_QWORD *)(v13 + 8 * --v14);
          if ((unint64_t)(v16 + 1) >= 2 && !*(_QWORD *)(v16 + 8))
            break;
          if (!v14)
            goto LABEL_23;
        }
        *(_QWORD *)(v13 + 8 * v14) = 0;
        do
        {
          v17 = __ldaxr((unsigned int *)v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)v16));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)v16);
          WTF::fastFree((WTF *)v16, v10);
        }
        *(_QWORD *)(v13 + 8 * v14) = -1;
        ++v15;
      }
      while (v14);
LABEL_23:
      v13 = *v11;
      if (v15)
      {
        *(_DWORD *)(v13 - 16) += v15;
        v19 = *v11;
        if (*v11)
          v20 = *(_DWORD *)(v19 - 12);
        else
          v20 = 0;
        *(_DWORD *)(v19 - 12) = v20 - v15;
        v13 = *v11;
      }
      if (v13)
      {
        v21 = *(_DWORD *)(v13 - 4);
        if (v21 >= 9 && 6 * *(_DWORD *)(v13 - 12) < v21)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)this + 72);
          v13 = *((_QWORD *)this + 72);
          *((_DWORD *)this + 146) = 0;
          if (!v13)
          {
            v23 = 0;
            goto LABEL_38;
          }
          goto LABEL_37;
        }
LABEL_34:
        *((_DWORD *)this + 146) = 0;
LABEL_37:
        v23 = *(_DWORD *)(v13 - 12);
        v24 = 0x7FFFFFFF;
        if (v23 >= 0x7FFFFFFF)
        {
LABEL_39:
          *((_DWORD *)this + 147) = 2 * v24;
          goto LABEL_40;
        }
LABEL_38:
        v24 = v23;
        goto LABEL_39;
      }
    }
    v23 = 0;
    *((_DWORD *)this + 146) = 0;
    goto LABEL_38;
  }
LABEL_40:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v25 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  do
    v27 = __ldaxr(v25);
  while (__stlxr(v27 + 1, v25));
  v36 = (WTF *)v25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)this + 72, &v36, (uint64_t)buf);
  v29 = (unsigned int *)v36;
  v36 = 0;
  if (v29)
  {
    do
    {
      v34 = __ldaxr(v29);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v29));
    if (!v35)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v28);
    }
  }
  if (v25)
  {
    do
    {
      v30 = __ldaxr(v25);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v25));
    if (!v31)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v28);
    }
  }
  v32 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (v32)
    v33 = v32 - 16;
  else
    v33 = 0;
  CFRetain(*(CFTypeRef *)(v33 + 8));
  WebKit::WebProcessProxy::initializePreferencesForGPUAndNetworkProcesses((uint64_t)this, (WebKit::WebPreferences ***)v33);
  CFRelease(*(CFTypeRef *)(v33 + 8));
  WebKit::WebProcessProxy::updateRegistrationWithDataStore(this);
}

void WebKit::WebProcessProxy::removeProvisionalPageProxy(WebKit::WebProcessProxy *this, WebKit::ProvisionalPageProxy *a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[12];
  __int16 v31;
  int v32;
  __int16 v33;
  WebKit::ProvisionalPageProxy *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_QWORD *)this + 17);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    v7 = *((_QWORD *)a2 + 4);
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v8)
      v9 = v8 - 16;
    else
      v9 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 744);
    *(_DWORD *)v30 = 134219008;
    *(_QWORD *)&v30[4] = this;
    v31 = 1024;
    v32 = v6;
    v33 = 2048;
    v34 = a2;
    v35 = 2048;
    v36 = v10;
    v37 = 2048;
    v38 = v7;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::removeProvisionalPageProxy: provisionalPage=%p, pageProxyID=%llu, webPageID=%llu", v30, 0x30u);
  }
  v11 = (uint64_t *)((char *)this + 576);
  v12 = *((_DWORD *)this + 146) + 1;
  *((_DWORD *)this + 146) = v12;
  if (v12 > *((_DWORD *)this + 147))
  {
    v13 = *v11;
    if (*v11)
    {
      v14 = *(_DWORD *)(v13 - 4);
      if (!v14)
        goto LABEL_32;
      v15 = 0;
      do
      {
        while (1)
        {
          v16 = *(_QWORD *)(v13 + 8 * --v14);
          if ((unint64_t)(v16 + 1) >= 2 && !*(_QWORD *)(v16 + 8))
            break;
          if (!v14)
            goto LABEL_21;
        }
        *(_QWORD *)(v13 + 8 * v14) = 0;
        do
        {
          v17 = __ldaxr((unsigned int *)v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)v16));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)v16);
          WTF::fastFree((WTF *)v16, v5);
        }
        *(_QWORD *)(v13 + 8 * v14) = -1;
        ++v15;
      }
      while (v14);
LABEL_21:
      v13 = *v11;
      if (v15)
      {
        *(_DWORD *)(v13 - 16) += v15;
        v19 = *v11;
        if (*v11)
          v20 = *(_DWORD *)(v19 - 12);
        else
          v20 = 0;
        *(_DWORD *)(v19 - 12) = v20 - v15;
        v13 = *v11;
      }
      if (v13)
      {
        v21 = *(_DWORD *)(v13 - 4);
        if (v21 >= 9 && 6 * *(_DWORD *)(v13 - 12) < v21)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)this + 72);
          v13 = *((_QWORD *)this + 72);
          *((_DWORD *)this + 146) = 0;
          if (!v13)
          {
            v23 = 0;
            goto LABEL_36;
          }
          goto LABEL_35;
        }
LABEL_32:
        *((_DWORD *)this + 146) = 0;
LABEL_35:
        v23 = *(_DWORD *)(v13 - 12);
        v24 = 0x7FFFFFFF;
        if (v23 >= 0x7FFFFFFF)
        {
LABEL_37:
          *((_DWORD *)this + 147) = 2 * v24;
          goto LABEL_38;
        }
LABEL_36:
        v24 = v23;
        goto LABEL_37;
      }
    }
    v23 = 0;
    *((_DWORD *)this + 146) = 0;
    goto LABEL_36;
  }
LABEL_38:
  v25 = *((_QWORD *)a2 + 1);
  if (v25 && *(_QWORD *)(v25 + 8))
  {
    *(_QWORD *)v30 = *((_QWORD *)a2 + 1);
    v26 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)this + 72, v30);
    if (*v11)
    {
      v27 = *v11 + 8 * *(unsigned int *)(*v11 - 4);
      if ((unsigned int **)v27 == v26)
        goto LABEL_47;
    }
    else
    {
      if (!v26)
        goto LABEL_47;
      v27 = 0;
    }
    if ((unsigned int **)v27 != v26)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)this + 72, v26);
  }
LABEL_47:
  WebKit::WebProcessProxy::updateRegistrationWithDataStore(this);
  if (WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 72))
  {
    v28 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v28)
      v29 = v28 - 16;
    else
      v29 = 0;
    WebKit::WebProcessProxy::reportProcessDisassociatedWithPageIfNecessary((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v29 + 32) + 744));
    WebKit::WebProcessProxy::maybeShutDown(this);
  }
}

void WebKit::WebProcessProxy::reportProcessDisassociatedWithPageIfNecessary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 552), a2) & 1) == 0)
  {
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v22, (_QWORD **)(a1 + 576));
    v4 = *(_QWORD *)(a1 + 576);
    if (v4)
    {
      v5 = *(unsigned int *)(v4 - 4);
      v6 = v4 + 8 * v5;
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v17 = a1 + 576;
    v18 = v6;
    v19 = v6;
    v20 = v6;
    v21 = v4 + 8 * v5;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v17);
    v7 = v23;
    v8 = v18;
    while (v7 != v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 24) + 8);
      if (v9)
        v10 = v9 - 16;
      else
        v10 = 0;
      if (*(_QWORD *)(*(_QWORD *)(v10 + 32) + 744) == a2)
        return;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v22);
      v7 = v23;
    }
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 592), &v22);
    v11 = *(_QWORD *)(a1 + 592);
    if (v11)
    {
      v12 = *(unsigned int *)(v11 - 4);
      v13 = v11 + 8 * v12;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v17 = a1 + 592;
    v18 = v13;
    v19 = v13;
    v20 = v13;
    v21 = v11 + 8 * v12;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v17);
    while (v23 != v18)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v23 + 8) + 24) + 8);
      if (v14)
        v15 = v14 - 16;
      else
        v15 = 0;
      if (*(_QWORD *)(*(_QWORD *)(v15 + 32) + 744) == a2)
        return;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v22);
    }
    WebKit::WebProcessProxy::webPage(a2, &v22);
    v16 = v22;
    if (v22)
    {
      WebKit::WebNavigationState::clearNavigationsFromProcess(*(_QWORD *)(v22 + 160), *(void **)(a1 + 176));
      CFRelease(*(CFTypeRef *)(v16 + 8));
    }
  }
}

void WebKit::WebProcessProxy::addRemotePageProxy(WebKit::WebProcessProxy *this, WebKit::RemotePageProxy *a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  uint8_t buf[4];
  WebKit::WebProcessProxy *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  WebKit::RemotePageProxy *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_QWORD *)this + 17);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    *(_DWORD *)buf = 134218496;
    v35 = this;
    v36 = 1024;
    v37 = v6;
    v38 = 2048;
    v39 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::addRemotePageProxy: remotePage=%p", buf, 0x1Cu);
  }
  v7 = (uint64_t *)((char *)this + 560);
  v8 = *((_DWORD *)this + 142) + 1;
  *((_DWORD *)this + 142) = v8;
  if (v8 > *((_DWORD *)this + 143))
  {
    v9 = *v7;
    if (*v7)
    {
      v10 = *(_DWORD *)(v9 - 4);
      if (!v10)
        goto LABEL_29;
      v11 = 0;
      do
      {
        while (1)
        {
          v12 = *(_QWORD *)(v9 + 8 * --v10);
          if ((unint64_t)(v12 + 1) >= 2 && !*(_QWORD *)(v12 + 8))
            break;
          if (!v10)
            goto LABEL_18;
        }
        *(_QWORD *)(v9 + 8 * v10) = 0;
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          WTF::fastFree((WTF *)v12, v5);
        }
        *(_QWORD *)(v9 + 8 * v10) = -1;
        ++v11;
      }
      while (v10);
LABEL_18:
      v9 = *v7;
      if (v11)
      {
        *(_DWORD *)(v9 - 16) += v11;
        v15 = *v7;
        if (*v7)
          v16 = *(_DWORD *)(v15 - 12);
        else
          v16 = 0;
        *(_DWORD *)(v15 - 12) = v16 - v11;
        v9 = *v7;
      }
      if (v9)
      {
        v17 = *(_DWORD *)(v9 - 4);
        if (v17 >= 9 && 6 * *(_DWORD *)(v9 - 12) < v17)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)this + 70);
          v9 = *((_QWORD *)this + 70);
          *((_DWORD *)this + 142) = 0;
          if (!v9)
          {
            v19 = 0;
            goto LABEL_33;
          }
          goto LABEL_32;
        }
LABEL_29:
        *((_DWORD *)this + 142) = 0;
LABEL_32:
        v19 = *(_DWORD *)(v9 - 12);
        v20 = 0x7FFFFFFF;
        if (v19 >= 0x7FFFFFFF)
        {
LABEL_34:
          *((_DWORD *)this + 143) = 2 * v20;
          goto LABEL_35;
        }
LABEL_33:
        v20 = v19;
        goto LABEL_34;
      }
    }
    v19 = 0;
    *((_DWORD *)this + 142) = 0;
    goto LABEL_33;
  }
LABEL_35:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v21 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  do
    v23 = __ldaxr(v21);
  while (__stlxr(v23 + 1, v21));
  v33 = (WTF *)v21;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)this + 70, &v33, (uint64_t)buf);
  v25 = (unsigned int *)v33;
  v33 = 0;
  if (v25)
  {
    do
    {
      v31 = __ldaxr(v25);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v25));
    if (!v32)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v24);
    }
  }
  if (v21)
  {
    do
    {
      v26 = __ldaxr(v21);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v21));
    if (!v27)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v24);
    }
  }
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, (uint64_t)this);
  v28 = *((_QWORD *)a2 + 4);
  if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0)
  {
    v30 = v29 - 16;
    CFRetain(*(CFTypeRef *)(v29 - 8));
  }
  else
  {
    v30 = 0;
  }
  WebKit::WebProcessProxy::initializePreferencesForGPUAndNetworkProcesses((uint64_t)this, (WebKit::WebPreferences ***)v30);
  CFRelease(*(CFTypeRef *)(v30 + 8));
}

void WebKit::WebProcessProxy::removeRemotePageProxy(WebKit::WebProcessProxy *this, WebKit::RemotePageProxy *a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int **v22;
  uint64_t v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  __int16 v27;
  WebKit::RemotePageProxy *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_QWORD *)this + 17);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    *(_DWORD *)v24 = 134218496;
    *(_QWORD *)&v24[4] = this;
    v25 = 1024;
    v26 = v6;
    v27 = 2048;
    v28 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::removeRemotePageProxy: remotePage=%p", v24, 0x1Cu);
  }
  v7 = (uint64_t *)((char *)this + 560);
  v8 = *((_DWORD *)this + 142) + 1;
  *((_DWORD *)this + 142) = v8;
  if (v8 > *((_DWORD *)this + 143))
  {
    v9 = *v7;
    if (*v7)
    {
      v10 = *(_DWORD *)(v9 - 4);
      if (!v10)
        goto LABEL_29;
      v11 = 0;
      do
      {
        while (1)
        {
          v12 = *(_QWORD *)(v9 + 8 * --v10);
          if ((unint64_t)(v12 + 1) >= 2 && !*(_QWORD *)(v12 + 8))
            break;
          if (!v10)
            goto LABEL_18;
        }
        *(_QWORD *)(v9 + 8 * v10) = 0;
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          WTF::fastFree((WTF *)v12, v5);
        }
        *(_QWORD *)(v9 + 8 * v10) = -1;
        ++v11;
      }
      while (v10);
LABEL_18:
      v9 = *v7;
      if (v11)
      {
        *(_DWORD *)(v9 - 16) += v11;
        v15 = *v7;
        if (*v7)
          v16 = *(_DWORD *)(v15 - 12);
        else
          v16 = 0;
        *(_DWORD *)(v15 - 12) = v16 - v11;
        v9 = *v7;
      }
      if (v9)
      {
        v17 = *(_DWORD *)(v9 - 4);
        if (v17 >= 9 && 6 * *(_DWORD *)(v9 - 12) < v17)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)this + 70);
          v9 = *((_QWORD *)this + 70);
          *((_DWORD *)this + 142) = 0;
          if (!v9)
          {
            v19 = 0;
            goto LABEL_33;
          }
          goto LABEL_32;
        }
LABEL_29:
        *((_DWORD *)this + 142) = 0;
LABEL_32:
        v19 = *(_DWORD *)(v9 - 12);
        v20 = 0x7FFFFFFF;
        if (v19 >= 0x7FFFFFFF)
        {
LABEL_34:
          *((_DWORD *)this + 143) = 2 * v20;
          goto LABEL_35;
        }
LABEL_33:
        v20 = v19;
        goto LABEL_34;
      }
    }
    v19 = 0;
    *((_DWORD *)this + 142) = 0;
    goto LABEL_33;
  }
LABEL_35:
  v21 = *((_QWORD *)a2 + 1);
  if (!v21 || !*(_QWORD *)(v21 + 8))
    goto LABEL_44;
  *(_QWORD *)v24 = *((_QWORD *)a2 + 1);
  v22 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)this + 70, v24);
  if (*v7)
  {
    v23 = *v7 + 8 * *(unsigned int *)(*v7 - 4);
    if ((unsigned int **)v23 == v22)
      goto LABEL_44;
  }
  else
  {
    if (!v22)
      goto LABEL_44;
    v23 = 0;
  }
  if ((unsigned int **)v23 != v22)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)this + 70, v22);
LABEL_44:
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 70))
    WebKit::WebProcessProxy::maybeShutDown(this);
}

void IPC::Decoder::decode<WebKit::GoToBackForwardItemParameters>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 192))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void WebKit::WebProcessProxy::processWillShutDown(WebKit::WebProcessProxy *this, IPC::Connection *a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  WebKit::WebProcessProxy *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 17);
    if (v4)
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    v5 = 134218240;
    v6 = this;
    v7 = 1024;
    v8 = v4;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::processWillShutDown:", (uint8_t *)&v5, 0x12u);
  }
}

uint64_t WebKit::WebProcessProxy::audioCapturingWebPage@<X0>(_QWORD *a1@<X8>)
{
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t result;
  void *v9;
  uint64_t *v10;
  unsigned int v11;

  WebKit::WebProcessProxy::globalPages((uint64_t)&v10);
  if (v11)
  {
    v4 = v10;
    v5 = 8 * v11;
    while (1)
    {
      v6 = *v4;
      CFRetain(*(CFTypeRef *)(*v4 + 8));
      v7 = *(const void **)(v6 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v6 + 32) + 809) & 8) != 0)
        break;
      CFRelease(v7);
      ++v4;
      v5 -= 8;
      if (!v5)
        goto LABEL_5;
    }
    CFRetain(v7);
    *a1 = v6;
    CFRelease(*(CFTypeRef *)(v6 + 8));
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v9);
  }
  else
  {
LABEL_5:
    result = WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v3);
    *a1 = 0;
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::notifyPageStatisticsAndDataRecordsProcessed(WebKit::WebProcessProxy *this)
{
  void *v1;
  CFTypeRef **v2;
  uint64_t v3;
  CFTypeRef *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  CFTypeRef **v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  WebKit::WebProcessProxy::globalPages((uint64_t)&v9);
  if (v10)
  {
    v2 = v9;
    v3 = 8 * v10;
    do
    {
      v4 = *v2;
      CFRetain((*v2)[1]);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = v11;
      WebKit::WebPageProxy::postMessageToInjectedBundle((WebKit::WebPageProxy *)v4, &v8, 0);
      v6 = v8;
      v8 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v5);
        else
          *(_DWORD *)v6 -= 2;
      }
      CFRelease(v4[1]);
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v1);
}

uint64_t WebKit::WebProcessProxy::notifyWebsiteDataDeletionForRegistrableDomainsFinished(WebKit::WebProcessProxy *this)
{
  void *v1;
  CFTypeRef **v2;
  uint64_t v3;
  CFTypeRef *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  CFTypeRef **v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  WebKit::WebProcessProxy::globalPages((uint64_t)&v9);
  if (v10)
  {
    v2 = v9;
    v3 = 8 * v10;
    do
    {
      v4 = *v2;
      CFRetain((*v2)[1]);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = v11;
      WebKit::WebPageProxy::postMessageToInjectedBundle((WebKit::WebPageProxy *)v4, &v8, 0);
      v6 = v8;
      v8 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v5);
        else
          *(_DWORD *)v6 -= 2;
      }
      CFRelease(v4[1]);
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebProcess::SetThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2648;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  LOBYTE(a4) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D7C90;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

unsigned __int8 *WebKit::WebProcessProxy::removeVisitedLinkStoreUser(uint64_t *a1, WebKit::VisitedLinkStore *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _OWORD v21[3];
  uint64_t v22;

  v22 = a3;
  v5 = (uint64_t)(a1 + 78);
  WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find(a1 + 78, (uint64_t)a2, (uint64_t)v21);
  v6 = a1[78];
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = v6 + 16 * v7;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v15 = v5;
  v16 = v8;
  v17 = v8;
  v18 = v8;
  v19 = v6 + 16 * v7;
  v20 = 0;
  result = (unsigned __int8 *)WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v15);
  v10 = *((_QWORD *)&v21[0] + 1);
  if (*((_QWORD *)&v21[0] + 1) != v16)
  {
    v11 = (uint64_t *)(*((_QWORD *)&v21[0] + 1) + 8);
    result = (unsigned __int8 *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(*((_QWORD *)&v21[0] + 1) + 8), &v22);
    v12 = *(_QWORD *)(v10 + 8);
    if (v12)
    {
      v13 = (unsigned __int8 *)(v12 + 8 * *(unsigned int *)(v12 - 4));
      if (v13 == result)
        goto LABEL_13;
    }
    else
    {
      if (!result)
        goto LABEL_14;
      v13 = 0;
    }
    if (v13 != result)
    {
      result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(v10 + 8), result);
      v12 = *v11;
    }
    if (v12)
    {
LABEL_13:
      if (*(_DWORD *)(v12 - 12))
        return result;
    }
LABEL_14:
    v14[0] = v21[0];
    v14[1] = v21[1];
    v14[2] = v21[2];
    WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::remove(v5, (uint64_t)v14);
    return WebKit::VisitedLinkStore::removeProcess(a2, (WebKit::WebProcessProxy *)a1);
  }
  return result;
}

void WebKit::WebProcessProxy::addVisitedLinkStoreUser(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v6;
  unsigned int v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  void *v16;
  unsigned int v17;
  _QWORD *v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;

  v6 = a1 + 78;
  v7 = *((_DWORD *)a1 + 158);
  *((_DWORD *)a1 + 158) = v7 + 1;
  if (v7 > *((_DWORD *)a1 + 159))
    WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)(a1 + 78), a2);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 6, (uint64_t)(a2 + 4));
  v9 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 + 1, v9));
  v58 = (WTF *)v9;
  if (v9)
  {
    do
    {
      v12 = __ldaxr(v9);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v9));
    if (!v13)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  v14 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v6, 0), (v14 = *v6) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v17 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(&v58);
  v18 = 0;
  v19 = 1;
  v20 = (unsigned int *)v58;
  while (1)
  {
    v21 = v17 & v15;
    v22 = v14 + 16 * v21;
    v23 = *(unsigned int **)v22;
    if (*(_QWORD *)v22 != -1)
      break;
    v18 = (_QWORD *)(v14 + 16 * v21);
LABEL_19:
    v17 = v19 + v21;
    ++v19;
  }
  if (!v23)
  {
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v22 = (uint64_t)v18;
    }
    v58 = 0;
    v24 = *(unsigned int **)v22;
    *(_QWORD *)v22 = v20;
    if (v24)
    {
      do
      {
        v28 = __ldaxr(v24);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v24));
      if (!v29)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v16);
      }
    }
    v25 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    if (v25)
      WTF::fastFree((WTF *)(v25 - 16), v16);
    v26 = *v6;
    if (*v6)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v32 = *v6;
    if (*v6)
      v33 = *(_DWORD *)(v32 - 12);
    else
      v33 = 0;
    v34 = (*(_DWORD *)(v32 - 16) + v33);
    v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 <= 2 * v34)
      {
LABEL_38:
        v22 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v6, (unsigned int **)v22);
        v32 = *v6;
        if (*v6)
          v35 = *(unsigned int *)(v32 - 4);
        else
          v35 = 0;
      }
    }
    else if (3 * v35 <= 4 * v34)
    {
      goto LABEL_38;
    }
    v36 = v32 + 16 * v35;
    v20 = (unsigned int *)v58;
    goto LABEL_45;
  }
  if (v23 != (unsigned int *)v58)
    goto LABEL_19;
  v30 = *v6;
  if (*v6)
    v31 = *(unsigned int *)(v30 - 4);
  else
    v31 = 0;
  v36 = v30 + 16 * v31;
LABEL_45:
  v58 = 0;
  if (v20)
  {
    do
    {
      v40 = __ldaxr(v20);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v20));
    if (!v41)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v16);
    }
  }
  v58 = (WTF *)v6;
  v59 = v22;
  v60 = v36;
  v37 = *v6;
  if (*v6)
  {
    v38 = *(unsigned int *)(v37 - 4);
    v39 = v37 + 16 * v38;
  }
  else
  {
    v39 = 0;
    v38 = 0;
  }
  v61 = v39;
  v62 = v37 + 16 * v38;
  v63 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v58);
  v43 = (uint64_t *)(v59 + 8);
  v42 = *(_QWORD *)(v59 + 8);
  if (v42
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(v59 + 8), 0), (v42 = *v43) != 0))
  {
    v44 = *(_DWORD *)(v42 - 8);
  }
  else
  {
    v44 = 0;
  }
  v45 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
  v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
  v48 = v44 & ((v47 >> 31) ^ v47);
  v49 = (uint64_t *)(v42 + 8 * v48);
  v50 = *v49;
  if (*v49)
  {
    v51 = 0;
    v52 = 1;
    while (v50 != a3)
    {
      if (v50 == -1)
        v51 = v49;
      v48 = (v48 + v52) & v44;
      v49 = (uint64_t *)(v42 + 8 * v48);
      v50 = *v49;
      ++v52;
      if (!*v49)
      {
        if (v51)
        {
          *v51 = 0;
          --*(_DWORD *)(*v43 - 16);
          v49 = v51;
        }
        goto LABEL_63;
      }
    }
LABEL_72:
    if (*(_DWORD *)(v42 - 12) == 1)
      WebKit::VisitedLinkStore::addProcess((WebKit::VisitedLinkStore *)a2, (WebKit::WebProcessProxy *)a1);
  }
  else
  {
LABEL_63:
    *v49 = a3;
    v53 = *v43;
    if (*v43)
      v54 = *(_DWORD *)(v53 - 12) + 1;
    else
      v54 = 1;
    *(_DWORD *)(v53 - 12) = v54;
    v42 = *v43;
    if (*v43)
      v55 = *(_DWORD *)(v42 - 12);
    else
      v55 = 0;
    v56 = (*(_DWORD *)(v42 - 16) + v55);
    v57 = *(unsigned int *)(v42 - 4);
    if (v57 > 0x400)
    {
      if (v57 > 2 * v56)
        goto LABEL_72;
    }
    else if (3 * v57 > 4 * v56)
    {
      goto LABEL_72;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v43, v49);
    v42 = *v43;
    if (*v43)
      goto LABEL_72;
  }
}

_QWORD *WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  ++*((_DWORD *)a1 + 2);
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = *a1;
    if (*a1)
    {
      v7 = *(_DWORD *)(v6 - 8);
      v8 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a2 + 24));
      for (i = 0; ; v8 = i + v10)
      {
        v10 = v8 & v7;
        v11 = *(_QWORD *)(v6 + 16 * v10);
        if (v11 != -1)
        {
          if (!v11)
          {
            v16 = *a1;
            if (*a1)
            {
              v18 = *(unsigned int *)(v16 - 4);
              v19 = v16 + 16 * v18;
              goto LABEL_20;
            }
            v19 = 0;
            goto LABEL_19;
          }
          if (v11 == v5)
            break;
        }
        ++i;
      }
      v19 = v6 + 16 * v10;
      v16 = *a1;
      if (*a1)
      {
        v18 = *(unsigned int *)(v16 - 4);
        goto LABEL_20;
      }
LABEL_19:
      v18 = 0;
LABEL_20:
      *(_QWORD *)a3 = a1;
      *(_QWORD *)(a3 + 8) = v19;
      *(_QWORD *)(a3 + 16) = v16 + 16 * v18;
      if (v16)
      {
        v17 = *(unsigned int *)(v16 - 4);
        v14 = v16 + 16 * v17;
      }
      else
      {
        v14 = 0;
        v17 = 0;
      }
    }
    else
    {
      v16 = 0;
      v14 = 0;
      v17 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = a1;
    }
    v15 = v16 + 16 * v17;
  }
  else
  {
    v12 = *a1;
    if (*a1)
    {
      v13 = *(unsigned int *)(v12 - 4);
      v14 = v12 + 16 * v13;
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v14;
    v15 = v12 + 16 * v13;
    *(_QWORD *)(a3 + 16) = v14;
  }
  *(_QWORD *)(a3 + 24) = v14;
  *(_QWORD *)(a3 + 32) = v15;
  *(_DWORD *)(a3 + 40) = 0;
  return WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((_QWORD *)a3);
}

uint64_t WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::remove(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *(void **)(a2 + 8);
  if (*(_QWORD *)a1)
  {
    v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(*(_QWORD *)a1 - 4);
    if ((void *)v4 == v3)
      goto LABEL_9;
  }
  else
  {
    if (!v3)
    {
LABEL_9:
      v5 = 0;
      goto LABEL_10;
    }
    v4 = 0;
  }
  if ((void *)v4 != v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, v3);
  v5 = 1;
LABEL_10:
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, v3);
  return v5;
}

WTF::StringImpl *WebKit::WebProcessProxy::assumeReadAccessToBaseURL(WebKit::WebProcessProxy *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11[5];
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];

  WTF::URL::URL((uint64_t)v13, a3);
  if (WTF::URL::protocolIs())
  {
    WTF::URL::truncatedForUseAsBase((WTF::URL *)v13);
    WTF::URL::fileSystemPath((WTF::URL *)v11);
    v7 = v11[0];
    v11[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    if (v12)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 67, &v12, v6, (uint64_t)v11);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)a2 + 138, &v12, v8, (uint64_t)v11);
      v9 = v12;
      v12 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v5);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebKit::WebProcessProxy::hasAssumedReadAccessToURL(WebKit::WebProcessProxy *this, const WTF::URL *a2)
{
  WebKit::WebProcessProxy *v4;
  uint64_t *Access;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v22;

  if (!WTF::URL::protocolIs())
    return 0;
  v4 = (WebKit::WebProcessProxy *)WTF::URL::fileSystemPath(a2);
  Access = WebKit::WebProcessProxy::platformPathsWithAssumedReadAccess(v4);
  if (!*((_DWORD *)Access + 3))
    goto LABEL_24;
  v6 = *((unsigned int *)Access + 2);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = (uint64_t *)*Access;
    while (!*v8)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_24;
    }
  }
  else
  {
    v8 = (uint64_t *)*Access;
  }
  v10 = *Access + 8 * v6;
  if (v8 == (uint64_t *)v10)
    goto LABEL_24;
  v11 = *v8;
LABEL_12:
  if (v11)
  {
    v12 = *(WTF::StringImpl **)(v11 + 8);
    v13 = *(_DWORD *)(v11 + 4);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (v22)
  {
    if ((WTF::StringImpl::startsWith() & 1) == 0)
      goto LABEL_16;
  }
  else if (v13)
  {
LABEL_16:
    while (1)
    {
      if (++v8 == (uint64_t *)v10)
        goto LABEL_24;
      v11 = *v8;
      if (*v8)
      {
        if (v8 != (uint64_t *)v10)
          goto LABEL_12;
        goto LABEL_24;
      }
    }
  }
  if (v8 == (uint64_t *)v10)
  {
LABEL_24:
    v14 = *((_QWORD *)this + 67);
    if (v14)
      v15 = (WTF::StringImpl *)(v14 + 8 * *(unsigned int *)(v14 - 4));
    else
      v15 = 0;
    v16 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 67);
    v17 = v15;
    if (v15 != v16)
    {
      v18 = v12;
      v17 = v16;
      while (1)
      {
        v19 = *(_QWORD *)v17;
        if (*(_QWORD *)v17)
        {
          v12 = *(WTF::StringImpl **)(v19 + 8);
          v20 = *(_DWORD *)(v19 + 4);
        }
        else
        {
          v12 = 0;
          v20 = 0;
        }
        if (v22)
          break;
        if (!v20)
          goto LABEL_40;
LABEL_32:
        while (1)
        {
          v17 = (WTF::StringImpl *)((char *)v17 + 8);
          if (v17 == v18)
            break;
          if ((unint64_t)(*(_QWORD *)v17 + 1) > 1)
            goto LABEL_36;
        }
        v17 = v18;
LABEL_36:
        if (v17 == v15)
        {
          v17 = v15;
          goto LABEL_40;
        }
      }
      if ((WTF::StringImpl::startsWith() & 1) == 0)
        goto LABEL_32;
    }
LABEL_40:
    v9 = v17 != v15;
    goto LABEL_41;
  }
  v9 = 1;
LABEL_41:
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v12);
    else
      *(_DWORD *)v22 -= 2;
  }
  return v9;
}

BOOL WebKit::WebProcessProxy::checkURLReceivedFromWebProcess(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v6;
  _BOOL8 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11[5];
  WTF::StringImpl *v12[5];

  v11[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v11);
  MEMORY[0x19AEABB24](v12, v11, a2, 0);
  v7 = WebKit::WebProcessProxy::checkURLReceivedFromWebProcess(a1, (const WTF::URL *)v12, a3);
  v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v7;
}

BOOL WebKit::WebProcessProxy::checkURLReceivedFromWebProcess(uint64_t a1, const WTF::URL *a2, int a3)
{
  WebKit::WebBackForwardListItem *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  const WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;
  int v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _BOOL4 v24;
  uint64_t v25;
  WTF::StringImpl *v27;
  NSObject *v28;
  _BOOL8 result;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32[5];
  WTF::StringImpl *v33;
  _BYTE buf[12];
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!WTF::URL::protocolIs()
    || *(_BYTE *)(a1 + 528)
    || WebKit::WebProcessProxy::hasAssumedReadAccessToURL((WebKit::WebProcessProxy *)a1, a2))
  {
    return 1;
  }
  if (!a3)
    goto LABEL_61;
  v6 = (WebKit::WebBackForwardListItem *)WTF::URL::fileSystemPath(a2);
  v7 = WebKit::WebBackForwardListItem::allItems(v6);
  v9 = *v7;
  if (!*v7)
  {
    v12 = 0;
    LODWORD(v10) = 0;
LABEL_18:
    v11 = v9 + 24 * v10;
    goto LABEL_19;
  }
  v10 = *(unsigned int *)(v9 - 4);
  v11 = v9 + 24 * v10;
  if (!*(_DWORD *)(v9 - 12))
  {
    v12 = v9 + 24 * v10;
    goto LABEL_18;
  }
  v12 = *v7;
  if ((_DWORD)v10)
  {
    v13 = 24 * v10;
    v12 = *v7;
    while (*(_OWORD *)v12 == 0 || *(_QWORD *)(v12 + 8) == -1)
    {
      v12 += 24;
      v13 -= 24;
      if (!v13)
      {
        v12 = v11;
        break;
      }
    }
  }
LABEL_19:
  if (v9)
    v15 = v9 + 24 * *(unsigned int *)(v9 - 4);
  else
    v15 = 0;
  if (v15 != v12)
  {
    while (1)
    {
      WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 8) + 56));
      if (!WTF::URL::protocolIs())
        goto LABEL_30;
      WTF::URL::fileSystemPath((WTF::URL *)buf);
      v17 = WTF::equal(v32[0], v33, v16);
      v18 = v32[0];
      v32[0] = 0;
      if (!v18)
        goto LABEL_27;
      if (*(_DWORD *)v18 != 2)
        break;
      WTF::StringImpl::destroy(v18, v8);
      if ((v17 & 1) != 0)
      {
LABEL_28:
        v19 = 1;
        goto LABEL_40;
      }
LABEL_30:
      WTF::URL::URL((uint64_t)v32, (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 8) + 64));
      if (WTF::URL::protocolIs())
      {
        WTF::URL::fileSystemPath((WTF::URL *)v32);
        v19 = WTF::equal(v31, v33, v20);
        v21 = v31;
        v31 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v8);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
      else
      {
        v19 = 0;
      }
      v22 = v32[0];
      v32[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v8);
        else
          *(_DWORD *)v22 -= 2;
      }
LABEL_40:
      v23 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v8);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = v19 == 0;
      if (!v19)
      {
        v25 = v12 + 24;
        v12 = v11;
        if (v25 != v11)
        {
          v12 = v25;
          while (*(_OWORD *)v12 == 0 || *(_QWORD *)(v12 + 8) == -1)
          {
            v12 += 24;
            if (v12 == v11)
            {
              v12 = v11;
              break;
            }
          }
        }
        if (v12 != v15)
          continue;
      }
      goto LABEL_57;
    }
    *(_DWORD *)v18 -= 2;
LABEL_27:
    if ((v17 & 1) != 0)
      goto LABEL_28;
    goto LABEL_30;
  }
  v24 = 1;
LABEL_57:
  v27 = v33;
  v33 = 0;
  if (!v27)
  {
LABEL_60:
    if (v24)
      goto LABEL_61;
    return 1;
  }
  if (*(_DWORD *)v27 != 2)
  {
    *(_DWORD *)v27 -= 2;
    goto LABEL_60;
  }
  WTF::StringImpl::destroy(v27, v8);
  if (!v24)
    return 1;
LABEL_61:
  v28 = qword_1ECE71320;
  result = os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v30 = *(_QWORD *)(a1 + 136);
    if (v30)
      LODWORD(v30) = *(_DWORD *)(v30 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    v35 = 1024;
    v36 = v30;
    _os_log_error_impl(&dword_196BCC000, v28, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::checkURLReceivedFromWebProcess: Received an unexpected URL from the web process", buf, 0x12u);
    return 0;
  }
  return result;
}

void WebKit::WebProcessProxy::createGPUProcessConnection(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  _BYTE v9[11];
  char v10;
  char v11;
  int v12;

  v10 = 0;
  v11 = 0;
  memset(v9, 0, sizeof(v9));
  v12 = 0;
  WebCore::ProcessIdentity::operator=();
  if (*(_BYTE *)(a1 + 1094))
  {
    *(_DWORD *)&v9[4] = *(_DWORD *)(a1 + 1088);
    *(_WORD *)&v9[8] = *(_WORD *)(a1 + 1092);
  }
  v9[10] = *(_BYTE *)(a1 + 779);
  *(_QWORD *)(a1 + 1080) = a2;
  v6 = *(_QWORD *)(a1 + 512);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v8 = (CFTypeRef *)(v7 - 16);
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  CFRetain(v8[1]);
  WebKit::WebProcessPool::createGPUProcessConnection((WebKit::WebProcessPool *)v8, a1, a3, (uint64_t)v9);
  CFRelease(v8[1]);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
}

void WebKit::WebProcessProxy::gpuProcessConnectionDidBecomeUnresponsive(_QWORD *a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1[135] == a2)
  {
    v3 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      v10 = a1[17];
      if (v10)
        LODWORD(v10) = *(_DWORD *)(v10 + 108);
      v11 = 134218240;
      v12 = a1;
      v13 = 1024;
      v14 = v10;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::gpuProcessConnectionDidBecomeUnresponsive", (uint8_t *)&v11, 0x12u);
    }
    v4 = a1[64];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v7 = *(unsigned int **)(v6 + 176);
    if (v7)
    {
      v8 = v7 + 4;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      CFRelease(*(CFTypeRef *)(v6 + 8));
      WebKit::GPUProcessProxy::didBecomeUnresponsive((WebKit::GPUProcessProxy *)v7);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7 + 4);
    }
    else
    {
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
}

void `non-virtual thunk to'WebKit::WebProcessProxy::didReceiveMessage(WebKit::WebProcessProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebProcessProxy::didReceiveMessage((WebKit::WebProcessProxy *)((char *)this - 32), a2, a3);
}

uint64_t `non-virtual thunk to'WebKit::WebProcessProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return WebKit::WebProcessProxy::didReceiveSyncMessage(a1 - 32, a2, a3, a4);
}

unsigned int *WebKit::WebProcessProxy::didClose(WebKit::WebProcessProxy *this, IPC::Connection *a2)
{
  NSObject *v4;
  uint64_t v6;
  int v7;
  _xpc_connection_s *v8;
  int v9;
  WebKit::WebProcessProxy *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v6 = *((_QWORD *)this + 17);
    if (v6)
      v7 = *(_DWORD *)(v6 + 108);
    else
      v7 = 0;
    v8 = (_xpc_connection_s *)*((_QWORD *)a2 + 44);
    if (v8)
      LODWORD(v8) = xpc_connection_get_pid(v8);
    v9 = 134218496;
    v10 = this;
    v11 = 1024;
    v12 = v7;
    v13 = 1024;
    v14 = (int)v8;
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didClose: (web process %d crash)", (uint8_t *)&v9, 0x18u);
  }
  return WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch((uint64_t)this, 5);
}

unsigned int *WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  unsigned int *v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::PublicSuffixStore *v36;
  uint64_t v37;
  WebKit::WebPageProxy **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WebKit::WebPageProxy *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WebKit::WebPageProxy *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const WTF::StringImpl *v55;
  __int128 v56;
  uint64_t v57;
  const WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WebKit::ProvisionalPageProxy *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  void *v68;
  const WTF::StringImpl *v69;
  uint64_t v70;
  WebKit::PageLoadState::Transaction *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80[2];
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  _QWORD *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  WebKit::WebPageProxy **v90;
  unsigned int v91;
  _BYTE buf[18];
  __int16 v93;
  const char *v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v76 = *(_QWORD *)(a1 + 136);
    if (v76)
      LODWORD(v76) = *(_DWORD *)(v76 + 108);
    v77 = "ExceededMemoryLimit";
    switch((int)a2)
    {
      case 0:
        break;
      case 1:
        v77 = "ExceededCPULimit";
        break;
      case 2:
        v77 = "RequestedByClient";
        break;
      case 3:
        v77 = "IdleExit";
        break;
      case 4:
        v77 = "Unresponsive";
        break;
      case 5:
        v77 = "Crash";
        break;
      case 6:
        v77 = "ExceededProcessCountLimit";
        break;
      case 7:
        v77 = "NavigationSwap";
        break;
      case 8:
        v77 = "RequestedByNetworkProcess";
        break;
      case 9:
        v77 = "RequestedByGPUProcess";
        break;
      default:
        v77 = (const char *)&str_10_5;
        break;
    }
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v76;
    v93 = 2082;
    v94 = v77;
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::processDidTerminateOrFailedToLaunch: reason=%{public}s", buf, 0x1Cu);
  }
  v5 = (unsigned int *)(a1 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebProcessProxy>((uint64_t **)a1);
  v8 = *(_QWORD *)(a1 + 768);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    *(_QWORD *)(v8 + 16) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, v7);
  }
  WebKit::WebProcessProxy::mainPages((_QWORD *)a1, (uint64_t)&v90);
  v88 = 0;
  v89 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E34D7CB8;
  v10[1] = &v88;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v11 = *(_QWORD *)(a1 + 576);
  if (v11 && (v12 = *(unsigned int *)(v11 - 12), (_DWORD)v12))
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1973A903CLL);
    }
    v13 = WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)&buf[8] = v12;
    *(_QWORD *)buf = v13;
  }
  else
  {
    v13 = 0;
  }
  v78 = a1;
  v14 = (uint64_t *)(a1 + 576);
  v15 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)v14);
  v17 = v15;
  v18 = v16;
  if (*v14)
    v19 = *v14 + 8 * *(unsigned int *)(*v14 - 4);
  else
    v19 = 0;
  if ((_QWORD *)v19 != v15)
  {
    LODWORD(v20) = 0;
    do
    {
      v21 = *(_QWORD *)(*v17 + 8);
      if (v21)
      {
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v21 + 8), *(_QWORD *)(*v17 + 8));
        v22 = *(unsigned int **)(v21 + 8);
        if (v22)
        {
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
          LODWORD(v20) = *(_DWORD *)&buf[12];
          v13 = *(_QWORD *)buf;
        }
      }
      else
      {
        v22 = 0;
      }
      *(_QWORD *)(v13 + 8 * v20) = v22;
      v20 = (v20 + 1);
      *(_DWORD *)&buf[12] = v20;
      while (++v17 != v18)
      {
        if ((unint64_t)(*v17 + 1) > 1)
          goto LABEL_28;
      }
      v17 = v18;
LABEL_28:
      ;
    }
    while (v17 != (_QWORD *)v19);
    if ((_DWORD)v20)
    {
      v24 = 8 * v20;
      do
      {
        if (*(_QWORD *)v13)
        {
          if (*(_QWORD *)(*(_QWORD *)v13 + 8))
          {
            v80[0] = *(WTF::StringImpl **)v13;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v14, v80))(*(void (**)(_QWORD *, _QWORD))(*v10 + 16))(v10, *(_QWORD *)(*(_QWORD *)v13 + 8));
          }
        }
        v13 += 8;
        v24 -= 8;
      }
      while (v24);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v16);
  (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  v25 = *(_QWORD **)(v78 + 720);
  v85 = v25;
  v26 = *(unsigned int *)(v78 + 732);
  v86 = *(_DWORD *)(v78 + 728);
  v87 = v26;
  *(_QWORD *)buf = 0;
  *(_QWORD *)(v78 + 720) = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)(v78 + 728) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v27);
  if ((_DWORD)v26)
  {
    v28 = 8 * v26;
    do
    {
      v29 = *v25;
      *v25++ = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 16))(v29, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      v28 -= 8;
    }
    while (v28);
  }
  if (*(_BYTE *)(v78 + 872))
  {
    v30 = *(_QWORD *)(v78 + 552);
    if (!v30 || !*(_DWORD *)(v30 - 12))
    {
      v31 = *(_QWORD *)(v78 + 512);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 8);
        if (v32)
          v33 = v32 - 16;
        else
          v33 = 0;
      }
      else
      {
        v33 = 0;
      }
      CFRetain(*(CFTypeRef *)(v33 + 8));
      v34 = *(_QWORD *)(v78 + 136);
      if (v34)
        v35 = *(unsigned int *)(v34 + 108);
      else
        v35 = 0;
      WebKit::WebContextClient::serviceWorkerProcessDidCrash((_QWORD *)(v33 + 208), v33, v35, a2);
      CFRelease(*(CFTypeRef *)(v33 + 8));
    }
  }
  WebKit::WebProcessProxy::shutDown((WebKit::WebProcessProxy *)v78);
  v37 = v91;
  if ((_DWORD)a2 == 5 && v91 == 1)
  {
    v38 = v90;
    WebCore::PublicSuffixStore::singleton(v36);
    v80[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v80);
    WebKit::WebPageProxy::currentURL(*v38, &v79);
    MEMORY[0x19AEABB24](buf, v80, &v79, 0);
    WTF::URL::host((WTF::URL *)buf);
    WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
    v40 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v39);
      else
        *(_DWORD *)v40 -= 2;
    }
    v44 = v79;
    v79 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v39);
      else
        *(_DWORD *)v44 -= 2;
    }
    v45 = v80[0];
    v80[0] = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v39);
      else
        *(_DWORD *)v45 -= 2;
    }
    v46 = v84;
    if (!v84)
      goto LABEL_83;
    if (*((_DWORD *)v84 + 1))
    {
      v47 = *v38;
      WebCore::DiagnosticLoggingKeys::domainCausingCrashKey(v84);
      v48 = *(_QWORD *)(*((_QWORD *)v47 + 33) + 24);
      if ((v48 & 0x8000000000000000) == 0 || v48 == -1)
      {
        v49 = *((_QWORD *)v47 + 16);
        if (v49)
          (*(void (**)(uint64_t, WebKit::WebPageProxy *, _BYTE *, WTF::StringImpl **))(*(_QWORD *)v49 + 40))(v49, v47, buf, &v84);
      }
      v50 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v39);
        else
          *(_DWORD *)v50 -= 2;
      }
      v46 = v84;
      v84 = 0;
      if (!v46)
        goto LABEL_83;
    }
    else
    {
      v84 = 0;
    }
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v39);
    else
      *(_DWORD *)v46 -= 2;
LABEL_83:
    v37 = 1;
    goto LABEL_84;
  }
  if (!v91)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    v37 = 0;
    LOBYTE(v43) = 1;
    goto LABEL_88;
  }
  if (v91 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x1973A9044);
  }
  v38 = v90;
LABEL_84:
  v41 = (WTF *)WTF::fastMalloc((WTF *)(16 * v37));
  v42 = 0;
  v43 = 8 * v37;
  do
  {
    v51 = v38[v42];
    v52 = *((_QWORD *)v51 + 4);
    v53 = *(_QWORD *)(v52 + 960);
    if (v53)
    {
      CFRetain(*(CFTypeRef *)(v53 + 8));
      v51 = v38[v42];
    }
    *(_QWORD *)buf = v53;
    *(_QWORD *)&buf[8] = v52 + 944;
    ++*(_DWORD *)(v52 + 1316);
    WebKit::WebPageProxy::resetStateAfterProcessTermination((_BOOL8)v51, a2);
    *(_OWORD *)v80 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v54, v55);
    v56 = *(_OWORD *)v80;
    v80[0] = 0;
    *((_OWORD *)v41 + v42) = v56;
    v80[1] = 0;
    ++v42;
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v80, v57, v58);
    v43 -= 8;
  }
  while (v43);
LABEL_88:
  if (HIDWORD(v89))
  {
    v59 = v88;
    v60 = 8 * HIDWORD(v89);
    do
    {
      if (*(_QWORD *)v59)
      {
        v61 = *(WebKit::ProvisionalPageProxy **)(*(_QWORD *)v59 + 8);
        if (v61)
          WebKit::ProvisionalPageProxy::processDidTerminate(v61);
      }
      v59 += 8;
      v60 -= 8;
    }
    while (v60);
  }
  if ((v43 & 1) == 0)
  {
    v62 = (uint64_t *)v90;
    v63 = 8 * v37;
    do
    {
      v64 = *v62++;
      WebKit::WebPageProxy::dispatchProcessDidTerminate(v64, a2);
      v63 -= 8;
    }
    while (v63);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v78 + 560), buf);
  v65 = *(_QWORD *)(v78 + 560);
  if (v65)
  {
    v66 = *(unsigned int *)(v65 - 4);
    v67 = (WTF::StringImpl *)(v65 + 8 * v66);
  }
  else
  {
    v67 = 0;
    v66 = 0;
  }
  v80[0] = (WTF::StringImpl *)(v78 + 560);
  v80[1] = v67;
  v81 = v67;
  v82 = v67;
  v83 = v65 + 8 * v66;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(v80);
  while (*(WTF::StringImpl **)&buf[8] != v80[1])
  {
    WebKit::RemotePageProxy::processDidTerminate(*(_QWORD *)(**(_QWORD **)&buf[8] + 8));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  if ((_DWORD)v42)
  {
    v70 = 16 * v42;
    v71 = v41;
    do
    {
      WebKit::PageLoadState::Transaction::~Transaction(v71, (uint64_t)v68, v69);
      v71 = (WebKit::PageLoadState::Transaction *)(v72 + 16);
      v70 -= 16;
    }
    while (v70);
  }
  if (v41)
    WTF::fastFree(v41, v68);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v68);
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v88, v73);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v74);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *`non-virtual thunk to'WebKit::WebProcessProxy::didClose(WebKit::WebProcessProxy *this, IPC::Connection *a2)
{
  return WebKit::WebProcessProxy::didClose((WebKit::WebProcessProxy *)((char *)this - 32), a2);
}

unsigned int *WebKit::WebProcessProxy::didReceiveInvalidMessage(WebKit::WebProcessProxy *a1, IPC::Connection *a2, WTF::StringImpl *a3)
{
  WebKit::AuxiliaryProcessProxy::logInvalidMessage(a1, (uint64_t)a2, a3);
  WebKit::WebProcessPool::didReceiveInvalidMessage(a3);
  (*(void (**)(WebKit::WebProcessProxy *))(*(_QWORD *)a1 + 80))(a1);
  return WebKit::WebProcessProxy::didClose(a1, a2);
}

unsigned int *`non-virtual thunk to'WebKit::WebProcessProxy::didReceiveInvalidMessage(uint64_t a1, IPC::Connection *a2, WTF::StringImpl *a3)
{
  return WebKit::WebProcessProxy::didReceiveInvalidMessage((WebKit::WebProcessProxy *)(a1 - 32), a2, a3);
}

unsigned int *WebKit::WebProcessProxy::didBecomeUnresponsive(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  CFTypeRef **v9;
  uint64_t v10;
  CFTypeRef *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  _BYTE buf[12];
  _DWORD v24[3];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v18 = *((_QWORD *)this + 17);
    if (v18)
      LODWORD(v18) = *(_DWORD *)(v18 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    LOWORD(v24[0]) = 1024;
    *(_DWORD *)((char *)v24 + 2) = v18;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didBecomeUnresponsive:", buf, 0x12u);
  }
  v3 = (unsigned int *)((char *)this + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *((_DWORD *)this + 179) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  v20 = v5;
  v6 = *((_DWORD *)this + 182);
  v7 = *((unsigned int *)this + 183);
  *((_QWORD *)this + 91) = 0;
  v21 = v6;
  v22 = v7;
  WebKit::WebProcessProxy::pages(this, (uint64_t)buf);
  if (v24[0])
  {
    v9 = *(CFTypeRef ***)buf;
    v10 = 8 * v24[0];
    do
    {
      v11 = *v9++;
      CFRetain(v11[1]);
      WebKit::WebPageProxy::processDidBecomeUnresponsive((WebKit::WebPageProxy *)v11);
      CFRelease(v11[1]);
      v10 -= 8;
    }
    while (v10);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v8);
  if ((_DWORD)v7)
  {
    v13 = 8 * v7;
    do
    {
      v14 = *v5;
      *v5++ = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v13 -= 8;
    }
    while (v13);
  }
  if (*((_BYTE *)this + 952) || *((_BYTE *)this + 872))
  {
    v15 = *((_QWORD *)this + 69);
    if (!v15 || !*(_DWORD *)(v15 - 12))
    {
      v16 = qword_1ECE71578;
      if (os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_ERROR))
      {
        v19 = *((_QWORD *)this + 17);
        if (v19)
          LODWORD(v19) = *(_DWORD *)(v19 + 108);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = this;
        LOWORD(v24[0]) = 1024;
        *(_DWORD *)((char *)v24 + 2) = v19;
        _os_log_error_impl(&dword_196BCC000, v16, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didBecomeUnresponsive: Terminating worker-only web process because it is unresponsive", buf, 0x12u);
      }
      WebKit::WebProcessProxy::disableRemoteWorkers((uint64_t)this, 3);
      (*(void (**)(WebKit::WebProcessProxy *))(*(_QWORD *)this + 80))(this);
    }
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v12);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)this + 4);
}

uint64_t WebKit::WebProcessProxy::didBecomeResponsive(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  CFTypeRef **v5;
  uint64_t v6;
  CFTypeRef *v7;
  _BYTE v9[12];
  _DWORD v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 17);
    if (v3)
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    *(_DWORD *)v9 = 134218240;
    *(_QWORD *)&v9[4] = this;
    LOWORD(v10[0]) = 1024;
    *(_DWORD *)((char *)v10 + 2) = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didBecomeResponsive:", v9, 0x12u);
  }
  *((_DWORD *)this + 179) = 1;
  WebKit::WebProcessProxy::pages(this, (uint64_t)v9);
  if (v10[0])
  {
    v5 = *(CFTypeRef ***)v9;
    v6 = 8 * v10[0];
    do
    {
      v7 = *v5++;
      CFRetain(v7[1]);
      WebKit::WebPageProxy::processDidBecomeResponsive((WebKit::WebPageProxy *)v7);
      CFRelease(v7[1]);
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v4);
}

uint64_t WebKit::WebProcessProxy::willChangeIsResponsive(WebKit::WebProcessProxy *this)
{
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int v7;

  WebKit::WebProcessProxy::pages(this, (uint64_t)&v6);
  if (v7)
  {
    v2 = v6;
    v3 = 8 * v7;
    do
    {
      v4 = *v2++;
      CFRetain(*(CFTypeRef *)(v4 + 8));
      WebKit::PageLoadState::callObserverCallback(*(_QWORD *)(v4 + 32) + 944, (void (*)(_QWORD *))0xC0, 1);
      CFRelease(*(CFTypeRef *)(v4 + 8));
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v1);
}

uint64_t WebKit::WebProcessProxy::didChangeIsResponsive(WebKit::WebProcessProxy *this)
{
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int v7;

  WebKit::WebProcessProxy::pages(this, (uint64_t)&v6);
  if (v7)
  {
    v2 = v6;
    v3 = 8 * v7;
    do
    {
      v4 = *v2++;
      CFRetain(*(CFTypeRef *)(v4 + 8));
      WebKit::PageLoadState::callObserverCallback(*(_QWORD *)(v4 + 32) + 944, (void (*)(_QWORD *))0xC8, 1);
      CFRelease(*(CFTypeRef *)(v4 + 8));
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v1);
}

unsigned int *`non-virtual thunk to'WebKit::WebProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebProcessProxy::didFinishLaunching(a1 - 24, a2, a3);
}

void WebKit::WebProcessProxy::didDestroyFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a5;
  v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 552), &v10);
  if (v8)
  {
    v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    WebKit::WebPageProxy::didDestroyFrame((_QWORD *)v9, a2, a3, a4);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

WTF::StringImpl *WebKit::WebProcessProxy::addPreviouslyApprovedFileURL(WebKit::WebProcessProxy *this, const WTF::URL *a2)
{
  WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *result;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::URL::fileSystemPath(a2);
  result = v7;
  if (v7)
  {
    if (*((_DWORD *)v7 + 1))
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 68, &v7, v4, (uint64_t)&v6);
      result = v7;
      v7 = 0;
      if (!result)
        return result;
    }
    else
    {
      v7 = 0;
    }
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::wasPreviouslyApprovedFileURL(WebKit::WebProcessProxy *this, const WTF::URL *a2)
{
  WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int i;
  int v13;
  WTF *v14;
  WTF::StringImpl *v15;

  WTF::URL::fileSystemPath(a2);
  v5 = v15;
  if (!v15)
    return 0;
  if (*((_DWORD *)v15 + 1) && (v6 = *((_QWORD *)this + 68)) != 0)
  {
    v9 = *(_DWORD *)(v6 - 8);
    v10 = *((_DWORD *)v15 + 4);
    if (v10 >= 0x100)
      v11 = v10 >> 8;
    else
      v11 = WTF::StringImpl::hashSlowCase(v15);
    for (i = 0; ; v11 = i + v13)
    {
      v13 = v11 & v9;
      v14 = *(WTF **)(v6 + 8 * (v11 & v9));
      if (v14 != (WTF *)-1)
      {
        if (!v14)
        {
          v7 = 0;
          goto LABEL_20;
        }
        if ((WTF::equal(v14, v15, v4) & 1) != 0)
          break;
      }
      ++i;
    }
    v7 = 1;
LABEL_20:
    v5 = v15;
  }
  else
  {
    v7 = 0;
  }
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v3);
  else
    *(_DWORD *)v5 -= 2;
  return v7;
}

void WebKit::WebProcessProxy::recordUserGestureAuthorizationToken(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  int v44;
  __int16 v45;
  char v46;

  *(_QWORD *)&v43 = a3;
  *((_QWORD *)&v43 + 1) = a4;
  if (__PAIR128__(a4, a3) < 2)
    return;
  v5 = (uint64_t *)(a1 + 616);
  v6 = *(_QWORD *)(a1 + 616);
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 616), 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = (uint64_t *)(v6 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_13:
    v16 = v12[1];
    *v12 = a2;
    v12[1] = 0;
    if (v16)
      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v16, (void *)a2);
    v17 = *v5;
    if (*v5)
      v18 = *(_DWORD *)(v17 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *v5;
    if (*v5)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(v19 - 16) + v20);
    v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
        goto LABEL_24;
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_24;
    }
    v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5, v12);
    goto LABEL_24;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != a2)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v7;
    v12 = (uint64_t *)(v6 + 16 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v12 = v14;
      }
      goto LABEL_13;
    }
  }
LABEL_24:
  v25 = v12[1];
  v23 = v12 + 1;
  v24 = v25;
  v26 = v43;
  if (v25
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v23),
        (v24 = *v23) != 0))
  {
    v27 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v27 = 0;
  }
  v44 = -1640531527;
  v45 = 0;
  v46 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v44, &v43);
  v28 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v44) & v27;
  v29 = (_QWORD *)(v24 + 32 * v28);
  v31 = *v29;
  v30 = v29[1];
  if (*(_OWORD *)v29 == 0)
  {
LABEL_38:
    *(_OWORD *)v29 = v43;
    v35 = API::Object::newObject(0x40uLL, 105);
    *(_QWORD *)v35 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v35);
    *(_QWORD *)v35 = &off_1E34C4510;
    *(_BYTE *)(v35 + 16) = 0;
    *(_OWORD *)(v35 + 32) = v26;
    *(_BYTE *)(v35 + 48) = 1;
    v36 = v29[2];
    v29[2] = v35;
    if (v36)
      CFRelease(*(CFTypeRef *)(v36 + 8));
    v37 = *v23;
    if (*v23)
      v38 = *(_DWORD *)(v37 - 12) + 1;
    else
      v38 = 1;
    *(_DWORD *)(v37 - 12) = v38;
    v39 = *v23;
    if (*v23)
      v40 = *(_DWORD *)(v39 - 12);
    else
      v40 = 0;
    v41 = (*(_DWORD *)(v39 - 16) + v40);
    v42 = *(unsigned int *)(v39 - 4);
    if (v42 > 0x400)
    {
      if (v42 > 2 * v41)
        return;
    }
    else if (3 * v42 > 4 * v41)
    {
      return;
    }
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v23);
  }
  else
  {
    v32 = 0;
    v33 = 1;
    while (v30 != *((_QWORD *)&v43 + 1) || v31 != (_QWORD)v43)
    {
      if (!(v31 ^ 1 | v30))
        v32 = v29;
      v28 = ((_DWORD)v28 + v33) & v27;
      v29 = (_QWORD *)(v24 + 32 * v28);
      v31 = *v29;
      v30 = v29[1];
      ++v33;
      if (*(_OWORD *)v29 == 0)
      {
        if (v32)
        {
          *v32 = 0;
          v32[1] = 0;
          v32[2] = 0;
          --*(_DWORD *)(*v23 - 16);
          v29 = v32;
        }
        goto LABEL_38;
      }
    }
  }
}

void WebKit::WebProcessProxy::userInitiatedActivity(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  WebKit *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  __int16 v24;
  char v25;

  if (!*(_BYTE *)(a2 + 16))
  {
    v18 = 0;
    goto LABEL_28;
  }
  v5 = (uint64_t *)(a1 + 608);
  v6 = *(_QWORD *)(a1 + 608);
  if (v6
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(a1 + 608), 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v23 = -1640531527;
  v24 = 0;
  v25 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v23, (_QWORD *)a2);
  v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v23) & v7;
  v9 = (_QWORD *)(v6 + 24 * v8);
  v11 = *v9;
  v10 = v9[1];
  if (*(_OWORD *)v9 != 0)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != *(_QWORD *)a2 || v10 != *(_QWORD *)(a2 + 8))
    {
      if (v10 == -1)
        v12 = v9;
      v8 = (v8 + v13) & v7;
      v9 = (_QWORD *)(v6 + 24 * v8);
      v11 = *v9;
      v10 = v9[1];
      ++v13;
      if (*(_OWORD *)v9 == 0)
      {
        if (v12)
        {
          *v12 = 0;
          v12[1] = 0;
          v12[2] = 0;
          --*(_DWORD *)(*v5 - 16);
          v9 = v12;
        }
        goto LABEL_14;
      }
    }
    goto LABEL_26;
  }
LABEL_14:
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v14 = (WebKit *)API::Object::newObject(0x40uLL, 105);
  *(_QWORD *)v14 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v14);
  *(_QWORD *)v14 = &off_1E34C4510;
  *((_BYTE *)v14 + 16) = 0;
  *((_BYTE *)v14 + 32) = 0;
  *((_BYTE *)v14 + 48) = 0;
  v15 = v9[2];
  v9[2] = v14;
  if (v15)
    CFRelease(*(CFTypeRef *)(v15 + 8));
  v16 = *v5;
  if (*v5)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v19 = *v5;
  if (*v5)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 <= 0x400)
  {
    if (3 * v22 > 4 * v21)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (v22 <= 2 * v21)
LABEL_25:
    v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v5, (uint64_t)v9);
LABEL_26:
  v18 = v9[2];
  if (v18)
    CFRetain(*(CFTypeRef *)(v18 + 8));
LABEL_28:
  *a3 = v18;
}

uint64_t WebKit::WebProcessProxy::consumeIfNotVerifiablyFromUIProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v7 = (uint64_t *)(a1 + 616);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 616), &v12);
  v9 = (_QWORD *)result;
  v10 = *(_QWORD *)(a1 + 616);
  if (v10)
    v10 += 16 * *(unsigned int *)(v10 - 4);
  if (v10 == result
    || !*(_BYTE *)(a4 + 16)
    || (result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)(result + 8), (uint64_t *)a4), !(_DWORD)result))
  {
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  if (*v7)
  {
    v11 = *v7 + 16 * *(unsigned int *)(*v7 - 4);
    if ((_QWORD *)v11 == v9)
      return result;
  }
  else
  {
    if (!v9)
      return result;
    v11 = 0;
  }
  if ((_QWORD *)v11 != v9)
    return (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v7, v9);
  return result;
}

void WebKit::WebProcessProxy::didDestroyUserGestureToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  uint64_t *v40;
  BOOL v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  int v53;
  __int16 v54;
  char v55;
  _OWORD v56[2];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v51[1] = a4;
  v52 = a2;
  v51[0] = a3;
  v7 = (uint64_t *)(a1 + 616);
  v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 616), &v52);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 616);
  if (v10)
    v10 += 16 * *(unsigned int *)(v10 - 4);
  if (v10 == v8)
    return;
  v11 = *(_QWORD *)(a1 + 608);
  if (!v11)
    return;
  v12 = (uint64_t *)(a1 + 608);
  v13 = *(_DWORD *)(v11 - 8);
  LODWORD(v56[0]) = -1640531527;
  WORD2(v56[0]) = 0;
  BYTE6(v56[0]) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)v56, v51);
  v14 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v56) & v13;
  v15 = (uint64_t *)(v11 + 24 * v14);
  v16 = *v15;
  v17 = v15[1];
  if (*v15 == a3 && v17 == a4)
  {
LABEL_16:
    v21 = *v12;
    if (!*v12)
      goto LABEL_21;
  }
  else
  {
    v19 = 1;
    while (v16 | v17)
    {
      v14 = (v14 + v19) & v13;
      v15 = (uint64_t *)(v11 + 24 * v14);
      v16 = *v15;
      v17 = v15[1];
      ++v19;
      if (*v15 == a3 && v17 == a4)
        goto LABEL_16;
    }
    v21 = *v12;
    if (!*v12)
      return;
    v15 = (uint64_t *)(v21 + 24 * *(unsigned int *)(v21 - 4));
  }
  v21 += 24 * *(unsigned int *)(v21 - 4);
LABEL_21:
  if ((uint64_t *)v21 != v15)
  {
    v22 = v15[2];
    v15[2] = 0;
    v23 = (uint64_t *)*v12;
    if (!*v12 || (v23 += 3 * *((unsigned int *)v23 - 1), v23 != v15))
    {
      if (v23 != v15)
      {
        *(_OWORD *)v15 = xmmword_1978CF7D0;
        v15[2] = 0;
        ++*(_DWORD *)(*v12 - 16);
        v24 = *v12;
        v25 = *v12 ? *(_DWORD *)(v24 - 12) - 1 : -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v12;
        if (*v12)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v12, v28 >> 1, 0);
        }
      }
    }
    if (v22)
    {
      if (!*(_BYTE *)(v22 + 48))
        goto LABEL_77;
      v30 = *(_OWORD *)(v22 + 48);
      v56[0] = *(_OWORD *)(v22 + 32);
      v56[1] = v30;
      if (!(_BYTE)v30)
        __break(1u);
      v31 = v9 + 1;
      v32 = v9[1];
      if (!v32)
        goto LABEL_70;
      v33 = *(_DWORD *)(v32 - 8);
      v53 = -1640531527;
      v54 = 0;
      v55 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v53, v56);
      v34 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v53) & v33;
      v35 = (uint64_t *)(v32 + 32 * v34);
      v36 = *v35;
      v37 = v35[1];
      if (v37 == *((_QWORD *)&v56[0] + 1) && v36 == *(_QWORD *)&v56[0])
      {
LABEL_50:
        v42 = (_QWORD *)(v32 + 32 * v34);
        v43 = *v31;
        if (!*v31)
        {
          v44 = 0;
LABEL_55:
          if (v44 != v42)
          {
            v45 = v42[2];
            v42[1] = 0;
            v42[2] = 0;
            *v42 = 1;
            if (v45)
              CFRelease(*(CFTypeRef *)(v45 + 8));
            ++*(_DWORD *)(*v31 - 16);
            v46 = *v31;
            if (*v31)
              v47 = *(_DWORD *)(v46 - 12) - 1;
            else
              v47 = -1;
            *(_DWORD *)(v46 - 12) = v47;
            v43 = *v31;
            if (!*v31)
              goto LABEL_70;
            v48 = *(_DWORD *)(v43 - 4);
            if (6 * *(_DWORD *)(v43 - 12) >= v48 || v48 <= 8)
            {
LABEL_69:
              if (*(_DWORD *)(v43 - 12))
                goto LABEL_77;
              goto LABEL_70;
            }
            WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v9 + 1, v48 >> 1);
            v43 = *v31;
          }
          if (v43)
            goto LABEL_69;
LABEL_70:
          if (*v7)
          {
            v50 = *v7 + 16 * *(unsigned int *)(*v7 - 4);
            if ((_QWORD *)v50 == v9)
              goto LABEL_77;
LABEL_75:
            if ((_QWORD *)v50 != v9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v7, v9);
            goto LABEL_77;
          }
          if (v9)
          {
            v50 = 0;
            goto LABEL_75;
          }
LABEL_77:
          CFRelease(*(CFTypeRef *)(v22 + 8));
          return;
        }
      }
      else
      {
        v39 = 1;
        while (v36 | v37)
        {
          v34 = ((_DWORD)v34 + v39) & v33;
          v40 = (uint64_t *)(v32 + 32 * v34);
          v36 = *v40;
          v37 = v40[1];
          v41 = v37 == *((_QWORD *)&v56[0] + 1) && v36 == *(_QWORD *)&v56[0];
          ++v39;
          if (v41)
            goto LABEL_50;
        }
        v43 = *v31;
        if (!*v31)
          goto LABEL_70;
        v42 = (_QWORD *)(v43 + 32 * *(unsigned int *)(v43 - 4));
      }
      v44 = (_QWORD *)(v43 + 32 * *(unsigned int *)(v43 - 4));
      if (v44 == v42)
        goto LABEL_69;
      goto LABEL_55;
    }
  }
}

uint64_t WebKit::WebProcessProxy::shouldTerminate(WebKit::WebProcessProxy *a1, uint64_t *a2)
{
  uint64_t canTerminateAuxiliaryProcess;
  uint64_t v5;

  canTerminateAuxiliaryProcess = WebKit::WebProcessProxy::canTerminateAuxiliaryProcess(a1);
  if ((_DWORD)canTerminateAuxiliaryProcess)
    WebKit::WebProcessProxy::shutDown(a1);
  v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, canTerminateAuxiliaryProcess);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::WebProcessProxy::notifyHasMouseDeviceChanged(WebKit::WebProcessProxy *this)
{
  char v1;
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v9;
  uint64_t *v10;
  int v11;

  v1 = (char)this;
  WebKit::WebProcessProxy::allProcesses((uint64_t)&v10);
  if (v11)
  {
    v3 = v10;
    v4 = &v10[v11];
    do
    {
      v5 = *v3;
      v6 = (unsigned int *)(*v3 + 16);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v9 = v1;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasMouseDevice>(v5, &v9, 0, 0);
      if (v5)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
      ++v3;
    }
    while (v3 != v4);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasMouseDevice>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2633;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::WebProcessProxy::notifyHasStylusDeviceChanged(WebKit::WebProcessProxy *this)
{
  char v1;
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v9;
  uint64_t *v10;
  int v11;

  v1 = (char)this;
  WebKit::WebProcessProxy::allProcesses((uint64_t)&v10);
  if (v11)
  {
    v3 = v10;
    v4 = &v10[v11];
    do
    {
      v5 = *v3;
      v6 = (unsigned int *)(*v3 + 16);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v9 = v1;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasStylusDevice>(v5, &v9, 0, 0);
      if (v5)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
      ++v3;
    }
    while (v3 != v4);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasStylusDevice>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2634;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

IPC::Encoder *WebKit::WebProcessProxy::fetchWebsiteData(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  NSObject *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *result;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  _BYTE buf[18];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 136);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::fetchWebsiteData: Taking a background assertion because the Web process is fetching Website data", buf, 0x12u);
  }
  v9 = (unsigned int *)(a1 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *a4;
  *a4 = 0;
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2588;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v20 = (IPC::Encoder *)v12;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 4uLL, 4) = a3;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = &off_1E34D7CE0;
  v13[1] = a1;
  v13[2] = a1;
  v13[3] = v11;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)buf = v13;
  *(_QWORD *)&buf[8] = v14;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v20, 0, (uint64_t)buf, 1);
  if (buf[16])
  {
    v16 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

IPC::Encoder *WebKit::WebProcessProxy::deleteWebsiteData(uint64_t a1, double a2, uint64_t a3, int a4, uint64_t *a5)
{
  NSObject *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  IPC::Encoder *result;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  _BYTE buf[18];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v9 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 136);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::deleteWebsiteData: Taking a background assertion because the Web process is deleting Website data", buf, 0x12u);
  }
  v11 = (unsigned int *)(a1 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *a5;
  *a5 = 0;
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 2579;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v22 = (IPC::Encoder *)v14;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 4uLL, 4) = a4;
  *(double *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = a2;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = &off_1E34D7D08;
  v15[1] = a1;
  v15[2] = a1;
  v15[3] = v13;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)buf = v15;
  *(_QWORD *)&buf[8] = v16;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v22, 0, (uint64_t)buf, 1);
  if (buf[16])
  {
    v18 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

IPC::Encoder *WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  NSObject *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  IPC::Encoder *result;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  _BYTE buf[18];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v9 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 136);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::deleteWebsiteDataForOrigins: Taking a background assertion because the Web process is deleting Website data for several origins", buf, 0x12u);
  }
  v11 = (unsigned int *)(a1 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *a5;
  *a5 = 0;
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 2581;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v22 = (IPC::Encoder *)v14;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 4uLL, 4) = a3;
  IPC::VectorArgumentCoder<false,WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v14, a4);
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = &off_1E34D7D30;
  v15[1] = a1;
  v15[2] = a1;
  v15[3] = v13;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)buf = v15;
  *(_QWORD *)&buf[8] = v16;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v22, 0, (uint64_t)buf, 1);
  if (buf[16])
  {
    v18 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::transformHandlesToObjects(API::Object *)::Transformer::~Transformer(uint64_t result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(unsigned int **)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = result;
      WTF::fastFree((WTF *)v2, a2);
      return v5;
    }
  }
  return result;
}

void WebKit::WebProcessProxy::sendProcessDidResume(WebKit::WebProcessProxy *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  _BYTE buf[12];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)a1 + 17);
    if (v3)
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    v14 = 1024;
    v15 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::sendProcessDidResume:", buf, 0x12u);
  }
  v4 = *((_QWORD *)a1 + 17);
  if (v4 && *(_BYTE *)(v4 + 104) || *((_QWORD *)a1 + 18))
  {
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 2605;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v12 = (IPC::Encoder *)v5;
    buf[0] = 0;
    BYTE2(v15) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)a1, &v12, 0, (uint64_t)buf, 1);
    if (BYTE2(v15))
    {
      v7 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    v8 = v12;
    *(double *)&v12 = 0.0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v6);
      WTF::fastFree(v9, v10);
    }
    v11 = WebKit::WebProcessProxy::processPoolIfExists(a1);
    if (v11)
    {
      *(double *)&v12 = (double)(20000 * *(_DWORD *)(*(_QWORD *)(v11 + 568) + 8)) / 1000.0;
      *(_QWORD *)buf = &v12;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHiddenPageDOMTimerThrottlingIncreaseLimit>((uint64_t)a1, (uint64_t **)buf);
    }
  }
}

uint64_t WebKit::WebProcessProxy::processPoolIfExists(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  WebKit::WebProcessProxy *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 778) || *((_BYTE *)this + 712))
  {
    v2 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      v6 = *((_QWORD *)this + 17);
      if (v6)
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      v7 = 134218240;
      v8 = this;
      v9 = 1024;
      v10 = v6;
      _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::processPoolIfExists: trying to get WebProcessPool from an inactive WebProcessProxy", (uint8_t *)&v7, 0x12u);
    }
  }
  v3 = *((_QWORD *)this + 64);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    return v4 - 16;
  else
    return 0;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHiddenPageDOMTimerThrottlingIncreaseLimit>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  char v12;
  IPC::Encoder *v13;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2636;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v13 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  LOBYTE(v11) = 0;
  v12 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v13, 0, (uint64_t)&v11, 1);
  if (v12)
  {
    v7 = v11;
    v11 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::didDropLastAssertion(WebKit::WebProcessProxy *this)
{
  WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::WebProcessProxy *)((char *)this + 416));
  return WebKit::WebProcessProxy::updateRuntimeStatistics((uint64_t)this);
}

IPC::Encoder *WebKit::WebProcessProxy::prepareToDropLastAssertion(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  IPC::Encoder *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  _QWORD v13[2];
  char v14;
  IPC::Encoder *v15;

  if (*(_BYTE *)(a1 + 712)
    || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 592))
    || WebKit::WebProcessProxy::canTerminateAuxiliaryProcess((WebKit::WebProcessProxy *)a1)
    && WebKit::WebProcessProxy::canBeAddedToWebProcessCache((WebKit::WebProcessProxy *)a1))
  {
    v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 2616;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v15 = (IPC::Encoder *)v6;
    v7 = *a2;
    *a2 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34D7D80;
    v8[1] = v7;
    v13[0] = v8;
    v13[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v14 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v15, 0, (uint64_t)v13, 0);
    if (v14)
    {
      v10 = v13[0];
      v13[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v11, v12);
    }
  }
  return result;
}

const char *WebKit::WebProcessProxy::clientName(WebKit::WebProcessProxy *this)
{
  return "WebProcess";
}

unsigned int *WebKit::WebProcessProxy::isResponsiveWithLazyStop(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  if (this[179])
  {
    v1 = (uint64_t)this;
    if (!*((_BYTE *)this + 105))
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(this + 2, (uint64_t)this);
      v2 = *(unsigned int **)(v1 + 8);
      if (v2)
      {
        do
          v3 = __ldaxr(v2);
        while (__stlxr(v3 + 1, v2));
      }
      v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v4 = &off_1E34D7DF8;
      *((_QWORD *)v4 + 1) = v2;
      v5 = v4;
      WebKit::AuxiliaryProcessProxy::checkForResponsiveness(v1, (uint64_t *)&v5, 1);
      this = v5;
      if (v5)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return this;
}

uint64_t WebKit::WebProcessProxy::shouldConfigureJSCForTesting(WebKit::WebProcessProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 64) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + 94);
}

uint64_t `non-virtual thunk to'WebKit::WebProcessProxy::shouldConfigureJSCForTesting(WebKit::WebProcessProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 61) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + 94);
}

uint64_t WebKit::WebProcessProxy::isJITEnabled(WebKit::WebProcessProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 64) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + 95);
}

uint64_t `non-virtual thunk to'WebKit::WebProcessProxy::isJITEnabled(WebKit::WebProcessProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 61) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + 95);
}

unsigned __int8 *WebKit::WebProcessProxy::processTerminated(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  WebKit::WebProcessProxy *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 17);
    if (v3)
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    v5 = 134218240;
    v6 = this;
    v7 = 1024;
    v8 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::processTerminated:", (uint8_t *)&v5, 0x12u);
  }
  return WebKit::BackgroundProcessResponsivenessTimer::processTerminated((WebKit::WebProcessProxy *)((char *)this + 416));
}

void WebKit::WebProcessProxy::logDiagnosticMessageForResourceLimitTermination(WebKit::WebProcessProxy *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  WebCore::DiagnosticLoggingKeys *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;

  v2 = *((_QWORD *)this + 69);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    WebKit::WebProcessProxy::pages(this, (uint64_t)&v11);
    if (v12)
    {
      v4 = *(_QWORD *)v11;
      CFRetain(*(CFTypeRef *)(*(_QWORD *)v11 + 8));
      v6 = (WebCore::DiagnosticLoggingKeys *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v5);
      WebCore::DiagnosticLoggingKeys::simulatedPageCrashKey(v6);
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 264) + 24);
      if ((v8 & 0x8000000000000000) == 0 || v8 == -1)
      {
        v9 = *(_QWORD *)(v4 + 128);
        if (v9)
          (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, const WTF::String *))(*(_QWORD *)v9 + 16))(v9, v4, &v11, a2);
      }
      v10 = v11;
      v11 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v7);
        else
          *(_DWORD *)v10 -= 2;
      }
      CFRelease(*(CFTypeRef *)(v4 + 8));
    }
    else
    {
      __break(0xC471u);
    }
  }
}

unsigned int *WebKit::WebProcessProxy::didExceedActiveMemoryLimit(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  _BOOL8 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v7;
  _BYTE v8[12];
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71578;
  v3 = os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    v7 = *((_QWORD *)this + 17);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    *(_DWORD *)v8 = 134218240;
    *(_QWORD *)&v8[4] = this;
    v9 = 1024;
    v10 = v7;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didExceedActiveMemoryLimit: Terminating WebProcess because it has exceeded the active memory limit", v8, 0x12u);
  }
  WebCore::DiagnosticLoggingKeys::exceededActiveMemoryLimitKey((WebCore::DiagnosticLoggingKeys *)v3);
  WebKit::WebProcessProxy::logDiagnosticMessageForResourceLimitTermination(this, (const WTF::String *)v8);
  v5 = *(WTF::StringImpl **)v8;
  *(_QWORD *)v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WebKit::WebProcessProxy::requestTermination((unsigned int *)this, 0);
}

unsigned int *WebKit::WebProcessProxy::didExceedInactiveMemoryLimit(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  _BOOL8 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v7;
  _BYTE v8[12];
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71578;
  v3 = os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    v7 = *((_QWORD *)this + 17);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    *(_DWORD *)v8 = 134218240;
    *(_QWORD *)&v8[4] = this;
    v9 = 1024;
    v10 = v7;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didExceedInactiveMemoryLimit: Terminating WebProcess because it has exceeded the inactive memory limit", v8, 0x12u);
  }
  WebCore::DiagnosticLoggingKeys::exceededInactiveMemoryLimitKey((WebCore::DiagnosticLoggingKeys *)v3);
  WebKit::WebProcessProxy::logDiagnosticMessageForResourceLimitTermination(this, (const WTF::String *)v8);
  v5 = *(WTF::StringImpl **)v8;
  *(_QWORD *)v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WebKit::WebProcessProxy::requestTermination((unsigned int *)this, 0);
}

void WebKit::WebProcessProxy::didExceedMemoryFootprintThreshold(WebKit::WebProcessProxy *this, unint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::PublicSuffixStore *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _BOOL8 v11;
  _BOOL4 v12;
  WebKit::WebPageProxy **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  double v23;
  double v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32[5];
  WTF::StringImpl *v33;
  WebKit::WebPageProxy **v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  _BYTE buf[12];
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71578;
  if (os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 17);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 108);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = this;
    v38 = 1024;
    v39 = v5;
    v40 = 2048;
    v41 = a2 >> 20;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didExceedMemoryFootprintThreshold: WebProcess exceeded notification threshold (current footprint: %zu MB)", buf, 0x1Cu);
  }
  v6 = *((_QWORD *)this + 94);
  if (!v6)
    return;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v36 = 0;
  v7 = (WebCore::PublicSuffixStore *)WebKit::WebProcessProxy::pages(this, (uint64_t)&v34);
  if (!v35)
  {
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v8);
    v11 = 0;
    v12 = 0;
LABEL_61:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v36 = *(WTF::StringImpl **)buf;
    goto LABEL_51;
  }
  v30 = a2;
  v9 = 0;
  v10 = 0;
  LOBYTE(v11) = 0;
  LOBYTE(v12) = 0;
  v13 = v34;
  v14 = 8 * v35;
  do
  {
    WebCore::PublicSuffixStore::singleton(v7);
    v32[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v32);
    WebKit::WebPageProxy::currentURL(*v13, &v31);
    MEMORY[0x19AEABB24](buf, v32, &v31, 0);
    WTF::URL::host((WTF::URL *)buf);
    WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
    v17 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v31;
    v31 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v32[0];
    v32[0] = 0;
    if (!v19)
      goto LABEL_19;
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
LABEL_19:
      if (!v10)
        goto LABEL_25;
      goto LABEL_20;
    }
    WTF::StringImpl::destroy(v19, v15);
    if (!v10)
    {
LABEL_25:
      v9 = v33;
      v33 = 0;
      v36 = v9;
      goto LABEL_34;
    }
LABEL_20:
    v20 = v33;
    if (!*((_DWORD *)v10 + 1))
    {
      v33 = 0;
      v36 = v20;
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v15);
      else
        *(_DWORD *)v10 -= 2;
      v9 = v20;
      v10 = v20;
LABEL_30:
      if (v11)
        goto LABEL_31;
      goto LABEL_35;
    }
    if ((WTF::equal(v10, v33, v16) & 1) != 0)
      goto LABEL_30;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = *(WTF::StringImpl **)buf;
    v36 = *(WTF::StringImpl **)buf;
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v15);
    else
      *(_DWORD *)v10 -= 2;
LABEL_34:
    v10 = v9;
    if (v11)
    {
LABEL_31:
      v11 = 1;
      if (v12)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_35:
    v11 = *(_BYTE *)(*((_QWORD *)*v13 + 4) + 971) != 0;
    if (v12)
      goto LABEL_37;
LABEL_36:
    v21 = *((_QWORD *)*v13 + 4);
    if (*(_QWORD *)(v21 + 1912))
    {
LABEL_37:
      v12 = 1;
      goto LABEL_38;
    }
    v12 = *(_QWORD *)(v21 + 1920) != 0;
LABEL_38:
    v7 = v33;
    v33 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        v7 = (WebCore::PublicSuffixStore *)WTF::StringImpl::destroy(v7, v15);
      else
        *(_DWORD *)v7 -= 2;
    }
    ++v13;
    v14 -= 8;
  }
  while (v14);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v15);
  if (!v9)
  {
    a2 = v30;
    goto LABEL_61;
  }
  if (!*((_DWORD *)v9 + 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v36 = *(WTF::StringImpl **)buf;
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v22);
    else
      *(_DWORD *)v9 -= 2;
  }
  a2 = v30;
LABEL_51:
  v23 = WebKit::WebProcessProxy::totalForegroundTime(this);
  v24 = v23 + WebKit::WebProcessProxy::totalBackgroundTime(this);
  v25.n128_f64[0] = WebKit::WebProcessProxy::totalSuspendedTime(this) + v24;
  v26 = *((_QWORD *)this + 69);
  if (v26)
    v27 = *(unsigned int *)(v26 - 12);
  else
    v27 = 0;
  (*(void (**)(_QWORD, unint64_t, WTF::StringImpl **, uint64_t, BOOL, _BOOL8, BOOL, __n128))(**(_QWORD **)(v6 + 392) + 128))(*(_QWORD *)(v6 + 392), a2, &v36, v27, *((_BYTE *)this + 384) == 2, v11, !v12, v25);
  v29 = v36;
  v36 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
}

double WebKit::WebProcessProxy::totalForegroundTime(WebKit::WebProcessProxy *this)
{
  double v2;

  if (*((_BYTE *)this + 1098) != 2 || *((double *)this + 138) == 0.0)
    return *((double *)this + 139);
  WTF::MonotonicTime::now(this);
  return *((double *)this + 139) + v2 - *((double *)this + 138);
}

double WebKit::WebProcessProxy::totalBackgroundTime(WebKit::WebProcessProxy *this)
{
  double v2;

  if (*((_BYTE *)this + 1098) != 1 || *((double *)this + 138) == 0.0)
    return *((double *)this + 140);
  WTF::MonotonicTime::now(this);
  return *((double *)this + 140) + v2 - *((double *)this + 138);
}

double WebKit::WebProcessProxy::totalSuspendedTime(WebKit::WebProcessProxy *this)
{
  double v3;

  if (*((_BYTE *)this + 1098) || *((double *)this + 138) == 0.0)
    return *((double *)this + 141);
  WTF::MonotonicTime::now(this);
  return *((double *)this + 141) + v3 - *((double *)this + 138);
}

unsigned int *WebKit::WebProcessProxy::didExceedCPULimit(WebKit::WebProcessProxy *this)
{
  unsigned int *v2;
  unsigned int v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  _BOOL8 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int *result;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  _BYTE buf[12];
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned int *)((char *)this + 16);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebKit::WebProcessProxy::pages(this, (uint64_t)&v22);
  if (!v23)
  {
LABEL_9:
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v4);
    v10 = qword_1ECE71578;
    v11 = os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      v21 = *((_QWORD *)this + 17);
      if (v21)
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      v25 = 1024;
      v26 = v21;
      _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didExceedCPULimit: Terminating background WebProcess that has exceeded the background CPU limit", buf, 0x12u);
    }
    WebCore::DiagnosticLoggingKeys::exceededBackgroundCPULimitKey((WebCore::DiagnosticLoggingKeys *)v11);
    WebKit::WebProcessProxy::logDiagnosticMessageForResourceLimitTermination(this, (const WTF::String *)buf);
    v13 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    result = WebKit::WebProcessProxy::requestTermination((unsigned int *)this, 1);
    if (!this)
      return result;
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
  }
  v5 = v22;
  v6 = 8 * v23;
  while (1)
  {
    v7 = *v5;
    CFRetain(*(CFTypeRef *)(*v5 + 8));
    v8 = *(_QWORD *)(v7 + 32);
    v9 = *(_DWORD *)(v8 + 808);
    if ((v9 & 1) != 0)
    {
      v15 = qword_1ECE71578;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_DEFAULT))
        goto LABEL_30;
      v16 = *((_QWORD *)this + 17);
      if (v16)
        LODWORD(v16) = *(_DWORD *)(v16 + 108);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      v25 = 1024;
      v26 = v16;
      v17 = "%p - [PID=%i] WebProcessProxy::didExceedCPULimit: WebProcess has exceeded the background CPU limit but we ar"
            "e not terminating it because there is audio playing";
      goto LABEL_29;
    }
    if ((v9 & 0x1800) != 0)
    {
      v15 = qword_1ECE71578;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_DEFAULT))
        goto LABEL_30;
      v18 = *((_QWORD *)this + 17);
      if (v18)
        LODWORD(v18) = *(_DWORD *)(v18 + 108);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      v25 = 1024;
      v26 = v18;
      v17 = "%p - [PID=%i] WebProcessProxy::didExceedCPULimit: WebProcess has exceeded the background CPU limit but we ar"
            "e not terminating it because it is capturing audio / video";
      goto LABEL_29;
    }
    if ((*(_WORD *)(v8 + 48) & 4) != 0)
      break;
    CFRelease(*(CFTypeRef *)(v7 + 8));
    ++v5;
    v6 -= 8;
    if (!v6)
      goto LABEL_9;
  }
  v15 = qword_1ECE71578;
  if (!os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_DEFAULT))
    goto LABEL_30;
  v19 = *((_QWORD *)this + 17);
  if (v19)
    LODWORD(v19) = *(_DWORD *)(v19 + 108);
  *(_DWORD *)buf = 134218240;
  *(_QWORD *)&buf[4] = this;
  v25 = 1024;
  v26 = v19;
  v17 = "%p - [PID=%i] WebProcessProxy::didExceedCPULimit: WebProcess has exceeded the background CPU limit but we are no"
        "t terminating it because it has a visible page";
LABEL_29:
  _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, v17, buf, 0x12u);
LABEL_30:
  CFRelease(*(CFTypeRef *)(v7 + 8));
  result = (unsigned int *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v20);
  if (this)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
  return result;
}

void WebKit::WebProcessProxy::didCollectPrewarmInformation(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v24;
  unsigned int v25;
  uint64_t v26;
  const WTF::StringImpl *v27;
  const WTF::StringImpl *v28;
  _QWORD *v29;
  int v30;
  _OWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  _BYTE v39[24];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*a2 && *((_DWORD *)*a2 + 1) && !MEMORY[0x19AEABBCC]())
  {
    v6 = *(_QWORD *)(a1 + 512);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = v7 - 16;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v10 = (uint64_t *)(v8 + 784);
    v11 = *(_QWORD *)(v8 + 784);
    if (v11)
    {
      if (*(_DWORD *)(v11 - 12) != 100)
        goto LABEL_35;
      do
      {
        v12 = *v10;
        v13 = WTF::weakRandomNumber<unsigned int>();
        v15 = *v10;
        if (*v10)
          LODWORD(v15) = *(_DWORD *)(v15 - 8);
        v16 = v15 & v13;
      }
      while ((WTF::equal(*(WTF **)(v12 + 16 * v16), 0, v14) & 1) != 0 || *(_QWORD *)(v12 + 16 * v16) == -1);
      v17 = (WTF::StringImpl **)(v12 + 16 * v16);
      v11 = *v10;
      if (*v10)
      {
        v18 = (WTF::StringImpl **)(v11 + 16 * *(unsigned int *)(v11 - 4));
        if (v18 == v17)
          goto LABEL_35;
      }
      else
      {
        v18 = 0;
      }
      if (v18 == v17)
        goto LABEL_33;
      WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(v17, v9);
      std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100]((uint64_t *)(v12 + 16 * v16 + 8), 0);
      ++*(_DWORD *)(*v10 - 16);
      v20 = *v10;
      if (*v10)
        v21 = *(_DWORD *)(v20 - 12) - 1;
      else
        v21 = -1;
      *(_DWORD *)(v20 - 12) = v21;
      v11 = *v10;
      if (*v10)
      {
        v22 = *(_DWORD *)(v11 - 4);
        if (6 * *(_DWORD *)(v11 - 12) >= v22 || v22 < 9)
          goto LABEL_35;
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash((uint64_t *)(v8 + 784), v22 >> 1, 0);
        v11 = *v10;
LABEL_33:
        if (v11)
          goto LABEL_35;
      }
    }
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v8 + 784), 0);
    v11 = *v10;
    if (!*v10)
    {
      v24 = 0;
LABEL_36:
      v25 = WTF::ASCIICaseInsensitiveHash::hash(*a2, v9) & v24;
      v26 = v11 + 16 * v25;
      if ((WTF::equal(*(WTF **)v26, 0, v27) & 1) == 0)
      {
        v29 = 0;
        v30 = 1;
        do
        {
          if (*(_QWORD *)v26 == -1)
          {
            v29 = (_QWORD *)v26;
          }
          else if ((WTF::equalIgnoringASCIICase(*(WTF **)v26, *a2, v28) & 1) != 0)
          {
            goto LABEL_54;
          }
          v25 = (v25 + v30) & v24;
          v26 = v11 + 16 * v25;
          ++v30;
        }
        while (!WTF::equal(*(WTF **)v26, 0, v28));
        if (v29)
        {
          *v29 = 0;
          v29[1] = 0;
          --*(_DWORD *)(*v10 - 16);
          v26 = (uint64_t)v29;
        }
      }
      WTF::String::operator=((WTF::StringImpl **)v26, (WTF::StringImpl *)a2);
      v31 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
      *v31 = 0u;
      v31[1] = 0u;
      *(_QWORD *)v39 = 0;
      std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100]((uint64_t *)(v26 + 8), v31);
      std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100]((uint64_t *)v39, 0);
      v32 = *v10;
      if (*v10)
        v33 = *(_DWORD *)(v32 - 12) + 1;
      else
        v33 = 1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *v10;
      if (*v10)
        v35 = *(_DWORD *)(v34 - 12);
      else
        v35 = 0;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
      {
        if (v37 > 2 * v36)
        {
LABEL_54:
          v38 = *(unsigned int **)(v26 + 8);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v38, a3);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v38 + 4, a3 + 16);
          if (v8)
            CFRelease(*(CFTypeRef *)(v8 + 8));
          return;
        }
      }
      else if (3 * v37 > 4 * v36)
      {
        goto LABEL_54;
      }
      v26 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v8 + 784), (WTF::ASCIICaseInsensitiveHash **)v26);
      goto LABEL_54;
    }
LABEL_35:
    v24 = *(_DWORD *)(v11 - 8);
    goto LABEL_36;
  }
  v19 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)v39 = 136315138;
    *(_QWORD *)&v39[4] = "void WebKit::WebProcessProxy::didCollectPrewarmInformation(const WebCore::RegistrableDomain &, "
                         "const WebCore::PrewarmInformation &)";
    _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebProcessProxy.cpp 2090: Invalid message dispatched %s", v39, 0xCu);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 144) + 98) = 1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2593;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D7E20;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

void WebKit::WebProcessProxy::addSuspendedPageProxy(WebKit::WebProcessProxy *this, WebKit::SuspendedPageProxy *a2)
{
  char *v3;
  void *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  WebKit::WebProcessProxy *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 592;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteAudioSessionProxy>((uint64_t)this + 592, (unsigned int *)a2, (uint64_t)&v8);
  v5 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)v3, v4);
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((_QWORD *)this + 17);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    v8 = 134218496;
    v9 = this;
    v10 = 1024;
    v11 = v7;
    v12 = 1024;
    v13 = v5;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::addSuspendedPageProxy: suspendedPageCount=%u", (uint8_t *)&v8, 0x18u);
  }
  if (v5 == 1)
  {
    LOBYTE(v8) = 1;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasSuspendedPageProxy>((uint64_t)this, &v8);
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasSuspendedPageProxy>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2635;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v12 = (IPC::Encoder *)v4;
  LOBYTE(a2) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = (char)a2;
  LOBYTE(v10) = 0;
  v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebProcessProxy::removeSuspendedPageProxy(WebKit::WebProcessProxy *this, WebKit::SuspendedPageProxy *a2)
{
  char *v4;
  void *v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WebKit::WebProcessProxy *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 592;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)this + 592, a2);
  v6 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)v4, v5);
  v7 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *((_QWORD *)this + 17);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    v11 = 134218496;
    v12 = this;
    v13 = 1024;
    v14 = v8;
    v15 = 1024;
    v16 = v6;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::removeSuspendedPageProxy: suspendedPageCount=%u", (uint8_t *)&v11, 0x18u);
  }
  if (!v6)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v9)
      v10 = v9 - 16;
    else
      v10 = 0;
    WebKit::WebProcessProxy::reportProcessDisassociatedWithPageIfNecessary((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 744));
    LOBYTE(v11) = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasSuspendedPageProxy>((uint64_t)this, &v11);
    WebKit::WebProcessProxy::maybeShutDown(this);
  }
}

void WebKit::WebProcessProxy::createSpeechRecognitionServer(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int **v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  _BYTE buf[12];
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)a1, (uint64_t)buf);
  if (!v50)
  {
LABEL_5:
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v4);
    return;
  }
  v5 = *(uint64_t **)buf;
  v6 = 8 * v50;
  while (1)
  {
    v7 = *v5;
    CFRetain(*(CFTypeRef *)(*v5 + 8));
    if (*(_QWORD *)(*(_QWORD *)(v7 + 32) + 1896) == a2)
      break;
    CFRelease(*(CFTypeRef *)(v7 + 8));
    ++v5;
    v6 -= 8;
    if (!v6)
      goto LABEL_5;
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v8);
  v9 = (uint64_t *)(a1 + 1032);
  v10 = *(_QWORD *)(a1 + 1032);
  if (!v10)
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 1032), 0);
    v10 = *v9;
    if (*v9)
      v11 = *(_DWORD *)(v10 - 8);
    else
      v11 = 0;
    goto LABEL_17;
  }
  v11 = *(_DWORD *)(v10 - 8);
  v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = *(_QWORD *)(v10 + 16 * v15);
  if (v16 != a2)
  {
    v17 = 1;
    while (v16)
    {
      v15 = (v15 + v17) & v11;
      v16 = *(_QWORD *)(v10 + 16 * v15);
      ++v17;
      if (v16 == a2)
        goto LABEL_11;
    }
LABEL_17:
    v19 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v11 & ((v21 >> 31) ^ v21);
    v23 = (uint64_t *)(v10 + 16 * v22);
    v24 = *v23;
    if (*v23)
    {
      v25 = 0;
      v26 = 1;
      while (v24 != a2)
      {
        if (v24 == -1)
          v25 = v23;
        v22 = (v22 + v26) & v11;
        v23 = (uint64_t *)(v10 + 16 * v22);
        v24 = *v23;
        ++v26;
        if (!*v23)
        {
          if (v25)
          {
            *v25 = 0;
            v25[1] = 0;
            --*(_DWORD *)(*v9 - 16);
            v23 = v25;
          }
          goto LABEL_25;
        }
      }
      goto LABEL_36;
    }
LABEL_25:
    v27 = v23[1];
    *v23 = a2;
    v23[1] = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = *v9;
    if (*v9)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *v9;
    if (*v9)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_36;
    }
    else if (3 * v33 > 4 * v32)
    {
LABEL_36:
      v34 = (unsigned int **)(v7 + 24);
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 24), v7 + 16);
      v35 = *(unsigned int **)(v7 + 24);
      if (v35)
      {
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
      }
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 24), v7 + 16);
      v37 = *v34;
      if (*v34)
      {
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
      }
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 24), v7 + 16);
      v39 = *v34;
      if (*v34)
      {
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 + 1, v39));
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)buf, *(unsigned __int8 ***)(a1 + 144));
      v41 = WTF::fastMalloc((WTF *)0x58);
      v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v42 = &off_1E34D7388;
      v42[1] = v35;
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v43 = &off_1E34D73B0;
      v43[1] = v37;
      v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v44 = &off_1E34D73D8;
      v44[1] = v39;
      *(_QWORD *)v41 = off_1E34B4098;
      *(_QWORD *)(v41 + 8) = 0;
      v45 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)(v41 + 16) = &unk_1E34B40E0;
      *(_QWORD *)(v41 + 24) = v45;
      *(_QWORD *)(v41 + 32) = a2;
      *(_QWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = v42;
      *(_QWORD *)(v41 + 56) = 0;
      *(_QWORD *)(v41 + 64) = v43;
      *(_BYTE *)(v41 + 72) = 0;
      *(_QWORD *)(v41 + 80) = v44;
      v46 = v23[1];
      v23[1] = v41;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
      v47 = v23[1];
      v48[0] = 141;
      v48[1] = a2;
      WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(a1 + 160), (unsigned __int8 *)v48, v47, (unsigned int **)buf);
      goto LABEL_45;
    }
    v23 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 1032), v23);
    goto LABEL_36;
  }
LABEL_11:
  v18 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebProcessProxy::createSpeechRecognitionServer(SpeechRecognitionServerIdentifier)";
    _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebProcessProxy.cpp 2221: Invalid message dispatched %s", buf, 0xCu);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 144) + 98) = 1;
LABEL_45:
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

uint64_t *WebKit::WebProcessProxy::destroySpeechRecognitionServer(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 1032);
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 1032), &v7);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::take(v3, v4, &v6);
  if (v6)
  {
    IPC::MessageReceiverMap::removeMessageReceiver(a1 + 152, 0x8Du, v7);
    result = v6;
    v6 = 0;
    if (result)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::ensureSpeechRecognitionRemoteRealtimeMediaSourceManager(WebKit::WebProcessProxy *this)
{
  uint64_t result;
  _QWORD *v3;
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7[3];
  char v8;

  result = *((_QWORD *)this + 130);
  if (!result)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v7, *((unsigned __int8 ***)this + 18));
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v3 = off_1E34B3FF0;
    v3[1] = 0;
    v4 = v7[0];
    v7[0] = 0;
    v3[2] = &unk_1E34B4038;
    v3[3] = v4;
    v3[4] = 0;
    v5 = (_QWORD *)*((_QWORD *)this + 130);
    *((_QWORD *)this + 130) = v3;
    if (v5)
      std::default_delete<WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager>::operator()[abi:sn180100]((uint64_t)this + 1040, v5);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v7);
    v6 = *((_QWORD *)this + 130);
    v8 = -116;
    WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)this + 19, &v8, v6, v7);
    return *((_QWORD *)this + 130);
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::muteCaptureInPagesExcept(uint64_t a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  unsigned int v9;

  WebKit::WebProcessProxy::globalPages((uint64_t)&v8);
  if (v9)
  {
    v3 = v8;
    v4 = 8 * v9;
    do
    {
      v5 = *v3;
      CFRetain(*(CFTypeRef *)(*v3 + 8));
      v6 = *(_QWORD *)(v5 + 32);
      if (*(_QWORD *)(v6 + 1896) != a1)
        WebKit::WebPageProxy::setMuted(v5, *(unsigned __int8 *)(v6 + 872) | 0x1ELL);
      CFRelease(*(CFTypeRef *)(v5 + 8));
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v2);
}

uint64_t *WebKit::WebProcessProxy::pageMutedStateChanged(uint64_t *result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = a2;
  if ((a3 & 6) != 0)
  {
    result = (uint64_t *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(result + 129, &v4);
    if (result)
    {
      v3 = result[7];
      if (v3)
      {
        result = *(uint64_t **)(v3 + 24);
        if (result)
          return (uint64_t *)WebCore::SpeechRecognitionCaptureSource::mute((WebCore::SpeechRecognitionCaptureSource *)result);
      }
    }
  }
  return result;
}

WebCore::SpeechRecognitionCaptureSource *WebKit::WebProcessProxy::pageIsBecomingInvisible(uint64_t *a1, uint64_t a2)
{
  WebCore::SpeechRecognitionCaptureSource *result;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  result = (WebCore::SpeechRecognitionCaptureSource *)WebCore::RealtimeMediaSourceCenter::shouldInterruptAudioOnPageVisibilityChange((WebCore::RealtimeMediaSourceCenter *)a1);
  if ((_DWORD)result)
  {
    result = (WebCore::SpeechRecognitionCaptureSource *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1 + 129, &v5);
    if (result)
    {
      v4 = *((_QWORD *)result + 7);
      if (v4)
      {
        result = *(WebCore::SpeechRecognitionCaptureSource **)(v4 + 24);
        if (result)
          return (WebCore::SpeechRecognitionCaptureSource *)WebCore::SpeechRecognitionCaptureSource::mute(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebSWContextManagerConnection::SetUserAgent>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2713;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebSharedWorkerContextManagerConnection::SetUserAgent>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2778;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::ProcessThrottlerActivity *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  WebKit::ProcessThrottlerActivity *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE buf[18];
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
    v2 = a1 + 880;
  else
    v2 = a1 + 800;
  if (*(_BYTE *)(v2 + 72))
  {
    v5 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 136);
      if (v6)
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      v7 = "service";
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = a1;
      if (a2 == 2)
        v7 = "shared";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v6;
      v42 = 2082;
      v43 = v7;
      _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::updateRemoteWorkerProcessAssertion: workerType=%{public}s", buf, 0x1Cu);
      if (!*(_BYTE *)(v2 + 72))
        goto LABEL_69;
    }
    v8 = (uint64_t *)(v2 + 56);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v2 + 56), buf);
    v9 = *(_QWORD *)(v2 + 56);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 - 4);
      v11 = v9 + 8 * v10;
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    v36 = v2 + 56;
    v37 = v11;
    v38 = v11;
    v39 = v11;
    v40 = v9 + 8 * v10;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
    while (*(_QWORD *)&buf[8] != v37)
    {
      v12 = *(_QWORD *)(**(_QWORD **)&buf[8] + 8);
      if (v12 != a1 && *(_QWORD *)(v12 + 664) != 0)
      {
        if (!*(_BYTE *)(v2 + 72))
          goto LABEL_69;
        v17 = (WebKit::ProcessThrottlerActivity *)(v2 + 40);
        if (*(_DWORD *)(v2 + 48) != 1
          || (v18 = *(_QWORD *)(*(_QWORD *)v17 + 8)) == 0
          || !*(_QWORD *)(v18 + 8)
          || !*(_BYTE *)(*(_QWORD *)v17 + 32))
        {
          v19 = WTF::fastMalloc((WTF *)0x28);
          v20 = "Worker for foreground view(s)";
          v21 = a1 + 200;
          v22 = 30;
          v23 = 1;
          goto LABEL_63;
        }
        return;
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
    }
    if (!*(_BYTE *)(v2 + 72))
      goto LABEL_69;
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v2 + 56), buf);
    v14 = *v8;
    if (*v8)
    {
      v15 = *(unsigned int *)(v14 - 4);
      v16 = v14 + 8 * v15;
    }
    else
    {
      v16 = 0;
      v15 = 0;
    }
    v36 = v2 + 56;
    v37 = v16;
    v38 = v16;
    v39 = v16;
    v40 = v14 + 8 * v15;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
    while (1)
    {
      if (*(_QWORD *)&buf[8] == v37)
      {
        if (a2 == 1 && *(_BYTE *)(a1 + 960))
        {
          v26 = qword_1ECE71640;
          if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
          {
            v27 = *(_QWORD *)(a1 + 136);
            if (v27)
              LODWORD(v27) = *(_DWORD *)(v27 + 108);
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = a1;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::Service Worker for background processing", buf, 0x12u);
          }
          if (!*(_BYTE *)(v2 + 72))
            goto LABEL_69;
          v17 = (WebKit::ProcessThrottlerActivity *)(v2 + 40);
          if (*(_DWORD *)(v2 + 48) != 1
            || (v28 = *(_QWORD *)(*(_QWORD *)v17 + 8)) == 0
            || !*(_QWORD *)(v28 + 8)
            || *(_BYTE *)(*(_QWORD *)v17 + 32))
          {
            v19 = WTF::fastMalloc((WTF *)0x28);
            v20 = "Service Worker for background processing";
            v21 = a1 + 200;
            v22 = 41;
            goto LABEL_62;
          }
        }
        else
        {
          if (!*(_BYTE *)(v2 + 72))
            goto LABEL_69;
          v29 = *(unsigned int *)(v2 + 48);
          if ((_DWORD)v29 != -1)
          {
            v30 = (_QWORD *)(v2 + 40);
            if (!(_DWORD)v29)
            {
              *v30 = 0;
              return;
            }
            ((void (*)(_BYTE *, _QWORD *))off_1E34D73F0[v29])(buf, v30);
          }
          *(_QWORD *)(v2 + 40) = 0;
          *(_DWORD *)(v2 + 48) = 0;
        }
        return;
      }
      v24 = *(_QWORD *)(**(_QWORD **)&buf[8] + 8);
      if (v24 != a1 && *(_QWORD *)(v24 + 672) != 0)
        break;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
    }
    if (!*(_BYTE *)(v2 + 72))
      goto LABEL_69;
    v17 = (WebKit::ProcessThrottlerActivity *)(v2 + 40);
    if (*(_DWORD *)(v2 + 48) != 1
      || (v31 = *(_QWORD *)(*(_QWORD *)v17 + 8)) == 0
      || !*(_QWORD *)(v31 + 8)
      || *(_BYTE *)(*(_QWORD *)v17 + 32))
    {
      v19 = WTF::fastMalloc((WTF *)0x28);
      v20 = "Worker for background view(s)";
      v21 = a1 + 200;
      v22 = 30;
LABEL_62:
      v23 = 0;
LABEL_63:
      *(_QWORD *)buf = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v19, v21, v20, v22, v23, 0);
      if (*(_BYTE *)(v2 + 72))
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>(v17, (WebKit::ProcessThrottlerActivity **)v17, (WebKit::ProcessThrottlerActivity **)buf);
        v33 = *(WebKit::ProcessThrottlerActivity **)buf;
        *(_QWORD *)buf = 0;
        if (v33)
        {
          WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return;
      }
LABEL_69:
      __break(1u);
    }
  }
}

void WebKit::WebProcessProxy::registerRemoteWorkerClientProcess(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
    v3 = a1 + 880;
  else
    v3 = a1 + 800;
  if (*(_BYTE *)(v3 + 72))
  {
    v7 = qword_1ECE71B68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B68, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 136);
      if (v8)
        LODWORD(v8) = *(_DWORD *)(v8 + 108);
      v9 = "service";
      if (a2 == 2)
        v9 = "shared";
      v10 = *(_QWORD *)(a3 + 136);
      if (v10)
        LODWORD(v10) = *(_DWORD *)(v10 + 108);
      v11 = 134219010;
      v12 = a1;
      v13 = 1024;
      v14 = v8;
      v15 = 2082;
      v16 = v9;
      v17 = 2048;
      v18 = a3;
      v19 = 1024;
      v20 = v10;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::registerWorkerClientProcess: workerType=%{public}s, clientProcess=%p, clientPID=%d", (uint8_t *)&v11, 0x2Cu);
      if (!*(_BYTE *)(v3 + 72))
        __break(1u);
    }
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v3 + 56, (unsigned int *)a3, (uint64_t)&v11);
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(a1, a2);
  }
}

void WebKit::WebProcessProxy::unregisterRemoteWorkerClientProcess(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
    v3 = a1 + 880;
  else
    v3 = a1 + 800;
  if (*(_BYTE *)(v3 + 72))
  {
    v7 = qword_1ECE71B68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B68, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 136);
      if (v8)
        LODWORD(v8) = *(_DWORD *)(v8 + 108);
      v9 = "service";
      if (a2 == 2)
        v9 = "shared";
      v10 = a3[17];
      if (v10)
        LODWORD(v10) = *(_DWORD *)(v10 + 108);
      v11 = 134219010;
      v12 = a1;
      v13 = 1024;
      v14 = v8;
      v15 = 2082;
      v16 = v9;
      v17 = 2048;
      v18 = a3;
      v19 = 1024;
      v20 = v10;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::unregisterWorkerClientProcess: workerType=%{public}s, clientProcess=%p, clientPID=%d", (uint8_t *)&v11, 0x2Cu);
      if (!*(_BYTE *)(v3 + 72))
        __break(1u);
    }
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v3 + 56, a3);
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(a1, a2);
  }
}

void WebKit::WebProcessProxy::startServiceWorkerBackgroundProcessing(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  WebKit::WebProcessProxy *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 872))
  {
    v2 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *((_QWORD *)this + 17);
      if (v3)
        LODWORD(v3) = *(_DWORD *)(v3 + 108);
      v4 = 134218240;
      v5 = this;
      v6 = 1024;
      v7 = v3;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::startServiceWorkerBackgroundProcessing", (uint8_t *)&v4, 0x12u);
    }
    *((_BYTE *)this + 960) = 1;
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion((uint64_t)this, 1);
  }
}

void WebKit::WebProcessProxy::endServiceWorkerBackgroundProcessing(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  WebKit::WebProcessProxy *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 872))
  {
    v2 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *((_QWORD *)this + 17);
      if (v3)
        LODWORD(v3) = *(_DWORD *)(v3 + 108);
      v4 = 134218240;
      v5 = this;
      v6 = 1024;
      v7 = v3;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::endServiceWorkerBackgroundProcessing", (uint8_t *)&v4, 0x12u);
    }
    *((_BYTE *)this + 960) = 0;
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion((uint64_t)this, 1);
  }
}

void WebKit::WebProcessProxy::getNotifications(uint64_t a1, WebCore::SecurityOriginData *a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  WebKit::WebNotificationManagerProxy *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WebKit *v15;
  _QWORD *v16;

  v8 = (WebKit::WebNotificationManagerProxy *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 752)
                                                                                              + 392)
                                                                                + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 752) + 392));
  if ((_DWORD)v8)
  {
    v9 = *(WTF::StringImpl **)a3;
    if (v9)
      *(_DWORD *)v9 += 2;
    v10 = *a4;
    *a4 = 0;
    v11 = *(_QWORD *)(a1 + 752);
    if (v11)
      CFRetain(*(CFTypeRef *)(v11 + 8));
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = &off_1E34D7E70;
    if (v9)
      *(_DWORD *)v9 += 2;
    v12[1] = v9;
    v12[2] = v10;
    v16 = v12;
    WebKit::WebsiteDataStore::getNotifications(v11, a2, (uint64_t)&v16);
    v14 = v16;
    v16 = 0;
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    if (v11)
      CFRelease(*(CFTypeRef *)(v11 + 8));
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v13);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v15 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v8);
    WebKit::WebNotificationManagerProxy::getNotifications((uint64_t)v15, (const WTF::StringImpl **)a2, a3, *(_QWORD *)(*(_QWORD *)(a1 + 752) + 24), a4);
  }
}

uint64_t WebKit::WebProcessProxy::getWebCryptoMasterKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34D7E98;
  v4[1] = v3;
  v6 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 136))(a1, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebProcessProxy::wrapCryptoKey(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = a2[1];
  a2[1] = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34D7EC0;
  v7[1] = v4;
  v7[2] = v6;
  v7[3] = v5;
  v9 = v7;
  WebKit::WebProcessProxy::getWebCryptoMasterKey(*(_QWORD *)(*(_QWORD *)(a1 + 752) + 392), (uint64_t *)&v9);
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::WebProcessProxy::unwrapCryptoKey(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 3);
  v13 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 3) = 0;
  v11 = *(__int128 *)((char *)a2 + 40);
  v12 = v4;
  v6 = *a3;
  *a3 = 0;
  v7 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v8 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v8 = &off_1E34D7EE8;
  *(_OWORD *)(v8 + 8) = v12;
  *(_QWORD *)(v8 + 24) = v13;
  *(_QWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 40) = v7;
  *(_OWORD *)(v8 + 48) = v11;
  *(_QWORD *)(v8 + 64) = v6;
  v10 = v8;
  WebKit::WebProcessProxy::getWebCryptoMasterKey(*(_QWORD *)(*(_QWORD *)(a1 + 752) + 392), &v10);
  result = v10;
  if (v10)
    return (*(uint64_t (**)(void))(*(_QWORD *)v10 + 8))();
  return result;
}

void WebKit::WebProcessProxy::setAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  if ((_BYTE)a3)
  {
    v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 552), v12);
    if (v9)
    {
      v10 = v9;
      CFRetain(*(CFTypeRef *)(v9 + 8));
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v10 + 104) + 624))(*(_QWORD *)(v10 + 104), v10, a4, a5, a6);
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 752);
    if (v11)
    {
      CFRetain(*(CFTypeRef *)(v11 + 8));
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v11 + 392) + 80))(*(_QWORD *)(v11 + 392), a4, a5, a6);
      CFRelease(*(CFTypeRef *)(v11 + 8));
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*MEMORY[0x188] + 80))(MEMORY[0x188], a4, a5, a6);
    }
  }
}

void WebKit::WebProcessProxy::setClientBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 552), &v10);
  if (v8)
  {
    v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v9 + 104) + 632))(*(_QWORD *)(v9 + 104), v9, a3, a4, a5);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

uint64_t WebKit::WebProcessProxy::permissionChanged(int a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int v15;

  WebKit::WebProcessPool::allProcessPools((uint64_t)&v14);
  if (v15)
  {
    v5 = v14;
    v6 = v14 + 8 * v15;
    do
    {
      v7 = *(unsigned int *)(*(_QWORD *)v5 + 84);
      if ((_DWORD)v7)
      {
        v8 = *(uint64_t **)(*(_QWORD *)v5 + 72);
        v9 = &v8[v7];
        do
        {
          v10 = *v8;
          v11 = (unsigned int *)(*v8 + 16);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          WebKit::WebProcessProxy::processPermissionChanged(v10, a1, a2);
          if (v10)
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
          ++v8;
        }
        while (v8 != v9);
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v4);
}

IPC::Encoder *WebKit::WebProcessProxy::processPermissionChanged(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebKit::WebPageProxy *v13;
  const WTF::URL *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  IPC::Encoder *result;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29[2];
  char v30;
  char v31;
  IPC::Encoder *v32[3];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a2 == 8 || a2 == 3)
  {
    v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 552));
    v7 = v6;
    v9 = v8;
    v10 = *(_QWORD *)(a1 + 552);
    v11 = v10 ? v10 + 16 * *(unsigned int *)(v10 - 4) : 0;
    if ((_QWORD *)v11 != v6)
    {
      while (1)
      {
        v12 = *(_QWORD *)(v7[1] + 8);
        if (v12)
          v13 = (WebKit::WebPageProxy *)(v12 - 16);
        else
          v13 = 0;
        WebKit::WebPageProxy::currentURL(v13, &v28);
        MEMORY[0x19AEABB0C](v29, &v28, 0);
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)v29, v14);
        v16 = WebCore::operator==();
        if (v33 != -1)
          ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_8[v33])(&v31, v32);
        v33 = -1;
        v17 = v29[0];
        v29[0] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v15);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = v28;
        v28 = 0;
        if (!v18)
          goto LABEL_19;
        if (*(_DWORD *)v18 != 2)
          break;
        WTF::StringImpl::destroy(v18, v15);
        if (!v16)
          goto LABEL_27;
LABEL_22:
        v19 = *(_QWORD *)(v7[1] + 8);
        if (v19)
          v20 = v19 - 16;
        else
          v20 = 0;
        v21 = *(_QWORD *)(v20 + 504);
        if (v21)
          WebKit::UserMediaPermissionRequestManagerProxy::clearUserMediaPermissionRequestHistory(v21, a2);
LABEL_27:
        while (1)
        {
          v7 += 2;
          if (v7 == v9)
            break;
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_31;
        }
        v7 = v9;
LABEL_31:
        if (v7 == (_QWORD *)v11)
          goto LABEL_32;
      }
      *(_DWORD *)v18 -= 2;
LABEL_19:
      if (!v16)
        goto LABEL_27;
      goto LABEL_22;
    }
  }
LABEL_32:
  v22 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v22 = 2537;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 528) = v22 + 16;
  *(_QWORD *)(v22 + 536) = v22 + 16;
  *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v22 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
  v32[0] = (IPC::Encoder *)v22;
  *IPC::Encoder::grow((IPC::Encoder *)v22, 1uLL, 1) = a2;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v22, a3);
  LOBYTE(v29[0]) = 0;
  v30 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, v32, 0, (uint64_t)v29, 1);
  if (v30)
  {
    v24 = v29[0];
    v29[0] = 0;
    if (v24)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
  }
  result = v32[0];
  v32[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v23);
    return (IPC::Encoder *)WTF::fastFree(v26, v27);
  }
  return result;
}

void WebKit::WebPageProxyTesting::~WebPageProxyTesting(WebKit::WebPageProxyTesting *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34D6EA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WebKit::WebPageProxyTesting *v5;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34D6EA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = this;
      WTF::fastFree((WTF *)v2, a2);
      this = v5;
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t API::ObjectImpl<(API::Object::Type)92>::type()
{
  return 92;
}

uint64_t API::ObjectImpl<(API::Object::Type)89>::type()
{
  return 89;
}

uint64_t WebKit::WebProcessProxy::type(WebKit::WebProcessProxy *this)
{
  return 2;
}

const char *WebKit::WebProcessProxy::processName(WebKit::WebProcessProxy *this)
{
  return "WebContent";
}

uint64_t WebKit::WebProcessProxy::shouldEnableSharedArrayBuffer(WebKit::WebProcessProxy *this)
{
  return *((unsigned __int8 *)this + 780);
}

uint64_t WebKit::WebProcessProxy::shouldEnableLockdownMode(WebKit::WebProcessProxy *this)
{
  return *((unsigned __int8 *)this + 779);
}

uint64_t `non-virtual thunk to'WebKit::WebProcessProxy::shouldEnableSharedArrayBuffer(WebKit::WebProcessProxy *this)
{
  return *((unsigned __int8 *)this + 756);
}

uint64_t `non-virtual thunk to'WebKit::WebProcessProxy::shouldEnableLockdownMode(WebKit::WebProcessProxy *this)
{
  return *((unsigned __int8 *)this + 755);
}

unsigned int *std::__optional_storage_base<WebKit::WebPageProxyMessageReceiverRegistration::Data,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebPageProxyMessageReceiverRegistration::Data,false>>(unsigned int *result, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (*((unsigned __int8 *)result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*((_BYTE *)result + 16))
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      v3 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v4 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = v3;
      if (v4)
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
    }
  }
  else if (*((_BYTE *)result + 16))
  {
    v5 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = 0;
    if (v5)
      result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
    *((_BYTE *)v2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *((_QWORD *)result + 1) = v6;
    *((_BYTE *)result + 16) = 1;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14WebPageTesting23IsEditingCommandEnabledEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>> const&>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
    CFRetain(*(CFTypeRef *)(v6 + 8));
  v7 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v7 + 1;
  return 1;
}

WebKit::WebProcessProxy **std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](WebKit::WebProcessProxy ***a1, WebKit::WebProcessProxy **a2)
{
  WebKit::WebProcessProxy **result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebProcessCache::CachedProcess::~CachedProcess(result);
    return (WebKit::WebProcessProxy **)WTF::fastFree(v4, v5);
  }
  return result;
}

void API::InjectedBundleClient::didReceiveSynchronousMessageFromInjectedBundle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(a5, &v6);
  v5 = v6;
  v6 = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

uint64_t API::AutomationClient::allowsRemoteAutomation(API::AutomationClient *this, WebProcessPool *a2)
{
  return 0;
}

uint64_t API::LegacyContextHistoryClient::addsVisitedLinks(API::LegacyContextHistoryClient *this)
{
  return 0;
}

uint64_t *std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100](uint64_t *result, void *a2)
{
  uint64_t v2;
  void *v3;
  WTF *v4;
  void *v5;

  v2 = *result;
  *result = (uint64_t)a2;
  if (v2)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 16, a2);
    v4 = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, v3);
    return (uint64_t *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::WebProcessProxy ***v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::WebProcessProxy ***)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::WebProcessProxy **)-1)
      {
        std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v4, 0);
        v5 = (WTF::StringImpl *)*(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::WebProcessProxy ***v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::WebProcessProxy ***)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::WebProcessProxy **)-1)
        std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v4, 0);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::SandboxExtensionHandle *std::__optional_destruct_base<std::pair<WebKit::SandboxExtensionHandle,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](WebKit::SandboxExtensionHandle *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*((_BYTE *)this + 16))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this);
  }
  return this;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess36SetCacheModelSynchronouslyForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

WTF::StringImpl *API::DownloadClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  CFTypeRef v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a3 + 464);
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v9);
  cf = 0;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, 2, &v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *API::DownloadClient::decideDestinationWithSuggestedFilename(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  v7 = 0;
  WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t API::DownloadClient::willSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t *std::unique_ptr<WebKit::WebLockRegistryProxy>::reset[abi:sn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*(_QWORD *)(v2 + 16) + 152), 0xB0u);
    *(_QWORD *)v2 = &off_1E34B0558;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), v3);
    return (uint64_t *)WTF::fastFree((WTF *)v2, v4);
  }
  return result;
}

void std::default_delete<WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager>::operator()[abi:sn180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;

  if (a2)
  {
    v3 = a2[4];
    if (v3)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)a2 + 3);
    *a2 = &off_1E34B0558;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2 + 1, v4);
    WTF::fastFree((WTF *)a2, v5);
  }
}

uint64_t std::__optional_destruct_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
    v4 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E34D73F0[v4])(&v6, a1 + 40);
    *(_DWORD *)(a1 + 48) = -1;
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, (WTF::StringImpl *)a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) ^ 1 | *(v4 - 1))
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__optional_destruct_base<WebKit::GoToBackForwardItemParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 192))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 184));
    v3 = *(WTF::StringImpl **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
    if (*(_BYTE *)(a1 + 144))
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a1 + 32), v2);
  }
  return a1;
}

unsigned __int8 *std::__optional_destruct_base<WebKit::WebProcessProxy::AudibleMediaActivity,false>::reset[abi:sn180100](unsigned __int8 *result, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (!result[16])
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = 0;
  if (v3)
  {
    v4 = *(unsigned __int8 ***)v3;
    v5 = *(_QWORD *)(v3 + 8) - 1;
    *(_QWORD *)(v3 + 8) = v5;
    if (!v4)
      goto LABEL_7;
    result = *v4;
    if (*v4)
    {
      v6 = *(_BYTE *)(v3 + 16);
      *(_BYTE *)(v3 + 16) = 1;
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)result + 16))(result, 0);
      *(_BYTE *)(v3 + 16) = v6;
      if (!*(_QWORD *)v3)
      {
        v5 = *(_QWORD *)(v3 + 8);
LABEL_7:
        if (!v5)
          result = (unsigned __int8 *)MEMORY[0x19AEB936C](v3, 0x1020C40545B2139);
      }
    }
  }
  v7 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  if (v7)
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 8), a2);
  v2[16] = 0;
  return result;
}

_BYTE *std::__optional_destruct_base<WTF::RefPtr<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count,WTF::RawPtrTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>,WTF::DefaultRefDerefTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>>,false>::reset[abi:sn180100](_BYTE *result)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE **v3;
  uint64_t v4;
  char v5;

  if (result[8])
  {
    v1 = result;
    v2 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    if (v2)
    {
      v3 = *(_BYTE ***)v2;
      v4 = *(_QWORD *)(v2 + 8) - 1;
      *(_QWORD *)(v2 + 8) = v4;
      if (v3)
      {
        result = *v3;
        if (!*v3)
          goto LABEL_9;
        v5 = *(_BYTE *)(v2 + 16);
        *(_BYTE *)(v2 + 16) = 1;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 16))(result, 0);
        *(_BYTE *)(v2 + 16) = v5;
        if (*(_QWORD *)v2)
          goto LABEL_9;
        v4 = *(_QWORD *)(v2 + 8);
      }
      if (!v4)
        result = (_BYTE *)MEMORY[0x19AEB936C](v2, 0x1020C40545B2139);
    }
LABEL_9:
    v1[8] = 0;
  }
  return result;
}

void WebKit::WebProcessProxy::transformHandlesToObjects(API::Object *)::Transformer::~Transformer(uint64_t a1, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  JUMPOUT(0x19AEB936CLL);
}

BOOL WebKit::WebProcessProxy::transformHandlesToObjects(API::Object *)::Transformer::shouldTransformObject(uint64_t a1, _BYTE *a2)
{
  int v3;

  v3 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
  return (v3 == 13 || v3 == 11) && a2[32] != 0;
}

unsigned int *WebKit::WebProcessProxy::transformHandlesToObjects(API::Object *)::Transformer::transformObject@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v3;
  int v6;
  unsigned int *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v3 = a2;
  v6 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 16))(a2);
  if (v6 == 13)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    result = (unsigned int *)WebKit::WebProcessProxy::webPage(*((_QWORD *)v3 + 2), a3);
    if (v8)
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  else
  {
    if (v6 != 11
      || (result = (unsigned int *)WebKit::WebFrameProxy::webFrame(*((_QWORD *)v3 + 2), *((_QWORD *)v3 + 3)),
          (v3 = result) != 0))
    {
      result = (unsigned int *)CFRetain(*((CFTypeRef *)v3 + 1));
    }
    *a3 = (uint64_t)v3;
  }
  return result;
}

void WebKit::WebProcessProxy::transformObjectsToHandles(API::Object *)::Transformer::~Transformer()
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebProcessProxy::transformObjectsToHandles(API::Object *)::Transformer::shouldTransformObject(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) - 59;
  return (v2 < 0x1E) & (0x28000001u >> v2);
}

void WebKit::WebProcessProxy::transformObjectsToHandles(API::Object *)::Transformer::transformObject(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(API::FrameHandle *__hidden);
  uint64_t v8;

  v2 = a1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v4 == 86)
  {
    v8 = *(_QWORD *)(v2 + 32);
    v5 = *(_QWORD *)(v8 + 744);
    v6 = *(_QWORD *)(v8 + 1896);
    v2 = API::Object::newObject(0x28uLL, 13);
    *(_QWORD *)v2 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v2);
    v7 = &off_1E34AD2D0;
  }
  else
  {
    if (v4 != 59)
    {
      CFRetain(*(CFTypeRef *)(v2 + 8));
      goto LABEL_7;
    }
    v5 = *(_QWORD *)(v2 + 272);
    v6 = *(_QWORD *)(v2 + 280);
    v2 = API::Object::newObject(0x28uLL, 11);
    *(_QWORD *)v2 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v2);
    v7 = &off_1E34AD1B8;
  }
  *(_QWORD *)v2 = v7;
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 24) = v6;
  *(_BYTE *)(v2 + 32) = 1;
LABEL_7:
  *a2 = v2;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::SpeechRecognitionRequest &,WTF::CompletionHandler<void ()(std::optional<WebCore::SpeechRecognitionError> &&)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D7388;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::SpeechRecognitionRequest &,WTF::CompletionHandler<void ()(std::optional<WebCore::SpeechRecognitionError> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7388;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::SpeechRecognitionRequest &,WTF::CompletionHandler<void ()(std::optional<WebCore::SpeechRecognitionError> &&)> &&>::call(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10[8];
  WTF::StringImpl *v11;
  char v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    WebKit::WebPageProxy::requestSpeechRecognitionPermission(v5 - 16, a2, a3);
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10[0] = 4;
    v12 = 1;
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v12)
    {
      v9 = v11;
      v11 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D73B0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D73B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1,BOOL>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 208);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, a3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_2,WebCore::CaptureSourceOrError>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D73D8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_2,WebCore::CaptureSourceOrError>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D73D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_2,WebCore::CaptureSourceOrError>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      return WebKit::WebPageProxy::createRealtimeMediaSourceForSpeechRecognition((WebKit::WebProcessProxy **)(v4 - 16), a2);
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)a2 = 0;
  *(_WORD *)(a2 + 16) = 7;
  return result;
}

uint64_t std::__optional_storage_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = result;
  if (*(unsigned __int8 *)(result + 72) == a2[72])
  {
    if (*(_BYTE *)(result + 72))
      return WebKit::WebProcessProxy::RemoteWorkerInformation::operator=(result, (uint64_t)a2);
  }
  else if (*(_BYTE *)(result + 72))
  {
    v3 = *(_QWORD *)(result + 56);
    if (v3)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
    v4 = *(unsigned int *)(v2 + 48);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E34D73F0[v4])(&v5, v2 + 40);
    *(_DWORD *)(v2 + 48) = -1;
    result = WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 24, (WTF::StringImpl *)a2);
    *(_BYTE *)(v2 + 72) = 0;
  }
  else
  {
    result = std::construct_at[abi:sn180100]<WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation*>(result, (uint64_t)a2);
    *(_BYTE *)(v2 + 72) = 1;
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::RemoteWorkerInformation::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  WTF::StringImpl *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (uint64_t *)(a1 + 24);
  v5 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v5)
  {
    v6 = *v4;
    v7 = 120 * v5;
    do
    {
      v8 = *(WTF::StringImpl **)(v6 + 80);
      *(_QWORD *)(v6 + 80) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(unsigned int **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (v9)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
      v10 = *(WTF::StringImpl **)v6;
      *(_QWORD *)v6 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v6 += 120;
      v7 -= 120;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v4, (_DWORD *)(a2 + 24));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(a1 + 40, a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  if (v13)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v13, v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = result;
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(result + 24) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_DWORD *)(result + 32) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    *(_DWORD *)(result + 36) = v4;
    *(_BYTE *)(result + 40) = 0;
    *(_DWORD *)(result + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(result + 40, a2 + 40);
    *(_QWORD *)(v3 + 56) = 0;
    v5 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(v3 + 56) = v5;
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxyTesting::dispatchActivityStateUpdate(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7410;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxyTesting::dispatchActivityStateUpdate(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7410;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebPageProxyTesting::dispatchActivityStateUpdate(void)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPageProxy::updateActivityState(*(_QWORD **)(a1 + 8), 1023);
  return WebKit::WebPageProxy::dispatchActivityStateChange(*(WebCore::RunLoopObserver ***)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageTesting::IsLayerTreeFrozen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7438;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageTesting::IsLayerTreeFrozen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7438;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageTesting::IsLayerTreeFrozen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxyTesting::setPermissionLevel(WTF::String const&,BOOL)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  char v14;
  IPC::Encoder *v15;

  v5 = *(uint64_t **)(a1 + 8);
  v6 = **(_BYTE **)(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2098;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v5);
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = v6;
  LOBYTE(v13) = 0;
  v14 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v15, 0, (uint64_t)&v13, 1);
  if (v14)
  {
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpPrivateClickMeasurement,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7488;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpPrivateClickMeasurement,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7488;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpPrivateClickMeasurement,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrivateClickMeasurement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D74B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrivateClickMeasurement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D74B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrivateClickMeasurement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementOverrideTimerForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D74D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementOverrideTimerForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D74D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementOverrideTimerForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkAttributedPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7500;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkAttributedPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7500;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkAttributedPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementEphemeralMeasurementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7528;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementEphemeralMeasurementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7528;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementEphemeralMeasurementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SimulatePrivateClickMeasurementSessionRestart,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7550;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SimulatePrivateClickMeasurementSessionRestart,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7550;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SimulatePrivateClickMeasurementSessionRestart,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenPublicKeyURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7578;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenPublicKeyURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7578;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenPublicKeyURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenSignatureURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D75A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenSignatureURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D75A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenSignatureURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAttributionReportURLsForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D75C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAttributionReportURLsForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D75C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAttributionReportURLsForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D75F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D75F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[3]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[4]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPCMFraudPreventionValuesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7618;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPCMFraudPreventionValuesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7618;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPCMFraudPreventionValuesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAppBundleIDForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7640;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAppBundleIDForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7640;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAppBundleIDForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::destruct(*(unsigned int **)a1, (void *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebPasteboardProxy::singleton(void)::$_0 &&>>()
{
  WebKit::WebPasteboardProxy::singleton(void)::proxy = (uint64_t)&off_1E34FCF38;
  unk_1ECE737F0 = 0;
  qword_1ECE73800 = 0;
  unk_1ECE73808 = 0;
  qword_1ECE737F8 = 0;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebProcessCache::*&)(void),WebKit::WebProcessCache*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 16 * v19);
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v21 + 1, 0);
          v22 = *v10;
          v23 = (_QWORD *)(v4 + 16 * i);
          v24 = v23[1];
          *++v23 = 0;
          *v21 = v22;
          v21[1] = v24;
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v23, 0);
        }
        else
        {
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v4 + 16 * i + 8, 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessCache::addProcessIfPossible(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D7690;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessCache::addProcessIfPossible(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D7690;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessCache::addProcessIfPossible(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&)::$_0,void,BOOL>::call(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *result;
  _QWORD *v8;
  WebKit::WebProcessProxy **v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::WebProcessProxy *v12;
  unsigned int *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WebKit::WebProcessProxy **v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  const WTF::StringImpl *v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  _QWORD *v45;
  const WTF::StringImpl *v46;
  const WTF::StringImpl *v47;
  _QWORD *v48;
  int v49;
  _QWORD *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  WTF::StringImpl *v58;
  WTF *v59;
  void *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint8_t buf[4];
  uint64_t v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  unsigned int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v6 = (uint64_t *)(v4 + 8);
  v5 = *(_QWORD *)(v4 + 8);
  result = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5, a1[4]);
  if (v5)
    v8 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
  else
    v8 = 0;
  if (v8 == result)
    return result;
  v9 = (WebKit::WebProcessProxy **)result[1];
  result[1] = 0;
  if (*v6)
  {
    v10 = *v6 + 16 * *(unsigned int *)(*v6 - 4);
    if ((_QWORD *)v10 == result)
      goto LABEL_12;
  }
  else
  {
    if (!result)
      goto LABEL_12;
    v10 = 0;
  }
  if ((_QWORD *)v10 != result)
    result = (_QWORD *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v6, result);
LABEL_12:
  if (!v9)
    return result;
  if ((a2 & 1) == 0)
  {
    v21 = qword_1ECE71668;
    if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_ERROR))
    {
      v22 = *((_QWORD *)*v9 + 17);
      if (v22)
        LODWORD(v22) = *(_DWORD *)(v22 + 108);
      *(_DWORD *)buf = 134218240;
      v64 = v4;
      v65 = 1024;
      v66 = v22;
      _os_log_error_impl(&dword_196BCC000, v21, OS_LOG_TYPE_ERROR, "%p - [PID=%d] WebProcessCache::addProcessIfPossible(): Not caching process because it is not responsive", buf, 0x12u);
    }
    goto LABEL_97;
  }
  v11 = *(_QWORD *)(a1[2] + 768);
  v12 = *v9;
  v13 = (unsigned int *)((char *)*v9 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if ((WebKit::WebProcessCache::canCacheProcess((WebKit::WebProcessCache *)v11, v12) & 1) == 0)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
    goto LABEL_97;
  }
  if (!*((_BYTE *)v12 + 704)
    || (v15 = (WTF::StringImpl *)*((_QWORD *)v12 + 87)) == 0
    || (*(_DWORD *)v15 += 2, v62 = v15, !*((_DWORD *)v15 + 1))
    || MEMORY[0x19AEABBCC](v15, "nullOrigin", 10))
  {
    __break(0xC471u);
    JUMPOUT(0x1973B053CLL);
  }
  v61 = v15;
  v16 = (uint64_t *)(v11 + 16);
  v17 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v11 + 16), &v62);
  v18 = *(_QWORD *)(v11 + 16);
  if (v18)
    v18 += 16 * *(unsigned int *)(v18 - 4);
  if (v18 != v17)
  {
    v19 = *(WebKit::WebProcessProxy ***)(v17 + 8);
    *(_QWORD *)(v17 + 8) = 0;
    if (*v16)
    {
      v20 = *v16 + 16 * *(unsigned int *)(*v16 - 4);
      if (v20 == v17)
      {
LABEL_36:
        if (v19)
        {
          v23 = qword_1ECE71668;
          if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
          {
            v24 = *((_QWORD *)*v19 + 17);
            if (v24)
              LODWORD(v24) = *(_DWORD *)(v24 + 108);
            *(_DWORD *)buf = 134218240;
            v64 = v11;
            v65 = 1024;
            v66 = v24;
            _os_log_impl(&dword_196BCC000, v23, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::addProcess: Evicting process from WebProcess cache because a new process was added for the same domain", buf, 0x12u);
          }
          WebKit::WebProcessCache::CachedProcess::~CachedProcess(v19);
          WTF::fastFree(v25, v26);
        }
        goto LABEL_42;
      }
    }
    else
    {
      if (!v17)
        goto LABEL_36;
      v20 = 0;
    }
    if (v20 != v17)
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove((uint64_t *)(v11 + 16), (WTF::StringImpl **)v17);
    goto LABEL_36;
  }
  while (1)
  {
LABEL_42:
    v27 = *v16;
    if (*v16)
    {
      v28 = *(_DWORD *)(v27 - 12);
      v29 = *(_DWORD *)(v11 + 4);
      if (v28 < v29)
        break;
      if (v28)
      {
        do
        {
          v30 = *v16;
          v31 = WTF::weakRandomNumber<unsigned int>();
          v33 = *v16;
          if (*v16)
            LODWORD(v33) = *(_DWORD *)(v33 - 8);
          v34 = v33 & v31;
        }
        while ((WTF::equal(*(WTF **)(v30 + 16 * v34), 0, v32) & 1) != 0 || *(_QWORD *)(v30 + 16 * v34) == -1);
        v35 = v30 + 16 * v34;
      }
      else
      {
        v35 = v27 + 16 * *(unsigned int *)(v27 - 4);
      }
      goto LABEL_53;
    }
    v29 = *(_DWORD *)(v11 + 4);
    if (v29)
      break;
    v35 = 0;
LABEL_53:
    v36 = qword_1ECE71668;
    if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
    {
      v37 = *(_QWORD *)(**(_QWORD **)(v35 + 8) + 136);
      if (v37)
        LODWORD(v37) = *(_DWORD *)(v37 + 108);
      *(_DWORD *)buf = 134218240;
      v64 = v11;
      v65 = 1024;
      v66 = v37;
      _os_log_impl(&dword_196BCC000, v36, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::addProcess: Evicting process from WebProcess cache because capacity was reached", buf, 0x12u);
    }
    if (*v16)
    {
      v38 = *v16 + 16 * *(unsigned int *)(*v16 - 4);
      if (v38 != v35)
      {
LABEL_62:
        if (v38 != v35)
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove((uint64_t *)(v11 + 16), (WTF::StringImpl **)v35);
      }
    }
    else if (v35)
    {
      v38 = 0;
      goto LABEL_62;
    }
  }
  v39 = qword_1ECE71668;
  if (!os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    if (!v27)
      goto LABEL_73;
    goto LABEL_74;
  }
  v41 = *((_QWORD *)*v9 + 17);
  if (v41)
    LODWORD(v41) = *(_DWORD *)(v41 + 108);
  if (v27)
    v42 = *(_DWORD *)(v27 - 12) + 1;
  else
    v42 = 1;
  *(_DWORD *)buf = 134218752;
  v64 = v11;
  v65 = 1024;
  v66 = v41;
  v67 = 1024;
  v68 = v42;
  v69 = 1024;
  v70 = v29;
  _os_log_impl(&dword_196BCC000, v39, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::addProcess: Added process to WebProcess cache (size=%u, capacity=%u)", buf, 0x1Eu);
  v27 = *(_QWORD *)(v11 + 16);
  if (v27)
  {
LABEL_74:
    v43 = *(_DWORD *)(v27 - 8);
    goto LABEL_75;
  }
LABEL_73:
  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v11 + 16));
  v27 = *v16;
  if (*v16)
    goto LABEL_74;
  v43 = 0;
LABEL_75:
  v44 = WTF::ASCIICaseInsensitiveHash::hash(v61, v40) & v43;
  v45 = (_QWORD *)(v27 + 16 * v44);
  if ((WTF::equal((WTF *)*v45, 0, v46) & 1) != 0)
  {
LABEL_82:
    WTF::String::operator=((WTF::StringImpl **)v45, (WTF::StringImpl *)&v62);
    std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100]((WebKit::WebProcessProxy ***)v45 + 1, v9);
    v52 = *v16;
    if (*v16)
      v53 = *(_DWORD *)(v52 - 12) + 1;
    else
      v53 = 1;
    *(_DWORD *)(v52 - 12) = v53;
    v54 = *v16;
    if (*v16)
      v55 = *(_DWORD *)(v54 - 12);
    else
      v55 = 0;
    v56 = (*(_DWORD *)(v54 - 16) + v55);
    v57 = *(unsigned int *)(v54 - 4);
    if (v57 > 0x400)
    {
      if (v57 > 2 * v56)
        goto LABEL_91;
    }
    else if (3 * v57 > 4 * v56)
    {
LABEL_91:
      v9 = 0;
      goto LABEL_92;
    }
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v16);
    goto LABEL_91;
  }
  v48 = 0;
  v49 = 1;
  while (1)
  {
    v50 = v45;
    if (*v45 != -1)
    {
      v50 = v48;
      if ((WTF::equalIgnoringASCIICase((WTF *)*v45, v61, v47) & 1) != 0)
        break;
    }
    v44 = (v44 + v49) & v43;
    v45 = (_QWORD *)(v27 + 16 * v44);
    ++v49;
    v48 = v50;
    if (WTF::equal((WTF *)*v45, 0, v47))
    {
      if (v50)
      {
        *v50 = 0;
        v50[1] = 0;
        --*(_DWORD *)(*v16 - 16);
        v45 = v50;
      }
      goto LABEL_82;
    }
  }
LABEL_92:
  v58 = v62;
  v62 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v51);
    else
      *(_DWORD *)v58 -= 2;
  }
  result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
  if (v9)
  {
LABEL_97:
    WebKit::WebProcessCache::CachedProcess::~CachedProcess(v9);
    return (_QWORD *)WTF::fastFree(v59, v60);
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *a2 = -1;
  result = std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](a2 + 1, 0);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(a2, (WTF::StringImpl *)a2);
  result = std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](a2 + 1, 0);
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v9 >> 1);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  WTF::ASCIICaseInsensitiveHash **v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  const WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::ASCIICaseInsensitiveHash *v24;
  _QWORD *v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    while (1)
    {
      v11 = (WTF::ASCIICaseInsensitiveHash **)(v4 + 16 * v10);
      if (*v11 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v11, 0, v9))
        {
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v4 + 16 * v10 + 8, 0);
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              goto LABEL_24;
            *(_DWORD *)v13 -= 2;
          }
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::ASCIICaseInsensitiveHash::hash(*v11, v12);
          v18 = 0;
          do
          {
            v19 = v16 & v15;
            v20 = WTF::equal(*(WTF **)(v14 + 16 * v19), 0, v17);
            v16 = ++v18 + v19;
          }
          while (!v20);
          v21 = v14 + 16 * v19;
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v21 + 8, 0);
          v23 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = *v11;
          *v11 = 0;
          *(_QWORD *)v21 = v24;
          v25 = (_QWORD *)(v4 + 16 * v10);
          v26 = v25[1];
          *++v25 = 0;
          *(_QWORD *)(v21 + 8) = v26;
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v25, 0);
          v13 = *v11;
          *v11 = 0;
          if (!v13)
            goto LABEL_25;
          if (*(_DWORD *)v13 == 2)
          {
LABEL_24:
            WTF::StringImpl::destroy(v13, v8);
            goto LABEL_25;
          }
          *(_DWORD *)v13 -= 2;
        }
      }
LABEL_25:
      if (++v10 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  WTF **v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
  v7 = (WTF **)(v2 + 16 * v6);
  if ((WTF::equal(*v7, 0, v8) & 1) != 0)
  {
LABEL_7:
    if (*a1)
      return *a1 + 16 * *(unsigned int *)(*a1 - 4);
    return 0;
  }
  v10 = 1;
  while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) == 0)
  {
    v6 = (v6 + v10) & v5;
    v7 = (WTF **)(v2 + 16 * v6);
    ++v10;
    if (WTF::equal(*v7, 0, v9))
      goto LABEL_7;
  }
  return (uint64_t)v7;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebProcessCache::CachedProcess::*&)(void),WebKit::WebProcessCache::CachedProcess*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_0,void,WTF::RefCounterEvent>::call(uint64_t a1, void *a2)
{
  return WebKit::WebProcessPool::updateProcessSuppressionState(*(WebKit::WebProcessPool **)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_1,void,WTF::RefCounterEvent>::call(uint64_t a1, void *a2)
{
  return WebKit::WebProcessPool::updateProcessSuppressionState(*(WebKit::WebProcessPool **)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_2,void,WTF::RefCounterEvent>::call()
{
  return WTF::RunLoop::TimerBase::start();
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebProcessPool::*&)(void),WebKit::WebProcessPool*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_3,void>::call(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 8) + 640) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_6,void,WTF::RefCounterEvent>::call(WebCore::PlatformMediaSessionManager *a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v3;
  void *v4;
  int v5;
  pid_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _BYTE buf[12];
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)a1 + 1);
  result = WebCore::PlatformMediaSessionManager::mediaCapabilityGrantsEnabled(a1);
  if ((result & 1) != 0)
    return result;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 800) + 8))
  {
    result = WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v1 + 832));
    if (*(_BYTE *)(v1 + 824))
      return result;
    v3 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v1;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::updateAudibleMediaAssertions: The number of processes playing audible media is now greater than zero. Taking UI process assertion.", buf, 0xCu);
    }
    result = WTF::processHasEntitlement();
    v5 = result;
    if ((_DWORD)result)
    {
      v6 = getpid();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v19 = 0;
      v7 = WTF::fastMalloc((WTF *)0xB0);
      v8 = WebKit::ProcessAssertion::ProcessAssertion(v7, v6, (_DWORD **)buf, 4, MEMORY[0x1E0CBF738]);
      result = WebKit::ProcessAssertion::acquireAsync(v8, &v19);
    }
    else
    {
      v7 = 0;
    }
    v10 = *(_QWORD **)(v1 + 176);
    if (v10)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v17 = 0;
      v11 = WTF::fastMalloc((WTF *)0xB0);
      v12 = WebKit::ProcessAssertion::ProcessAssertion(v11, v10, (_DWORD **)&v18, 4);
      result = WebKit::ProcessAssertion::acquireAsync(v12, &v17);
    }
    else
    {
      v11 = 0;
    }
    if (*(_BYTE *)(v1 + 824))
    {
      v13 = *(_QWORD *)(v1 + 808);
      *(_QWORD *)(v1 + 808) = v7;
      if (v13)
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v13 + 8), v4);
      v14 = *(_QWORD *)(v1 + 816);
      *(_QWORD *)(v1 + 816) = v11;
      if (v14)
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 8), v4);
      if (!v10)
        goto LABEL_28;
    }
    else
    {
      *(_QWORD *)(v1 + 808) = v7;
      *(_QWORD *)(v1 + 816) = v11;
      *(_BYTE *)(v1 + 824) = 1;
      if (!v10)
        goto LABEL_28;
    }
    v15 = v17;
    v17 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    result = (uint64_t)v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v4);
        if (!v5)
          return result;
        goto LABEL_29;
      }
      *(_DWORD *)result -= 2;
    }
LABEL_28:
    if (!v5)
      return result;
LABEL_29:
    v16 = v19;
    v19 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    result = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v9 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v1;
    v21 = 2048;
    v22 = 0x4014000000000000;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::updateAudibleMediaAssertions: Starting timer to clear audible activity in %g seconds because we are no longer playing audio", buf, 0x16u);
  }
  return WTF::RunLoop::TimerBase::start();
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_7,void,WTF::RefCounterEvent>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 872) + 8);
  if (v2)
  {
    if (*(_BYTE *)(v1 + 880))
      return;
    v3 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 134217984;
      v9 = v1;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::updateMediaStreamingActivity: The number of processes with media networking is now greater than zero. Notify network.", (uint8_t *)&v8, 0xCu);
    }
    *(_BYTE *)(v1 + 880) = 1;
  }
  else
  {
    v4 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 134217984;
      v9 = v1;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::updateMediaStreamingActivity: The number of processes with media networking now zero. Notify network.", (uint8_t *)&v8, 0xCu);
    }
    *(_BYTE *)(v1 + 880) = 0;
  }
  {
    if (WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess)
    {
      v5 = *(_QWORD *)(WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess + 8);
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 16);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        WebKit::NetworkProcessProxy::notifyMediaStreamingActivity(v5, v2 != 0);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
      }
    }
  }
  else
  {
    WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
  }
}

uint64_t WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  const WTF::ASCIILiteral *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(24 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    v9 = v3;
    while (1)
    {
      v10 = (_OWORD *)(v2 + 24 * v8);
      if (*(_QWORD *)v10 != -1)
      {
        if (*(_QWORD *)v10)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)(v2 + 24 * v8), v7);
          v16 = 0;
          do
          {
            v17 = v15 & v14;
            v18 = (_QWORD *)(v13 + 24 * (v15 & v14));
            v15 = ++v16 + (v15 & v14);
          }
          while (*v18);
          v19 = v13 + 24 * v17;
          v22 = *(_QWORD *)(v19 + 16);
          v21 = (_QWORD *)(v19 + 16);
          v20 = v22;
          *v21 = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
          *(_OWORD *)v18 = *v10;
          v23 = v2 + 24 * v8;
          v24 = *(_QWORD *)(v23 + 16);
          *(_QWORD *)(v23 + 16) = 0;
          *v21 = v24;
          v12 = *(_QWORD *)(v23 + 16);
          *(_QWORD *)(v23 + 16) = 0;
          if (!v12)
            goto LABEL_21;
LABEL_20:
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
          goto LABEL_21;
        }
        v11 = v2 + 24 * v8;
        v12 = *(_QWORD *)(v11 + 16);
        *(_QWORD *)(v11 + 16) = 0;
        if (v12)
          goto LABEL_20;
      }
LABEL_21:
      if (++v8 == v9)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_8,void>::call(WebKit::WebsiteDataStore *a1)
{
  WebKit::WebsiteDataStore *v1;
  WebKit::WebsiteDataStore *v2;

  {
    if (WebKit::globalDefaultDataStore(void)::globalDefaultDataStore
      && *(_QWORD *)(WebKit::globalDefaultDataStore(void)::globalDefaultDataStore + 8))
    {
      WebKit::WebsiteDataStore::defaultDataStore(a1, &v2);
      v1 = v2;
      WebKit::WebsiteDataStore::terminateNetworkProcess((unsigned int *)v2);
      if (v1)
        CFRelease(*((CFTypeRef *)v1 + 1));
    }
  }
  else
  {
    WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = 0;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_9,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D7870;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_9,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7870;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_9,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      {
        qword_1ECE735A0 = 0;
        WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance = 0u;
        *(_OWORD *)algn_1ECE73590 = 0u;
      }
      v3 = *(unsigned int *)(v2 + 68);
      if ((_DWORD)v3)
      {
        v4 = *(uint64_t **)(v2 + 56);
        v5 = &v4[v3];
        do
        {
          v6 = *v4;
          v7 = *(_QWORD *)(*v4 + 136);
          if (v7 && *(_BYTE *)(v7 + 104) || *(_QWORD *)(v6 + 144))
          {
            v8 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v8 = 2656;
            *(_QWORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 528) = v8 + 16;
            *(_QWORD *)(v8 + 536) = v8 + 16;
            *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v8 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
            v25 = (IPC::Encoder *)v8;
            if (*((_QWORD *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance + 1))
              v9 = *(_DWORD *)(*((_QWORD *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance
                               + 1)
                             - 12);
            else
              v9 = 0;
            *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = v9;
            v12 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance + 1, v10, v11);
            v13 = (uint64_t *)v12;
            v23[0] = v12;
            v23[1] = v14;
            if (*((_QWORD *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance + 1))
              v15 = *((_QWORD *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance + 1)
                  + 16
                  * *(unsigned int *)(*((_QWORD *)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance
                                      + 1)
                                    - 4);
            else
              v15 = 0;
            if (v15 != v12)
            {
              do
              {
                IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v13);
                IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v13 + 1);
                v23[0] += 16;
                WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v23, v16, v17);
                v13 = (uint64_t *)v23[0];
              }
              while (v23[0] != v15);
            }
            LOBYTE(v23[0]) = 0;
            v24 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v25, 0, (uint64_t)v23, 1);
            if (v24)
            {
              v19 = v23[0];
              v23[0] = 0;
              if (v19)
                (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            }
            v20 = v25;
            v25 = 0;
            if (v20)
            {
              IPC::Encoder::~Encoder(v20, v18);
              WTF::fastFree(v21, v22);
            }
          }
          ++v4;
        }
        while (v4 != v5);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_10,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D7898;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_10,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7898;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_10,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::ASCIICaseInsensitiveHash **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  WTF::StringImpl *v27[2];
  WTF::StringImpl **v28;
  _QWORD v29[2];
  char v30;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v28 = 0;
      {
        if (DWORD1(xmmword_1ECE73558))
        {
          v5 = *((_QWORD *)&WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance + 1);
          v6 = *((_QWORD *)&WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance + 1)
             + 32 * DWORD1(xmmword_1ECE73558);
          do
          {
            v7 = *(unsigned int *)(v5 + 28);
            if ((_DWORD)v7)
            {
              v8 = *(WTF::StringImpl ***)(v5 + 16);
              v9 = 40 * v7;
              do
              {
                WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(v8, v27);
                WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v28, v27, (uint64_t)v29);
                v10 = v27[0];
                v27[0] = 0;
                if (v10)
                {
                  if (*(_DWORD *)v10 == 2)
                    WTF::StringImpl::destroy(v10, v3);
                  else
                    *(_DWORD *)v10 -= 2;
                }
                v8 += 5;
                v9 -= 40;
              }
              while (v9);
            }
            else
            {
              v11 = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(v5 + 8), (uint64_t)v3, v4);
              v12 = (WTF::ASCIICaseInsensitiveHash **)v11;
              v13 = *(_QWORD *)(v5 + 8);
              if (v13)
                v14 = (WTF::StringImpl *)(v13 + 24 * *(unsigned int *)(v13 - 4));
              else
                v14 = 0;
              v27[0] = v11;
              for (v27[1] = v3; v27[0] != v14; v12 = (WTF::ASCIICaseInsensitiveHash **)v27[0])
              {
                WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v28, v12, (uint64_t)v29);
                v27[0] = (WTF::StringImpl *)((char *)v27[0] + 24);
                WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v27, v15, v16);
              }
            }
            v5 += 32;
          }
          while (v5 != v6);
        }
      }
      else
      {
        xmmword_1ECE73558 = 0u;
        unk_1ECE73568 = 0u;
        WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
      }
      v17 = *(unsigned int *)(v2 + 68);
      if ((_DWORD)v17)
      {
        v18 = *(uint64_t **)(v2 + 56);
        v19 = 8 * v17;
        do
        {
          v20 = *v18;
          v21 = *(_QWORD *)(*v18 + 136);
          if (v21 && *(_BYTE *)(v21 + 104) || *(_QWORD *)(v20 + 144))
          {
            v22 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v22 = 2655;
            *(_QWORD *)(v22 + 8) = 0;
            *(_QWORD *)(v22 + 528) = v22 + 16;
            *(_QWORD *)(v22 + 536) = v22 + 16;
            *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v22 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
            v27[0] = (WTF::StringImpl *)v22;
            IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v22, (uint64_t *)&v28);
            LOBYTE(v29[0]) = 0;
            v30 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v20, v27, 0, (uint64_t)v29, 1);
            if (v30)
            {
              v23 = v29[0];
              v29[0] = 0;
              if (v23)
                (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            }
            v24 = v27[0];
            v27[0] = 0;
            if (v24)
            {
              IPC::Encoder::~Encoder(v24, v3);
              WTF::fastFree(v25, v26);
            }
          }
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
      if (v28)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v3);
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::FullKeyboardAccessModeChanged>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2589;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD **)a2;
      v8 = *(_QWORD *)a2 + 8 * v6;
      do
      {
        v9 = *v7;
        v10 = (unsigned int *)(*v7 + 16);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        *v5++ = v9;
        ++v7;
      }
      while (v7 != (_QWORD *)v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D78C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D78C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)> &&)::$_3,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D78E8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)> &&)::$_3,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D78E8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)> &&)::$_4,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D7910;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)> &&)::$_4,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D7910;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::initializeNewWebProcess(WebKit::WebProcessProxy &,WebKit::WebsiteDataStore *,WebKit::WebProcessProxy::IsPrewarmed)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D7938;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::initializeNewWebProcess(WebKit::WebProcessProxy &,WebKit::WebsiteDataStore *,WebKit::WebProcessProxy::IsPrewarmed)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WebKit::ProcessThrottlerActivity **a1)
{
  void *v2;

  *a1 = (WebKit::ProcessThrottlerActivity *)off_1E34D7938;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

unsigned int *WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;

  if (result[2] > a2)
  {
    v2 = result;
    if (result[3] > a2)
      result[3] = a2;
    result = *(unsigned int **)result;
    if (a2)
    {
      v2[2] = a2;
      result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(8 * a2));
      *(_QWORD *)v2 = result;
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

void **WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebProcessProxy&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void **result;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v7);
  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD **)a1;
  v11 = (unsigned int *)(a2 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v10[v9] = a2;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetAlwaysUsesComplexTextCodePath>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2624;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDisableFontSubpixelAntialiasingForTesting>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2628;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsEmptyDocument>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2611;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsSecure>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2614;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2606;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDomainRelaxationForbiddenForURLScheme>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2629;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsCachePartitioned>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2608;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsCanDisplayOnlyIfCanRequest>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2609;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetCacheModel>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2626;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkProcess::SetCacheModelSynchronouslyForTesting>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  IPC::Encoder *v25;
  uint64_t v26;
  char v27;

  v26 = 0;
  IPC::Connection::createSyncMessageEncoder(3531, a3, &v26, (uint64_t *)&v25);
  v11 = v25;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v25 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  v12 = *a2;
  *IPC::Encoder::grow(v11, 1uLL, 1) = v12;
  IPC::Connection::sendSyncMessage(a1, v26, (uint64_t *)&v25, a4, (uint64_t)&v23, a6);
  v13 = v24;
  if (v24)
  {
    if (v24 != 1)
    {
      v19 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDefaultRequestTimeoutInterval>(v19, v20, v21, v22);
    }
    *(_BYTE *)a5 = v23;
  }
  else
  {
    v14 = v23;
    v23 = 0;
    *(_QWORD *)a5 = v14;
  }
  *(_DWORD *)(a5 + 16) = v13;
  ((void (*)(char *, uint64_t *))off_1E34D7950[v13])(&v27, &v23);
  result = v25;
  v25 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDefaultRequestTimeoutInterval>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2627;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::StopMemorySampler>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2652;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void **WTF::Detail::CallableWrapper<WebKit::WebProcessPool::terminateServiceWorkers(void)::$_0,void,WebKit::WebProcessProxy &>::call(void **result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a2 + 872))
  {
    result = (void **)result[1];
    v2 = *((unsigned int *)result + 3);
    if ((_DWORD)v2 == *((_DWORD *)result + 2))
    {
      return WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebProcessProxy&>((uint64_t)result, a2);
    }
    else
    {
      v3 = *result;
      v4 = (unsigned int *)(a2 + 16);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v3[v2] = a2;
      ++*((_DWORD *)result + 3);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DestroyAutomationSessionProxy>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2582;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D7998;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D7998;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(uint64_t a1, const void **a2)
{
  const void *v3;
  WebKit *v4;
  uint64_t v5;
  uint64_t (**v6)();
  WebKit *v7;
  WebKit *v8;
  uint64_t (**v9)();

  v3 = *a2;
  v9 = &off_1E34D7358;
  WebKit::UserData::transform(v3, (uint64_t)&v9, &v8);
  v4 = v8;
  v8 = 0;
  v9 = (uint64_t (**)())v4;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v5 + 16))(v5, &v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v9;
  v9 = 0;
  if (v6)
    CFRelease(v6[1]);
  v7 = v8;
  v8 = 0;
  if (v7)
    CFRelease(*((CFTypeRef *)v7 + 1));
}

uint64_t WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = 80 * v3;
    do
    {
      v4 = std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100](v4, a2)
         + 80;
      v5 -= 80;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      WTF::fastFree((WTF *)(v3 - 16), a2);
    v4 = *(WTF **)(a1 + 40);
    if (v4)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v4, a2);
    }
    v5 = *(WTF **)(a1 + 24);
    if (v5)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v5, a2);
    }
    v6 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GarbageCollectJavaScriptObjects>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2592;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetJavaScriptGarbageCollectorTimerEnabled>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2641;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMemoryCacheDisabled>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2644;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::updateProcessAssertions(void)::$_0,void>::call()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    *(_QWORD *)algn_1ECE73828 = 0;
  }
  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E34D79E8;
  v2 = v0;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v2);
  result = (uint64_t)v2;
  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14WebProcessPool23updateProcessAssertionsEvENK3__0clEvEUlRT_E_vJRNS2_15WebProcessProxyEEE4callES9_(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;

  v3 = (unsigned int *)(a2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  if (*(_BYTE *)(a2 + 872))
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(a2, 1);
  if (*(_BYTE *)(a2 + 952))
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(a2, 2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  WTF::ASCIICaseInsensitiveHash **v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::ASCIICaseInsensitiveHash *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    while (1)
    {
      v11 = (WTF::ASCIICaseInsensitiveHash **)(v4 + 16 * v10);
      if (*v11 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v11, 0, v9))
        {
          v12 = v4 + 16 * v10;
          v13 = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v13 + 16));
          v14 = *v11;
          *v11 = 0;
          if (!v14)
            goto LABEL_31;
          if (*(_DWORD *)v14 == 2)
          {
LABEL_30:
            WTF::StringImpl::destroy(v14, v8);
            goto LABEL_31;
          }
          *(_DWORD *)v14 -= 2;
        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = WTF::ASCIICaseInsensitiveHash::hash(*v11, v8);
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v20 = WTF::equal(*(WTF **)(v15 + 16 * v19), 0, v9);
            v17 = ++v18 + v19;
          }
          while (!v20);
          v21 = v15 + 16 * v19;
          v22 = *(_QWORD *)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v22)
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v22 + 16));
          v23 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v8);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = *v11;
          *v11 = 0;
          *(_QWORD *)v21 = v24;
          v25 = v4 + 16 * v10;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          *(_QWORD *)(v21 + 8) = v26;
          v27 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v27 + 16));
          v14 = *v11;
          *v11 = 0;
          if (!v14)
            goto LABEL_31;
          if (*(_DWORD *)v14 == 2)
            goto LABEL_30;
          *(_DWORD *)v14 -= 2;
        }
      }
LABEL_31:
      if (++v10 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D7A10;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D7A10;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned int *result;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t *, _QWORD, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, &v4, 0, "Found process for the same site", 32);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = v4;
  v4 = 0;
  if (v3)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::$_1 &&>>()
{
  return WTFLogAlways();
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E34D7A38;
  v3 = (unsigned int *)a1[13];
  a1[13] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0(a1 + 1, (WTF::StringImpl *)a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  *(_QWORD *)a1 = off_1E34D7A38;
  v3 = (unsigned int *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0((_QWORD *)a1 + 1, (WTF::StringImpl *)a2);
  return WTF::fastFree(a1, v6);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int *result;
  unsigned int *v15;

  v2 = *(_QWORD *)(a1 + 104);
  if (!v2)
    return WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::operator()(a1 + 8, 0);
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::operator()(a1 + 8, 0);
  v4 = WTF::fastMalloc((WTF *)0x68);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = off_1E34D7A60;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v6;
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(v4 + 24) = v7;
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(v4 + 32) = v8;
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(v4 + 40) = v9;
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(v4 + 48) = v10;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(v4 + 56) = v11;
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(v4 + 80) = v12;
  *(_QWORD *)(v4 + 88) = *(_QWORD *)(a1 + 88);
  v13 = *(_DWORD **)(a1 + 96);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(v4 + 96) = v13;
  v15 = (unsigned int *)v4;
  WebKit::SuspendedPageProxy::waitUntilReadyToUnsuspend(v3, (uint64_t *)&v15);
  result = v15;
  if (v15)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
  return result;
}

unsigned int *WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  v2 = a2;
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(v4 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(v4 + 144) || *(_DWORD *)(a1 + 84) > 2u)
  {
    if (a2)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
      if (!v11)
        goto LABEL_12;
      v12 = *(_QWORD *)(v11 + 416);
      if (v12)
        v12 = *(_QWORD *)(v12 + 32);
      if (v12 != a2)
LABEL_12:
        v2 = 0;
    }
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 64);
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, a1 + 40, v2, v13, v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    v6 = a1 + 72;
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(unsigned __int8 *)(a1 + 80);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48);
    CFRetain(*(CFTypeRef *)(v9 + 8));
    WebKit::WebProcessPool::processForRegistrableDomain(v3, v7, (WTF::ASCIICaseInsensitiveHash **)(v6 + 16), v8, (WebKit::WebPreferences **)v9, &v16);
    CFRelease(*(CFTypeRef *)(v9 + 8));
    result = (unsigned int *)WebKit::WebProcessPool::prepareProcessForNavigation(v3, (uint64_t *)&v16, *(_QWORD *)(v6 - 48), 0, *(_QWORD *)(v6 - 16), *(_QWORD *)(v6 - 8), (WTF::ASCIICaseInsensitiveHash **)(v6 + 16), *(_QWORD *)(v6 - 40), *(_BYTE *)(v6 + 8), (WebKit::WebsiteDataStore **)v6, (uint64_t *)(v6 - 56), *(_DWORD *)(v6 + 12) + 1);
    if (v16)
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v16 + 4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0,void,WebKit::SuspendedPageProxy>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34D7A60;
  WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0,void,WebKit::SuspendedPageProxy>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34D7A60;
  WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0,void,WebKit::SuspendedPageProxy>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::operator()(a1 + 8, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::AddMockMediaDevice>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2569;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::MockMediaDevice,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ClearMockMediaDevices>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2575;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RemoveMockMediaDevice>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2618;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMockMediaDeviceIsEphemeral>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2645;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)a2);
  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ResetMockMediaDevices>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2619;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::ASCIICaseInsensitiveHash **v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  const WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::ASCIICaseInsensitiveHash *v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::ASCIICaseInsensitiveHash **)(v5 + 16 * v11);
      if (*v13 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v13, 0, v10))
        {
          std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100]((uint64_t *)(v5 + 16 * v11 + 8), 0);
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v9);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = WTF::ASCIICaseInsensitiveHash::hash(*v13, v14);
          v20 = 0;
          do
          {
            v21 = v18 & v17;
            v22 = WTF::equal(*(WTF **)(v16 + 16 * v21), 0, v19);
            v18 = ++v20 + v21;
          }
          while (!v22);
          v23 = v16 + 16 * v21;
          std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100]((uint64_t *)(v23 + 8), 0);
          v25 = *(WTF::StringImpl **)v23;
          *(_QWORD *)v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v24);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v26;
          v27 = (uint64_t *)(v5 + 16 * v11);
          v28 = v27[1];
          *++v27 = 0;
          *(_QWORD *)(v23 + 8) = v28;
          std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100](v27, 0);
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v9);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v16 + 16 * v21;
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v12;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ClearCurrentModifierStateForTesting>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2574;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDomainsWithUserInteraction>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2631;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SetDomainsWithCrossPageStorageAccess,WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D7A88;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SetDomainsWithCrossPageStorageAccess,WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D7A88;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[1]);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SeedResourceLoadStatisticsForTesting,WebKit::WebProcessPool::seedResourceLoadStatisticsForTesting(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::seedResourceLoadStatisticsForTesting(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D7AB0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SeedResourceLoadStatisticsForTesting,WebKit::WebProcessPool::seedResourceLoadStatisticsForTesting(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::seedResourceLoadStatisticsForTesting(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D7AB0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SendResourceLoadStatisticsDataImmediately,WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D7AD8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SendResourceLoadStatisticsDataImmediately,WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D7AD8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::serviceWorkerProxiesCount(void)::$_0,void,WebKit::WebProcessProxy &>::call(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 872))
    ++**(_DWORD **)(result + 8);
  return result;
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::WebProcessProxy &>::call(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  uint64_t v14;
  uint64_t v15[2];
  char v16;
  IPC::Encoder *v17;

  v3 = **(_DWORD ***)(a1 + 8);
  ++*v3;
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2598;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v17 = (IPC::Encoder *)v4;
  v14 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34D7B50;
  v5[1] = v3;
  v15[0] = 0;
  WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(v15, v6);
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v15[0] = (uint64_t)v5;
  v15[1] = v7;
  v16 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v17, 0, (uint64_t)v15, 1);
  if (v16)
  {
    v9 = v15[0];
    v15[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(&v14, v8);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages10WebProcess12IsJITEnabledEZZNK6WebKit14WebProcessPool39isJITDisabledInAllRemoteWorkerProcessesEONS_17CompletionHandlerIFvbEEEENK3__0clINS8_15WebProcessProxyEEEDaRT_EUlbE_EENSA_IFvPNS2_7DecoderEEEEOT0_NS_19ThreadLikeAssertionEEUlSM_E_vJSM_EED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E34D7B50;
  WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(a1 + 1, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages10WebProcess12IsJITEnabledEZZNK6WebKit14WebProcessPool39isJITDisabledInAllRemoteWorkerProcessesEONS_17CompletionHandlerIFvbEEEENK3__0clINS8_15WebProcessProxyEEEDaRT_EUlbE_EENSA_IFvPNS2_7DecoderEEEEOT0_NS_19ThreadLikeAssertionEEUlSM_E_vJSM_EED0Ev(uint64_t *a1, void *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E34D7B50;
  WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages10WebProcess12IsJITEnabledEZZNK6WebKit14WebProcessPool39isJITDisabledInAllRemoteWorkerProcessesEONS_17CompletionHandlerIFvbEEEENK3__0clINS8_15WebProcessProxyEEEDaRT_EUlbE_EENSA_IFvPNS2_7DecoderEEEEOT0_NS_19ThreadLikeAssertionEEUlSM_E_vJSM_EE4callESM_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char v5;

  if (a2)
  {
    if (*a2)
    {
      v2 = result;
      result = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
      if ((unsigned __int16)result >= 0x100u)
      {
        v3 = *(_QWORD *)(v2 + 8);
        if ((_BYTE)result)
          v4 = 1;
        else
          v4 = *(_BYTE *)(v3 + 16) == 0;
        v5 = !v4;
        *(_BYTE *)(v3 + 16) = v5;
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPageProxy&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  CFRetain(*(CFTypeRef *)(a2 + 8));
  *(_QWORD *)(v9 + 8 * v8) = a2;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::WebProcessProxy(WebKit::WebProcessPool &,WebKit::WebsiteDataStore *,WebKit::WebProcessProxy::IsPrewarmed,WebCore::CrossOriginMode,WebKit::WebProcessProxy::LockdownMode)::$_0,void,WTF::RefCounterEvent>::call(uint64_t a1)
{
  return WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(*(_QWORD *)(a1 + 8) + 416));
}

uint64_t WebKit::UIProxyForCapture::connection(WebKit::UIProxyForCapture *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 144);
}

uint64_t WebKit::UIProxyForCapture::willStartCapture()
{
  return 1;
}

uint64_t WebKit::UIProxyForCapture::logger(WebKit::UIProxyForCapture *this)
{
  return WebKit::WebProcessProxy::logger(*(WebKit::WebProcessProxy **)(*((_QWORD *)this + 1) + 8));
}

uint64_t WebKit::UserMediaCaptureManagerProxy::ConnectionProxy::setCaptureAttributionString(WebKit::UserMediaCaptureManagerProxy::ConnectionProxy *this)
{
  return 1;
}

int *WebKit::UIProxyForCapture::resourceOwner(WebKit::UIProxyForCapture *this)
{
  if ((byte_1ECE72DE0 & 1) == 0)
  {
    _MergedGlobals_93 = 0;
    byte_1ECE72DE0 = 1;
  }
  return &_MergedGlobals_93;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::ConnectionProxy::setCurrentMediaEnvironment()
{
  return 0;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::ConnectionProxy::remoteVideoFrameObjectHeap(WebKit::UserMediaCaptureManagerProxy::ConnectionProxy *this)
{
  return 0;
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::WebProcessProxy(WebKit::WebProcessPool &,WebKit::WebsiteDataStore *,WebKit::WebProcessProxy::IsPrewarmed,WebCore::CrossOriginMode,WebKit::WebProcessProxy::LockdownMode)::$_1,void,WTF::RefCounterEvent>::call(uint64_t a1, int a2)
{
  if (!a2)
    WebKit::WebProcessProxy::maybeShutDown(*(WebKit::WebProcessProxy **)(a1 + 8));
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand()
{
  int v0;

  if (WebKit::WebProcessProxy::allProcessMap(void)::map
    && (v0 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4)) != 0)
  {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) >= (2 * v0)));
  }
  else
  {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v33;

  v2 = WebKit::WebProcessProxy::allProcessMap(void)::map;
  if (WebKit::WebProcessProxy::allProcessMap(void)::map)
  {
    v3 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4);
    v4 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  WebKit::WebProcessProxy::allProcessMap(void)::map = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = (uint64_t *)(v2 + 16 * i);
      v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (WebKit::WebProcessProxy::allProcessMap(void)::map)
            v15 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 8);
          else
            v15 = 0;
          v16 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(WebKit::WebProcessProxy::allProcessMap(void)::map + 16 * v21);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            v25 = (unsigned int *)(v24 + 48);
            if (!atomic_load(v25))
            {
              __break(0xC471u);
              JUMPOUT(0x1973B42D0);
            }
            do
              v27 = __ldaxr(v25);
            while (__stlxr(v27 - 1, v25));
          }
          *v23 = *v8;
          v28 = v2 + 16 * i;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v23[1] = v29;
          v30 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            v31 = (unsigned int *)(v30 + 48);
            if (!atomic_load(v31))
            {
LABEL_30:
              __break(0xC471u);
              JUMPOUT(0x1973B42B0);
            }
            do
              v33 = __ldaxr(v31);
            while (__stlxr(v33 - 1, v31));
          }
        }
        else
        {
          v10 = v2 + 16 * i;
          v11 = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v11)
          {
            v12 = (unsigned int *)(v11 + 48);
            if (!atomic_load(v12))
              goto LABEL_30;
            do
              v14 = __ldaxr(v12);
            while (__stlxr(v14 - 1, v12));
          }
        }
      }
    }
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D7C68;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7C68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[4];
  char v12;
  _BYTE v13[4];
  char v14;

  if (!a2 || !*(_QWORD *)a2)
  {
    IPC::Connection::cancelReply<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(*(_QWORD *)(a1 + 8));
    return;
  }
  IPC::Decoder::decode<WebCore::ProcessIdentity>(a2, (WTF::MachSendRight *)v13);
  if (v14)
  {
    WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v11, (const WTF::MachSendRight *)v13);
    v12 = 1;
    if (!v14)
      goto LABEL_6;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
    if (v12)
      goto LABEL_6;
  }
  else
  {
    v11[0] = 0;
    v12 = 0;
  }
  v8 = *(_QWORD *)a2;
  v9 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v10 = *((_QWORD *)a2 + 3);
  if (!v10 || !v9 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8), !v12))
  {
    IPC::Connection::cancelReply<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(*(_QWORD *)(a1 + 8));
    return;
  }
LABEL_6:
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v13, (const WTF::MachSendRight *)v11);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 16);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      WebCore::ProcessIdentity::operator=();
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
  if (v12)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
}

void IPC::Connection::cancelReply<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  int v4;

  v4 = 0;
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1)
    {
      v2 = (unsigned int *)(v1 + 16);
      do
        v3 = __ldaxr(v2);
      while (__stlxr(v3 + 1, v2));
      WebCore::ProcessIdentity::operator=();
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v4);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != *a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == *a2)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
  if (!v10)
    return 0;
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
    return v11 - 16;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SetThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7C90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SetThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7C90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SetThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

unsigned int *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebPageProxy&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *result;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4 + 16);
    v21 = *(unsigned int **)(a4 + 24);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    result = (unsigned int *)v16[1];
    v16[1] = (uint64_t)v21;
    if (result)
    {
      do
      {
        v26 = __ldaxr(result);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, result));
      if (!v27)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v20);
      }
    }
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v29 = *a2;
    if (*a2)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 <= 2 * v31)
      {
LABEL_28:
        result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v16);
        v16 = (uint64_t *)result;
        v29 = *a2;
        if (*a2)
          v32 = *(unsigned int *)(v29 - 4);
        else
          v32 = 0;
      }
    }
    else if (3 * v32 <= 4 * v31)
    {
      goto LABEL_28;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v29 + 16 * v32;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v28;
  *(_BYTE *)(a1 + 16) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4 + 16);
  v34 = *(unsigned int **)(a4 + 24);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 + 1, v34));
  result = *(unsigned int **)(*(_QWORD *)a1 + 8);
  *(_QWORD *)(*(_QWORD *)a1 + 8) = v34;
  if (result)
  {
    do
    {
      v36 = __ldaxr(result);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, result));
    if (!v37)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v33);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *a2;
  if (*a2)
    v4 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v4 = 0;
  if (v4 == a3)
  {
    *result = 0;
    return result;
  }
  v5 = a3[1];
  if (v5)
  {
    a3[1] = 0;
    v3 = *a2;
  }
  *result = v5;
  if (v3)
  {
    v6 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a3)
      return result;
  }
  else
  {
    if (!a3)
      return result;
    v6 = 0;
  }
  if (v6 != a3)
  {
    *a3 = -1;
    a3[1] = 0;
    ++*(_DWORD *)(*a2 - 16);
    v7 = *a2;
    v8 = *a2 ? *(_DWORD *)(v7 - 12) - 1 : -1;
    *(_DWORD *)(v7 - 12) = v8;
    v9 = *a2;
    if (*a2)
    {
      v10 = 6 * *(_DWORD *)(v9 - 12);
      v11 = *(_DWORD *)(v9 - 4);
      if (v10 < v11 && v11 >= 9)
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a2, v11 >> 1, 0);
    }
  }
  return result;
}

BOOL WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL8 v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      v9 = 0;
      goto LABEL_21;
    }
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v3 + 16 * v6;
      if ((unint64_t)(*(_QWORD *)v7 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v7 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>::customDeleteBucket(v7, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    v3 = *(_QWORD *)a1;
    v9 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v12 = *(_DWORD *)(v3 - 4);
      v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        v18 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v13)
            goto LABEL_32;
        }
        else if (3 * v20 > 4 * v13)
        {
LABEL_30:
          v21 = (double)v13;
          v22 = (double)v20;
          v23 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400)
          goto LABEL_30;
LABEL_32:
        v21 = (double)v13;
        v22 = (double)v20;
        v23 = 0.416666667;
LABEL_33:
        if (v22 * v23 <= v21)
          LODWORD(v20) = 2 * v20;
        if (v20 <= 8)
          v24 = 8;
        else
          v24 = v20;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v24, 0);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v15 = 0;
          goto LABEL_25;
        }
LABEL_22:
        v15 = *(_DWORD *)(v3 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
          goto LABEL_26;
        goto LABEL_25;
      }
LABEL_21:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_22;
    }
  }
  else
  {
    v9 = 0;
  }
  v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
  v16 = v15;
LABEL_26:
  *(_DWORD *)(a1 + 12) = 2 * v16;
  return v9;
}

unsigned int **WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>::customDeleteBucket(uint64_t a1, void *a2)
{
  unsigned int **result;
  void *v4;
  uint64_t v5;

  result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)a1, a2);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    return (unsigned int **)WTF::fastFree((WTF *)(v5 - 16), v4);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int **v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unsigned int **)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != (unsigned int *)-1)
      {
        if (v16)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash((_QWORD *)(v6 + 16 * v13));
          v23 = 0;
          do
          {
            v24 = v22 & v21;
            v22 = ++v23 + v24;
          }
          while (*(_QWORD *)(v20 + 16 * v24));
          v25 = v20 + 16 * v24;
          v27 = (_QWORD *)(v25 + 8);
          v26 = *(_QWORD *)(v25 + 8);
          if (v26)
          {
            WTF::fastFree((WTF *)(v26 - 16), v10);
            v28 = *(unsigned int **)v25;
            *(_QWORD *)v25 = 0;
            if (v28)
            {
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                atomic_store(1u, v28);
                WTF::fastFree((WTF *)v28, v10);
              }
            }
          }
          else
          {
            *(_QWORD *)v25 = 0;
          }
          v31 = *v15;
          *v15 = 0;
          *(_QWORD *)v25 = v31;
          v32 = v6 + 16 * v13;
          *v27 = 0;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          *v27 = v33;
          v34 = *(_QWORD *)(v32 + 8);
          if (v34)
            WTF::fastFree((WTF *)(v34 - 16), v10);
          v35 = *v15;
          *v15 = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v35);
              WTF::fastFree((WTF *)v35, v10);
            }
          }
          if (v15 == a3)
            v14 = v25;
        }
        else
        {
          v17 = *(_QWORD *)(v6 + 16 * v13 + 8);
          if (v17)
          {
            WTF::fastFree((WTF *)(v17 - 16), v10);
            v16 = *v15;
          }
          *v15 = 0;
          if (v16)
          {
            do
            {
              v18 = __ldaxr(v16);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v16));
            if (!v19)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *a1, void *a2)
{
  unsigned int **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL8 v8;
  int v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = *(_QWORD *)(a1 + 16 * v6);
  if (v7 == a2)
    return 1;
  v9 = 1;
  do
  {
    v8 = v7 != 0;
    if (!v7)
      break;
    v6 = (v6 + v9) & v2;
    v7 = *(_QWORD *)(a1 + 16 * v6);
    ++v9;
  }
  while (v7 != a2);
  return v8;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch(WebKit::ProcessTerminationReason)::$_1,void,WebKit::ProvisionalPageProxy &>::call(unsigned int *result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;

  v3 = *((_QWORD *)result + 1);
  v4 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v4 != *(_DWORD *)(v3 + 8))
  {
    v17 = *(WTF **)v3;
    result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
    v18 = *(unsigned int **)(a2 + 8);
    if (v18)
    {
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    *((_QWORD *)v17 + v4) = v18;
    goto LABEL_27;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  if (!(v7 >> 29))
  {
    v8 = *(WTF **)v3;
    v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v3 + 8) = v7;
    *(_QWORD *)v3 = v10;
    if ((_DWORD)v4)
    {
      v11 = (unsigned int **)((char *)v8 + 8 * v4);
      v12 = (unsigned int **)v8;
      do
      {
        v13 = *v12;
        *v12 = 0;
        *(_QWORD *)v10 = v13;
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v9);
          }
        }
        v10 = (WTF *)((char *)v10 + 8);
        ++v12;
      }
      while (v12 != v11);
      v10 = *(WTF **)v3;
    }
    if (v8)
    {
      if (v10 == v8)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v8, v9);
      v10 = *(WTF **)v3;
    }
    v20 = *(unsigned int *)(v3 + 12);
    result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
    v21 = *(unsigned int **)(a2 + 8);
    if (v21)
    {
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    *((_QWORD *)v10 + v20) = v21;
LABEL_27:
    ++*(_DWORD *)(v3 + 12);
    return result;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (_QWORD *)(v19 + 16 * v26);
          v30 = v28 + 1;
          v29 = v28[1];
          if (v29)
          {
            WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v29, v10);
            v17 = *v16;
          }
          *v28 = v17;
          v31 = v6 + 16 * v13;
          *v30 = 0;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          *v30 = v32;
          v33 = *(_QWORD *)(v31 + 8);
          if (v33)
            WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v33, v10);
          if (v16 == a3)
            v14 = v28;
        }
        else
        {
          v18 = *(_QWORD *)(v6 + 16 * v13 + 8);
          if (v18)
            WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v18, v10);
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  char v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v10 = (_QWORD *)(result + 16);
    do
    {
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      v10 += 4;
      --v7;
    }
    while (v7);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = v4 + 32 * v11;
      if (*(_QWORD *)v12 ^ 1 | *(_QWORD *)(v12 + 8))
      {
        if (*(_OWORD *)v12 != 0)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v24 = -1640531527;
          v25 = 0;
          v26 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v24, (_QWORD *)(v4 + 32 * v11));
          v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v24);
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v20 = v15 + 32 * v19;
            v17 = ++v18 + v19;
          }
          while (*(_OWORD *)v20 != 0);
          v21 = *(_QWORD *)(v20 + 16);
          *(_QWORD *)(v20 + 16) = 0;
          if (v21)
            CFRelease(*(CFTypeRef *)(v21 + 8));
          *(_OWORD *)v20 = *(_OWORD *)v12;
          v22 = v4 + 32 * v11;
          v23 = *(_QWORD *)(v22 + 16);
          *(_QWORD *)(v22 + 16) = 0;
          *(_QWORD *)(v20 + 16) = v23;
          v14 = *(_QWORD *)(v22 + 16);
          *(_QWORD *)(v22 + 16) = 0;
          if (!v14)
            goto LABEL_22;
LABEL_21:
          CFRelease(*(CFTypeRef *)(v14 + 8));
          goto LABEL_22;
        }
        v13 = v4 + 32 * v11;
        v14 = *(_QWORD *)(v13 + 16);
        *(_QWORD *)(v13 + 16) = 0;
        if (v14)
          goto LABEL_21;
      }
LABEL_22:
      if (++v11 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v9);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v9);
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *result;
  unsigned int v31;
  __int16 v32;
  char v33;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = v5 + 24 * v10;
      if (*(_QWORD *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          v16 = v5 + 24 * v10;
          v17 = *(_QWORD *)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
            CFRelease(*(CFTypeRef *)(v17 + 8));
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v31 = -1640531527;
          v32 = 0;
          v33 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v31, (_QWORD *)(v5 + 24 * v10));
          v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          v19 = 0;
          do
          {
            v20 = v18 & v15;
            v21 = (_OWORD *)(v14 + 24 * (v18 & v15));
            v18 = ++v19 + (v18 & v15);
          }
          while (*v21 != 0);
          v22 = v14 + 24 * v20;
          v25 = *(_QWORD *)(v22 + 16);
          v24 = (_QWORD *)(v22 + 16);
          v23 = v25;
          *v24 = 0;
          if (v25)
            CFRelease(*(CFTypeRef *)(v23 + 8));
          *v21 = *(_OWORD *)v13;
          v26 = v5 + 24 * v10;
          v27 = *(_QWORD *)(v26 + 16);
          *(_QWORD *)(v26 + 16) = 0;
          *v24 = v27;
          v28 = *(_QWORD *)(v26 + 16);
          *(_QWORD *)(v26 + 16) = 0;
          if (v28)
            CFRelease(*(CFTypeRef *)(v28 + 8));
          if (v13 == a3)
            v11 = v21;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

BOOL WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  BOOL v17;
  int v18;
  __int16 v19;
  char v20;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v18 = -1640531527;
  v19 = 0;
  v20 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v18, a2);
  v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v18);
  v6 = *a2;
  v7 = a2[1];
  v8 = v5 & v4;
  v9 = (uint64_t *)(v2 + 32 * v8);
  v10 = *v9;
  v11 = v9[1];
  if (v11 == v7 && v10 == v6)
    return 1;
  v14 = 1;
  do
  {
    v15 = v10 | v11;
    result = v15 != 0;
    if (!v15)
      break;
    v8 = ((_DWORD)v8 + v14) & v4;
    v16 = (uint64_t *)(v2 + 32 * v8);
    v10 = *v16;
    v11 = v16[1];
    v17 = v11 == v7 && v10 == v6;
    ++v14;
  }
  while (!v17);
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *a2 = -1;
  result = (_QWORD *)a2[1];
  if (result)
    result = (_QWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable((uint64_t)result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D7CE0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D7CE0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  __int128 v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  WTF::StringImpl **v13;
  char v14;
  _QWORD v15[2];
  __int128 v16;
  WTF::StringImpl **v17;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WebKit::WebsiteData>>(a2, (uint64_t)&v10);
  if (v14)
  {
    v15[0] = v10;
    v4 = v11;
    v10 = 0;
    v11 = 0;
    v15[1] = v4;
    v5 = v12;
    v12 = 0uLL;
    v16 = v5;
    v6 = v13;
    v13 = 0;
    v17 = v6;
    WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0::operator()<WebKit::WebsiteData>(v2, (uint64_t)v15);
    if (v17)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v7);
    if (*((_QWORD *)&v16 + 1))
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v16 + 1), v7);
    if ((_QWORD)v16)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v16, v7);
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v7);
    return std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v10, v8);
  }
  else
  {
    std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v10, v3);
    return IPC::Connection::cancelReply<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(v2);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(uint64_t *a1)
{
  WTF::StringImpl *v1;
  __int128 v3;
  __int128 v4;
  WTF::StringImpl **v5;

  v5 = 0;
  v3 = 0u;
  v4 = 0u;
  WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0::operator()<WebKit::WebsiteData>(a1, (uint64_t)&v3);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v1);
  if (*((_QWORD *)&v4 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v4 + 1), v1);
  if ((_QWORD)v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v4, v1);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v3, v1);
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebsiteData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebKit::WebsiteData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::WebsiteData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;

  IPC::Decoder::decode<WebKit::WebsiteData>(a1, (uint64_t)&v8);
  v4 = v12;
  if (v12)
  {
    *(_QWORD *)a2 = v8;
    v5 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)(a2 + 8) = v5;
    v6 = v10;
    v10 = 0uLL;
    *(_OWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 32) = v11;
    v4 = 1;
    v11 = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 40) = v4;
  return std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8, v3);
}

WTF::StringImpl **IPC::Decoder::decode<WebKit::WebsiteData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl **result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebsiteData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl **)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t))*result + 2))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF::StringImpl ***)(a1 + 32);
    if (v3)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    v4 = *(WTF::StringImpl ***)(a1 + 24);
    if (v4)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
    v5 = *(WTF::StringImpl ***)(a1 + 16);
    if (v5)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

void WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0::operator()<WebKit::WebsiteData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[2];
  __int128 v10;
  WTF::StringImpl **v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v9[0] = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v9[1] = v3;
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v10 = v4;
  v5 = *(WTF::StringImpl ***)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v11 = v5;
  WTF::CompletionHandler<void ()(WebKit::WebsiteData)>::operator()(a1 + 2, (uint64_t)v9);
  if (v11)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v6);
  if (*((_QWORD *)&v10 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v10 + 1), v6);
  if ((_QWORD)v10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v10, v6);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  v7 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(v2 + 136);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    *(_DWORD *)buf = 134218240;
    v13 = v2;
    v14 = 1024;
    v15 = v8;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::fetchWebsiteData: Releasing a background assertion because the Web process is done fetching Website data", buf, 0x12u);
  }
}

uint64_t WTF::CompletionHandler<void ()(WebKit::WebsiteData)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  uint64_t result;
  _QWORD v7[2];
  __int128 v8;
  WTF::StringImpl **v9;
  uint64_t v10;

  v10 = *a1;
  *a1 = 0;
  v7[0] = *(_QWORD *)a2;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7[1] = v2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v8 = v3;
  v4 = *(WTF::StringImpl ***)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v9 = v4;
  WTF::Function<void ()(WebKit::WebsiteData)>::operator()(&v10, (uint64_t)v7);
  if (v9)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v5);
  if (*((_QWORD *)&v8 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v8 + 1), v5);
  if ((_QWORD)v8)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v8, v5);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Function<void ()(WebKit::WebsiteData)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  _QWORD v8[2];
  __int128 v9;
  WTF::StringImpl **v10;

  v2 = *a1;
  v8[0] = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8[1] = v3;
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v9 = v4;
  v5 = *(WTF::StringImpl ***)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v10 = v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v8);
  if (v10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v6);
  if (*((_QWORD *)&v9 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v9 + 1), v6);
  if ((_QWORD)v9)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v9, v6);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteData,WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D7D08;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteData,WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D7D08;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteData,WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(v1 + 136);
    if (v4)
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    v5 = 134218240;
    v6 = v1;
    v7 = 1024;
    v8 = v4;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::deleteWebsiteData: Releasing a background assertion because the Web process is done deleting Website data", (uint8_t *)&v5, 0x12u);
  }
}

char *IPC::VectorArgumentCoder<false,WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = 32 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, v7);
      v7 += 32;
      v8 -= 32;
    }
    while (v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteDataForOrigins,WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D7D30;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteDataForOrigins,WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D7D30;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteDataForOrigins,WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(v1 + 136);
    if (v4)
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    v5 = 134218240;
    v6 = v1;
    v7 = 1024;
    v8 = v4;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::deleteWebsiteDataForOrigins: Releasing a background assertion because the Web process is done deleting Website data for several origins", (uint8_t *)&v5, 0x12u);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7D58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7D58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::ReleaseMemory,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7D80;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::ReleaseMemory,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7D80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::ReleaseMemory,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7DA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7DA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D7DD0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7DD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD *v10;
  int v11;
  int v12;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD **)(v3 + 720);
      v10 = v4;
      v5 = *(unsigned int *)(v3 + 732);
      v11 = *(_DWORD *)(v3 + 728);
      v12 = v5;
      v9[0] = 0;
      *(_QWORD *)(v3 + 720) = 0;
      v9[1] = 0;
      *(_QWORD *)(v3 + 728) = 0;
      WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, a2);
      if ((_DWORD)v5)
      {
        v7 = 8 * v5;
        do
        {
          v8 = *v4;
          *v4++ = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          v7 -= 8;
        }
        while (v7);
      }
      return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsiveWithLazyStop(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D7DF8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsiveWithLazyStop(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7DF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsiveWithLazyStop(void)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD *v10;
  int v11;
  int v12;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD **)(v3 + 720);
      v10 = v4;
      v5 = *(unsigned int *)(v3 + 732);
      v11 = *(_DWORD *)(v3 + 728);
      v12 = v5;
      v9[0] = 0;
      *(_QWORD *)(v3 + 720) = 0;
      v9[1] = 0;
      *(_QWORD *)(v3 + 728) = 0;
      WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, a2);
      if ((_DWORD)v5)
      {
        v7 = 8 * v5;
        do
        {
          v8 = *v4;
          *v4++ = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          v7 -= 8;
        }
        while (v7);
      }
      return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7E20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7E20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7), !v8))
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D7E48;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D7E48;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *(_QWORD *)(a1 + 8);
      v4 = qword_1ECE71320;
      if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(v3 + 136);
        if (v5)
          LODWORD(v5) = *(_DWORD *)(v5 + 108);
        v6 = *(unsigned __int8 *)(a1 + 24);
        v10 = 134218498;
        if (v6 == 1)
          v7 = "service";
        else
          v7 = "shared";
        v11 = v3;
        v12 = 1024;
        v13 = v5;
        v14 = 2082;
        v15 = v7;
        _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::establishRemoteWorkerContext: Finished (workerType=%{public}s)", (uint8_t *)&v10, 0x1Cu);
      }
    }
  }
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

BOOL WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::moveToLastIfPresent(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(a1, a2);
  v4 = *a1;
  if (*a1)
    v4 += 8 * *(unsigned int *)(v4 - 4);
  if (v4 != v3)
  {
    v5 = *(_QWORD *)v3;
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    v7 = *(_QWORD *)(*(_QWORD *)v3 + 16);
    if (v6)
    {
      *(_QWORD *)(v6 + 16) = v7;
      v7 = *(_QWORD *)(v5 + 16);
    }
    else
    {
      a1[1] = v7;
    }
    if (v7)
      v8 = (_QWORD *)(v7 + 8);
    else
      v8 = a1 + 2;
    *v8 = v6;
    v9 = a1[2];
    *(_QWORD *)(v5 + 8) = v9;
    *(_QWORD *)(v5 + 16) = 0;
    if (v9)
      v10 = (uint64_t *)(v9 + 16);
    else
      v10 = a1 + 1;
    *v10 = v5;
    a1[2] = v5;
  }
  return v4 != v3;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  int i;
  uint64_t v8;
  _QWORD *v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(a2);
  for (i = 0; ; v6 = i + v8)
  {
    v8 = v6 & v5;
    v9 = *(_QWORD **)(v2 + 8 * v8);
    if (v9 == (_QWORD *)-1)
      goto LABEL_6;
    if (!v9)
      break;
    if (*v9 == *a2)
      return v2 + 8 * v8;
LABEL_6:
    ++i;
  }
  if (*a1)
    return *a1 + 8 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34D7E70;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34D7E70;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  const WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && *(_DWORD *)(v4 + 4))
  {
    v12 = 0;
    v13 = 0;
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(const WTF::StringImpl ***)a2;
      v7 = 240 * v5;
      do
      {
        if (WTF::equal(*(WTF **)(a1 + 8), v6[8], a3))
        {
          if (HIDWORD(v13) == (_DWORD)v13)
          {
            WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData&>((uint64_t)&v12, (unint64_t)v6);
          }
          else
          {
            WebCore::NotificationData::NotificationData((WebCore::NotificationData *)(v12 + 240 * HIDWORD(v13)), (const WebCore::NotificationData *)v6);
            ++HIDWORD(v13);
          }
        }
        v6 += 30;
        v7 -= 240;
      }
      while (v7);
    }
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v9);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D7E98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D7E98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::call(WebCore *a1, uint64_t a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;
  void *v6;
  WTF *v7;
  int v8;
  char v9;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    WebCore::defaultWebCryptoMasterKey(a1);
    v5 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v5 + 16))(v5, &v7);
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v9)
    {
      result = v7;
      if (v7)
      {
        v7 = 0;
        v8 = 0;
        return (WTF *)WTF::fastFree(result, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)a1 = &off_1E34D7EC0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34D7EC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::call(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *result;
  uint64_t v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  char v14;
  WTF *v15;
  uint64_t v16;

  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_9;
  v15 = 0;
  v16 = 0;
  v3 = WebCore::wrapSerializedCryptoKey();
  v5 = v3;
  if (v3)
  {
    v12 = v15;
    v6 = v16;
    v15 = 0;
    v16 = 0;
    v13 = v6;
    v14 = 1;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v7 + 16))(v7, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v14)
    {
      v8 = v12;
      if (v12)
      {
        v12 = 0;
        LODWORD(v13) = 0;
        WTF::fastFree(v8, v4);
      }
    }
  }
  result = v15;
  if (v15)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    result = (WTF *)WTF::fastFree(result, v4);
  }
  if ((v5 & 1) == 0)
  {
LABEL_9:
    LOBYTE(v12) = 0;
    v14 = 0;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v10 + 16))(v10, &v12);
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v14)
    {
      result = v12;
      if (v12)
      {
        v12 = 0;
        LODWORD(v13) = 0;
        return (WTF *)WTF::fastFree(result, v11);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)a1 = &off_1E34D7EE8;
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34D7EE8;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *result;
  void *v5;
  WTF *v6;
  int v7;
  char v8;

  if (!*(_BYTE *)(a2 + 16) || (WebCore::unwrapCryptoKey(), !v8))
  {
    LOBYTE(v6) = 0;
    v8 = 0;
  }
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    result = v6;
    if (v6)
    {
      v6 = 0;
      v7 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemoteCustom::create@<X0>(WebCore::PlatformCALayerCocoa *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  CALayer *v9;
  int v10;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x360);
  v10 = WebCore::PlatformCALayerCocoa::layerTypeForPlatformLayer(a1, v9);
  WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(v8, v10, a1, a2, a3);
  result = WebKit::RemoteLayerTreeContext::layerDidEnterContext(a3, (unsigned int *)v8, *(unsigned __int8 *)(v8 + 12));
  *a4 = v8;
  return result;
}

void sub_1973B717C(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::create@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x360);
  WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(v8, 14, a1, a2, a3);
  result = WebKit::RemoteLayerTreeContext::layerDidEnterContext(a3, (unsigned int *)v8, *(unsigned __int8 *)(v8 + 12));
  *a4 = v8;
  return result;
}

void sub_1973B720C(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::create@<X0>(WebCore::HTMLMediaElement *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x360);
  v9 = WebCore::HTMLMediaElement::layerHostingContextID(a1);
  WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(v8, 8, v9, a2, a3);
  *(_BYTE *)(v8 + 840) = 1;
  result = WebKit::RemoteLayerTreeContext::layerDidEnterContext(a3, (unsigned int *)v8, *(unsigned __int8 *)(v8 + 12), a1);
  *a4 = v8;
  return result;
}

void sub_1973B72B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerTreeContext::layerDidEnterContext(uint64_t a1, unsigned int *a2, uint64_t a3, WebCore::HTMLMediaElement *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  WebKit::PlaybackSessionManager **v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t result;
  unsigned int *v32;
  _BYTE v33[24];
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char v42;
  uint64_t v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v34 = *((_OWORD *)a2 + 1);
  LOBYTE(v37) = 0;
  v42 = 0;
  v44 = 0;
  v35 = 0uLL;
  v36 = 0;
  (*(void (**)(unsigned int *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a2 + 880))(a2, &v35, a1, a3);
  v7 = *((_QWORD *)a4 + 19);
  WebCore::HTMLMediaElement::videoLayerSize(a4);
  v9 = v8;
  v11 = v10;
  WebCore::HTMLMediaElement::naturalSize(a4);
  v37 = v7;
  v38 = v9;
  v39 = v11;
  v40 = v12;
  v41 = v13;
  if (!v42)
    v42 = 1;
  v14 = (WebKit::PlaybackSessionManager **)WebKit::WebPage::videoPresentationManager(*(WebKit::WebPage **)(a1 + 24));
  WebKit::VideoPresentationManager::setupRemoteLayerHosting(v14, a4);
  v15 = (uint64_t *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *((_QWORD *)a4 + 19);
  if (v16
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(a1 + 72), 0), (v16 = *v15) != 0))
  {
    v18 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::hash(&v34) & v18;
  v20 = (unint64_t *)(v16 + 24 * v19);
  v22 = *v20;
  v21 = v20[1];
  if (*(_OWORD *)v20 == 0)
  {
LABEL_14:
    *(_OWORD *)v20 = v34;
    v20[2] = v17;
    v25 = *v15;
    if (*v15)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *v15;
    if (*v15)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_23;
    }
    else if (3 * v30 > 4 * v29)
    {
      goto LABEL_23;
    }
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(a1 + 72), v20);
    goto LABEL_23;
  }
  v23 = 0;
  v24 = 1;
  while (__PAIR128__(v21, v22) != v34)
  {
    if (v21 == -1)
      v23 = v20;
    v19 = (v19 + v24) & v18;
    v20 = (unint64_t *)(v16 + 24 * v19);
    v22 = *v20;
    v21 = v20[1];
    ++v24;
    if (*(_OWORD *)v20 == 0)
    {
      if (v23)
      {
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        --*(_DWORD *)(*v15 - 16);
        v20 = v23;
      }
      goto LABEL_14;
    }
  }
LABEL_23:
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::add<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t *)(a1 + 32), &v34, &v35, (uint64_t)v33);
  v32 = a2;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::PlatformCALayerRemote*>((uint64_t *)(a1 + 56), &v34, &v32, (uint64_t)v33);
  if (v44 != -1)
    return ((uint64_t (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v44])(v33, &v43);
  return result;
}

void sub_1973B753C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[a25])(&a10, &a23);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  id **v8;
  uint64_t v9;

  v7 = WebKit::PlatformCALayerRemote::PlatformCALayerRemote(a1, a2, a4, a5);
  *(_QWORD *)v7 = &off_1E34D7F10;
  *(_BYTE *)(v7 + 840) = 0;
  v8 = (id **)(v7 + 848);
  *(_OWORD *)(v7 + 848) = 0u;
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_BYTE *)v9 = 1;
  *(_DWORD *)(v9 + 4) = a3;
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v8, (id *)v9);
  return a1;
}

void sub_1973B75F8(_Unwind_Exception *a1)
{
  WebKit::PlatformCALayerRemote *v1;
  id **v2;
  const void *v4;
  void *v5;

  v4 = (const void *)*((_QWORD *)v1 + 107);
  *((_QWORD *)v1 + 107) = 0;
  if (v4)
    CFRelease(v4);
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v2, 0);
  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(v1, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  id **v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  CGFloat x;
  CGFloat v14;
  WTF *v15;
  void *v16;
  id v17;
  const void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float v23;
  float v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float v30;
  float v31;
  double v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  WebKit::WebProcess *v42;
  CGRect v43;
  __int128 v44;

  v8 = WebKit::PlatformCALayerRemote::PlatformCALayerRemote(a1, a2, a4, a5);
  *(_QWORD *)v8 = &off_1E34D7F10;
  *(_BYTE *)(v8 + 840) = 0;
  v9 = (id **)(v8 + 848);
  *(_OWORD *)(v8 + 848) = 0u;
  v10 = *(_QWORD *)(a5 + 24);
  if (*(_BYTE *)(v10 + 64))
  {
    if (*(_BYTE *)(v10 + 64) != 1)
      goto LABEL_11;
    v11 = *(_QWORD *)(v10 + 48);
    if (v11)
      LOBYTE(v11) = *(_BYTE *)(v11 + 449) != 0;
    LOWORD(v44) = v11;
    WebKit::LayerHostingContext::createForExternalHostingProcess((unsigned __int8 *)&v44, (uint64_t *)&v43);
  }
  else
  {
    {
      v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v42 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v12 = WebKit::WebProcess::WebProcess(v42);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
    }
    WebKit::LayerHostingContext::createForPort((WebKit::WebProcess *)((char *)v12 + 252), (uint64_t *)&v43);
  }
  x = v43.origin.x;
  v43.origin.x = 0.0;
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v9, *(id **)&x);
  v14 = v43.origin.x;
  v43.origin.x = 0.0;
  if (v14 != 0.0)
  {
    WebKit::LayerHostingContext::~LayerHostingContext(*(id **)&v14);
    WTF::fastFree(v15, v16);
  }
LABEL_11:
  v17 = (*v9)[2];
  if (v17)
    objc_msgSend(v17, "setLayer:", a3);
  else
    objc_msgSend((*v9)[1], "setLayer:", a3);
  objc_msgSend(a3, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", a1, *(_QWORD *)&v43.origin.x), CFSTR("WKPlatformCALayer"));
  if (a3)
    CFRetain(a3);
  v18 = *(const void **)(a1 + 856);
  *(_QWORD *)(a1 + 856) = a3;
  if (v18)
    CFRelease(v18);
  objc_msgSend(a3, "web_disableAllActions");
  objc_msgSend(a3, "position");
  v20 = v19;
  objc_msgSend(a3, "position");
  v22 = v21;
  objc_msgSend(a3, "zPosition");
  v23 = v20;
  v24 = v22;
  *(float *)(a1 + 416) = v23;
  *(float *)&v25 = v25;
  *(float *)(a1 + 420) = v24;
  *(_DWORD *)(a1 + 424) = LODWORD(v25);
  objc_msgSend(a3, "anchorPoint");
  v27 = v26;
  objc_msgSend(a3, "anchorPoint");
  v29 = v28;
  objc_msgSend(a3, "anchorPointZ");
  v30 = v27;
  v31 = v29;
  *(float *)(a1 + 428) = v30;
  *(float *)&v32 = v32;
  *(float *)(a1 + 432) = v31;
  *(_DWORD *)(a1 + 436) = LODWORD(v32);
  objc_msgSend(a3, "bounds");
  v43.origin.x = v33;
  v43.origin.y = v34;
  v43.size.width = v35;
  v43.size.height = v36;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v44, &v43);
  *(_OWORD *)(a1 + 440) = v44;
  objc_msgSend(a3, "contentsRect");
  v43.origin.x = v37;
  v43.origin.y = v38;
  v43.size.width = v39;
  v43.size.height = v40;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v44, &v43);
  *(_OWORD *)(a1 + 456) = v44;
  return a1;
}

void sub_1973B786C(_Unwind_Exception *a1)
{
  WebKit::PlatformCALayerRemote *v1;
  id **v2;
  const void *v4;
  void *v5;

  v4 = (const void *)*((_QWORD *)v1 + 107);
  *((_QWORD *)v1 + 107) = 0;
  if (v4)
    CFRelease(v4);
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v2, 0);
  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(v1, v5);
  _Unwind_Resume(a1);
}

void WebKit::PlatformCALayerRemoteCustom::~PlatformCALayerRemoteCustom(WebKit::PlatformCALayerRemoteCustom *this)
{
  const void *v2;
  void *v3;

  objc_msgSend(*((id *)this + 107), "setValue:forKey:", 0, CFSTR("WKPlatformCALayer"));
  v2 = (const void *)*((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v2)
    CFRelease(v2);
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 106, 0);
  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(this, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::PlatformCALayerRemoteCustom::~PlatformCALayerRemoteCustom(this);
  WTF::fastFree(v1, v2);
}

void sub_1973B790C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;
  void *v4;

  v3 = *(const void **)(v1 + 856);
  *(_QWORD *)(v1 + 856) = 0;
  if (v3)
    CFRelease(v3);
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v1 + 848), 0);
  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote((WebKit::PlatformCALayerRemote *)v1, v4);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::hostingContextID(WebKit::PlatformCALayerRemoteCustom *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 106) + 4);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::populateCreationProperties(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  int v5;
  int v6;
  uint64_t v7;
  char v8;

  *(_OWORD *)a2 = *(_OWORD *)(result + 16);
  *(_BYTE *)(a2 + 16) = a4;
  v5 = *(_DWORD *)(*(_QWORD *)(result + 848) + 4);
  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 48) + 364);
  v7 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v7 == 1)
    {
      *(_DWORD *)(a2 + 56) = v5;
      *(_DWORD *)(a2 + 60) = v6;
      *(_BYTE *)(a2 + 64) = 1;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v7])(&v8, a2 + 56);
  }
  *(_DWORD *)(a2 + 56) = v5;
  *(_DWORD *)(a2 + 60) = v6;
  *(_BYTE *)(a2 + 64) = 1;
  *(_DWORD *)(a2 + 72) = 1;
  return result;
}

void WebKit::PlatformCALayerRemoteCustom::clone(uint64_t a1@<X0>, uint64_t a2@<X1>, int8x16_t **a3@<X8>)
{
  int v6;
  WTF::RunLoop *v7;
  uint64_t (**v8)(void);
  uint64_t v9;
  _QWORD *v10;
  int8x16_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = *(unsigned __int8 *)(a1 + 12);
  if (v6 == 8)
  {
    if (PAL::AVFoundationLibrary((PAL *)1)
      && (v8 = (uint64_t (**)(void))MEMORY[0x1E0DCDF88],
          ((void (*)(void))*MEMORY[0x1E0DCDF88])(),
          (objc_opt_isKindOfClass() & 1) != 0))
    {
      v7 = (WTF::RunLoop *)objc_msgSend(objc_alloc((Class)(*v8)()), "init");
      v9 = *(_QWORD *)(a1 + 856);
      WTF::RunLoop::main(v7);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E34D8D50;
      v10[1] = v7;
      v10[2] = v9;
      v14 = v10;
      WTF::RunLoop::dispatch();
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
    else
    {
      v7 = (WTF::RunLoop *)objc_alloc_init(MEMORY[0x1E0CD27A8]);
    }
  }
  else
  {
    v7 = 0;
  }
  v11 = (int8x16_t *)WTF::fastMalloc((WTF *)0x360);
  WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom((uint64_t)v11, *(unsigned __int8 *)(a1 + 12), v7, a2, *(_QWORD *)(*(_QWORD *)(a1 + 832) + 8));
  v12 = *(_QWORD *)(a1 + 832);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  WebKit::RemoteLayerTreeContext::layerDidEnterContext(v13, (unsigned int *)v11, v11->u8[12]);
  WebKit::PlatformCALayerRemote::updateClonedLayerProperties((WebKit::PlatformCALayerRemote *)a1, v11, v6 != 8);
  WebKit::PlatformCALayerRemote::setClonedLayer(v11, a1);
  *a3 = v11;
  if (v7)
    CFRelease(v7);
}

void sub_1973B7B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::platformLayer(WebKit::PlatformCALayerRemoteCustom *this)
{
  return *((_QWORD *)this + 107);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::contents(id *this)
{
  return objc_msgSend(this[107], "contents");
}

uint64_t WebKit::PlatformCALayerRemoteCustom::setContents(id *this, const void *a2)
{
  return objc_msgSend(this[107], "setContents:", a2);
}

uint64_t WebKit::PlatformCALayerRemoteHost::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x350);
  WebKit::PlatformCALayerRemote::PlatformCALayerRemote(v8, 15, a2, a3);
  *(_QWORD *)v8 = &off_1E34D8298;
  *(_QWORD *)(v8 + 840) = a1;
  result = WebKit::RemoteLayerTreeContext::layerDidEnterContext(a3, (unsigned int *)v8, *(unsigned __int8 *)(v8 + 12));
  *a4 = v8;
  return result;
}

void sub_1973B7C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemoteHost::populateCreationProperties(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  v5 = result;
  *(_OWORD *)a2 = *(_OWORD *)(result + 16);
  *(_BYTE *)(a2 + 16) = a4;
  v6 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v6 != -1)
  {
    v7 = (_QWORD *)(a2 + 56);
    if ((_DWORD)v6 == 3)
    {
      *v7 = *(_QWORD *)(result + 840);
      return result;
    }
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v6])(&v8, v7);
  }
  *(_DWORD *)(a2 + 72) = -1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v5 + 840);
  *(_DWORD *)(a2 + 72) = 3;
  return result;
}

uint64_t WebKit::PlatformCALayerRemoteModelHosting::create@<X0>(WebCore::Model **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  WebCore::Model *v9;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x350);
  v9 = *a1;
  ++*(_DWORD *)v9;
  WebKit::PlatformCALayerRemote::PlatformCALayerRemote(v8, 13, a2, a3);
  *(_QWORD *)v8 = &off_1E34D8620;
  ++*(_DWORD *)v9;
  *(_QWORD *)(v8 + 840) = v9;
  WTF::RefCounted<WebCore::Model>::deref(v9);
  result = WebKit::RemoteLayerTreeContext::layerDidEnterContext(a3, (unsigned int *)v8, *(unsigned __int8 *)(v8 + 12));
  *a4 = v8;
  return result;
}

void sub_1973B7DAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::PlatformCALayerRemoteModelHosting::~PlatformCALayerRemoteModelHosting(WebKit::PlatformCALayerRemoteModelHosting *this, void *a2)
{
  WebCore::Model *v3;

  v3 = (WebCore::Model *)*((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v3)
    WTF::RefCounted<WebCore::Model>::deref(v3);
  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::PlatformCALayerRemoteModelHosting::~PlatformCALayerRemoteModelHosting(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::PlatformCALayerRemoteModelHosting::clone(WebKit::PlatformCALayerRemote *a1@<X0>, uint64_t a2@<X1>, int8x16_t **a3@<X8>)
{
  int8x16_t *v6;
  WebCore::Model *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (int8x16_t *)WTF::fastMalloc((WTF *)0x350);
  v7 = (WebCore::Model *)*((_QWORD *)a1 + 105);
  ++*(_DWORD *)v7;
  WebKit::PlatformCALayerRemote::PlatformCALayerRemote((uint64_t)v6, 13, a2, *(_QWORD *)(*((_QWORD *)a1 + 104) + 8));
  v6->i64[0] = (uint64_t)&off_1E34D8620;
  ++*(_DWORD *)v7;
  v6[52].i64[1] = (uint64_t)v7;
  WTF::RefCounted<WebCore::Model>::deref(v7);
  v8 = *((_QWORD *)a1 + 104);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  WebKit::RemoteLayerTreeContext::layerDidEnterContext(v9, (unsigned int *)v6, v6->u8[12]);
  WebKit::PlatformCALayerRemote::updateClonedLayerProperties(a1, v6, 0);
  WebKit::PlatformCALayerRemote::setClonedLayer(v6, (uint64_t)a1);
  *a3 = v6;
}

void sub_1973B7EE8(_Unwind_Exception *a1)
{
  WTF *v1;
  WebCore::Model *v2;
  void *v4;

  WTF::RefCounted<WebCore::Model>::deref(v2);
  WTF::fastFree(v1, v4);
  _Unwind_Resume(a1);
}

WebCore::Model *WebKit::PlatformCALayerRemoteModelHosting::populateCreationProperties(WebCore::Model *result, uint64_t a2, uint64_t a3, char a4)
{
  WebCore::Model *v5;
  uint64_t v6;
  WebCore::Model **v7;
  WebCore::Model *v8;
  _DWORD *v9;
  char v10;

  v5 = result;
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(_BYTE *)(a2 + 16) = a4;
  v6 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v6 == -1)
    goto LABEL_6;
  v7 = (WebCore::Model **)(a2 + 56);
  if ((_DWORD)v6 != 2)
  {
    result = (WebCore::Model *)((uint64_t (*)(char *, WebCore::Model **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v6])(&v10, v7);
LABEL_6:
    v9 = (_DWORD *)*((_QWORD *)v5 + 105);
    ++*v9;
    *(_QWORD *)(a2 + 56) = v9;
    *(_DWORD *)(a2 + 72) = 2;
    return result;
  }
  v8 = (WebCore::Model *)*((_QWORD *)result + 105);
  ++*(_DWORD *)v8;
  result = *v7;
  *v7 = v8;
  if (result)
    return WTF::RefCounted<WebCore::Model>::deref(result);
  return result;
}

unsigned int *WebKit::PlatformCALayerRemoteModelHosting::dumpAdditionalProperties(unsigned int *result, WTF::TextStream *this, char a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void *v6;

  if ((a3 & 4) != 0)
  {
    v3 = (uint64_t)result;
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    v4 = *(unsigned int **)(*(_QWORD *)(v3 + 840) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v6);
  }
  return result;
}

void sub_1973B8034(_Unwind_Exception *a1, void *a2)
{
  unsigned int *v2;

  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreeContext::~RemoteLayerTreeContext(WebKit::RemoteLayerTreeContext *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;

  *(_QWORD *)this = off_1E34D89A8;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 7) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v3, a2);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::deallocateTable(v4, a2);
  }
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 8) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v5, a2);
  }
  MEMORY[0x19AEB5B68]((char *)this + 96);
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 10);
  if (v8)
    WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::deallocateTable(v8, v6);
  v9 = *((_QWORD *)this + 9);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), v6);
  v10 = *((_QWORD *)this + 8);
  if (v10)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v10, v6);
  v11 = *((_QWORD *)this + 7);
  if (v11)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v11, v6);
  v12 = (WTF *)*((_QWORD *)this + 5);
  if (v12)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v12, v6);
  }
  v13 = *((_QWORD *)this + 4);
  if (v13)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v13, v6);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v6);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteLayerTreeContext::~RemoteLayerTreeContext(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebKit::RemoteLayerTreeContext::adoptLayersFromContext(unsigned int *this, WebKit::RemoteLayerTreeContext *a2)
{
  WebKit::RemoteLayerTreeContext *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  char v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD *v13;
  WebKit::GraphicsLayerCARemote *v14;

  v3 = (WebKit::RemoteLayerTreeContext *)this;
  v5 = (uint64_t *)((char *)a2 + 56);
  v4 = *((_QWORD *)a2 + 7);
  if (v4)
  {
    do
    {
      if (!*(_DWORD *)(v4 - 12))
        break;
      v6 = *(_QWORD *)(WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::begin(v5)
                     + 16);
      if (v6)
      {
        v7 = *(unsigned int **)(v6 + 8);
        if (v7)
        {
          v8 = v7 + 2;
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
          v10 = 0;
          goto LABEL_8;
        }
      }
      else
      {
        v7 = 0;
      }
      v10 = 1;
LABEL_8:
      this = (unsigned int *)WebKit::PlatformCALayerRemote::moveToContext((WebKit::PlatformCALayerRemote *)v7, v3);
      if ((v10 & 1) == 0)
        this = WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v7 + 2);
      v4 = *v5;
    }
    while (*v5);
  }
  v13 = (_QWORD *)*((_QWORD *)a2 + 10);
  v12 = (_QWORD **)((char *)a2 + 80);
  v11 = v13;
  if (v13)
  {
    do
    {
      if (!*((_DWORD *)v11 - 3))
        break;
      v14 = *(WebKit::GraphicsLayerCARemote **)(*WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::begin(v12)
                                              + 8);
      ++*((_DWORD *)v14 + 2);
      this = WebKit::GraphicsLayerCARemote::moveToContext(v14, v3);
      if (*((_DWORD *)v14 + 2) == 1)
        this = (unsigned int *)(*(uint64_t (**)(WebKit::GraphicsLayerCARemote *))(*(_QWORD *)v14 + 16))(v14);
      else
        --*((_DWORD *)v14 + 2);
      v11 = *v12;
    }
    while (*v12);
  }
  return this;
}

void sub_1973B82DC(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 16))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::add<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  char v32;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v30 = -1640531527;
  v31 = 0;
  v32 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v30, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30);
  v11 = result & v9;
  v12 = v8 + 96 * (result & v9);
  v14 = *(_QWORD *)v12;
  v13 = *(_QWORD *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v14 == *a2 && v13 == a2[1])
      {
        v28 = *a1;
        if (*a1)
          v29 = *(_DWORD *)(v28 - 4);
        else
          v29 = 0;
        v25 = 0;
        v24 = v28 + 96 * v29;
        goto LABEL_11;
      }
      if (v13 == -1)
        v26 = v12;
      v11 = (v11 + v27) & v9;
      v12 = v8 + 96 * v11;
      v14 = *(_QWORD *)v12;
      v13 = *(_QWORD *)(v12 + 8);
      ++v27;
    }
    while (*(_OWORD *)v12 != 0);
    if (v26)
    {
      *(_BYTE *)(v26 + 40) = 0;
      *(_BYTE *)(v26 + 64) = 0;
      *(_DWORD *)(v26 + 88) = 0;
      *(_OWORD *)v26 = 0u;
      *(_OWORD *)(v26 + 16) = 0u;
      *(_BYTE *)(v26 + 32) = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = v26;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a2;
  v15 = *a3;
  v16 = a3[1];
  v17 = a3[2];
  *(_BYTE *)(v12 + 64) = *((_BYTE *)a3 + 48);
  *(_OWORD *)(v12 + 32) = v16;
  *(_OWORD *)(v12 + 48) = v17;
  *(_OWORD *)(v12 + 16) = v15;
  result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(v12 + 72, (uint64_t)a3 + 56);
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_10;
LABEL_25:
    result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, v12);
    v12 = result;
    v20 = *a1;
    if (*a1)
      LODWORD(v23) = *(_DWORD *)(v20 - 4);
    else
      LODWORD(v23) = 0;
    goto LABEL_10;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_25;
LABEL_10:
  v24 = v20 + 96 * v23;
  v25 = 1;
LABEL_11:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v25;
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::PlatformCALayerRemote*>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  __int16 v28;
  char v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v27 = -1640531527;
  v28 = 0;
  v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v27, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27);
  v11 = result & v9;
  v12 = v8 + 24 * (result & v9);
  v14 = *(_QWORD *)v12;
  v13 = *(_QWORD *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == *a2 && v13 == a2[1])
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 4);
        else
          v26 = 0;
        v24 = 0;
        v23 = v25 + 24 * v26;
        goto LABEL_19;
      }
      if (v13 == -1)
        v15 = (_QWORD *)v12;
      v11 = (v11 + v16) & v9;
      v12 = v8 + 24 * v11;
      v14 = *(_QWORD *)v12;
      v13 = *(_QWORD *)(v12 + 8);
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = (uint64_t)v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a2;
  result = (uint64_t)WTF::GenericHashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::PlatformCALayerRemote*>((unsigned int **)(v12 + 16), *a3);
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_18;
LABEL_21:
    result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, v12);
    v12 = result;
    v19 = *a1;
    if (*a1)
      LODWORD(v22) = *(_DWORD *)(v19 - 4);
    else
      LODWORD(v22) = 0;
    goto LABEL_18;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_21;
LABEL_18:
  v23 = v19 + 24 * v22;
  v24 = 1;
LABEL_19:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::remove(uint64_t *result, _OWORD *a2)
{
  _OWORD *v2;

  if (*result)
  {
    v2 = (_OWORD *)(*result + 24 * *(unsigned int *)(*result - 4));
    if (v2 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v2 = 0;
  }
  if (v2 != a2)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(result, a2);
  return result;
}

uint64_t WebKit::RemoteLayerTreeContext::buildTransaction(uint64_t a1, uint64_t a2, WebKit::PlatformCALayerRemote *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v24;
  unsigned int v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v34;
  unsigned int v35;
  WebKit::WebProcess *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  _BYTE v44[16];
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (((*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)a3 + 32))(a3) - 1) >= 4u)
    goto LABEL_49;
  *(_OWORD *)a2 = *((_OWORD *)a3 + 1);
  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v36 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v36);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
  }
  v11 = WebKit::WebProcess::webFrame((uint64_t)v10, a4, a5);
  if (v11)
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 + 112);
  *(_QWORD *)(a1 + 200) = a2;
  WebKit::PlatformCALayerRemote::recursiveBuildTransaction(a3, (WebKit::RemoteLayerTreeContext *)a1, (WebKit::RemoteLayerTreeTransaction *)a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 32))(*(_QWORD *)(a1 + 88), a2);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88)))
    *(_BYTE *)(a1 + 208) = 0;
  v12 = 0;
  LODWORD(v13) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (!v14)
    goto LABEL_9;
  v13 = *(unsigned int *)(v14 - 4);
  v15 = v14 + 96 * v13;
  if (!*(_DWORD *)(v14 - 12))
  {
    v12 = v14 + 96 * v13;
LABEL_9:
    v15 = v14 + 96 * v13;
    goto LABEL_10;
  }
  v12 = v14;
  if ((_DWORD)v13)
  {
    v24 = 96 * v13;
    v12 = v14;
    while (*(_OWORD *)v12 == 0 || *(_QWORD *)(v12 + 8) == -1)
    {
      v12 += 96;
      v24 -= 96;
      if (!v24)
      {
        v12 = v15;
        break;
      }
    }
  }
LABEL_10:
  if (!v14)
  {
    v16 = 0;
    v17 = 0;
    v37 = 0;
    v38 = 0;
    goto LABEL_12;
  }
  v17 = v14 + 96 * *(unsigned int *)(v14 - 4);
  v37 = 0;
  v38 = 0;
  v34 = *(unsigned int *)(v14 - 12);
  if (!(_DWORD)v34)
  {
    v16 = 0;
    goto LABEL_12;
  }
  if (v34 >= 0x3333334)
  {
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x1973B8ABCLL);
  }
  v35 = 80 * v34;
  v16 = WTF::fastMalloc((WTF *)(80 * v34));
  LODWORD(v38) = v35 / 0x50;
  v37 = v16;
LABEL_12:
  if (v17 != v12)
  {
    v26 = 0;
    do
    {
      v27 = *(_OWORD *)(v12 + 32);
      v40 = *(_OWORD *)(v12 + 16);
      v41 = v27;
      v42 = *(_OWORD *)(v12 + 48);
      v43 = *(_BYTE *)(v12 + 64);
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v44, v12 + 72);
      v28 = v16 + 80 * v26;
      v29 = v40;
      v30 = v41;
      v31 = v42;
      *(_BYTE *)(v28 + 48) = v43;
      *(_OWORD *)(v28 + 16) = v30;
      *(_OWORD *)(v28 + 32) = v31;
      *(_OWORD *)v28 = v29;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor(v28 + 56, (uint64_t)v44);
      if (v45 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v45])(&v39, v44);
      v32 = v12 + 96;
      v12 = v15;
      if (v32 != v15)
      {
        v12 = v32;
        while (*(_OWORD *)v12 == 0 || *(_QWORD *)(v12 + 8) == -1)
        {
          v12 += 96;
          if (v12 == v15)
          {
            v12 = v15;
            break;
          }
        }
      }
      ++v26;
    }
    while (v12 != v17);
    HIDWORD(v38) = v26;
  }
  WebKit::RemoteLayerTreeTransaction::setCreatedLayers(a2, &v37);
  WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v18);
  if (v14)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v14, v19);
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v22 = *(WTF **)(a2 + 56);
  if (v22)
  {
    *(_QWORD *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 64) = 0;
    WTF::fastFree(v22, v19);
  }
  *(_QWORD *)(a2 + 56) = v20;
  *(_QWORD *)(a2 + 64) = v21;
  return kdebug_trace();
}

void sub_1973B8AF0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  WTF *v27;

  if (v27)
    WTF::fastFree(v27, a2);
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::PlatformCALayerRemote*>(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int **a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::hash(a3);
  v11 = result & v9;
  v12 = v8 + 24 * (result & v9);
  v14 = *(_QWORD *)v12;
  v13 = *(_QWORD *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v14 == *a3 && v13 == a3[1])
      {
        v25 = *a2;
        if (*a2)
          v26 = *(_DWORD *)(v25 - 4);
        else
          v26 = 0;
        v22 = 0;
        v21 = v25 + 24 * v26;
        goto LABEL_11;
      }
      if (v13 == -1)
        v23 = (_QWORD *)v12;
      v11 = (v11 + v24) & v9;
      v12 = v8 + 24 * v11;
      v14 = *(_QWORD *)v12;
      v13 = *(_QWORD *)(v12 + 8);
      ++v24;
    }
    while (*(_OWORD *)v12 != 0);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = (uint64_t)v23;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a3;
  result = (uint64_t)WTF::GenericHashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::PlatformCALayerRemote*>((unsigned int **)(v12 + 16), *a4);
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_10;
LABEL_27:
    result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, v12);
    v12 = result;
    v17 = *a2;
    if (*a2)
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    else
      LODWORD(v20) = 0;
    goto LABEL_10;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_27;
LABEL_10:
  v21 = v17 + 24 * v20;
  v22 = 1;
LABEL_11:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

uint64_t *WebKit::RemoteLayerTreeContext::animationDidStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 64), v14);
  v9 = *(uint64_t **)(a1 + 64);
  if (v9)
    v9 += 3 * *((unsigned int *)v9 - 1);
  if (v9 != result)
  {
    v10 = result[2];
    if (v10)
    {
      v11 = *(unsigned int **)(v10 + 8);
      if (v11)
      {
        v12 = v11 + 2;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
    }
    else
    {
      v11 = 0;
    }
    (*(void (**)(unsigned int *, uint64_t, double))(*(_QWORD *)v11 + 56))(v11, a4, a5);
    return (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v11 + 2);
  }
  return result;
}

void sub_1973B8DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::RemoteLayerTreeContext::animationDidEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 64), v12);
  v7 = *(uint64_t **)(a1 + 64);
  if (v7)
    v7 += 3 * *((unsigned int *)v7 - 1);
  if (v7 != result)
  {
    v8 = result[2];
    if (v8)
    {
      v9 = *(unsigned int **)(v8 + 8);
      if (v9)
      {
        v10 = v9 + 2;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
    }
    else
    {
      v9 = 0;
    }
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v9 + 64))(v9, a4);
    return (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v9 + 2);
  }
  return result;
}

void sub_1973B8EA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::RemoteScrollingCoordinator::~RemoteScrollingCoordinator(WebKit::RemoteScrollingCoordinator *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WebKit::WebProcess *v12;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 19) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v2 + 40, 0x79u, *(_QWORD *)(v4 + 40));
  v6 = *((_QWORD *)this + 22);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v5);
  v7 = *((_QWORD *)this + 21);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), v5);
  v8 = *((_QWORD *)this + 20);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), v5);
  v9 = (unsigned int *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v5);
    }
  }
  *((_QWORD *)this + 17) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 18, v5);
  WebCore::AsyncScrollingCoordinator::~AsyncScrollingCoordinator(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteScrollingCoordinator::~RemoteScrollingCoordinator(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::RemoteScrollingCoordinator::~RemoteScrollingCoordinator(WebKit::RemoteScrollingCoordinator *this)
{
  WebKit::RemoteScrollingCoordinator::~RemoteScrollingCoordinator((WebKit::RemoteScrollingCoordinator *)((char *)this - 136));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteScrollingCoordinator::~RemoteScrollingCoordinator((WebKit::RemoteScrollingCoordinator *)((char *)this - 136));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteScrollingCoordinator::isRubberBandInProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  if (!a2)
    return 0;
  result = *(_QWORD *)(a1 + 160);
  if (result)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(result, v4) != 0;
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinator::isUserScrollInProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  if (!a2)
    return 0;
  result = *(_QWORD *)(a1 + 176);
  if (result)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(result, v4) != 0;
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinator::isScrollSnapInProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  if (!a2)
    return 0;
  result = *(_QWORD *)(a1 + 168);
  if (result)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(result, v4) != 0;
  return result;
}

void WebKit::RemoteScrollingCoordinator::buildTransaction(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  WebCore::AsyncScrollingCoordinator::willCommitTree();
  WebCore::AsyncScrollingCoordinator::ensureScrollingStateTreeForRootFrameID();
  WebCore::ScrollingStateTree::commit();
  v4 = *(_BYTE *)(a1 + 216);
  *(_BYTE *)(a1 + 216) = 0;
  WebKit::RemoteScrollingCoordinatorTransaction::RemoteScrollingCoordinatorTransaction(a2, &v6, v4, 0, 0, 0);
  v5 = v6;
  v6 = 0;
  if (v5)
    WebCore::ScrollingStateTree::operator delete(v5, 0x50uLL);
}

uint64_t WebKit::RemoteScrollingCoordinator::scrollPositionChangedForNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v9;

  WebCore::AsyncScrollingCoordinator::applyScrollUpdate();
  v9 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1973B91AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteScrollingCoordinator::animatedScrollDidEndForNode()
{
  return WebCore::AsyncScrollingCoordinator::applyScrollUpdate();
}

uint64_t *WebKit::RemoteScrollingCoordinator::scrollingStateInUIProcessChanged(uint64_t *this, const WebKit::RemoteScrollingUIState *a2)
{
  uint64_t v3;
  char v4;

  v3 = (uint64_t)this;
  v4 = *(_BYTE *)a2;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    this = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::operator=(this + 21, (uint64_t *)a2 + 1);
    v4 = *(_BYTE *)a2;
    if ((*(_BYTE *)a2 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::operator=((uint64_t *)(v3 + 160), (uint64_t *)a2 + 3);
    }
  }
  else if ((*(_BYTE *)a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::operator=((uint64_t *)(v3 + 176), (uint64_t *)a2 + 2);
  if ((*(_BYTE *)a2 & 4) != 0)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::operator=((uint64_t *)(v3 + 160), (uint64_t *)a2 + 3);
  return this;
}

uint64_t WebKit::RemoteScrollingCoordinator::startMonitoringWheelEvents(uint64_t this, int a2)
{
  if (a2)
    *(_BYTE *)(this + 216) = 1;
  return this;
}

unsigned __int8 *WebKit::RemoteScrollingCoordinator::receivedWheelEventWithPhases(WebCore::ScrollingCoordinator *a1)
{
  WebCore::Page *v1;
  unsigned __int8 *result;
  void *v3;
  unsigned __int8 **v4;

  v1 = (WebCore::Page *)WebCore::ScrollingCoordinator::page(a1);
  WebCore::Page::wheelEventTestMonitor(v1);
  result = (unsigned __int8 *)v4;
  if (v4)
  {
    WebCore::WheelEventTestMonitor::receivedWheelEventWithPhases();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v4, v3);
  }
  return result;
}

void sub_1973B92E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 **a10)
{
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*a10, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::RemoteScrollingCoordinator::startDeferringScrollingTestCompletionForNode(WebCore::ScrollingCoordinator *a1)
{
  WebCore::Page *v1;
  unsigned __int8 *result;
  void *v3;
  unsigned __int8 **v4;

  v1 = (WebCore::Page *)WebCore::ScrollingCoordinator::page(a1);
  WebCore::Page::wheelEventTestMonitor(v1);
  result = (unsigned __int8 *)v4;
  if (v4)
  {
    WebCore::WheelEventTestMonitor::deferForReason();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v4, v3);
  }
  return result;
}

void sub_1973B936C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 **a10)
{
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*a10, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::RemoteScrollingCoordinator::stopDeferringScrollingTestCompletionForNode(WebCore::ScrollingCoordinator *a1)
{
  WebCore::Page *v1;
  unsigned __int8 *result;
  void *v3;
  unsigned __int8 **v4;

  v1 = (WebCore::Page *)WebCore::ScrollingCoordinator::page(a1);
  WebCore::Page::wheelEventTestMonitor(v1);
  result = (unsigned __int8 *)v4;
  if (v4)
  {
    WebCore::WheelEventTestMonitor::removeDeferralForReason();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v4, v3);
  }
  return result;
}

void sub_1973B93F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 **a10)
{
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteScrollingCoordinator::handleWheelEventForScrolling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  if (*(_BYTE *)(a1 + 218) && *(_BYTE *)(a1 + 217))
    return 0;
  *(_QWORD *)(a1 + 184) = a3;
  *(_QWORD *)(a1 + 192) = a4;
  *(_BYTE *)(a1 + 200) = 1;
  *(_WORD *)(a1 + 208) = a5;
  return 256;
}

WebCore::ScrollableArea *WebKit::RemoteScrollingCoordinator::scrollingTreeNodeScrollbarVisibilityDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WebCore::ScrollableArea *result;
  uint64_t v8;

  result = (WebCore::ScrollableArea *)WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode();
  if (result)
  {
    result = (WebCore::ScrollableArea *)WebCore::LocalFrameView::scrollableAreaForScrollingNodeID();
    if (result)
    {
      v8 = WebCore::ScrollableArea::scrollbarsController(result);
      return (WebCore::ScrollableArea *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 272))(v8, a4, a5);
    }
  }
  return result;
}

WebCore::ScrollableArea *WebKit::RemoteScrollingCoordinator::scrollingTreeNodeScrollbarMinimumThumbLengthDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WebCore::ScrollableArea *result;
  uint64_t v8;

  result = (WebCore::ScrollableArea *)WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode();
  if (result)
  {
    result = (WebCore::ScrollableArea *)WebCore::LocalFrameView::scrollableAreaForScrollingNodeID();
    if (result)
    {
      v8 = WebCore::ScrollableArea::scrollbarsController(result);
      return (WebCore::ScrollableArea *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 304))(v8, a4, a5);
    }
  }
  return result;
}

WTF **WebKit::FindIndicatorOverlayClientIOS::drawRect(WTF **this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  WTF **v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  uint64_t v23;
  unsigned int v24;
  WTF *v25;
  int v26;

  v6 = this;
  v7 = this[1];
  v8 = *((_QWORD *)v7 + 3);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(float *)(v9 + 364);
    if (*(_BYTE *)(v9 + 1098))
      v10 = v10 * *(float *)(v9 + 356);
  }
  else
  {
    v10 = MEMORY[0x16C];
  }
  v11 = this[2];
  if (*((float *)v11 + 18) == v10)
    goto LABEL_25;
  WebKit::findTextIndicatorOptions(*(WebKit **)(*((_QWORD *)v7 + 37) + 3064), a2);
  WebCore::TextIndicator::createWithSelectionInFrame();
  v11 = v25;
  v25 = 0;
  this = (WTF **)v6[2];
  v6[2] = v11;
  if (this)
  {
    WTF::RefCounted<WebCore::TextIndicator>::deref(this);
    this = (WTF **)v25;
    v25 = 0;
    if (this)
      this = (WTF **)WTF::RefCounted<WebCore::TextIndicator>::deref(this);
    v11 = v6[2];
  }
  if (v11)
  {
LABEL_25:
    if (*((_QWORD *)v11 + 12))
    {
      WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v25, (uint64_t)v11 + 56);
      WebCore::PathUtilities::pathsWithShrinkWrappedRects();
      v22[0] = 0x11040000FFE438FFLL;
      WebCore::GraphicsContextState::setFillColor((WebCore::GraphicsContext *)((char *)a3 + 8), (const WebCore::Color *)v22);
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
      if ((v22[0] & 0x8000000000000) != 0)
      {
        v18 = (unsigned int *)(v22[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, v12);
        }
      }
      if (v24)
      {
        v13 = v23;
        v14 = 72 * v24;
        do
        {
          (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 176))(a3, v13);
          v13 += 72;
          v14 -= 72;
        }
        while (v14);
      }
      v21[0] = WebCore::PageOverlay::bounds(a2);
      v21[1] = v15;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v22, (const WebCore::IntRect *)v21);
      WebCore::GraphicsContext::drawImage();
      WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v16);
      this = (WTF **)v25;
      if (v25)
      {
        v25 = 0;
        v26 = 0;
        return (WTF **)WTF::fastFree((WTF *)this, v17);
      }
    }
  }
  return this;
}

void sub_1973B96F8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF *a15, int a16)
{
  void *v17;
  WTF *v18;

  WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  v18 = a15;
  if (a15)
  {
    a15 = 0;
    a16 = 0;
    WTF::fastFree(v18, v17);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::findTextIndicatorOptions(WebKit *this, const WebCore::LocalFrame *a2)
{
  uint64_t v2;
  _BYTE v4[40];

  WebCore::VisibleSelection::range((WebKit *)((char *)this + 56));
  if (v4[32])
  {
    if (WebCore::ImageOverlay::isInsideOverlay())
      v2 = 326;
    else
      v2 = 320;
  }
  else
  {
    v2 = 320;
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
  return v2;
}

void sub_1973B97C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL WebKit::FindController::updateFindIndicator(WebKit::FindController *this, BOOL a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WebCore::LocalFrame *v8;
  uint64_t v9;
  _DWORD *v10;
  _BOOL8 v11;
  _QWORD *v12;
  const FloatRect *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Node *v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore::PageOverlay *v19;
  const FloatRect *v20;
  uint64_t v21;
  IntSize v22;
  IntSize v23;
  WebCore::Node *v24;
  int32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  WebCore::Node *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  _DWORD *v44;
  unint64_t v46;
  int v47;
  WebCore::Node *v48[2];
  float32x4_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  IntRect v53;

  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  WebKit::FindController::frameWithSelection(*(WebCore::Page **)(v6 + 48), &v52);
  v7 = v52;
  if (!v52)
    return 0;
  v8 = (const WebCore::LocalFrame *)*((_QWORD *)this + 9);
  if (v8)
  {
    WebCore::PageOverlayController::uninstallPageOverlay();
    v9 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v9)
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v9 + 8));
    *((_BYTE *)this + 24) = 0;
  }
  WebKit::findTextIndicatorOptions(*(WebKit **)(*(_QWORD *)(v7 + 296) + 3064), v8);
  WebCore::TextIndicator::createWithSelectionInFrame();
  v10 = (_DWORD *)v51;
  v11 = v51 != 0;
  if (v51)
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = off_1E34D8C60;
    v12[1] = v7;
    ++*v10;
    v12[2] = v10;
    v14 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v12;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    *(_OWORD *)v48 = *(_OWORD *)(v51 + 8);
    *(_QWORD *)((char *)this + 28) = WebCore::enclosingIntRect((WebCore *)v48, v13);
    *(_QWORD *)((char *)this + 36) = v15;
    WebCore::PageOverlay::create();
    v16 = v48[0];
    v48[0] = 0;
    v17 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v16;
    if (v17)
    {
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v17 + 8));
      v18 = v48[0];
      v48[0] = 0;
      if (v18)
        WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)v18 + 2);
    }
    WebCore::PageOverlayController::installPageOverlay();
    v19 = (WebCore::PageOverlay *)*((_QWORD *)this + 9);
    *(_OWORD *)v48 = *(_OWORD *)(v51 + 24);
    v21 = WebCore::enclosingIntRect((WebCore *)v48, v20);
    v23 = v22;
    v53.m_location = (IntPoint)v21;
    v53.m_size = v23;
    WebCore::PageOverlay::setFrame(v19, v53);
    WebCore::PageOverlay::setNeedsDisplay(*((WebCore::PageOverlay **)this + 9));
    if (a3)
    {
      v50 = 0;
      v24 = (WebCore::Node *)WebCore::Position::containerNode((WebCore::Position *)(*(_QWORD *)(*(_QWORD *)(v7 + 296)
                                                                                              + 3064)
                                                                                  + 120));
      v25.i64[0] = WebCore::Node::absoluteBoundingRect(v24, &v50);
      v25.i64[1] = v26;
      v49 = vmulq_f32(vcvtq_f32_s32(v25), (float32x4_t)vdupq_n_s32(0x3C800000u));
      WebCore::VisiblePosition::VisiblePosition();
      v27 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v48, 0);
      v29 = v28;
      v30 = v48[0];
      v48[0] = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      v31 = *((_QWORD *)this + 1);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 8);
        if (v32)
          v33 = v32 - 16;
        else
          v33 = 0;
      }
      else
      {
        v33 = 0;
      }
      if ((v29 & 0x80000000) == 0)
        v34 = v29;
      else
        v34 = v29 + 1;
      v35 = (v27 + (v34 >> 1));
      v36 = HIDWORD(v29);
      if ((v29 & 0x8000000000000000) != 0)
        LODWORD(v36) = HIDWORD(v29) + 1;
      v46 = v35 | ((unint64_t)(HIDWORD(v27) + ((int)v36 >> 1)) << 32);
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v47, (const IntPoint *)&v46);
      v37 = v33 + 32;
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 + 32) + 56))(v33 + 32);
      v39 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v39 = 1437;
      *(_QWORD *)(v39 + 8) = v38;
      *(_QWORD *)(v39 + 528) = v39 + 16;
      *(_QWORD *)(v39 + 536) = v39 + 16;
      *(_OWORD *)(v39 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v39 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v39);
      v48[0] = (WebCore::Node *)v39;
      IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v39, &v47);
      IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v39, (int *)&v49);
      (*(void (**)(uint64_t, WebCore::Node **, _QWORD))(*(_QWORD *)v37 + 32))(v37, v48, 0);
      v41 = v48[0];
      v48[0] = 0;
      if (v41)
      {
        IPC::Encoder::~Encoder(v41, v40);
        WTF::fastFree(v42, v43);
      }
    }
    *((_BYTE *)this + 24) = 1;
    v44 = (_DWORD *)v51;
    v51 = 0;
    if (v44)
      WTF::RefCounted<WebCore::TextIndicator>::deref(v44);
  }
  if (v52)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v52 + 8));
  return v11;
}

void sub_1973B9B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebCore::Node *a11)
{
  uint64_t v11;
  _DWORD *v13;
  uint64_t v14;

  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  v13 = *(_DWORD **)(v11 - 64);
  *(_QWORD *)(v11 - 64) = 0;
  if (v13)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v13);
  v14 = *(_QWORD *)(v11 - 56);
  *(_QWORD *)(v11 - 56) = 0;
  if (v14)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::setSelectionChangeUpdatesEnabledInAllFrames(uint64_t this, WebKit::WebPage *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 160);
    if (v3)
    {
      do
      {
        if (!*(_BYTE *)(v3 + 144))
        {
          WebCore::Document::editor(*(WebCore::Document **)(v3 + 296));
          WebCore::Editor::setIgnoreSelectionChanges();
        }
        this = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v3 + 48), 0);
        v3 = this;
      }
      while (this);
    }
  }
  return this;
}

uint64_t WebKit::FindController::didFindString(WebKit::FindController *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(v2 + 48));
  result = WebCore::FocusController::focusedOrMainFrame(v7);
  v4 = result;
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 296) + 3064) + 256) |= 0x100u;
    WebCore::FrameSelection::updateAppearance(*(WebCore::FrameSelection **)(*(_QWORD *)(result + 296) + 3064));
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 296) + 3064) + 256) &= ~0x100u;
    WebCore::FrameSelection::revealSelection();
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

void sub_1973B9D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (!*a10)
    {
      __break(0xC471u);
      JUMPOUT(0x1973B9DDCLL);
    }
    --*a10;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::platformReinitialize(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::FocusController *v6;
  CFTypeRef cf;
  WebCore::FocusController *v8;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v8);
  v3 = result;
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    WebKit::WebPage::accessibilityRemoteTokenData(&cf);
    WebKit::WebPage::accessibilityTransferRemoteToken((uint64_t)this, (id *)&cf, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
    if (cf)
      CFRelease(cf);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_1973B9EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  uint64_t v10;

  if (cf)
    CFRelease(cf);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::relayAccessibilityNotification(uint64_t a1, uint64_t a2, id *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v5 = *a3;
  if (*a3)
  {
    v6 = objc_msgSend(*a3, "bytes");
    v7 = objc_msgSend(v5, "length");
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v12[0] = v6;
  v12[1] = v7;
  v13[0] = a2;
  v13[1] = v12;
  v9 = *(_QWORD *)(a1 + 32);
  v8 = a1 + 32;
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  return IPC::MessageSender::send<Messages::WebPageProxy::RelayAccessibilityNotification>(v8, (uint64_t)v13, v10, 0);
}

uint64_t WebKit::WebPage::getPlatformEditorState(WebKit::WebPage *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  WebCore::ScrollView *v7;
  uint64_t (*v8)();
  WebCore::Editor *v9;
  void *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unsigned __int8 *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  void *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  WTF::StringImpl *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  uint64_t v71;
  unsigned int v73;
  uint64_t v74;
  void *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  Node *v89;
  WebCore::Document *v90;
  int v91;
  uint64_t v92;
  WebCore *v93;
  WebCore::Node *v94;
  int isEndOfEditableOrNonEditableContent;
  int v96;
  WTF::StringImpl *v97;
  WebCore::Node *v98;
  WebCore::Node *v99;
  WebCore::Node *v100;
  WTF::StringImpl *v101;
  char hasAnyPlainText;
  WebCore::Node *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  WebCore::ScrollView *v109;
  BOOL v110[2];
  uint64_t v111[4];
  char v112;
  WebCore::Node *v113;
  WebCore::Node *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WebCore::Node *v118;
  WTF::StringImpl *v119[2];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  char v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  result = WebKit::WebPage::getPlatformEditorStateCommon((uint64_t)a1, a2, a3);
  if (!*(_BYTE *)(a3 + 336) || !*(_BYTE *)(a3 + 464))
    return result;
  v7 = *(WebCore::ScrollView **)(a2 + 288);
  ++*((_DWORD *)v7 + 2);
  v109 = v7;
  if (*(_QWORD *)(WebCore::Document::editor(*(WebCore::Document **)(a2 + 296)) + 32))
    v8 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
  else
    v8 = 0;
  if (v8)
  {
    v9 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(a2 + 296));
    WebCore::Editor::compositionRange(v9);
    if (!v112)
    {
LABEL_25:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v111);
      goto LABEL_26;
    }
    WebCore::RenderObject::collectSelectionGeometries();
    v11 = *(WTF **)(a3 + 416);
    if (v11)
    {
      *(_QWORD *)(a3 + 416) = 0;
      *(_DWORD *)(a3 + 424) = 0;
      WTF::fastFree(v11, v10);
    }
    v12 = v119[0];
    *(WTF::StringImpl **)(a3 + 416) = v119[0];
    v13 = HIDWORD(v119[1]);
    *(_DWORD *)(a3 + 424) = v119[1];
    *(_DWORD *)(a3 + 428) = v13;
    WebKit::convertContentToRootView(v7, v12, v13);
    if (!v112)
      goto LABEL_224;
    WebCore::plainTextReplacingNoBreakSpace();
    v15 = v119[0];
    v119[0] = 0;
    v16 = *(WTF::StringImpl **)(a3 + 72);
    *(_QWORD *)(a3 + 72) = v15;
    if (v16)
    {
      v17 = *(_DWORD *)v16 - 2;
      if (*(_DWORD *)v16 != 2)
      {
LABEL_16:
        *(_DWORD *)v16 = v17;
        goto LABEL_17;
      }
      WTF::StringImpl::destroy(v16, v14);
      v16 = v119[0];
      v119[0] = 0;
      if (v16)
      {
        v17 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, v18);
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
LABEL_17:
    if (!v112)
      goto LABEL_224;
    WebCore::VisibleSelection::VisibleSelection();
    WebCore::VisiblePosition::VisiblePosition();
    v114 = (WebCore::Node *)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v116, 0);
    v115 = v19;
    *(_QWORD *)(a3 + 432) = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v114);
    *(_QWORD *)(a3 + 440) = v20;
    v21 = v116;
    v116 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    WebCore::VisiblePosition::VisiblePosition();
    v114 = (WebCore::Node *)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v116, 0);
    v115 = v22;
    *(_QWORD *)(a3 + 448) = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v114);
    *(_QWORD *)(a3 + 456) = v23;
    v24 = v116;
    v116 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v119);
    goto LABEL_25;
  }
LABEL_26:
  v25 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 296) + 3064);
  LOBYTE(v111[0]) = 0;
  v112 = 0;
  *(_BYTE *)(a3 + 122) = *((_BYTE *)a1 + 1293);
  *(_WORD *)v110 = 0;
  v26 = v25[153];
  if (v26 == 2)
  {
    WebCore::VisiblePosition::VisiblePosition();
    v116 = (WTF::StringImpl *)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v119, &v110[1]);
    v117 = v30;
    *(_QWORD *)(a3 + 352) = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v116);
    *(_QWORD *)(a3 + 360) = v31;
    v32 = v119[0];
    v119[0] = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    WebCore::VisiblePosition::VisiblePosition();
    v116 = (WTF::StringImpl *)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v119, v110);
    v117 = v33;
    *(_QWORD *)(a3 + 384) = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v116);
    *(_QWORD *)(a3 + 392) = v34;
    v35 = v119[0];
    v119[0] = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v25 + 56));
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v111, (uint64_t)v119);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v119);
    v116 = 0;
    if (!v112)
      goto LABEL_87;
    WebCore::RenderObject::collectSelectionGeometries();
    v38 = *(WTF **)(a3 + 400);
    if (v38)
    {
      *(_QWORD *)(a3 + 400) = 0;
      *(_DWORD *)(a3 + 408) = 0;
      WTF::fastFree(v38, v37);
    }
    v39 = v119[0];
    *(WTF::StringImpl **)(a3 + 400) = v119[0];
    v40 = HIDWORD(v119[1]);
    *(_DWORD *)(a3 + 408) = v119[1];
    *(_DWORD *)(a3 + 412) = v40;
    WebKit::convertContentToRootView(v7, v39, v40);
    if (!v112)
      goto LABEL_224;
    WebCore::plainTextReplacingNoBreakSpace();
    v42 = v119[0];
    v119[0] = 0;
    v43 = v116;
    v116 = v42;
    if (!v43)
    {
LABEL_48:
      if (v42)
        LODWORD(v42) = *((_DWORD *)v42 + 1);
      *(_QWORD *)(a3 + 40) = v42;
      WTF::String::left(&v116, 0xC8u, v119);
      v46 = v119[0];
      v119[0] = 0;
      v47 = *(WTF::StringImpl **)(a3 + 80);
      *(_QWORD *)(a3 + 80) = v46;
      if (v47)
      {
        v48 = *(_DWORD *)v47 - 2;
        if (*(_DWORD *)v47 != 2)
          goto LABEL_54;
        WTF::StringImpl::destroy(v47, v36);
        v47 = v119[0];
        v119[0] = 0;
        if (!v47)
          goto LABEL_55;
        v48 = *(_DWORD *)v47 - 2;
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v36);
        else
LABEL_54:
          *(_DWORD *)v47 = v48;
      }
LABEL_55:
      if (*(_BYTE *)(a3 + 13))
      {
        if (!v112)
          goto LABEL_224;
        WebCore::TextIterator::TextIterator();
        v49 = 0;
        v50 = 0;
        v51 = MEMORY[0x1E0DD5FB0];
        while (v125)
        {
          v52 = WebCore::TextIterator::node((WebCore::TextIterator *)v119);
          v53 = v52;
          if (v52
            && (*(_WORD *)(v52 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v52 + 96) + 24) == *(_QWORD *)(*(_QWORD *)v51 + 24))
          {
            if (v50)
            {
              if (*(_DWORD *)(v50 + 24) == 2)
              {
                if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v50);
              }
              else
              {
                *(_DWORD *)(v50 + 24) -= 2;
              }
              MEMORY[0x19AEAD924](v119);
              goto LABEL_87;
            }
            *(_DWORD *)(v52 + 24) += 2;
            v50 = v52;
          }
          else
          {
            v53 = v49;
          }
          WebCore::TextIterator::advance((WebCore::TextIterator *)v119);
          v49 = v53;
        }
        MEMORY[0x19AEAD924](v119);
        if (v49)
        {
          WebKit::WebPage::contextForElement(a1, (WebCore::Element *)v49, (uint64_t)v119);
          v61 = v122;
          v62 = v123;
          v63 = v120;
          *(_OWORD *)(a3 + 176) = v121;
          *(_OWORD *)(a3 + 192) = v61;
          *(_OWORD *)(a3 + 208) = v62;
          *(_BYTE *)(a3 + 224) = v124;
          *(_OWORD *)(a3 + 144) = *(_OWORD *)v119;
          *(_OWORD *)(a3 + 160) = v63;
          if (*(_DWORD *)(v49 + 24) == 2)
          {
            if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v49);
          }
          else
          {
            *(_DWORD *)(v49 + 24) -= 2;
          }
        }
      }
LABEL_87:
      v64 = 0;
      v65 = v116;
      if (!*(_BYTE *)(a3 + 13) || *(_BYTE *)(a3 + 15))
      {
LABEL_107:
        *(_BYTE *)(a3 + 120) = v64;
        v116 = 0;
        if (!v65)
          goto LABEL_111;
LABEL_108:
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v36);
        else
          *(_DWORD *)v65 -= 2;
        goto LABEL_111;
      }
      if (!v116)
      {
        *(_BYTE *)(a3 + 120) = 0;
        goto LABEL_111;
      }
      v66 = (unsigned __int8 *)*((_QWORD *)v116 + 1);
      v67 = *((unsigned int *)v116 + 1);
      if ((*((_BYTE *)v116 + 16) & 4) != 0)
      {
        if ((_DWORD)v67)
        {
          while (1)
          {
            v73 = *v66;
            v70 = v73 > 0x20;
            v74 = (1 << v73) & 0x100003600;
            if (v70 || v74 == 0)
              goto LABEL_167;
            ++v66;
            if (!--v67)
            {
LABEL_106:
              v64 = 0;
              goto LABEL_107;
            }
          }
        }
      }
      else if ((_DWORD)v67)
      {
        v68 = 2 * v67;
        while (1)
        {
          v69 = *(unsigned __int16 *)v66;
          v70 = v69 > 0x20;
          v71 = (1 << v69) & 0x100003600;
          if (v70 || v71 == 0)
            break;
          v66 += 2;
          v68 -= 2;
          if (!v68)
            goto LABEL_106;
        }
LABEL_167:
        v64 = 1;
        goto LABEL_107;
      }
      *(_BYTE *)(a3 + 120) = 0;
      v116 = 0;
      goto LABEL_108;
    }
    v44 = *(_DWORD *)v43 - 2;
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::destroy(v43, v41);
      v43 = v119[0];
      v119[0] = 0;
      if (!v43)
      {
LABEL_47:
        v42 = v116;
        goto LABEL_48;
      }
      v44 = *(_DWORD *)v43 - 2;
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::destroy(v43, v45);
        goto LABEL_47;
      }
    }
    *(_DWORD *)v43 = v44;
    goto LABEL_47;
  }
  if (v26 != 1)
    goto LABEL_112;
  v119[0] = (WTF::StringImpl *)WebCore::FrameSelection::absoluteCaretBounds((WebCore::FrameSelection *)v25, &v110[1]);
  v119[1] = v27;
  *(_QWORD *)(a3 + 352) = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)v119);
  *(_QWORD *)(a3 + 360) = v28;
  v110[0] = v110[1];
  *(_OWORD *)(a3 + 384) = *(_OWORD *)(a3 + 352);
  if (*(_BYTE *)(a3 + 13))
  {
    WebCore::VisiblePosition::VisiblePosition();
    *(_BYTE *)(a3 + 120) = WebCore::atBoundaryOfGranularity();
    v29 = v119[0];
    v119[0] = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::wordRangeFromPosition();
  std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v111, (uint64_t)v119);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v119);
  v54 = v116;
  v116 = 0;
  if (v54)
  {
    if (*((_DWORD *)v54 + 6) == 2)
    {
      if ((*((_WORD *)v54 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v54);
    }
    else
    {
      *((_DWORD *)v54 + 6) -= 2;
    }
  }
  WebKit::plainTextForContext(v119, (uint64_t)v111);
  v56 = v119[0];
  v119[0] = 0;
  v57 = *(WTF::StringImpl **)(a3 + 80);
  *(_QWORD *)(a3 + 80) = v56;
  if (!v57)
    goto LABEL_75;
  v58 = *(_DWORD *)v57 - 2;
  if (*(_DWORD *)v57 != 2)
  {
LABEL_74:
    *(_DWORD *)v57 = v58;
    goto LABEL_75;
  }
  WTF::StringImpl::destroy(v57, v55);
  v57 = v119[0];
  v119[0] = 0;
  if (v57)
  {
    v58 = *(_DWORD *)v57 - 2;
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::destroy(v57, v59);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
LABEL_75:
  if (!WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(v25 + 56)))
    goto LABEL_112;
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::charactersAroundPosition();
  v60 = v119[0];
  v119[0] = 0;
  if (v60)
  {
    if (*((_DWORD *)v60 + 6) == 2)
    {
      if ((*((_WORD *)v60 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v60);
    }
    else
    {
      *((_DWORD *)v60 + 6) -= 2;
    }
  }
LABEL_111:
  v7 = v109;
LABEL_112:
  if (v112)
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 + 296) + 1496)
      || (WebCore::Document::ensureMarkers(*(WebCore::Document **)(a2 + 296)), v112))
    {
      WebCore::DocumentMarkerController::markersInRange();
      v77 = HIDWORD(v119[1]);
      if (HIDWORD(v119[1]))
      {
        if (HIDWORD(v119[1]) >> 29)
        {
LABEL_225:
          __break(0xC471u);
          JUMPOUT(0x1973BACACLL);
        }
        v78 = WTF::fastMalloc((WTF *)(8 * HIDWORD(v119[1])));
        v79 = v78;
        if (HIDWORD(v119[1]))
        {
          v80 = 0;
          v81 = v119[0];
          v82 = 8 * HIDWORD(v119[1]);
          while (1)
          {
            v83 = *(_QWORD *)(*((_QWORD *)v81 + v80) + 8);
            if (*(_DWORD *)(v83 + 96) != 1)
              break;
            *(_QWORD *)(v78 + 8 * v80++) = *(_QWORD *)(v83 + 32);
            v82 -= 8;
            if (!v82)
              goto LABEL_124;
          }
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_224;
        }
        LODWORD(v80) = 0;
LABEL_124:
        v7 = v109;
      }
      else
      {
        v79 = 0;
        LODWORD(v80) = 0;
      }
      v84 = *(WTF **)(a3 + 104);
      if (v84)
      {
        *(_QWORD *)(a3 + 104) = 0;
        *(_DWORD *)(a3 + 112) = 0;
        WTF::fastFree(v84, v76);
      }
      *(_QWORD *)(a3 + 104) = v79;
      *(_DWORD *)(a3 + 112) = v77;
      *(_DWORD *)(a3 + 116) = v80;
      WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v119, v76);
      goto LABEL_128;
    }
LABEL_224:
    __break(1u);
    goto LABEL_225;
  }
LABEL_128:
  *(_BYTE *)(a3 + 123) = v110[1] || v110[0];
  if (v25[153])
  {
    if (WebCore::VisibleSelection::hasEditableStyle((WebCore::VisibleSelection *)(v25 + 56)))
    {
      v85 = WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)(v25 + 56));
      v86 = v85;
      if (v85)
      {
        v87 = *(_DWORD *)(v85 + 24) + 2;
        *(_DWORD *)(v85 + 24) = v87;
        v88 = *(_QWORD *)(v85 + 64) & 0xFFFFFFFFFFFFLL;
        if (v88)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v85 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            goto LABEL_225;
          WebCore::CaretBase::computeCaretColor();
          WebCore::Color::operator=();
          if (((unint64_t)v119[0] & 0x8000000000000) != 0)
          {
            v106 = (unsigned int *)((unint64_t)v119[0] & 0xFFFFFFFFFFFFLL);
            do
            {
              v107 = __ldaxr(v106);
              v108 = v107 - 1;
            }
            while (__stlxr(v108, v106));
            if (!v108)
            {
              atomic_store(1u, v106);
              WTF::fastFree((WTF *)v106, v89);
            }
          }
          *(_BYTE *)(a3 + 136) = (*(_DWORD *)(*(_QWORD *)(v88 + 104) + 236) & 0x200000) != 0;
          v90 = *(WebCore::Document **)(*(_QWORD *)(v86 + 40) + 8);
          if (!*((_QWORD *)v90 + 187))
            WebCore::Document::ensureMarkers(v90);
          WebCore::makeRangeSelectingNodeContents((WebCore *)v86, v89);
          *(_BYTE *)(a3 + 140) = WebCore::DocumentMarkerController::hasMarkers();
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v120);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v119);
          v87 = *(_DWORD *)(v86 + 24);
        }
        v91 = v87 - 2;
        if (v91)
        {
          *(_DWORD *)(v86 + 24) = v91;
          v7 = v109;
        }
        else
        {
          v7 = v109;
          if ((*(_WORD *)(v86 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v86);
        }
      }
    }
    *(_BYTE *)(a3 + 121) = 0;
    *(_BYTE *)(a3 + 124) = 0;
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(v25 + 56)))
    {
      if (*(_QWORD *)(a3 + 40) || *(_DWORD *)(a3 + 88) || *(_DWORD *)(a3 + 92) || *(_DWORD *)(a3 + 96))
      {
        *(_BYTE *)(a3 + 121) = 1;
        *(_BYTE *)(a3 + 124) = 1;
      }
      else
      {
        v92 = WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)(v25 + 56));
        v93 = (WebCore *)v92;
        if (v92 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 208))(v92))
        {
          WebCore::firstPositionInNode(v93, v94);
          if (*((_QWORD *)v93 + 10))
          {
            WebCore::VisiblePosition::VisiblePosition();
            isEndOfEditableOrNonEditableContent = WebCore::isEndOfEditableOrNonEditableContent();
            v96 = isEndOfEditableOrNonEditableContent ^ 1;
            *(_BYTE *)(a3 + 121) = isEndOfEditableOrNonEditableContent ^ 1;
            v97 = v119[0];
            v119[0] = 0;
            if (v97)
            {
              if (*((_DWORD *)v97 + 6) == 2)
              {
                if ((*((_WORD *)v97 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v97);
                  v96 = *(unsigned __int8 *)(a3 + 121);
                }
              }
              else
              {
                *((_DWORD *)v97 + 6) -= 2;
              }
            }
            if (v96)
            {
              WebCore::VisiblePosition::VisiblePosition();
              WebCore::lastPositionInNode(v93, v98);
              WebCore::VisiblePosition::VisiblePosition();
              WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t)v119);
              v99 = v114;
              v114 = 0;
              if (v99)
              {
                if (*((_DWORD *)v99 + 6) == 2)
                {
                  if ((*((_WORD *)v99 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v99);
                }
                else
                {
                  *((_DWORD *)v99 + 6) -= 2;
                }
              }
              v100 = v113;
              v113 = 0;
              if (v100)
              {
                if (*((_DWORD *)v100 + 6) == 2)
                {
                  if ((*((_WORD *)v100 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v100);
                }
                else
                {
                  *((_DWORD *)v100 + 6) -= 2;
                }
              }
              v101 = v116;
              v116 = 0;
              if (v101)
              {
                if (*((_DWORD *)v101 + 6) == 2)
                {
                  if ((*((_WORD *)v101 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v101);
                }
                else
                {
                  *((_DWORD *)v101 + 6) -= 2;
                }
              }
              if ((_BYTE)v121)
                hasAnyPlainText = WebCore::hasAnyPlainText();
              else
                hasAnyPlainText = 0;
              *(_BYTE *)(a3 + 124) = hasAnyPlainText;
              std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v119);
            }
          }
          else
          {
            *(_BYTE *)(a3 + 121) = 0;
          }
          v103 = v118;
          v118 = 0;
          if (v103)
          {
            if (*((_DWORD *)v103 + 6) == 2)
            {
              if ((*((_WORD *)v103 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v103);
            }
            else
            {
              *((_DWORD *)v103 + 6) -= 2;
            }
          }
          v7 = v109;
        }
      }
    }
    WebCore::VisiblePosition::VisiblePosition();
    *(_BYTE *)(a3 + 138) = WebCore::atBoundaryOfGranularity();
    v104 = v119[0];
    v119[0] = 0;
    if (v104)
    {
      if (*((_DWORD *)v104 + 6) == 2)
      {
        if ((*((_WORD *)v104 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v104);
      }
      else
      {
        *((_DWORD *)v104 + 6) -= 2;
      }
    }
    WebCore::VisiblePosition::VisiblePosition();
    *(_BYTE *)(a3 + 139) = WebCore::atBoundaryOfGranularity();
    v105 = v119[0];
    v119[0] = 0;
    if (v105)
    {
      if (*((_DWORD *)v105 + 6) == 2)
      {
        if ((*((_WORD *)v105 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v105);
      }
      else
      {
        *((_DWORD *)v105 + 6) -= 2;
      }
    }
  }
  result = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v111);
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1)
      return (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v7 + 8))(v7);
    else
      --*((_DWORD *)v7 + 2);
  }
  return result;
}

WebCore::ScrollView *WebKit::convertContentToRootView(WebCore::ScrollView *this, _OWORD *a2, unsigned int a3)
{
  WebCore::ScrollView *v4;
  uint64_t v5;
  __int128 v6;
  FloatQuad v7;
  FloatQuad v8;

  if (a3)
  {
    v4 = this;
    v5 = 84 * a3;
    do
    {
      v6 = a2[1];
      *(_OWORD *)&v7.m_p1.m_x = *a2;
      *(_OWORD *)&v7.m_p3.m_x = v6;
      WebCore::ScrollView::contentsToRootView(v4, &v7);
      this = (WebCore::ScrollView *)WebCore::SelectionGeometry::setQuad((WebCore::SelectionGeometry *)a2, &v8);
      a2 = (_OWORD *)((char *)a2 + 84);
      v5 -= 84;
    }
    while (v5);
  }
  return this;
}

_QWORD *WebKit::plainTextForContext(_QWORD *result, uint64_t a2)
{
  _DWORD *v2;

  if (*(_BYTE *)(a2 + 32))
    return (_QWORD *)WebCore::plainTextReplacingNoBreakSpace();
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *result = v2;
  return result;
}

uint64_t WebKit::WebPage::platformWillPerformEditingCommand(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  WebCore::DOMTimerHoldingTank *v7;
  WebCore::FocusController *v8;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v8);
  v2 = result;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v8;
  }
  if (result)
  {
    v5 = *(_QWORD *)(result + 296);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v6 + 2;
      v7 = *(WebCore::DOMTimerHoldingTank **)(v5 + 3024);
      if (v7)
      {
        WebCore::DOMTimerHoldingTank::removeAll(v7);
        v6 = *(_DWORD *)(v5 + 24) - 2;
      }
      if (v6)
      {
        *(_DWORD *)(v5 + 24) = v6;
      }
      else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

void sub_1973BB2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPage::restorePageState(WebKit::WebPage *this, const WebCore::HistoryItem *a2)
{
  IPC::Encoder *result;
  float v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  const IntPoint *v9;
  float v10;
  int v12;
  int v13;
  float v14;
  const WebCore::IntSize *v15;
  const WebCore::IntSize *v16;
  float v17;
  double v18;
  double v19;
  BOOL v20;
  BOOL v21;
  float32x2_t v22;
  float32x2_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  double v29;
  float v30;
  NSObject *v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  double v39;
  double v40;
  float v41;
  double v42;
  float v43;
  double v44;
  uint64_t v45;
  const IntPoint *v46;
  NSObject *v47;
  int shouldRestoreScrollPosition;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  __int128 v57;
  float32x2_t v58;
  char v59;
  uint8_t buf[16];
  double v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  result = (IPC::Encoder *)WebCore::HistoryItem::pageScaleFactor(a2);
  if (v5 == 0.0)
  {
    v25 = *((_QWORD *)this + 4);
    v24 = (char *)this + 32;
    v26 = (*(uint64_t (**)(char *))(v25 + 56))(v24);
    v27 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v27 = 1852;
    *(_QWORD *)(v27 + 8) = v26;
    *(_QWORD *)(v27 + 528) = v27 + 16;
    *(_QWORD *)(v27 + 536) = v27 + 16;
    *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v27 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
    *(_QWORD *)buf = v27;
    (*(void (**)(char *, uint8_t *, _QWORD))(*(_QWORD *)v24 + 32))(v24, buf, 0);
LABEL_44:
    result = *(IPC::Encoder **)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v28);
      return (IPC::Encoder *)WTF::fastFree(v54, v55);
    }
    return result;
  }
  v6 = *((unsigned __int8 *)a2 + 280);
  *((_BYTE *)this + 1291) = v6 ^ 1;
  v7 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v7)
    v8 = *(_BYTE *)(v7 + 144) == 0;
  else
    v8 = 0;
  if (v8)
  {
    v9 = *(const IntPoint **)(v7 + 288);
    v10 = *((float *)this + 266);
    if (*((float *)a2 + 61) == v10 && *((float *)a2 + 62) == *((float *)this + 267))
    {
      if (v6)
      {
        WebCore::ViewportConfiguration::initialScale((WebKit::WebPage *)((char *)this + 944));
        v30 = v29;
      }
      else
      {
        WebCore::HistoryItem::pageScaleFactor(a2);
        v30 = v38;
      }
      if (*((_BYTE *)this + 1177))
      {
        WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor((uint64_t)this + 944);
        v40 = v39 * 5.0;
      }
      else
      {
        v40 = *((double *)this + 123);
      }
      v41 = v40;
      WebCore::ViewportConfiguration::minimumScale((WebKit::WebPage *)((char *)this + 944));
      v43 = v42;
      if (v30 > v43)
        v43 = v30;
      if (v43 >= v41)
        v43 = v41;
      v44 = v43;
      *(_QWORD *)buf = 0;
      WebKit::WebPage::scalePage(this, v43, (const WebCore::IntPoint *)buf);
      LOBYTE(v57) = 0;
      BYTE8(v57) = 0;
      if (WebCore::HistoryItem::shouldRestoreScrollPosition(a2))
      {
        v45 = *((_QWORD *)this + 9);
        *(_OWORD *)buf = *(_OWORD *)((char *)a2 + 212);
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v45 + 168))(v45, buf);
        *((_BYTE *)this + 1289) = 1;
        v46 = (const IntPoint *)WebCore::HistoryItem::scrollPosition(a2);
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v57, v46);
        BYTE8(v57) = 1;
      }
      v47 = qword_1ECE717D0;
      if (os_log_type_enabled((os_log_t)qword_1ECE717D0, OS_LOG_TYPE_DEFAULT))
      {
        shouldRestoreScrollPosition = WebCore::HistoryItem::shouldRestoreScrollPosition(a2);
        v49 = *(_DWORD *)(WebCore::HistoryItem::scrollPosition(a2) + 4);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = shouldRestoreScrollPosition;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v49;
        _os_log_impl(&dword_196BCC000, v47, OS_LOG_TYPE_DEFAULT, "WebPage::restorePageState with matching minimumLayoutSize; historyItem.shouldRestoreScrollPosition %d, scrollPosition.y %d",
          buf,
          0xEu);
      }
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v58, v9 + 12);
      v51 = *((_QWORD *)this + 4);
      v50 = (char *)this + 32;
      v52 = (*(uint64_t (**)(char *))(v51 + 56))(v50);
      v53 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v53 = 2018;
      *(_QWORD *)(v53 + 8) = v52;
      *(_QWORD *)(v53 + 528) = v53 + 16;
      *(_QWORD *)(v53 + 536) = v53 + 16;
      *(_OWORD *)(v53 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v53 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v53);
      *(_QWORD *)buf = v53;
      IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatPoint> const&>((IPC::Encoder *)v53, (uint64_t)&v57);
      IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v53, (int *)&v58);
      IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode((IPC::Encoder *)v53, (int *)a2 + 65);
      *(double *)IPC::Encoder::grow((IPC::Encoder *)v53, 8uLL, 8) = v44;
      (*(void (**)(char *, uint8_t *, _QWORD))(*(_QWORD *)v50 + 32))(v50, buf, 0);
    }
    else
    {
      v13 = *((_DWORD *)a2 + 63);
      v12 = *((_DWORD *)a2 + 64);
      v56 = WebCore::ScrollView::contentsSize(*(WebCore::ScrollView **)(v7 + 288));
      v14 = (float)*((int *)a2 + 59) / (float)v13;
      WebCore::HistoryItem::pageScaleFactor(a2);
      WebKit::scaleAfterViewportWidthChange((WebKit *)(*((_BYTE *)a2 + 280) == 0), COERCE_DOUBLE(__PAIR64__(HIDWORD(v56), LODWORD(v10))), (WebKit::WebPage *)((char *)this + 944), (const WebCore::ViewportConfiguration *)v56, v14, v15, v16, v17);
      v19 = v18;
      v58.i8[0] = 0;
      v59 = 0;
      if (WebCore::HistoryItem::shouldRestoreScrollPosition(a2))
      {
        if (v13 < 1
          || v12 < 1
          || ((int)v56 >= 1 ? (v20 = SHIDWORD(v56) < 1) : (v20 = 1),
              v20 || ((_DWORD)v56 == v13 ? (v21 = HIDWORD(v56) == v12) : (v21 = 0), v21)))
        {
          v57 = *(_OWORD *)((char *)a2 + 228);
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)buf, (const WebCore::IntRect *)&v57);
          v59 = 1;
          v23 = vadd_f32(*(float32x2_t *)buf, vmul_f32(*(float32x2_t *)&buf[8], (float32x2_t)0x3F0000003F000000));
        }
        else
        {
          v57 = *(_OWORD *)((char *)a2 + 228);
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)buf, (const WebCore::IntRect *)&v57);
          v59 = 1;
          v22.f32[0] = (float)v13;
          v22.f32[1] = (float)v12;
          v23 = vmul_f32(vdiv_f32(vadd_f32(*(float32x2_t *)buf, vmul_f32(*(float32x2_t *)&buf[8], (float32x2_t)0x3F0000003F000000)), v22), vcvt_f32_s32((int32x2_t)v56));
        }
        v58 = v23;
      }
      v31 = qword_1ECE717D0;
      if (os_log_type_enabled((os_log_t)qword_1ECE717D0, OS_LOG_TYPE_DEFAULT))
      {
        v32 = WebCore::HistoryItem::shouldRestoreScrollPosition(a2);
        v33 = *((_DWORD *)a2 + 58);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v32;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v33;
        *(_WORD *)&buf[14] = 2048;
        v61 = v19;
        _os_log_impl(&dword_196BCC000, v31, OS_LOG_TYPE_DEFAULT, "WebPage::restorePageState with mismatched minimumLayoutSize; historyItem.shouldRestoreScrollPosition %d, unobs"
          "cured rect top %d, scale %.2f",
          buf,
          0x18u);
      }
      *(_QWORD *)buf = 0;
      WebKit::WebPage::scalePage(this, v19, (const WebCore::IntPoint *)buf);
      v35 = *((_QWORD *)this + 4);
      v34 = (char *)this + 32;
      v36 = (*(uint64_t (**)(char *))(v35 + 56))(v34);
      v37 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v37 = 2017;
      *(_QWORD *)(v37 + 8) = v36;
      *(_QWORD *)(v37 + 528) = v37 + 16;
      *(_QWORD *)(v37 + 536) = v37 + 16;
      *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v37 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
      *(_QWORD *)buf = v37;
      IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatPoint> const&>((IPC::Encoder *)v37, (uint64_t)&v58);
      *(double *)IPC::Encoder::grow((IPC::Encoder *)v37, 8uLL, 8) = v19;
      (*(void (**)(char *, uint8_t *, _QWORD))(*(_QWORD *)v34 + 32))(v34, buf, 0);
    }
    goto LABEL_44;
  }
  return result;
}

void sub_1973BB878(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, IPC::Encoder *a17)
{
  WTF *v18;
  void *v19;

  if (a17)
  {
    IPC::Encoder::~Encoder(a17, a2);
    WTF::fastFree(v18, v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::scaleAfterViewportWidthChange(WebKit *this, double a2, WebCore::ViewportConfiguration *a3, const WebCore::ViewportConfiguration *a4, float a5, const WebCore::IntSize *a6, const WebCore::IntSize *a7, float a8)
{
  if ((this & 1) == 0)
    return WebCore::ViewportConfiguration::initialScale(a3);
  if (*((_BYTE *)a3 + 233))
    WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor((uint64_t)a3);
  return WebCore::ViewportConfiguration::minimumScale(a3);
}

double WebKit::WebPage::minimumPageScaleFactor(WebKit::WebPage *this)
{
  WebCore::ViewportConfiguration *v2;
  double result;

  v2 = (WebKit::WebPage *)((char *)this + 944);
  if ((WebCore::ViewportConfiguration::allowsUserScaling((WebKit::WebPage *)((char *)this + 944)) & 1) == 0)
    return *(float *)(*((_QWORD *)this + 6) + 356);
  WebCore::ViewportConfiguration::minimumScale(v2);
  return result;
}

double WebKit::WebPage::maximumPageScaleFactor(WebKit::WebPage *this)
{
  char *v2;
  double v3;

  v2 = (char *)this + 944;
  if ((WebCore::ViewportConfiguration::allowsUserScaling((WebKit::WebPage *)((char *)this + 944)) & 1) == 0)
    return *(float *)(*((_QWORD *)this + 6) + 356);
  if (!*((_BYTE *)this + 1177))
    return *((double *)this + 123);
  WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor((uint64_t)v2);
  return v3 * 5.0;
}

uint64_t WebKit::WebPage::handleEditingKeyboardEvent(WebKit::WebPage *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebProcess *v7;
  uint64_t v8;
  BOOL v9;
  void *v10;
  void *v11;
  BOOL v12;
  WebKit::WebProcess *v13;
  _BYTE *v14;
  BOOL v15;
  _BYTE v16[16];
  int v17;
  _BYTE v18[32];
  _BYTE v19[320];
  _QWORD v20[18];

  v20[17] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 11);
  if (!v2 || *(_BYTE *)(v2 + 100))
    return 0;
  if ((WebKit::WebPage::handleKeyEventByRelinquishingFocusToChrome(this, a2) & 1) != 0)
    return 1;
  WebKit::WebPage::updateLastNodeBeforeWritingSuggestions((WebCore::Document **)this, a2);
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v13);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *((_QWORD *)v7 + 4);
  WebKit::WebPage::editorState((uint64_t)this, 1, (uint64_t)v18);
  v9 = *(_BYTE *)(v2 + 8) == 4;
  v14 = v18;
  v15 = v9;
  IPC::Connection::sendSync<Messages::WebPageProxy::InterpretKeyEvent>(v8, (uint64_t)&v14, *((_QWORD *)this + 5), 0, (uint64_t)v16, INFINITY);
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v10);
  if (v19[304])
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v19, v11);
  if (v17)
    v12 = 1;
  else
    v12 = v16[8] == 0;
  v3 = !v12;
  if (v17 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy17InterpretKeyEventEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v17])(v18, v16);
  return v3;
}

void sub_1973BBB44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59)
{
  void *v60;

  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a59, a2);
  if (a57)
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&a19, v60);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::clearServiceWorkerEntitlementOverride(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  WebKit::disableServiceWorkerEntitlementTestingOverride = 0;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1973BBBB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::getSelectionContext(uint64_t a1, uint64_t *a2)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::FocusController *v22[5];
  WTF::StringImpl *v23;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v22[0]);
  v4 = result;
  if (result)
  {
    v5 = result + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v22[0];
  v22[0] = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1973BBE88);
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    v8 = *(_QWORD *)(*((_QWORD *)result + 37) + 3064);
    if (*(_BYTE *)(v8 + 153) == 2)
    {
      WebCore::VisibleSelection::firstRange((WebCore::VisibleSelection *)(v8 + 56));
      WebKit::plainTextForContext(&v23, (uint64_t)v22);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22);
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary();
      WebKit::plainTextForDisplay(&v21, (uint64_t)v22);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22);
      v9 = v20;
      v20 = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary();
      WebKit::plainTextForDisplay(&v19, (uint64_t)v22);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22);
      v10 = v20;
      v20 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      v11 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v23, &v21, &v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v13 = v19;
      v19 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v18 = v21;
      v21 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v12);
        else
          *(_DWORD *)v18 -= 2;
      }
      v17 = v23;
      v23 = 0;
      if (!v17)
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
    }
    else
    {
      v22[0] = 0;
      v20 = 0;
      v23 = 0;
      v14 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, WebCore::FocusController **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, v22, &v20, &v23);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v23;
      v23 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v20;
      v20 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v12);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v22[0];
      v22[0] = 0;
      if (!v17)
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
    }
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
  }
  return result;
}

void sub_1973BBEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v20 = *(WTF::StringImpl **)(v17 - 40);
  *(_QWORD *)(v17 - 40) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v19);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v19);
    else
      *(_DWORD *)a15 -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WebKit::plainTextForDisplay(_QWORD *result, uint64_t a2)
{
  _DWORD *v2;

  if (*(_BYTE *)(a2 + 32))
    return (_QWORD *)WebCore::plainTextReplacingNoBreakSpace();
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *result = v2;
  return result;
}

void WebKit::WebPage::registerUIProcessAccessibilityTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  const void *v4;

  v3 = *(void **)(a1 + 264);
  v4 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a2, a3);
  objc_msgSend(v3, "setRemoteTokenData:", v4);
  if (v4)
    CFRelease(v4);
}

void sub_1973BC148(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPage::getStringSelectionForPasteboard(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  v5 = 0;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, &v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1973BC1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::getDataSelectionForPasteboard(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void *v4;
  unsigned int *result;
  unsigned int *v6;

  v6 = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v3 + 16))(v3, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = v6;
  v6 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v4);
  return result;
}

void sub_1973BC278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::shouldDelayWindowOrderingEvent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_1973BC2E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::rectForElementAtInteractionLocation(int32x2_t *this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  int32x2_t v4;
  int8x8_t v5;
  uint64_t v6;
  WebCore::ScrollView *v7;
  uint64_t v8;
  _QWORD v10[2];
  _BYTE v11[72];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)&this[6] + 160);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v4 = this[156];
  v5 = (int8x8_t)vcgt_s32(v4, (int32x2_t)0xFE000000FE000000);
  v10[0] = vorr_s8((int8x8_t)(*(_QWORD *)&v5 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v4), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v4, 6uLL)), v5));
  WebCore::EventHandler::hitTestResultAtPoint();
  v6 = v12;
  if (v12)
  {
    if ((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v7 = *(WebCore::ScrollView **)(WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v11) + 288);
      v10[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL), 1, 0);
      v10[1] = v8;
      v3 = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)v10);
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
  }
  MEMORY[0x19AEADBAC](v11);
  return v3;
}

void sub_1973BC3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  MEMORY[0x19AEADBAC](va);
  _Unwind_Resume(a1);
}

void WebKit::WebPage::generateSyntheticEditingCommand(uint64_t a1, int a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::FocusController *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::WallTime *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::FocusController *v16;
  int v17;
  WTF::WallTime *v18;
  WebCore::FocusController *v19;
  WTF::WallTime *v20;
  WebCore::FocusController *v21;
  WTF::WallTime *v22;
  WebCore::FocusController *v23;
  WTF::WallTime *v24;
  WebCore::FocusController *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  CFTypeRef v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::FocusController *v34[2];
  __int128 v35;
  __int128 v36;
  __int16 v37;
  char v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int16 v50;
  char v51;
  __int128 v52;
  WTF::StringImpl *v53[4];
  CFTypeRef cf;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v47 = 0;
  WORD4(v47) = 1;
  LOBYTE(v48) = 0;
  LOBYTE(v49) = 0;
  v50 = 0;
  v51 = 0;
  cf = 0;
  v52 = 0u;
  memset(v53, 0, 30);
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v3 = WebCore::FocusController::focusedOrMainFrame(v34[0]);
  v5 = v3;
  if (v3)
  {
    v6 = (unsigned int *)(v3 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = v34[0];
  v34[0] = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1973BCC60);
    }
    --*(_DWORD *)v8;
  }
  if (v3)
  {
    switch(a2)
    {
      case 0:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v9 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v10 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v11 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v33;
        v13 = (WTF::WallTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v33;
        WTF::WallTime::now(v13);
        v34[0] = v16;
        LOWORD(v34[1]) = 1025;
        LOBYTE(v35) = 0;
        LOBYTE(v36) = 0;
        v37 = 0;
        v38 = 0;
        if (v33)
        {
          *(_DWORD *)v33 += 2;
          *(_DWORD *)v33 += 2;
        }
        v40 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v41 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v42 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v17 = 90;
        goto LABEL_54;
      case 1:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v9 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v10 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v11 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v33;
        v22 = (WTF::WallTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v33;
        WTF::WallTime::now(v22);
        v34[0] = v23;
        LOWORD(v34[1]) = 1025;
        LOBYTE(v35) = 0;
        LOBYTE(v36) = 0;
        v37 = 0;
        v38 = 0;
        if (v33)
        {
          *(_DWORD *)v33 += 2;
          *(_DWORD *)v33 += 2;
        }
        v40 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v41 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v42 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v17 = 89;
        goto LABEL_54;
      case 2:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v9 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v10 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v11 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v33;
        v20 = (WTF::WallTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v33;
        WTF::WallTime::now(v20);
        v34[0] = v21;
        LOWORD(v34[1]) = 1025;
        LOBYTE(v35) = 0;
        LOBYTE(v36) = 0;
        v37 = 0;
        v38 = 0;
        if (v33)
        {
          *(_DWORD *)v33 += 2;
          *(_DWORD *)v33 += 2;
        }
        v40 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v41 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v42 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v17 = 66;
        goto LABEL_54;
      case 3:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v9 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v10 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v11 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v33;
        v24 = (WTF::WallTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v33;
        WTF::WallTime::now(v24);
        v34[0] = v25;
        LOWORD(v34[1]) = 1025;
        LOBYTE(v35) = 0;
        LOBYTE(v36) = 0;
        v37 = 0;
        v38 = 0;
        if (v33)
        {
          *(_DWORD *)v33 += 2;
          *(_DWORD *)v33 += 2;
        }
        v40 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v41 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v42 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v17 = 73;
        goto LABEL_54;
      case 4:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v9 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v10 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v11 = v33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v33;
        v18 = (WTF::WallTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v33;
        WTF::WallTime::now(v18);
        v34[0] = v19;
        LOWORD(v34[1]) = 1025;
        LOBYTE(v35) = 0;
        LOBYTE(v36) = 0;
        v37 = 0;
        v38 = 0;
        if (v33)
        {
          *(_DWORD *)v33 += 2;
          *(_DWORD *)v33 += 2;
        }
        v40 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v41 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v42 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v17 = 85;
LABEL_54:
        v44 = v17;
        v45 = 0;
        v46 = 0;
        v47 = *(_OWORD *)v34;
        v48 = v35;
        v49 = v36;
        v50 = v37;
        v51 = v38;
        v43 = v14;
        v39 = 0;
        v26 = (WTF::StringImpl *)v52;
        *(_QWORD *)&v52 = v9;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v15);
          else
            *(_DWORD *)v26 -= 2;
        }
        v40 = 0;
        v27 = (WTF::StringImpl *)*((_QWORD *)&v52 + 1);
        *((_QWORD *)&v52 + 1) = v10;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v15);
          else
            *(_DWORD *)v27 -= 2;
        }
        v41 = 0;
        v28 = v53[0];
        v53[0] = v11;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v15);
          else
            *(_DWORD *)v28 -= 2;
        }
        v42 = 0;
        v29 = v53[1];
        v53[1] = v12;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v15);
          else
            *(_DWORD *)v29 -= 2;
        }
        v43 = 0;
        v30 = v53[2];
        v53[2] = v14;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v15);
          else
            *(_DWORD *)v30 -= 2;
        }
        LODWORD(v53[3]) = v44;
        WORD2(v53[3]) = v45;
        v46 = 0;
        v31 = cf;
        cf = 0;
        if (v31)
          CFRelease(v31);
        WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v34, v15);
        if (!v14)
          goto LABEL_79;
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v32);
          if (!v12)
            goto LABEL_84;
        }
        else
        {
          *(_DWORD *)v14 -= 2;
LABEL_79:
          if (!v12)
          {
LABEL_84:
            if (!v11)
              goto LABEL_89;
            goto LABEL_87;
          }
        }
        if (*(_DWORD *)v12 != 2)
        {
          *(_DWORD *)v12 -= 2;
          goto LABEL_84;
        }
        WTF::StringImpl::destroy(v12, v32);
        if (!v11)
          goto LABEL_89;
LABEL_87:
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v32);
          if (!v10)
            goto LABEL_94;
          goto LABEL_92;
        }
        *(_DWORD *)v11 -= 2;
LABEL_89:
        if (!v10)
        {
LABEL_94:
          if (!v9)
            goto LABEL_100;
          goto LABEL_97;
        }
LABEL_92:
        if (*(_DWORD *)v10 != 2)
        {
          *(_DWORD *)v10 -= 2;
          goto LABEL_94;
        }
        WTF::StringImpl::destroy(v10, v32);
        if (!v9)
          goto LABEL_100;
LABEL_97:
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v32);
        else
          *(_DWORD *)v9 -= 2;
LABEL_100:
        BYTE4(v53[3]) = 1;
        WebCore::PlatformKeyboardEvent::setCurrentModifierState();
        WebCore::EventHandler::keyEvent();
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
        break;
      default:
        goto LABEL_100;
    }
  }
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)&v47, v4);
}

void sub_1973BCC68(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;

  v31 = v26;
  if (v31)
  {
    v33 = v31;
    v34 = *(_DWORD *)v31 - 2;
    if (v34)
      *(_DWORD *)v33 = v34;
    else
      WTF::StringImpl::destroy(v33, a2);
  }
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (v29)
  {
    if (*(_DWORD *)v29 != 2)
    {
      *(_DWORD *)v29 -= 2;
      if (!v28)
        goto LABEL_18;
      goto LABEL_15;
    }
    WTF::StringImpl::destroy(v29, a2);
  }
  if (!v28)
    goto LABEL_18;
LABEL_15:
  if (*(_DWORD *)v28 == 2)
    WTF::StringImpl::destroy(v28, a2);
  else
    *(_DWORD *)v28 -= 2;
LABEL_18:
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 8));
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)&a25, v35);
  _Unwind_Resume(a1);
}

void WebKit::WebPage::handleSyntheticClick(uint64_t a1, uint64_t a2, float *a3, unsigned __int8 a4, int a5)
{
  WebCore::Document *v10;
  const Node *v11;
  uint64_t v12;
  uint64_t v13;
  int isConsideredVisible;
  uint64_t v15;
  BOOL v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  IPC::Encoder *v26;
  WTF *v27;
  void *v28;
  char isARIAControl;
  WebCore::Quirks *v30;
  WebCore::AccessibilityObject *Attribute;
  const WTF::String *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  IPC::Encoder *v38;
  IPC::Encoder *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;

  v10 = *(WebCore::Document **)(*(_QWORD *)(a2 + 40) + 8);
  *(_BYTE *)(a1 + 1259) = 1;
  if ((*(_QWORD *)(*((_QWORD *)v10 + 85) + 704) & 0x200000000000) != 0)
  {
    v12 = WebCore::Document::contentChangeObserver(v10);
    v13 = *(_QWORD *)(v12 + 128);
    if (v13 && *(_QWORD *)(v13 + 8) == a2)
      isConsideredVisible = WebCore::ContentChangeObserver::isConsideredVisible((WebCore::ContentChangeObserver *)a2, v11);
    else
      isConsideredVisible = 0;
    WebCore::ContentChangeObserver::MouseMovedScope::MouseMovedScope((WebCore::ContentChangeObserver::MouseMovedScope *)&v39, (Document *)v10);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
    if (v15)
      v16 = *(_BYTE *)(v15 + 144) == 0;
    else
      v16 = 0;
    if (v16)
    {
      v17 = (unsigned int *)(v15 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      WebKit::dispatchSyntheticMouseMove((WTF::WallTime *)v15);
      v19 = *(_QWORD *)(v15 + 296);
      if (v19)
        *(_DWORD *)(v19 + 24) += 2;
      WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v19);
      if (v19)
      {
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v19);
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
      }
      v20 = *(unsigned __int8 *)(a1 + 186);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v17);
      WebCore::ContentChangeObserver::MouseMovedScope::~MouseMovedScope((WebCore::ContentChangeObserver::MouseMovedScope *)&v39);
      if (!v20)
      {
        if (isConsideredVisible)
        {
          v22 = *(_QWORD *)(a1 + 32);
          v21 = a1 + 32;
          v23 = (*(uint64_t (**)(uint64_t))(v22 + 56))(v21);
          v24 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v24 = 1898;
          *(_QWORD *)(v24 + 8) = v23;
          *(_QWORD *)(v24 + 528) = v24 + 16;
          *(_QWORD *)(v24 + 536) = v24 + 16;
          *(_OWORD *)(v24 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v24 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v24);
          v39 = (IPC::Encoder *)v24;
          (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v21 + 32))(v21, &v39, 0);
          v26 = v39;
          v39 = 0;
          if (v26)
          {
            IPC::Encoder::~Encoder(v26, v25);
            WTF::fastFree(v27, v28);
          }
        }
        else
        {
          if ((*(_WORD *)(a2 + 28) & 8) != 0)
          {
            *(_DWORD *)(a2 + 24) += 2;
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 848))(a2) & 1) != 0)
            {
              isARIAControl = 1;
            }
            else
            {
              v30 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 688);
              if (!v30)
                v30 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(a2 + 40)
                                                                                               + 8));
              if ((WebCore::Quirks::shouldIgnoreAriaForFastPathContentObservationCheck(v30) & 1) != 0)
              {
                isARIAControl = 0;
              }
              else
              {
                Attribute = (WebCore::AccessibilityObject *)WebCore::Element::getAttribute((WebCore::Element *)a2, MEMORY[0x1E0DD60F8]);
                WebCore::AccessibilityObject::ariaRoleToWebCoreRole(Attribute, v32);
                isARIAControl = WebCore::AccessibilityObject::isARIAControl();
              }
            }
            if (*(_DWORD *)(a2 + 24) == 2)
            {
              if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)a2);
            }
            else
            {
              *(_DWORD *)(a2 + 24) -= 2;
            }
          }
          else
          {
            isARIAControl = 0;
          }
          v33 = *(_DWORD *)(v12 + 120);
          if (v33 == 2 || (isARIAControl & 1) != 0)
          {
            MEMORY[0x19AEB0E28](v12);
            CFRetain(*(CFTypeRef *)(a1 + 8));
            *(_DWORD *)(a2 + 24) += 2;
            v39 = (IPC::Encoder *)a1;
            v40 = a2;
            *(_QWORD *)&v41 = *(_QWORD *)a3;
            BYTE8(v41) = a4;
            HIDWORD(v41) = v33;
            v42 = a5;
            v35 = WTF::fastMalloc((WTF *)0x30);
            *(_QWORD *)v35 = off_1E34D8D88;
            *(_QWORD *)(v35 + 8) = v39;
            v36 = v40;
            v39 = 0;
            v40 = 0;
            *(_QWORD *)(v35 + 16) = v36;
            LODWORD(v36) = v42;
            *(_OWORD *)(v35 + 24) = v41;
            *(_DWORD *)(v35 + 40) = v36;
            v43 = v35;
            WTF::callOnMainRunLoop();
            v37 = v43;
            v43 = 0;
            if (v37)
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v40);
            v38 = v39;
            v39 = 0;
            if (v38)
              CFRelease(*((CFTypeRef *)v38 + 1));
          }
          else
          {
            WebCore::ContentChangeObserver::startContentObservationForDuration();
            *(_DWORD *)(a2 + 24) += 2;
            v34 = *(_QWORD *)(a1 + 1504);
            *(_QWORD *)(a1 + 1504) = a2;
            if (v34)
            {
              if (*(_DWORD *)(v34 + 24) == 2)
              {
                if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v34);
              }
              else
              {
                *(_DWORD *)(v34 + 24) -= 2;
              }
            }
            *(_QWORD *)(a1 + 1512) = *(_QWORD *)a3;
            *(_BYTE *)(a1 + 1536) = a4;
            *(_DWORD *)(a1 + 1540) = a5;
          }
        }
      }
    }
    else
    {
      WebCore::ContentChangeObserver::MouseMovedScope::~MouseMovedScope((WebCore::ContentChangeObserver::MouseMovedScope *)&v39);
    }
  }
  else
  {
    WebKit::WebPage::completeSyntheticClick(a1, a2, a3, a4, 1, a5);
  }
}

void sub_1973BD1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t *v14;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v14);
  if (a9)
    CFRelease(a9[1]);
  _Unwind_Resume(a1);
}

WebCore::Page *WebKit::WebPage::completeSyntheticClick(uint64_t a1, uint64_t a2, float *a3, unsigned int a4, char a5, int a6)
{
  char v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  WebCore::Page *result;
  uint64_t v15;
  BOOL v16;
  WTF::WallTime *v21;
  IPC::Encoder *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  IPC::Encoder *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore *v30;
  IPC::Encoder *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  BOOL v35;
  int v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WebCore *v39;
  IPC::Encoder *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  BOOL v43;
  int v44;
  WTF::StringImpl *v45;
  IPC::Encoder *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  IPC::Encoder *v51;
  uint64_t v52;
  _QWORD *v53;
  WebCore::Quirks *v54;
  WTF::WallTime *v55;
  uint64_t v56;
  WebCore *v57;
  IPC::Encoder *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  IPC::Encoder *v72;
  WTF *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  IPC::Encoder *v78;
  WTF *v79;
  void *v80;
  uint64_t v81;
  WebCore::Node *v82;
  char v84;
  uint64_t v85;
  WebCore::Node *v86;
  char v87;
  uint64_t v88[3];
  int v89;
  IPC::Encoder *v90;
  char v91;
  char v92;
  char v93;
  char v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(a1 + 1258);
  *(_BYTE *)(a1 + 1258) = 1;
  v8 = roundf(*a3);
  v9 = 0x80000000;
  if (v8 > -2147500000.0)
    v9 = (int)v8;
  if (v8 < 2147500000.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFFLL;
  v11 = roundf(a3[1]);
  v12 = 0x8000000000000000;
  if (v11 > -2147500000.0)
    v12 = (unint64_t)(int)v11 << 32;
  if (v11 < 2147500000.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF00000000;
  result = *(WebCore::Page **)(a1 + 48);
  v15 = *((_QWORD *)result + 20);
  if (v15)
    v16 = *(_BYTE *)(v15 + 144) == 0;
  else
    v16 = 0;
  if (v16)
  {
    v87 = v7;
    v21 = (WTF::WallTime *)WebCore::Page::checkedFocusController(result);
    v22 = v90;
    v23 = *((_QWORD *)v90 + 2);
    if (!v23 || (v24 = *(_QWORD *)(v23 + 8)) == 0 || *(_BYTE *)(v24 + 144))
    {
      v90 = 0;
      if (*(_DWORD *)v22)
      {
        v24 = 0;
        v86 = 0;
        --*(_DWORD *)v22;
        v85 = 0x100000001;
        goto LABEL_28;
      }
LABEL_110:
      __break(0xC471u);
      JUMPOUT(0x1973BD9E0);
    }
    v25 = (unsigned int *)(v24 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    v27 = v90;
    v90 = 0;
    if (v27)
    {
      if (!*(_DWORD *)v27)
        goto LABEL_110;
      --*(_DWORD *)v27;
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v24 + 296) + 1248);
    if (v28)
    {
      v85 = 0;
      v86 = *(WebCore::Node **)(*(_QWORD *)(v24 + 296) + 1248);
      *(_DWORD *)(v28 + 24) += 2;
    }
    else
    {
      v86 = 0;
      v85 = 1;
    }
LABEL_28:
    v29 = v13 | v10;
    v84 = *(_BYTE *)(a1 + 912);
    *(_BYTE *)(a1 + 912) = 1;
    *(_QWORD *)(a1 + 1248) = v13 | v10;
    v30 = (WebCore *)WTF::WallTime::now(v21);
    v90 = v31;
    v91 = 6;
    v32 = a4 & 0x12 | (8 * (a4 & 1)) | (a4 >> 2) & 1 | (a4 >> 1) & 4;
    v92 = a4 & 0x12 | (8 * (a4 & 1)) | ((a4 & 4) != 0) | (a4 >> 1) & 4;
    v93 = 0;
    v94 = 0;
    LOBYTE(v95) = 0;
    HIBYTE(v95) = a5;
    v96 = v29;
    v97 = v29;
    v99 = 0;
    v98 = 0;
    v100 = 0x3FF0000000000000;
    v101 = a6;
    v33 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v30);
    if (v33)
      *(_DWORD *)v33 += 2;
    v102 = v33;
    v103 = 1;
    v104 = 0;
    WebCore::EventHandler::handleMousePressEvent();
    if (v89)
      v35 = 1;
    else
      v35 = LOBYTE(v88[0]) == 0;
    v36 = !v35;
    v37 = v102;
    v102 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        v37 = (WTF::StringImpl *)WTF::StringImpl::destroy(v37, v34);
      else
        *(_DWORD *)v37 -= 2;
    }
    if (*(_BYTE *)(a1 + 186))
      goto LABEL_102;
    v38 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = 0;
    if (v38)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      v37 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
    else if ((v36 & 1) == 0)
    {
      v37 = (WTF::StringImpl *)WebKit::WebPage::clearSelectionAfterTapIfNeeded((WebCore::Page **)a1);
    }
    v39 = (WebCore *)WTF::WallTime::now(v37);
    v90 = v40;
    v91 = 7;
    v92 = v32;
    v93 = 0;
    v94 = 0;
    LOBYTE(v95) = 0;
    HIBYTE(v95) = a5;
    v96 = v29;
    v97 = v29;
    v99 = 0;
    v98 = 0;
    v100 = 0x3FF0000000000000;
    v101 = a6;
    v41 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v39);
    if (v41)
      *(_DWORD *)v41 += 2;
    v102 = v41;
    v103 = 1;
    v104 = 0;
    WebCore::EventHandler::handleMouseReleaseEvent();
    if (v89)
      v43 = 1;
    else
      v43 = LOBYTE(v88[0]) == 0;
    v44 = !v43;
    v45 = v102;
    v102 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v42);
      else
        *(_DWORD *)v45 -= 2;
    }
    if (*(_BYTE *)(a1 + 186))
      goto LABEL_102;
    WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
    v46 = v90;
    v47 = *((_QWORD *)v90 + 2);
    if (!v47 || (v48 = *(_QWORD *)(v47 + 8)) == 0 || *(_BYTE *)(v48 + 144))
    {
      v90 = 0;
      if (*(_DWORD *)v46)
      {
        v48 = 0;
        v82 = 0;
        --*(_DWORD *)v46;
        v81 = 0x100000001;
LABEL_70:
        v53 = *(_QWORD **)(*(_QWORD *)(a2 + 40) + 8);
        if ((*(_QWORD *)(v53[85] + 704) & 0x200000000000) != 0)
        {
          v54 = (WebCore::Quirks *)v53[86];
          if (!v54)
            v54 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(a2 + 40) + 8));
          v55 = (WTF::WallTime *)WebCore::Quirks::needsYouTubeMouseOutQuirk(v54);
          if ((_DWORD)v55)
          {
            v56 = v53[66];
            if (v56)
            {
              if (*(_QWORD *)(v56 + 8))
              {
                v57 = (WebCore *)WTF::WallTime::now(v55);
                v90 = v58;
                v91 = 0;
                v92 = v32;
                v93 = 0;
                v94 = 0;
                v95 = 0;
                v96 = v29;
                v97 = v29;
                v99 = 0;
                v98 = 0;
                v100 = 0;
                v101 = a6;
                v59 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v57);
                if (v59)
                  *(_DWORD *)v59 += 2;
                v102 = v59;
                v103 = 0;
                v104 = 0;
                WebCore::EventHandler::dispatchSyntheticMouseOut();
                v61 = v102;
                v102 = 0;
                if (v61)
                {
                  if (*(_DWORD *)v61 == 2)
                    WTF::StringImpl::destroy(v61, v60);
                  else
                    *(_DWORD *)v61 -= 2;
                }
              }
            }
          }
        }
        if (!*(_BYTE *)(a1 + 186))
        {
          if ((v36 | v44) != 1 || (*(_WORD *)(a2 + 28) & 8) == 0)
          {
            v62 = a1 + 32;
            v63 = roundf(*a3);
            v64 = 0x7FFFFFFFLL;
            v65 = 0x80000000;
            if (v63 > -2147500000.0)
              v65 = (int)v63;
            if (v63 < 2147500000.0)
              v64 = v65;
            v66 = roundf(a3[1]);
            v67 = 0x7FFFFFFF00000000;
            v68 = 0x8000000000000000;
            if (v66 > -2147500000.0)
              v68 = (unint64_t)(int)v66 << 32;
            if (v66 < 2147500000.0)
              v67 = v68;
            v88[0] = v67 | v64;
            v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 56))(a1 + 32);
            v70 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v70 = 1901;
            *(_QWORD *)(v70 + 8) = v69;
            *(_QWORD *)(v70 + 528) = v70 + 16;
            *(_QWORD *)(v70 + 536) = v70 + 16;
            *(_OWORD *)(v70 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v70 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v70);
            v90 = (IPC::Encoder *)v70;
            IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v70, v88);
            (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v62 + 32))(a1 + 32, &v90, 0);
            v72 = v90;
            v90 = 0;
            if (v72)
            {
              IPC::Encoder::~Encoder(v72, v71);
              WTF::fastFree(v73, v74);
            }
          }
          v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
          v76 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v76 = 1873;
          *(_QWORD *)(v76 + 8) = v75;
          *(_QWORD *)(v76 + 528) = v76 + 16;
          *(_QWORD *)(v76 + 536) = v76 + 16;
          *(_OWORD *)(v76 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v76 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v76);
          v90 = (IPC::Encoder *)v76;
          (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32, &v90, 0);
          v78 = v90;
          v90 = 0;
          if (v78)
          {
            IPC::Encoder::~Encoder(v78, v77);
            WTF::fastFree(v79, v80);
          }
        }
        if ((v81 & 1) == 0)
        {
          if (*((_DWORD *)v82 + 6) == 2)
          {
            if ((*((_WORD *)v82 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v82);
          }
          else
          {
            *((_DWORD *)v82 + 6) -= 2;
          }
        }
        if ((v81 & 0x100000000) == 0)
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v48 + 8));
LABEL_102:
        *(_BYTE *)(a1 + 912) = v84;
        v7 = v87;
        result = v86;
        if ((v85 & 1) == 0)
        {
          if (*((_DWORD *)v86 + 6) == 2)
          {
            if ((*((_WORD *)v86 + 15) & 0x400) == 0)
              result = (WebCore::Page *)WebCore::Node::removedLastRef(v86);
          }
          else
          {
            *((_DWORD *)v86 + 6) -= 2;
          }
        }
        if ((v85 & 0x100000000) == 0)
          result = (WebCore::Page *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v24 + 8));
        goto LABEL_107;
      }
LABEL_113:
      __break(0xC471u);
      JUMPOUT(0x1973BDA10);
    }
    v49 = (unsigned int *)(v48 + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
    v51 = v90;
    v90 = 0;
    if (v51)
    {
      if (!*(_DWORD *)v51)
        goto LABEL_113;
      --*(_DWORD *)v51;
    }
    v52 = *(_QWORD *)(*(_QWORD *)(v48 + 296) + 1248);
    if (v52)
    {
      v81 = 0;
      v82 = *(WebCore::Node **)(*(_QWORD *)(v48 + 296) + 1248);
      *(_DWORD *)(v52 + 24) += 2;
    }
    else
    {
      v82 = 0;
      v81 = 1;
    }
    goto LABEL_70;
  }
LABEL_107:
  *(_BYTE *)(a1 + 1258) = v7;
  return result;
}

void sub_1973BDA38(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char a11, WebCore::Node *a12, uint64_t a13, int a14, char a15, char a16, char a17, WebCore::Node *a18, int a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,IPC::Encoder *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,WTF::StringImpl *a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a38)
  {
    if (*(_DWORD *)a38 == 2)
      WTF::StringImpl::destroy(a38, a2);
    else
      *(_DWORD *)a38 -= 2;
  }
  if ((a10 & 1) == 0)
  {
    if (*((_DWORD *)a12 + 6) == 2)
    {
      if ((*((_WORD *)a12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a12);
    }
    else
    {
      *((_DWORD *)a12 + 6) -= 2;
    }
  }
  if ((a11 & 1) == 0)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v39 + 8));
  *(_BYTE *)(v38 + 912) = a15;
  if ((a16 & 1) == 0)
  {
    if (*((_DWORD *)a18 + 6) == 2)
    {
      if ((*((_WORD *)a18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a18);
    }
    else
    {
      *((_DWORD *)a18 + 6) -= 2;
    }
  }
  if ((a17 & 1) == 0)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v40 + 8));
  *(_BYTE *)(v38 + 1258) = a20;
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::dispatchSyntheticMouseMove(WTF::WallTime *a1)
{
  WebCore *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;

  v1 = (WebCore *)WTF::WallTime::now(a1);
  v2 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v1);
  if (v2)
    *(_DWORD *)v2 += 2;
  v5 = v2;
  WebCore::EventHandler::dispatchSyntheticMouseMove();
  result = (uint64_t)v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

void sub_1973BDD08(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22)
{
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  _Unwind_Resume(exception_object);
}

double WebKit::WebPage::didFinishContentChangeObserving(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  double result;
  void *v19;
  uint64_t v20;
  unsigned int *v21;
  __int128 v22;
  int v23;
  uint64_t v24;

  if (*(_QWORD *)(a1 + 1504))
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v4 = *(_QWORD *)(a1 + 1504);
    *(_DWORD *)(v4 + 24) += 2;
    v20 = v4;
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
    v6 = (_QWORD *)(v5 + 16);
    WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)(v5 + 16), v5);
    v7 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFLL);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    v21 = v7;
    LODWORD(v22) = a2;
    *(_QWORD *)((char *)&v22 + 4) = *(_QWORD *)(a1 + 1512);
    BYTE12(v22) = *(_BYTE *)(a1 + 1536);
    v23 = *(_DWORD *)(a1 + 1540);
    v9 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v9 = off_1E34D8DB0;
    *(_QWORD *)(v9 + 8) = a1;
    v10 = v20;
    v20 = 0;
    *(_QWORD *)(v9 + 16) = v10;
    v11 = v21;
    v21 = 0;
    *(_QWORD *)(v9 + 24) = v11;
    LODWORD(v11) = v23;
    *(_OWORD *)(v9 + 32) = v22;
    *(_DWORD *)(v9 + 48) = (_DWORD)v11;
    v24 = v9;
    WTF::callOnMainRunLoop();
    v13 = v24;
    v24 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v21;
    v21 = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v14 + 4), v12);
        WTF::fastFree((WTF *)v14, v19);
      }
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v20);
    v17 = *(_QWORD *)(a1 + 1504);
    *(_QWORD *)(a1 + 1504) = 0;
    if (v17)
    {
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v17);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
    }
    result = 0.0;
    *(_QWORD *)(a1 + 1512) = 0;
    *(_BYTE *)(a1 + 1536) = 0;
    *(_DWORD *)(a1 + 1540) = 0;
  }
  return result;
}

void sub_1973BDEE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;

  v14 = *(_QWORD *)(v12 - 40);
  *(_QWORD *)(v12 - 40) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a11)
  {
    do
    {
      v15 = __ldaxr(a11);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, a11));
    if (!v16)
    {
      atomic_store(1u, a11);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(a11 + 4), a2);
      WTF::fastFree((WTF *)a11, v17);
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v11);
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::clearSelectionAfterTapIfNeeded(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::FocusController *v6;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v6);
  v3 = result;
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    if ((WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(result + 296)
                                                                                               + 3064)
                                                                                   + 56)) & 1) == 0)
      WebKit::WebPage::clearSelection((WebKit::WebPage *)this);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_1973BE028(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebPage::attemptSyntheticClick(_QWORD *a1, const IntPoint *a2, unsigned __int8 a3, unint64_t a4)
{
  WebCore::LocalFrame *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  IPC::Encoder *v28;

  v27 = 0;
  v7 = *(WebCore::LocalFrame **)(a1[6] + 160);
  if (v7)
    v8 = *((_BYTE *)v7 + 144) == 0;
  else
    v8 = 0;
  if (!v8)
  {
    v9 = 0;
LABEL_6:
    v10 = 0;
    goto LABEL_10;
  }
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v28, a2);
  v10 = WebCore::LocalFrame::nodeRespondingToClickEvents(v7, (const WebCore::FloatPoint *)&v28, (WebCore::FloatPoint *)&v27, 0);
  v9 = v10;
  if (v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 528);
    if (!v11)
      goto LABEL_6;
    v10 = *(_QWORD *)(v11 + 8);
  }
LABEL_10:
  v12 = roundf(*(float *)&v27);
  v13 = 0x7FFFFFFFLL;
  v14 = 0x80000000;
  if (v12 > -2147500000.0)
    v14 = (int)v12;
  if (v12 < 2147500000.0)
    v13 = v14;
  v15 = roundf(*((float *)&v27 + 1));
  if (v15 >= 2147500000.0)
  {
    v16 = 0x7FFFFFFF00000000;
  }
  else if (v15 <= -2147500000.0)
  {
    v16 = 0x8000000000000000;
  }
  else
  {
    v16 = (unint64_t)(int)v15 << 32;
  }
  v26 = v16 | v13;
  if (v10
    && (WebKit::WebFrame::fromCoreFrame(v10, &v28),
        v17 = *((_QWORD *)v28 + 12),
        CFRelease(*((CFTypeRef *)v28 + 1)),
        v17 <= a4))
  {
    if (a1[155] == v9)
      WebKit::WebPage::completeSyntheticClick((uint64_t)a1, v9, (float *)&v27, a3, 1, 1);
    else
      WebKit::WebPage::handleSyntheticClick((uint64_t)a1, v9, (float *)&v27, a3, 1);
  }
  else
  {
    v19 = a1[4];
    v18 = a1 + 4;
    v20 = (*(uint64_t (**)(_QWORD *))(v19 + 56))(v18);
    v21 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v21 = 1901;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(v21 + 528) = v21 + 16;
    *(_QWORD *)(v21 + 536) = v21 + 16;
    *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v21 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
    v28 = (IPC::Encoder *)v21;
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v21, &v26);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v18 + 32))(v18, &v28, 0);
    v23 = v28;
    v28 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v22);
      WTF::fastFree(v24, v25);
    }
  }
}

void sub_1973BE264(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPage::handleDoubleTapForDoubleClickAtPoint(uint64_t a1, const IntPoint *a2, unsigned int a3, unint64_t a4)
{
  WebCore::LocalFrame *v4;
  BOOL v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  WTF::WallTime *v13;
  char v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  WebCore *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebCore *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v4 = *(WebCore::LocalFrame **)(*(_QWORD *)(a1 + 48) + 160);
  if (v4)
    v5 = *((_BYTE *)v4 + 144) == 0;
  else
    v5 = 0;
  if (v5)
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v32, a2);
    v9 = WebCore::LocalFrame::nodeRespondingToDoubleClickEvent(v4, (const WebCore::FloatPoint *)&v32, (WebCore::FloatPoint *)&v31);
    if (v9)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 528);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          WebKit::WebFrame::fromCoreFrame(v11, &v32);
          v12 = *(_QWORD *)(v32 + 96);
          CFRelease(*(CFTypeRef *)(v32 + 8));
          if (v12 <= a4)
          {
            v14 = *(_BYTE *)(a1 + 912);
            *(_BYTE *)(a1 + 912) = 1;
            v15 = roundf(*(float *)&v31);
            v16 = 0x80000000;
            if (v15 > -2147500000.0)
              v16 = (int)v15;
            if (v15 < 2147500000.0)
              v17 = v16;
            else
              v17 = 0x7FFFFFFFLL;
            v18 = roundf(*((float *)&v31 + 1));
            v19 = 0x8000000000000000;
            if (v18 > -2147500000.0)
              v19 = (unint64_t)(int)v18 << 32;
            if (v18 < 2147500000.0)
              v20 = v19;
            else
              v20 = 0x7FFFFFFF00000000;
            v21 = (WebCore *)WTF::WallTime::now(v13);
            v32 = v22;
            v33 = 6;
            v34 = a3 & 0x12 | (8 * (a3 & 1)) | ((a3 & 4) != 0) | (a3 >> 1) & 4;
            v35 = 0;
            v36 = 0;
            v37 = 256;
            v38 = v20 | v17;
            v39 = v20 | v17;
            v41 = 0;
            v40 = 0;
            v42 = 0;
            v43 = 1;
            v23 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v21);
            if (v23)
              *(_DWORD *)v23 += 2;
            v44 = v23;
            v45 = 2;
            v46 = 0;
            WebCore::EventHandler::handleMousePressEvent();
            v25 = v44;
            v44 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                v25 = (WTF::StringImpl *)WTF::StringImpl::destroy(v25, v24);
              else
                *(_DWORD *)v25 -= 2;
            }
            if (!*(_BYTE *)(a1 + 186))
            {
              v26 = (WebCore *)WTF::WallTime::now(v25);
              v32 = v27;
              v33 = 7;
              v34 = a3 & 0x12 | (8 * (a3 & 1)) | ((a3 & 4) != 0) | (a3 >> 1) & 4;
              v35 = 0;
              v36 = 0;
              v37 = 256;
              v38 = v20 | v17;
              v39 = v20 | v17;
              v41 = 0;
              v40 = 0;
              v42 = 0;
              v43 = 1;
              v28 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v26);
              if (v28)
                *(_DWORD *)v28 += 2;
              v44 = v28;
              v45 = 2;
              v46 = 0;
              WebCore::EventHandler::handleMouseReleaseEvent();
              v30 = v44;
              v44 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v29);
                else
                  *(_DWORD *)v30 -= 2;
              }
            }
            *(_BYTE *)(a1 + 912) = v14;
          }
        }
      }
    }
  }
}

void sub_1973BE564(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF::StringImpl *a28)
{
  uint64_t v28;
  char v29;

  if (a28)
  {
    if (*(_DWORD *)a28 == 2)
      WTF::StringImpl::destroy(a28, a2);
    else
      *(_DWORD *)a28 -= 2;
  }
  *(_BYTE *)(v28 + 912) = v29;
  _Unwind_Resume(exception_object);
}

void WebKit::WebPage::requestFocusedElementInformation(uint64_t a1, uint64_t *a2)
{
  void *v3;
  void *v4;
  char v5;
  uint64_t v6;
  void *v7;
  __int128 v8[26];
  char v9;
  _BYTE v10[416];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v11 = 0;
  if (!*(_QWORD *)(a1 + 920))
    goto LABEL_11;
  WebKit::WebPage::focusedElementInformation((WebCore::Page **)a1, v8);
  if (v11 == v9)
  {
    if (!v11)
      goto LABEL_11;
    WebKit::FocusedElementInformation::operator=((uint64_t)v10, (uint64_t)v8);
  }
  else
  {
    if (v11)
    {
      WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v10, v3);
      v5 = 0;
    }
    else
    {
      WebKit::FocusedElementInformation::FocusedElementInformation((uint64_t)v10, v8);
      v5 = 1;
    }
    v11 = v5;
  }
  if (v9)
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v8, v4);
LABEL_11:
  v6 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11)
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v10, v7);
}

void sub_1973BE6B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  if (a61)
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a9, a2);
  if (LOBYTE(STACK[0x350]))
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a63, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::focusedElementInformation@<X0>(WebCore::Page **this@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Node *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  double v23;
  const WebCore::Node *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  const WebCore::Node *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WebCore::Element **v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  int v94;
  int v95;
  uint64_t v96;
  WebCore::Element *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  Node *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  BOOL v106;
  const AtomString *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  char v130;
  _QWORD *Attribute;
  _QWORD *v132;
  char v133;
  WTF::StringImpl *v134;
  int v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  int v139;
  WTF::StringImpl *v140;
  BOOL v141;
  uint64_t v142;
  const AtomString *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WebCore::Quirks *v150;
  WebCore::Document *v151;
  WebCore::Quirks *v152;
  void *v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  void *v159;
  WTF *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  _QWORD *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192[2];
  _OWORD v193[3];
  uint64_t v194;
  char v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  WebCore::Page *v202;
  double v203;
  double v204;
  double v205;
  double v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  char shouldAutocorrect;
  BOOL v214;
  char v215;
  char v216;
  char v217;
  char v218;
  char v219;
  char hasAnyPlainText;
  char v221;
  char v222;
  char v223;
  char v224;
  WTF::StringImpl *v225;
  uint64_t v226;
  int v227;
  unsigned int v228;
  int v229;
  WTF::StringImpl *v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  char v233;
  BOOL v234;
  WTF::StringImpl *v235;
  __int128 v236;
  __int128 v237;
  char v238;
  char v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  BOOL v243;
  char isFocusingWithDataListDropdown;
  WTF *v245;
  WTF::StringImpl *v246;
  BOOL v247;
  char v248;
  char v249;
  char isWritingSuggestionsEnabled;
  char v251;
  char IsVisible;
  char shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation;
  char isFocusingWithValidationMessage;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;

  v259 = *MEMORY[0x1E0C80C00];
  WebCore::Page::checkedFocusController(this[6]);
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame((WebCore::FocusController *)v196);
  v5 = (uint64_t)result;
  if (result)
  {
    v6 = result + 2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = (_DWORD *)v196;
  *(_QWORD *)&v196 = 0;
  if (v8)
  {
    if (!*v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1973BEC90);
    }
    --*v8;
  }
  if (result)
  {
    v9 = *((_QWORD *)result + 37);
    if (!v9
      || (*(_DWORD *)(v9 + 24) += 2, (v10 = *(_QWORD *)(v9 + 528)) == 0)
      || (v11 = *(_QWORD *)(v10 + 8)) == 0
      || !*(_QWORD *)(v11 + 288))
    {
      *a2 = 0;
      a2[416] = 0;
      goto LABEL_22;
    }
    v12 = (uint64_t)this[115];
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    WebCore::Page::layoutIfNeeded();
    v13 = *(_QWORD *)(v9 + 528);
    if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) == 0 || !*(_QWORD *)(v14 + 288) || (WebCore::Page *)v12 != this[115])
    {
      *a2 = 0;
      a2[416] = 0;
      if (!v12)
        goto LABEL_23;
      goto LABEL_19;
    }
    WebKit::WebPage::scheduleFullEditorStateUpdate(this);
    WebKit::FocusedElementInformation::FocusedElementInformation((WebKit::FocusedElementInformation *)&v196);
    v258 = *(_OWORD *)(v5 + 32);
    v202 = this[156];
    WebKit::WebPage::contextForElement((WebKit::WebPage *)this, (WebCore::Element *)v12, (uint64_t)v192);
    if (v195)
    {
      v199 = v193[1];
      v200 = v193[2];
      v201 = v194;
      v197 = *(_OWORD *)v192;
      v198 = v193[0];
    }
    v16 = *(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL;
    if (v16)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1973BFC34);
      }
      *(_QWORD *)&v196 = WebKit::WebPage::rootViewInteractionBounds((WebKit::WebPage *)v12, v15);
      *((_QWORD *)&v196 + 1) = v17;
      v206 = *(float *)(WebCore::RenderStyle::fontDescription((WebCore::RenderStyle *)(v16 + 80)) + 156);
      LOBYTE(v191) = 0;
      v192[0] = 0;
      WebCore::RenderObject::localToContainerPoint();
      v219 = 0;
      v214 = (*(_DWORD *)(v16 + 120) & 0x4000000) != 0;
      v18 = WebCore::Page::scrollingCoordinator(this[6]);
      if (v18)
      {
        v256 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 56))(v18, v16);
        v257 = v19;
      }
    }
    else
    {
      v196 = 0uLL;
    }
    v20 = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v12 + 24) = v20 + 2;
    v21 = *(_WORD *)(v12 + 28);
    if ((v21 & 0x10) != 0)
    {
      v249 = MEMORY[0x19AEB6B1C](v12);
      v22 = v12;
    }
    else if (v20)
    {
      v22 = 0;
      *(_DWORD *)(v12 + 24) = v20;
    }
    else
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
      v22 = 0;
    }
    isWritingSuggestionsEnabled = WebCore::Element::isWritingSuggestionsEnabled((WebCore::Element *)v12);
    *(_DWORD *)(v12 + 24) += 2;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 848))(v12) & 1) != 0)
      isFocusingWithValidationMessage = WebCore::ValidatedFormListedElement::isFocusingWithValidationMessage((WebCore::ValidatedFormListedElement *)(v12 + 112));
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    v203 = WebKit::WebPage::minimumPageScaleFactor((WebKit::WebPage *)this);
    v204 = WebKit::WebPage::maximumPageScaleFactor((WebKit::WebPage *)this);
    if ((WebCore::ViewportConfiguration::allowsUserScalingIgnoringAlwaysScalable((WebCore::ViewportConfiguration *)(this + 118)) & 1) != 0)
      v23 = *((double *)this + 123);
    else
      v23 = *((float *)this[6] + 89);
    v205 = v23;
    v217 = WebCore::ViewportConfiguration::allowsUserScaling((WebCore::ViewportConfiguration *)(this + 118));
    v218 = WebCore::ViewportConfiguration::allowsUserScalingIgnoringAlwaysScalable((WebCore::ViewportConfiguration *)(this + 118));
    WebKit::nextAssistableElement((uint64_t)v192, (Node *)v12, *((WebCore::Page **)this[6] + 9), 1);
    v25 = v192[0];
    if (v192[0])
    {
      v208 = WebKit::WebPage::rootViewBounds(v192[0], v24);
      v209 = v26;
      v207 = 1;
      if (*((_DWORD *)v25 + 6) == 2)
      {
        if ((*((_WORD *)v25 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v25);
      }
      else
      {
        *((_DWORD *)v25 + 6) -= 2;
      }
    }
    WebKit::nextAssistableElement((uint64_t)v192, (Node *)v12, *((WebCore::Page **)this[6] + 9), 0);
    v28 = v192[0];
    if (v192[0])
    {
      v211 = WebKit::WebPage::rootViewBounds(v192[0], v27);
      v212 = v29;
      v210 = 1;
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v28);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    v30 = (uint64_t)this[193] + 1;
    this[193] = (WebCore::Page *)v30;
    v255 = v30;
    if ((v21 & 0x10) == 0)
      goto LABEL_87;
    WebCore::HTMLElement::labels((WebCore::HTMLElement *)v22);
    v31 = v191;
    if (!v191)
      goto LABEL_87;
    v32 = 0;
    v192[0] = 0;
    v192[1] = 0;
    while (v32 < (*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 16))(v31))
    {
      v34 = (*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v191 + 24))(v191, v32);
      v35 = v34;
      if (v34 && (*(_WORD *)(v34 + 28) & 8) != 0)
      {
        v36 = *(_DWORD *)(v34 + 24);
        v37 = v36 + 2;
        *(_DWORD *)(v34 + 24) = v36 + 2;
        if ((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1973BF8B8);
          }
          v38 = HIDWORD(v192[1]);
          if (HIDWORD(v192[1]) == LODWORD(v192[1]))
          {
            WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)v192, v34);
            v37 = *(_DWORD *)(v35 + 24);
          }
          else
          {
            v39 = v192[0];
            v37 = v36 + 4;
            *(_DWORD *)(v34 + 24) = v36 + 4;
            *((_QWORD *)v39 + v38) = v34;
            HIDWORD(v192[1]) = v38 + 1;
          }
        }
        if (v37 == 2)
        {
          if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v35);
        }
        else
        {
          *(_DWORD *)(v35 + 24) = v37 - 2;
        }
      }
      v32 = (v32 + 1);
      v31 = v191;
    }
    if (!HIDWORD(v192[1]))
      goto LABEL_83;
    v40 = (WebCore::Element **)v192[0];
    v41 = 8 * HIDWORD(v192[1]);
    while (1)
    {
      WebCore::Element::innerText(*v40);
      v42 = v190;
      if (v190)
        break;
LABEL_74:
      ++v40;
      v41 -= 8;
      if (!v41)
        goto LABEL_83;
    }
    if (!*((_DWORD *)v190 + 1))
    {
      v190 = 0;
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v33);
      else
        *(_DWORD *)v42 -= 2;
      goto LABEL_74;
    }
    v190 = 0;
    v43 = v241;
    v241 = v42;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::destroy(v43, v33);
        v190 = 0;
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
LABEL_83:
    WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v192, v33);
    v44 = v191;
    v191 = 0;
    if (v44)
    {
      if (*((_DWORD *)v44 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v44 + 8))(v44);
      else
        --*((_DWORD *)v44 + 4);
    }
LABEL_87:
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v12 + 704))(v192, v12);
    v46 = v192[0];
    v192[0] = 0;
    v47 = v232;
    v232 = v46;
    if (v47)
    {
      v48 = *(_DWORD *)v47 - 2;
      if (*(_DWORD *)v47 != 2)
        goto LABEL_91;
      WTF::StringImpl::destroy(v47, v45);
      v47 = v192[0];
      v192[0] = 0;
      if (v47)
      {
        v48 = *(_DWORD *)v47 - 2;
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v49);
        else
LABEL_91:
          *(_DWORD *)v47 = v48;
      }
    }
    v50 = *(_QWORD *)(v12 + 104);
    if (v50
      && ((v51 = *(_DWORD *)(v50 + 4), (v51 & 1) != 0)
        ? (v52 = *(_QWORD *)(v50 + 40), LODWORD(v53) = *(_DWORD *)(v50 + 52))
        : (v52 = v50 + 32, LODWORD(v53) = v51 >> 5),
          (_DWORD)v53))
    {
      v54 = *MEMORY[0x1E0DD5E58];
      v53 = v53;
      v55 = (WTF::StringImpl *)(v52 + 8);
      while (1)
      {
        v56 = *((_QWORD *)v55 - 1);
        if (v56 == v54
          || *(_QWORD *)(v56 + 24) == *(_QWORD *)(v54 + 24) && *(_QWORD *)(v56 + 32) == *(_QWORD *)(v54 + 32))
        {
          break;
        }
        v55 = (WTF::StringImpl *)((char *)v55 + 16);
        if (!--v53)
        {
          v55 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v55 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
    }
    WTF::String::operator=(&v242, v55);
    if ((*(_WORD *)(v12 + 28) & 0x10) == 0)
      goto LABEL_454;
    v57 = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24);
    if (v57 == *(_QWORD *)(*MEMORY[0x1E0DD6218] + 24))
    {
      *(_DWORD *)(v12 + 24) += 2;
      v188 = v22;
      if ((byte_1ECE72DE9 & 1) == 0)
      {
        _MergedGlobals_94 = WTF::linkedOnOrAfterSDKWithBehavior();
        byte_1ECE72DE9 = 1;
      }
      v222 = 16;
      v59 = WebCore::HTMLSelectElement::listItems((WebCore::HTMLSelectElement *)v12);
      v60 = *(unsigned int *)(v59 + 12);
      if ((_DWORD)v60)
      {
        v61 = 0;
        v62 = 0;
        v63 = *(_QWORD *)v59;
        v64 = *(_QWORD *)v59 + 8 * v60;
        while (1)
        {
          if (*(_QWORD *)v63)
          {
            v65 = *(_QWORD *)(*(_QWORD *)v63 + 8);
            if (v65)
            {
              v66 = *(_QWORD *)(*(_QWORD *)(v65 + 96) + 24);
              if (v66 == *(_QWORD *)(*MEMORY[0x1E0DD6200] + 24))
              {
                if (!v62)
                  goto LABEL_148;
                if (v62 == *(_QWORD *)(v65 + 32))
                {
                  v68 = v62;
                }
                else
                {
                  if (*(_DWORD *)(v62 + 24) == 2)
                  {
                    if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v62);
                  }
                  else
                  {
                    *(_DWORD *)(v62 + 24) -= 2;
                  }
                  v67 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                  if (*MEMORY[0x1E0CBF738])
                    *(_DWORD *)v67 += 2;
                  ++v61;
                  v192[0] = v67;
                  LOWORD(v192[1]) = 1;
                  BYTE2(v192[1]) = 0;
                  HIDWORD(v192[1]) = v61;
                  if (v228 == v227)
                  {
                    WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v226, (unint64_t)v192);
                  }
                  else
                  {
                    v69 = v226 + 16 * v228;
                    v192[0] = 0;
                    *(_QWORD *)v69 = v67;
                    *(WTF::StringImpl **)(v69 + 8) = v192[1];
                    ++v228;
                  }
                  v70 = v192[0];
                  v192[0] = 0;
                  if (v70)
                  {
                    if (*(_DWORD *)v70 == 2)
                      WTF::StringImpl::destroy(v70, v58);
                    else
                      *(_DWORD *)v70 -= 2;
                  }
LABEL_148:
                  v68 = 0;
                }
                WebCore::HTMLOptionElement::displayLabel((WebCore::HTMLOptionElement *)v65);
                v78 = WebCore::HTMLOptionElement::selected();
                v79 = *(_QWORD *)(v65 + 104);
                if (v79
                  && ((v80 = *(unsigned int *)(v79 + 4), (v80 & 1) != 0)
                    ? (v81 = *(uint64_t **)(v79 + 40), v82 = *(unsigned int *)(v79 + 52))
                    : (v81 = (uint64_t *)(v79 + 32), v82 = v80 >> 5),
                      v82))
                {
                  v83 = *MEMORY[0x1E0DD5DC8];
                  while (1)
                  {
                    v84 = *v81;
                    if (*v81 == v83
                      || *(_QWORD *)(v84 + 24) == *(_QWORD *)(v83 + 24)
                      && *(_QWORD *)(v84 + 32) == *(_QWORD *)(v83 + 32))
                    {
                      break;
                    }
                    v81 += 2;
                    if (!--v82)
                      goto LABEL_159;
                  }
                  v85 = 1;
                }
                else
                {
LABEL_159:
                  v85 = 0;
                }
                v86 = v191;
                if (v191)
                  *(_DWORD *)v191 += 2;
                v192[0] = v86;
                LOBYTE(v192[1]) = 0;
                BYTE1(v192[1]) = v78;
                BYTE2(v192[1]) = v85;
                HIDWORD(v192[1]) = v61;
                v87 = v228;
                if (v228 != v227)
                  goto LABEL_176;
                goto LABEL_164;
              }
              if (v66 == *(_QWORD *)(*MEMORY[0x1E0DD5D68] + 24))
              {
                if (_MergedGlobals_94)
                {
                  *(_DWORD *)(v65 + 24) += 2;
                  v68 = v65;
                  if (v62)
                  {
                    if (*(_DWORD *)(v62 + 24) != 2)
                    {
                      *(_DWORD *)(v62 + 24) -= 2;
                      goto LABEL_126;
                    }
                    v68 = v65;
                    if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v62);
LABEL_126:
                      v68 = v65;
                    }
                  }
                }
                else
                {
                  v68 = v62;
                }
                WebCore::HTMLOptGroupElement::groupLabelText((WebCore::HTMLOptGroupElement *)v65);
                v71 = *(_QWORD *)(v65 + 104);
                if (v71
                  && ((v72 = *(unsigned int *)(v71 + 4), (v72 & 1) != 0)
                    ? (v73 = *(uint64_t **)(v71 + 40), v74 = *(unsigned int *)(v71 + 52))
                    : (v73 = (uint64_t *)(v71 + 32), v74 = v72 >> 5),
                      v74))
                {
                  v75 = *MEMORY[0x1E0DD5DC8];
                  while (1)
                  {
                    v76 = *v73;
                    if (*v73 == v75
                      || *(_QWORD *)(v76 + 24) == *(_QWORD *)(v75 + 24)
                      && *(_QWORD *)(v76 + 32) == *(_QWORD *)(v75 + 32))
                    {
                      break;
                    }
                    v73 += 2;
                    if (!--v74)
                      goto LABEL_146;
                  }
                  v77 = 1;
                }
                else
                {
LABEL_146:
                  v77 = 0;
                }
                v86 = v191;
                if (v191)
                  *(_DWORD *)v191 += 2;
                ++v61;
                v192[0] = v86;
                LOWORD(v192[1]) = 1;
                BYTE2(v192[1]) = v77;
                HIDWORD(v192[1]) = v61;
                v87 = v228;
                if (v228 != v227)
                {
LABEL_176:
                  v89 = v226 + 16 * v87;
                  v192[0] = 0;
                  *(_QWORD *)v89 = v86;
                  *(WTF::StringImpl **)(v89 + 8) = v192[1];
                  ++v228;
                  goto LABEL_177;
                }
LABEL_164:
                WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v226, (unint64_t)v192);
LABEL_177:
                v90 = v192[0];
                v192[0] = 0;
                if (v90)
                {
                  if (*(_DWORD *)v90 == 2)
                    WTF::StringImpl::destroy(v90, v58);
                  else
                    *(_DWORD *)v90 -= 2;
                }
                v91 = v191;
                v191 = 0;
                if (v91)
                {
                  if (*(_DWORD *)v91 == 2)
                    WTF::StringImpl::destroy(v91, v58);
                  else
                    *(_DWORD *)v91 -= 2;
                }
                goto LABEL_185;
              }
              if (_MergedGlobals_94 && v66 == *(_QWORD *)(*MEMORY[0x1E0DD5F48] + 24))
              {
                if (v62)
                {
                  if (*(_DWORD *)(v62 + 24) == 2)
                  {
                    if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v62);
                  }
                  else
                  {
                    *(_DWORD *)(v62 + 24) -= 2;
                  }
                }
                v88 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                  *(_DWORD *)v88 += 2;
                ++v61;
                v192[0] = v88;
                LOWORD(v192[1]) = 1;
                BYTE2(v192[1]) = 0;
                HIDWORD(v192[1]) = v61;
                if (v228 == v227)
                {
                  WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v226, (unint64_t)v192);
                }
                else
                {
                  v92 = v226 + 16 * v228;
                  v192[0] = 0;
                  *(_QWORD *)v92 = v88;
                  *(WTF::StringImpl **)(v92 + 8) = v192[1];
                  ++v228;
                }
                v93 = v192[0];
                v192[0] = 0;
                if (v93)
                {
                  if (*(_DWORD *)v93 == 2)
                    WTF::StringImpl::destroy(v93, v58);
                  else
                    *(_DWORD *)v93 -= 2;
                }
                v68 = 0;
                goto LABEL_185;
              }
            }
          }
          v68 = v62;
LABEL_185:
          v63 += 8;
          v62 = v68;
          if (v63 == v64)
            goto LABEL_209;
        }
      }
      v68 = 0;
LABEL_209:
      v22 = v188;
      v229 = WebCore::HTMLSelectElement::selectedIndex((WebCore::HTMLSelectElement *)v12);
      v215 = *(_BYTE *)(v12 + 297);
      if (v68)
      {
        if (*(_DWORD *)(v68 + 24) == 2)
        {
          if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v68);
        }
        else
        {
          *(_DWORD *)(v68 + 24) -= 2;
        }
      }
      goto LABEL_331;
    }
    if (v57 == *(_QWORD *)(*MEMORY[0x1E0DD5D90] + 24))
    {
      *(_DWORD *)(v12 + 24) += 2;
      v221 = WebCore::HTMLFormControlElement::autocapitalizeType((WebCore::HTMLFormControlElement *)v12);
      shouldAutocorrect = WebCore::HTMLFormControlElement::shouldAutocorrect((WebCore::HTMLFormControlElement *)v12);
      v222 = 4;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v12 + 112) + 288))(v12 + 112))
        v94 = (*(unsigned __int8 *)(v12 + 160) >> 5) & 1;
      else
        LOBYTE(v94) = 0;
      v216 = v94;
      WebCore::HTMLTextAreaElement::value((WebCore::HTMLTextAreaElement *)v12);
      v102 = v192[0];
      v192[0] = 0;
      v103 = v230;
      v230 = v102;
      if (!v103)
        goto LABEL_225;
      v104 = *(_DWORD *)v103 - 2;
      if (*(_DWORD *)v103 == 2)
      {
        WTF::StringImpl::destroy(v103, v101);
        v103 = v192[0];
        v192[0] = 0;
        if (!v103)
        {
LABEL_224:
          v102 = v230;
LABEL_225:
          if (v102)
            v106 = *((_DWORD *)v102 + 1) == 0;
          else
            v106 = 1;
          hasAnyPlainText = !v106;
          MEMORY[0x19AEB8520](v192, v12);
          v238 = WebCore::toAutofillFieldName((WebCore *)v192, v107);
          v109 = v192[1];
          v192[1] = 0;
          if (v109)
          {
            if (*(_DWORD *)v109 == 2)
              WTF::StringImpl::destroy(v109, v108);
            else
              *(_DWORD *)v109 -= 2;
          }
          v110 = v192[0];
          v192[0] = 0;
          if (v110)
          {
            if (*(_DWORD *)v110 == 2)
              WTF::StringImpl::destroy(v110, v108);
            else
              *(_DWORD *)v110 -= 2;
          }
          MEMORY[0x19AEB8520](v192, v12);
          v239 = v193[0];
          v112 = v192[1];
          v192[1] = 0;
          if (v112)
          {
            if (*(_DWORD *)v112 == 2)
              WTF::StringImpl::destroy(v112, v111);
            else
              *(_DWORD *)v112 -= 2;
          }
          v113 = v192[0];
          v192[0] = 0;
          if (v113)
          {
            if (*(_DWORD *)v113 == 2)
              WTF::StringImpl::destroy(v113, v111);
            else
              *(_DWORD *)v113 -= 2;
          }
          v114 = *(_QWORD *)(v12 + 104);
          if (v114
            && ((v115 = *(_DWORD *)(v114 + 4), (v115 & 1) != 0)
              ? (v116 = *(_QWORD *)(v114 + 40), LODWORD(v117) = *(_DWORD *)(v114 + 52))
              : (v116 = v114 + 32, LODWORD(v117) = v115 >> 5),
                (_DWORD)v117))
          {
            v118 = *MEMORY[0x1E0DD5EB0];
            v117 = v117;
            v119 = (WTF::StringImpl *)(v116 + 8);
            while (1)
            {
              v120 = *((_QWORD *)v119 - 1);
              if (v120 == v118
                || *(_QWORD *)(v120 + 24) == *(_QWORD *)(v118 + 24) && *(_QWORD *)(v120 + 32) == *(_QWORD *)(v118 + 32))
              {
                break;
              }
              v119 = (WTF::StringImpl *)((char *)v119 + 16);
              if (!--v117)
              {
                v119 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
          }
          else
          {
            v119 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
          }
          WTF::String::operator=(&v240, v119);
          v223 = WebCore::HTMLElement::canonicalInputMode((WebCore::HTMLElement *)v12);
          v224 = WebCore::HTMLElement::canonicalEnterKeyHint((WebCore::HTMLElement *)v12);
          goto LABEL_331;
        }
        v104 = *(_DWORD *)v103 - 2;
        if (*(_DWORD *)v103 == 2)
        {
          WTF::StringImpl::destroy(v103, v105);
          goto LABEL_224;
        }
      }
      *(_DWORD *)v103 = v104;
      goto LABEL_224;
    }
    if (v57 != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
LABEL_454:
      if (WebCore::Node::computeEditability())
      {
        v222 = 1;
        if (v12 && (*(_WORD *)(v12 + 28) & 0x10) != 0)
        {
          *(_DWORD *)(v12 + 24) += 2;
          shouldAutocorrect = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 1232))(v12);
          v221 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 1224))(v12);
          v223 = WebCore::HTMLElement::canonicalInputMode((WebCore::HTMLElement *)v12);
          v224 = WebCore::HTMLElement::canonicalEnterKeyHint((WebCore::HTMLElement *)v12);
          v248 = 1;
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v12);
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
        }
        else
        {
          shouldAutocorrect = 1;
          v221 = 0;
        }
        v216 = 0;
        WebCore::makeRangeSelectingNodeContents((WebCore *)v12, v100);
        hasAnyPlainText = WebCore::hasAnyPlainText();
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v193);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v192);
      }
      goto LABEL_333;
    }
    v95 = *(_DWORD *)(v12 + 24) + 2;
    *(_DWORD *)(v12 + 24) = v95;
    v96 = *(_QWORD *)(v12 + 120);
    if (v96)
    {
      v97 = *(WebCore::Element **)(v96 + 8);
      if (v97)
      {
        WebCore::Element::getURLAttribute(v97, MEMORY[0x1E0DD5C38]);
        WTF::String::operator=(&v225, (WTF::StringImpl *)v192);
        v99 = v192[0];
        v192[0] = 0;
        if (v99)
        {
          if (*(_DWORD *)v99 == 2)
            WTF::StringImpl::destroy(v99, v98);
          else
            *(_DWORD *)v99 -= 2;
        }
        v95 = *(_DWORD *)(v12 + 24);
      }
    }
    *(_DWORD *)(v12 + 24) = v95 + 2;
    v189 = v12;
    WebCore::AutofillElements::computeAutofillElements();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v189);
    if (BYTE8(v193[0]))
    {
      v233 = 1;
      v234 = (WTF::StringImpl *)v12 == v192[0];
    }
    std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)v192);
    v121 = WebCore::Document::urlForBindings(*(WebCore::Document **)(*(_QWORD *)(v12 + 40) + 8));
    WTF::String::operator=(&v235, (WTF::StringImpl *)v121);
    v122 = *(_OWORD *)(v121 + 8);
    v237 = *(_OWORD *)(v121 + 24);
    v236 = v122;
    v221 = WebCore::HTMLFormControlElement::autocapitalizeType((WebCore::HTMLFormControlElement *)v12);
    shouldAutocorrect = WebCore::HTMLFormControlElement::shouldAutocorrect((WebCore::HTMLFormControlElement *)v12);
    v123 = *(_QWORD *)(v12 + 104);
    if (v123
      && ((v124 = *(_DWORD *)(v123 + 4), (v124 & 1) != 0)
        ? (v125 = *(_QWORD *)(v123 + 40), LODWORD(v126) = *(_DWORD *)(v123 + 52))
        : (v125 = v123 + 32, LODWORD(v126) = v124 >> 5),
          (_DWORD)v126))
    {
      v127 = *MEMORY[0x1E0DD5EB0];
      v126 = v126;
      v128 = (WTF::StringImpl *)(v125 + 8);
      while (1)
      {
        v129 = *((_QWORD *)v128 - 1);
        if (v129 == v127
          || *(_QWORD *)(v129 + 24) == *(_QWORD *)(v127 + 24) && *(_QWORD *)(v129 + 32) == *(_QWORD *)(v127 + 32))
        {
          break;
        }
        v128 = (WTF::StringImpl *)((char *)v128 + 16);
        if (!--v126)
        {
          v128 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v128 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
    }
    WTF::String::operator=(&v240, v128);
    v247 = (*(_WORD *)(v12 + 232) & 0x4000) != 0;
    if (WebCore::HTMLInputElement::isPasswordField((WebCore::HTMLInputElement *)v12))
    {
      v130 = 3;
LABEL_299:
      v222 = v130;
      goto LABEL_300;
    }
    if (WebCore::HTMLInputElement::isSearchField((WebCore::HTMLInputElement *)v12))
    {
LABEL_278:
      v130 = 5;
      goto LABEL_299;
    }
    if (WebCore::HTMLInputElement::isEmailField((WebCore::HTMLInputElement *)v12))
    {
      v130 = 6;
      goto LABEL_299;
    }
    if (WebCore::HTMLInputElement::isTelephoneField((WebCore::HTMLInputElement *)v12))
    {
      v130 = 8;
      goto LABEL_299;
    }
    if (WebCore::HTMLInputElement::isNumberField((WebCore::HTMLInputElement *)v12))
    {
      Attribute = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v12, MEMORY[0x1E0DD5D70]);
      if ((MEMORY[0x19AEABBCC](*Attribute, "\\d*", 3) & 1) != 0
        || (v132 = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v12, MEMORY[0x1E0DD5D70]),
            MEMORY[0x19AEABBCC](*v132, "[0-9]*", 6)))
      {
        v130 = 10;
      }
      else
      {
        v130 = 9;
      }
      goto LABEL_299;
    }
    if (WebCore::HTMLInputElement::isDateTimeLocalField((WebCore::HTMLInputElement *)v12))
    {
      v130 = 12;
      goto LABEL_299;
    }
    if (WebCore::HTMLInputElement::isDateField((WebCore::HTMLInputElement *)v12))
    {
      v130 = 11;
      goto LABEL_299;
    }
    if (WebCore::HTMLInputElement::isTimeField((WebCore::HTMLInputElement *)v12))
    {
      v133 = 15;
    }
    else if (WebCore::HTMLInputElement::isWeekField((WebCore::HTMLInputElement *)v12))
    {
      v133 = 14;
    }
    else if (WebCore::HTMLInputElement::isMonthField((WebCore::HTMLInputElement *)v12))
    {
      v133 = 13;
    }
    else
    {
      if (!WebCore::HTMLInputElement::isURLField((WebCore::HTMLInputElement *)v12))
      {
        if (WebCore::HTMLInputElement::isText((WebCore::HTMLInputElement *)v12))
        {
          v154 = *(_QWORD *)(v12 + 104);
          if (v154
            && ((v155 = *(_DWORD *)(v154 + 4), (v155 & 1) != 0)
              ? (v156 = *(_QWORD *)(v154 + 40), LODWORD(v157) = *(_DWORD *)(v154 + 52))
              : (v156 = v154 + 32, LODWORD(v157) = v155 >> 5),
                (_DWORD)v157))
          {
            v162 = *MEMORY[0x1E0DD5D70];
            v157 = v157;
            v163 = (_QWORD *)(v156 + 8);
            while (1)
            {
              v164 = *(v163 - 1);
              if (v164 == v162
                || *(_QWORD *)(v164 + 24) == *(_QWORD *)(v162 + 24) && *(_QWORD *)(v164 + 32) == *(_QWORD *)(v162 + 32))
              {
                break;
              }
              v163 += 2;
              if (!--v157)
              {
                v163 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
          }
          else
          {
            v163 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          }
          if ((MEMORY[0x19AEABBCC](*v163, "\\d*", 3) & 1) != 0
            || MEMORY[0x19AEABBCC](*v163, "[0-9]*", 6))
          {
            v133 = 10;
            goto LABEL_393;
          }
          v222 = 2;
          if (v225 && *((_DWORD *)v225 + 1))
          {
            v165 = *(_QWORD *)(v12 + 104);
            if (v165 && (v166 = *(_DWORD *)(v165 + 4), (v166 & 2) != 0))
            {
              if ((v166 & 1) != 0)
              {
                v168 = *(uint64_t **)(v165 + 40);
                LODWORD(v169) = *(_DWORD *)(v165 + 52);
              }
              else
              {
                v168 = (uint64_t *)(v165 + 32);
                LODWORD(v169) = v166 >> 5;
              }
              if ((_DWORD)v169)
              {
                v170 = *MEMORY[0x1E0DD60E0];
                v169 = v169;
                while (1)
                {
                  v171 = *v168;
                  if (*v168 == v170
                    || *(_QWORD *)(v171 + 24) == *(_QWORD *)(v170 + 24)
                    && *(_QWORD *)(v171 + 32) == *(_QWORD *)(v170 + 32))
                  {
                    break;
                  }
                  v168 += 2;
                  if (!--v169)
                    goto LABEL_408;
                }
              }
              else
              {
LABEL_408:
                v168 = 0;
              }
              v167 = v168 + 1;
            }
            else
            {
              v167 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            }
            if (*v167)
            {
              if (WTF::StringImpl::find() != -1)
                goto LABEL_278;
              v165 = *(_QWORD *)(v12 + 104);
            }
            if (v165 && *(_QWORD *)(v165 + 24))
            {
              v172 = *(_DWORD *)(v165 + 4);
              if ((v172 & 1) != 0)
              {
                v173 = *(uint64_t **)(v165 + 40);
                LODWORD(v174) = *(_DWORD *)(v165 + 52);
              }
              else
              {
                v173 = (uint64_t *)(v165 + 32);
                LODWORD(v174) = v172 >> 5;
              }
              if ((_DWORD)v174)
              {
                v176 = *MEMORY[0x1E0DD5FA8];
                v174 = v174;
                while (1)
                {
                  v177 = *v173;
                  if (*v173 == v176
                    || *(_QWORD *)(v177 + 24) == *(_QWORD *)(v176 + 24)
                    && *(_QWORD *)(v177 + 32) == *(_QWORD *)(v176 + 32))
                  {
                    break;
                  }
                  v173 += 2;
                  if (!--v174)
                    goto LABEL_425;
                }
              }
              else
              {
LABEL_425:
                v173 = 0;
              }
              v175 = v173 + 1;
            }
            else
            {
              v175 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            }
            if (*v175)
            {
              if (WTF::StringImpl::find() != -1)
                goto LABEL_278;
              v165 = *(_QWORD *)(v12 + 104);
            }
            if (v165
              && ((v178 = *(_DWORD *)(v165 + 4), (v178 & 1) != 0)
                ? (v179 = *(_QWORD *)(v165 + 40), v180 = *(_DWORD *)(v165 + 52))
                : (v179 = v165 + 32, v180 = v178 >> 5),
                  v180))
            {
              v181 = *MEMORY[0x1E0DD6230];
              v182 = v180;
              v183 = (_QWORD *)(v179 + 8);
              while (1)
              {
                v184 = *(v183 - 1);
                if (v184 == v181
                  || *(_QWORD *)(v184 + 24) == *(_QWORD *)(v181 + 24)
                  && *(_QWORD *)(v184 + 32) == *(_QWORD *)(v181 + 32))
                {
                  break;
                }
                v183 += 2;
                if (!--v182)
                {
                  v183 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                  break;
                }
              }
            }
            else
            {
              v183 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            }
            if (*v183 && WTF::StringImpl::find() != -1)
              goto LABEL_278;
          }
        }
        else if (WebCore::HTMLInputElement::isColorControl((WebCore::HTMLInputElement *)v12))
        {
          v222 = 18;
          WebCore::HTMLInputElement::valueAsColor((WebCore::HTMLInputElement *)v12);
          WebCore::Color::operator=();
          if (((unint64_t)v192[0] & 0x8000000000000) != 0)
          {
            v185 = (unsigned int *)((unint64_t)v192[0] & 0xFFFFFFFFFFFFLL);
            do
            {
              v186 = __ldaxr(v185);
              v187 = v186 - 1;
            }
            while (__stlxr(v187, v185));
            if (!v187)
            {
              atomic_store(1u, v185);
              WTF::fastFree((WTF *)v185, v158);
            }
          }
          WebCore::HTMLInputElement::suggestedColors((WebCore::HTMLInputElement *)v12);
          if (HIDWORD(v246))
            WTF::VectorDestructor<true,WebCore::Color>::destruct(v245, (_QWORD *)v245 + HIDWORD(v246));
          v160 = v245;
          if (v245)
          {
            v245 = 0;
            LODWORD(v246) = 0;
            WTF::fastFree(v160, v159);
          }
          v245 = v192[0];
          v161 = v192[1];
          v192[0] = 0;
          v192[1] = 0;
          v246 = v161;
          WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v192, v159);
        }
LABEL_300:
        isFocusingWithDataListDropdown = WebCore::HTMLInputElement::isFocusingWithDataListDropdown((WebCore::HTMLInputElement *)v12);
        MEMORY[0x19AEB79A4](v192, v12);
        v134 = v192[0];
        v243 = v192[0] != 0;
        v192[0] = 0;
        if (v134)
        {
          if (*((_DWORD *)v134 + 6) == 2)
          {
            if ((*((_WORD *)v134 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v134);
          }
          else
          {
            *((_DWORD *)v134 + 6) -= 2;
          }
        }
        v223 = WebCore::HTMLElement::canonicalInputMode((WebCore::HTMLElement *)v12);
        v224 = WebCore::HTMLElement::canonicalEnterKeyHint((WebCore::HTMLElement *)v12);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v12 + 112) + 288))(v12 + 112))
          v135 = (*(unsigned __int8 *)(v12 + 160) >> 5) & 1;
        else
          LOBYTE(v135) = 0;
        v216 = v135;
        WebCore::HTMLInputElement::value((WebCore::HTMLInputElement *)v12);
        v137 = v192[0];
        v192[0] = 0;
        v138 = v230;
        v230 = v137;
        if (!v138)
          goto LABEL_312;
        v139 = *(_DWORD *)v138 - 2;
        if (*(_DWORD *)v138 == 2)
        {
          WTF::StringImpl::destroy(v138, v136);
          v138 = v192[0];
          v192[0] = 0;
          if (!v138)
          {
LABEL_311:
            v137 = v230;
LABEL_312:
            if (v137)
              v141 = *((_DWORD *)v137 + 1) == 0;
            else
              v141 = 1;
            hasAnyPlainText = !v141;
            WebCore::HTMLInputElement::valueAsNumber((WebCore::HTMLInputElement *)v12);
            v231 = v142;
            MEMORY[0x19AEB8520](v192, v12);
            v238 = WebCore::toAutofillFieldName((WebCore *)v192, v143);
            v145 = v192[1];
            v192[1] = 0;
            if (v145)
            {
              if (*(_DWORD *)v145 == 2)
                WTF::StringImpl::destroy(v145, v144);
              else
                *(_DWORD *)v145 -= 2;
            }
            v146 = v192[0];
            v192[0] = 0;
            if (v146)
            {
              if (*(_DWORD *)v146 == 2)
                WTF::StringImpl::destroy(v146, v144);
              else
                *(_DWORD *)v146 -= 2;
            }
            MEMORY[0x19AEB8520](v192, v12);
            v239 = v193[0];
            v148 = v192[1];
            v192[1] = 0;
            if (v148)
            {
              if (*(_DWORD *)v148 == 2)
                WTF::StringImpl::destroy(v148, v147);
              else
                *(_DWORD *)v148 -= 2;
            }
            v149 = v192[0];
            v192[0] = 0;
            if (v149)
            {
              if (*(_DWORD *)v149 == 2)
                WTF::StringImpl::destroy(v149, v147);
              else
                *(_DWORD *)v149 -= 2;
            }
LABEL_331:
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v12);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
LABEL_333:
            v150 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 688);
            if (!v150)
              v150 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v12 + 40)
                                                                                              + 8));
            if (WebCore::Quirks::shouldSuppressAutocorrectionAndAutocapitalizationInHiddenEditableAreas(v150)
              && WebKit::WebPage::isTransparentOrFullyClipped((WebKit::WebPage *)this, (const WebCore::Element *)v12))
            {
              v221 = 1;
              shouldAutocorrect = 0;
            }
            v151 = *(WebCore::Document **)(*(_QWORD *)(v12 + 40) + 8);
            v152 = (WebCore::Quirks *)*((_QWORD *)v151 + 86);
            if (!v152)
              v152 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v151);
            v251 = WebCore::Quirks::shouldAvoidResizingWhenInputViewBoundsChange(v152);
            IsVisible = WebCore::Quirks::shouldAvoidScrollingWhenFocusedContentIsVisible(v152);
            shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation = WebCore::Quirks::shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation(v152);
            WebKit::FocusedElementInformation::FocusedElementInformation((uint64_t)a2, &v196);
            a2[416] = 1;
            if (v22)
            {
              if (*(_DWORD *)(v22 + 24) == 2)
              {
                if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v22);
              }
              else
              {
                *(_DWORD *)(v22 + 24) -= 2;
              }
            }
            WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&v196, v153);
LABEL_19:
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v12);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
LABEL_22:
            if (!v9)
              return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
LABEL_23:
            if (*(_DWORD *)(v9 + 24) == 2)
            {
              if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v9);
            }
            else
            {
              *(_DWORD *)(v9 + 24) -= 2;
            }
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
          }
          v139 = *(_DWORD *)v138 - 2;
          if (*(_DWORD *)v138 == 2)
          {
            WTF::StringImpl::destroy(v138, v140);
            goto LABEL_311;
          }
        }
        *(_DWORD *)v138 = v139;
        goto LABEL_311;
      }
      v133 = 7;
    }
LABEL_393:
    v222 = v133;
    goto LABEL_300;
  }
  *a2 = 0;
  a2[416] = 0;
  return result;
}

void sub_1973C008C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*(_DWORD *)(v29 + 24) == 2)
  {
    if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v29);
  }
  else
  {
    *(_DWORD *)(v29 + 24) -= 2;
  }
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a10);
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a27, a2);
  if (v29)
  {
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v28 + 24) == 2)
  {
    if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v28);
  }
  else
  {
    *(_DWORD *)(v28 + 24) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v27 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebPage::updateFocusedElementInformation(WebKit::WebPage *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;
  _BYTE v12[416];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = v2 & 0xFDFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebKit::WebPage *)((char *)this + 1584));
  if (*((_QWORD *)this + 115))
  {
    WebKit::WebPage::focusedElementInformation((WebCore::Page **)this, v12);
    if (v13)
    {
      v4 = *((_QWORD *)this + 4);
      v3 = (char *)this + 32;
      v5 = (*(uint64_t (**)(char *))(v4 + 56))(v3);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 2081;
      *(_QWORD *)(v6 + 8) = v5;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v11 = (IPC::Encoder *)v6;
      IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::encode((IPC::Encoder *)v6, (uint64_t)v12);
      (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v11, 0);
      v8 = v11;
      v11 = 0;
      if (v8)
      {
        IPC::Encoder::~Encoder(v8, v7);
        WTF::fastFree(v9, v10);
      }
      if (v13)
        WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v12, v7);
    }
  }
}

void sub_1973C0578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::requestDragStart(uint64_t result, const IntPoint *a2, const IntPoint *a3, char a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  BOOL v7;
  char v8;

  v4 = result;
  v5 = *(_BYTE *)(result + 796);
  *(_BYTE *)(result + 796) = a4;
  v6 = *(_QWORD *)(*(_QWORD *)(result + 48) + 160);
  if (v6)
    v7 = *(_BYTE *)(v6 + 144) == 0;
  else
    v7 = 0;
  if (v7)
  {
    v8 = WebCore::EventHandler::tryToBeginDragAtPoint(*(WebCore::EventHandler **)(v6 + 640), a2, a3);
    result = IPC::MessageSender::send<Messages::WebPageProxy::DidHandleDragStartRequest>(v4 + 32, &v8);
  }
  *(_BYTE *)(v4 + 796) = v5;
  return result;
}

void sub_1973C0618(_Unwind_Exception *a1)
{
  uint64_t v1;
  char v2;

  *(_BYTE *)(v1 + 796) = v2;
  _Unwind_Resume(a1);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::DidHandleDragStartRequest>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1897;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  LOBYTE(a2) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = (char)a2;
  v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v12, 0);
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v9, v10);
  }
  return v7;
}

void sub_1973C06EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::requestAdditionalItemsForDragSession(uint64_t a1, const IntPoint *a2, const IntPoint *a3, char a4)
{
  char v7;
  WebCore *v8;
  IPC::Encoder *v9;
  WTF::StringImpl *v10;
  IPC::Encoder *result;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  IPC::Encoder *v19[5];
  __int16 v20;
  char v21;
  char v22;
  __int16 v23;
  IntPoint v24;
  IntPoint v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(a1 + 796);
  *(_BYTE *)(a1 + 796) = a4;
  v8 = (WebCore *)WTF::WallTime::now((WTF::WallTime *)a1);
  v19[4] = v9;
  v20 = 5;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = *a2;
  v25 = *a3;
  v27 = 0;
  v26 = 0;
  v28 = 0;
  v29 = 1;
  v10 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v8);
  if (v10)
    *(_DWORD *)v10 += 2;
  v30 = v10;
  v31 = 0;
  v32 = 0;
  result = (IPC::Encoder *)WebCore::DragController::dragEnded(*(WebCore::DragController **)(*(_QWORD *)(a1 + 48) + 64));
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  if (v13 && !*(_BYTE *)(v13 + 144))
  {
    WebCore::EventHandler::dragSourceEndedAt();
    v14 = WebCore::EventHandler::tryToBeginDragAtPoint(*(WebCore::EventHandler **)(v13 + 640), a2, a3);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
    v16 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v16 = 1896;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)(v16 + 528) = v16 + 16;
    *(_QWORD *)(v16 + 536) = v16 + 16;
    *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v16 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
    v19[0] = (IPC::Encoder *)v16;
    *IPC::Encoder::grow((IPC::Encoder *)v16, 1uLL, 1) = v14;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32, v19, 0);
    result = v19[0];
    v19[0] = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      result = (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
    v10 = v30;
  }
  v30 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      result = (IPC::Encoder *)WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)v10 -= 2;
  }
  *(_BYTE *)(a1 + 796) = v7;
  return result;
}

void sub_1973C08E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, IPC::Encoder *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26)
{
  uint64_t v26;
  char v27;
  WTF *v29;
  void *v30;

  if (a9)
  {
    IPC::Encoder::~Encoder(a9, a2);
    WTF::fastFree(v29, v30);
  }
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  *(_BYTE *)(v26 + 796) = v27;
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebPage::insertDroppedImagePlaceholders(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF *result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const WebCore::Node *v10;
  const WebCore::Node **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  _DWORD *v17;
  NSObject *v18;
  void *v19;
  _BYTE *v20;
  NSObject *v21;
  void *v22;
  WTF *v23;
  _DWORD *v24;
  _DWORD *v25;
  WTF *v26;
  _DWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _BYTE v34[120];
  _BYTE v35[48];
  WTF *v36;
  int v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[120];
  _BYTE v44[120];
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  char v49;
  WTF *v50;
  uint64_t v51;
  _BYTE buf[110];
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  result = (WTF *)WebCore::DragController::insertDroppedImagePlaceholdersAtCaret();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64);
  v50 = 0;
  v51 = 0;
  v8 = *(unsigned int *)(v7 + 124);
  if ((_DWORD)v8)
  {
    if (v8 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v9 = WTF::fastMalloc((WTF *)(16 * v8));
    LODWORD(v51) = v8;
    v50 = (WTF *)v9;
    if (*(_DWORD *)(v7 + 124))
    {
      v8 = 0;
      v11 = (const WebCore::Node **)(v9 + 8);
      do
      {
        *(v11 - 1) = (const WebCore::Node *)WebKit::WebPage::rootViewBounds(*(WebKit::WebPage **)(*(_QWORD *)(v7 + 112) + 8 * v8), v10);
        *v11 = v10;
        ++v8;
        v11 += 2;
      }
      while (v8 < *(unsigned int *)(v7 + 124));
      HIDWORD(v51) = v8;
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64);
  LOBYTE(v45) = 0;
  v49 = 0;
  if (!*(_BYTE *)(v12 + 160))
  {
    v15 = *(_DWORD *)(a2 + 12);
    if ((_DWORD)v8 == v15)
    {
      v18 = qword_1ECE71078;
      if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "Failed to insert dropped image placeholders: no image placeholder range.", buf, 2u);
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v43[0] = 0;
      v43[112] = 0;
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(a3, (uint64_t)buf, (uint64_t)v43);
      v20 = v43;
      goto LABEL_22;
    }
LABEL_19:
    v21 = qword_1ECE71078;
    if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v15;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "Failed to insert dropped image placeholders: placeholder rect count (%tu) does not match image size count (%tu).", buf, 0x16u);
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v44[0] = 0;
    v44[112] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(a3, (uint64_t)buf, (uint64_t)v44);
    v20 = v44;
LABEL_22:
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v19);
    v23 = *(WTF **)buf;
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)buf = 0;
      *(_DWORD *)&buf[8] = 0;
      WTF::fastFree(v23, v22);
    }
    goto LABEL_38;
  }
  v13 = *(_QWORD *)(v12 + 128);
  *(_DWORD *)(v13 + 24) += 2;
  v45 = v13;
  v46 = *(_DWORD *)(v12 + 136);
  v14 = *(_QWORD *)(v12 + 144);
  *(_DWORD *)(v14 + 24) += 2;
  v47 = v14;
  v48 = *(_DWORD *)(v12 + 152);
  v49 = 1;
  v15 = *(_DWORD *)(a2 + 12);
  if ((_DWORD)v8 != v15)
    goto LABEL_19;
  buf[0] = 0;
  v53 = 0;
  WebCore::TextIndicator::createWithRange();
  if (v42)
  {
    WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v35, (const TextIndicatorData *)(v42 + 8));
    std::optional<WebCore::TextIndicatorData>::operator=[abi:sn180100]<WebCore::TextIndicatorData,void>((uint64_t)buf, (uint64_t)v35);
    if ((v41 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v16);
      }
    }
    v17 = v40;
    v40 = 0;
    if (v17)
    {
      if (v17[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
      else
        --v17[2];
    }
    v24 = v39;
    v39 = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    v25 = v38;
    v38 = 0;
    if (v25)
    {
      if (v25[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
      else
        --v25[2];
    }
    v26 = v36;
    if (v36)
    {
      v36 = 0;
      v37 = 0;
      WTF::fastFree(v26, v16);
    }
    v27 = (_DWORD *)v42;
    v42 = 0;
    if (v27)
      WTF::RefCounted<WebCore::TextIndicator>::deref(v27);
  }
  std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v34, (uint64_t)buf);
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(a3, (uint64_t)&v50, (uint64_t)v34);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v34, v28);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v29);
LABEL_38:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45);
  result = v50;
  if (v50)
  {
    v50 = 0;
    LODWORD(v51) = 0;
    return (WTF *)WTF::fastFree(result, v30);
  }
  return result;
}

void sub_1973C0D18(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,int a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  void *v57;
  WTF *v58;
  void *v59;
  WTF *v60;

  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a40, a2);
  v58 = *(WTF **)(v55 - 192);
  if (v58)
  {
    *(_QWORD *)(v55 - 192) = 0;
    *(_DWORD *)(v55 - 184) = 0;
    WTF::fastFree(v58, v57);
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v55 - 248);
  v60 = *(WTF **)(v55 - 208);
  if (v60)
  {
    *(_QWORD *)(v55 - 208) = 0;
    *(_DWORD *)(v55 - 200) = 0;
    WTF::fastFree(v60, v59);
  }
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebPage::didConcludeDrop(WebKit::WebPage *this)
{
  void *v2;
  uint64_t *result;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100]((uint64_t *)this + 101);
  result = (uint64_t *)*((_QWORD *)this + 100);
  if (result)
  {
    *((_QWORD *)this + 100) = 0;
    return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(result, v2);
  }
  return result;
}

uint64_t WebKit::WebPage::didConcludeEditDrag(WebKit::WebPage *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  WebCore::FocusController *v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  WebCore::FocusController *v33[2];
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;

  v2 = (char *)this + 32;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2091;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v33[0] = (WebCore::FocusController *)v4;
  (*(void (**)(char *, WebCore::FocusController **, _QWORD))(*(_QWORD *)v2 + 32))(v2, v33, 0);
  v6 = v33[0];
  v33[0] = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  WebCore::Page::layoutIfNeeded();
  v10 = (uint64_t *)*((_QWORD *)this + 100);
  if (v10)
  {
    *((_QWORD *)this + 100) = 0;
    WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(v10, v9);
  }
  WebCore::Page::checkedFocusController(*((WebCore::Page **)this + 6));
  result = WebCore::FocusController::focusedOrMainFrame(v33[0]);
  v12 = result;
  if (result)
  {
    v13 = (unsigned int *)(result + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = v33[0];
  v33[0] = 0;
  if (v15)
  {
    if (!*(_DWORD *)v15)
    {
      result = 286;
      __break(0xC471u);
      goto LABEL_24;
    }
    --*(_DWORD *)v15;
  }
  if (!result)
    return result;
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(result + 296)
                                                                                       + 3064)
                                                                           + 56));
  if (v36)
  {
    WebCore::visibleImageElementsInRangeWithNonLoadedImages();
    v17 = v28;
    v28 = 0;
    result = *((_QWORD *)this + 100);
    *((_QWORD *)this + 100) = v17;
    if (result)
    {
      WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable((uint64_t *)result, v16);
      result = (uint64_t)v28;
      if (v28)
        result = WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(v28, v18);
    }
    if (v36)
    {
      v19 = v34;
      v20 = v35;
      v21 = *(_DWORD *)(v34 + 24);
      v37 = v34;
      v38 = v35;
      *(_DWORD *)(v34 + 24) = v21 + 4;
      v39 = v19;
      v40 = v20;
      WebCore::SimpleRange::SimpleRange();
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v39);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v37);
      v28 = v24;
      v29 = v25;
      v22 = v26;
      v24 = 0;
      v26 = 0;
      v30 = v22;
      v31 = v27;
      v32 = 1;
      WebCore::FrameSelection::setSelectedRange();
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v26);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v24);
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)this + 101, (uint64_t)v33);
      goto LABEL_18;
    }
LABEL_24:
    __break(1u);
    return result;
  }
LABEL_18:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v33);
  v23 = *((_QWORD *)this + 100);
  if (!v23 || !*(_DWORD *)(v23 - 12))
    WebKit::WebPage::computeAndSendEditDragSnapshot(this);
  return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v12 + 8));
}

void sub_1973C1130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, IPC::Encoder *a18)
{
  uint64_t v18;

  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::computeAndSendEditDragSnapshot(WebKit::WebPage *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  WTF *v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  IPC::Encoder *v23[6];
  WTF *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  char v35;
  _BYTE v36[120];

  v36[0] = 0;
  v36[112] = 0;
  v2 = (uint64_t *)((char *)this + 808);
  LOBYTE(v31) = 0;
  v35 = 0;
  if (*((_BYTE *)this + 840))
  {
    v3 = *((_QWORD *)this + 101);
    *((_QWORD *)this + 101) = 0;
    v31 = v3;
    v32 = *((_DWORD *)this + 204);
    v4 = *((_QWORD *)this + 103);
    *((_QWORD *)this + 103) = 0;
    v33 = v4;
    v34 = *((_DWORD *)this + 208);
    v35 = 1;
    std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100](v2);
    WebCore::TextIndicator::createWithRange();
    if (v30)
    {
      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v23, (const TextIndicatorData *)(v30 + 8));
      std::optional<WebCore::TextIndicatorData>::operator=[abi:sn180100]<WebCore::TextIndicatorData,void>((uint64_t)v36, (uint64_t)v23);
      if ((v29 & 0x8000000000000) != 0)
      {
        v20 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          WTF::fastFree((WTF *)v20, v5);
        }
      }
      v6 = v28;
      v28 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      v7 = v27;
      v27 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      v8 = v26;
      v26 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      v9 = v24;
      if (v24)
      {
        v24 = 0;
        v25 = 0;
        WTF::fastFree(v9, v5);
      }
      v10 = (_DWORD *)v30;
      v30 = 0;
      if (v10)
        WTF::RefCounted<WebCore::TextIndicator>::deref(v10);
    }
  }
  else
  {
    std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100](v2);
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31);
  v12 = *((_QWORD *)this + 4);
  v11 = (char *)this + 32;
  v13 = (*(uint64_t (**)(char *))(v12 + 56))(v11);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 1906;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v23[0] = (IPC::Encoder *)v14;
  IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData> const&>((IPC::Encoder *)v14, (uint64_t)v36);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v11 + 32))(v11, v23, 0);
  v16 = v23[0];
  v23[0] = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v15);
    WTF::fastFree(v17, v18);
  }
  return std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v15);
}

void sub_1973C1420(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,_DWORD *a24,char a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;

  if ((a22 & 0x8000000000000) != 0)
  {
    v27 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, a2);
    }
  }
  if (a21)
  {
    if (a21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a21 + 8))(a21);
    else
      --a21[2];
  }
  if (a20)
  {
    if (a20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a20 + 8))(a20);
    else
      --a20[2];
  }
  if (a19)
  {
    if (a19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a19 + 8))(a19);
    else
      --a19[2];
  }
  if (a16)
    WTF::fastFree(a16, a2);
  if (a24)
    WTF::RefCounted<WebCore::TextIndicator>::deref(a24);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a25);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v25 - 152, v30);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::sendTapHighlightForNodeIfNecessary(WTF::StringImpl *result, uint64_t a2, WebCore::Element *this)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  FloatQuad *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  WebCore::ScrollView *v19;
  FloatQuad *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  __int16 v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  FloatQuad *v53;
  uint64_t v54;
  WTF::StringImpl *v55[2];
  __int128 v56;

  if (!this)
    return result;
  v3 = result;
  v4 = *((_QWORD *)result + 6);
  v5 = *(_QWORD *)(v4 + 160);
  if (!v5 || *(_BYTE *)(v5 + 144) != 0)
    return result;
  if (*(_BYTE *)(v4 + 656))
  {
    result = (WTF::StringImpl *)WebCore::Document::body(*(WebCore::Document **)(v5 + 296));
    if (result == this)
      return result;
  }
  if ((*((_WORD *)this + 14) & 8) != 0)
  {
    *((_DWORD *)this + 6) += 2;
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 280) + 16);
    WebCore::Element::absoluteLinkURL(this);
    WTF::URL::host((WTF::URL *)v55);
    if ((v10 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    (*(void (**)(uint64_t, FloatQuad **))(*(_QWORD *)v9 + 1104))(v9, &v53);
    v12 = v53;
    v53 = 0;
    if (v12)
    {
      if (LODWORD(v12->m_p1.m_x) == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v12, v11);
      else
        LODWORD(v12->m_p1.m_x) -= 2;
    }
    result = v55[0];
    v55[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef(this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  if ((*((_WORD *)this + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD5FE0] + 24))
  {
    v13 = this;
LABEL_29:
    v53 = 0;
    v54 = 0;
    v14 = *((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL;
    if (v14)
    {
      (*(void (**)(uint64_t, FloatQuad **, _QWORD))(*(_QWORD *)v14 + 392))(*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL, &v53, 0);
      v15 = v14;
      if ((*(_BYTE *)(v14 + 45) & 2) != 0)
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8);
      WebCore::StyleColor::StyleColor();
      WebCore::RenderStyle::colorResolvingCurrentColor((WebCore::RenderStyle *)(v15 + 80), (const WebCore::StyleColor *)v55);
      WebCore::StyleColor::~StyleColor((WebCore::StyleColor *)v55);
      v18 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v13 + 5) + 8) + 528);
      if (v18)
      {
        v18 = (_QWORD *)v18[1];
        if (*(_QWORD **)(v18[16] + 8) != v18)
        {
          if (HIDWORD(v54))
          {
            v19 = (WebCore::ScrollView *)v18[36];
            v20 = v53;
            v21 = 32 * HIDWORD(v54);
            do
            {
              WebCore::ScrollView::contentsToRootView(v19, v20);
              v22 = v56;
              *(_OWORD *)&v20->m_p1.m_x = *(_OWORD *)v55;
              *(_OWORD *)&v20->m_p3.m_x = v22;
              ++v20;
              v21 -= 32;
            }
            while (v21);
          }
        }
      }
      v46 = a2;
      v47 = v3;
      if ((*(_BYTE *)(v14 + 45) & 4) != 0)
      {
        ++*(_DWORD *)(v14 + 16);
        WebCore::RenderBox::borderRadii((WebCore::RenderBox *)v14);
        LODWORD(v18) = *(_DWORD *)(v14 + 16);
        if (!(_DWORD)v18)
        {
          __break(0xC471u);
          JUMPOUT(0x1973C1BB0);
        }
        v23 = (int)v55[0];
        v24 = HIDWORD(v55[0]);
        v25 = (int)v55[1];
        v26 = HIDWORD(v55[1]);
        v28 = v56;
        v27 = DWORD1(v56);
        v30 = DWORD2(v56);
        v29 = HIDWORD(v56);
        *(_DWORD *)(v14 + 16) = (_DWORD)v18 - 1;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        v26 = 0;
        v25 = 0;
        v24 = 0;
        v23 = 0;
      }
      v45 = *((_WORD *)v13 + 14);
      if ((v45 & 8) != 0)
      {
        *((_DWORD *)v13 + 6) += 2;
        if (((*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 848))(v13) & 1) != 0
          || (*((_WORD *)v13 + 14) & 0x10) != 0
          && ((v31 = *(_QWORD *)(*((_QWORD *)v13 + 12) + 24), v31 == *(_QWORD *)(*MEMORY[0x1E0DD5EE8] + 24))
           || v31 == *(_QWORD *)(*MEMORY[0x1E0DD60C0] + 24)
           || v31 == *(_QWORD *)(*MEMORY[0x1E0DD5CB8] + 24)))
        {
          LODWORD(v18) = 1;
        }
        else
        {
          LODWORD(v18) = *((_WORD *)v13 + 15) & 1;
        }
        v44 = (char)v18;
      }
      else
      {
        v44 = 0;
      }
      v32 = (((int)(v23 - (v18 & 0xFFFFFFC0) + 32) >> 6) + v23 / 64);
      v33 = v32 | ((unint64_t)(((int)(v24 - (v16 & 0xFFFFFFC0) + 32) >> 6) + v24 / 64) << 32);
      v34 = (((int)(v25 - (v32 & 0xFFFFFFC0) + 32) >> 6) + v25 / 64);
      v50 = v34 | ((unint64_t)(((int)(v26 - (v16 & 0xFFFFFFC0) + 32) >> 6) + v26 / 64) << 32);
      v51 = v33;
      v49 = (((int)(v28 - (v34 & 0xFFFFFFC0) + 32) >> 6) + v28 / 64) | ((unint64_t)(((int)(v27 - (v16 & 0xFFFFFFC0) + 32) >> 6) + v27 / 64) << 32);
      v48 = (((int)(v30 - (v34 & 0xFFFFFFC0) + 32) >> 6) + v30 / 64) | ((unint64_t)(((int)(v29 - (v17 & 0xFFFFFFC0) + 32) >> 6) + v29 / 64) << 32);
      v35 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v47 + 4) + 56))((uint64_t)v47 + 32);
      v36 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v36 = 1895;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(v36 + 528) = v36 + 16;
      *(_QWORD *)(v36 + 536) = v36 + 16;
      *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v36 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
      v55[0] = (WTF::StringImpl *)v36;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v36, 8uLL, 8) = v46;
      IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v36, (WebCore::Color *)&v52);
      IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v36, (uint64_t)&v53);
      IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v36, &v51);
      IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v36, &v50);
      IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v36, &v49);
      IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v36, &v48);
      *IPC::Encoder::grow((IPC::Encoder *)v36, 1uLL, 1) = v44;
      (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD))(*((_QWORD *)v47 + 4) + 32))((uint64_t)v47 + 32, v55, 0);
      v38 = v55[0];
      v55[0] = 0;
      if (v38)
      {
        IPC::Encoder::~Encoder(v38, v37);
        WTF::fastFree(v39, v40);
      }
      if ((v45 & 8) != 0)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
      if ((v52 & 0x8000000000000) != 0)
      {
        v41 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFLL);
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          atomic_store(1u, v41);
          WTF::fastFree((WTF *)v41, v37);
        }
      }
      result = (WTF::StringImpl *)v53;
      if (v53)
      {
        v53 = 0;
        LODWORD(v54) = 0;
        return (WTF::StringImpl *)WTF::fastFree(result, v37);
      }
    }
    return result;
  }
  *((_DWORD *)this + 6) += 2;
  result = (WTF::StringImpl *)WebCore::HTMLAreaElement::imageElement(this);
  v13 = v55[0];
  v55[0] = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v13);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef(this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
    goto LABEL_29;
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

void sub_1973C1BD8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, int a20,WTF::StringImpl *a21)
{
  uint64_t v21;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  if (*(_DWORD *)(v21 + 24) == 2)
  {
    if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v21);
  }
  else
  {
    *(_DWORD *)(v21 + 24) -= 2;
  }
  if ((a18 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  if (a19)
    WTF::fastFree(a19, a2);
  _Unwind_Resume(exception_object);
}

WebCore::Page *WebKit::WebPage::handleTwoFingerTapAtPoint(WTF::StringImpl *a1, const IntPoint *a2, unsigned __int8 a3, uint64_t a4)
{
  WebCore::LocalFrame *v5;
  BOOL v6;
  WebCore::Element *v9;
  uint64_t v10;
  WebCore::Page *result;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  IPC::Encoder *v27;

  v26 = 0;
  v5 = *(WebCore::LocalFrame **)(*((_QWORD *)a1 + 6) + 160);
  if (v5)
    v6 = *((_BYTE *)v5 + 144) == 0;
  else
    v6 = 0;
  if (v6
    && (WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v27, a2),
        (v9 = (WebCore::Element *)WebCore::LocalFrame::nodeRespondingToClickEvents(v5, (const WebCore::FloatPoint *)&v27, (WebCore::FloatPoint *)&v26, 0)) != 0)&& (v10 = (uint64_t)v9, (*((_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFLL) != 0))
  {
    WebKit::WebPage::sendTapHighlightForNodeIfNecessary(a1, a4, v9);
    return WebKit::WebPage::completeSyntheticClick((uint64_t)a1, v10, (float *)&v26, a3, 2, 1);
  }
  else
  {
    v12 = roundf(*(float *)&v26);
    v13 = 0x7FFFFFFFLL;
    v14 = 0x80000000;
    if (v12 > -2147500000.0)
      v14 = (int)v12;
    if (v12 < 2147500000.0)
      v13 = v14;
    v15 = roundf(*((float *)&v26 + 1));
    v16 = 0x7FFFFFFF00000000;
    v17 = 0x8000000000000000;
    if (v15 > -2147500000.0)
      v17 = (unint64_t)(int)v15 << 32;
    if (v15 < 2147500000.0)
      v16 = v17;
    v25 = v16 | v13;
    v19 = *((_QWORD *)a1 + 4);
    v18 = (_QWORD *)((char *)a1 + 32);
    v20 = (*(uint64_t (**)(_QWORD *))(v19 + 56))(v18);
    v21 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v21 = 1901;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(v21 + 528) = v21 + 16;
    *(_QWORD *)(v21 + 536) = v21 + 16;
    *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v21 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
    v27 = (IPC::Encoder *)v21;
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v21, &v25);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v18 + 32))(v18, &v27, 0);
    result = v27;
    v27 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v22);
      return (WebCore::Page *)WTF::fastFree(v23, v24);
    }
  }
  return result;
}

void sub_1973C1EF4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::potentialTapAtPosition(uint64_t a1, uint64_t a2, WebCore::FloatPoint *a3, int a4)
{
  WebCore::LocalFrame *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;
  WebKit::WebPage **v14;
  uint64_t v15;
  __int16 v16;
  char v17;
  char v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  WTF *v33;
  void *v34;
  double v35;
  double v36;
  BOOL v37;
  float32x4_t v38;
  float32x2_t v39;
  IPC::Encoder *v40;

  v8 = *(WebCore::LocalFrame **)(*(_QWORD *)(a1 + 48) + 160);
  if (v8)
    v9 = *((_BYTE *)v8 + 144) == 0;
  else
    v9 = 0;
  if (v9)
  {
    v10 = WebCore::LocalFrame::nodeRespondingToClickEvents(v8, a3, (WebCore::FloatPoint *)(a1 + 1272), *(WebCore::SecurityOrigin **)(a1 + 1280));
    v11 = v10;
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
    v12 = *(_QWORD *)(a1 + 1264);
    *(_QWORD *)(a1 + 1264) = v11;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
  }
  *(_BYTE *)(a1 + 1257) = *(_BYTE *)(a1 + 1256);
  if (a4)
  {
    v13 = *(WebCore::Node **)(a1 + 1264);
    if (v13)
    {
      v14 = *(WebKit::WebPage ***)(a1 + 272);
      if (v14)
      {
        v39 = *(float32x2_t *)a3;
        v38 = 0uLL;
        v37 = 0;
        v35 = 0.0;
        v36 = 0.0;
        WebKit::ViewGestureGeometryCollector::computeZoomInformationForNode(v14, v13, &v39, &v38, &v37, &v36, &v35);
        v15 = *(_QWORD *)(a1 + 1264);
        v16 = *(_WORD *)(v15 + 28);
        v17 = (v16 & 0xF000) == 0x9000
           || (v16 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD5FF0] + 24);
        v18 = v37;
        v19 = v35;
        v20 = v36;
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
        v22 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v22 = 1951;
        *(_QWORD *)(v22 + 8) = v21;
        *(_QWORD *)(v22 + 528) = v22 + 16;
        *(_QWORD *)(v22 + 536) = v22 + 16;
        *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v22 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
        v40 = (IPC::Encoder *)v22;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v22, 8uLL, 8) = a2;
        IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v22, (int *)&v38);
        *IPC::Encoder::grow((IPC::Encoder *)v22, 1uLL, 1) = v18;
        *(double *)IPC::Encoder::grow((IPC::Encoder *)v22, 8uLL, 8) = v20;
        *(double *)IPC::Encoder::grow((IPC::Encoder *)v22, 8uLL, 8) = v19;
        *IPC::Encoder::grow((IPC::Encoder *)v22, 1uLL, 1) = v17;
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32, &v40, 0);
        v24 = v40;
        v40 = 0;
        if (v24)
        {
          IPC::Encoder::~Encoder(v24, v23);
          WTF::fastFree(v25, v26);
        }
      }
    }
  }
  WebKit::WebPage::sendTapHighlightForNodeIfNecessary((WTF::StringImpl *)a1, a2, *(WebCore::Element **)(a1 + 1264));
  result = *(_QWORD *)(a1 + 1264);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 336))(result);
    if ((result & 1) == 0)
    {
      v29 = *(_QWORD *)(a1 + 32);
      v28 = a1 + 32;
      v30 = (*(uint64_t (**)(uint64_t))(v29 + 56))(v28);
      v31 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v31 = 1924;
      *(_QWORD *)(v31 + 8) = v30;
      *(_QWORD *)(v31 + 528) = v31 + 16;
      *(_QWORD *)(v31 + 536) = v31 + 16;
      *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v31 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
      v38.i64[0] = v31;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 8uLL, 8) = a2;
      (*(void (**)(uint64_t, float32x4_t *, _QWORD))(*(_QWORD *)v28 + 32))(v28, &v38, 0);
      result = v38.i64[0];
      v38.i64[0] = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v32);
        return WTF::fastFree(v33, v34);
      }
    }
  }
  return result;
}

void sub_1973C220C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, IPC::Encoder *a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  WTF *v17;
  void *v18;

  if (a13)
  {
    IPC::Encoder::~Encoder(a13, a2);
    WTF::fastFree(v17, v18);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::commitPotentialTap(WebKit::WebPage *this, WebCore::LocalFrame *a2, unint64_t a3, int a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WebCore::Element *v17;
  uint64_t v18;
  uint64_t v19;
  IPC::Encoder *result;
  WebCore::LocalFrame *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *((_QWORD *)this + 158);
  if (!v5)
    return WebKit::WebPage::commitPotentialTapFailed(this, a2);
  v8 = a2;
  v9 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
  v10 = v9 != 0;
  v11 = *(_DWORD *)(v5 + 24);
  v12 = v11 + 2;
  *(_DWORD *)(v5 + 24) = v11 + 2;
  if ((*(_BYTE *)(v5 + 28) & 8) != 0)
  {
    if (v9)
    {
      v10 = 1;
    }
    else
    {
      v10 = WebCore::Element::renderOrDisplayContentsStyle((WebCore::Element *)v5) != 0;
      v12 = *(_DWORD *)(v5 + 24);
    }
    v13 = v12 - 2;
    if (v13)
    {
      *(_DWORD *)(v5 + 24) = v13;
      goto LABEL_8;
    }
  }
  else if (v11)
  {
    *(_DWORD *)(v5 + 24) = v11;
    goto LABEL_8;
  }
  if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v5);
LABEL_8:
  v14 = *((_QWORD *)this + 158);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 24);
    *(_DWORD *)(v14 + 24) = v15 + 2;
    if ((*(_WORD *)(v14 + 28) & 0x80) != 0)
    {
      if (v10)
      {
        if (v15)
        {
          *(_DWORD *)(v14 + 24) = v15;
        }
        else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v14);
        }
        goto LABEL_31;
      }
      v16 = *(_QWORD *)(v14 + 200);
      if (v16)
        v17 = *(WebCore::Element **)(v16 + 8);
      else
        v17 = 0;
      v18 = WebCore::Element::renderOrDisplayContentsStyle(v17);
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v14);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
      if (v18)
        goto LABEL_31;
LABEL_23:
      v19 = *((_QWORD *)this + 158);
      if (v19
        && (*(_WORD *)(v19 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD5FE0] + 24))
      {
        goto LABEL_31;
      }
      return WebKit::WebPage::commitPotentialTapFailed(this, a2);
    }
    if (v15)
    {
      *(_DWORD *)(v14 + 24) = v15;
    }
    else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
  }
  if (!v10)
    goto LABEL_23;
LABEL_31:
  v31 = 0;
  v21 = *(WebCore::LocalFrame **)(*((_QWORD *)this + 6) + 160);
  if (v21)
    v22 = *((_BYTE *)v21 + 144) == 0;
  else
    v22 = 0;
  if (!v22)
    return WebKit::WebPage::commitPotentialTapFailed(this, a2);
  v23 = WebCore::LocalFrame::nodeRespondingToClickEvents(v21, (WebKit::WebPage *)((char *)this + 1272), (WebCore::FloatPoint *)&v31, *((WebCore::SecurityOrigin **)this + 160));
  if (!v23)
    return WebKit::WebPage::commitPotentialTapFailed(this, a2);
  v24 = v23;
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 8) + 528);
  if (!v25)
    return WebKit::WebPage::commitPotentialTapFailed(this, a2);
  v26 = *(_QWORD *)(v25 + 8);
  if (!v26)
    return WebKit::WebPage::commitPotentialTapFailed(this, a2);
  WebKit::WebFrame::fromCoreFrame(v26, &v30);
  v27 = *(_QWORD *)(v30 + 96);
  CFRelease(*(CFTypeRef *)(v30 + 8));
  if (v27 > a3)
    return WebKit::WebPage::commitPotentialTapFailed(this, a2);
  if (*((_QWORD *)this + 158) == v24)
    WebKit::WebPage::handleSyntheticClick((uint64_t)this, v24, (float *)&v31, v8, a4);
  else
    WebKit::WebPage::commitPotentialTapFailed(this, a2);
  v29 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v29)
  {
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
  *((_QWORD *)this + 159) = 0;
  result = (IPC::Encoder *)*((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (result)
    return (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v28);
  return result;
}

void sub_1973C24D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::commitPotentialTapFailed(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t v3;
  WebCore::ContentChangeObserver *v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *result;
  WTF *v23;
  void *v24;
  uint64_t v25;
  IPC::Encoder *v26;

  v3 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *(WebCore::ContentChangeObserver **)(*((_QWORD *)this + 6) + 160);
  if (v4)
    v5 = *((_BYTE *)v4 + 144) == 0;
  else
    v5 = 0;
  if (v5)
    WebCore::ContentChangeObserver::didCancelPotentialTap(v4, a2);
  WebKit::WebPage::clearSelectionAfterTapIfNeeded((WebCore::Page **)this);
  v6 = (char *)this + 32;
  v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1847;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v26 = (IPC::Encoder *)v8;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*((_QWORD *)this + 4) + 32))((char *)this + 32, &v26, 0);
  v10 = v26;
  v26 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  v13 = roundf(*((float *)this + 318));
  v14 = 0x7FFFFFFFLL;
  v15 = 0x80000000;
  if (v13 > -2147500000.0)
    v15 = (int)v13;
  if (v13 < 2147500000.0)
    v14 = v15;
  v16 = roundf(*((float *)this + 319));
  v17 = 0x7FFFFFFF00000000;
  v18 = 0x8000000000000000;
  if (v16 > -2147500000.0)
    v18 = (unint64_t)(int)v16 << 32;
  if (v16 < 2147500000.0)
    v17 = v18;
  v25 = v17 | v14;
  v19 = (*(uint64_t (**)(char *))(*(_QWORD *)v6 + 56))((char *)this + 32);
  v20 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v20 = 1901;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v20 + 528) = v20 + 16;
  *(_QWORD *)(v20 + 536) = v20 + 16;
  *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v20 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
  v26 = (IPC::Encoder *)v20;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v20, &v25);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v26, 0);
  result = v26;
  v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void sub_1973C26E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  uint64_t v12;
  uint64_t v13;

  v13 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::clearSelection(WebKit::WebPage *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  WebCore::FocusController *v7;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100]((uint64_t *)this + 65);
  WebCore::Page::checkedFocusController(*((WebCore::Page **)this + 6));
  v2 = WebCore::FocusController::focusedOrMainFrame(v7);
  v3 = v2;
  if (v2)
  {
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (!v7)
    goto LABEL_7;
  if (*(_DWORD *)v7)
  {
    --*(_DWORD *)v7;
LABEL_7:
    WebCore::FrameSelection::clear(*(WebCore::FrameSelection **)(*(_QWORD *)(v2 + 296) + 3064));
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  result = 286;
  __break(0xC471u);
  return result;
}

void sub_1973C27D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::cancelPotentialTap(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  WebCore::ContentChangeObserver *v3;
  BOOL v4;

  v3 = *(WebCore::ContentChangeObserver **)(*((_QWORD *)this + 6) + 160);
  if (v3)
    v4 = *((_BYTE *)v3 + 144) == 0;
  else
    v4 = 0;
  if (v4)
    WebCore::ContentChangeObserver::didCancelPotentialTap(v3, a2);
  return WebKit::WebPage::cancelPotentialTapInFrame(this, *((WebKit::WebFrame **)this + 11));
}

WTF::StringImpl *WebKit::WebPage::tapHighlightAtPosition(WTF::StringImpl *a1, uint64_t a2, WebCore::FloatPoint *a3)
{
  WTF::StringImpl *result;
  BOOL v5;
  WebCore::Element *v7;
  uint64_t v8;

  result = *(WTF::StringImpl **)(*((_QWORD *)a1 + 6) + 160);
  if (result)
    v5 = *((_BYTE *)result + 144) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v8 = 0;
    v7 = (WebCore::Element *)WebCore::LocalFrame::nodeRespondingToClickEvents(result, a3, (WebCore::FloatPoint *)&v8, 0);
    return WebKit::WebPage::sendTapHighlightForNodeIfNecessary(a1, a2, v7);
  }
  return result;
}

WebCore *WebKit::WebPage::inspectorNodeSearchMovedToPosition(WebCore *this, const WebCore::FloatPoint *a2)
{
  uint64_t v2;
  BOOL v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v2 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v4 = *(WTF::StringImpl **)WebCore::mousePointerEventType(this);
    if (v4)
      *(_DWORD *)v4 += 2;
    v6 = v4;
    WebCore::EventHandler::mouseMoved();
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    return (WebCore *)WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(v2 + 296));
  }
  return this;
}

void sub_1973C2A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26)
{
  _Unwind_Resume(exception_object);
}

WebCore::LocalFrame *WebKit::WebPage::inspectorNodeSearchEndedAtPosition(WebKit::WebPage *this, const WebCore::FloatPoint *a2)
{
  WebCore::LocalFrame *result;
  BOOL v3;

  result = *(WebCore::LocalFrame **)(*((_QWORD *)this + 6) + 160);
  if (result)
    v3 = *((_BYTE *)result + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    result = (WebCore::LocalFrame *)WebCore::LocalFrame::deepestNodeAtLocation(result, a2);
    if (result)
      return (WebCore::LocalFrame *)WebCore::Node::inspect(result);
  }
  return result;
}

uint64_t WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(WebCore::Element **)(this + 928) == a2)
  {
    v2 = this;
    if (*(_BYTE *)(this + 1256))
    {
      *(_BYTE *)(this + 936) = 1;
      CFRetain(*(CFTypeRef *)(this + 8));
      v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v3 = &off_1E34D8E00;
      v3[1] = v2;
      v3[2] = v2;
      v4 = (uint64_t)v3;
      WTF::callOnMainRunLoop();
      this = v4;
      if (v4)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return this;
}

void sub_1973C2B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::setFocusedElementValue(WebKit::WebPage *this, const ElementContext *a2, const WTF::String *a3)
{
  uint64_t result;
  WebCore::Node *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  WebCore::Node *v9;

  result = WebKit::WebPage::elementForContext((uint64_t)this, a2, &v9);
  v4 = v9;
  if (v9)
  {
    if ((*((_WORD *)v9 + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)v9 + 12) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      v5 = *((_DWORD *)v9 + 6) - 2;
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v9);
        return result;
      }
LABEL_13:
      *((_DWORD *)v4 + 6) = v5;
      return result;
    }
    result = WebCore::HTMLInputElement::setValue();
    if (v8)
    {
      result = (uint64_t)v7;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          result = WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
    v5 = *((_DWORD *)v4 + 6) - 2;
    if (*((_DWORD *)v4 + 6) != 2)
      goto LABEL_13;
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v4);
  }
  return result;
}

void sub_1973C2C40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::setFocusedElementSelectedIndex(WebKit::WebPage *this, const ElementContext *a2)
{
  uint64_t result;
  WebCore::HTMLSelectElement *v3;
  WebCore::HTMLSelectElement *v4;

  result = WebKit::WebPage::elementForContext((uint64_t)this, a2, &v4);
  v3 = v4;
  if (v4)
  {
    if ((*((_WORD *)v4 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)v4 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD6218] + 24))
    {
      result = WebCore::HTMLSelectElement::optionSelectedByUser(v4);
    }
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v3);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  return result;
}

void sub_1973C2D1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::showInspectorHighlight(WebKit::WebPage *this, const WebCore::InspectorOverlayHighlight *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 32;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2058;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_1973C2E04(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::hideInspectorHighlight(WebKit::WebPage *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 32;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1953;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_1973C2ECC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::showInspectorIndication(WebKit::WebPage *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 32;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2059;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_1973C2F94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::hideInspectorIndication(WebKit::WebPage *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 32;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1954;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_1973C305C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::enableInspectorNodeSearch(WebKit::WebPage *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 32;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1931;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_1973C3124(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::disableInspectorNodeSearch(WebKit::WebPage *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 32;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1925;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_1973C31EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::selectWithGesture(WebKit::WebPage *this, int32x2_t *a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  unsigned int *result;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore::FocusController *v16;
  unsigned __int8 v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t (*v20)();
  WebCore::Editor *v21;
  WebCore::Node *v22;
  int v23;
  int v24;
  WebCore::Node **v25;
  WebCore::FocusController *v26;
  uint64_t v27;
  WebCore::Node *v28;
  int v29;
  WebCore::Node *v31;
  WebCore::Node *v32;
  int v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  uint64_t v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  int v39;
  _BOOL4 v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  WebCore::FocusController *v44;
  WebCore::FocusController *v45;
  char v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore::Node *v51[3];
  unsigned __int8 v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  WebCore::Node *v55;
  int v56;
  uint64_t v57;
  int v58;
  char v59;
  WebCore::FocusController *v60;
  int v61;
  WebCore::Node *v62;
  int v63;
  char v64;
  WebCore::Node *v65;
  int v66;
  char v67;
  char v68;

  if ((_DWORD)a4 == 1)
    WebKit::WebPage::setFocusedFrameBeforeSelectingTextAtLocation((uint64_t)this, a2);
  WebCore::Page::checkedFocusController(*((WebCore::Page **)this + 6));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v60);
  v13 = result;
  if (result)
  {
    v14 = result + 2;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = v60;
  v60 = 0;
  if (v16)
  {
    if (!*(_DWORD *)v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1973C39D0);
    }
    --*(_DWORD *)v16;
  }
  if (result)
  {
    WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)&v65, this, (WebCore::ScrollView **)result, (WebCore::IntPoint *)a2, a5);
    if (!v65)
    {
      v18 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, a2, a3, a4, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_52:
      v28 = v65;
      v65 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v13 + 2);
    }
    v17 = 0;
    LOBYTE(v60) = 0;
    v64 = 0;
    switch((int)a3)
    {
      case 0:
        if (WebCore::Node::rootEditableElement(v65))
          goto LABEL_41;
        goto LABEL_46;
      case 1:
        WebCore::wordBoundaryForPositionWithoutCrossingLine();
        v17 = v52;
        WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v55);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)&v60, (uint64_t)&v55);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55);
        v19 = v51[0];
        v51[0] = 0;
        if (v19)
        {
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
        goto LABEL_49;
      case 2:
        if ((a4 - 3) < 2)
          goto LABEL_45;
        if ((_DWORD)a4 != 2)
        {
          if ((_DWORD)a4 != 1)
          {
            v17 = 0;
LABEL_51:
            WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(a6, (uint64_t)a2, a3, a4, v17);
            std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60);
            goto LABEL_52;
          }
          WebCore::wordRangeFromPosition();
          std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)&v60, (uint64_t)&v55);
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55);
          if (!v64)
          {
LABEL_45:
            std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100]((uint64_t *)this + 150);
            goto LABEL_48;
          }
          v26 = v60;
          *((_DWORD *)v60 + 6) += 2;
          v55 = v26;
          v56 = v61;
          v27 = (uint64_t)v62;
          *((_DWORD *)v62 + 6) += 2;
          v57 = v27;
          v58 = v63;
          std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange,void>((uint64_t)this + 1200, (uint64_t *)&v55);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v57);
LABEL_113:
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v55);
          goto LABEL_48;
        }
        if (!*((_BYTE *)this + 1232))
          goto LABEL_48;
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SimpleRange,false> const&>((uint64_t *)&v60, (uint64_t)this + 1200);
        if (!v64)
          goto LABEL_140;
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        v39 = (char)WebCore::documentOrder();
        v41 = v39 != -127 && v39 < 0;
        v42 = v55;
        v55 = 0;
        if (v42)
        {
          if (*((_DWORD *)v42 + 6) == 2)
          {
            if ((*((_WORD *)v42 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v42);
          }
          else
          {
            *((_DWORD *)v42 + 6) -= 2;
          }
        }
        v43 = v51[0];
        v51[0] = 0;
        if (v43)
        {
          if (*((_DWORD *)v43 + 6) == 2)
          {
            if ((*((_WORD *)v43 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v43);
          }
          else
          {
            *((_DWORD *)v43 + 6) -= 2;
          }
        }
        if (!v41)
          goto LABEL_102;
        WebCore::makeBoundaryPoint();
        if ((_BYTE)v57 && v64)
        {
          v44 = v55;
          v55 = 0;
          v45 = v60;
          v60 = v44;
          v51[0] = v45;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v51);
          v61 = v56;
          if ((_BYTE)v57)
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v55);
LABEL_102:
          if (v64)
          {
            WebCore::makeDeprecatedLegacyPosition();
            WebCore::VisiblePosition::VisiblePosition();
            v46 = WebCore::documentOrder();
            v47 = v55;
            v55 = 0;
            if (v47)
            {
              if (*((_DWORD *)v47 + 6) == 2)
              {
                if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v47);
              }
              else
              {
                *((_DWORD *)v47 + 6) -= 2;
              }
            }
            v48 = v51[0];
            v51[0] = 0;
            if (v48)
            {
              if (*((_DWORD *)v48 + 6) == 2)
              {
                if ((*((_WORD *)v48 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v48);
              }
              else
              {
                *((_DWORD *)v48 + 6) -= 2;
              }
            }
            if (v46 < 1)
            {
LABEL_48:
              v17 = 0;
LABEL_49:
              if (v64)
                WebCore::FrameSelection::setSelectedRange();
              goto LABEL_51;
            }
            WebCore::makeBoundaryPoint();
            if ((_BYTE)v57)
            {
              if (v64)
              {
                v49 = v55;
                v55 = 0;
                v50 = v62;
                v62 = v49;
                v51[0] = v50;
                WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v51);
                v63 = v56;
                if (!(_BYTE)v57)
                  goto LABEL_48;
                goto LABEL_113;
              }
            }
          }
        }
LABEL_140:
        __break(1u);
        JUMPOUT(0x1973C3CF8);
      case 4:
        if (WebCore::atBoundaryOfGranularity())
          goto LABEL_41;
LABEL_46:
        WebCore::wordRangeFromPosition();
        goto LABEL_42;
      case 5:
        if (WebCore::atBoundaryOfGranularity())
LABEL_41:
          WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v55);
        else
          WebCore::enclosingTextUnitOfGranularity();
LABEL_42:
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)&v60, (uint64_t)&v55);
        goto LABEL_47;
      case 6:
        WebCore::enclosingTextUnitOfGranularity();
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)&v60, (uint64_t)&v55);
LABEL_47:
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55);
        goto LABEL_48;
      case 7:
        if (*(_QWORD *)(WebCore::Document::editor(*((WebCore::Document **)v13 + 37)) + 32))
          v20 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
        else
          v20 = 0;
        if (!v20)
          goto LABEL_48;
        v21 = (WebCore::Editor *)WebCore::Document::editor(*((WebCore::Document **)v13 + 37));
        WebCore::Editor::compositionRange(v21);
        if (!v59)
          goto LABEL_140;
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        v22 = v51[0];
        v51[0] = 0;
        if (v22)
        {
          if (*((_DWORD *)v22 + 6) == 2)
          {
            if ((*((_WORD *)v22 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v22);
          }
          else
          {
            *((_DWORD *)v22 + 6) -= 2;
          }
        }
        if (!v59)
          goto LABEL_140;
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        v23 = (char)WebCore::documentOrder();
        if (v23 != -127 && v23 < 0)
          goto LABEL_140;
        v24 = (char)WebCore::documentOrder();
        if (v24 == -127 || (v24 & 0x80000000) == 0)
        {
          v25 = v51;
          v29 = (char)WebCore::documentOrder();
          if (v29 >= 0 || v29 == -127)
            v25 = &v65;
        }
        else
        {
          v25 = &v54;
        }
        v31 = *v25;
        if (*v25)
          *((_DWORD *)v31 + 6) += 2;
        v32 = v65;
        v65 = v31;
        if (v32)
        {
          if (*((_DWORD *)v32 + 6) == 2)
          {
            if ((*((_WORD *)v32 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v32);
          }
          else
          {
            *((_DWORD *)v32 + 6) -= 2;
          }
        }
        v33 = *((_DWORD *)v25 + 2);
        v67 = *((_BYTE *)v25 + 12);
        v66 = v33;
        v68 = *((_BYTE *)v25 + 16);
        v34 = v51[0];
        v51[0] = 0;
        if (v34)
        {
          if (*((_DWORD *)v34 + 6) == 2)
          {
            if ((*((_WORD *)v34 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v34);
          }
          else
          {
            *((_DWORD *)v34 + 6) -= 2;
          }
        }
        v35 = v53;
        v53 = 0;
        if (v35)
        {
          if (*((_DWORD *)v35 + 6) == 2)
          {
            if ((*((_WORD *)v35 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v35);
          }
          else
          {
            *((_DWORD *)v35 + 6) -= 2;
          }
        }
        if ((_DWORD)a4 == 1)
        {
          v17 = 4;
        }
        else
        {
          WebCore::VisiblePosition::VisiblePosition();
          v36 = WebCore::distanceBetweenPositions();
          v17 = 4 * (v36 != WebCore::distanceBetweenPositions());
          v37 = v51[0];
          v51[0] = 0;
          if (v37)
          {
            if (*((_DWORD *)v37 + 6) == 2)
            {
              if ((*((_WORD *)v37 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v37);
            }
            else
            {
              *((_DWORD *)v37 + 6) -= 2;
            }
          }
        }
        WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)v51);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)&v60, (uint64_t)v51);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51);
        v38 = v54;
        v54 = 0;
        if (v38)
        {
          if (*((_DWORD *)v38 + 6) == 2)
          {
            if ((*((_WORD *)v38 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v38);
          }
          else
          {
            *((_DWORD *)v38 + 6) -= 2;
          }
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55);
        goto LABEL_49;
      default:
        goto LABEL_51;
    }
  }
  return result;
}

uint64_t WebKit::WebPage::setFocusedFrameBeforeSelectingTextAtLocation(uint64_t this, int32x2_t *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  int8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _DWORD *v12;
  _BYTE v13[72];
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 48) + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v4 = this;
    v5 = (unsigned int *)(v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = (int8x8_t)vcgt_s32(*a2, (int32x2_t)0xFE000000FE000000);
    v12 = (_DWORD *)vorr_s8((int8x8_t)(*(_QWORD *)&v7 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a2, 6uLL)), v7));
    WebCore::EventHandler::hitTestResultAtPoint();
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
    if (v14 && (*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v8 = WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v13);
      v9 = v8;
      if (v8)
      {
        v10 = (unsigned int *)(v8 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      WebCore::Page::checkedFocusController(*(WebCore::Page **)(v4 + 48));
      WebCore::FocusController::setFocusedFrame();
      if (v12)
      {
        if (!*v12)
        {
          this = 286;
          __break(0xC471u);
          return this;
        }
        --*v12;
      }
      if (v9)
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
    }
    return MEMORY[0x19AEADBAC](v13);
  }
  return this;
}

void sub_1973C3E58(_Unwind_Exception *a1, _DWORD *a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (a2)
  {
    if (!*a2)
    {
      __break(0xC471u);
      JUMPOUT(0x1973C3E98);
    }
    --*a2;
  }
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  MEMORY[0x19AEADBAC](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::visiblePositionInFocusedNodeForPoint(WebKit::WebPage *this, const WebCore::LocalFrame *a2, WebCore::ScrollView **a3, WebCore::IntPoint *a4, int a5)
{
  uint64_t v8;
  const WebCore::Element *v9;
  const WebCore::LocalFrame *v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;

  v8 = WebCore::ScrollView::rootViewToContents(a3[36], a4);
  v14 = v8;
  v10 = (const WebCore::LocalFrame *)*((_QWORD *)a2 + 115);
  if (v10)
    v11 = a5 == 0;
  else
    v11 = 1;
  if (!v11)
    v8 = WebKit::constrainPoint((WebKit *)&v14, a3[37], v10, v9);
  v13 = v8;
  return WebCore::LocalFrame::visiblePositionForPoint((WebCore::LocalFrame *)a3, (const WebCore::IntPoint *)&v13);
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition &>(uint64_t a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  result = (uint64_t *)WebCore::makeBoundaryPoint();
  if (v7)
  {
    v3 = v5;
    *(_DWORD *)(v5 + 24) += 2;
    v12 = v3;
    v13 = v6;
    WebCore::SimpleRange::SimpleRange();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v12);
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 8) = v9;
    v4 = v10;
    v8 = 0;
    v10 = 0;
    *(_QWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 32) = 1;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
    result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v8);
    if (v7)
      return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v5);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

void sub_1973C4018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v12 - 32));
  if (a12)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 32))
  {
    *a2 = 0;
    v5 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v4;
    v11 = v5;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v6 = a2[2];
    a2[2] = 0;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    v11 = v7;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    v8 = *((_DWORD *)a2 + 6);
  }
  else
  {
    *a2 = 0;
    *(_QWORD *)a1 = v4;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v9 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(a1 + 16) = v9;
    v8 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_DWORD *)(a1 + 24) = v8;
  return a1;
}

uint64_t WebKit::WebPage::rootViewBounds(WebKit::WebPage *this, const WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::ScrollView *v6;
  int v7;
  WebCore::RenderObject *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(WebCore::ScrollView **)(v3 + 288);
  if (!v6)
  {
    v10 = 0;
    goto LABEL_11;
  }
  v7 = *((_DWORD *)v6 + 2);
  *((_DWORD *)v6 + 2) = v7 + 1;
  v8 = (WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (!v8)
  {
    v10 = 0;
    if (v7)
      goto LABEL_8;
LABEL_10:
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v6 + 8))(v6);
    goto LABEL_11;
  }
  v12[0] = WebCore::RenderObject::absoluteBoundingBoxRect(v8, 1, 0);
  v12[1] = v9;
  v10 = WebCore::ScrollView::contentsToRootView(v6, (const WebCore::IntRect *)v12);
  v7 = *((_DWORD *)v6 + 2) - 1;
  if (*((_DWORD *)v6 + 2) == 1)
    goto LABEL_10;
LABEL_8:
  *((_DWORD *)v6 + 2) = v7;
LABEL_11:
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v10;
}

void sub_1973C41D8(_Unwind_Exception *a1)
{
  unsigned int *v1;
  _DWORD *v2;

  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::absoluteInteractionBounds(WebKit::WebPage *this, const WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const FloatRect *v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  const FloatRect *v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  _DWORD v48[4];

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_DWORD **)(v3 + 288);
  if (v6)
  {
    ++v6[2];
    v7 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v7)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
        if ((*(_QWORD *)(v7 + 96) & 0x1C00) == 0 || (*(_QWORD *)(v7 + 96) & 0xE000) == 0)
        {
          v9 = *(_QWORD *)(v7 + 192);
          if (v9)
          {
            v11 = *(_QWORD *)(v9 + 4);
            v13 = *(_QWORD *)(v9 + 12);
          }
          else
          {
            v11 = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v7);
            v13 = v15;
          }
          v12 = HIDWORD(v11);
          v14 = HIDWORD(v13);
        }
        else
        {
          LODWORD(v11) = (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)v7 + 1016))(v7, a2);
          LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1000))(v7);
          LODWORD(v13) = WebCore::RenderBox::clientWidth((WebCore::RenderBox *)v7);
          LODWORD(v14) = WebCore::RenderBox::clientHeight((WebCore::RenderBox *)v7);
        }
        *(float *)&v38 = (float)(int)v11 * 0.015625;
        *((float *)&v38 + 1) = (float)(int)v12 * 0.015625;
        *(float *)&v39 = (float)((float)(int)v13 * 0.015625) + *(float *)&v38;
        *((float *)&v39 + 1) = *((float *)&v38 + 1);
        v40 = *(float *)&v39;
        v41 = *((float *)&v38 + 1) + (float)((float)(int)v14 * 0.015625);
        v42 = *(float *)&v38;
        v43 = v41;
        WebCore::RenderObject::localToContainerQuad();
        WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)&v44);
        v48[0] = v16;
        v48[1] = v17;
        v48[2] = v18;
        v48[3] = v19;
        v21 = WebCore::enclosingIntRect((WebCore *)v48, v20);
        v22 = *(_DWORD *)(v7 + 16);
        if (!v22)
        {
          __break(0xC471u);
          JUMPOUT(0x1973C4444);
        }
        v10 = v21;
        *(_DWORD *)(v7 + 16) = v22 - 1;
      }
      else
      {
        v24 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
        if ((*(_BYTE *)(v24 + 0x2D) & 2) != 0)
        {
          v25 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
          if (v25)
            v24 = *(_QWORD *)(v25 + 8);
          else
            v24 = 0;
        }
        v38 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL), 1, 0);
        v39 = v26;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v44, (const WebCore::IntRect *)&v38);
        v27 = WebCore::BorderData::borderLeftWidth((WebCore::BorderData *)(*(_QWORD *)(*(_QWORD *)(v24 + 88) + 24)
                                                                         + 104));
        v28 = WebCore::BorderData::borderTopWidth((WebCore::BorderData *)(*(_QWORD *)(*(_QWORD *)(v24 + 88) + 24)
                                                                        + 104));
        v44 = v27 + v44;
        v45 = v28 + v45;
        v29 = v46;
        v30 = WebCore::BorderData::borderLeftWidth((WebCore::BorderData *)(*(_QWORD *)(*(_QWORD *)(v24 + 88) + 24)
                                                                         + 104));
        v31 = *(_QWORD *)(*(_QWORD *)(v24 + 88) + 24);
        v32 = 0.0;
        v33 = 0.0;
        if ((*(_BYTE *)(v31 + 148) & 0xE) != 0)
        {
          v34 = *(_QWORD *)(v31 + 200);
          if (*(_BYTE *)(v34 + 5) && *(_BYTE *)(v34 + 60) == 4)
          {
            if (*(_BYTE *)(v34 + 62))
              v33 = *(float *)(v34 + 56);
            else
              v33 = (float)*(int *)(v34 + 56);
          }
          else
          {
            v33 = *(float *)(v31 + 144);
          }
        }
        v46 = (float)(v29 - v30) - v33;
        if ((*(_BYTE *)(v31 + 196) & 0xE) != 0)
        {
          v35 = *(_QWORD *)(v31 + 200);
          if (*(_BYTE *)(v35 + 5) && *(_BYTE *)(v35 + 68) == 4)
          {
            if (*(_BYTE *)(v35 + 70))
              v32 = *(float *)(v35 + 64);
            else
              v32 = (float)*(int *)(v35 + 64);
          }
          else
          {
            v32 = *(float *)(v31 + 192);
          }
        }
        v36 = v47;
        v47 = (float)(v36 - v32) - WebCore::BorderData::borderTopWidth((WebCore::BorderData *)(v31 + 104));
        v10 = WebCore::enclosingIntRect((WebCore *)&v44, v37);
      }
    }
    else
    {
      v10 = 0;
    }
    if (v6[2] == 1)
      (*(void (**)(_DWORD *, const WebCore::Node *))(*(_QWORD *)v6 + 8))(v6, a2);
    else
      --v6[2];
  }
  else
  {
    v10 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v10;
}

void sub_1973C4584(_Unwind_Exception *a1)
{
  unsigned int *v1;
  _DWORD *v2;

  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::rootViewInteractionBounds(WebKit::WebPage *this, const WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::ScrollView *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(WebCore::ScrollView **)(v3 + 288);
  if (v6)
  {
    ++*((_DWORD *)v6 + 2);
    v10[0] = WebKit::WebPage::absoluteInteractionBounds(this, a2);
    v10[1] = v7;
    v8 = WebCore::ScrollView::contentsToRootView(v6, (const WebCore::IntRect *)v10);
    if (*((_DWORD *)v6 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v6 + 8))(v6);
    else
      --*((_DWORD *)v6 + 2);
  }
  else
  {
    v8 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v8;
}

void sub_1973C46D0(_Unwind_Exception *a1)
{
  unsigned int *v1;
  _DWORD *v2;

  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture(uint64_t a1, int a2, WebCore::IntPoint *a3)
{
  unsigned int *result;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::FocusController *v10;
  const WebCore::Node *v11;
  WebKit::WebPage *v12;
  WebCore::FocusController *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::WallTime *v16;
  WTF::WallTime *v17;
  WebCore *v18;
  WebCore::FocusController *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebCore *v23;
  WebCore::FocusController *v24;
  WTF::StringImpl *v25;
  WebCore *v26;
  WebCore::FocusController *v27;
  WTF::StringImpl *v28;
  unint64_t v29[4];
  WebCore::FocusController *v30;
  __int16 v31;
  char v32;
  char v33;
  __int16 v34;
  WTF::WallTime *v35;
  WTF::WallTime *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v30);
  v7 = result;
  if (result)
  {
    v8 = result + 2;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = v30;
  v30 = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1973C49F8);
    }
    --*(_DWORD *)v10;
  }
  if (result)
  {
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(_QWORD *)(*((_QWORD *)result + 37) + 3064)
                                                                                                + 56)))
    {
      v12 = *(WebKit::WebPage **)(a1 + 920);
      if (v12)
      {
        v13 = (WebCore::FocusController *)WebKit::WebPage::rootViewInteractionBounds(v12, v11);
        if ((int)v14 >= 1 && SHIDWORD(v14) >= 1)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
          if (v15)
          {
            if (!*(_BYTE *)(v15 + 144))
            {
              v30 = v13;
              v29[0] = ((unint64_t)v13 + (v14 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v14 + (_DWORD)v13);
              v16 = (WTF::WallTime *)WebCore::IntPoint::constrainedBetween(a3, (const WebCore::IntPoint *)&v30, (const WebCore::IntPoint *)v29);
              v17 = v16;
              if ((a2 - 2) < 4)
              {
                v18 = (WebCore *)WTF::WallTime::now(v16);
                v30 = v19;
                v31 = 7;
                v32 = 0;
                v33 = 0;
                v34 = 0;
                v35 = v17;
                v36 = v17;
                v38 = 0;
                v37 = 0;
                v39 = 0x3FF0000000000000;
                v40 = 1;
                v20 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v18);
                if (v20)
                  *(_DWORD *)v20 += 2;
                v41 = v20;
                v42 = 1;
                v43 = 0;
                WebCore::EventHandler::handleMouseReleaseEvent();
LABEL_18:
                v22 = v41;
                v41 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2)
                    WTF::StringImpl::destroy(v22, v21);
                  else
                    *(_DWORD *)v22 -= 2;
                }
                return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7 + 2);
              }
              if (!a2)
              {
                v26 = (WebCore *)WTF::WallTime::now(v16);
                v30 = v27;
                v31 = 6;
                v32 = 0;
                v33 = 0;
                v34 = 0;
                v35 = v17;
                v36 = v17;
                v38 = 0;
                v37 = 0;
                v39 = 0x3FF0000000000000;
                v40 = 1;
                v28 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v26);
                if (v28)
                  *(_DWORD *)v28 += 2;
                v41 = v28;
                v42 = 1;
                v43 = 0;
                WebCore::EventHandler::handleMousePressEvent();
                goto LABEL_18;
              }
              if (a2 == 1)
              {
                v23 = (WebCore *)WTF::WallTime::now(v16);
                v30 = v24;
                v31 = 5;
                v32 = 0;
                v33 = 0;
                v34 = 0;
                v35 = v17;
                v36 = v17;
                v38 = 0;
                v37 = 0;
                v39 = 0x3FF0000000000000;
                v40 = 1;
                v25 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v23);
                if (v25)
                  *(_DWORD *)v25 += 2;
                v41 = v25;
                v42 = 0;
                v43 = 0;
                WebCore::EventHandler::dispatchSyntheticMouseMove();
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7 + 2);
  }
  return result;
}

void sub_1973C4A00(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26)
{
  uint64_t v26;

  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v26 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::updateSelectionWithTouches(uint64_t a1, const WebCore::IntPoint *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int *result;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::FocusController *v14;
  WebCore::ScrollView *v15;
  WebCore::Node *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  int v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  uint64_t v23;
  uint64_t (*v24)();
  WebCore::FocusController *v25;
  uint64_t (*v26)();
  WebCore::Node *v27;
  uint64_t v28;
  uint64_t (*v29)();
  WebCore::Node *v30;
  WebCore::Node *v31;
  uint64_t v32;
  int v33;
  WebCore::FocusController *v34;
  char v35;
  int v36;
  char v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  uint64_t v40;
  int v41;
  WebCore::FocusController *v42;
  char v43;
  int v44;
  char v45;
  WebCore::Node *v46;
  uint64_t v47;
  WebCore::FocusController *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore::FocusController *v51;
  int v52;
  uint64_t v53;
  int v54;
  char v55;
  unsigned __int8 v56;
  uint64_t v57[4];
  char v58;
  WebCore::Node *v59;
  int v60;
  char v61;
  char v62;
  uint64_t v63;
  WebCore::Node *v64;
  int v65;
  char v66;
  char v67;
  WebCore::Node *v68;
  int v69;
  char v70;
  char v71;
  WebCore::Node *v72;
  int v73;
  char v74;
  char v75;
  WebCore::FocusController *v76;
  int v77;
  char v78;
  char v79;
  WebCore::FocusController *v80;
  int v81;
  char v82;
  uint64_t v83;
  int v84;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v51);
  v11 = result;
  if (result)
  {
    v12 = result + 2;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = v51;
  v51 = 0;
  if (v14)
  {
    if (!*(_DWORD *)v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1973C5350);
    }
    --*(_DWORD *)v14;
  }
  if (result)
  {
    v15 = (WebCore::ScrollView *)*((_QWORD *)result + 36);
    if (v15)
      ++*((_DWORD *)v15 + 2);
    v63 = WebCore::ScrollView::rootViewToContents(v15, a2);
    if (v15)
    {
      if (*((_DWORD *)v15 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v15 + 8))(v15);
      else
        --*((_DWORD *)v15 + 2);
    }
    WebCore::LocalFrame::visiblePositionForPoint((WebCore::LocalFrame *)v11, (const WebCore::IntPoint *)&v63);
    if (!v59)
    {
      v18 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, const WebCore::IntPoint *, uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, a2, a3, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_115:
      v49 = v59;
      v59 = 0;
      if (v49)
      {
        if (*((_DWORD *)v49 + 6) == 2)
        {
          if ((*((_WORD *)v49 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v49);
        }
        else
        {
          *((_DWORD *)v49 + 6) -= 2;
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11 + 2);
    }
    if (WebKit::WebPage::shouldDispatchSyntheticMouseEventsWhenModifyingSelection((WebKit::WebPage *)a1))
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture(a1, a3, a2);
    LOBYTE(v57[0]) = 0;
    v58 = 0;
    if ((a3 - 3) >= 2)
    {
      if ((_DWORD)a3 == 1)
        goto LABEL_28;
      if ((_DWORD)a3 != 2)
      {
        v19 = 0;
LABEL_114:
        WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(a5, (uint64_t)a2, a3, v19);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57);
        goto LABEL_115;
      }
      if (!WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(_QWORD *)(*((_QWORD *)v11 + 37) + 3064) + 56)))
      {
LABEL_28:
        WebKit::rangeForPointInRootViewCoordinates((WebKit *)&v51, (WebCore::LocalFrame *)v11, a2, a4, *(unsigned __int8 *)(a1 + 200));
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v57, (uint64_t)&v51);
        v20 = v56;
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51);
LABEL_111:
        if (v58)
          WebCore::FrameSelection::setSelectedRange();
        v19 = 2 * (v20 != 0);
        goto LABEL_114;
      }
      WebCore::closestWordBoundaryForPosition();
      WebCore::makeBoundaryPoint();
      if (v79)
      {
        v16 = v76;
        *((_DWORD *)v76 + 6) += 2;
        v68 = v16;
        v69 = v77;
        WebCore::SimpleRange::SimpleRange();
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v68);
        v51 = v80;
        v52 = v81;
        v17 = v83;
        v80 = 0;
        v83 = 0;
        v53 = v17;
        v54 = v84;
        v55 = 1;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v83);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v80);
        if (v79)
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v76);
      }
      else
      {
        LOBYTE(v51) = 0;
        v55 = 0;
      }
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v57, (uint64_t)&v51);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51);
      v38 = v72;
      v72 = 0;
      if (v38)
      {
        if (*((_DWORD *)v38 + 6) == 2)
        {
          if ((*((_WORD *)v38 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v38);
        }
        else
        {
          *((_DWORD *)v38 + 6) -= 2;
        }
      }
LABEL_110:
      v20 = 0;
      goto LABEL_111;
    }
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::VisiblePosition::VisiblePosition();
    v21 = v59;
    *((_DWORD *)v59 + 6) += 2;
    v72 = v21;
    v73 = v60;
    v74 = v61;
    v75 = v62;
    if (WebCore::atBoundaryOfGranularity())
    {
      LOBYTE(v51) = 0;
      v55 = 0;
LABEL_101:
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
      v47 = (uint64_t)v76;
      v76 = 0;
      if (v47)
      {
        if (*(_DWORD *)(v47 + 24) == 2)
        {
          if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v47);
        }
        else
        {
          *(_DWORD *)(v47 + 24) -= 2;
        }
      }
      v48 = v80;
      v80 = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 6) == 2)
        {
          if ((*((_WORD *)v48 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v48);
        }
        else
        {
          *((_DWORD *)v48 + 6) -= 2;
        }
      }
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v57, (uint64_t)&v51);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51);
      goto LABEL_110;
    }
    if (WebCore::atBoundaryOfGranularity())
    {
      if ((_DWORD)a4)
        WebCore::VisiblePosition::previous();
      else
        WebCore::VisiblePosition::next();
      v22 = v68;
      v68 = 0;
      v23 = (uint64_t)v76;
      v76 = v22;
      if (!v23)
        goto LABEL_38;
      if (*(_DWORD *)(v23 + 24) != 2)
      {
        *(_DWORD *)(v23 + 24) -= 2;
LABEL_38:
        v77 = v69;
        v78 = v70;
        v79 = v71;
        goto LABEL_39;
      }
      if ((*(_WORD *)(v23 + 30) & 0x400) != 0)
        goto LABEL_38;
      WebCore::Node::removedLastRef((WebCore::Node *)v23);
      v50 = v68;
      v77 = v69;
      v78 = v70;
      v79 = v71;
      v68 = 0;
      if (v50)
      {
        if (*((_DWORD *)v50 + 6) == 2)
        {
          if ((*((_WORD *)v50 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v50);
        }
        else
        {
          *((_DWORD *)v50 + 6) -= 2;
        }
      }
    }
LABEL_39:
    WebCore::positionOfNextBoundaryOfGranularity();
    if (v68)
      v24 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v24 = 0;
    if (v24 && WebCore::atBoundaryOfGranularity() && !WebCore::operator==((uint64_t)&v72, (uint64_t)&v68))
    {
      v39 = v68;
      if (v68)
        *((_DWORD *)v68 + 6) += 2;
      v40 = (uint64_t)v76;
      v76 = v39;
      if (v40)
      {
        if (*(_DWORD *)(v40 + 24) == 2)
        {
          if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v40);
        }
        else
        {
          *(_DWORD *)(v40 + 24) -= 2;
        }
      }
      v77 = v69;
      v78 = v70;
      v79 = v71;
      v41 = (char)WebCore::documentOrder();
      if (v41 == -127 || (v41 & 0x80000000) == 0)
      {
        v42 = v80;
        v43 = v82;
        v44 = v81;
        v45 = v83;
        v80 = v76;
        v81 = v77;
        v82 = v78;
        LOBYTE(v83) = v79;
        v76 = v42;
        v77 = v44;
        v78 = v43;
        v79 = v45;
      }
    }
    else
    {
      v25 = v76;
      if (v76)
        v26 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v26 = 0;
      if (v26)
      {
        while (1)
        {
          if ((WebCore::atBoundaryOfGranularity() & 1) != 0
            || WebCore::operator==((uint64_t)&v76, (uint64_t)&v80)
            || (WebCore::atBoundaryOfGranularity() & 1) != 0
            || (WebCore::atBoundaryOfGranularity() & 1) != 0)
          {
LABEL_71:
            v25 = v76;
            break;
          }
          if ((_DWORD)a4)
            WebCore::VisiblePosition::next();
          else
            WebCore::VisiblePosition::previous();
          v27 = v64;
          v64 = 0;
          v28 = (uint64_t)v76;
          v76 = v27;
          if (v28)
          {
            if (*(_DWORD *)(v28 + 24) == 2)
            {
              if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v28);
                v30 = v64;
                v77 = v65;
                v78 = v66;
                v79 = v67;
                v64 = 0;
                if (v30)
                {
                  if (*((_DWORD *)v30 + 6) == 2)
                  {
                    if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v30);
                  }
                  else
                  {
                    *((_DWORD *)v30 + 6) -= 2;
                  }
                }
                goto LABEL_60;
              }
            }
            else
            {
              *(_DWORD *)(v28 + 24) -= 2;
            }
          }
          v77 = v65;
          v78 = v66;
          v79 = v67;
LABEL_60:
          if (v76)
            v29 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v29 = 0;
          if (!v29)
            goto LABEL_71;
        }
      }
      if (!v25 || WebCore::operator==((uint64_t)&v76, (uint64_t)&v80))
      {
        v31 = v68;
        if (v68)
          *((_DWORD *)v68 + 6) += 2;
        v32 = (uint64_t)v76;
        v76 = v31;
        if (v32)
        {
          if (*(_DWORD *)(v32 + 24) == 2)
          {
            if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v32);
          }
          else
          {
            *(_DWORD *)(v32 + 24) -= 2;
          }
        }
        v77 = v69;
        v78 = v70;
        v79 = v71;
      }
      if (!v76)
      {
        LOBYTE(v51) = 0;
        v55 = 0;
        goto LABEL_98;
      }
      v33 = (char)WebCore::documentOrder();
      if (v33 == -127 || (v33 & 0x80000000) == 0)
      {
        v34 = v80;
        v35 = v82;
        v36 = v81;
        v37 = v83;
        v80 = v76;
        v81 = v77;
        v82 = v78;
        LOBYTE(v83) = v79;
        v76 = v34;
        v77 = v36;
        v78 = v35;
        v79 = v37;
      }
    }
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v51);
LABEL_98:
    v46 = v68;
    v68 = 0;
    if (v46)
    {
      if (*((_DWORD *)v46 + 6) == 2)
      {
        if ((*((_WORD *)v46 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v46);
      }
      else
      {
        *((_DWORD *)v46 + 6) -= 2;
      }
    }
    goto LABEL_101;
  }
  return result;
}

void sub_1973C541C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WebCore::Node *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WebCore::Node *a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  WebCore::Node *v34;

  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&a27);
  if (*(_BYTE *)(v31 - 128))
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v31 - 144));
  v33 = a30;
  a30 = 0;
  if (v33)
  {
    if (*(_DWORD *)(v33 + 24) == 2)
    {
      if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v33);
    }
    else
    {
      *(_DWORD *)(v33 + 24) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15);
  v34 = a20;
  a20 = 0;
  if (v34)
  {
    if (*((_DWORD *)v34 + 6) == 2)
    {
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v34);
    }
    else
    {
      *((_DWORD *)v34 + 6) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v30 + 8));
  _Unwind_Resume(a1);
}

void WebKit::rangeForPointInRootViewCoordinates(WebKit *this, WebCore::LocalFrame *a2, const WebCore::IntPoint *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::ScrollView *v18;
  uint64_t v19;
  WebCore::Node *v20;
  uint64_t v21;
  WebCore::Node *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  __int32 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int32 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int8x8_t v35;
  uint64_t v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  int v42;
  BOOL v43;
  int v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  int v47;
  BOOL v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore::Node *isInsideOverlay;
  uint64_t v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  uint64_t v55;
  WebCore::Node *v56;
  uint64_t v57;
  const WebCore::VisiblePosition *v58;
  WebCore::Node *v59;
  const WebCore::VisiblePosition *v60;
  WebCore::Node *v61;
  uint64_t v62;
  WebCore::Node *v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::Node *v66;
  WebCore::Node *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  WebCore::Node *v72;
  uint64_t v73;
  WebCore::Node *v74;
  WebCore::Node *v75;
  WebCore::Node *v76;
  WebCore::Node *v77;
  WebCore::Node *v78;
  WebCore::Node *v79;
  uint64_t v80;
  WebCore::Node *v81;
  WebCore::Node *v82;
  WebCore::Node *v83;
  WebCore::Node *v84;
  WebCore::Node *v85;
  WebCore::Node *v86;
  uint64_t v87;
  WebCore::Node *v88;
  uint64_t v89;
  uint64_t v90;
  WebCore::Node *v91;
  WebCore::Node *v92;
  WebCore::Node *v93;
  uint64_t v94;
  WebCore::Node *v95;
  uint64_t v96;
  uint64_t v97;
  WebCore::Node *v98;
  WebCore::Node *v99;
  uint64_t v100;
  uint64_t v101;
  WebCore::Node *v102;
  uint64_t v103;
  uint64_t v104;
  WebCore::Node *v105;
  WebCore::Node *v106;
  WebCore::Node *v107;
  WebCore::Node *v108;
  WebCore::Node *v109;
  WebCore::Node *v110;
  WebCore::Node *v111;
  uint64_t v112;
  WebCore::Node *v113;
  WebCore::Node *v114;
  WebCore::Node *v115;
  int v116;
  int v117;
  int v118;
  WebCore::Node *v119;
  WebCore::Node *v120;
  WebCore::Node *v121;
  uint64_t v122;
  uint64_t v123;
  WebCore::Node *v124;
  WebCore::Node *v125;
  WebCore::Node *v126;
  int v127;
  char v128;
  uint64_t v129;
  int v130;
  char v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  unsigned __int8 v136;
  WebCore::Node *v137;
  int v138;
  char v139;
  char v140;
  WebCore::Node *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WebCore::Node *v145;
  int v146;
  char v147;
  WebCore::Node *v148;
  int v149;
  char v150;
  uint64_t v151;
  int v152;
  char v153;
  uint64_t v154;
  int v155;
  char v156;
  uint64_t v157;
  int v158;
  char v159;
  uint64_t v160;
  int v161;
  char v162;
  uint64_t v163;
  int v164;
  char v165;
  uint64_t v166;
  int v167;
  char v168;
  __int16 v169;
  char v170;
  WebCore::Node *v171;
  int v172;
  char v173;
  char v174;
  WebCore::Node *v175;
  int v176;
  char v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  WebCore::Node *v181;
  int v182;
  char v183;
  char v184;
  WebCore::Node *v185;
  int v186;
  char v187;
  char v188;
  WebCore::Node *v189;
  int v190;
  char v191;
  char v192;

  v10 = *(_QWORD *)(*((_QWORD *)a2 + 37) + 3064);
  v11 = *(_QWORD *)(v10 + 56);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v151 = v11;
  v152 = *(_DWORD *)(v10 + 64);
  v153 = *(_BYTE *)(v10 + 68);
  v12 = *(_QWORD *)(v10 + 72);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v154 = v12;
  v155 = *(_DWORD *)(v10 + 80);
  v156 = *(_BYTE *)(v10 + 84);
  v13 = *(_QWORD *)(v10 + 88);
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  v157 = v13;
  v158 = *(_DWORD *)(v10 + 96);
  v159 = *(_BYTE *)(v10 + 100);
  v14 = *(_QWORD *)(v10 + 104);
  if (v14)
    *(_DWORD *)(v14 + 24) += 2;
  v160 = v14;
  v161 = *(_DWORD *)(v10 + 112);
  v162 = *(_BYTE *)(v10 + 116);
  v15 = *(_QWORD *)(v10 + 120);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  v163 = v15;
  v164 = *(_DWORD *)(v10 + 128);
  v165 = *(_BYTE *)(v10 + 132);
  v16 = *(_QWORD *)(v10 + 136);
  if (v16)
    *(_DWORD *)(v16 + 24) += 2;
  v166 = v16;
  v167 = *(_DWORD *)(v10 + 144);
  v168 = *(_BYTE *)(v10 + 148);
  v169 = *(_WORD *)(v10 + 152);
  v170 = *(_BYTE *)(v10 + 154);
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::VisiblePosition::VisiblePosition();
  v17 = *(_QWORD *)(*((_QWORD *)a2 + 16) + 8);
  if (!v17 || *(_BYTE *)(v17 + 144))
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 32) = 0;
    *((_BYTE *)this + 40) = 0;
    goto LABEL_279;
  }
  v18 = (WebCore::ScrollView *)*((_QWORD *)a2 + 36);
  v141 = (WebCore::Node *)WebCore::ScrollView::unobscuredContentRect();
  v142 = v19;
  v171 = (WebCore::Node *)WebCore::IntPoint::constrainedWithin(a3, (const WebCore::IntRect *)&v141);
  v144 = WebCore::ScrollView::rootViewToContents(v18, (const WebCore::IntPoint *)&v171);
  if ((a5 & 1) == 0)
  {
    v20 = v148;
    if (v148)
      *((_DWORD *)v148 + 6) += 2;
    v141 = v20;
    LODWORD(v142) = v149;
    BYTE4(v142) = v150;
    v21 = WebCore::Position::containerNode((WebCore::Position *)&v141);
    v22 = v141;
    v141 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    if (!v21)
      goto LABEL_33;
    v23 = *(_QWORD *)(v21 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v23)
      goto LABEL_33;
    if ((*(_BYTE *)((*(_QWORD *)(v21 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v23 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v21 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    if (((*(_DWORD *)(v23 + 124) >> 13) & 6u) - 2 > 3)
    {
LABEL_33:
      if ((_DWORD)a4)
      {
        v29 = (unint64_t)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v148, 0) >> 32;
        v30 = HIDWORD(v28);
        if ((v28 & 0x8000000000000000) != 0)
          LODWORD(v30) = HIDWORD(v28) + 1;
        v31 = v29 + ((int)v30 >> 1);
        if (SHIDWORD(v144) >= v31)
          goto LABEL_42;
      }
      else
      {
        v33 = (unint64_t)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v145, 0) >> 32;
        v34 = HIDWORD(v32);
        if ((v32 & 0x8000000000000000) != 0)
          LODWORD(v34) = HIDWORD(v32) + 1;
        v31 = v33 + ((int)v34 >> 1);
        if (SHIDWORD(v144) <= v31)
          goto LABEL_42;
      }
      HIDWORD(v144) = v31;
      goto LABEL_42;
    }
    if ((_DWORD)a4)
    {
      v24 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v148, 0);
      if (v25 >= 0)
        v26 = v25;
      else
        v26 = v25 + 1;
      v27 = v24 + (v26 >> 1);
      if ((int)v144 > v27)
LABEL_290:
        LODWORD(v144) = v27;
    }
    else
    {
      v116 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v145, 0);
      if (v117 >= 0)
        v118 = v117;
      else
        v118 = v117 + 1;
      v27 = v116 + (v118 >> 1);
      if ((int)v144 < v27)
        goto LABEL_290;
    }
  }
LABEL_42:
  v35 = (int8x8_t)vcgt_s32((int32x2_t)v144, (int32x2_t)0xFE000000FE000000);
  v171 = (WebCore::Node *)vorr_s8((int8x8_t)(*(_QWORD *)&v35 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v144), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v144, 6uLL)), v35));
  WebCore::EventHandler::hitTestResultAtPoint();
  v36 = v143;
  if (v143)
  {
    *(_DWORD *)(v143 + 24) += 2;
    if ((WebCore::HTMLElement::shouldExtendSelectionToTargetNode() & 1) == 0)
    {
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 32) = 0;
      *((_BYTE *)this + 40) = 0;
      goto LABEL_276;
    }
  }
  v137 = 0;
  v138 = 0;
  v139 &= 0xF0u;
  v140 = 1;
  LOBYTE(v132) = 0;
  v136 = 0;
  if (v36)
  {
    WebCore::EventHandler::selectionExtentRespectingEditingBoundary();
    v37 = v126;
    if (v126)
      *((_DWORD *)v126 + 6) += 2;
  }
  else
  {
    WebCore::LocalFrame::visiblePositionForPoint(a2, (const WebCore::IntPoint *)&v144);
    v37 = v126;
    if (v126)
      *((_DWORD *)v126 + 6) += 2;
  }
  v189 = v37;
  v190 = v127;
  v191 = v128;
  WebCore::VisiblePosition::VisiblePosition();
  v38 = v171;
  v171 = 0;
  v39 = v137;
  v137 = v38;
  if (!v39)
    goto LABEL_54;
  if (*((_DWORD *)v39 + 6) != 2)
  {
    *((_DWORD *)v39 + 6) -= 2;
LABEL_54:
    v138 = v172;
    v139 = v173;
    v140 = v174;
    v171 = 0;
    goto LABEL_55;
  }
  if ((*((_WORD *)v39 + 15) & 0x400) != 0)
    goto LABEL_54;
  WebCore::Node::removedLastRef(v39);
  v119 = v171;
  v138 = v172;
  v139 = v173;
  v140 = v174;
  v171 = 0;
  if (v119)
  {
    if (*((_DWORD *)v119 + 6) == 2)
    {
      if ((*((_WORD *)v119 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v119);
    }
    else
    {
      *((_DWORD *)v119 + 6) -= 2;
    }
  }
LABEL_55:
  v40 = v189;
  v189 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  v41 = v126;
  v126 = 0;
  if (v41)
  {
    if (*((_DWORD *)v41 + 6) == 2)
    {
      if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v41);
    }
    else
    {
      *((_DWORD *)v41 + 6) -= 2;
    }
  }
  if (!(_DWORD)a4)
  {
    v47 = (char)WebCore::documentOrder();
    v48 = v47 != -127 && v47 < 0;
    v44 = !v48;
    if (v48 && !a5 || WebCore::operator==((uint64_t)&v137, (uint64_t)&v145))
    {
      WebCore::VisiblePosition::previous();
      v49 = v171;
      v171 = 0;
      v50 = v137;
      v137 = v49;
      if (!v50)
      {
LABEL_91:
        v138 = v172;
        v139 = v173;
        v140 = v174;
LABEL_92:
        if (((v44 | a5 ^ 1) & 1) == 0)
        {
          WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v171);
          std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v132, (uint64_t)&v171);
          goto LABEL_97;
        }
        WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v171);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v132, (uint64_t)&v171);
        goto LABEL_94;
      }
      if (*((_DWORD *)v50 + 6) != 2)
      {
        *((_DWORD *)v50 + 6) -= 2;
        goto LABEL_91;
      }
      if ((*((_WORD *)v50 + 15) & 0x400) != 0)
        goto LABEL_91;
      WebCore::Node::removedLastRef(v50);
      v121 = v171;
      v138 = v172;
      v139 = v173;
      v140 = v174;
      v171 = 0;
      if (!v121)
        goto LABEL_92;
      if (*((_DWORD *)v121 + 6) != 2)
      {
        *((_DWORD *)v121 + 6) -= 2;
        goto LABEL_92;
      }
      if ((*((_WORD *)v121 + 15) & 0x400) != 0)
        goto LABEL_92;
LABEL_367:
      WebCore::Node::removedLastRef(v121);
      goto LABEL_92;
    }
    v79 = v145;
    if (v145)
      *((_DWORD *)v145 + 6) += 2;
    v171 = v79;
    v172 = v146;
    v173 = v147;
    v80 = WebCore::Position::containerNode((WebCore::Position *)&v171);
    a4 = v80;
    if (v80)
      *(_DWORD *)(v80 + 24) += 2;
    v81 = v171;
    v171 = 0;
    if (v81)
    {
      if (*((_DWORD *)v81 + 6) == 2)
      {
        if ((*((_WORD *)v81 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v81);
      }
      else
      {
        *((_DWORD *)v81 + 6) -= 2;
      }
    }
    if (!a4)
      goto LABEL_92;
    if (!v36 || *(_QWORD *)(a4 + 40) == *(_QWORD *)(v36 + 40))
    {
LABEL_192:
      if (*(_DWORD *)(a4 + 24) != 2)
      {
        *(_DWORD *)(a4 + 24) -= 2;
        goto LABEL_92;
      }
      if ((*(_WORD *)(a4 + 30) & 0x400) != 0)
        goto LABEL_92;
      v121 = (WebCore::Node *)a4;
      goto LABEL_367;
    }
    v82 = v137;
    if (v137)
      *((_DWORD *)v137 + 6) += 2;
    v189 = v82;
    v190 = v138;
    v191 = v139;
    WebCore::VisibleSelection::adjustPositionForStart();
    WebCore::VisiblePosition::VisiblePosition();
    v83 = v171;
    v171 = 0;
    v84 = v137;
    v137 = v83;
    if (v84)
    {
      if (*((_DWORD *)v84 + 6) == 2)
      {
        if ((*((_WORD *)v84 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v84);
          v125 = v171;
          v138 = v172;
          v139 = v173;
          v140 = v174;
          v171 = 0;
          if (v125)
          {
            if (*((_DWORD *)v125 + 6) == 2)
            {
              if ((*((_WORD *)v125 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v125);
            }
            else
            {
              *((_DWORD *)v125 + 6) -= 2;
            }
          }
          goto LABEL_186;
        }
      }
      else
      {
        *((_DWORD *)v84 + 6) -= 2;
      }
    }
    v138 = v172;
    v139 = v173;
    v140 = v174;
    v171 = 0;
LABEL_186:
    v85 = v126;
    v126 = 0;
    if (v85)
    {
      if (*((_DWORD *)v85 + 6) == 2)
      {
        if ((*((_WORD *)v85 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v85);
      }
      else
      {
        *((_DWORD *)v85 + 6) -= 2;
      }
    }
    v86 = v189;
    v189 = 0;
    if (v86)
    {
      if (*((_DWORD *)v86 + 6) == 2)
      {
        if ((*((_WORD *)v86 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v86);
      }
      else
      {
        *((_DWORD *)v86 + 6) -= 2;
      }
    }
    goto LABEL_192;
  }
  v42 = (char)WebCore::documentOrder();
  v43 = v42 != -127 && v42 < 0;
  v44 = !v43;
  if ((!v43 || a5) && !WebCore::operator==((uint64_t)&v137, (uint64_t)&v148))
  {
    v72 = v148;
    if (v148)
      *((_DWORD *)v148 + 6) += 2;
    v171 = v72;
    v172 = v149;
    v173 = v150;
    v73 = WebCore::Position::containerNode((WebCore::Position *)&v171);
    a4 = v73;
    if (v73)
      *(_DWORD *)(v73 + 24) += 2;
    isInsideOverlay = v171;
    v171 = 0;
    if (isInsideOverlay)
    {
      if (*((_DWORD *)isInsideOverlay + 6) == 2)
        goto LABEL_338;
      *((_DWORD *)isInsideOverlay + 6) -= 2;
    }
    goto LABEL_153;
  }
  WebCore::VisiblePosition::next();
  v45 = v171;
  v171 = 0;
  v46 = v137;
  v137 = v45;
  if (!v46)
    goto LABEL_75;
  if (*((_DWORD *)v46 + 6) != 2)
  {
    *((_DWORD *)v46 + 6) -= 2;
LABEL_75:
    v138 = v172;
    v139 = v173;
    v140 = v174;
    goto LABEL_76;
  }
  if ((*((_WORD *)v46 + 15) & 0x400) != 0)
    goto LABEL_75;
  WebCore::Node::removedLastRef(v46);
  v120 = v171;
  v138 = v172;
  v139 = v173;
  v140 = v174;
  v171 = 0;
  if (v120)
  {
    if (*((_DWORD *)v120 + 6) == 2)
    {
      if ((*((_WORD *)v120 + 15) & 0x400) == 0)
        goto LABEL_364;
    }
    else
    {
      *((_DWORD *)v120 + 6) -= 2;
    }
  }
  while (1)
  {
LABEL_76:
    if (((v44 | a5 ^ 1) & 1) != 0)
    {
      WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v171);
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v132, (uint64_t)&v171);
LABEL_94:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v171);
      a5 = 0;
    }
    else
    {
      WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v171);
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v132, (uint64_t)&v171);
LABEL_97:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v171);
      a5 = 1;
    }
    if (!v136)
    {
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 32) = 0;
LABEL_145:
      *((_BYTE *)this + 40) = a5;
      goto LABEL_272;
    }
    isInsideOverlay = (WebCore::Node *)WebCore::ImageOverlay::isInsideOverlay();
    if (!(_DWORD)isInsideOverlay)
    {
      v69 = v136;
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 32) = 0;
      if (v69)
      {
        v70 = v132;
        *(_DWORD *)(v132 + 24) += 2;
        *(_QWORD *)this = v70;
        *((_DWORD *)this + 2) = v133;
        v71 = v134;
        *(_DWORD *)(v134 + 24) += 2;
        *((_QWORD *)this + 2) = v71;
        *((_DWORD *)this + 6) = v135;
        *((_BYTE *)this + 32) = 1;
      }
      goto LABEL_145;
    }
    if (v136)
      break;
    __break(1u);
LABEL_338:
    if ((*((_WORD *)isInsideOverlay + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(isInsideOverlay);
LABEL_153:
    if (a4)
    {
      if (v36 && *(_QWORD *)(a4 + 40) != *(_QWORD *)(v36 + 40))
      {
        v74 = v137;
        if (v137)
          *((_DWORD *)v137 + 6) += 2;
        v189 = v74;
        v190 = v138;
        v191 = v139;
        WebCore::VisibleSelection::adjustPositionForEnd();
        WebCore::VisiblePosition::VisiblePosition();
        v75 = v171;
        v171 = 0;
        v76 = v137;
        v137 = v75;
        if (!v76)
          goto LABEL_161;
        if (*((_DWORD *)v76 + 6) != 2)
        {
          *((_DWORD *)v76 + 6) -= 2;
          goto LABEL_161;
        }
        if ((*((_WORD *)v76 + 15) & 0x400) != 0)
        {
LABEL_161:
          v138 = v172;
          v139 = v173;
          v140 = v174;
          v171 = 0;
        }
        else
        {
          WebCore::Node::removedLastRef(v76);
          v124 = v171;
          v138 = v172;
          v139 = v173;
          v140 = v174;
          v171 = 0;
          if (v124)
          {
            if (*((_DWORD *)v124 + 6) == 2)
            {
              if ((*((_WORD *)v124 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v124);
            }
            else
            {
              *((_DWORD *)v124 + 6) -= 2;
            }
          }
        }
        v77 = v126;
        v126 = 0;
        if (v77)
        {
          if (*((_DWORD *)v77 + 6) == 2)
          {
            if ((*((_WORD *)v77 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v77);
          }
          else
          {
            *((_DWORD *)v77 + 6) -= 2;
          }
        }
        v78 = v189;
        v189 = 0;
        if (v78)
        {
          if (*((_DWORD *)v78 + 6) == 2)
          {
            if ((*((_WORD *)v78 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v78);
          }
          else
          {
            *((_DWORD *)v78 + 6) -= 2;
          }
        }
      }
      if (*(_DWORD *)(a4 + 24) == 2)
      {
        if ((*(_WORD *)(a4 + 30) & 0x400) == 0)
        {
          v120 = (WebCore::Node *)a4;
LABEL_364:
          WebCore::Node::removedLastRef(v120);
        }
      }
      else
      {
        *(_DWORD *)(a4 + 24) -= 2;
      }
    }
  }
  v52 = v132;
  *(_DWORD *)(v132 + 24) += 2;
  v181 = 0;
  v185 = (WebCore::Node *)v52;
  WebCore::Position::Position();
  WebCore::VisiblePosition::VisiblePosition();
  v53 = v171;
  v171 = 0;
  if (v53)
  {
    if (*((_DWORD *)v53 + 6) == 2)
    {
      if ((*((_WORD *)v53 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v53);
    }
    else
    {
      *((_DWORD *)v53 + 6) -= 2;
    }
  }
  v54 = v185;
  v185 = 0;
  if (v54)
  {
    if (*((_DWORD *)v54 + 6) == 2)
    {
      if ((*((_WORD *)v54 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v54);
    }
    else
    {
      *((_DWORD *)v54 + 6) -= 2;
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v181);
  v55 = v134;
  *(_DWORD *)(v134 + 24) += 2;
  v180 = 0;
  v181 = (WebCore::Node *)v55;
  WebCore::Position::Position();
  WebCore::VisiblePosition::VisiblePosition();
  v56 = v171;
  v171 = 0;
  if (v56)
  {
    if (*((_DWORD *)v56 + 6) == 2)
    {
      if ((*((_WORD *)v56 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v56);
    }
    else
    {
      *((_DWORD *)v56 + 6) -= 2;
    }
  }
  v57 = (uint64_t)v181;
  v181 = 0;
  if (v57)
  {
    if (*(_DWORD *)(v57 + 24) == 2)
    {
      if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57);
    }
    else
    {
      *(_DWORD *)(v57 + 24) -= 2;
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v180);
  v59 = v189;
  if (v189)
    *((_DWORD *)v189 + 6) += 2;
  v171 = v59;
  v172 = v190;
  v173 = v191;
  v174 = v192;
  while ((WebKit::insideImageOverlay(&v171, v58) & 1) != 0)
  {
    v61 = v171;
    if (v171)
      *((_DWORD *)v171 + 6) += 2;
    v181 = v61;
    v182 = v172;
    v183 = v173;
    v62 = WebCore::Position::containerNode((WebCore::Position *)&v181);
    v64 = v62;
    if (v62)
      *(_DWORD *)(v62 + 24) += 2;
    v65 = (uint64_t)v181;
    v181 = 0;
    if (v65)
    {
      if (*(_DWORD *)(v65 + 24) == 2)
      {
        if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v65);
      }
      else
      {
        *(_DWORD *)(v65 + 24) -= 2;
      }
    }
    if (v64)
    {
      if ((*(_WORD *)(v64 + 28) & 2) != 0)
      {
        WebCore::firstPositionInNode((WebCore *)v64, v63);
        WebCore::Position::downstream();
        WebCore::VisiblePosition::VisiblePosition();
        v87 = (uint64_t)v181;
        v181 = 0;
        v88 = v189;
        v189 = (WebCore::Node *)v87;
        if (!v88)
          goto LABEL_197;
        if (*((_DWORD *)v88 + 6) != 2)
        {
          *((_DWORD *)v88 + 6) -= 2;
          goto LABEL_197;
        }
        if ((*((_WORD *)v88 + 15) & 0x400) != 0)
        {
LABEL_197:
          v190 = v182;
          v191 = v183;
          v192 = v184;
          v181 = 0;
        }
        else
        {
          WebCore::Node::removedLastRef(v88);
          v122 = (uint64_t)v181;
          v190 = v182;
          v191 = v183;
          v192 = v184;
          v181 = 0;
          if (v122)
          {
            if (*(_DWORD *)(v122 + 24) == 2)
            {
              if ((*(_WORD *)(v122 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v122);
            }
            else
            {
              *(_DWORD *)(v122 + 24) -= 2;
            }
          }
        }
        v89 = v180;
        v180 = 0;
        if (v89)
        {
          if (*(_DWORD *)(v89 + 24) == 2)
          {
            if ((*(_WORD *)(v89 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v89);
          }
          else
          {
            *(_DWORD *)(v89 + 24) -= 2;
          }
        }
        v90 = v179;
        v179 = 0;
        if (v90)
        {
          if (*(_DWORD *)(v90 + 24) == 2)
          {
            if ((*(_WORD *)(v90 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v90);
          }
          else
          {
            *(_DWORD *)(v90 + 24) -= 2;
          }
        }
        if (*(_DWORD *)(v64 + 24) == 2)
        {
          if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v64);
        }
        else
        {
          *(_DWORD *)(v64 + 24) -= 2;
        }
        break;
      }
      if (*(_DWORD *)(v64 + 24) == 2)
      {
        if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v64);
      }
      else
      {
        *(_DWORD *)(v64 + 24) -= 2;
      }
    }
    WebCore::VisiblePosition::previous();
    v66 = v181;
    v181 = 0;
    v67 = v171;
    v171 = v66;
    if (!v67)
      goto LABEL_131;
    if (*((_DWORD *)v67 + 6) != 2)
    {
      *((_DWORD *)v67 + 6) -= 2;
LABEL_131:
      v172 = v182;
      v173 = v183;
      v174 = v184;
      continue;
    }
    if ((*((_WORD *)v67 + 15) & 0x400) != 0)
      goto LABEL_131;
    WebCore::Node::removedLastRef(v67);
    v68 = (uint64_t)v181;
    v172 = v182;
    v173 = v183;
    v174 = v184;
    v181 = 0;
    if (v68)
    {
      if (*(_DWORD *)(v68 + 24) == 2)
      {
        if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v68);
      }
      else
      {
        *(_DWORD *)(v68 + 24) -= 2;
      }
    }
  }
  v91 = v171;
  v171 = 0;
  if (v91)
  {
    if (*((_DWORD *)v91 + 6) == 2)
    {
      if ((*((_WORD *)v91 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v91);
    }
    else
    {
      *((_DWORD *)v91 + 6) -= 2;
    }
  }
  v92 = v185;
  if (v185)
    *((_DWORD *)v185 + 6) += 2;
  v171 = v92;
  v172 = v186;
  v173 = v187;
  v174 = v188;
  while ((WebKit::insideImageOverlay(&v171, v60) & 1) != 0)
  {
    v93 = v171;
    if (v171)
      *((_DWORD *)v171 + 6) += 2;
    v181 = v93;
    v182 = v172;
    v183 = v173;
    v94 = WebCore::Position::containerNode((WebCore::Position *)&v181);
    v96 = v94;
    if (v94)
      *(_DWORD *)(v94 + 24) += 2;
    v97 = (uint64_t)v181;
    v181 = 0;
    if (v97)
    {
      if (*(_DWORD *)(v97 + 24) == 2)
      {
        if ((*(_WORD *)(v97 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v97);
      }
      else
      {
        *(_DWORD *)(v97 + 24) -= 2;
      }
    }
    if (v96)
    {
      if ((*(_WORD *)(v96 + 28) & 2) != 0)
      {
        WebCore::lastPositionInNode((WebCore *)v96, v95);
        WebCore::Position::upstream();
        WebCore::VisiblePosition::VisiblePosition();
        v101 = (uint64_t)v181;
        v181 = 0;
        v102 = v185;
        v185 = (WebCore::Node *)v101;
        if (!v102)
          goto LABEL_241;
        if (*((_DWORD *)v102 + 6) != 2)
        {
          *((_DWORD *)v102 + 6) -= 2;
          goto LABEL_241;
        }
        if ((*((_WORD *)v102 + 15) & 0x400) != 0)
        {
LABEL_241:
          v186 = v182;
          v187 = v183;
          v188 = v184;
          v181 = 0;
        }
        else
        {
          WebCore::Node::removedLastRef(v102);
          v123 = (uint64_t)v181;
          v186 = v182;
          v187 = v183;
          v188 = v184;
          v181 = 0;
          if (v123)
          {
            if (*(_DWORD *)(v123 + 24) == 2)
            {
              if ((*(_WORD *)(v123 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v123);
            }
            else
            {
              *(_DWORD *)(v123 + 24) -= 2;
            }
          }
        }
        v103 = v180;
        v180 = 0;
        if (v103)
        {
          if (*(_DWORD *)(v103 + 24) == 2)
          {
            if ((*(_WORD *)(v103 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v103);
          }
          else
          {
            *(_DWORD *)(v103 + 24) -= 2;
          }
        }
        v104 = v179;
        v179 = 0;
        if (v104)
        {
          if (*(_DWORD *)(v104 + 24) == 2)
          {
            if ((*(_WORD *)(v104 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v104);
          }
          else
          {
            *(_DWORD *)(v104 + 24) -= 2;
          }
        }
        if (*(_DWORD *)(v96 + 24) == 2)
        {
          if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v96);
        }
        else
        {
          *(_DWORD *)(v96 + 24) -= 2;
        }
        break;
      }
      if (*(_DWORD *)(v96 + 24) == 2)
      {
        if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v96);
      }
      else
      {
        *(_DWORD *)(v96 + 24) -= 2;
      }
    }
    WebCore::VisiblePosition::next();
    v98 = v181;
    v181 = 0;
    v99 = v171;
    v171 = v98;
    if (!v99)
      goto LABEL_227;
    if (*((_DWORD *)v99 + 6) != 2)
    {
      *((_DWORD *)v99 + 6) -= 2;
LABEL_227:
      v172 = v182;
      v173 = v183;
      v174 = v184;
      continue;
    }
    if ((*((_WORD *)v99 + 15) & 0x400) != 0)
      goto LABEL_227;
    WebCore::Node::removedLastRef(v99);
    v100 = (uint64_t)v181;
    v172 = v182;
    v173 = v183;
    v174 = v184;
    v181 = 0;
    if (v100)
    {
      if (*(_DWORD *)(v100 + 24) == 2)
      {
        if ((*(_WORD *)(v100 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v100);
      }
      else
      {
        *(_DWORD *)(v100 + 24) -= 2;
      }
    }
  }
  v105 = v171;
  v171 = 0;
  if (v105)
  {
    if (*((_DWORD *)v105 + 6) == 2)
    {
      if ((*((_WORD *)v105 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v105);
    }
    else
    {
      *((_DWORD *)v105 + 6) -= 2;
    }
  }
  v106 = v189;
  if (v189)
    *((_DWORD *)v189 + 6) += 2;
  v171 = v106;
  v172 = v190;
  v173 = v191;
  v174 = v192;
  v107 = v185;
  if (v185)
    *((_DWORD *)v185 + 6) += 2;
  v175 = v107;
  v176 = v186;
  v177 = v187;
  v178 = v188;
  WebCore::makeSimpleRange();
  v108 = v175;
  v175 = 0;
  if (v108)
  {
    if (*((_DWORD *)v108 + 6) == 2)
    {
      if ((*((_WORD *)v108 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v108);
    }
    else
    {
      *((_DWORD *)v108 + 6) -= 2;
    }
  }
  v109 = v171;
  v171 = 0;
  if (v109)
  {
    if (*((_DWORD *)v109 + 6) == 2)
    {
      if ((*((_WORD *)v109 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v109);
    }
    else
    {
      *((_DWORD *)v109 + 6) -= 2;
    }
  }
  v110 = v185;
  v185 = 0;
  if (v110)
  {
    if (*((_DWORD *)v110 + 6) == 2)
    {
      if ((*((_WORD *)v110 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v110);
    }
    else
    {
      *((_DWORD *)v110 + 6) -= 2;
    }
  }
  v111 = v189;
  v189 = 0;
  if (v111)
  {
    if (*((_DWORD *)v111 + 6) == 2)
    {
      if ((*((_WORD *)v111 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v111);
    }
    else
    {
      *((_DWORD *)v111 + 6) -= 2;
    }
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 32) = 0;
  if (v131)
  {
    *(_QWORD *)this = v126;
    *((_DWORD *)this + 2) = v127;
    v112 = v129;
    v126 = 0;
    v129 = 0;
    *((_QWORD *)this + 2) = v112;
    *((_DWORD *)this + 6) = v130;
    *((_BYTE *)this + 32) = 1;
  }
  *((_BYTE *)this + 40) = 0;
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v126);
LABEL_272:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v132);
  v113 = v137;
  v137 = 0;
  if (v113)
  {
    if (*((_DWORD *)v113 + 6) == 2)
    {
      if ((*((_WORD *)v113 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v113);
    }
    else
    {
      *((_DWORD *)v113 + 6) -= 2;
    }
  }
  if (v36)
  {
LABEL_276:
    if (*(_DWORD *)(v36 + 24) == 2)
    {
      if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v36);
    }
    else
    {
      *(_DWORD *)(v36 + 24) -= 2;
    }
  }
  MEMORY[0x19AEADBAC](&v141);
LABEL_279:
  v114 = v145;
  v145 = 0;
  if (v114)
  {
    if (*((_DWORD *)v114 + 6) == 2)
    {
      if ((*((_WORD *)v114 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v114);
    }
    else
    {
      *((_DWORD *)v114 + 6) -= 2;
    }
  }
  v115 = v148;
  v148 = 0;
  if (v115)
  {
    if (*((_DWORD *)v115 + 6) == 2)
    {
      if ((*((_WORD *)v115 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v115);
    }
    else
    {
      *((_DWORD *)v115 + 6) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v151);
}

void sub_1973C6BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WebCore::Node *a20,uint64_t a21,uint64_t a22,WebCore::Node *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WebCore::Node *a41,uint64_t a42,uint64_t a43,WebCore::Node *a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a10);
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  v51 = *(_QWORD *)(v49 - 88);
  *(_QWORD *)(v49 - 88) = 0;
  if (v51)
  {
    if (*(_DWORD *)(v51 + 24) == 2)
    {
      if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v51);
    }
    else
    {
      *(_DWORD *)(v51 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v48 + 24) == 2)
  {
    if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v48);
  }
  else
  {
    *(_DWORD *)(v48 + 24) -= 2;
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15);
  v52 = a20;
  a20 = 0;
  if (v52)
  {
    if (*((_DWORD *)v52 + 6) == 2)
    {
      if ((*((_WORD *)v52 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v52);
    }
    else
    {
      *((_DWORD *)v52 + 6) -= 2;
    }
  }
  if (v47)
  {
    if (*(_DWORD *)(v47 + 24) == 2)
    {
      if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v47);
    }
    else
    {
      *(_DWORD *)(v47 + 24) -= 2;
    }
  }
  MEMORY[0x19AEADBAC](&a23);
  v53 = a41;
  a41 = 0;
  if (v53)
  {
    if (*((_DWORD *)v53 + 6) == 2)
    {
      if ((*((_WORD *)v53 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v53);
    }
    else
    {
      *((_DWORD *)v53 + 6) -= 2;
    }
  }
  v54 = a44;
  a44 = 0;
  if (v54)
  {
    if (*((_DWORD *)v54 + 6) == 2)
    {
      if ((*((_WORD *)v54 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v54);
    }
    else
    {
      *((_DWORD *)v54 + 6) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a47);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::selectWithTwoTouches(uint64_t a1, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t result;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  WebCore::FocusController *v15;
  WebCore::ScrollView *v16;
  WebCore::FocusController *v17;
  int v18;
  WebCore::FocusController *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::FocusController *v25;
  int v26;
  WebCore::FocusController *v27;
  int v28;
  char v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = WebCore::FocusController::focusedOrMainFrame(v25);
  v12 = (unsigned int *)result;
  if (result)
  {
    v13 = (unsigned int *)(result + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = v25;
  v25 = 0;
  if (v15)
  {
    if (!*(_DWORD *)v15)
    {
      result = 286;
      __break(0xC471u);
      goto LABEL_33;
    }
    --*(_DWORD *)v15;
  }
  if (!result)
    return result;
  v16 = *(WebCore::ScrollView **)(result + 288);
  if (v16)
    ++*((_DWORD *)v16 + 2);
  v25 = (WebCore::FocusController *)WebCore::ScrollView::rootViewToContents(v16, a2);
  WebCore::LocalFrame::visiblePositionForPoint((WebCore::LocalFrame *)v12, (const WebCore::IntPoint *)&v25);
  v25 = (WebCore::FocusController *)WebCore::ScrollView::rootViewToContents(v16, a3);
  WebCore::LocalFrame::visiblePositionForPoint((WebCore::LocalFrame *)v12, (const WebCore::IntPoint *)&v25);
  WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v25);
  if (v29)
  {
    result = WebCore::documentOrder();
    if ((char)result != -127 && (char)result < 0)
      goto LABEL_15;
    if (v29)
    {
      v17 = v25;
      v18 = v26;
      v33 = v26;
      v19 = v27;
      v27 = 0;
      v25 = v19;
      v34 = 0;
      v20 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v34);
      v26 = v28;
      v32 = 0;
      v21 = (uint64_t)v27;
      v27 = v17;
      v34 = v21;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v20);
      v28 = v18;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v32);
LABEL_15:
      WebCore::FrameSelection::setSelectedRange();
      goto LABEL_16;
    }
LABEL_33:
    __break(1u);
    return result;
  }
LABEL_16:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25);
  v22 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, const WebCore::IntPoint *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, a2, a4, a5, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v30;
  v30 = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
  v24 = v31;
  v31 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 6) == 2)
    {
      if ((*((_WORD *)v24 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v24);
    }
    else
    {
      *((_DWORD *)v24 + 6) -= 2;
    }
  }
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
  }
  return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12 + 2);
}

void sub_1973C731C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, uint64_t a16, WebCore::Node *a17)
{
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a14)
  {
    if (*((_DWORD *)a14 + 6) == 2)
    {
      if ((*((_WORD *)a14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a14);
    }
    else
    {
      *((_DWORD *)a14 + 6) -= 2;
    }
  }
  if (a17)
  {
    if (*((_DWORD *)a17 + 6) == 2)
    {
      if ((*((_WORD *)a17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a17);
    }
    else
    {
      *((_DWORD *)a17 + 6) -= 2;
    }
  }
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v17 + 8));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebPage::extendSelectionForReplacement(WebCore::Page **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::Node *v8;
  uint64_t v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  void *v28;
  WebCore::Node *v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  char v35;
  WebCore::Node *v36;
  int v37;
  char v38;
  uint64_t v39;
  WebCore::Node *v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  WebCore::Node *v46;
  int v47;
  char v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  char v55;

  v3 = *a2;
  *a2 = 0;
  v54 = v3;
  v55 = 1;
  WebCore::Page::checkedFocusController(a1[6]);
  v4 = WebCore::FocusController::focusedOrMainFrame(v36);
  v5 = v4;
  if (v4)
  {
    v6 = (unsigned int *)(v4 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = v36;
  v36 = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      goto LABEL_66;
    }
    --*(_DWORD *)v8;
  }
  if (v4)
  {
    v9 = *(_QWORD *)(v4 + 296);
    if (!v9)
    {
LABEL_54:
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
      return WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit(&v54);
    }
    *(_DWORD *)(v9 + 24) += 2;
    WebCore::VisibleSelection::range((WebCore::VisibleSelection *)(*(_QWORD *)(v9 + 3064) + 56));
    if (!v53 || v49 != v51 || v50 != v52)
    {
LABEL_52:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49);
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      goto LABEL_54;
    }
    WebCore::VisiblePosition::VisiblePosition();
    v10 = v46;
    if (v46)
      *((_DWORD *)v46 + 6) += 2;
    v36 = v10;
    v37 = v47;
    v38 = v48;
    v11 = WebCore::Position::containerNode((WebCore::Position *)&v36);
    v12 = v11;
    if (v11)
      *(_DWORD *)(v11 + 24) += 2;
    v13 = v36;
    v36 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    if (!v12)
    {
LABEL_49:
      v29 = v46;
      v46 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
      goto LABEL_52;
    }
    if (!*(_QWORD *)(v9 + 1496))
      WebCore::Document::ensureMarkers((WebCore::Document *)v9);
    WebCore::DocumentMarkerController::markersFor();
    v44 = 0;
    v45 = 0;
    v15 = v42;
    if (!v42)
    {
LABEL_28:
      WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v14);
      LOBYTE(v41) = 0;
      v43 = 0;
      if (HIDWORD(v45))
      {
        v21 = v44;
        v22 = 32 * HIDWORD(v45);
        while (1)
        {
          v23 = *v21;
          *(_DWORD *)(v23 + 24) = *(_DWORD *)(*v21 + 24) + 2;
          v31 = v23;
          v32 = *((_DWORD *)v21 + 2);
          v24 = v21[2];
          *(_DWORD *)(v24 + 24) += 2;
          v33 = v24;
          v34 = *((_DWORD *)v21 + 6);
          v35 = 1;
          WebCore::makeVisiblePositionRange();
          v25 = WebCore::contains();
          v26 = v40;
          v40 = 0;
          if (v26)
          {
            if (*((_DWORD *)v26 + 6) == 2)
            {
              if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v26);
            }
            else
            {
              *((_DWORD *)v26 + 6) -= 2;
            }
          }
          v27 = v36;
          v36 = 0;
          if (v27)
          {
            if (*((_DWORD *)v27 + 6) == 2)
            {
              if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v27);
            }
            else
            {
              *((_DWORD *)v27 + 6) -= 2;
            }
          }
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31);
          if (v25)
            break;
          v21 += 4;
          v22 -= 32;
          if (!v22)
            goto LABEL_44;
        }
        std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>((uint64_t)&v41, v21);
      }
LABEL_44:
      if (v43
        || (WebCore::wordRangeFromPosition(),
            std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v41, (uint64_t)&v36), std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36), v43))
      {
        WebKit::WebPage::setSelectedRangeDispatchingSyntheticMouseEventsIfNeeded(a1, (uint64_t)&v41);
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
      WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v28);
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
      goto LABEL_49;
    }
    if (!(v42 >> 27))
    {
      v16 = WTF::fastMalloc((WTF *)(32 * v42));
      LODWORD(v45) = v15;
      v44 = (uint64_t *)v16;
      if (v42)
      {
        v17 = 0;
        v18 = v16 + 16;
        do
        {
          WebCore::makeSimpleRange();
          ++v17;
          v19 = v36;
          v36 = 0;
          *(_QWORD *)(v18 - 16) = v19;
          *(_DWORD *)(v18 - 8) = v37;
          v20 = v39;
          v39 = 0;
          *(_QWORD *)v18 = v20;
          *(_DWORD *)(v18 + 8) = (_DWORD)v40;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v39);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v36);
          v18 += 32;
        }
        while (v17 < v42);
        HIDWORD(v45) = v17;
      }
      goto LABEL_28;
    }
    __break(0xC471u);
LABEL_66:
    JUMPOUT(0x1973C7830);
  }
  return WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit(&v54);
}

void sub_1973C7870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, uint64_t a16, WebCore::Node *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,int a27,int a28,WebCore::Node *a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v34;
  WebCore::Node *v35;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a20);
  WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a25, v34);
  if (*(_DWORD *)(v31 + 24) == 2)
  {
    if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v31);
  }
  else
  {
    *(_DWORD *)(v31 + 24) -= 2;
  }
  v35 = a29;
  a29 = 0;
  if (v35)
  {
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35);
    }
    else
    {
      *((_DWORD *)v35 + 6) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v32 - 136);
  if (*(_DWORD *)(v30 + 24) == 2)
  {
    if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v30);
  }
  else
  {
    *(_DWORD *)(v30 + 24) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v29 + 8));
  WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit((uint64_t *)(v32 - 96));
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 32))
  {
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(*a2 + 24) + 2;
    v5 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v4;
    v11 = v5;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v6 = a2[2];
    *(_DWORD *)(v6 + 24) += 2;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    v11 = v7;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    v8 = *((_DWORD *)a2 + 6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(*a2 + 24) + 2;
    *(_QWORD *)a1 = v4;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v9 = a2[2];
    *(_DWORD *)(v9 + 24) += 2;
    *(_QWORD *)(a1 + 16) = v9;
    v8 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_DWORD *)(a1 + 24) = v8;
  return a1;
}

unsigned int *WebKit::WebPage::setSelectedRangeDispatchingSyntheticMouseEventsIfNeeded(WebCore::Page **a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::Node *v8;
  int shouldDispatchSyntheticMouseEventsWhenModifyingSelection;
  WebCore::ScrollView *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  uint64_t v28;
  WebCore::Node *v29;
  int v30;
  uint64_t v31;
  int v32;
  char v33;
  WebCore::Node *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  WebCore::Page::checkedFocusController(a1[6]);
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v29);
  v5 = result;
  if (result)
  {
    v6 = result + 2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = v29;
  v29 = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1973C7DECLL);
    }
    --*(_DWORD *)v8;
  }
  if (result)
  {
    v38 = 0;
    shouldDispatchSyntheticMouseEventsWhenModifyingSelection = WebKit::WebPage::shouldDispatchSyntheticMouseEventsWhenModifyingSelection((WebKit::WebPage *)a1);
    if (shouldDispatchSyntheticMouseEventsWhenModifyingSelection)
    {
      v10 = (WebCore::ScrollView *)*((_QWORD *)v5 + 36);
      if (v10)
        ++*((_DWORD *)v10 + 2);
      WebCore::makeDeprecatedLegacyPosition();
      WebCore::VisiblePosition::VisiblePosition();
      v35 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v29, 0);
      v36 = v11;
      v12 = WebCore::ScrollView::contentsToRootView(v10, (const WebCore::IntRect *)&v35);
      if ((v13 & 0x80000000) == 0)
        v14 = v13;
      else
        v14 = v13 + 1;
      v15 = (v12 + (v14 >> 1));
      v16 = HIDWORD(v13);
      if ((v13 & 0x8000000000000000) != 0)
        LODWORD(v16) = HIDWORD(v13) + 1;
      v37 = v15 | ((unint64_t)(HIDWORD(v12) + ((int)v16 >> 1)) << 32);
      v17 = v29;
      v29 = 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
      v18 = v34;
      v34 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      WebCore::makeDeprecatedLegacyPosition();
      WebCore::VisiblePosition::VisiblePosition();
      v35 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v29, 0);
      v36 = v19;
      v20 = WebCore::ScrollView::contentsToRootView(v10, (const WebCore::IntRect *)&v35);
      if ((v21 & 0x80000000) == 0)
        v22 = v21;
      else
        v22 = v21 + 1;
      v23 = (v20 + (v22 >> 1));
      v24 = HIDWORD(v21);
      if ((v21 & 0x8000000000000000) != 0)
        LODWORD(v24) = HIDWORD(v21) + 1;
      v38 = v23 | ((unint64_t)(HIDWORD(v20) + ((int)v24 >> 1)) << 32);
      v25 = v29;
      v29 = 0;
      if (v25)
      {
        if (*((_DWORD *)v25 + 6) == 2)
        {
          if ((*((_WORD *)v25 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v25);
        }
        else
        {
          *((_DWORD *)v25 + 6) -= 2;
        }
      }
      v26 = v34;
      v34 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 6) == 2)
        {
          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v26);
        }
        else
        {
          *((_DWORD *)v26 + 6) -= 2;
        }
      }
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)a1, 0, (WebCore::IntPoint *)&v37);
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)a1, 1, (WebCore::IntPoint *)&v38);
      if (v10)
      {
        if (*((_DWORD *)v10 + 2) == 1)
          (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v10 + 8))(v10);
        else
          --*((_DWORD *)v10 + 2);
      }
    }
    v27 = *(WebCore::Node **)a2;
    *((_DWORD *)v27 + 6) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
    v29 = v27;
    v30 = *(_DWORD *)(a2 + 8);
    v28 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(v28 + 24) += 2;
    v31 = v28;
    v32 = *(_DWORD *)(a2 + 24);
    v33 = 1;
    WebCore::FrameSelection::setSelectedRange();
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29);
    if (shouldDispatchSyntheticMouseEventsWhenModifyingSelection)
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)a1, 2, (WebCore::IntPoint *)&v38);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5 + 2);
  }
  return result;
}

void sub_1973C7E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15)
{
  uint64_t v15;

  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_1973C7EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10)
      --*a10;
    else
      __break(0xC471u);
  }
  JUMPOUT(0x1973C7ED4);
}

uint64_t *WebKit::WebPage::extendSelection(WebCore::Page **a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::FocusController *v10;
  WebCore::Node *v11;
  WebCore::FocusController *v13[4];
  char v14;
  WebCore::Node *v15;
  uint64_t v16;
  char v17;

  v5 = *a3;
  *a3 = 0;
  v16 = v5;
  v17 = 1;
  WebCore::Page::checkedFocusController(a1[6]);
  v6 = WebCore::FocusController::focusedOrMainFrame(v13[0]);
  v7 = v6;
  if (v6)
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = v13[0];
  v13[0] = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1973C807CLL);
    }
    --*(_DWORD *)v10;
  }
  if (a2 == 1 && v6)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 296) + 3064) + 153) == 1)
    {
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::wordRangeFromPosition();
      if (v14)
        WebKit::WebPage::setSelectedRangeDispatchingSyntheticMouseEventsIfNeeded(a1, (uint64_t)v13);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13);
      v11 = v15;
      v15 = 0;
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
      }
    }
    goto LABEL_16;
  }
  if (v6)
LABEL_16:
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  return WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit(&v16);
}

void sub_1973C8090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14)
{
  uint64_t v14;
  uint64_t v15;
  WebCore::Node *v17;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  v17 = a14;
  a14 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit((uint64_t *)(v15 - 48));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::platformDidSelectAll(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::Node *v6;
  WebCore::ScrollView *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WebCore::Node *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::Node *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  WebCore::Node *v24;
  WebCore::Node *v25[3];
  uint64_t v26;
  uint64_t v27;

  result = WebKit::WebPage::shouldDispatchSyntheticMouseEventsWhenModifyingSelection((WebKit::WebPage *)this);
  if ((_DWORD)result)
  {
    WebCore::Page::checkedFocusController(this[6]);
    result = WebCore::FocusController::focusedOrMainFrame(v25[0]);
    v3 = result;
    if (result)
    {
      v4 = (unsigned int *)(result + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    v6 = v25[0];
    v25[0] = 0;
    if (v6)
    {
      if (!*(_DWORD *)v6)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v6;
    }
    if (result)
    {
      v7 = *(WebCore::ScrollView **)(result + 288);
      if (v7)
        ++*((_DWORD *)v7 + 2);
      WebCore::VisiblePosition::VisiblePosition();
      v26 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v25, 0);
      v27 = v8;
      v9 = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v26);
      v11 = v10;
      v12 = v25[0];
      v25[0] = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      WebCore::VisiblePosition::VisiblePosition();
      v26 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v25, 0);
      v27 = v13;
      v14 = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v26);
      v16 = v15;
      v17 = v25[0];
      v25[0] = 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
      if ((v11 & 0x80000000) == 0)
        v18 = v11;
      else
        v18 = v11 + 1;
      v19 = (v9 + (v18 >> 1));
      v20 = HIDWORD(v11);
      if ((v11 & 0x8000000000000000) != 0)
        LODWORD(v20) = HIDWORD(v11) + 1;
      v25[0] = (WebCore::Node *)(v19 | ((unint64_t)(HIDWORD(v9) + ((int)v20 >> 1)) << 32));
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)this, 0, (WebCore::IntPoint *)v25);
      if ((v16 & 0x80000000) == 0)
        v21 = v16;
      else
        v21 = v16 + 1;
      v22 = (v14 + (v21 >> 1));
      v23 = HIDWORD(v16);
      if ((v16 & 0x8000000000000000) != 0)
        LODWORD(v23) = HIDWORD(v16) + 1;
      v24 = (WebCore::Node *)(v22 | ((unint64_t)(HIDWORD(v14) + ((int)v23 >> 1)) << 32));
      v25[0] = v24;
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)this, 1, (WebCore::IntPoint *)v25);
      v25[0] = v24;
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)this, 2, (WebCore::IntPoint *)v25);
      if (v7)
      {
        if (*((_DWORD *)v7 + 2) == 1)
          (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v7 + 8))(v7);
        else
          --*((_DWORD *)v7 + 2);
      }
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
    }
  }
  return result;
}

void sub_1973C8388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  uint64_t v10;
  _DWORD *v11;

  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::selectWordBackward(WebCore::Page **this)
{
  unsigned int *result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::FocusController *v5;
  WebCore::Node *v6;
  uint64_t v7;
  WebCore::FocusController *v8[5];
  WebCore::Node *v9;
  uint64_t v10;

  WebCore::Page::checkedFocusController(this[6]);
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v8[0]);
  v2 = (uint64_t)result;
  if (result)
  {
    v3 = result + 2;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = v8[0];
  v8[0] = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1973C85A0);
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 37) + 3064) + 153) == 1)
    {
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::positionOfNextBoundaryOfGranularity();
      if (v9)
      {
        if (!WebCore::operator==((uint64_t)&v9, (uint64_t)&v10))
        {
          WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)v8);
          WebCore::FrameSelection::setSelectedRange();
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8);
        }
        v6 = v9;
        v9 = 0;
        if (v6)
        {
          if (*((_DWORD *)v6 + 6) == 2)
          {
            if ((*((_WORD *)v6 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v6);
          }
          else
          {
            *((_DWORD *)v6 + 6) -= 2;
          }
        }
      }
      v7 = v10;
      v10 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

void sub_1973C85C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15)
{
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v18;
  uint64_t v19;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10);
  v18 = a15;
  a15 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  v19 = *(_QWORD *)(v16 - 40);
  *(_QWORD *)(v16 - 40) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_1973C87AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, uint64_t a10, WebCore::Node *a11)
{
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a9);
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::moveSelectionByOffset(uint64_t a1, int a2, uint64_t *a3)
{
  unsigned int *result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  int v11;
  unint64_t v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  char v15;
  uint64_t v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  int v20;
  char v21;
  char v22;
  WebCore::Node *v23;
  int v24;
  char v25;
  char v26;
  WebCore::Node *v27;
  int v28;
  char v29;
  char v30;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v19);
  v6 = result;
  if (result)
  {
    v7 = result + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1973C8AB8);
    }
    --*(_DWORD *)v9;
  }
  if (result)
  {
    WebCore::VisiblePosition::VisiblePosition();
    v10 = v27;
    if (v27)
    {
      *((_DWORD *)v27 + 6) += 2;
      v23 = v10;
      v24 = v28;
      v25 = v29;
      v26 = v30;
      if (a2)
      {
        if (a2 >= 0)
          v11 = a2;
        else
          v11 = -a2;
        v12 = (unint64_t)WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        while (1)
        {
          WebCore::positionOfNextBoundaryOfGranularity();
          v13 = v19;
          v19 = 0;
          v14 = v23;
          v23 = v13;
          if (!v14)
            goto LABEL_17;
          if (*((_DWORD *)v14 + 6) != 2)
            break;
          if ((*((_WORD *)v14 + 15) & 0x400) != 0)
            goto LABEL_17;
          WebCore::Node::removedLastRef(v14);
          v24 = v20;
          v25 = v21;
          v26 = v22;
          v19 = 0;
LABEL_18:
          v15 = (char)v23;
          if (!v23)
          {
            v12 = 0;
            goto LABEL_25;
          }
          if (!--v11)
          {
            v15 = 0;
            goto LABEL_25;
          }
        }
        *((_DWORD *)v14 + 6) -= 2;
LABEL_17:
        v24 = v20;
        v25 = v21;
        v26 = v22;
        goto LABEL_18;
      }
      v15 = 0;
      v12 = (unint64_t)WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
LABEL_25:
      if (v15 & 1 | v12 && !WebCore::operator==((uint64_t)&v27, (uint64_t)&v23))
      {
        WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v19);
        WebCore::FrameSelection::setSelectedRange();
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19);
      }
      v16 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = v23;
      v23 = 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
      v18 = v27;
      v27 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6 + 2);
  }
  return result;
}

void sub_1973C8ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, uint64_t a17, WebCore::Node *a18)
{
  uint64_t v18;
  WebCore::Node *v20;
  WebCore::Node *v21;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10);
  v20 = a15;
  a15 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  v21 = a18;
  a18 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::startAutoscrollAtPosition(WebKit::WebPage *this, const WebCore::FloatPoint *a2)
{
  unsigned int *result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::FocusController *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::FocusController *v14;
  char v15;

  result = (unsigned int *)*((_QWORD *)this + 6);
  v4 = *((_QWORD *)result + 20);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (!v5)
    return result;
  v6 = *((_QWORD *)this + 115);
  if (v6 && (*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      return (unsigned int *)WebCore::EventHandler::startSelectionAutoscroll();
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x1973C8D1CLL);
  }
  WebCore::Page::checkedFocusController((WebCore::Page *)result);
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v14);
  v7 = result;
  if (result)
  {
    v8 = result + 2;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
      goto LABEL_26;
    --*(_DWORD *)v10;
  }
  if (result)
  {
    v11 = *(_QWORD *)(*((_QWORD *)result + 37) + 3064);
    if (*(_BYTE *)(v11 + 153) == 2)
    {
      WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v11 + 56));
      if (v15 && (*((_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v12 = (unsigned int *)(v4 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        WebCore::EventHandler::startSelectionAutoscroll();
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7 + 2);
  }
  return result;
}

void sub_1973C8D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int *v3;
  va_list va;

  va_start(va, a2);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::requestEvasionRectsAboveSelection(WebCore::Page **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF *v8;
  WebCore::ScrollView *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::Element *v17;
  WebCore::LocalFrame *v18;
  uint64_t v19;
  void *v20;
  unsigned int *result;
  uint64_t v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  void *v26;
  WTF *v27;
  double v28;
  WebCore::Page *v29;
  uint64_t v30;
  double v31;
  float v32;
  _DWORD *v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  float v47;
  double v48;
  float v49;
  float v50;
  float32x2_t *v51;
  float32x2_t *v52;
  uint64_t v53;
  unsigned int *v54;
  BOOL v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v61;
  unsigned int v62;
  int32x2_t v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  unsigned int *v67;
  BOOL v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  __int16 v72;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  int i;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WebCore::ScrollView *v93;
  int v94;
  WebCore::RenderObject *v95;
  uint64_t v96;
  const FloatRect *v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  void *v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  void *v113;
  WTF *v114;
  uint64_t v115;
  float v116;
  float32x2_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  _BYTE v122[24];
  WTF *v123[2];
  _BYTE v124[40];
  uint64_t *v125;
  WTF *v126;
  uint64_t v127;
  __int128 v128;
  char v129[32];
  char v130;
  WTF *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  char v135;
  uint64_t v136;
  int v137;
  char v138;
  uint64_t v139;
  int v140;
  char v141;
  uint64_t v142;
  int v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  __int16 v148;
  char v149;
  uint64_t v150;
  _BYTE v151[12];
  float v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  WebCore::Page::checkedFocusController(a1[6]);
  v4 = WebCore::FocusController::focusedOrMainFrame(v131);
  v5 = v4;
  if (v4)
  {
    v6 = (unsigned int *)(v4 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = v131;
  v131 = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      goto LABEL_184;
    }
    --*(_DWORD *)v8;
  }
  if (v4)
  {
    v9 = *(WebCore::ScrollView **)(v4 + 288);
    if (!v9)
    {
      v131 = 0;
      v132 = 0;
      v112 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v112 + 16))(v112, &v131);
      (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
      v114 = v131;
      if (v131)
      {
        v131 = 0;
        LODWORD(v132) = 0;
        WTF::fastFree(v114, v113);
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    ++*((_DWORD *)v9 + 2);
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 296) + 3064);
    v11 = *(WTF **)(v10 + 56);
    if (v11)
      *((_DWORD *)v11 + 6) += 2;
    v131 = v11;
    LODWORD(v132) = *(_DWORD *)(v10 + 64);
    BYTE4(v132) = *(_BYTE *)(v10 + 68);
    v12 = *(_QWORD *)(v10 + 72);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    v133 = v12;
    v134 = *(_DWORD *)(v10 + 80);
    v135 = *(_BYTE *)(v10 + 84);
    v13 = *(_QWORD *)(v10 + 88);
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    v136 = v13;
    v137 = *(_DWORD *)(v10 + 96);
    v138 = *(_BYTE *)(v10 + 100);
    v14 = *(_QWORD *)(v10 + 104);
    if (v14)
      *(_DWORD *)(v14 + 24) += 2;
    v139 = v14;
    v140 = *(_DWORD *)(v10 + 112);
    v141 = *(_BYTE *)(v10 + 116);
    v15 = *(_QWORD *)(v10 + 120);
    if (v15)
      *(_DWORD *)(v15 + 24) += 2;
    v142 = v15;
    v143 = *(_DWORD *)(v10 + 128);
    v144 = *(_BYTE *)(v10 + 132);
    v16 = *(_QWORD *)(v10 + 136);
    if (v16)
      *(_DWORD *)(v16 + 24) += 2;
    v145 = v16;
    v146 = *(_DWORD *)(v10 + 144);
    v147 = *(_BYTE *)(v10 + 148);
    v148 = *(_WORD *)(v10 + 152);
    v149 = *(_BYTE *)(v10 + 154);
    if (!HIBYTE(v148))
    {
      v123[0] = 0;
      v123[1] = 0;
      v22 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v22 + 16))(v22, v123);
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v24 = v123[0];
      if (v123[0])
      {
        v123[0] = 0;
        LODWORD(v123[1]) = 0;
        WTF::fastFree(v24, v23);
      }
      goto LABEL_35;
    }
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v131);
    if (!v130)
      goto LABEL_32;
    v17 = a1[115];
    if (!v17 || (*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_32;
    if ((*(_BYTE *)((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1973C9940);
    }
    if (WebKit::WebPage::isTransparentOrFullyClipped((WebKit::WebPage *)a1, v17)
      || (WebKit::WebPage::totalScaleFactor((WebKit::WebPage *)a1, v18), v29 = a1[6], (v30 = *((_QWORD *)v29 + 20)) == 0)
      || *(_BYTE *)(v30 + 144))
    {
LABEL_32:
      v123[0] = 0;
      v123[1] = 0;
      v25 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v25 + 16))(v25, v123);
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v27 = v123[0];
      if (v123[0])
      {
        v123[0] = 0;
        LODWORD(v123[1]) = 0;
        WTF::fastFree(v27, v26);
      }
LABEL_34:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v129);
LABEL_35:
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v131);
      if (*((_DWORD *)v9 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v9 + 8))(v9);
      else
        --*((_DWORD *)v9 + 2);
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    v31 = v28;
    v32 = *((float *)v29 + 92);
    v33 = *(_DWORD **)(v30 + 288);
    if (v33)
      ++v33[2];
    WebCore::ScrollView::unobscuredContentRect();
    if ((v34 & 0x80000000) == 0)
      v35 = v34;
    else
      v35 = -(int)v34;
    v36 = HIDWORD(v34);
    if ((v34 & 0x8000000000000000) != 0)
      LODWORD(v36) = -HIDWORD(v34);
    v37 = v35 * (unint64_t)v36;
    if ((v37 & 0xFFFFFFFF00000000) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      if (v33)
      {
        if (v33[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
        else
          --v33[2];
      }
      v128 = 0uLL;
      if (HIBYTE(v148) != 2)
      {
        v150 = WebCore::FrameSelection::absoluteCaretBounds(*(WebCore::FrameSelection **)(*(_QWORD *)(v5 + 296) + 3064), 0);
        *(_QWORD *)v151 = v43;
        v120 = (WTF *)WebCore::ScrollView::contentsToRootView(v9, (const WebCore::IntRect *)&v150);
        v121 = v44;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v123, (const WebCore::IntRect *)&v120);
        v128 = *(_OWORD *)v123;
        goto LABEL_60;
      }
      if (v130)
      {
        WebCore::RenderObject::absoluteTextRects();
        v150 = WebCore::unionRect();
        *(_QWORD *)v151 = v38;
        v120 = (WTF *)WebCore::ScrollView::contentsToRootView(v9, (const WebCore::IntRect *)&v150);
        v121 = v39;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v123, (const WebCore::IntRect *)&v120);
        v128 = *(_OWORD *)v123;
        v42 = v126;
        if (v126)
        {
          v126 = 0;
          LODWORD(v127) = 0;
          WTF::fastFree(v42, v40);
        }
LABEL_60:
        v45 = 0;
        v46 = 0;
        v47 = v31 / v32;
        v48 = v47 * 0.5 * (double)v37;
        LODWORD(v41) = DWORD1(v128);
        v49 = *((float *)&v128 + 3);
        v50 = *(float *)&v128 + (float)(*((float *)&v128 + 2) * 0.5);
        v115 = v41;
        v116 = v50;
        v125 = 0;
        v126 = 0;
        v127 = 0;
        v123[0] = (WTF *)v124;
        v123[1] = (WTF *)5;
        do
        {
          *((_QWORD *)v123[0] + v46) = qword_1978D0950[v45];
          v46 = ++HIDWORD(v123[1]);
          ++v45;
        }
        while (v45 != 5);
        if (v46)
        {
          v51 = (float32x2_t *)v123[0];
          v52 = (float32x2_t *)((char *)v123[0] + 8 * v46);
          v117 = (float32x2_t)__PAIR64__(v41, LODWORD(v50));
          v53 = MEMORY[0x1E0DD5FF0];
          do
          {
            v150 = (uint64_t)vadd_f32(v117, vmul_n_f32(*v51, 1.0 / v47));
            v54 = (unsigned int *)*((_QWORD *)a1[6] + 20);
            if (v54)
              v55 = *((_BYTE *)v54 + 144) == 0;
            else
              v55 = 0;
            if (v55)
            {
              v120 = 0;
              v56 = v54 + 2;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 + 1, v56));
              v58 = WebCore::LocalFrame::nodeRespondingToClickEvents((WebCore::LocalFrame *)v54, (const WebCore::FloatPoint *)&v150, (WebCore::FloatPoint *)&v120, 0);
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v56);
              if (v58)
              {
                v59 = *(_WORD *)(v58 + 28);
                if ((v59 & 0x10) != 0)
                {
                  if ((v59 & 0xF000) != 0x9000
                    && *(_QWORD *)(*(_QWORD *)(v58 + 96) + 24) != *(_QWORD *)(*(_QWORD *)v53 + 24))
                  {
LABEL_77:
                    if (!WebCore::Node::computeEditability())
                    {
                      *(_DWORD *)(v58 + 24) += 2;
                      v150 = v58;
                      WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v125, &v150, (uint64_t)&v120);
                      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v150);
                    }
                  }
                }
                else if ((v59 & 0xF000) != 0x9000)
                {
                  goto LABEL_77;
                }
              }
            }
            ++v51;
          }
          while (v51 != v52);
        }
        v61 = 0;
        v62 = 0;
        v63.i32[1] = HIDWORD(v115);
        *(float *)v63.i32 = 80.0 / v47;
        *(float *)&v150 = *(float *)&v128 - (float)(80.0 / v47);
        *((float *)&v150 + 1) = *(float *)&v115 + (float)(v49 * 0.5);
        *(int32x2_t *)&v151[4] = vrev64_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32(v63, 0), vadd_f32(*(float32x2_t *)&v128, *(float32x2_t *)((char *)&v128 + 8))));
        *(float *)v151 = v116;
        v152 = *((float *)&v150 + 1);
        v120 = (WTF *)v122;
        v121 = 3;
        do
        {
          *((_QWORD *)v120 + v62) = *(_QWORD *)&v151[v61 - 8];
          v62 = ++HIDWORD(v121);
          v61 += 8;
        }
        while (v61 != 24);
        if (v62)
        {
          v64 = v120;
          v65 = (WTF *)((char *)v120 + 8 * v62);
          v66 = MEMORY[0x1E0DD5FF0];
          do
          {
            v67 = (unsigned int *)*((_QWORD *)a1[6] + 20);
            if (v67)
              v68 = *((_BYTE *)v67 + 144) == 0;
            else
              v68 = 0;
            if (v68)
            {
              v150 = 0;
              v69 = v67 + 2;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 + 1, v69));
              v71 = WebCore::LocalFrame::nodeRespondingToClickEvents((WebCore::LocalFrame *)v67, v64, (WebCore::FloatPoint *)&v150, 0);
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v69);
              if (v71)
              {
                v72 = *(_WORD *)(v71 + 28);
                if ((v72 & 0x10) != 0)
                {
                  if ((v72 & 0xF000) != 0x9000
                    && *(_QWORD *)(*(_QWORD *)(v71 + 96) + 24) != *(_QWORD *)(*(_QWORD *)v66 + 24))
                  {
LABEL_100:
                    if (!WebCore::Node::computeEditability() && v125)
                    {
                      v74 = *((_DWORD *)v125 - 2);
                      v75 = (~(v71 << 32) + v71) ^ ((unint64_t)(~(v71 << 32) + v71) >> 22);
                      v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
                      v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
                      v78 = v74 & ((v77 >> 31) ^ v77);
                      for (i = 1; ; ++i)
                      {
                        v80 = v78;
                        v81 = v125[v78];
                        if (v81 != -1)
                        {
                          if (!v81)
                            goto LABEL_101;
                          if (v81 == v71)
                            break;
                        }
                        v78 = (v80 + i) & v74;
                      }
                      if ((_DWORD)v80 != *((_DWORD *)v125 - 1))
                      {
                        *WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v125[v80]) = -1;
                        ++*((_DWORD *)v125 - 4);
                        v82 = v125 ? *((_DWORD *)v125 - 3) - 1 : -1;
                        *((_DWORD *)v125 - 3) = v82;
                        if (v125)
                        {
                          v83 = *((_DWORD *)v125 - 1);
                          if (6 * *((_DWORD *)v125 - 3) < v83 && v83 >= 9)
                            WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash((uint64_t *)&v125, v83 >> 1, 0);
                        }
                      }
                    }
                  }
                }
                else if ((v72 & 0xF000) != 0x9000)
                {
                  goto LABEL_100;
                }
              }
            }
LABEL_101:
            v64 = (WTF *)((char *)v64 + 8);
          }
          while (v64 != v65);
        }
        if (v125)
        {
          v85 = *((unsigned int *)v125 - 1);
          v86 = &v125[v85];
          if (*((_DWORD *)v125 - 3))
          {
            v87 = v125;
            if ((_DWORD)v85)
            {
              v88 = 8 * v85;
              v87 = v125;
              while ((unint64_t)(*v87 + 1) <= 1)
              {
                ++v87;
                v88 -= 8;
                if (!v88)
                {
                  v87 = v86;
                  goto LABEL_132;
                }
              }
            }
            goto LABEL_132;
          }
          v87 = &v125[v85];
        }
        else
        {
          v87 = 0;
          v85 = 0;
        }
        v86 = &v125[v85];
LABEL_132:
        if (v125)
          v89 = &v125[*((unsigned int *)v125 - 1)];
        else
          v89 = 0;
        while (v87 != v89)
        {
          v90 = *v87;
          v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v87 + 40) + 8) + 528);
          if (v91)
          {
            v92 = *(_QWORD *)(v91 + 8);
            if (v92)
            {
              v93 = *(WebCore::ScrollView **)(v92 + 288);
              if (v93)
              {
                v94 = *((_DWORD *)v93 + 2) + 1;
                *((_DWORD *)v93 + 2) = v94;
                v95 = (WebCore::RenderObject *)(*(_QWORD *)(v90 + 64) & 0xFFFFFFFFFFFFLL);
                if (v95)
                {
                  v118 = WebCore::RenderObject::absoluteBoundingBoxRect(v95, 1, 0);
                  v119 = v96;
                  v150 = WebCore::ScrollView::contentsToRootView(v93, (const WebCore::IntRect *)&v118);
                  *(_QWORD *)v151 = v97;
                  if ((int)v97 >= 0)
                    v98 = v97;
                  else
                    v98 = -(int)v97;
                  v99 = (unint64_t)v97 >> 32;
                  if (SHIDWORD(v97) < 0)
                    LODWORD(v99) = -HIDWORD(v97);
                  v100 = v98 * (unint64_t)v99;
                  if ((v100 & 0xFFFFFFFF00000000) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1973C994CLL);
                  }
                  if (v48 >= (double)v100)
                  {
                    v118 = WebCore::enclosingIntRect((WebCore *)&v128, v97);
                    v119 = v101;
                    if ((WebCore::IntRect::contains((WebCore::IntRect *)&v150, (const WebCore::IntRect *)&v118) & 1) == 0)
                    {
                      v102 = HIDWORD(v127);
                      if (HIDWORD(v127) == (_DWORD)v127)
                      {
                        v103 = HIDWORD(v127) + ((unint64_t)HIDWORD(v127) >> 2);
                        if (v103 >= 0x10)
                          v104 = v103 + 1;
                        else
                          v104 = 16;
                        if (v104 <= (unint64_t)HIDWORD(v127) + 1)
                          v105 = HIDWORD(v127) + 1;
                        else
                          v105 = v104;
                        WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v126, v105);
                        v102 = HIDWORD(v127);
                      }
                      WebCore::FloatRect::FloatRect((WTF *)((char *)v126 + 16 * v102), (const WebCore::IntRect *)&v150);
                      ++HIDWORD(v127);
                    }
                  }
                  v94 = *((_DWORD *)v93 + 2);
                }
                if (v94 == 1)
                  (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v93 + 8))(v93);
                else
                  *((_DWORD *)v93 + 2) = v94 - 1;
              }
            }
          }
          v106 = v87 + 1;
          v87 = v86;
          if (v106 != v86)
          {
            v87 = v106;
            while ((unint64_t)(*v87 + 1) <= 1)
            {
              if (++v87 == v86)
              {
                v87 = v86;
                break;
              }
            }
          }
        }
        v107 = *a2;
        *a2 = 0;
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v107 + 16))(v107, &v126);
        (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
        v109 = v120;
        if (v122 != (_BYTE *)v120 && v120)
        {
          v120 = 0;
          LODWORD(v121) = 0;
          WTF::fastFree(v109, v108);
        }
        v110 = v123[0];
        if (v124 != (_BYTE *)v123[0] && v123[0])
        {
          v123[0] = 0;
          LODWORD(v123[1]) = 0;
          WTF::fastFree(v110, v108);
        }
        v111 = v126;
        if (v126)
        {
          v126 = 0;
          LODWORD(v127) = 0;
          WTF::fastFree(v111, v108);
        }
        if (v125)
          WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::deallocateTable(v125, v108);
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_184:
    JUMPOUT(0x1973C98D8);
  }
  v131 = 0;
  v132 = 0;
  v19 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v19 + 16))(v19, &v131);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  result = (unsigned int *)v131;
  if (v131)
  {
    v131 = 0;
    LODWORD(v132) = 0;
    return (unsigned int *)WTF::fastFree((WTF *)result, v20);
  }
  return result;
}

void sub_1973C9958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF *a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF *a35,int a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF *a44,int a45)
{
  uint64_t v45;
  uint64_t v46;
  void *v48;

  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  if (a44)
    WTF::fastFree(a44, v48);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v45 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::getRectsForGranularityWithSelectionOffset(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ScrollView **a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  WebCore::ScrollView *v12;
  void *v13;
  uint64_t result;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Node *v21;
  WebCore::ScrollView *v22;
  void *v23;
  WebCore::ScrollView *v24;
  WTF *v25;
  WebCore::Node *v26;
  WTF *v27;
  uint64_t v28;
  WebCore::Node *v29;
  int v30;
  WebCore::Node *v31;
  int v32;
  char v33;
  WebCore::Node *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  __int16 v52;
  char v53;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v6 = WebCore::FocusController::focusedOrMainFrame(v35);
  v7 = v6;
  if (v6)
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = v35;
  v35 = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v10;
  }
  if (v6)
  {
    if (*(_BYTE *)(a1 + 1481))
      v11 = a1 + 1384;
    else
      v11 = *(_QWORD *)(*(_QWORD *)(v6 + 296) + 3064) + 56;
    v15 = *(WTF **)v11;
    if (*(_QWORD *)v11)
      *((_DWORD *)v15 + 6) += 2;
    v35 = v15;
    LODWORD(v36) = *(_DWORD *)(v11 + 8);
    BYTE4(v36) = *(_BYTE *)(v11 + 12);
    v16 = *(_QWORD *)(v11 + 16);
    if (v16)
      *(_DWORD *)(v16 + 24) += 2;
    v37 = v16;
    v38 = *(_DWORD *)(v11 + 24);
    v39 = *(_BYTE *)(v11 + 28);
    v17 = *(_QWORD *)(v11 + 32);
    if (v17)
      *(_DWORD *)(v17 + 24) += 2;
    v40 = v17;
    v41 = *(_DWORD *)(v11 + 40);
    v42 = *(_BYTE *)(v11 + 44);
    v18 = *(_QWORD *)(v11 + 48);
    if (v18)
      *(_DWORD *)(v18 + 24) += 2;
    v43 = v18;
    v44 = *(_DWORD *)(v11 + 56);
    v45 = *(_BYTE *)(v11 + 60);
    v19 = *(_QWORD *)(v11 + 64);
    if (v19)
      *(_DWORD *)(v19 + 24) += 2;
    v46 = v19;
    v47 = *(_DWORD *)(v11 + 72);
    v48 = *(_BYTE *)(v11 + 76);
    v20 = *(_QWORD *)(v11 + 80);
    if (v20)
      *(_DWORD *)(v20 + 24) += 2;
    v49 = v20;
    v50 = *(_DWORD *)(v11 + 88);
    v51 = *(_BYTE *)(v11 + 92);
    v52 = *(_WORD *)(v11 + 96);
    v53 = *(_BYTE *)(v11 + 98);
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::visiblePositionForPositionWithOffset();
    v21 = v29;
    v29 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    WebCore::enclosingTextUnitOfGranularity();
    if (!v33 || v29 == v31 && v30 == v32)
    {
      v27 = 0;
      v28 = 0;
      v22 = *a4;
      *a4 = 0;
      (*(void (**)(WebCore::ScrollView *, WTF **))(*(_QWORD *)v22 + 16))(v22, &v27);
    }
    else
    {
      WebCore::RenderObject::collectSelectionGeometriesWithoutUnionInteriorLines();
      v22 = *(WebCore::ScrollView **)(v7 + 288);
      if (v22)
        ++*((_DWORD *)v22 + 2);
      WebKit::convertContentToRootView(v22, v27, HIDWORD(v28));
      v24 = *a4;
      *a4 = 0;
      (*(void (**)(WebCore::ScrollView *, WTF **))(*(_QWORD *)v24 + 16))(v24, &v27);
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v24 + 8))(v24);
      if (*((_DWORD *)v22 + 2) != 1)
      {
        --*((_DWORD *)v22 + 2);
        goto LABEL_37;
      }
    }
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v22 + 8))(v22);
LABEL_37:
    v25 = v27;
    if (v27)
    {
      v27 = 0;
      LODWORD(v28) = 0;
      WTF::fastFree(v25, v23);
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29);
    v26 = v34;
    v34 = 0;
    if (v26)
    {
      if (*((_DWORD *)v26 + 6) == 2)
      {
        if ((*((_WORD *)v26 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v26);
      }
      else
      {
        *((_DWORD *)v26 + 6) -= 2;
      }
    }
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v35);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  }
  v35 = 0;
  v36 = 0;
  v12 = *a4;
  *a4 = 0;
  (*(void (**)(WebCore::ScrollView *, WTF **))(*(_QWORD *)v12 + 16))(v12, &v35);
  (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v12 + 8))(v12);
  result = (uint64_t)v35;
  if (v35)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    return WTF::fastFree((WTF *)result, v13);
  }
  return result;
}

void sub_1973C9F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, WebCore::Node *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21)
{
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  void *v25;
  uint64_t v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  if (a10)
    WTF::fastFree(a10, v25);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12);
  v26 = a17;
  a17 = 0;
  if (v26)
  {
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a20);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v21 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebPage::storeSelectionForAccessibility(WebCore::Page **this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;
  uint64_t v8;
  WebCore::Page *v9;
  WebCore::Page *v10;
  int v11;
  WebCore::Page *v12;
  WebCore::Page *v13;
  int v14;
  WebCore::Page *v15;
  WebCore::Page *v16;
  int v17;
  WebCore::Page *v18;
  WebCore::Page *v19;
  int v20;
  WebCore::Page *v21;
  WebCore::Page *v22;
  int v23;
  WebCore::Page *v24;
  WebCore::Page *v25;
  int v26;
  WebCore::FocusController *v27;
  WebCore::Page *v28;
  WebCore::Page *v29;
  WebCore::Page *v30;
  WebCore::Page *v31;
  WebCore::Page *v32;
  WebCore::Page *v33;
  WebCore::Page *v34;
  WebCore::Page *v35;
  WebCore::Page *v36;
  WebCore::Page *v37;
  WebCore::Page *v38;
  WebCore::FocusController *v39;
  int v40;
  char v41;
  WebCore::Page *v42;
  int v43;
  char v44;
  WebCore::Page *v45;
  int v46;
  char v47;
  WebCore::Page *v48;
  int v49;
  char v50;
  WebCore::Page *v51;
  int v52;
  char v53;
  WebCore::Page *v54;
  int v55;
  char v56;
  __int16 v57;
  char v58;

  if ((a2 & 1) != 0)
  {
    WebCore::Page::checkedFocusController(this[6]);
    v3 = WebCore::FocusController::focusedOrMainFrame(v39);
    v4 = v3;
    if (v3)
    {
      v5 = (unsigned int *)(v3 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = v39;
    v39 = 0;
    if (v7)
    {
      if (!*(_DWORD *)v7)
      {
        __break(0xC471u);
        return;
      }
      --*(_DWORD *)v7;
    }
    if (v3)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v3 + 296) + 3064);
      v9 = *(WebCore::Page **)(v8 + 56);
      if (v9)
        *((_DWORD *)v9 + 6) += 2;
      v10 = this[173];
      this[173] = v9;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      v11 = *(_DWORD *)(v8 + 64);
      *((_BYTE *)this + 1396) = *(_BYTE *)(v8 + 68);
      *((_DWORD *)this + 348) = v11;
      v12 = *(WebCore::Page **)(v8 + 72);
      if (v12)
        *((_DWORD *)v12 + 6) += 2;
      v13 = this[175];
      this[175] = v12;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
      v14 = *(_DWORD *)(v8 + 80);
      *((_BYTE *)this + 1412) = *(_BYTE *)(v8 + 84);
      *((_DWORD *)this + 352) = v14;
      v15 = *(WebCore::Page **)(v8 + 88);
      if (v15)
        *((_DWORD *)v15 + 6) += 2;
      v16 = this[177];
      this[177] = v15;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
      }
      v17 = *(_DWORD *)(v8 + 96);
      *((_BYTE *)this + 1428) = *(_BYTE *)(v8 + 100);
      *((_DWORD *)this + 356) = v17;
      v18 = *(WebCore::Page **)(v8 + 104);
      if (v18)
        *((_DWORD *)v18 + 6) += 2;
      v19 = this[179];
      this[179] = v18;
      if (v19)
      {
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      v20 = *(_DWORD *)(v8 + 112);
      *((_BYTE *)this + 1444) = *(_BYTE *)(v8 + 116);
      *((_DWORD *)this + 360) = v20;
      v21 = *(WebCore::Page **)(v8 + 120);
      if (v21)
        *((_DWORD *)v21 + 6) += 2;
      v22 = this[181];
      this[181] = v21;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
      v23 = *(_DWORD *)(v8 + 128);
      *((_BYTE *)this + 1460) = *(_BYTE *)(v8 + 132);
      *((_DWORD *)this + 364) = v23;
      v24 = *(WebCore::Page **)(v8 + 136);
      if (v24)
        *((_DWORD *)v24 + 6) += 2;
      v25 = this[183];
      this[183] = v24;
      if (v25)
      {
        if (*((_DWORD *)v25 + 6) == 2)
        {
          if ((*((_WORD *)v25 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v25);
        }
        else
        {
          *((_DWORD *)v25 + 6) -= 2;
        }
      }
      v26 = *(_DWORD *)(v8 + 144);
      *((_BYTE *)this + 1476) = *(_BYTE *)(v8 + 148);
      *((_DWORD *)this + 368) = v26;
      LOWORD(v26) = *(_WORD *)(v8 + 152);
      *((_BYTE *)this + 1482) = *(_BYTE *)(v8 + 154);
      *((_WORD *)this + 740) = v26;
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
    }
  }
  else
  {
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v39);
    v27 = v39;
    v39 = 0;
    v28 = this[173];
    this[173] = v27;
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v28);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    *((_DWORD *)this + 348) = v40;
    *((_BYTE *)this + 1396) = v41;
    v29 = v42;
    v42 = 0;
    v30 = this[175];
    this[175] = v29;
    if (v30)
    {
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v30);
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
    }
    *((_DWORD *)this + 352) = v43;
    *((_BYTE *)this + 1412) = v44;
    v31 = v45;
    v45 = 0;
    v32 = this[177];
    this[177] = v31;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    *((_DWORD *)this + 356) = v46;
    *((_BYTE *)this + 1428) = v47;
    v33 = v48;
    v48 = 0;
    v34 = this[179];
    this[179] = v33;
    if (v34)
    {
      if (*((_DWORD *)v34 + 6) == 2)
      {
        if ((*((_WORD *)v34 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v34);
      }
      else
      {
        *((_DWORD *)v34 + 6) -= 2;
      }
    }
    *((_DWORD *)this + 360) = v49;
    *((_BYTE *)this + 1444) = v50;
    v35 = v51;
    v51 = 0;
    v36 = this[181];
    this[181] = v35;
    if (v36)
    {
      if (*((_DWORD *)v36 + 6) == 2)
      {
        if ((*((_WORD *)v36 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v36);
      }
      else
      {
        *((_DWORD *)v36 + 6) -= 2;
      }
    }
    *((_DWORD *)this + 364) = v52;
    *((_BYTE *)this + 1460) = v53;
    v37 = v54;
    v54 = 0;
    v38 = this[183];
    this[183] = v37;
    if (v38)
    {
      if (*((_DWORD *)v38 + 6) == 2)
      {
        if ((*((_WORD *)v38 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v38);
      }
      else
      {
        *((_DWORD *)v38 + 6) -= 2;
      }
    }
    *((_DWORD *)this + 368) = v55;
    *((_BYTE *)this + 1476) = v56;
    *((_WORD *)this + 740) = v57;
    *((_BYTE *)this + 1482) = v58;
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v39);
  }
}

void sub_1973CA520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (!a10)
LABEL_4:
    _Unwind_Resume(a1);
  if (*a10)
  {
    --*a10;
    goto LABEL_4;
  }
  __break(0xC471u);
}

unsigned int *WebKit::WebPage::getRectsAtSelectionOffsetWithText(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3, WebCore::ScrollView **a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::FocusController *v11;
  WebCore::ScrollView *v12;
  void *v13;
  unsigned int *result;
  WebCore::FocusController *v15;
  WebCore::FocusController *v16;
  WebCore::ScrollView *v17;
  void *v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  WebCore::FocusController *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::ScrollView *v26;
  WTF *v27;
  WebCore::Node *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  WebCore::Node *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char v47;
  WebCore::FocusController *v48;
  int v49;
  uint64_t v50;
  int v51;
  WebCore::FocusController *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;

  v6 = (uint64_t *)a1;
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v7 = WebCore::FocusController::focusedOrMainFrame(v52);
  v8 = v7;
  if (v7)
  {
    v9 = (unsigned int *)(v7 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = v52;
  v52 = 0;
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      __break(0xC471u);
      goto LABEL_61;
    }
    --*(_DWORD *)v11;
  }
  if (!v7)
  {
    v52 = 0;
    v53 = 0;
    v12 = *a4;
    *a4 = 0;
    (*(void (**)(WebCore::ScrollView *, WebCore::FocusController **))(*(_QWORD *)v12 + 16))(v12, &v52);
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v12 + 8))(v12);
    result = (unsigned int *)v52;
    if (v52)
    {
      v52 = 0;
      LODWORD(v53) = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, v13);
    }
    return result;
  }
  if (*((_BYTE *)v6 + 1481))
    v6 += 173;
  else
    v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064) + 56);
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::visiblePositionForPositionWithOffset();
  v15 = v52;
  v52 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  while (1)
  {
    WebCore::visiblePositionForPositionWithOffset();
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition>((uint64_t)&v34);
    v16 = v52;
    v52 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    if (!v38 || v34 == v36 && v35 == v37)
    {
      v52 = 0;
      v53 = 0;
      v17 = *a4;
      *a4 = 0;
      (*(void (**)(WebCore::ScrollView *, WebCore::FocusController **))(*(_QWORD *)v17 + 16))(v17, &v52);
LABEL_23:
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v17 + 8))(v17);
      goto LABEL_47;
    }
    WebCore::plainTextReplacingNoBreakSpace();
    v21 = WTF::equal(v52, *a3, v19);
    v22 = v52;
    v52 = 0;
    if (!v22)
      goto LABEL_27;
    if (*(_DWORD *)v22 != 2)
    {
      *(_DWORD *)v22 -= 2;
LABEL_27:
      if ((v21 & 1) != 0)
        goto LABEL_42;
      goto LABEL_30;
    }
    WTF::StringImpl::destroy(v22, v20);
    if ((v21 & 1) != 0)
      goto LABEL_42;
LABEL_30:
    WebCore::VisibleSelection::firstRange((WebCore::VisibleSelection *)v6);
    if (v56)
    {
      v23 = v52;
      *((_DWORD *)v52 + 6) += 2;
      v48 = v23;
      v49 = v53;
      v6 = &v50;
      v24 = v54;
      *(_DWORD *)(v54 + 24) += 2;
      v50 = v24;
      v51 = v55;
      WebCore::makeBoundaryPoint();
      if (v47)
      {
        WebCore::SimpleRange::SimpleRange();
        WebCore::characterCount();
        WebCore::findClosestPlainText();
        v29 = v42;
        v30 = v43;
        v25 = v44;
        v42 = 0;
        v44 = 0;
        v31 = v25;
        v32 = v45;
        v33 = 1;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v44);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v42);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v41);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v40);
        if (v47)
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v46);
      }
      else
      {
        LOBYTE(v29) = 0;
        v33 = 0;
      }
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v50);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v48);
    }
    else
    {
      LOBYTE(v29) = 0;
      v33 = 0;
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52);
    if (v33 && (v29 != v31 || v30 != v32))
      std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>((uint64_t)&v34, &v29);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29);
LABEL_42:
    if (v38)
      break;
LABEL_61:
    __break(1u);
  }
  WebCore::RenderObject::collectSelectionGeometriesWithoutUnionInteriorLines();
  v17 = *(WebCore::ScrollView **)(v8 + 288);
  if (v17)
    ++*((_DWORD *)v17 + 2);
  WebKit::convertContentToRootView(v17, v52, HIDWORD(v53));
  v26 = *a4;
  *a4 = 0;
  (*(void (**)(WebCore::ScrollView *, WebCore::FocusController **))(*(_QWORD *)v26 + 16))(v26, &v52);
  (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v26 + 8))(v26);
  if (*((_DWORD *)v17 + 2) == 1)
    goto LABEL_23;
  --*((_DWORD *)v17 + 2);
LABEL_47:
  v27 = v52;
  if (v52)
  {
    v52 = 0;
    LODWORD(v53) = 0;
    WTF::fastFree(v27, v18);
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34);
  v28 = v39;
  v39 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
}

void sub_1973CAA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WebCore::Node *a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  WebCore::Node *v25;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15);
  v25 = a20;
  a20 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v23 + 8));
  _Unwind_Resume(a1);
}

void sub_1973CABC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 104);
  *(_QWORD *)(v0 - 104) = 0;
  if (!v1)
    JUMPOUT(0x1973CABA0);
  JUMPOUT(0x1973CAB90);
}

void sub_1973CABD4()
{
  JUMPOUT(0x1973CABA0);
}

void sub_1973CABDC()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = *(_DWORD **)(v0 - 104);
  *(_QWORD *)(v0 - 104) = 0;
  if (v1)
  {
    if (*v1)
      --*v1;
    else
      __break(0xC471u);
  }
  JUMPOUT(0x1973CABA8);
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition>@<X0>(uint64_t a1@<X8>)
{
  uint64_t *result;
  int v3;
  BOOL v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  WebCore::makeBoundaryPoint();
  result = (uint64_t *)WebCore::makeBoundaryPoint();
  v3 = v8;
  if (v10)
    v4 = v8 == 0;
  else
    v4 = 1;
  if (v4)
  {
    v6 = 0;
    *(_BYTE *)a1 = 0;
  }
  else
  {
    WebCore::SimpleRange::SimpleRange();
    *(_QWORD *)a1 = v11;
    *(_DWORD *)(a1 + 8) = v12;
    v5 = v13;
    v11 = 0;
    v13 = 0;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = v14;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
    result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    v3 = v8;
    v6 = 1;
  }
  *(_BYTE *)(a1 + 32) = v6;
  if (v3)
    result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v7);
  if (v10)
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v9);
  return result;
}

void sub_1973CACF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a11)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  if (a15)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a13);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::constrainPoint(WebKit *this, const WebCore::IntPoint *a2, const WebCore::LocalFrame *a3, const WebCore::Element *a4)
{
  const WebCore::Node *v6;
  uint64_t v7;
  WebKit::WebPage *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  WebCore::Document::updateLayout();
  if ((*((_WORD *)a3 + 14) & 0x10) != 0
    && ((v7 = *(_QWORD *)(*((_QWORD *)a3 + 12) + 24), v7 == *(_QWORD *)(*MEMORY[0x1E0DD5D90] + 24))
     || v7 == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24)
     || v7 == *(_QWORD *)(*MEMORY[0x1E0DD6218] + 24)))
  {
    v8 = a3;
  }
  else
  {
    v8 = (WebKit::WebPage *)WebCore::Node::rootEditableElement(a3);
    if (!v8)
    {
      v9 = 0;
      goto LABEL_9;
    }
  }
  v8 = (WebKit::WebPage *)WebKit::WebPage::absoluteInteractionBounds(v8, v6);
LABEL_9:
  v10 = *((_DWORD *)this + 1);
  v11 = (_DWORD)v8 + 2;
  v12 = v9 + (_DWORD)v8 - 2;
  v13 = HIDWORD(v8) + 2;
  if ((signed int)v12 >= *(_DWORD *)this)
    v12 = *(_DWORD *)this;
  if (v11 <= *(_DWORD *)this)
    v14 = v12;
  else
    v14 = v11;
  if (HIDWORD(v9) + HIDWORD(v8) - 2 >= v10)
    v15 = *((_DWORD *)this + 1);
  else
    v15 = HIDWORD(v9) + HIDWORD(v8) - 2;
  if (v13 <= v10)
    v16 = v15;
  else
    v16 = v13;
  return v14 | (v16 << 32);
}

uint64_t WebKit::WebPage::selectPositionAtPoint(uint64_t a1, int32x2_t *a2, int a3, uint64_t *a4)
{
  char v8;
  WebCore::ScrollView **v9;
  WebCore::ScrollView **v10;
  unsigned int *v11;
  unsigned int v12;
  WebCore::FocusController *v13;
  uint64_t (*v14)();
  uint64_t v15;
  WebCore::Node *v16;
  uint64_t result;
  uint64_t v18;
  WebCore::FocusController *v19[5];
  WebCore::Node *v20;

  v8 = *(_BYTE *)(a1 + 912);
  *(_BYTE *)(a1 + 912) = 1;
  WebKit::WebPage::setFocusedFrameBeforeSelectingTextAtLocation(a1, a2);
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v9 = (WebCore::ScrollView **)WebCore::FocusController::focusedOrMainFrame(v19[0]);
  v10 = v9;
  if (v9)
  {
    v11 = (unsigned int *)(v9 + 1);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (!*(_DWORD *)v13)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v13;
  }
  if (v9)
  {
    WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)&v20, (const WebCore::LocalFrame *)a1, v9, (WebCore::IntPoint *)a2, a3);
    if (v20)
      v14 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v14 = 0;
    if (v14)
    {
      WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)v19);
      WebCore::FrameSelection::setSelectedRange();
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19);
    }
    v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v20;
    v20 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v10 + 2);
  }
  else
  {
    v18 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  *(_BYTE *)(a1 + 912) = v8;
  return result;
}

void sub_1973CAFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14)
{
  uint64_t v14;
  uint64_t v15;
  char v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *(_BYTE *)(v14 + 912) = v16;
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::selectPositionAtBoundaryWithDirection(WebCore::Page **a1, WebCore::IntPoint *a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  WebCore::ScrollView **v10;
  WebCore::ScrollView **v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::Node *v14;
  uint64_t (*v15)();
  WebCore::Node *v16;
  WebCore::Node *v17;
  uint64_t (*v18)();
  uint64_t v19;
  WebCore::Node *v20;
  uint64_t v22;
  WebCore::Node *v23;
  int v24;
  char v25;
  char v26;
  WebCore::Node *v27;
  int v28;
  char v29;
  char v30;

  WebCore::Page::checkedFocusController(a1[6]);
  v10 = (WebCore::ScrollView **)WebCore::FocusController::focusedOrMainFrame(v23);
  v11 = v10;
  if (v10)
  {
    v12 = (unsigned int *)(v10 + 1);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = v23;
  v23 = 0;
  if (v14)
  {
    if (!*(_DWORD *)v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1973CB2A4);
    }
    --*(_DWORD *)v14;
  }
  if (!v10)
  {
    v22 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)&v27, (const WebCore::LocalFrame *)a1, v10, a2, a5);
  if (v27)
    v15 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v15 = 0;
  if (v15)
  {
    WebCore::positionOfNextBoundaryOfGranularity();
    v16 = v23;
    v23 = 0;
    v17 = v27;
    v27 = v16;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v17);
          v28 = v24;
          v29 = v25;
          v30 = v26;
          v23 = 0;
LABEL_16:
          if (v27)
            v18 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v18 = 0;
          if (v18)
          {
            WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v23);
            WebCore::FrameSelection::setSelectedRange();
            std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23);
          }
          goto LABEL_21;
        }
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    v28 = v24;
    v29 = v25;
    v30 = v26;
    goto LABEL_16;
  }
LABEL_21:
  v19 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v11 + 2);
}

void sub_1973CB2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14)
{
  uint64_t v14;
  WebCore::Node *v16;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  v16 = a14;
  a14 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::moveSelectionAtBoundaryWithDirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t (*v16)();
  uint64_t v17;
  WebCore::Node *v18;
  int v19;
  char v20;
  char v21;
  WebCore::Node *v22;
  int v23;
  char v24;
  char v25;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v5 = WebCore::FocusController::focusedOrMainFrame(v18);
  v6 = v5;
  if (v5)
  {
    v7 = (unsigned int *)(v5 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = v18;
  v18 = 0;
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1973CB5F0);
    }
    --*(_DWORD *)v9;
  }
  if (!v5)
  {
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064);
  if (*(_BYTE *)(v10 + 153))
  {
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::positionOfNextBoundaryOfGranularity();
    v13 = v18;
    v18 = 0;
    v14 = v22;
    v22 = v13;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v14);
          v23 = v19;
          v24 = v20;
          v25 = v21;
          v18 = 0;
          goto LABEL_15;
        }
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    v23 = v19;
    v24 = v20;
    v25 = v21;
LABEL_15:
    v15 = v22;
    v16 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v22)
      v16 = 0;
    if (v16)
    {
      WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v18);
      WebCore::FrameSelection::setSelectedRange();
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18);
      v15 = v22;
    }
    v22 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
  }
  v17 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
}

void sub_1973CB658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14)
{
  uint64_t v14;
  WebCore::Node *v16;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  v16 = a14;
  a14 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  _Unwind_Resume(a1);
}

WebCore::Node *WebKit::WebPage::rangeForGranularityAtPoint(_BYTE *a1, const WebCore::LocalFrame *a2, uint64_t a3, WebCore::IntPoint *a4, int a5, int a6)
{
  WebCore::Node *result;
  WebCore::Node *v10;

  WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)&v10, a2, (WebCore::ScrollView **)a3, a4, a6);
  switch(a5)
  {
    case 0:
      WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)a1);
      break;
    case 1:
      WebCore::wordRangeFromPosition();
      break;
    case 2:
    case 4:
      WebCore::enclosingTextUnitOfGranularity();
      break;
    case 5:
      WebCore::FrameSelection::selectAll(*(WebCore::FrameSelection **)(*(_QWORD *)(a3 + 296) + 3064));
      goto LABEL_6;
    default:
LABEL_6:
      *a1 = 0;
      a1[32] = 0;
      break;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

void sub_1973CB804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a10);
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::setSelectionRange(uint64_t a1, int32x2_t *a2, int a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::FocusController *v12;
  WebCore::FocusController *v13;
  uint64_t v14;
  WebCore::FocusController *v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  WebCore::FocusController *v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;

  WebKit::WebPage::setFocusedFrameBeforeSelectingTextAtLocation(a1, a2);
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = WebCore::FocusController::focusedOrMainFrame(v20);
  v9 = result;
  if (result)
  {
    v10 = (unsigned int *)(result + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = v20;
  v20 = 0;
  if (v12)
  {
    if (!*(_DWORD *)v12)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v12;
  }
  if (result)
  {
    WebKit::WebPage::rangeForGranularityAtPoint(&v20, (const WebCore::LocalFrame *)a1, result, (WebCore::IntPoint *)a2, a3, a4);
    if (v24)
    {
      v13 = v20;
      *((_DWORD *)v20 + 6) += 2;
      v15 = v13;
      v16 = v21;
      v14 = v22;
      *(_DWORD *)(v22 + 24) += 2;
      v17 = v14;
      v18 = v23;
      v19 = 1;
      WebCore::FrameSelection::setSelectedRange();
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15);
    }
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SimpleRange,false> const&>((uint64_t *)(a1 + 1344), (uint64_t)&v20);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
  }
  return result;
}

void sub_1973CB994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::selectTextWithGranularityAtPoint(uint64_t a1, int32x2_t *a2, char a3, char a4, uint64_t *a5)
{
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 1264))
  {
    WebKit::WebPage::setSelectionRange(a1, a2, a3, a4);
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v10 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = *a2;
  v12 = *a5;
  *a5 = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v13 = *(unsigned int **)(a1 + 24);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  result = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)result = &off_1E34D8E28;
  *(int32x2_t *)(result + 8) = v11;
  *(_BYTE *)(result + 16) = a3;
  *(_BYTE *)(result + 17) = a4;
  *(_QWORD *)(result + 24) = v12;
  *(_QWORD *)(result + 32) = v13;
  *(_QWORD *)(result + 40) = a1;
  v16 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = result;
  if (v16)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return result;
}

void sub_1973CBB30(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::beginSelectionInDirection(uint64_t a1, int a2, uint64_t *a3)
{
  BOOL v3;
  _BOOL8 v4;
  int v5;
  uint64_t v6;

  v3 = a2 == 3;
  v4 = a2 == 3;
  v5 = !v3;
  *(_DWORD *)(a1 + 1260) = v5;
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v6 + 16))(v6, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void sub_1973CBBD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::updateSelectionWithExtentPointAndBoundary(uint64_t a1, WebCore::IntPoint *a2, int a3, int a4, uint64_t *a5)
{
  WebCore::ScrollView **v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::FocusController *v14;
  uint64_t DeprecatedLegacyPosition;
  int v16;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  _BOOL4 v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  _BOOL8 v27;
  uint64_t v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  uint64_t v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  int v37;
  char v38;
  char v39;
  char v40;
  WebCore::Node *v41;
  WebCore::Node *v42;
  int v43;
  char v44;
  char v45;
  WebCore::Node *v46;
  int v47;
  char v48;
  char v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  WebCore::FocusController *v52[4];
  char v53;
  _QWORD v54[3];

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v10 = (WebCore::ScrollView **)WebCore::FocusController::focusedOrMainFrame(v52[0]);
  v11 = (uint64_t)v10;
  if (v10)
  {
    v12 = (unsigned int *)(v10 + 1);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = v52[0];
  v52[0] = 0;
  if (v14)
  {
    if (!*(_DWORD *)v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1973CC05CLL);
    }
    --*(_DWORD *)v14;
  }
  if (!v10)
  {
    v19 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)v54, (const WebCore::LocalFrame *)a1, v10, a2, a4);
  WebKit::WebPage::rangeForGranularityAtPoint(v52, (const WebCore::LocalFrame *)a1, v11, a2, a3, a4);
  if (v54[0] && *(_BYTE *)(a1 + 1376) && v53)
  {
    DeprecatedLegacyPosition = WebCore::makeDeprecatedLegacyPosition();
    if (*(_BYTE *)(a1 + 1376))
    {
      WebCore::makeDeprecatedLegacyPosition();
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::VisiblePosition::VisiblePosition();
      v16 = (char)WebCore::documentOrder();
      DeprecatedLegacyPosition = (uint64_t)v36;
      v36 = 0;
      if (DeprecatedLegacyPosition)
      {
        if (*(_DWORD *)(DeprecatedLegacyPosition + 24) == 2)
        {
          if ((*(_WORD *)(DeprecatedLegacyPosition + 30) & 0x400) == 0)
            DeprecatedLegacyPosition = WebCore::Node::removedLastRef((WebCore::Node *)DeprecatedLegacyPosition);
        }
        else
        {
          *(_DWORD *)(DeprecatedLegacyPosition + 24) -= 2;
        }
      }
      if (v16 < 1)
      {
        WebCore::VisiblePosition::VisiblePosition();
        v21 = (char)WebCore::documentOrder();
        v23 = v21 != -127 && v21 < 0;
        DeprecatedLegacyPosition = (uint64_t)v36;
        v36 = 0;
        if (DeprecatedLegacyPosition)
        {
          if (*(_DWORD *)(DeprecatedLegacyPosition + 24) == 2)
          {
            if ((*(_WORD *)(DeprecatedLegacyPosition + 30) & 0x400) == 0)
              DeprecatedLegacyPosition = WebCore::Node::removedLastRef((WebCore::Node *)DeprecatedLegacyPosition);
          }
          else
          {
            *(_DWORD *)(DeprecatedLegacyPosition + 24) -= 2;
          }
        }
        if (!v23)
          goto LABEL_42;
        if (v53)
        {
          WebCore::makeDeprecatedLegacyPosition();
          WebCore::VisiblePosition::VisiblePosition();
          v24 = v36;
          v36 = 0;
          v25 = v46;
          v46 = v24;
          if (v25)
          {
            if (*((_DWORD *)v25 + 6) == 2)
            {
              if ((*((_WORD *)v25 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v25);
                v35 = v36;
                v47 = v37;
                v48 = v38;
                v49 = v39;
                goto LABEL_88;
              }
            }
            else
            {
              *((_DWORD *)v25 + 6) -= 2;
            }
          }
          v47 = v37;
          v48 = v38;
          v49 = v39;
          goto LABEL_38;
        }
      }
      else if (v53)
      {
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        v17 = v36;
        v36 = 0;
        DeprecatedLegacyPosition = (uint64_t)v42;
        v42 = v17;
        if (!DeprecatedLegacyPosition)
        {
LABEL_20:
          v43 = v37;
          v44 = v38;
          v45 = v39;
LABEL_38:
          v36 = 0;
LABEL_39:
          v26 = v41;
          v41 = 0;
          if (v26)
          {
            if (*((_DWORD *)v26 + 6) == 2)
            {
              if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v26);
            }
            else
            {
              *((_DWORD *)v26 + 6) -= 2;
            }
          }
LABEL_42:
          WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v36);
          if (v40)
            WebCore::FrameSelection::setSelectedRange();
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
          WebCore::VisiblePosition::VisiblePosition();
          v27 = WebCore::operator==((uint64_t)&v46, (uint64_t)&v36);
          v28 = *a5;
          *a5 = 0;
          (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v28 + 16))(v28, v27);
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v29 = v36;
          v36 = 0;
          if (v29)
          {
            if (*((_DWORD *)v29 + 6) == 2)
            {
              if ((*((_WORD *)v29 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v29);
            }
            else
            {
              *((_DWORD *)v29 + 6) -= 2;
            }
          }
          v30 = v42;
          v42 = 0;
          if (v30)
          {
            if (*((_DWORD *)v30 + 6) == 2)
            {
              if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v30);
            }
            else
            {
              *((_DWORD *)v30 + 6) -= 2;
            }
          }
          v31 = v46;
          v46 = 0;
          if (v31)
          {
            if (*((_DWORD *)v31 + 6) == 2)
            {
              if ((*((_WORD *)v31 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v31);
            }
            else
            {
              *((_DWORD *)v31 + 6) -= 2;
            }
          }
          v32 = v50;
          v50 = 0;
          if (v32)
          {
            if (*((_DWORD *)v32 + 6) == 2)
            {
              if ((*((_WORD *)v32 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v32);
            }
            else
            {
              *((_DWORD *)v32 + 6) -= 2;
            }
          }
          v33 = v51;
          v51 = 0;
          if (v33)
          {
            if (*((_DWORD *)v33 + 6) == 2)
            {
              if ((*((_WORD *)v33 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v33);
            }
            else
            {
              *((_DWORD *)v33 + 6) -= 2;
            }
          }
          goto LABEL_59;
        }
        if (*(_DWORD *)(DeprecatedLegacyPosition + 24) != 2)
        {
          *(_DWORD *)(DeprecatedLegacyPosition + 24) -= 2;
          goto LABEL_20;
        }
        goto LABEL_82;
      }
    }
    __break(1u);
LABEL_82:
    if ((*(_WORD *)(DeprecatedLegacyPosition + 30) & 0x400) != 0)
      goto LABEL_20;
    WebCore::Node::removedLastRef((WebCore::Node *)DeprecatedLegacyPosition);
    v35 = v36;
    v43 = v37;
    v44 = v38;
    v45 = v39;
LABEL_88:
    v36 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
    goto LABEL_39;
  }
  v18 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_59:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52);
  v34 = v54[0];
  v54[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)(v34 + 24) == 2)
    {
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v34);
    }
    else
    {
      *(_DWORD *)(v34 + 24) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
}

void sub_1973CC164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WebCore::Node *a17, uint64_t a18, uint64_t a19, WebCore::Node *a20,uint64_t a21,uint64_t a22,WebCore::Node *a23,uint64_t a24,WebCore::Node *a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  if (a15)
  {
    if (*(_DWORD *)(a15 + 24) == 2)
    {
      if ((*(_WORD *)(a15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a15);
    }
    else
    {
      *(_DWORD *)(a15 + 24) -= 2;
    }
  }
  if (a17)
  {
    if (*((_DWORD *)a17 + 6) == 2)
    {
      if ((*((_WORD *)a17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a17);
    }
    else
    {
      *((_DWORD *)a17 + 6) -= 2;
    }
  }
  if (a20)
  {
    if (*((_DWORD *)a20 + 6) == 2)
    {
      if ((*((_WORD *)a20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a20);
    }
    else
    {
      *((_DWORD *)a20 + 6) -= 2;
    }
  }
  if (a23)
  {
    if (*((_DWORD *)a23 + 6) == 2)
    {
      if ((*((_WORD *)a23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a23);
    }
    else
    {
      *((_DWORD *)a23 + 6) -= 2;
    }
  }
  if (a25)
  {
    if (*((_DWORD *)a25 + 6) == 2)
    {
      if ((*((_WORD *)a25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a25);
    }
    else
    {
      *((_DWORD *)a25 + 6) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v26 - 128);
  v28 = *(_QWORD *)(v26 - 88);
  *(_QWORD *)(v26 - 88) = 0;
  if (v28)
  {
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::updateSelectionWithExtentPoint(uint64_t a1, WebCore::IntPoint *a2, int a3, int a4, uint64_t *a5)
{
  WebCore::ScrollView **v10;
  WebCore::ScrollView **v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WebCore::Node **v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  int v40;
  WebCore::Node *v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  _BOOL8 v45;
  uint64_t v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  int v51;
  char v52;
  char v53;
  char v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  int v57;
  char v58;
  char v59;
  WebCore::Node *v60;
  int v61;
  char v62;
  char v63;
  WebCore::Node *v64;
  int v65;
  char v66;
  char v67;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v10 = (WebCore::ScrollView **)WebCore::FocusController::focusedOrMainFrame(v50);
  v11 = v10;
  if (v10)
  {
    v12 = (unsigned int *)(v10 + 1);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = v50;
  v50 = 0;
  if (v14)
  {
    if (!*(_DWORD *)v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1973CCAECLL);
    }
    --*(_DWORD *)v14;
  }
  if (!v10)
  {
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)&v64, (const WebCore::LocalFrame *)a1, v10, a2, a3);
  v15 = v64;
  if (v64)
  {
    v60 = 0;
    v61 = 0;
    v62 &= 0xF0u;
    v63 = 1;
    v56 = 0;
    v57 = 0;
    v58 &= 0xF0u;
    v59 = 1;
    if (a4)
    {
      if (*(_DWORD *)(a1 + 1260))
      {
        *((_DWORD *)v64 + 6) += 2;
        v60 = v15;
        v61 = v65;
        v62 = v66;
        v63 = v67;
        WebCore::VisiblePosition::VisiblePosition();
        v31 = v50;
        v50 = 0;
        v32 = v56;
        v56 = v31;
        if (v32)
        {
          if (*((_DWORD *)v32 + 6) == 2)
          {
            if ((*((_WORD *)v32 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v32);
              v57 = v51;
              v58 = v52;
              v59 = v53;
              v50 = 0;
LABEL_51:
              if ((char)WebCore::documentOrder() < 0)
              {
LABEL_77:
                WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v50);
                if (v54)
                  WebCore::FrameSelection::setSelectedRange();
                std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v50);
                v45 = *(_DWORD *)(a1 + 1260) == 0;
                v46 = *a5;
                *a5 = 0;
                (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v46 + 16))(v46, v45);
                (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
                v47 = v56;
                v56 = 0;
                if (v47)
                {
                  if (*((_DWORD *)v47 + 6) == 2)
                  {
                    if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v47);
                  }
                  else
                  {
                    *((_DWORD *)v47 + 6) -= 2;
                  }
                }
                v48 = v60;
                v60 = 0;
                if (v48)
                {
                  if (*((_DWORD *)v48 + 6) == 2)
                  {
                    if ((*((_WORD *)v48 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v48);
                  }
                  else
                  {
                    *((_DWORD *)v48 + 6) -= 2;
                  }
                }
                goto LABEL_85;
              }
              WebCore::VisiblePosition::VisiblePosition();
              v33 = v50;
              v50 = 0;
              v34 = v60;
              v60 = v33;
              if (v34)
              {
                if (*((_DWORD *)v34 + 6) == 2)
                {
                  if ((*((_WORD *)v34 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v34);
                    v61 = v51;
                    v62 = v52;
                    v63 = v53;
                    v50 = 0;
LABEL_56:
                    WebCore::VisiblePosition::next();
                    v35 = v50;
                    v50 = 0;
                    v36 = v56;
                    v56 = v35;
                    if (v36)
                    {
                      if (*((_DWORD *)v36 + 6) == 2)
                      {
                        if ((*((_WORD *)v36 + 15) & 0x400) == 0)
                        {
                          WebCore::Node::removedLastRef(v36);
                          v57 = v51;
                          v58 = v52;
                          v59 = v53;
                          v50 = 0;
                          goto LABEL_60;
                        }
                      }
                      else
                      {
                        *((_DWORD *)v36 + 6) -= 2;
                      }
                    }
                    v57 = v51;
                    v58 = v52;
                    v59 = v53;
LABEL_60:
                    *(_DWORD *)(a1 + 1260) = 0;
                    goto LABEL_77;
                  }
                }
                else
                {
                  *((_DWORD *)v34 + 6) -= 2;
                }
              }
              v61 = v51;
              v62 = v52;
              v63 = v53;
              goto LABEL_56;
            }
          }
          else
          {
            *((_DWORD *)v32 + 6) -= 2;
          }
        }
        v57 = v51;
        v58 = v52;
        v59 = v53;
        goto LABEL_51;
      }
      WebCore::VisiblePosition::VisiblePosition();
      v37 = v50;
      v50 = 0;
      v60 = v37;
      v61 = v51;
      v62 = v52;
      v63 = v53;
      v38 = v64;
      if (v64)
        *((_DWORD *)v64 + 6) += 2;
      v39 = v56;
      v56 = v38;
      if (v39)
      {
        if (*((_DWORD *)v39 + 6) == 2)
        {
          if ((*((_WORD *)v39 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v39);
        }
        else
        {
          *((_DWORD *)v39 + 6) -= 2;
        }
      }
      v57 = v65;
      v58 = v66;
      v59 = v67;
      v40 = (char)WebCore::documentOrder();
      if (v40 == -127 || v40 > 0)
        goto LABEL_77;
      WebCore::VisiblePosition::previous();
      v41 = v50;
      v50 = 0;
      v42 = v60;
      v60 = v41;
      if (v42)
      {
        if (*((_DWORD *)v42 + 6) == 2)
        {
          if ((*((_WORD *)v42 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v42);
            v61 = v51;
            v62 = v52;
            v63 = v53;
            v50 = 0;
LABEL_72:
            WebCore::VisiblePosition::VisiblePosition();
            v43 = v50;
            v50 = 0;
            v44 = v56;
            v56 = v43;
            if (v44)
            {
              if (*((_DWORD *)v44 + 6) == 2)
              {
                if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v44);
                  v57 = v51;
                  v58 = v52;
                  v59 = v53;
                  v50 = 0;
                  goto LABEL_76;
                }
              }
              else
              {
                *((_DWORD *)v44 + 6) -= 2;
              }
            }
            v57 = v51;
            v58 = v52;
            v59 = v53;
LABEL_76:
            *(_DWORD *)(a1 + 1260) = 1;
            goto LABEL_77;
          }
        }
        else
        {
          *((_DWORD *)v42 + 6) -= 2;
        }
      }
      v61 = v51;
      v62 = v52;
      v63 = v53;
      goto LABEL_72;
    }
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::VisiblePosition::VisiblePosition();
    v19 = (char)WebCore::documentOrder();
    if (v19 == -127 || v19 > 0)
    {
      if ((char)WebCore::documentOrder() < 0)
      {
LABEL_40:
        v29 = v55;
        v55 = 0;
        if (v29)
        {
          if (*((_DWORD *)v29 + 6) == 2)
          {
            if ((*((_WORD *)v29 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v29);
          }
          else
          {
            *((_DWORD *)v29 + 6) -= 2;
          }
        }
        v30 = v50;
        v50 = 0;
        if (v30)
        {
          if (*((_DWORD *)v30 + 6) == 2)
          {
            if ((*((_WORD *)v30 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v30);
          }
          else
          {
            *((_DWORD *)v30 + 6) -= 2;
          }
        }
        goto LABEL_77;
      }
      v25 = v50;
      if (v50)
        *((_DWORD *)v50 + 6) += 2;
      v26 = v60;
      v60 = v25;
      if (v26)
      {
        if (*((_DWORD *)v26 + 6) == 2)
        {
          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v26);
        }
        else
        {
          *((_DWORD *)v26 + 6) -= 2;
        }
      }
      v61 = v51;
      v62 = v52;
      v63 = v53;
      v27 = v64;
      if (v64)
        *((_DWORD *)v64 + 6) += 2;
      v28 = v56;
      v56 = v27;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
      v24 = &v64;
    }
    else
    {
      v20 = v64;
      if (v64)
        *((_DWORD *)v64 + 6) += 2;
      v21 = v60;
      v60 = v20;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      v61 = v65;
      v62 = v66;
      v63 = v67;
      v22 = v55;
      if (v55)
        *((_DWORD *)v55 + 6) += 2;
      v23 = v56;
      v56 = v22;
      if (v23)
      {
        if (*((_DWORD *)v23 + 6) == 2)
        {
          if ((*((_WORD *)v23 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v23);
        }
        else
        {
          *((_DWORD *)v23 + 6) -= 2;
        }
      }
      v24 = &v55;
    }
    v57 = *((_DWORD *)v24 + 2);
    v58 = *((_BYTE *)v24 + 12);
    v59 = *((_BYTE *)v24 + 16);
    goto LABEL_40;
  }
  v18 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_85:
  v49 = v64;
  v64 = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v49);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v11 + 2);
}

void sub_1973CCD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, uint64_t a17, WebCore::Node *a18, uint64_t a19, uint64_t a20,WebCore::Node *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  if (a18)
  {
    if (*((_DWORD *)a18 + 6) == 2)
    {
      if ((*((_WORD *)a18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a18);
    }
    else
    {
      *((_DWORD *)a18 + 6) -= 2;
    }
  }
  if (a21)
  {
    if (*((_DWORD *)a21 + 6) == 2)
    {
      if ((*((_WORD *)a21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a21);
    }
    else
    {
      *((_DWORD *)a21 + 6) -= 2;
    }
  }
  v24 = *(_QWORD *)(v22 - 72);
  *(_QWORD *)(v22 - 72) = 0;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v24);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v21 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::revealItemForCurrentSelection(WebKit::WebPage *this, WebCore::Page *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;
  uint64_t v8;
  WebCore::FocusController *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Node *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  WebCore::Node *v26[4];
  char v27;
  WebCore::Node *v28;
  WTF::StringImpl *v29[4];
  char v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  uint64_t v33;
  int v34;
  char v35;
  WebCore::FocusController *v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  __int16 v54;
  char v55;

  WebCore::Page::checkedFocusController(a2);
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v36);
  v4 = (uint64_t)result;
  if (result)
  {
    v5 = result + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v36;
  v36 = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      v15 = 286;
      __break(0xC471u);
      goto LABEL_55;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    v8 = *(_QWORD *)(*((_QWORD *)result + 37) + 3064);
    v9 = *(WebCore::FocusController **)(v8 + 56);
    if (v9)
      *((_DWORD *)v9 + 6) += 2;
    v36 = v9;
    v37 = *(_DWORD *)(v8 + 64);
    v38 = *(_BYTE *)(v8 + 68);
    v10 = *(_QWORD *)(v8 + 72);
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
    v39 = v10;
    v40 = *(_DWORD *)(v8 + 80);
    v41 = *(_BYTE *)(v8 + 84);
    v11 = *(_QWORD *)(v8 + 88);
    if (v11)
      *(_DWORD *)(v11 + 24) += 2;
    v42 = v11;
    v43 = *(_DWORD *)(v8 + 96);
    v44 = *(_BYTE *)(v8 + 100);
    v12 = *(_QWORD *)(v8 + 104);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    v45 = v12;
    v46 = *(_DWORD *)(v8 + 112);
    v47 = *(_BYTE *)(v8 + 116);
    v13 = *(_QWORD *)(v8 + 120);
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    v48 = v13;
    v49 = *(_DWORD *)(v8 + 128);
    v50 = *(_BYTE *)(v8 + 132);
    v14 = *(_QWORD *)(v8 + 136);
    if (v14)
      *(_DWORD *)(v14 + 24) += 2;
    v51 = v14;
    v52 = *(_DWORD *)(v8 + 144);
    v53 = *(_BYTE *)(v8 + 148);
    v54 = *(_WORD *)(v8 + 152);
    v55 = *(_BYTE *)(v8 + 154);
    if (HIBYTE(v54))
    {
      LOBYTE(v33) = 0;
      v35 = 0;
      if (HIBYTE(v54) == 2)
      {
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::startOfParagraph();
        WebCore::endOfParagraph();
        WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t)v29);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v33, (uint64_t)v29);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29);
        v15 = (uint64_t)v28;
        v28 = 0;
        if (v15)
        {
          if (*(_DWORD *)(v15 + 24) == 2)
            goto LABEL_56;
          *(_DWORD *)(v15 + 24) -= 2;
        }
        while (1)
        {
          v16 = v26[0];
          v26[0] = 0;
          if (v16)
          {
            if (*((_DWORD *)v16 + 6) == 2)
            {
              if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v16);
            }
            else
            {
              *((_DWORD *)v16 + 6) -= 2;
            }
          }
          if (!v35)
          {
            WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)v29);
            std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v33, (uint64_t)v29);
            std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29);
            if (!v35)
              break;
          }
          v15 = (uint64_t)WebCore::makeSimpleRange<WebCore::BoundaryPoint &,WebCore::VisiblePosition &>((uint64_t)v29, v33, v34);
          if (v30)
          {
            v17 = WebCore::characterCount();
            v15 = (uint64_t)WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)v26);
            if (v27)
            {
              v18 = WebCore::characterCount();
              std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26);
              v15 = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29);
              if (v35)
              {
                WebCore::plainText();
                v20 = v29[0];
                if (v29[0])
                {
                  v21 = *(_DWORD *)v29[0];
                  *(_DWORD *)v29[0] += 2;
                  *(_QWORD *)this = v20;
                  *((_QWORD *)this + 1) = v17;
                  *((_QWORD *)this + 2) = v18;
                  *((_QWORD *)this + 3) = 0;
                  v29[0] = 0;
                  if (v21)
                    *(_DWORD *)v20 = v21;
                  else
                    WTF::StringImpl::destroy(v20, v19);
                }
                else
                {
                  *(_QWORD *)this = 0;
                  *((_QWORD *)this + 1) = v17;
                  *((_QWORD *)this + 2) = v18;
                  *((_QWORD *)this + 3) = 0;
                }
                v22 = v31;
                v31 = 0;
                if (v22)
                {
                  if (*((_DWORD *)v22 + 6) == 2)
                  {
                    if ((*((_WORD *)v22 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v22);
                  }
                  else
                  {
                    *((_DWORD *)v22 + 6) -= 2;
                  }
                }
                v23 = v32;
                v32 = 0;
                if (v23)
                {
                  if (*((_DWORD *)v23 + 6) == 2)
                  {
                    if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v23);
                  }
                  else
                  {
                    *((_DWORD *)v23 + 6) -= 2;
                  }
                }
                std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33);
                goto LABEL_53;
              }
            }
          }
LABEL_55:
          __break(1u);
LABEL_56:
          if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v15);
        }
        v24 = v31;
        v31 = 0;
        if (v24)
        {
          if (*((_DWORD *)v24 + 6) == 2)
          {
            if ((*((_WORD *)v24 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v24);
          }
          else
          {
            *((_DWORD *)v24 + 6) -= 2;
          }
        }
        v25 = v32;
        v32 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 6) == 2)
          {
            if ((*((_WORD *)v25 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v25);
          }
          else
          {
            *((_DWORD *)v25 + 6) -= 2;
          }
        }
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33);
    }
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
LABEL_53:
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v36);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return result;
}

void sub_1973CD3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WebCore::Node *a23,uint64_t a24,uint64_t a25,WebCore::Node *a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  WebCore::Node *v32;
  WebCore::Node *v33;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a18);
  v32 = a23;
  a23 = 0;
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v32);
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
  v33 = a26;
  a26 = 0;
  if (v33)
  {
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v33);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a29);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v30 - 152));
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v29 + 8));
  _Unwind_Resume(a1);
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>(uint64_t a1)
{
  uint64_t *result;
  int v3;
  BOOL v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  WebCore::makeBoundaryPoint();
  result = (uint64_t *)WebCore::makeBoundaryPoint();
  v3 = v8;
  if (v10)
    v4 = v8 == 0;
  else
    v4 = 1;
  if (v4)
  {
    v6 = 0;
    *(_BYTE *)a1 = 0;
  }
  else
  {
    WebCore::SimpleRange::SimpleRange();
    *(_QWORD *)a1 = v11;
    *(_DWORD *)(a1 + 8) = v12;
    v5 = v13;
    v11 = 0;
    v13 = 0;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = v14;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
    result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    v3 = v8;
    v6 = 1;
  }
  *(_BYTE *)(a1 + 32) = v6;
  if (v3)
    result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v7);
  if (v10)
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v9);
  return result;
}

void sub_1973CD5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a11)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  if (a15)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a13);
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::makeSimpleRange<WebCore::BoundaryPoint &,WebCore::VisiblePosition &>(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  *(_DWORD *)(a2 + 24) += 2;
  v11 = a3;
  v10 = 0;
  v12 = a2;
  v13 = a3;
  v14 = 1;
  WebCore::makeBoundaryPoint();
  v4 = v9;
  if (v9)
  {
    WebCore::SimpleRange::SimpleRange();
    *(_QWORD *)a1 = v15;
    *(_DWORD *)(a1 + 8) = v16;
    v5 = v17;
    v15 = 0;
    v17 = 0;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = v18;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v17);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v15);
    v4 = v9;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 32) = v6;
  if (v4)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v8);
  if (v14)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v12);
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
}

void sub_1973CD71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a11)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  if (a16)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a14);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::requestRVItemInCurrentSelectedRange(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  CFTypeRef v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7[3];
  CFTypeRef cf;

  WebKit::WebPage::revealItemForCurrentSelection((WebKit::WebPage *)v7, *(WebCore::Page **)(a1 + 48));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  result = v7[0];
  v7[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1973CD7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  v13 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (cf)
    CFRelease(cf);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v15);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::prepareSelectionForContextMenuWithLocationInView(WebCore::Page **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *result;
  unsigned int *v11;
  unsigned int v12;
  int8x8_t v13;
  uint64_t v14;
  WebCore::ScrollView *v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  const void *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  Node *v23;
  WTF::StringImpl *v24;
  CFTypeRef v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  const void *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  const void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34[2];
  CFTypeRef v35[2];
  WTF::StringImpl *v36[2];
  __int128 v37;
  char v38;
  WTF::StringImpl *v39[2];
  CFTypeRef cf[2];
  uint64_t v41;
  int32x2_t v42;

  v42 = (int32x2_t)a2;
  v4 = *((_QWORD *)a1[6] + 20);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v11 = (unsigned int *)(v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (int8x8_t)vcgt_s32(v42, (int32x2_t)0xFE000000FE000000);
    v36[0] = (WTF::StringImpl *)vorr_s8((int8x8_t)(*(_QWORD *)&v13 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v42), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v42, 6uLL)), v13));
    WebCore::EventHandler::hitTestResultAtPoint();
    v14 = v41;
    if (!v41)
    {
      *(_OWORD *)v36 = 0u;
      v37 = 0u;
      v30 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v30 + 16))(v30, 0, v36);
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      v32 = (const void *)*((_QWORD *)&v37 + 1);
      *((_QWORD *)&v37 + 1) = 0;
      if (v32)
        CFRelease(v32);
      v33 = v36[0];
      v36[0] = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v31);
        else
          *(_DWORD *)v33 -= 2;
      }
      goto LABEL_47;
    }
    *(_DWORD *)(v41 + 24) += 2;
    v15 = *(WebCore::ScrollView **)(v4 + 288);
    if (v15)
    {
      ++*((_DWORD *)v15 + 2);
      v16 = WebCore::ScrollView::rootViewToContents(v15, (const WebCore::IntPoint *)&v42);
      v17 = (int8x8_t)vcgt_s32((int32x2_t)v16, (int32x2_t)0xFE000000FE000000);
      v36[0] = (WTF::StringImpl *)vorr_s8((int8x8_t)(*(_QWORD *)&v17 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v16), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v16, 6uLL)), v17));
      if (WebCore::FrameSelection::contains())
      {
        WebKit::WebPage::revealItemForCurrentSelection((WebKit::WebPage *)v36, a1[6]);
        v18 = *a3;
        *a3 = 0;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, 1, v36);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v20 = (const void *)*((_QWORD *)&v37 + 1);
        *((_QWORD *)&v37 + 1) = 0;
        if (v20)
          CFRelease(v20);
        v21 = v36[0];
        v36[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v19);
          else
            *(_DWORD *)v21 -= 2;
        }
        if (*((_DWORD *)v15 + 2) == 1)
          (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v15 + 8))(v15);
        else
          --*((_DWORD *)v15 + 2);
LABEL_45:
        if (*(_DWORD *)(v14 + 24) == 2)
        {
          if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v14);
        }
        else
        {
          *(_DWORD *)(v14 + 24) -= 2;
        }
LABEL_47:
        MEMORY[0x19AEADBAC](v39);
        return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
      }
      if (*((_DWORD *)v15 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v15 + 8))(v15);
      else
        --*((_DWORD *)v15 + 2);
    }
    v22 = *a3;
    *a3 = 0;
    if ((*(_WORD *)(v14 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD5FB0] + 24)
      && WebCore::Node::computeEditability())
    {
      WebCore::makeRangeSelectingNode((WebCore *)v14, v23);
      if (v38 && WebCore::FrameSelection::setSelectedRange())
      {
        *(_OWORD *)v34 = 0u;
        *(_OWORD *)v35 = 0u;
        WebCore::Page::layoutIfNeeded();
        WebKit::WebPage::sendEditorStateUpdate((WebKit::WebPage *)a1);
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, 1, v34);
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v25 = v35[1];
        v35[1] = 0;
        if (v25)
          CFRelease(v25);
        v26 = v34[0];
        v34[0] = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v24);
          else
            *(_DWORD *)v26 -= 2;
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36);
        goto LABEL_45;
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36);
    }
    WebCore::EventHandler::selectClosestContextualWordOrLinkFromHitTestResult();
    WebKit::WebPage::revealItemForCurrentSelection((WebKit::WebPage *)v36, a1[6]);
    WebCore::Page::layoutIfNeeded();
    WebKit::WebPage::sendEditorStateUpdate((WebKit::WebPage *)a1);
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, 1, v36);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v28 = (const void *)*((_QWORD *)&v37 + 1);
    *((_QWORD *)&v37 + 1) = 0;
    if (v28)
      CFRelease(v28);
    v29 = v36[0];
    v36[0] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v27);
      else
        *(_DWORD *)v29 -= 2;
    }
    goto LABEL_45;
  }
  *(_OWORD *)v39 = 0u;
  *(_OWORD *)cf = 0u;
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, 0, v39);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = cf[1];
  cf[1] = 0;
  if (v8)
    CFRelease(v8);
  result = v39[0];
  v39[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1973CDCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, char a19)
{
  unsigned int *v19;
  uint64_t v20;
  WTF::StringImpl *v22;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (cf)
    CFRelease(cf);
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v22);
    else
      *(_DWORD *)a13 -= 2;
  }
  MEMORY[0x19AEADBAC](&a19);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v19);
  _Unwind_Resume(a1);
}

void sub_1973CDE98()
{
  JUMPOUT(0x1973CDE74);
}

void sub_1973CDEA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,CFTypeRef cf)
{
  uint64_t v22;
  WTF::StringImpl *v23;

  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (cf)
    CFRelease(cf);
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, v23);
    else
      *(_DWORD *)a19 -= 2;
  }
  JUMPOUT(0x1973CDE7CLL);
}

unsigned int *WebKit::WebPage::replaceSelectedText(WebCore::Page **this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  unsigned int *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[16];
  _BYTE v16[40];

  WebCore::Page::checkedFocusController(this[6]);
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v15[0]);
  v5 = (uint64_t)result;
  if (result)
  {
    v6 = result + 2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = v15[0];
  v15[0] = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1973CE084);
    }
    --*(_DWORD *)v8;
  }
  if (result)
  {
    v9 = *(_QWORD *)(*((_QWORD *)result + 37) + 3064);
    if (*(_BYTE *)(v9 + 153) == 1)
    {
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::wordRangeFromPosition();
      v10 = v15[0];
      v15[0] = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
    }
    else
    {
      WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v9 + 56));
    }
    WebKit::plainTextForContext(v15, (uint64_t)v16);
    v13 = WTF::equal(v15[0], *a2, v11);
    v14 = v15[0];
    v15[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if ((v13 & 1) == 0)
        {
LABEL_20:
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16);
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
        }
LABEL_19:
        WebCore::IgnoreSelectionChangeForScope::IgnoreSelectionChangeForScope((WebCore::IgnoreSelectionChangeForScope *)v15, (WebCore::LocalFrame *)v5);
        WebCore::FrameSelection::setSelectedRange();
        WebCore::Document::editor(*(WebCore::Document **)(v5 + 296));
        WebCore::Editor::insertText();
        MEMORY[0x19AEB2B98](v15);
        goto LABEL_20;
      }
      *(_DWORD *)v14 -= 2;
    }
    if ((v13 & 1) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  return result;
}

void sub_1973CE098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v11 - 72);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::replaceDictatedText(WebCore::Page **this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  unsigned int *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WebCore::Document *v9;
  uint64_t v10;
  const Node *v11;
  int i;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  char v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  int v32;
  char v33;
  WTF::StringImpl *v34;
  int v35;
  char v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  char v41;

  WebCore::Page::checkedFocusController(this[6]);
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v24);
  v5 = (uint64_t)result;
  if (result)
  {
    v6 = result + 2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = v24;
  v24 = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1973CE514);
    }
    --*(_DWORD *)v8;
  }
  if (result)
  {
    v9 = (WebCore::Document *)*((_QWORD *)result + 37);
    v10 = *((_QWORD *)v9 + 383);
    if (!*(_BYTE *)(v10 + 153))
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    if (*(_BYTE *)(v10 + 153) == 2)
    {
      WebCore::Document::editor(v9);
      WebCore::Editor::deleteSelectionWithSmartDelete();
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    WebCore::VisiblePosition::VisiblePosition();
    for (i = WTF::numGraphemeClusters(); i; --i)
    {
      WebCore::VisiblePosition::previous();
      v13 = v24;
      v24 = 0;
      v14 = v34;
      v34 = v13;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v14);
            v35 = v25;
            v36 = v26;
            v37 = v27;
            v24 = 0;
            continue;
          }
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
      v35 = v25;
      v36 = v26;
      v37 = v27;
    }
    if (!v34)
    {
      WebCore::startOfDocument(*(WebCore **)(v5 + 296), v11);
      v15 = v24;
      v24 = 0;
      v34 = v15;
      v35 = v25;
      v36 = v26;
      v37 = v27;
    }
    WebCore::makeBoundaryPoint();
    WebCore::makeBoundaryPoint();
    v16 = v39;
    if (v41 && v39)
    {
      WebCore::SimpleRange::SimpleRange();
      v29 = v24;
      v30 = v25;
      v17 = v27;
      v24 = 0;
      v27 = 0;
      v31 = v17;
      v32 = v28;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v27);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v24);
      v16 = v39;
      v18 = 1;
    }
    else
    {
      v18 = 0;
      LOBYTE(v29) = 0;
    }
    v33 = v18;
    if (v16)
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v38);
    if (v41)
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v40);
    WebKit::plainTextForContext(&v24, (uint64_t)&v29);
    v21 = WTF::equal(v24, *a2, v19);
    v22 = v24;
    v24 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v20);
        if ((v21 & 1) == 0)
          goto LABEL_37;
        goto LABEL_36;
      }
      *(_DWORD *)v22 -= 2;
    }
    if ((v21 & 1) == 0)
    {
LABEL_37:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29);
      v23 = v34;
      v34 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 6) == 2)
        {
          if ((*((_WORD *)v23 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v23);
        }
        else
        {
          *((_DWORD *)v23 + 6) -= 2;
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
LABEL_36:
    WebCore::IgnoreSelectionChangeForScope::IgnoreSelectionChangeForScope((WebCore::IgnoreSelectionChangeForScope *)&v24, (WebCore::LocalFrame *)v5);
    WebCore::FrameSelection::setSelectedRange();
    WebCore::Document::editor(*(WebCore::Document **)(v5 + 296));
    WebCore::Editor::insertText();
    MEMORY[0x19AEB2B98](&v24);
    goto LABEL_37;
  }
  return result;
}

void sub_1973CE57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v28 = *(_QWORD *)(v26 - 136);
  *(_QWORD *)(v26 - 136) = 0;
  if (v28)
  {
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::willInsertFinalDictationResult(WebKit::WebPage *this)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::IgnoreSelectionChangeForScope *v6;
  WebCore::FocusController *v7;

  WebCore::Page::checkedFocusController(*((WebCore::Page **)this + 6));
  result = WebCore::FocusController::focusedOrMainFrame(v7);
  v3 = (unsigned int *)result;
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 296) + 3064) + 153))
    {
      v6 = (WebCore::IgnoreSelectionChangeForScope *)WTF::fastMalloc((WTF *)0x80);
      WebCore::IgnoreSelectionChangeForScope::IgnoreSelectionChangeForScope(v6, (WebCore::LocalFrame *)v3);
      std::unique_ptr<WebCore::IgnoreSelectionChangeForScope>::reset[abi:sn180100]((uint64_t *)this + 211, (uint64_t)v6);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3 + 2);
  }
  return result;
}

void sub_1973CE76C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  WTF *v11;

  WTF::fastFree(v11, a2);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::requestAutocorrectionData(uint64_t a1, const WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::FocusController *v9;
  WebCore::Node *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  BOOL v15;
  int v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF *v25;
  void *v26;
  const void *v27;
  unsigned int *result;
  void *v29;
  const void *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  WebCore::SelectionGeometry *v36;
  WebCore::ScrollView *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  CFTypeRef v41;
  WTF *v42;
  WebCore::Editor *v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  void *v46;
  CFTypeRef v47;
  WTF *v48;
  WTF *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  int v52;
  CFTypeRef v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  WebCore::Node *v63[2];
  char v64;
  WTF *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF *v68;
  uint64_t v69;
  CFTypeRef cf;
  WebCore::FocusController *v71[4];
  char v72;
  WTF *v73;
  uint64_t v74;
  const void *v75;
  unsigned int *v76;
  uint64_t v77;
  const void *v78;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v5 = WebCore::FocusController::focusedOrMainFrame(v71[0]);
  v6 = v5;
  if (v5)
  {
    v7 = (unsigned int *)(v5 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = v71[0];
  v71[0] = 0;
  if (v9)
  {
    if (!*(_DWORD *)v9)
      goto LABEL_105;
    --*(_DWORD *)v9;
  }
  if (!v5)
  {
    v76 = 0;
    v77 = 0;
    v78 = 0;
    WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a3, (uint64_t)&v76);
    v27 = v78;
    v78 = 0;
    if (v27)
      CFRelease(v27);
    result = v76;
    if (v76)
    {
      v76 = 0;
      LODWORD(v77) = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, v26);
    }
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064) + 153) != 1)
  {
    v73 = 0;
    v74 = 0;
    v75 = 0;
    WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a3, (uint64_t)&v73);
    v30 = v75;
    v75 = 0;
    if (v30)
      CFRelease(v30);
    v31 = v73;
    if (v73)
    {
      v73 = 0;
      LODWORD(v74) = 0;
      WTF::fastFree(v31, v29);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  }
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::wordRangeFromPosition();
  v10 = v63[0];
  v63[0] = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  if (!v72)
  {
    v68 = 0;
    v69 = 0;
    cf = 0;
    WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a3, (uint64_t)&v68);
    v41 = cf;
    cf = 0;
    if (v41)
      CFRelease(v41);
    v42 = v68;
    if (v68)
    {
      v68 = 0;
      LODWORD(v69) = 0;
      WTF::fastFree(v42, v40);
    }
    goto LABEL_98;
  }
  WebKit::plainTextForContext(&v67, (uint64_t)v71);
  v12 = 5;
  while ((WTF::equal(v67, *a2, v11) & 1) == 0)
  {
    if (!v72)
      goto LABEL_101;
    WebCore::makeDeprecatedLegacyPosition();
    WebCore::Position::previous();
    v13 = v63[0];
    v63[0] = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    if (!v65)
      break;
    if (!v72)
      goto LABEL_101;
    WebCore::makeDeprecatedLegacyPosition();
    v14 = v63[0];
    if (v65 == v63[0])
    {
      v16 = WebCore::Position::deprecatedEditingOffset((WebCore::Position *)&v65);
      v15 = v16 == WebCore::Position::deprecatedEditingOffset((WebCore::Position *)v63)
         && ((BYTE4(v63[1]) ^ BYTE4(v66)) & 7) == 0;
      v14 = v63[0];
    }
    else
    {
      v15 = 0;
    }
    v63[0] = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    if (!v15)
    {
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::wordRangeFromPosition();
      v18 = v58;
      v58 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      if (v64)
      {
        if (!v72)
          goto LABEL_101;
        WebCore::SimpleRange::SimpleRange();
        v58 = v54;
        LODWORD(v59) = v55;
        v19 = v56;
        v54 = 0;
        v56 = 0;
        v60 = v19;
        v61 = v57;
        v62 = 1;
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)v71, (uint64_t)&v58);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v58);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v56);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v54);
        WebKit::plainTextForContext(&v58, (uint64_t)v71);
        v21 = v58;
        v58 = 0;
        v22 = v67;
        v67 = v21;
        if (v22)
        {
          v23 = *(_DWORD *)v22 - 2;
          if (*(_DWORD *)v22 != 2)
            goto LABEL_41;
          WTF::StringImpl::destroy(v22, v20);
          v22 = v58;
          v58 = 0;
          if (v22)
          {
            v23 = *(_DWORD *)v22 - 2;
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v24);
            else
LABEL_41:
              *(_DWORD *)v22 = v23;
          }
        }
        v17 = 0;
      }
      else
      {
        v17 = 4;
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63);
      goto LABEL_45;
    }
    v17 = 2;
LABEL_45:
    v25 = v65;
    v65 = 0;
    if (v25)
    {
      if (*((_DWORD *)v25 + 6) == 2)
      {
        if ((*((_WORD *)v25 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v25);
      }
      else
      {
        *((_DWORD *)v25 + 6) -= 2;
      }
    }
    if ((v17 | 4) == 4)
    {
      if (--v12)
        continue;
    }
    break;
  }
  if ((WTF::equal(v67, *a2, v11) & 1) == 0)
  {
    v32 = 0;
    v65 = 0;
    v66 = 0;
    goto LABEL_80;
  }
  if (!v72)
  {
LABEL_101:
    __break(1u);
    goto LABEL_105;
  }
  WebCore::RenderObject::collectSelectionGeometries();
  v32 = v63[0];
  v33 = HIDWORD(v63[1]);
  v65 = 0;
  v66 = 0;
  if (!HIDWORD(v63[1]))
    goto LABEL_80;
  if (HIDWORD(v63[1]) >> 28)
  {
LABEL_105:
    __break(0xC471u);
    JUMPOUT(0x1973CEDB4);
  }
  v34 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v63[1])));
  v35 = 0;
  LODWORD(v66) = v33;
  v65 = v34;
  v36 = v32;
  do
  {
    v37 = *(WebCore::ScrollView **)(v6 + 288);
    v54 = (WTF::StringImpl *)WebCore::SelectionGeometry::rect(v36);
    v55 = v38;
    v58 = (WTF::StringImpl *)WebCore::ScrollView::contentsToRootView(v37, (const WebCore::IntRect *)&v54);
    v59 = v39;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v63, (const WebCore::IntRect *)&v58);
    *((_OWORD *)v34 + v35++) = *(_OWORD *)v63;
    HIDWORD(v66) = v35;
    v36 = (WebCore::SelectionGeometry *)((char *)v36 + 84);
  }
  while (v33 != v35);
LABEL_80:
  LOBYTE(v58) = 0;
  v43 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v6 + 296));
  WebCore::Editor::fontForSelection(v43, (BOOL *)&v58);
  v44 = v63[0];
  if (v63[0])
  {
    v45 = (WebCore::Node *)*((_QWORD *)v63[0] + 11);
    v63[0] = 0;
    WTF::RefCounted<WebCore::Font>::deref(v44);
    v63[0] = v45;
    if (v45)
      CFRetain(v45);
  }
  else
  {
    v45 = 0;
    v63[0] = 0;
  }
  WebKit::WebAutocorrectionData::WebAutocorrectionData(&v51, (uint64_t)&v65, (const void **)v63);
  WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a3, (uint64_t)&v51);
  v47 = v53;
  v53 = 0;
  if (v47)
    CFRelease(v47);
  v48 = v51;
  if (v51)
  {
    v51 = 0;
    v52 = 0;
    WTF::fastFree(v48, v46);
  }
  if (v45)
    CFRelease(v45);
  v49 = v65;
  if (v65)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree(v49, v46);
  }
  if (v32)
    WTF::fastFree(v32, v46);
  v50 = v67;
  v67 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v46);
    else
      *(_DWORD *)v50 -= 2;
  }
LABEL_98:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v71);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
}

void sub_1973CEDD0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, CFTypeRef a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WebCore::Node *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,WTF::StringImpl *a28,WTF *a29,int a30,CFTypeRef cf)
{
  uint64_t v31;
  WTF *v32;
  uint64_t v33;

  if (a26)
    WTF::fastFree(a26, a2);
  if (v32)
    WTF::fastFree(v32, a2);
  if (a28)
  {
    if (*(_DWORD *)a28 == 2)
      WTF::StringImpl::destroy(a28, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a28 -= 2;
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v33 - 168);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v31 + 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::applyAutocorrection(uint64_t a1, WTF **a2, const WTF::StringImpl **a3, int a4, WTF::RefCountedBase *a5)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  if (WebKit::WebPage::applyAutocorrectionInternal(*(WebKit::WebPage **)(a1 + 48), a2, a3, a4))
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
  }
  else
  {
    v7 = 0;
  }
  v10 = v7;
  WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a5, (uint64_t)&v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1973CF0FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::applyAutocorrectionInternal(WebKit::WebPage *this, WTF **a2, const WTF::StringImpl **a3, int a4)
{
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WTF *v12;
  const WTF::String *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  const WTF::String *v18;
  const WTF::StringImpl *v19;
  const WTF::String *v20;
  char v21;
  WTF::StringImpl *v22;
  WebCore::Node *v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WebCore::Node *v31;
  const WTF::StringImpl *v32;
  char v33;
  WTF *v34;
  WTF *v35;
  WebCore::Node *v36;
  uint64_t v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  WTF *v40;
  int v41;
  WebCore::Node *v42;
  char v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  char v55;
  WebCore::Node *v56;
  int v57;
  WebCore::Node *v58;
  int v59;
  WebCore::Node *v60;
  int v61;
  WebCore::Node *v62;
  int v63;
  char v64;
  WebCore::Node *v65;
  WebCore::Node *v66;
  int v67;
  char v68;
  WebCore::Node *v69;
  int v70;
  char v71;
  uint64_t v72[2];
  unsigned __int8 v73;
  WTF *v74;
  int v75;
  WebCore::Node *v76;
  int v77;
  char v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  WebCore::Page::checkedFocusController(this);
  v7 = WebCore::FocusController::focusedOrMainFrame(v74);
  v9 = v7;
  if (v7)
  {
    v10 = (unsigned int *)(v7 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = v74;
  v74 = 0;
  if (v12)
  {
    if (!*(_DWORD *)v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1973CF8C4);
    }
    --*(_DWORD *)v12;
  }
  if (v7)
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064) + 153) || (WTF::equal(*a2, *a3, v8) & 1) != 0)
    {
      v14 = 0;
LABEL_126:
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
      return v14;
    }
    LOBYTE(v51) = 0;
    v55 = 0;
    v50 = 0;
    WebCore::foldQuoteMarks((WebCore *)a3, v13);
    v15 = *(_QWORD *)(*(_QWORD *)(v9 + 296) + 3064);
    if (*(_BYTE *)(v15 + 153) != 1)
    {
      WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v15 + 56));
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v51, (uint64_t)&v74);
      v24 = (_QWORD *)std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
      if (!v55)
        goto LABEL_116;
      WebKit::plainTextForContext(v24, (uint64_t)&v51);
      v25 = v74;
      v74 = 0;
      v50 = v25;
LABEL_45:
      WebCore::foldQuoteMarks((WebCore *)&v50, v20);
      v33 = WTF::equal(v74, v49, v32);
      v34 = v74;
      v74 = 0;
      if (!v34)
        goto LABEL_48;
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_48:
        if ((v33 & 1) == 0)
          goto LABEL_116;
LABEL_51:
        if (v55 && v51 == v53 && v52 == v54)
        {
          WebCore::makeDeprecatedLegacyPosition();
          WebCore::VisiblePosition::VisiblePosition();
          v35 = v74;
          v74 = 0;
          if (v35)
          {
            if (*((_DWORD *)v35 + 6) == 2)
            {
              if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v35);
            }
            else
            {
              *((_DWORD *)v35 + 6) -= 2;
            }
          }
          v36 = v60;
          v60 = 0;
          if (v36)
          {
            if (*((_DWORD *)v36 + 6) == 2)
            {
              if ((*((_WORD *)v36 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v36);
            }
            else
            {
              *((_DWORD *)v36 + 6) -= 2;
            }
          }
        }
        WebCore::FrameSelection::setSelectedRange();
        if (*a2 && *((_DWORD *)*a2 + 1))
        {
          WebCore::Document::editor(*(WebCore::Document **)(v9 + 296));
          WebCore::Editor::insertText();
          if (a4)
          {
            v37 = *(_QWORD *)(*(_QWORD *)(v9 + 296) + 3064);
            v38 = *(WebCore::Node **)(v37 + 120);
            if (v38)
              *((_DWORD *)v38 + 6) += 2;
            v69 = v38;
            v70 = *(_DWORD *)(v37 + 128);
            v71 = *(_BYTE *)(v37 + 132);
            v39 = *(WebCore::Node **)(v37 + 136);
            if (v39)
              *((_DWORD *)v39 + 6) += 2;
            v66 = v39;
            v67 = *(_DWORD *)(v37 + 144);
            v68 = *(_BYTE *)(v37 + 148);
            WebCore::VisiblePosition::VisiblePosition();
            WebCore::startOfEditableContent();
            v40 = v74;
            v74 = 0;
            if (v40)
            {
              if (*((_DWORD *)v40 + 6) == 2)
              {
                if ((*((_WORD *)v40 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v40);
              }
              else
              {
                *((_DWORD *)v40 + 6) -= 2;
              }
            }
            WebCore::makeBoundaryPoint();
            WebCore::makeBoundaryPoint();
            v41 = v73;
            if ((_BYTE)v58 && v73)
            {
              WebCore::SimpleRange::SimpleRange();
              v60 = v74;
              v61 = v75;
              v42 = v76;
              v74 = 0;
              v76 = 0;
              v62 = v42;
              v63 = v77;
              WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v76);
              WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v74);
              v41 = v73;
              v43 = 1;
            }
            else
            {
              v43 = 0;
              LOBYTE(v60) = 0;
            }
            v64 = v43;
            if (v41)
              WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v72);
            if ((_BYTE)v58)
              WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v56);
            if (v64)
            {
              WebCore::findPlainText();
              if (v56 != v58 || v57 != v59)
              {
                v74 = 0;
                v79 = 0;
                WebCore::addMarker();
                if (v79 != -1)
                  ((void (*)(uint64_t *, WTF **))off_1E34D8D08[v79])(v72, &v74);
              }
              WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v58);
              WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v56);
            }
            std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60);
            v44 = v65;
            v65 = 0;
            if (v44)
            {
              if (*((_DWORD *)v44 + 6) == 2)
              {
                if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v44);
              }
              else
              {
                *((_DWORD *)v44 + 6) -= 2;
              }
            }
            v45 = v66;
            v66 = 0;
            if (v45)
            {
              if (*((_DWORD *)v45 + 6) == 2)
              {
                if ((*((_WORD *)v45 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v45);
              }
              else
              {
                *((_DWORD *)v45 + 6) -= 2;
              }
            }
            v46 = v69;
            v69 = 0;
            if (v46)
            {
              if (*((_DWORD *)v46 + 6) == 2)
              {
                if ((*((_WORD *)v46 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v46);
              }
              else
              {
                *((_DWORD *)v46 + 6) -= 2;
              }
            }
          }
        }
        else if (*a3 && *((_DWORD *)*a3 + 1))
        {
          WebCore::Document::editor(*(WebCore::Document **)(v9 + 296));
          v14 = 1;
          WebCore::Editor::deleteWithDirection();
LABEL_117:
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v20);
            else
              *(_DWORD *)v49 -= 2;
          }
          v47 = v50;
          v50 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v20);
            else
              *(_DWORD *)v47 -= 2;
          }
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51);
          goto LABEL_126;
        }
        v14 = 1;
        goto LABEL_117;
      }
      WTF::StringImpl::destroy(v34, v20);
      if ((v33 & 1) != 0)
        goto LABEL_51;
LABEL_116:
      v14 = 0;
      goto LABEL_117;
    }
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::wordRangeFromPosition();
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v51, (uint64_t)&v74);
    v16 = (_QWORD *)std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
    WebKit::plainTextForContext(v16, (uint64_t)&v51);
    v17 = v74;
    v74 = 0;
    v50 = v17;
    WebCore::foldQuoteMarks((WebCore *)&v50, v18);
    v21 = WTF::equal(v74, v49, v19);
    v22 = v74;
    v74 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v20);
        if ((v21 & 1) != 0)
        {
LABEL_17:
          if ((!v50 || !*((_DWORD *)v50 + 1)) && v55 && (v51 != v53 || v52 != v54))
          {
            WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v74);
            std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v51, (uint64_t)&v74);
            std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
            if (!v55)
            {
              v23 = v56;
              v56 = 0;
              if (v23)
              {
                if (*((_DWORD *)v23 + 6) == 2)
                {
                  if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v23);
                }
                else
                {
                  *((_DWORD *)v23 + 6) -= 2;
                }
              }
              goto LABEL_116;
            }
          }
          goto LABEL_42;
        }
LABEL_29:
        if (!WTF::numGraphemeClusters())
        {
          WTF::String::operator=(&v50, MEMORY[0x1E0CBF738]);
          WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v74);
          std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v51, (uint64_t)&v74);
          goto LABEL_41;
        }
        WebCore::rangeExpandedAroundPositionByCharacters();
        if (!v78)
        {
LABEL_41:
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
LABEL_42:
          v31 = v56;
          v56 = 0;
          if (v31)
          {
            if (*((_DWORD *)v31 + 6) == 2)
            {
              if ((*((_WORD *)v31 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v31);
            }
            else
            {
              *((_DWORD *)v31 + 6) -= 2;
            }
          }
          goto LABEL_45;
        }
        WebCore::findPlainText();
        if (v60 == v62 && v61 == v63)
        {
LABEL_39:
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v62);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v60);
          goto LABEL_41;
        }
        WebCore::plainTextReplacingNoBreakSpace();
        v27 = (WTF::StringImpl *)v72[0];
        v72[0] = 0;
        v28 = v50;
        v50 = v27;
        if (v28)
        {
          v29 = *(_DWORD *)v28 - 2;
          if (*(_DWORD *)v28 != 2)
          {
LABEL_37:
            *(_DWORD *)v28 = v29;
            goto LABEL_38;
          }
          WTF::StringImpl::destroy(v28, v26);
          v28 = (WTF::StringImpl *)v72[0];
          v72[0] = 0;
          if (v28)
          {
            v29 = *(_DWORD *)v28 - 2;
            if (*(_DWORD *)v28 == 2)
            {
              WTF::StringImpl::destroy(v28, v30);
              goto LABEL_38;
            }
            goto LABEL_37;
          }
        }
LABEL_38:
        std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>((uint64_t)&v51, (uint64_t *)&v60);
        goto LABEL_39;
      }
      *(_DWORD *)v22 -= 2;
    }
    if ((v21 & 1) != 0)
      goto LABEL_17;
    goto LABEL_29;
  }
  return 0;
}

void sub_1973CF9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WebCore::Node *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WebCore::Node *a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WebCore::Node *v37;
  uint64_t v38;

  v34 = *(unsigned int *)(v32 - 80);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34D8D08[v34])(v32 - 168, v32 - 144);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v31);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&a16);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a20);
  v36 = a25;
  a25 = 0;
  if (v36)
  {
    if (*(_DWORD *)(v36 + 24) == 2)
    {
      if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v36);
    }
    else
    {
      *(_DWORD *)(v36 + 24) -= 2;
    }
  }
  v37 = a28;
  a28 = 0;
  if (v37)
  {
    if (*((_DWORD *)v37 + 6) == 2)
    {
      if ((*((_WORD *)v37 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v37);
    }
    else
    {
      *((_DWORD *)v37 + 6) -= 2;
    }
  }
  v38 = a30;
  a30 = 0;
  if (v38)
  {
    if (*(_DWORD *)(v38 + 24) == 2)
    {
      if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v38);
    }
    else
    {
      *(_DWORD *)(v38 + 24) -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v35);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v35);
    else
      *(_DWORD *)a10 -= 2;
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v30 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::syncApplyAutocorrection(uint64_t a1, WTF **a2, const WTF::StringImpl **a3, int a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = WebKit::WebPage::applyAutocorrectionInternal(*(WebKit::WebPage **)(a1 + 48), a2, a3, a4);
  v7 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void sub_1973CFD08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::autocorrectionContext(unsigned int *this, uint64_t a2)
{
  WTF::StringImpl *v2;
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::FocusController *v8;
  WebCore::Document *v9;
  uint64_t v10;
  unsigned int *v11;
  WebCore::Editor *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  int v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WebCore::Node *v35;
  uint64_t (*v36)();
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t (*v40)();
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WebCore::Node *v45;
  WTF::StringImpl *v46;
  BOOL v47;
  WebCore::Node *v48;
  uint64_t (*v49)();
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  BOOL v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  char v60;
  char v61;
  WebCore::Node *v62;
  int v63;
  char v64;
  char v65;
  WTF::StringImpl *v66;
  int v67;
  char v68;
  char v69;
  WTF::StringImpl *v70[3];
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WebCore::Node *v74;
  uint64_t v75;
  char v76;
  WebCore::FocusController *v77;
  int v78;
  int v79[4];
  char v80;
  _QWORD v81[3];
  WTF::StringImpl *v82;
  int v83;
  char v84;
  char v85;

  v4 = (uint64_t)this;
  if (!*(_QWORD *)(a2 + 920))
    goto LABEL_12;
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a2 + 48));
  this = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v77);
  v5 = (uint64_t)this;
  if (this)
  {
    v6 = this + 2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = v77;
  v77 = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      goto LABEL_184;
    }
    --*(_DWORD *)v8;
  }
  if (!this)
  {
LABEL_12:
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = xmmword_1978CEF10;
    return this;
  }
  if ((WebCore::VisibleSelection::hasEditableStyle((WebCore::VisibleSelection *)(*(_QWORD *)(*((_QWORD *)this + 37)
                                                                                            + 3064)
                                                                                + 56)) & 1) == 0)
  {
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = xmmword_1978CEF10;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::VisiblePosition::VisiblePosition();
  v9 = *(WebCore::Document **)(v5 + 296);
  v10 = *((_QWORD *)v9 + 383);
  if (*(_BYTE *)(v10 + 153) == 2)
  {
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v10 + 56));
    WebKit::plainTextForContext(&v74, (uint64_t)&v77);
    v11 = (unsigned int *)v74;
    v74 = 0;
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v77);
    v9 = *(WebCore::Document **)(v5 + 296);
  }
  else
  {
    v11 = 0;
  }
  v12 = (WebCore::Editor *)WebCore::Document::editor(v9);
  WebCore::Editor::compositionRange(v12);
  if (v80)
  {
    WebCore::makeSimpleRange<WebCore::BoundaryPoint &,WebCore::VisiblePosition &>((uint64_t)&v74, (uint64_t)v77, v78);
    WebKit::plainTextForContext(v70, (uint64_t)&v74);
    v13 = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
    if (!v80)
    {
      __break(1u);
      goto LABEL_171;
    }
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::BoundaryPoint &>((uint64_t)&v74, (uint64_t)v81, v79);
    WebKit::plainTextForContext(&v66, (uint64_t)&v74);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
    v14 = v70[0];
    if (v70[0])
      *(_DWORD *)v70[0] += 2;
    v73 = v14;
    if (v11)
      *v11 += 2;
    v72 = (WTF::StringImpl *)v11;
    v15 = v66;
    if (v66)
      *(_DWORD *)v66 += 2;
    v71 = v15;
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, &v74);
    v17 = v74;
    v74 = 0;
    v18 = v71;
    v71 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v72;
    v72 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v73;
    v73 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v16);
        if (!v17)
          goto LABEL_43;
        goto LABEL_39;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (!v17)
      goto LABEL_43;
LABEL_39:
    if (*((_DWORD *)v17 + 1))
    {
      if (v70[0])
      {
        v21 = *((unsigned int *)v70[0] + 1);
        if (v11)
        {
LABEL_42:
          v22 = v11[1];
LABEL_44:
          v23 = v66;
          v66 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v16);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = v70[0];
          v70[0] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v16);
            else
              *(_DWORD *)v24 -= 2;
          }
          v2 = 0;
          v3 = 0;
          goto LABEL_145;
        }
      }
      else
      {
        v21 = 0;
        if (v11)
          goto LABEL_42;
      }
      v22 = 0;
      goto LABEL_44;
    }
LABEL_43:
    v22 = 0;
    v21 = -1;
    goto LABEL_44;
  }
  WebCore::startOfEditableContent();
  if (WebCore::operator==((uint64_t)&v82, (uint64_t)v70))
  {
    v2 = 0;
    goto LABEL_126;
  }
  v25 = v82;
  if (v82)
    *((_DWORD *)v82 + 6) += 2;
  v26 = 0;
  v66 = v25;
  v67 = v83;
  v68 = v84;
  v69 = v85;
  v62 = 0;
  v63 = 0;
  v64 &= 0xF0u;
  v65 = 1;
  v27 = 10;
  while (1)
  {
    WebCore::positionOfNextBoundaryOfGranularity();
    WebCore::startOfWord();
    v28 = v74;
    v74 = 0;
    v29 = v62;
    v62 = v28;
    if (!v29)
      goto LABEL_59;
    if (*((_DWORD *)v29 + 6) != 2)
    {
      *((_DWORD *)v29 + 6) -= 2;
LABEL_59:
      v63 = v75;
      v64 = BYTE4(v75);
      v65 = v76;
      v74 = 0;
      goto LABEL_60;
    }
    if ((*((_WORD *)v29 + 15) & 0x400) != 0)
      goto LABEL_59;
    WebCore::Node::removedLastRef(v29);
    v35 = v74;
    v63 = v75;
    v64 = BYTE4(v75);
    v65 = v76;
    v74 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
LABEL_60:
    v30 = v58;
    v58 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v30);
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
    }
    if (!v62)
      goto LABEL_90;
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v74);
    WebKit::plainTextForContext(&v58, (uint64_t)&v74);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
    v32 = v58;
    if (v58)
    {
      v26 += *((_DWORD *)v58 + 1);
      if (v26 >= 0x64)
        break;
    }
    v33 = v62;
    if (v62)
      *((_DWORD *)v62 + 6) += 2;
    v34 = v66;
    v66 = v33;
    if (v34)
    {
      if (*((_DWORD *)v34 + 6) == 2)
      {
        if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v34);
          v32 = v58;
        }
      }
      else
      {
        *((_DWORD *)v34 + 6) -= 2;
      }
    }
    v67 = v63;
    v68 = v64;
    v69 = v65;
    v58 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (!--v27)
      goto LABEL_90;
  }
  v58 = 0;
  if (*(_DWORD *)v32 == 2)
    WTF::StringImpl::destroy(v32, v31);
  else
    *(_DWORD *)v32 -= 2;
LABEL_90:
  WebCore::startOfSentence();
  if (v58)
    v36 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v36 = 0;
  if (v36)
  {
    v37 = (char)WebCore::documentOrder();
    if (v37 != -127 && v37 < 0)
    {
      v38 = v58;
      if (v58)
        *((_DWORD *)v58 + 6) += 2;
      v39 = v66;
      v66 = v38;
      if (v39)
      {
        if (*((_DWORD *)v39 + 6) == 2)
        {
          if ((*((_WORD *)v39 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v39);
        }
        else
        {
          *((_DWORD *)v39 + 6) -= 2;
        }
      }
      v67 = v59;
      v68 = v60;
      v69 = v61;
    }
  }
  if (v66)
    v40 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v40 = 0;
  if (!v40)
  {
    v2 = 0;
    goto LABEL_117;
  }
  v2 = 0;
  v41 = (char)WebCore::documentOrder();
  if (v41 != -127 && v41 < 0)
  {
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v74);
    WebKit::plainTextForContext(&v57, (uint64_t)&v74);
    v2 = v57;
    v57 = 0;
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
    if (WebCore::atBoundaryOfGranularity())
    {
      if (!WebCore::operator==((uint64_t)v70, (uint64_t)&v66))
      {
        if (v2)
          *(_DWORD *)v2 += 2;
        v56 = v2;
        v74 = (WebCore::Node *)"\n ";
        v75 = 3;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v74, (uint64_t *)&v56, &v57);
        v43 = v57;
        if (v57)
        {
          v57 = 0;
          if (v2)
          {
            if (*(_DWORD *)v2 == 2)
            {
              WTF::StringImpl::destroy(v2, v42);
              v53 = v57;
              v57 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, v42);
                else
                  *(_DWORD *)v53 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v2 -= 2;
              v57 = 0;
            }
          }
          v54 = v56;
          v56 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v42);
            else
              *(_DWORD *)v54 -= 2;
          }
          v2 = v43;
          goto LABEL_117;
        }
        __break(0xC471u);
LABEL_184:
        JUMPOUT(0x1973D0618);
      }
    }
  }
LABEL_117:
  v44 = v58;
  v58 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 6) == 2)
    {
      if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v44);
    }
    else
    {
      *((_DWORD *)v44 + 6) -= 2;
    }
  }
  v45 = v62;
  v62 = 0;
  if (v45)
  {
    if (*((_DWORD *)v45 + 6) == 2)
    {
      if ((*((_WORD *)v45 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v45);
    }
    else
    {
      *((_DWORD *)v45 + 6) -= 2;
    }
  }
  v46 = v66;
  v66 = 0;
  if (v46)
  {
    if (*((_DWORD *)v46 + 6) == 2)
    {
      if ((*((_WORD *)v46 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v46);
    }
    else
    {
      *((_DWORD *)v46 + 6) -= 2;
    }
  }
LABEL_126:
  WebCore::endOfEditableContent();
  v47 = WebCore::operator==((uint64_t)v81, (uint64_t)&v74);
  v48 = v74;
  v74 = 0;
  if (v48)
  {
    if (*((_DWORD *)v48 + 6) == 2)
    {
      if ((*((_WORD *)v48 + 15) & 0x400) == 0)
      {
        v55 = v47;
        WebCore::Node::removedLastRef(v48);
        v47 = v55;
      }
    }
    else
    {
      *((_DWORD *)v48 + 6) -= 2;
    }
  }
  if (v47)
  {
    v3 = 0;
    goto LABEL_141;
  }
  WebCore::endOfSentence();
  if (v66)
    v49 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v49 = 0;
  if (v49 && (char)WebCore::documentOrder() >= 1)
  {
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v74);
    WebKit::plainTextForContext(&v62, (uint64_t)&v74);
    v3 = v62;
    v62 = 0;
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
  }
  else
  {
    v3 = 0;
  }
  v13 = (uint64_t)v66;
  v66 = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) != 2)
    {
      *(_DWORD *)(v13 + 24) -= 2;
      goto LABEL_141;
    }
LABEL_171:
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13);
  }
LABEL_141:
  v50 = v70[0];
  v70[0] = 0;
  if (v50)
  {
    if (*((_DWORD *)v50 + 6) == 2)
    {
      if ((*((_WORD *)v50 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v50);
    }
    else
    {
      *((_DWORD *)v50 + 6) -= 2;
    }
  }
  v17 = 0;
  v22 = 0;
  v21 = -1;
LABEL_145:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v77);
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = v17;
  *(_QWORD *)(v4 + 16) = v11;
  *(_QWORD *)(v4 + 24) = v3;
  *(_QWORD *)(v4 + 32) = v21;
  *(_QWORD *)(v4 + 40) = v22;
  v51 = v81[0];
  v81[0] = 0;
  if (v51)
  {
    if (*(_DWORD *)(v51 + 24) == 2)
    {
      if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v51);
    }
    else
    {
      *(_DWORD *)(v51 + 24) -= 2;
    }
  }
  v52 = v82;
  v82 = 0;
  if (v52)
  {
    if (*((_DWORD *)v52 + 6) == 2)
    {
      if ((*((_WORD *)v52 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v52);
    }
    else
    {
      *((_DWORD *)v52 + 6) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
}

void sub_1973D06D4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WebCore::Node *a12, uint64_t a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27)
{
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a12)
  {
    if (*((_DWORD *)a12 + 6) == 2)
    {
      if ((*((_WORD *)a12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a12);
    }
    else
    {
      *((_DWORD *)a12 + 6) -= 2;
    }
  }
  if (a15)
  {
    if (*((_DWORD *)a15 + 6) == 2)
    {
      if ((*((_WORD *)a15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a15);
    }
    else
    {
      *((_DWORD *)a15 + 6) -= 2;
    }
  }
  if (a18)
  {
    if (*((_DWORD *)a18 + 6) == 2)
    {
      if ((*((_WORD *)a18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a18);
    }
    else
    {
      *((_DWORD *)a18 + 6) -= 2;
    }
  }
  if (a21)
  {
    if (*((_DWORD *)a21 + 6) == 2)
    {
      if ((*((_WORD *)a21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a21);
    }
    else
    {
      *((_DWORD *)a21 + 6) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v30 - 168);
  v33 = *(_QWORD *)(v30 - 128);
  *(_QWORD *)(v30 - 128) = 0;
  if (v33)
  {
    if (*(_DWORD *)(v33 + 24) == 2)
    {
      if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v33);
    }
    else
    {
      *(_DWORD *)(v33 + 24) -= 2;
    }
  }
  v34 = *(_QWORD *)(v30 - 104);
  *(_QWORD *)(v30 - 104) = 0;
  if (v34)
  {
    if (*(_DWORD *)(v34 + 24) == 2)
    {
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v34);
    }
    else
    {
      *(_DWORD *)(v34 + 24) -= 2;
    }
  }
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v32);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v32);
    else
      *(_DWORD *)v29 -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v27 + 8));
  _Unwind_Resume(a1);
}

void sub_1973D0A5C()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = *(_DWORD **)(v0 - 168);
  *(_QWORD *)(v0 - 168) = 0;
  if (v1)
  {
    if (*v1)
      --*v1;
    else
      __break(0xC471u);
  }
  JUMPOUT(0x1973D0A04);
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::BoundaryPoint &>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  WebCore::makeBoundaryPoint();
  v5 = *(_QWORD *)a3;
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
  v10 = a3[2];
  v9 = 0;
  v11 = v5;
  v12 = v10;
  v13 = 1;
  if (!v15)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    goto LABEL_5;
  }
  WebCore::SimpleRange::SimpleRange();
  *(_QWORD *)a1 = v16;
  *(_DWORD *)(a1 + 8) = v17;
  v6 = v18;
  v16 = 0;
  v18 = 0;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v19;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v18);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v16);
  v7 = v13;
  *(_BYTE *)(a1 + 32) = 1;
  if (v7)
LABEL_5:
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
  result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v9);
  if (v15)
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v14);
  return result;
}

void sub_1973D0B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a13)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a11);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  if (a16)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a14);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::preemptivelySendAutocorrectionContext(WebKit::WebPage *this)
{
  WebKit::WebPage *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  IPC::Encoder *v17;

  v1 = this;
  WebKit::WebPage::autocorrectionContext((unsigned int *)&v13, (uint64_t)this);
  v2 = *((_QWORD *)v1 + 4);
  v1 = (WebKit::WebPage *)((char *)v1 + 32);
  v3 = (*(uint64_t (**)(WebKit::WebPage *))(v2 + 56))(v1);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1945;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v17 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::WebAutocorrectionContext,void>::encode((IPC::Encoder *)v4, (uint64_t *)&v13);
  (*(void (**)(WebKit::WebPage *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v17, 0);
  v6 = v17;
  v17 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1973D0D14(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  uint64_t v13;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;

  v15 = *(IPC::Encoder **)(v13 - 40);
  *(_QWORD *)(v13 - 40) = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, a2);
    WTF::fastFree(v16, v17);
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPage::handleAutocorrectionContextRequest(WebKit::WebPage *this)
{
  WebKit::WebPage *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  IPC::Encoder *v17;

  v1 = this;
  WebKit::WebPage::autocorrectionContext((unsigned int *)&v13, (uint64_t)this);
  v2 = *((_QWORD *)v1 + 4);
  v1 = (WebKit::WebPage *)((char *)v1 + 32);
  v3 = (*(uint64_t (**)(WebKit::WebPage *))(v2 + 56))(v1);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1945;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v17 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::WebAutocorrectionContext,void>::encode((IPC::Encoder *)v4, (uint64_t *)&v13);
  (*(void (**)(WebKit::WebPage *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v17, 0);
  v6 = v17;
  v17 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1973D0F1C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  uint64_t v13;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;

  v15 = *(IPC::Encoder **)(v13 - 40);
  *(_QWORD *)(v13 - 40) = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, a2);
    WTF::fastFree(v16, v17);
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::URL *WebKit::WebPage::positionInformation@<X0>(WebKit::WebPage *this@<X0>, const WebKit::InteractionInformationRequest *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::URL *result;
  unsigned __int8 *v7;
  WTF::StringImpl **v8;
  WebCore::LocalFrame *v9;
  WebCore::Node *v10;
  uint64_t v11;
  char isContentEditable;
  uint64_t v13;
  int8x8_t v14;
  __n128 v15;
  _DWORD *v16;
  uint64_t v17;
  WebCore::LocalFrame *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  float v46;
  float v47;
  int v48;
  int v49;
  WebCore::ScrollView *v50;
  float v51;
  uint64_t DeprecatedLegacyPosition;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  WebCore::Image *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  float v72;
  WTF::StringImpl *v73;
  char v74;
  char v75;
  float v76;
  WebCore::Node *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WebCore::Node *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  _DWORD *v86;
  uint64_t (*v87)();
  const WebCore::Element *v88;
  WebCore::Editor *v89;
  int v90;
  _BOOL4 v92;
  WebCore::Node *v93;
  WebCore::Node *v94;
  uint64_t v95;
  WebCore::Image *v96;
  uint64_t v97;
  int v98;
  int v99;
  BOOL v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  WTF::StringImpl *v108;
  WebCore::Node *v109;
  uint64_t v110;
  WebCore::ImageOverlay *v111;
  WebCore::Element *v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  const Node *v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  WTF::StringImpl **v128;
  InteractionInformationAtPosition *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  int v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WebKit::InteractionInformationAtPosition *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  int v143;
  WTF::StringImpl *v144;
  CFTypeRef *v145;
  CFTypeRef v146;
  const void *v147;
  Node *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WebCore::Node *v154;
  WebCore::Node *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WebCore::Node *v161;
  WebCore::Node *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  WebKit *v167;
  WebCore::Node *v168;
  WebCore::Image *v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WebKit::InteractionInformationAtPosition *v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  int v179;
  WTF::StringImpl *v180;
  float v181;
  float v182;
  float v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  const WebCore::HTMLElement *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  const WebCore::HTMLElement *v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  WebKit::InteractionInformationAtPosition *v210;
  WebCore::ImageOverlay *v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t *i;
  uint64_t v216;
  WebCore::Image *v217;
  char v218;
  uint64_t v219;
  _OWORD *v220;
  _OWORD *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  _OWORD *v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  BOOL v232;
  int8x8_t v233;
  uint64_t v234;
  uint64_t v235;
  WebKit *v236;
  char v237;
  uint64_t v238;
  WebCore::Element *v239;
  int v240;
  int v241;
  int v242;
  InteractionInformationAtPosition *v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t *v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  uint64_t v249;
  uint64_t v250;
  __int16 v251;
  WTF::StringImpl *v252;
  WebKit::InteractionInformationAtPosition *v253;
  uint64_t v254;
  WTF::StringImpl *v255;
  int v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  char v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  void *v278;
  const void *v279;
  const void *v280;
  const void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int8x8_t v289;
  uint64_t v290;
  WebCore::Node *v291;
  WebCore::Node *v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  unsigned int v298;
  uint64_t v299;
  WTF::StringImpl **v300;
  uint64_t v301;
  WebCore::ImageOverlay *v302;
  WebCore::ImageOverlay *v303;
  _BYTE v304[72];
  uint64_t v305;
  WebCore::Node *v306;
  uint64_t v307;
  WTF::StringImpl *v308[2];
  uint64_t v309;
  uint64_t v310;
  WebCore::Node *v311[2];
  _BYTE v312[32];
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  WebCore::Node *v317;
  WebCore::Image *v318;
  char v319;
  _BYTE v320[32];
  __int128 v321;
  __int128 v322;
  __int128 v323;
  char v324;
  uint64_t v325;

  v325 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a3 + 7) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 11) = 1;
  *(_BYTE *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 17) = 0;
  *(_WORD *)(a3 + 21) = 0;
  *(_BYTE *)(a3 + 23) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 54) = 0;
  v301 = a3 + 72;
  WTF::URL::URL((WTF::URL *)(a3 + 72));
  result = WTF::URL::URL((WTF::URL *)(a3 + 112));
  *(_OWORD *)(a3 + 152) = 0u;
  v300 = (WTF::StringImpl **)(a3 + 152);
  *(_BYTE *)(a3 + 240) = 0;
  v7 = (unsigned __int8 *)(a3 + 240);
  *(_BYTE *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_DWORD *)(a3 + 344) = 1065353216;
  *(_WORD *)(a3 + 386) = 0;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_BYTE *)(a3 + 384) = 0;
  v8 = (WTF::StringImpl **)(a3 + 392);
  *(_BYTE *)(a3 + 432) = 0;
  *(_BYTE *)(a3 + 512) = 0;
  *(_BYTE *)(a3 + 528) = 0;
  *(_BYTE *)(a3 + 608) = 0;
  *(_OWORD *)(a3 + 624) = 0u;
  *(_OWORD *)(a3 + 392) = 0u;
  *(_OWORD *)(a3 + 408) = 0u;
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 7) = *(_QWORD *)((char *)a2 + 7);
  v307 = 0;
  v9 = *(WebCore::LocalFrame **)(*((_QWORD *)this + 6) + 160);
  if (!v9 || *((_BYTE *)v9 + 144))
    return result;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v320, (const IntPoint *)a2);
  v10 = (WebCore::Node *)WebCore::LocalFrame::nodeRespondingToClickEvents(v9, (const WebCore::FloatPoint *)v320, (WebCore::FloatPoint *)&v307, 0);
  v11 = (uint64_t)v10;
  if (v10)
    isContentEditable = WebCore::Node::isContentEditable(v10);
  else
    isContentEditable = 0;
  *(_BYTE *)(a3 + 32) = isContentEditable;
  *(_QWORD *)(a3 + 64) = v307;
  if (*((_BYTE *)a2 + 11))
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v320, (const IntPoint *)a2);
    v13 = WebCore::LocalFrame::nodeRespondingToDoubleClickEvent(v9, (const WebCore::FloatPoint *)v320, (WebCore::FloatPoint *)&v307);
    if (!*(_BYTE *)(a3 + 18))
      *(_BYTE *)(a3 + 18) = 1;
    *(_BYTE *)(a3 + 17) = v13 != 0;
  }
  v14 = (int8x8_t)vcgt_s32(*(int32x2_t *)a2, (int32x2_t)0xFE000000FE000000);
  *(int8x8_t *)v320 = vorr_s8((int8x8_t)(*(_QWORD *)&v14 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *(int32x2_t *)a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*(int32x2_t *)a2, 6uLL)), v14));
  WebCore::EventHandler::hitTestResultAtPoint();
  if (WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v304))
  {
    WebCore::EventHandler::selectCursor();
    v15 = std::__optional_storage_base<WebCore::Cursor,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Cursor,false>>((__n128 *)(a3 + 240), (__n128 *)v320);
    if ((_BYTE)v321)
    {
      v16 = *(_DWORD **)&v320[8];
      *(_QWORD *)&v320[8] = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *, __n128))(*(_QWORD *)v16 + 8))(v16, v15);
        else
          --v16[2];
      }
    }
    if (*((_BYTE *)a2 + 10))
    {
      v17 = WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v304);
      v18 = (WebCore::LocalFrame *)v17;
      if (v17)
      {
        v19 = v17 + 8;
        do
          v20 = __ldaxr((unsigned int *)v19);
        while (__stlxr(v20 + 1, (unsigned int *)v19));
        v21 = *(_QWORD *)(v17 + 288);
        if (!v21)
          goto LABEL_118;
        v22 = *(_DWORD *)(v21 + 8);
        v302 = *(WebCore::ImageOverlay **)(v17 + 288);
        *((_DWORD *)v302 + 2) = v22 + 1;
        if (!v305 || (v299 = v305, (v23 = (_DWORD *)(*(_QWORD *)(v305 + 64) & 0xFFFFFFFFFFFFLL)) == 0))
        {
LABEL_115:
          if (v22)
            *((_DWORD *)v302 + 2) = v22;
          else
            (*(void (**)(WebCore::ImageOverlay *))(*(_QWORD *)v302 + 8))(v302);
LABEL_118:
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v19);
          goto LABEL_119;
        }
        while ((v23[13] & 7) != 1)
        {
          v24 = *((_QWORD *)v23 + 4);
          if (v24)
          {
            v23 = *(_DWORD **)(v24 + 8);
            if (v23)
              continue;
          }
          goto LABEL_115;
        }
        *(_QWORD *)v312 = WebCore::ScrollView::rootViewToContents(v302, a2);
        WebCore::LocalFrame::visiblePositionForPoint(v18, (const WebCore::IntPoint *)v312);
        WebCore::VisiblePosition::absoluteSelectionBoundsForLine((WebCore::VisiblePosition *)v320);
        *(_DWORD *)v312 = v25;
        *(_DWORD *)&v312[4] = v26;
        *(_DWORD *)&v312[8] = v27;
        *(_DWORD *)&v312[12] = v28;
        v293 = WebCore::Node::computeEditability();
        if (v293)
        {
          v298 = v23[40];
          v297 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v23 + 1016))(v23);
          v296 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v23 + 1024))(v23);
          v29 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v23 + 1352))(v23);
          v295 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v23 + 944))(v23);
          v294 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v23 + 952))(v23);
          if ((WebCore::RenderStyle::scrollbarGutter((WebCore::RenderStyle *)(v23 + 20)) & 0x100) != 0)
          {
            v31 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v23 + 1352))(v23);
            v32 = v31 << 6;
            if (v31 > 0x1FFFFFF)
              v32 = 0x7FFFFFFF;
            if (v31 >= -33554432)
              v30 = v32;
            else
              v30 = 0x80000000;
          }
          else
          {
            v30 = 0;
          }
          v33 = v298 - v297;
          if (__OFSUB__(v298, v297))
            v33 = (v298 >> 31) + 0x7FFFFFFF;
          v34 = __OFSUB__(v33, v296);
          v35 = v33 - v296;
          v36 = (v33 >> 31) + 0x7FFFFFFF;
          if (!v34)
            v36 = v35;
          v37 = v29 << 6;
          if (v29 < -33554432)
            v37 = 0x80000000;
          if (v29 > 0x1FFFFFF)
            v37 = 0x7FFFFFFF;
          v34 = __OFSUB__(v36, v37);
          v38 = v36 - v37;
          v39 = (v36 >> 31) + 0x7FFFFFFF;
          if (!v34)
            v39 = v38;
          v40 = v39 & ~(v39 >> 31);
          v34 = __OFSUB__(v40, v295);
          v41 = v40 - v295;
          if (v34)
            v41 = 0x7FFFFFFF;
          v34 = __OFSUB__(v41, v294);
          v42 = v41 - v294;
          v43 = (v41 >> 31) + 0x7FFFFFFF;
          if (!v34)
            v43 = v42;
          v34 = __OFSUB__(v43, v30);
          v44 = v43 - v30;
          v45 = (v43 >> 31) + 0x7FFFFFFF;
          if (v34)
            v44 = v45;
          *(float *)&v312[8] = (float)(v44 & ~(v44 >> 31)) * 0.015625;
        }
        *(_BYTE *)(a3 + 61) = (v23[5] & 0x1000) != 0;
        WebCore::ScrollView::contentsToRootView(v302, (const WebCore::FloatRect *)v312);
        *(_DWORD *)(a3 + 220) = v48;
        *(_DWORD *)(a3 + 224) = v49;
        v50 = (WebCore::ScrollView *)(a3 + 220);
        *(float *)(a3 + 228) = v46;
        *(float *)(a3 + 232) = v47;
        if (*(_BYTE *)(a3 + 61))
          v51 = v46;
        else
          v51 = v47;
        *(float *)(a3 + 216) = v51;
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v317, (const IntPoint *)a2);
        DeprecatedLegacyPosition = WebCore::FloatRect::contains();
        if (!(_DWORD)DeprecatedLegacyPosition)
        {
          if (!*(_BYTE *)(a3 + 272))
            goto LABEL_533;
          v63 = *v7;
          v54 = v299;
          if (v63 == 4)
          {
            v317 = (WebCore::Node *)WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v23, 1, 0);
            v318 = v64;
            if ((*((_BYTE *)v23 + 45) & 2) != 0)
            {
              v65 = *((_QWORD *)v23 + 4);
              if (v65)
                v23 = *(_DWORD **)(v65 + 8);
              else
                v23 = 0;
            }
            WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)(v23 + 20));
            HIDWORD(v318) = (int)v72;
            v308[0] = (WTF::StringImpl *)WebCore::ScrollView::contentsToRootView(v302, (const WebCore::IntRect *)&v317);
            v308[1] = v73;
            WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v311, (const WebCore::IntRect *)v308);
            *(_OWORD *)v50 = *(_OWORD *)v311;
            WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v311, (const IntPoint *)a2);
            v74 = WebCore::FloatRect::contains();
            if (v293)
              v75 = v74;
            else
              v75 = 0;
            v76 = *(float *)(a3 + 232);
            if ((v75 & 1) == 0)
              *(float *)(a3 + 224) = (float)*((int *)a2 + 1) + (float)(v76 * -0.5);
            if (*(_BYTE *)(a3 + 61))
              v76 = *(float *)(a3 + 228);
            *(float *)(a3 + 216) = v76;
          }
          goto LABEL_96;
        }
        if (!*(_BYTE *)(a3 + 272))
          goto LABEL_533;
        v53 = *v7;
        v54 = v299;
        if (v53 == 3)
          goto LABEL_96;
        v55 = *(_QWORD *)v320;
        if (!*(_QWORD *)v320)
        {
          v77 = 0;
LABEL_98:
          v317 = v77;
          LODWORD(v318) = *(_DWORD *)&v320[8];
          BYTE4(v318) = v320[12];
          if ((*(_QWORD *)(v54 + 64) & 0xFFFFFFFFFFFFLL) != 0
            && (*(_BYTE *)((*(_QWORD *)(v54 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
            || (v78 = WebCore::Position::computeNodeBeforePosition((WebCore::Position *)&v317)) != 0
            && (*(_QWORD *)(v78 + 64) & 0xFFFFFFFFFFFFLL) != 0
            && (*(_BYTE *)((*(_QWORD *)(v78 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3)
          {
            LOBYTE(v79) = 1;
          }
          else
          {
            v80 = WebCore::Position::computeNodeAfterPosition((WebCore::Position *)&v317);
            if (v80)
            {
              v79 = *(_QWORD *)(v80 + 64) & 0xFFFFFFFFFFFFLL;
              if (v79)
                LOBYTE(v79) = (*(_BYTE *)((*(_QWORD *)(v80 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3;
            }
            else
            {
              LOBYTE(v79) = 0;
            }
          }
          *(_BYTE *)(a3 + 59) = v79;
          v81 = v317;
          v317 = 0;
          if (v81)
          {
            if (*((_DWORD *)v81 + 6) == 2)
            {
              if ((*((_WORD *)v81 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v81);
            }
            else
            {
              *((_DWORD *)v81 + 6) -= 2;
            }
          }
          v82 = *(_QWORD *)v320;
          *(_QWORD *)v320 = 0;
          if (v82)
          {
            if (*(_DWORD *)(v82 + 24) == 2)
            {
              if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v82);
            }
            else
            {
              *(_DWORD *)(v82 + 24) -= 2;
            }
          }
          v22 = *((_DWORD *)v302 + 2) - 1;
          goto LABEL_115;
        }
        v56 = *(_DWORD *)(*(_QWORD *)v320 + 24);
        *(_DWORD *)(*(_QWORD *)v320 + 24) = v56 + 2;
        if (v56)
        {
          *(_DWORD *)(v55 + 24) = v56;
        }
        else if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v55);
        }
        v57 = *(_QWORD *)(v55 + 64);
        v58 = v57 & 0xFFFFFFFFFFFFLL;
        if ((v57 & 0xFFFFFFFFFFFFLL) != 0)
        {
          v59 = *(_BYTE *)((v57 & 0xFFFFFFFFFFFFLL) + 0x2D);
          v60 = v57 & 0xFFFFFFFFFFFFLL;
          if ((v59 & 2) != 0)
            v60 = *(_QWORD *)(*(_QWORD *)(v58 + 32) + 8);
          v61 = (*(_DWORD *)(v60 + 120) >> 19) & 0x3F;
          if (v61 == 9)
            goto LABEL_76;
          if (v61)
            goto LABEL_96;
          if (WebCore::Node::computeEditability())
            goto LABEL_76;
          if ((*(_BYTE *)(v58 + 45) & 2) == 0)
          {
LABEL_96:
            v77 = *(WebCore::Node **)v320;
            if (*(_QWORD *)v320)
              *(_DWORD *)(*(_QWORD *)v320 + 24) += 2;
            goto LABEL_98;
          }
          v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 248))(v55);
        }
        else
        {
          v62 = WebCore::Node::computeEditability();
        }
        if (v62)
        {
LABEL_76:
          v66 = WebCore::Cursor::fromType();
          v67 = v66;
          v68 = *(unsigned __int8 *)(a3 + 272);
          *(_BYTE *)(a3 + 240) = *(_BYTE *)v66;
          if (v68)
          {
            v69 = *(_QWORD *)(v66 + 8);
            if (v69)
              ++*(_DWORD *)(v69 + 8);
            v70 = *(_DWORD **)(a3 + 248);
            *(_QWORD *)(a3 + 248) = v69;
            if (v70)
            {
              if (v70[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v70 + 8))(v70);
              else
                --v70[2];
            }
            *(_OWORD *)(a3 + 256) = *(_OWORD *)(v67 + 16);
          }
          else
          {
            v71 = *(_QWORD *)(v66 + 8);
            if (v71)
              ++*(_DWORD *)(v71 + 8);
            *(_QWORD *)(a3 + 248) = v71;
            *(_OWORD *)(a3 + 256) = *(_OWORD *)(v66 + 16);
            *(_BYTE *)(a3 + 272) = 1;
          }
          goto LABEL_96;
        }
        goto LABEL_96;
      }
    }
  }
LABEL_119:
  v23 = (_DWORD *)*((_QWORD *)this + 115);
  if (v23)
  {
    WebCore::Page::checkedFocusController(*((WebCore::Page **)this + 6));
    v83 = WebCore::FocusController::focusedOrMainFrame(*(WebCore::FocusController **)v320);
    v19 = v83;
    if (v83)
    {
      v84 = (unsigned int *)(v83 + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 + 1, v84));
    }
    v86 = *(_DWORD **)v320;
    *(_QWORD *)v320 = 0;
    if (v86)
    {
      if (!*v86)
      {
        __break(0xC471u);
        JUMPOUT(0x1973D2DE8);
      }
      --*v86;
    }
    if (v83)
    {
      if (*(_QWORD *)(WebCore::Document::editor(*(WebCore::Document **)(v83 + 296)) + 32))
        v87 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
      else
        v87 = 0;
      if (!v87)
      {
LABEL_176:
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v19 + 8));
        goto LABEL_177;
      }
      v50 = *(WebCore::ScrollView **)(v19 + 288);
      ++*((_DWORD *)v50 + 2);
      v310 = WebCore::ScrollView::rootViewToContents(v50, a2);
      v309 = WebKit::constrainPoint((WebKit *)&v310, *(const WebCore::IntPoint **)(v19 + 296), (const WebCore::LocalFrame *)v23, v88);
      WebCore::LocalFrame::visiblePositionForPoint((WebCore::LocalFrame *)v19, (const WebCore::IntPoint *)&v309);
      v89 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v19 + 296));
      WebCore::Editor::compositionRange(v89);
      if (!(_BYTE)v321)
      {
LABEL_170:
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v320);
        v110 = *(_QWORD *)v312;
        *(_QWORD *)v312 = 0;
        if (v110)
        {
          if (*(_DWORD *)(v110 + 24) == 2)
          {
            if ((*(_WORD *)(v110 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v110);
          }
          else
          {
            *(_DWORD *)(v110 + 24) -= 2;
          }
        }
        if (*((_DWORD *)v50 + 2) == 1)
          (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v50 + 8))(v50);
        else
          --*((_DWORD *)v50 + 2);
        goto LABEL_176;
      }
      DeprecatedLegacyPosition = WebCore::makeDeprecatedLegacyPosition();
      if ((_BYTE)v321)
      {
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        v90 = (char)WebCore::documentOrder();
        v92 = v90 != -127 && v90 < 0;
        v93 = v317;
        v317 = 0;
        if (v93)
        {
          if (*((_DWORD *)v93 + 6) == 2)
          {
            if ((*((_WORD *)v93 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v93);
          }
          else
          {
            *((_DWORD *)v93 + 6) -= 2;
          }
        }
        if (v92)
        {
LABEL_147:
          WebCore::VisiblePosition::VisiblePosition();
          v94 = v317;
          v317 = 0;
          v95 = *(_QWORD *)v312;
          *(_QWORD *)v312 = v94;
          if (v95)
          {
            if (*(_DWORD *)(v95 + 24) == 2)
            {
              if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v95);
                v292 = v317;
                *(_DWORD *)&v312[8] = (_DWORD)v318;
                v312[12] = BYTE4(v318);
                v312[16] = v319;
                v317 = 0;
                if (v292)
                {
                  if (*((_DWORD *)v292 + 6) == 2)
                  {
                    if ((*((_WORD *)v292 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v292);
                  }
                  else
                  {
                    *((_DWORD *)v292 + 6) -= 2;
                  }
                }
                goto LABEL_151;
              }
            }
            else
            {
              *(_DWORD *)(v95 + 24) -= 2;
            }
          }
          *(_DWORD *)&v312[8] = (_DWORD)v318;
          v312[12] = BYTE4(v318);
          v312[16] = v319;
LABEL_151:
          v317 = (WebCore::Node *)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v312, 0);
          v318 = v96;
          v97 = WebCore::ScrollView::contentsToRootView(v50, (const WebCore::IntRect *)&v317);
          v100 = 0;
          if (v98 >= 0)
            v101 = v98;
          else
            v101 = v98 + 1;
          v102 = v97 + (v101 >> 1);
          v103 = *((_DWORD *)a2 + 1);
          v104 = v102 - *(_DWORD *)a2;
          if (v104 >= 0)
            v105 = v104;
          else
            v105 = -v104;
          v106 = HIDWORD(v97) - v103;
          if (HIDWORD(v97) - v103 < 0)
            v106 = v103 - HIDWORD(v97);
          if (v105 <= 0x42 && v106 <= 0x42)
          {
            v107 = HIDWORD(v97) + v99 - v103;
            if (v107 < 0)
              v107 = v103 - (HIDWORD(v97) + v99);
            v100 = v107 < 0x43;
          }
          *(_BYTE *)(a3 + 22) = v100;
          v108 = v308[0];
          v308[0] = 0;
          if (v108)
          {
            if (*((_DWORD *)v108 + 6) == 2)
            {
              if ((*((_WORD *)v108 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v108);
            }
            else
            {
              *((_DWORD *)v108 + 6) -= 2;
            }
          }
          v109 = v311[0];
          v311[0] = 0;
          if (v109)
          {
            if (*((_DWORD *)v109 + 6) == 2)
            {
              if ((*((_WORD *)v109 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v109);
            }
            else
            {
              *((_DWORD *)v109 + 6) -= 2;
            }
          }
          goto LABEL_170;
        }
        WebCore::VisiblePosition::VisiblePosition();
        LODWORD(v23) = (char)WebCore::documentOrder();
        DeprecatedLegacyPosition = (uint64_t)v317;
        v317 = 0;
        if (!DeprecatedLegacyPosition)
        {
LABEL_146:
          if ((int)v23 < 1)
            goto LABEL_151;
          goto LABEL_147;
        }
        if (*(_DWORD *)(DeprecatedLegacyPosition + 24) != 2)
        {
          *(_DWORD *)(DeprecatedLegacyPosition + 24) -= 2;
          goto LABEL_146;
        }
LABEL_534:
        if ((*(_WORD *)(DeprecatedLegacyPosition + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)DeprecatedLegacyPosition);
        goto LABEL_146;
      }
LABEL_533:
      __break(1u);
      goto LABEL_534;
    }
  }
LABEL_177:
  v111 = v306;
  if (v306)
    *((_DWORD *)v306 + 6) += 2;
  v303 = v111;
  if (!v11 || (*(_WORD *)(v11 + 28) & 8) == 0)
    goto LABEL_323;
  *(_DWORD *)(v11 + 24) += 2;
  if ((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_185;
  if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1973D2E6CLL);
  }
  if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
    && (*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) != 0)
  {
    v112 = (WebCore::Element *)WebKit::containingLinkAnchorElement(v11);
  }
  else
  {
LABEL_185:
    if ((*(_WORD *)(v11 + 30) & 1) != 0)
      v112 = (WebCore::Element *)v11;
    else
      v112 = 0;
  }
  *(_BYTE *)(a3 + 31) = 1;
  v113 = *(_QWORD *)(v11 + 104);
  if (!v113 || !*(_QWORD *)(v113 + 24))
  {
    v117 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
    goto LABEL_202;
  }
  v114 = *(_DWORD *)(v113 + 4);
  if ((v114 & 1) == 0)
  {
    v115 = (uint64_t *)(v113 + 32);
    LODWORD(v116) = v114 >> 5;
    if (!(_DWORD)v116)
      goto LABEL_200;
LABEL_195:
    v118 = *MEMORY[0x1E0DD5FA8];
    v116 = v116;
    while (1)
    {
      v119 = *v115;
      if (*v115 == v118
        || *(_QWORD *)(v119 + 24) == *(_QWORD *)(v118 + 24) && *(_QWORD *)(v119 + 32) == *(_QWORD *)(v118 + 32))
      {
        goto LABEL_201;
      }
      v115 += 2;
      if (!--v116)
        goto LABEL_200;
    }
  }
  v115 = *(uint64_t **)(v113 + 40);
  LODWORD(v116) = *(_DWORD *)(v113 + 52);
  if ((_DWORD)v116)
    goto LABEL_195;
LABEL_200:
  v115 = 0;
LABEL_201:
  v117 = (WTF::StringImpl *)(v115 + 1);
LABEL_202:
  WTF::String::operator=((WTF::StringImpl **)(a3 + 168), v117);
  *(_BYTE *)(a3 + 60) = WebCore::ImageOverlay::isOverlayText(v111, v120);
  v121 = *(_QWORD *)(v11 + 104);
  if (!v121)
    goto LABEL_212;
  v122 = *(_DWORD *)(v121 + 4);
  if ((v122 & 1) == 0)
  {
    v123 = v121 + 32;
    LODWORD(v124) = v122 >> 5;
    if ((_DWORD)v124)
      goto LABEL_205;
LABEL_212:
    v126 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
    goto LABEL_213;
  }
  v123 = *(_QWORD *)(v121 + 40);
  LODWORD(v124) = *(_DWORD *)(v121 + 52);
  if (!(_DWORD)v124)
    goto LABEL_212;
LABEL_205:
  v125 = *MEMORY[0x1E0DD6230];
  v124 = v124;
  v126 = (WTF::StringImpl *)(v123 + 8);
  while (1)
  {
    v127 = *((_QWORD *)v126 - 1);
    if (v127 == v125
      || *(_QWORD *)(v127 + 24) == *(_QWORD *)(v125 + 24) && *(_QWORD *)(v127 + 32) == *(_QWORD *)(v125 + 32))
    {
      break;
    }
    v126 = (WTF::StringImpl *)((char *)v126 + 16);
    if (!--v124)
    {
      v126 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_213:
  v128 = (WTF::StringImpl **)(a3 + 160);
  WTF::String::operator=((WTF::StringImpl **)(a3 + 160), v126);
  if (v112 && (!*v128 || !*((_DWORD *)*v128 + 1)))
  {
    WebCore::Element::innerText((WebCore::Element *)v11);
    v131 = *(WTF::StringImpl **)v320;
    *(_QWORD *)v320 = 0;
    v132 = *v128;
    *v128 = v131;
    if (v132)
    {
      v133 = *(_DWORD *)v132 - 2;
      if (*(_DWORD *)v132 != 2)
        goto LABEL_220;
      WTF::StringImpl::destroy(v132, v130);
      v132 = *(WTF::StringImpl **)v320;
      *(_QWORD *)v320 = 0;
      if (!v132)
        goto LABEL_221;
      v133 = *(_DWORD *)v132 - 2;
      if (*(_DWORD *)v132 == 2)
        WTF::StringImpl::destroy(v132, v134);
      else
LABEL_220:
        *(_DWORD *)v132 = v133;
    }
  }
LABEL_221:
  if ((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1973D2E8CLL);
    }
    *(_BYTE *)(a3 + 23) = (*(_BYTE *)(*(_QWORD *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x68) + 236) & 0x40) != 0;
  }
  v135 = v11;
  if (!v112)
    goto LABEL_277;
  if (!*(_BYTE *)(a3 + 60))
  {
    *(_BYTE *)(a3 + 24) = 1;
    WebCore::Element::getAttribute(v112, MEMORY[0x1E0DD60B0]);
    WebCore::Document::completeURL();
    WebKit::WebPage::applyLinkDecorationFiltering((uint64_t)v320, this, (uint64_t)v312);
    WTF::URL::operator=(v301, (WTF::StringImpl *)v320);
    v138 = *(WTF::StringImpl **)v320;
    *(_QWORD *)v320 = 0;
    if (v138)
    {
      if (*(_DWORD *)v138 == 2)
        WTF::StringImpl::destroy(v138, v136);
      else
        *(_DWORD *)v138 -= 2;
    }
    v139 = *(WTF::StringImpl **)v312;
    *(_QWORD *)v312 = 0;
    if (v139)
    {
      if (*(_DWORD *)v139 == 2)
        WTF::StringImpl::destroy(v139, v136);
      else
        *(_DWORD *)v139 -= 2;
    }
    WebKit::linkIndicatorPositionInformation(this, v112, a2, (const WebKit::InteractionInformationRequest *)a3, v137);
    if (WebCore::DataDetection::isDataDetectorLink())
    {
      *(_BYTE *)(a3 + 56) = 1;
      *(_OWORD *)(a3 + 408) = *(_OWORD *)(a3 + 176);
      WebCore::DataDetection::dataDetectorIdentifier();
      v141 = *(WTF::StringImpl **)v320;
      *(_QWORD *)v320 = 0;
      v142 = *v8;
      *v8 = v141;
      if (v142)
      {
        v143 = *(_DWORD *)v142 - 2;
        if (*(_DWORD *)v142 != 2)
        {
LABEL_240:
          *(_DWORD *)v142 = v143;
          goto LABEL_241;
        }
        WTF::StringImpl::destroy(v142, v140);
        v142 = *(WTF::StringImpl **)v320;
        *(_QWORD *)v320 = 0;
        if (v142)
        {
          v143 = *(_DWORD *)v142 - 2;
          if (*(_DWORD *)v142 == 2)
          {
            WTF::StringImpl::destroy(v142, v144);
            goto LABEL_241;
          }
          goto LABEL_240;
        }
      }
LABEL_241:
      v145 = *(CFTypeRef **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 528) + 8) + 312);
      if (v145)
      {
        v146 = *v145;
        if (*v145)
          CFRetain(*v145);
        v147 = *(const void **)(a3 + 400);
        *(_QWORD *)(a3 + 400) = v146;
        if (v147)
          CFRelease(v147);
      }
      if (WebCore::DataDetection::requiresExtendedContext())
      {
        WebCore::makeRangeSelectingNodeContents((WebCore *)v11, v148);
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary();
        WebKit::plainTextForDisplay(v308, (uint64_t)v320);
        v150 = v308[0];
        v308[0] = 0;
        v151 = *(WTF::StringImpl **)(a3 + 200);
        *(_QWORD *)(a3 + 200) = v150;
        if (v151)
        {
          if (*(_DWORD *)v151 == 2)
          {
            WTF::StringImpl::destroy(v151, v149);
            v153 = v308[0];
            v308[0] = 0;
            if (v153)
            {
              if (*(_DWORD *)v153 == 2)
                WTF::StringImpl::destroy(v153, v152);
              else
                *(_DWORD *)v153 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v151 -= 2;
            v308[0] = 0;
          }
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v320);
        v154 = v317;
        v317 = 0;
        if (v154)
        {
          if (*((_DWORD *)v154 + 6) == 2)
          {
            if ((*((_WORD *)v154 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v154);
          }
          else
          {
            *((_DWORD *)v154 + 6) -= 2;
          }
        }
        v155 = v311[0];
        v311[0] = 0;
        if (v155)
        {
          if (*((_DWORD *)v155 + 6) == 2)
          {
            if ((*((_WORD *)v155 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v155);
          }
          else
          {
            *((_DWORD *)v155 + 6) -= 2;
          }
        }
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary();
        WebKit::plainTextForDisplay(v308, (uint64_t)v320);
        v157 = v308[0];
        v308[0] = 0;
        v158 = *(WTF::StringImpl **)(a3 + 208);
        *(_QWORD *)(a3 + 208) = v157;
        if (v158)
        {
          if (*(_DWORD *)v158 == 2)
          {
            WTF::StringImpl::destroy(v158, v156);
            v160 = v308[0];
            v308[0] = 0;
            if (v160)
            {
              if (*(_DWORD *)v160 == 2)
                WTF::StringImpl::destroy(v160, v159);
              else
                *(_DWORD *)v160 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v158 -= 2;
            v308[0] = 0;
          }
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v320);
        v161 = v317;
        v317 = 0;
        if (v161)
        {
          if (*((_DWORD *)v161 + 6) == 2)
          {
            if ((*((_WORD *)v161 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v161);
          }
          else
          {
            *((_DWORD *)v161 + 6) -= 2;
          }
        }
        v162 = v311[0];
        v311[0] = 0;
        if (v162)
        {
          if (*((_DWORD *)v162 + 6) == 2)
          {
            if ((*((_WORD *)v162 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v162);
          }
          else
          {
            *((_DWORD *)v162 + 6) -= 2;
          }
        }
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v312[16]);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v312);
      }
    }
  }
  v135 = (uint64_t)v112;
LABEL_277:
  v163 = *(_QWORD *)(v135 + 64) & 0xFFFFFFFFFFFFLL;
  if (v163)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v135 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1973D2EACLL);
    }
    v164 = WebCore::Page::scrollingCoordinator(*((WebCore::Page **)this + 6));
    if (v164)
    {
      *(_QWORD *)(a3 + 40) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v164 + 56))(v164, v163);
      *(_QWORD *)(a3 + 48) = v165;
    }
  }
  v166 = *(_QWORD *)(v11 + 64);
  v167 = (WebKit *)(v166 & 0xFFFFFFFFFFFFLL);
  if ((v166 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_310;
  if ((*(_BYTE *)((v166 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1973D2ECCLL);
  }
  if ((*(_BYTE *)((v166 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3)
  {
    if ((*(_BYTE *)((v166 & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0 || !*(_BYTE *)(a3 + 60))
    {
      if ((*(_BYTE *)((v166 & 0xFFFFFFFFFFFFLL) + 0x35) & 1) != 0)
      {
        WebKit::hostVideoElementIgnoringImageOverlay((WebKit *)v320, (WebCore::Node *)v11);
        v174 = *(_QWORD *)v320;
        if (*(_QWORD *)v320)
        {
          WebKit::videoPositionInformation(this, *(WebKit::WebPage **)v320, a2, (const WebKit::InteractionInformationRequest *)a3, v173);
          if (*(_DWORD *)(v174 + 24) == 2)
          {
            if ((*(_WORD *)(v174 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v174);
          }
          else
          {
            *(_DWORD *)(v174 + 24) -= 2;
          }
        }
        else
        {
          WebKit::imagePositionInformation(this, (WebKit::WebPage *)v11, a2, (const WebKit::InteractionInformationRequest *)a3, v173);
        }
      }
      goto LABEL_309;
    }
    if (*((_BYTE *)a2 + 12))
    {
      WebKit::imageRendererAndImage((WebKit *)&v317, v166);
      if (v319)
      {
        v168 = v317;
        v169 = v318;
        v170 = WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*((_QWORD *)v317 + 28) + 24));
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v170 + 160));
        WebCore::Document::completeURL();
        WebKit::WebPage::applyLinkDecorationFiltering((uint64_t)v320, this, (uint64_t)v312);
        WTF::URL::operator=(a3 + 112, (WTF::StringImpl *)v320);
        v172 = *(WTF::StringImpl **)v320;
        *(_QWORD *)v320 = 0;
        if (v172)
        {
          if (*(_DWORD *)v172 == 2)
            WTF::StringImpl::destroy(v172, v171);
          else
            *(_DWORD *)v172 -= 2;
        }
        v175 = *(WTF::StringImpl **)v312;
        *(_QWORD *)v312 = 0;
        if (v175)
        {
          if (*(_DWORD *)v175 == 2)
            WTF::StringImpl::destroy(v175, v171);
          else
            *(_DWORD *)v175 -= 2;
        }
        WebCore::Image::mimeType(v169);
        v177 = *(WTF::StringImpl **)v320;
        *(_QWORD *)v320 = 0;
        v178 = *v300;
        *v300 = v177;
        if (!v178)
          goto LABEL_306;
        v179 = *(_DWORD *)v178 - 2;
        if (*(_DWORD *)v178 == 2)
        {
          WTF::StringImpl::destroy(v178, v176);
          v178 = *(WTF::StringImpl **)v320;
          *(_QWORD *)v320 = 0;
          if (!v178)
          {
LABEL_306:
            WebCore::screenSize(v178);
            v181 = *(float *)(*((_QWORD *)this + 6) + 364);
            *(float *)v320 = v182 * v181;
            *(float *)&v320[4] = v183 * v181;
            v320[8] = 1;
            *(_WORD *)&v320[12] = 257;
            WebKit::createShareableBitmap((uint64_t)v168, (uint64_t)v320, (WebCore::ShareableBitmap **)v312);
            v185 = *(_QWORD *)v312;
            *(_QWORD *)v312 = 0;
            v186 = *(_QWORD *)(a3 + 192);
            *(_QWORD *)(a3 + 192) = v185;
            if (v186)
            {
              WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v186, v184);
              v188 = *(_QWORD *)v312;
              *(_QWORD *)v312 = 0;
              if (v188)
                WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v188, v187);
            }
            goto LABEL_309;
          }
          v179 = *(_DWORD *)v178 - 2;
          if (*(_DWORD *)v178 == 2)
          {
            v178 = (WTF::StringImpl *)WTF::StringImpl::destroy(v178, v180);
            goto LABEL_306;
          }
        }
        *(_DWORD *)v178 = v179;
        goto LABEL_306;
      }
    }
  }
LABEL_309:
  WebKit::boundsPositionInformation(v167, (WebCore::RenderObject *)a3, v129);
LABEL_310:
  WebKit::WebPage::contextForElement(this, (WebCore::Element *)v11, (uint64_t)v320);
  v189 = v322;
  *(_OWORD *)(a3 + 464) = v321;
  *(_OWORD *)(a3 + 480) = v189;
  *(_OWORD *)(a3 + 496) = v323;
  *(_BYTE *)(a3 + 512) = v324;
  v190 = *(_OWORD *)&v320[16];
  *(_OWORD *)(a3 + 432) = *(_OWORD *)v320;
  *(_OWORD *)(a3 + 448) = v190;
  v111 = v303;
  if (*(_BYTE *)(a3 + 24) && !*(_BYTE *)(a3 + 25) && *((_BYTE *)a2 + 8))
  {
    WebKit::WebPage::snapshotNode((unsigned int *)this, (WebCore::Node *)v11, (WebKit *)1, 0x96000u, (WebKit **)v320);
    if (*(_QWORD *)v320)
    {
      WebKit::WebImage::bitmap(*(WebKit::WebImage **)v320, v312);
      v192 = *(_QWORD *)v320;
      *(_QWORD *)v320 = 0;
      if (v192)
        CFRelease(*(CFTypeRef *)(v192 + 8));
      v193 = *(_QWORD *)v312;
    }
    else
    {
      v193 = 0;
    }
    *(_QWORD *)v312 = 0;
    v194 = *(_QWORD *)(a3 + 192);
    *(_QWORD *)(a3 + 192) = v193;
    if (v194)
    {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v194, v191);
      v196 = *(_QWORD *)v312;
      *(_QWORD *)v312 = 0;
      if (v196)
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v196, v195);
    }
  }
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
LABEL_323:
  if (!v111)
  {
    v199 = 0;
    goto LABEL_349;
  }
  if (!*(_BYTE *)(a3 + 60))
    goto LABEL_339;
  v197 = WebCore::Node::shadowHost(v111);
  v199 = v197;
  if (!v197)
    goto LABEL_340;
  if ((*(_WORD *)(v197 + 28) & 0x10) == 0)
  {
LABEL_339:
    v199 = 0;
    goto LABEL_340;
  }
  *(_DWORD *)(v197 + 24) += 2;
  if ((WebCore::ImageOverlay::hasOverlay((WebCore::ImageOverlay *)v197, v198) & 1) == 0)
  {
    if (*(_DWORD *)(v199 + 24) == 2)
    {
      if ((*(_WORD *)(v199 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v199);
    }
    else
    {
      *(_DWORD *)(v199 + 24) -= 2;
    }
    goto LABEL_339;
  }
  v200 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v199 + 40) + 8) + 528);
  if (v200)
  {
    v201 = *(_QWORD *)(v200 + 8);
    if (v201)
    {
      v202 = (unsigned int *)(v201 + 8);
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 + 1, v202));
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v312, (const IntPoint *)a2);
      WebCore::DataDetection::findDataDetectionResultElementInImageOverlay((WebCore::DataDetection *)v312, (const WebCore::FloatPoint *)v199, v204);
      if (v320[24])
      {
        v205 = *(_QWORD *)v320;
        *(_DWORD *)(*(_QWORD *)v320 + 24) += 2;
        *(_QWORD *)v312 = v205;
        *(_OWORD *)&v312[8] = *(_OWORD *)&v320[8];
        v206 = *(_QWORD *)(v205 + 104);
        if (v206
          && ((v207 = *(_DWORD *)(v206 + 4), (v207 & 1) != 0)
            ? (v208 = *(_QWORD *)(v206 + 40), LODWORD(v209) = *(_DWORD *)(v206 + 52))
            : (v208 = v206 + 32, LODWORD(v209) = v207 >> 5),
              (_DWORD)v209))
        {
          v260 = *MEMORY[0x1E0DD5EE0];
          v209 = v209;
          v261 = (uint64_t *)(v208 + 8);
          while (1)
          {
            v262 = *(v261 - 1);
            if (v262 == v260
              || *(_QWORD *)(v262 + 24) == *(_QWORD *)(v260 + 24) && *(_QWORD *)(v262 + 32) == *(_QWORD *)(v260 + 32))
            {
              break;
            }
            v261 += 2;
            if (!--v209)
            {
              v261 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
        }
        else
        {
          v261 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        }
        v263 = *v261;
        if (v263)
        {
          v264 = *(_QWORD *)(v263 + 8);
          v265 = *(unsigned int *)(v263 + 4) | ((unint64_t)((*(_DWORD *)(v263 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v264 = 0;
          v265 = 0x100000000;
        }
        v266 = WTF::parseInteger<unsigned long long>(v264, v265, 0xAu);
        if (v267)
        {
          if (v266 - 1 < 0xFFFFFFFFFFFFFFFELL)
          {
            v268 = *(_QWORD *)(v201 + 312);
            if (v268)
            {
              v269 = *(_QWORD *)(v268 + 8);
              if (v269)
              {
                v270 = *(_DWORD *)(v269 - 8);
                v271 = (v266 + ~(v266 << 32)) ^ ((v266 + ~(v266 << 32)) >> 22);
                v272 = 9 * ((v271 + ~(v271 << 13)) ^ ((v271 + ~(v271 << 13)) >> 8));
                v273 = (v272 ^ (v272 >> 15)) + ~((v272 ^ (v272 >> 15)) << 27);
                v274 = v270 & ((v273 >> 31) ^ v273);
                v275 = *(_QWORD *)(v269 + 16 * v274);
                if (v275 == v266)
                {
LABEL_440:
                  v277 = v269 + 16 * v274;
                  v278 = *(void **)(v277 + 8);
                  if (v278)
                  {
                    CFRetain(*(CFTypeRef *)(v277 + 8));
                    CFRelease(v278);
                    CFRetain(v278);
                    *(_OWORD *)(a3 + 408) = *(_OWORD *)&v312[8];
                    v317 = (WebCore::Node *)v278;
                    v279 = (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v317, 1);
                    v280 = v279;
                    if (v279)
                      CFRetain(v279);
                    v281 = *(const void **)(a3 + 400);
                    *(_QWORD *)(a3 + 400) = v280;
                    if (v281)
                      CFRelease(v281);
                    CFRelease(v278);
                  }
                }
                else
                {
                  v276 = 1;
                  while (v275)
                  {
                    v274 = ((_DWORD)v274 + v276) & v270;
                    v275 = *(_QWORD *)(v269 + 16 * v274);
                    ++v276;
                    if (v275 == v266)
                      goto LABEL_440;
                  }
                }
              }
            }
          }
        }
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v312);
        if (v320[24])
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v320);
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v202);
    }
  }
LABEL_340:
  if (*(_BYTE *)(a3 + 25) || !*((_BYTE *)a2 + 12))
    goto LABEL_349;
  WebKit::hostVideoElementIgnoringImageOverlay((WebKit *)v320, v303);
  v211 = *(WebCore::ImageOverlay **)v320;
  if (!*(_QWORD *)v320)
  {
    v211 = v303;
    v213 = *((_DWORD *)v303 + 6);
    *((_DWORD *)v303 + 6) = v213 + 2;
    if ((*((_WORD *)v303 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)v303 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD5FB0] + 24))
    {
      WebKit::imagePositionInformation(this, v303, a2, (const WebKit::InteractionInformationRequest *)a3, v210);
      v212 = *((_DWORD *)v303 + 6) - 2;
      if (*((_DWORD *)v303 + 6) != 2)
        goto LABEL_344;
      if ((*((_WORD *)v303 + 15) & 0x400) != 0)
        goto LABEL_349;
    }
    else
    {
      if (v213)
      {
        *((_DWORD *)v303 + 6) = v213;
        goto LABEL_349;
      }
      if ((*((_WORD *)v303 + 15) & 0x400) != 0)
        goto LABEL_349;
    }
    v291 = v303;
    goto LABEL_538;
  }
  WebKit::videoPositionInformation(this, *(WebKit::WebPage **)v320, a2, (const WebKit::InteractionInformationRequest *)a3, v210);
  v212 = *((_DWORD *)v211 + 6) - 2;
  if (*((_DWORD *)v211 + 6) != 2)
  {
LABEL_344:
    *((_DWORD *)v211 + 6) = v212;
    goto LABEL_349;
  }
  if ((*((_WORD *)v211 + 15) & 0x400) == 0)
  {
    v291 = v211;
LABEL_538:
    WebCore::Node::removedLastRef(v291);
  }
LABEL_349:
  v214 = *((_QWORD *)this + 6);
  if (v214)
    v214 = (*(_QWORD *)(*(_QWORD *)(v214 + 112) + 704) >> 39) & 1;
  *(_BYTE *)(a3 + 29) = v214;
  if (*((_BYTE *)a2 + 13))
  {
    for (i = *(uint64_t **)(WebCore::HitTestResult::listBasedTestResult((WebCore::HitTestResult *)v304) + 8);
          i;
          i = (uint64_t *)i[2])
    {
      v216 = *i;
      if (*i)
      {
        if ((*(_WORD *)(v216 + 28) & 8) != 0)
        {
          WebKit::imageRendererAndImage((WebKit *)&v317, *(_QWORD *)(v216 + 64));
          if (v319)
          {
            v217 = v318;
            if ((*(unsigned int (**)(WebCore::Image *))(*(_QWORD *)v318 + 112))(v318))
            {
              WebKit::WebPage::contextForElement(this, (WebCore::Element *)v216, (uint64_t)v320);
              if (v324)
              {
                v218 = (*(uint64_t (**)(WebCore::Image *))(*(_QWORD *)v217 + 280))(v217);
                v313 = v321;
                v314 = v322;
                v315 = v323;
                *(_OWORD *)v312 = *(_OWORD *)v320;
                *(_OWORD *)&v312[16] = *(_OWORD *)&v320[16];
                LOBYTE(v316) = v218;
                v219 = *(unsigned int *)(a3 + 636);
                if ((_DWORD)v219 == *(_DWORD *)(a3 + 632))
                {
                  v220 = (_OWORD *)WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 624, v219 + 1, (unint64_t)v312);
                  v221 = (_OWORD *)(*(_QWORD *)(a3 + 624) + 96 * *(unsigned int *)(a3 + 636));
                  v222 = v220[5];
                  v224 = v220[2];
                  v223 = v220[3];
                  v221[4] = v220[4];
                  v221[5] = v222;
                  v221[2] = v224;
                  v221[3] = v223;
                  v225 = v220[1];
                  *v221 = *v220;
                  v221[1] = v225;
                }
                else
                {
                  v226 = (_OWORD *)(*(_QWORD *)(a3 + 624) + 96 * v219);
                  v227 = *(_OWORD *)&v312[16];
                  *v226 = *(_OWORD *)v312;
                  v226[1] = v227;
                  v228 = v313;
                  v229 = v314;
                  v230 = v316;
                  v226[4] = v315;
                  v226[5] = v230;
                  v226[2] = v228;
                  v226[3] = v229;
                }
                ++*(_DWORD *)(a3 + 636);
              }
            }
          }
        }
      }
    }
  }
  v231 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v231)
    v232 = *(_BYTE *)(v231 + 144) == 0;
  else
    v232 = 0;
  if (!v232)
    goto LABEL_476;
  v233 = (int8x8_t)vcgt_s32(*(int32x2_t *)a2, (int32x2_t)0xFE000000FE000000);
  *(int8x8_t *)v312 = vorr_s8((int8x8_t)(*(_QWORD *)&v233 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *(int32x2_t *)a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*(int32x2_t *)a2, 6uLL)), v233));
  WebCore::EventHandler::hitTestResultAtPoint();
  v234 = *((_QWORD *)&v323 + 1);
  if (*((_QWORD *)&v323 + 1))
  {
    v235 = *(_QWORD *)(*((_QWORD *)&v323 + 1) + 64);
    v236 = (WebKit *)(v235 & 0xFFFFFFFFFFFFLL);
    if ((v235 & 0xFFFFFFFFFFFFLL) != 0)
    {
      v237 = *(_BYTE *)((v235 & 0xFFFFFFFFFFFFLL) + 0x2D);
      v238 = v235 & 0xFFFFFFFFFFFFLL;
      if ((v237 & 2) != 0)
      {
        v238 = *((_QWORD *)v236 + 4);
        if (v238)
          v238 = *(_QWORD *)(v238 + 8);
      }
      if (WebCore::RenderStyle::usedUserSelect((WebCore::RenderStyle *)(v238 + 80)))
      {
        if ((*(_WORD *)(v234 + 28) & 8) == 0)
          goto LABEL_390;
        *(_DWORD *)(v234 + 24) += 2;
        if ((WebKit::isAssistableElement((WebKit *)v234, v239) & 1) != 0)
        {
          v240 = 0;
          LOBYTE(v241) = 1;
        }
        else
        {
          WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v320);
          v241 = *(_DWORD *)(a3 + 188);
          WebCore::ScrollView::unobscuredContentRect();
          if ((float)((float)v242 * 0.97) >= (float)v241)
          {
            WebKit::hostVideoElementIgnoringImageOverlay((WebKit *)v312, (WebCore::Node *)v234);
            if (*(_QWORD *)v312)
            {
              if (*(_DWORD *)(*(_QWORD *)v312 + 24) == 2)
              {
                if ((*(_WORD *)(*(_QWORD *)v312 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef(*(WebCore::Node **)v312);
              }
              else
              {
                *(_DWORD *)(*(_QWORD *)v312 + 24) -= 2;
              }
              v240 = 0;
              LOBYTE(v241) = 4;
            }
            else
            {
              v240 = 1;
            }
          }
          else
          {
            v240 = 0;
            LOBYTE(v241) = 2;
          }
        }
        if (*(_DWORD *)(v234 + 24) == 2)
        {
          if ((*(_WORD *)(v234 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v234);
        }
        else
        {
          *(_DWORD *)(v234 + 24) -= 2;
        }
        if (v240)
LABEL_390:
          LOBYTE(v241) = 0;
      }
      else
      {
        LOBYTE(v241) = 3;
      }
      *(_BYTE *)(a3 + 19) = v241;
      *(_BYTE *)(a3 + 20) = WebCore::HitTestResult::isSelected((WebCore::HitTestResult *)v320);
      if (!(*(unsigned __int8 *)(a3 + 24) | *(unsigned __int8 *)(a3 + 25)))
      {
        WebKit::boundsPositionInformation(v236, (WebCore::RenderObject *)a3, v243);
        if ((*(_WORD *)(v234 + 28) & 8) != 0)
        {
          *(_DWORD *)(v234 + 24) += 2;
          v244 = *(_QWORD *)(v234 + 104);
          if (v244 && *(_QWORD *)(v244 + 24))
          {
            v245 = *(_DWORD *)(v244 + 4);
            if ((v245 & 1) != 0)
            {
              v246 = *(uint64_t **)(v244 + 40);
              LODWORD(v247) = *(_DWORD *)(v244 + 52);
            }
            else
            {
              v246 = (uint64_t *)(v244 + 32);
              LODWORD(v247) = v245 >> 5;
            }
            if ((_DWORD)v247)
            {
              v249 = *MEMORY[0x1E0DD5FA8];
              v247 = v247;
              while (1)
              {
                v250 = *v246;
                if (*v246 == v249
                  || *(_QWORD *)(v250 + 24) == *(_QWORD *)(v249 + 24)
                  && *(_QWORD *)(v250 + 32) == *(_QWORD *)(v249 + 32))
                {
                  break;
                }
                v246 += 2;
                if (!--v247)
                  goto LABEL_405;
              }
            }
            else
            {
LABEL_405:
              v246 = 0;
            }
            v248 = (WTF::StringImpl *)(v246 + 1);
          }
          else
          {
            v248 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
          }
          WTF::String::operator=((WTF::StringImpl **)(a3 + 168), v248);
          if (*(_DWORD *)(v234 + 24) == 2)
          {
            if ((*(_WORD *)(v234 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v234);
          }
          else
          {
            *(_DWORD *)(v234 + 24) -= 2;
          }
        }
        v251 = *(_WORD *)(v234 + 28);
        if ((v251 & 0x10) == 0
          || (v251 & 0x110) == 0x110
          || *(_QWORD *)(*(_QWORD *)(v234 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD5E20] + 24))
        {
          goto LABEL_452;
        }
        *(_DWORD *)(v234 + 24) += 2;
        *(_BYTE *)(a3 + 26) = 1;
        WebCore::HTMLAttachmentElement::attachmentTitle((WebCore::HTMLAttachmentElement *)v234);
        v254 = *(_QWORD *)v312;
        *(_QWORD *)v312 = 0;
        v255 = *(WTF::StringImpl **)(a3 + 160);
        *(_QWORD *)(a3 + 160) = v254;
        if (v255)
        {
          v256 = *(_DWORD *)v255 - 2;
          if (*(_DWORD *)v255 != 2)
            goto LABEL_416;
          WTF::StringImpl::destroy(v255, v252);
          v255 = *(WTF::StringImpl **)v312;
          *(_QWORD *)v312 = 0;
          if (!v255)
            goto LABEL_417;
          v256 = *(_DWORD *)v255 - 2;
          if (*(_DWORD *)v255 == 2)
            WTF::StringImpl::destroy(v255, v257);
          else
LABEL_416:
            *(_DWORD *)v255 = v256;
        }
LABEL_417:
        WebKit::linkIndicatorPositionInformation(this, (WebKit::WebPage *)v234, a2, (const WebKit::InteractionInformationRequest *)a3, v253);
        if (WebCore::HTMLAttachmentElement::file((WebCore::HTMLAttachmentElement *)v234))
        {
          WebCore::HTMLAttachmentElement::file((WebCore::HTMLAttachmentElement *)v234);
          WTF::URL::fileURLWithFileSystemPath();
          WTF::URL::operator=(v301, (WTF::StringImpl *)v312);
          v259 = *(WTF::StringImpl **)v312;
          *(_QWORD *)v312 = 0;
          if (v259)
          {
            if (*(_DWORD *)v259 == 2)
              WTF::StringImpl::destroy(v259, v258);
            else
              *(_DWORD *)v259 -= 2;
          }
        }
        if (*(_DWORD *)(v234 + 24) == 2)
        {
          if ((*(_WORD *)(v234 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v234);
        }
        else
        {
          *(_DWORD *)(v234 + 24) -= 2;
        }
LABEL_452:
        *(_DWORD *)(v234 + 24) += 2;
        while (1)
        {
          v282 = v234;
          v283 = *(_QWORD *)(v234 + 64) & 0xFFFFFFFFFFFFLL;
          if (v283)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v234 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              v284 = *(_QWORD *)((*(_QWORD *)(v234 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
              if (v284)
                v283 = *(_QWORD *)(v284 + 8);
              else
                v283 = 0;
            }
            if (!WebCore::RenderStyle::usedUserSelect((WebCore::RenderStyle *)(v283 + 80))
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v283 + 88) + 32) + 148) & 0xC00000) == 0x800000)
            {
              *(_BYTE *)(a3 + 21) = 1;
              if (*(_DWORD *)(v234 + 24) == 2)
              {
                if ((*(_WORD *)(v234 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v234);
              }
              else
              {
                *(_DWORD *)(v234 + 24) -= 2;
              }
              goto LABEL_475;
            }
          }
          if ((*(_WORD *)(v234 + 28) & 0x80) == 0)
            break;
          v286 = *(_QWORD *)(v234 + 200);
          if (v286)
          {
            v285 = (uint64_t *)(v286 + 8);
LABEL_464:
            v234 = *v285;
            if (*v285)
              *(_DWORD *)(v234 + 24) += 2;
            goto LABEL_466;
          }
          v234 = 0;
LABEL_466:
          if (*(_DWORD *)(v282 + 24) == 2)
          {
            if ((*(_WORD *)(v282 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v282);
          }
          else
          {
            *(_DWORD *)(v282 + 24) -= 2;
          }
          if (!v234)
            goto LABEL_475;
        }
        v285 = (uint64_t *)(v234 + 32);
        goto LABEL_464;
      }
    }
  }
LABEL_475:
  MEMORY[0x19AEADBAC](v320);
LABEL_476:
  if (v11
    && (*(_WORD *)(v11 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    *(_DWORD *)(v11 + 24) += 2;
    MEMORY[0x19AEB79A4](v320, v11);
    v287 = *(_QWORD *)v320;
    *(_QWORD *)v320 = 0;
    if (v287)
    {
      if (*(_DWORD *)(v287 + 24) == 2)
      {
        if ((*(_WORD *)(v287 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v287);
      }
      else
      {
        *(_DWORD *)(v287 + 24) -= 2;
      }
      v288 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
      if (v288 && !*(_BYTE *)(v288 + 144))
      {
        v289 = (int8x8_t)vcgt_s32(*(int32x2_t *)a2, (int32x2_t)0xFE000000FE000000);
        *(int8x8_t *)v312 = vorr_s8((int8x8_t)(*(_QWORD *)&v289 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *(int32x2_t *)a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*(int32x2_t *)a2, 6uLL)), v289));
        WebCore::EventHandler::hitTestResultAtPoint();
        v290 = *((_QWORD *)&v323 + 1);
        if (v290 == WebCore::HTMLInputElement::dataListButtonElement((WebCore::HTMLInputElement *)v11))
          *(_BYTE *)(a3 + 57) = 1;
        MEMORY[0x19AEADBAC](v320);
      }
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  if (v199)
  {
    if (*(_DWORD *)(v199 + 24) == 2)
    {
      if ((*(_WORD *)(v199 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v199);
    }
    else
    {
      *(_DWORD *)(v199 + 24) -= 2;
    }
  }
  if (v303)
  {
    if (*((_DWORD *)v303 + 6) == 2)
    {
      if ((*((_WORD *)v303 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v303);
    }
    else
    {
      *((_DWORD *)v303 + 6) -= 2;
    }
  }
  return (WTF::URL *)MEMORY[0x19AEADBAC](v304);
}

void sub_1973D306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WebCore::Node *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WebCore::Node *a35,uint64_t a36,uint64_t a37,uint64_t a38,WebCore::Node *a39,uint64_t a40,WTF::StringImpl *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,WebCore::Node *a54)
{
  WebKit::InteractionInformationAtPosition *v54;
  const void *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  void *v60;

  CFRelease(v55);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&a41);
  if (*(_BYTE *)(v58 - 216))
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v58 - 240));
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v57);
  if (v56)
  {
    if (*(_DWORD *)(v56 + 24) == 2)
    {
      if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v56);
    }
    else
    {
      *(_DWORD *)(v56 + 24) -= 2;
    }
  }
  if (a16)
  {
    if (*((_DWORD *)a16 + 6) == 2)
    {
      if ((*((_WORD *)a16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a16);
    }
    else
    {
      *((_DWORD *)a16 + 6) -= 2;
    }
  }
  MEMORY[0x19AEADBAC](&a17);
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition(v54, v60);
  _Unwind_Resume(a1);
}

uint64_t WebKit::hostVideoElementIgnoringImageOverlay(WebKit *this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  uint64_t result;

  v2 = a2;
  result = WebCore::ImageOverlay::isInsideOverlay(a2, (const Node *)a2);
  if ((result & 1) != 0)
    goto LABEL_8;
  if ((*((_WORD *)v2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24))
  {
    goto LABEL_7;
  }
  *(_QWORD *)this = 0;
  result = WebCore::Node::shadowHost(v2);
  v2 = (WebCore::Node *)result;
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24))
    {
LABEL_7:
      *((_DWORD *)v2 + 6) += 2;
      goto LABEL_9;
    }
LABEL_8:
    v2 = 0;
  }
LABEL_9:
  *(_QWORD *)this = v2;
  return result;
}

double WebKit::videoPositionInformation(WebKit *this, WebKit::WebPage *a2, WebCore::HTMLVideoElement *a3, const WebKit::InteractionInformationRequest *a4, WebKit::InteractionInformationAtPosition *a5)
{
  double result;
  uint64_t v10;
  void *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  __int128 v17;
  __int128 v18;
  WTF *v19;
  _OWORD v20[5];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)a4 + 58) = WebCore::ImageOverlay::hasOverlay(a2, a2);
  if (WebCore::HTMLMediaElement::paused(a2))
  {
    v10 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1973D38C8);
      }
      if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
        || (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1973D38E8);
      }
      if (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
      {
        __break(0xC471u);
        JUMPOUT(0x1973D3908);
      }
      *((_BYTE *)a4 + 30) = 1;
      if (*((_BYTE *)a3 + 12))
      {
        LOBYTE(v20[0]) = 0;
        BYTE8(v20[0]) = 0;
        WORD6(v20[0]) = 1;
        WebKit::createShareableBitmap(v10, (uint64_t)v20, &v19);
        v13 = v19;
        v19 = 0;
        v14 = *((_QWORD *)a4 + 24);
        *((_QWORD *)a4 + 24) = v13;
        if (v14)
        {
          WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v14, v12);
          v16 = v19;
          v19 = 0;
          if (v16)
            WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v16, v15);
        }
      }
      WebKit::WebPage::contextForElement(this, a2, (uint64_t)v20);
      v17 = v20[3];
      *((_OWORD *)a4 + 35) = v20[2];
      *((_OWORD *)a4 + 36) = v17;
      *((_OWORD *)a4 + 37) = v20[4];
      *((_BYTE *)a4 + 608) = v21;
      result = *(double *)v20;
      v18 = v20[1];
      *((_OWORD *)a4 + 33) = v20[0];
      *((_OWORD *)a4 + 34) = v18;
    }
  }
  return result;
}

void WebKit::imagePositionInformation(WebKit *this, WebKit::WebPage *a2, WebCore::Element *a3, const WebKit::InteractionInformationRequest *a4, WebKit::InteractionInformationAtPosition *a5)
{
  uint64_t v9;
  WebCore::Image *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  const WebCore::HTMLElement *v20;
  __int16 v21;
  WebCore *hasOverlay;
  float v23;
  float v24;
  float v25;
  void *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  void *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  WTF::StringImpl *v33[5];
  _QWORD v34[2];
  char v35;
  WTF::StringImpl *v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  WebKit::imageRendererAndImage((WebKit *)v34, *((_QWORD *)a2 + 8));
  if (!v35)
    return;
  v9 = v34[0];
  v10 = (WebCore::Image *)v34[1];
  *((_BYTE *)a4 + 25) = 1;
  v11 = WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(_QWORD *)(v9 + 224) + 24));
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v11 + 160));
  WebCore::Document::completeURL();
  WebKit::WebPage::applyLinkDecorationFiltering((uint64_t)v36, this, (uint64_t)v33);
  WTF::URL::operator=((uint64_t)a4 + 112, (WTF::StringImpl *)v36);
  v13 = v36[0];
  v36[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v33[0];
  v33[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  WebCore::Image::mimeType(v10);
  v16 = v36[0];
  v36[0] = 0;
  v17 = (WTF::StringImpl *)*((_QWORD *)a4 + 19);
  *((_QWORD *)a4 + 19) = v16;
  if (v17)
  {
    v18 = *(_DWORD *)v17 - 2;
    if (*(_DWORD *)v17 != 2)
    {
LABEL_14:
      *(_DWORD *)v17 = v18;
      goto LABEL_15;
    }
    WTF::StringImpl::destroy(v17, v15);
    v17 = v36[0];
    v36[0] = 0;
    if (v17)
    {
      v18 = *(_DWORD *)v17 - 2;
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v19);
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
LABEL_15:
  *((_BYTE *)a4 + 27) = (*(uint64_t (**)(WebCore::Image *))(*(_QWORD *)v10 + 112))(v10);
  *((_BYTE *)a4 + 28) = (*(uint64_t (**)(WebCore::Image *))(*(_QWORD *)v10 + 280))(v10);
  v21 = *((_WORD *)a2 + 14);
  if ((v21 & 0x10) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    hasOverlay = (WebCore *)WebCore::ImageOverlay::hasOverlay(a2, v20);
  }
  else
  {
    hasOverlay = 0;
  }
  *((_BYTE *)a4 + 58) = (_BYTE)hasOverlay;
  if (*((unsigned __int8 *)a3 + 8) | *((unsigned __int8 *)a3 + 12))
  {
    WebCore::screenSize(hasOverlay);
    v23 = *(float *)(*((_QWORD *)this + 6) + 364);
    *(float *)v36 = v24 * v23;
    *((float *)v36 + 1) = v25 * v23;
    LOBYTE(v36[1]) = 1;
    WORD2(v36[1]) = 257;
    WebKit::createShareableBitmap(v9, (uint64_t)v36, v33);
    v27 = v33[0];
    v33[0] = 0;
    v28 = *((_QWORD *)a4 + 24);
    *((_QWORD *)a4 + 24) = v27;
    if (v28)
    {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v28, v26);
      v30 = v33[0];
      v33[0] = 0;
      if (v30)
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v30, v29);
    }
  }
  WebKit::WebPage::contextForElement(this, a2, (uint64_t)v36);
  v31 = v39;
  *((_OWORD *)a4 + 35) = v38;
  *((_OWORD *)a4 + 36) = v31;
  *((_OWORD *)a4 + 37) = v40;
  *((_BYTE *)a4 + 608) = v41;
  v32 = v37;
  *((_OWORD *)a4 + 33) = *(_OWORD *)v36;
  *((_OWORD *)a4 + 34) = v32;
  if ((v21 & 0x10) != 0)
  {
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
}

void sub_1973D3BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  uint64_t v17;

  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v17);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPage::requestPositionInformation(WebKit::WebPage *this, const WebKit::InteractionInformationRequest *a2)
{
  WebKit::WebPage *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;
  _BYTE v12[648];
  uint64_t v13;

  v3 = this;
  v13 = *MEMORY[0x1E0C80C00];
  WebKit::WebPage::sendEditorStateUpdate(this);
  WebKit::WebPage::positionInformation(v3, a2, (uint64_t)v12);
  v4 = *((_QWORD *)v3 + 4);
  v3 = (WebKit::WebPage *)((char *)v3 + 32);
  v5 = (*(uint64_t (**)(WebKit::WebPage *))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1908;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::encode((IPC::Encoder *)v6, (uint64_t)v12);
  (*(void (**)(WebKit::WebPage *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v11, 0);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v12, v7);
}

void sub_1973D3D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::startInteractionWithElementContextOrPosition(uint64_t this, const ElementContext *a2, IntPoint *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::LocalFrame *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = this;
  if (!a2[1].documentIdentifier.m_object[8])
    goto LABEL_6;
  WebKit::WebPage::elementForContext(this, a2, &v11);
  v5 = v11;
  this = *(_QWORD *)(v4 + 1240);
  *(_QWORD *)(v4 + 1240) = v11;
  if (this)
  {
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)this);
        v5 = *(_QWORD *)(v4 + 1240);
      }
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
  if (!v5)
  {
LABEL_6:
    v11 = 0;
    v6 = *(WebCore::LocalFrame **)(*(_QWORD *)(v4 + 48) + 160);
    if (v6)
      v7 = *((_BYTE *)v6 + 144) == 0;
    else
      v7 = 0;
    if (v7)
    {
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v10, a3);
      v8 = WebCore::LocalFrame::nodeRespondingToInteraction(v6, (const WebCore::FloatPoint *)&v10, (WebCore::FloatPoint *)&v11);
      v9 = v8;
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      this = *(_QWORD *)(v4 + 1240);
      *(_QWORD *)(v4 + 1240) = v9;
      if (this)
      {
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)this);
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPage::stopInteraction(WebKit::WebPage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

void WebKit::WebPage::performActionOnElement(uint64_t a1, WebCore::Element *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  void *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  int v34;
  WebCore::HTMLAnchorElement *v35;
  WebCore::HTMLAnchorElement *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::Editor *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  __int128 v69;
  __int128 v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  _OWORD v73[2];
  uint64_t v74;

  v4 = *a4;
  *a4 = 0;
  v74 = v4;
  v5 = *(_QWORD *)(a1 + 1240);
  if (!v5)
    goto LABEL_5;
  v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 2;
  if ((*(_WORD *)(v5 + 28) & 0x10) == 0)
  {
    if (v6)
    {
LABEL_4:
      *(_DWORD *)(v5 + 24) = v6;
      goto LABEL_5;
    }
    goto LABEL_104;
  }
  v7 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      goto LABEL_110;
    }
    if (a2 != 1)
    {
      if ((_BYTE)a2)
      {
LABEL_102:
        WebKit::handleAnimationActions(v5, a2);
        goto LABEL_103;
      }
      if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
        || (*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0)
      {
        if ((*(_WORD *)(v5 + 30) & 1) == 0)
        {
          WebCore::Document::editor(*(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8));
          WebCore::Editor::promisedAttachmentInfo();
          if (v72)
          {
            if (*((_DWORD *)v72 + 1))
            {
              v14 = *(_QWORD *)(a1 + 32);
              v13 = a1 + 32;
              v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
              v16 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v16 = 2093;
              *(_QWORD *)(v16 + 8) = v15;
              *(_QWORD *)(v16 + 528) = v16 + 16;
              *(_QWORD *)(v16 + 536) = v16 + 16;
              *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v16 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
              v68 = (WTF::StringImpl *)v16;
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)&v72);
              IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v16, (uint64_t *)v73);
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a3);
              (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v13 + 32))(v13, &v68, 0);
              v17 = v68;
              v68 = 0;
              if (v17)
              {
                IPC::Encoder::~Encoder(v17, v12);
                WTF::fastFree(v18, v19);
              }
            }
          }
          WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v73, v12);
          goto LABEL_98;
        }
        v42 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8));
        v43 = *(_QWORD *)(v5 + 104);
        if (v43)
        {
          v44 = *(_DWORD *)(v43 + 4);
          if ((v44 & 1) != 0)
          {
            v45 = *(_QWORD *)(v43 + 40);
            LODWORD(v46) = *(_DWORD *)(v43 + 52);
          }
          else
          {
            v45 = v43 + 32;
            LODWORD(v46) = v44 >> 5;
          }
          if ((_DWORD)v46)
          {
            v48 = *MEMORY[0x1E0DD60B0];
            v46 = v46;
            v49 = v45 + 8;
            do
            {
              v50 = *(_QWORD *)(v49 - 8);
              if (v50 == v48
                || *(_QWORD *)(v50 + 24) == *(_QWORD *)(v48 + 24) && *(_QWORD *)(v50 + 32) == *(_QWORD *)(v48 + 32))
              {
                break;
              }
              v49 += 16;
              --v46;
            }
            while (v46);
          }
        }
        WebCore::Document::completeURL();
        WebCore::Node::textContent((WebCore::Node *)v5);
        WebCore::Editor::copyURL(v42, (const WTF::URL *)&v72, (const WTF::String *)&v68);
        v51 = v68;
        v68 = 0;
        if (!v51)
          goto LABEL_98;
      }
      else
      {
        WTF::URL::URL((WTF::URL *)&v72);
        v71 = 0;
        v35 = (WebCore::HTMLAnchorElement *)WebKit::containingLinkAnchorElement(v5);
        if (v35)
        {
          v36 = v35;
          *((_DWORD *)v35 + 6) += 2;
          WebCore::HTMLAnchorElement::href(v35);
          if (v68)
          {
            if (*((_DWORD *)v68 + 1) && (WTF::URL::protocolIsJavaScript((WTF::URL *)&v68) & 1) == 0)
            {
              WTF::String::operator=(&v72, (WTF::StringImpl *)&v68);
              v73[0] = v69;
              v73[1] = v70;
              v38 = *((_QWORD *)v36 + 13);
              if (v38
                && ((v39 = *(_DWORD *)(v38 + 4), (v39 & 1) != 0)
                  ? (v40 = *(_QWORD *)(v38 + 40), LODWORD(v41) = *(_DWORD *)(v38 + 52))
                  : (v40 = v38 + 32, LODWORD(v41) = v39 >> 5),
                    (_DWORD)v41))
              {
                v52 = *MEMORY[0x1E0DD6230];
                v41 = v41;
                v53 = (WTF::StringImpl *)(v40 + 8);
                while (1)
                {
                  v54 = *((_QWORD *)v53 - 1);
                  if (v54 == v52
                    || *(_QWORD *)(v54 + 24) == *(_QWORD *)(v52 + 24) && *(_QWORD *)(v54 + 32) == *(_QWORD *)(v52 + 32))
                  {
                    break;
                  }
                  v53 = (WTF::StringImpl *)((char *)v53 + 16);
                  if (!--v41)
                  {
                    v53 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
                    break;
                  }
                }
              }
              else
              {
                v53 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
              }
              WTF::String::operator=(&v71, v53);
              if (!v71 || !*((_DWORD *)v71 + 1))
              {
                WebCore::Node::textContent(v36);
                v56 = v66;
                v66 = 0;
                v57 = v71;
                v71 = v56;
                if (v57)
                {
                  if (*(_DWORD *)v57 == 2)
                  {
                    WTF::StringImpl::destroy(v57, v55);
                    v66 = 0;
                  }
                  else
                  {
                    *(_DWORD *)v57 -= 2;
                  }
                }
              }
              WTF::String::trim();
              v58 = v71;
              v71 = v66;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, v37);
                else
                  *(_DWORD *)v58 -= 2;
              }
            }
            v59 = v68;
            v68 = 0;
            if (v59)
            {
              if (*(_DWORD *)v59 == 2)
                WTF::StringImpl::destroy(v59, v37);
              else
                *(_DWORD *)v59 -= 2;
            }
          }
          if (*((_DWORD *)v36 + 6) == 2)
          {
            if ((*((_WORD *)v36 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v36);
          }
          else
          {
            *((_DWORD *)v36 + 6) -= 2;
          }
        }
        WebCore::Document::editor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(a1 + 1240) + 40) + 8));
        v60 = WebCore::Document::pageID(*(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8));
        v62 = v61;
        v63 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v63 = off_1E34D3A40;
        *((_QWORD *)v63 + 1) = v60;
        *((_QWORD *)v63 + 2) = v62;
        v67 = v63;
        WebCore::Pasteboard::createForCopyAndPaste();
        WebCore::Editor::writeImageToPasteboard();
        v64 = v68;
        v68 = 0;
        if (v64)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v64 + 8))(v64);
        if (v67)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v67 + 8))(v67);
        v51 = v71;
        v71 = 0;
        if (!v51)
          goto LABEL_98;
      }
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v20);
      else
        *(_DWORD *)v51 -= 2;
LABEL_98:
      v65 = v72;
      v72 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v20);
        else
          *(_DWORD *)v65 -= 2;
      }
      goto LABEL_102;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
      && (*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) != 0)
    {
      ++*(_DWORD *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      v22 = WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(_QWORD *)(v7 + 224) + 24));
      if (!v22 || (v23 = *(unsigned int **)(v22 + 392)) == 0)
      {
        v34 = 1;
LABEL_53:
        v47 = *(_DWORD *)(v7 + 16);
        if (v47)
        {
          *(_DWORD *)(v7 + 16) = v47 - 1;
          if (v34)
            goto LABEL_103;
          goto LABEL_102;
        }
        __break(0xC471u);
LABEL_110:
        JUMPOUT(0x1973D45C8);
      }
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      LOBYTE(v72) = 0;
      BYTE8(v73[0]) = 0;
      WebCore::SharedMemory::copyBuffer();
      if (v71)
      {
        WebCore::SharedMemory::createHandle();
        std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>((WTF::MachSendRight *)&v72, (uint64_t)&v68);
        if (BYTE8(v69))
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v68);
        v26 = (unsigned int *)v71;
        v71 = 0;
        if (v26)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v26);
        if (!BYTE8(v73[0]))
        {
          v34 = 1;
LABEL_52:
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v25);
          goto LABEL_53;
        }
        v28 = *(_QWORD *)(a1 + 32);
        v27 = a1 + 32;
        v29 = (*(uint64_t (**)(uint64_t))(v28 + 56))(v27);
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 2023;
        *(_QWORD *)(v30 + 8) = v29;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v68 = (WTF::StringImpl *)v30;
        IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v30, (unint64_t)&v72);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, a3);
        (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v27 + 32))(v27, &v68, 0);
        v31 = v68;
        v68 = 0;
        if (v31)
        {
          IPC::Encoder::~Encoder(v31, v25);
          WTF::fastFree(v32, v33);
        }
        v34 = 0;
      }
      else
      {
        v34 = 1;
      }
      if (BYTE8(v73[0]))
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v72);
      goto LABEL_52;
    }
  }
LABEL_103:
  v6 = *(_DWORD *)(v5 + 24) - 2;
  if (*(_DWORD *)(v5 + 24) != 2)
    goto LABEL_4;
LABEL_104:
  if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v5);
LABEL_5:
  WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope((WTF::CompletionHandlerCallingScope *)&v74);
}

void sub_1973D4600(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (*(_DWORD *)(v20 + 24) == 2)
  {
    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v20);
  }
  else
  {
    *(_DWORD *)(v20 + 24) -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v19);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
  WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope((WTF::CompletionHandlerCallingScope *)(v21 - 72));
  _Unwind_Resume(a1);
}

uint64_t WebKit::containingLinkAnchorElement(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  __int16 v3;

  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || (v1 = *(_QWORD *)(*MEMORY[0x1E0DD5EE8] + 24), *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != v1))
  {
    result = *(_QWORD *)(result + 32);
    if (!result)
      return result;
    v3 = *(_WORD *)(result + 28);
    if ((v3 & 8) == 0)
      return 0;
    while (1)
    {
      if ((v3 & 0x10) != 0)
      {
        v1 = *(_QWORD *)(*MEMORY[0x1E0DD5EE8] + 24);
        if (*(_QWORD *)(*(_QWORD *)(result + 96) + 24) == v1)
          break;
      }
      result = *(_QWORD *)(result + 32);
      if (!result)
        return result;
      v3 = *(_WORD *)(result + 28);
      if ((v3 & 8) == 0)
        return 0;
    }
  }
LABEL_3:
  if ((*(_WORD *)(result + 30) & 1) == 0)
  {
    while (1)
    {
      result = *(_QWORD *)(result + 32);
      if (!result)
        break;
      v2 = *(_WORD *)(result + 28);
      if ((v2 & 8) == 0)
        return 0;
      if ((v2 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == v1)
        goto LABEL_3;
    }
  }
  return result;
}

uint64_t WTF::isASCIIWhitespace<char16_t>(unsigned int a1)
{
  return (a1 < 0x21) & (0x100003600uLL >> a1);
}

uint64_t WebKit::handleAnimationActions(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;

  v2 = this;
  if (a2 == 2)
  {
    if ((*(_WORD *)(this + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(this + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD5FB0] + 24))
    {
      goto LABEL_8;
    }
  }
  else if (a2 == 3
         && (*(_WORD *)(this + 28) & 0x10) != 0
         && *(_QWORD *)(*(_QWORD *)(this + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD5FB0] + 24))
  {
LABEL_8:
    *(_DWORD *)(this + 24) += 2;
    this = WebCore::HTMLImageElement::setAllowsAnimation();
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

void sub_1973D49C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::performActionOnElements(uint64_t this, WebCore::Element *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  const ElementContext *v6;
  uint64_t v7;
  WebKit *v8;
  WebKit *v9;

  v3 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v3)
  {
    v5 = this;
    v6 = *(const ElementContext **)a3;
    v7 = 80 * v3;
    do
    {
      this = WebKit::WebPage::elementForContext(v5, v6, &v9);
      v8 = v9;
      if (v9)
      {
        this = WebKit::handleAnimationActions((uint64_t)v9, a2);
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef(v8);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      v6 = (const ElementContext *)((char *)v6 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  return this;
}

void sub_1973D4A98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::focusNextFocusedElement(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  __int16 v9;
  uint64_t v10;

  WebKit::nextAssistableElement((uint64_t)&v10, *(Node **)(a1 + 920), *(WebCore::Page **)(*(_QWORD *)(a1 + 48) + 72), a2);
  *(_BYTE *)(a1 + 912) = 1;
  v5 = v10;
  if (v10)
  {
    v9 = 0;
    v8 = 0;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 656))(v10, &v8);
  }
  *(_BYTE *)(a1 + 912) = 0;
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return result;
}

void sub_1973D4B90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::nextAssistableElement(uint64_t this, Node *a2, WebCore::Page *a3, int a4)
{
  Node *v4;
  WebCore::Element *v7;
  Node *v8;
  uint64_t v9;
  uint64_t v10;
  Node **v11;
  _BYTE v12[136];
  uint64_t v13;

  if (a2 && (v4 = a2, (*((_WORD *)a2 + 14) & 8) != 0))
  {
    v11 = (Node **)this;
    *((_DWORD *)a2 + 6) += 2;
    ++*(_DWORD *)a3;
    while (1)
    {
      if (a4)
        this = WebCore::FocusController::nextFocusableElement(a3, v4);
      else
        this = WebCore::FocusController::previousFocusableElement(a3, v4);
      v8 = (Node *)this;
      if (this)
        *(_DWORD *)(this + 24) += 2;
      if (*((_DWORD *)v4 + 6) == 2)
      {
        if ((*((_WORD *)v4 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *((_DWORD *)v4 + 6) -= 2;
      }
      if (!v8)
        break;
      v4 = v8;
      if (WebKit::isAssistableElement((WebKit *)v8, v7))
      {
        v9 = WebCore::Document::topDocument(*(WebCore::Document **)(*((_QWORD *)v8 + 5) + 8));
        *(_DWORD *)(v9 + 24) += 2;
        v13 = v9;
        WebCore::Element::boundingBoxInRootViewCoordinates((WebCore::Element *)v8);
        WebCore::HitTestResult::HitTestResult();
        WebCore::Document::hitTest();
        WebCore::HitTestResult::setToNonUserAgentShadowAncestor((WebCore::HitTestResult *)v12);
        v10 = WebCore::HitTestResult::targetElement((WebCore::HitTestResult *)v12);
        MEMORY[0x19AEADBAC](v12);
        this = (uint64_t)WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
        v4 = v8;
        if ((Node *)v10 == v8)
          break;
      }
    }
    *v11 = v8;
    if (*(_DWORD *)a3)
    {
      --*(_DWORD *)a3;
    }
    else
    {
      this = 286;
      __break(0xC471u);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

uint64_t sub_1973D4DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  va_list va;

  va_start(va, a4);
  MEMORY[0x19AEADBAC](va);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v6 - 96));
  if (*v4)
  {
    --*v4;
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    _Unwind_Resume(a1);
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t *WebKit::WebPage::autofillLoginCredentials(uint64_t *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  int v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13[3];
  char v14;

  v3 = this[115];
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v4 + 2;
    if ((*(_WORD *)(v3 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      if (!v4)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v3);
        return this;
      }
LABEL_21:
      *(_DWORD *)(v3 + 24) = v4;
      return this;
    }
    *(_DWORD *)(v3 + 24) = v4 + 4;
    v12 = v3;
    WebCore::AutofillElements::computeAutofillElements();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v12);
    if (v14)
    {
      v7 = *a2;
      if (*a2)
        *(_DWORD *)v7 += 2;
      v11 = v7;
      v8 = *a3;
      if (*a3)
        *(_DWORD *)v8 += 2;
      v10 = v8;
      WebCore::AutofillElements::autofill();
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    this = std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](v13);
    v4 = *(_DWORD *)(v3 + 24) - 2;
    if (*(_DWORD *)(v3 + 24) != 2)
      goto LABEL_21;
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  return this;
}

void sub_1973D4FDC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, int a13, uint64_t a14)
{
  uint64_t v14;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](&a14);
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::setDeviceOrientation(uint64_t this, int a2)
{
  BOOL v2;

  if (*(_DWORD *)(this + 1488) != a2)
  {
    *(_DWORD *)(this + 1488) = a2;
    this = *(_QWORD *)(*(_QWORD *)(this + 48) + 160);
    if (this)
      v2 = *(_BYTE *)(this + 144) == 0;
    else
      v2 = 0;
    if (v2)
      return WebCore::LocalFrame::orientationChanged((WebCore::LocalFrame *)this);
  }
  return this;
}

uint64_t WebKit::WebPage::dynamicViewportSizeUpdate(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  WebCore::ScrollView *v6;
  unint64_t v7;
  float v8;
  uint64_t v9;
  WebKit *v10;
  double v11;
  float v12;
  double v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  double v23;
  BOOL v24;
  unsigned int *v26;
  int v27;
  BOOL v28;
  FloatSize v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  float v49;
  float v50;
  WebCore::RenderObject *v51;
  WebCore::ScrollView *v52;
  uint64_t v53;
  uint64_t v54;
  float m_y;
  float m_height;
  float v57;
  int IsKnownToLayOutWiderThanViewport;
  const WebCore::ViewportConfiguration *v59;
  const WebCore::IntSize *v60;
  const WebCore::IntSize *v61;
  double v62;
  float v63;
  BOOL v64;
  _BOOL8 v65;
  WebKit *v66;
  double v67;
  double v68;
  FloatRect v69;
  float v70;
  double v71;
  uint64_t shouldIgnoreMetaViewport;
  BOOL v73;
  float m_width;
  float v75;
  float32x2_t v76;
  float64x2_t v77;
  int64x2_t v78;
  float64x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float v94;
  float v95;
  float v96;
  float v97;
  uint64_t v98;
  int v99;
  int i;
  uint64_t v101;
  int v102;
  double v104;
  BOOL v105;
  unsigned int v107;
  float v108;
  float v109;
  float m_x;
  float v111;
  WebCore::ScrollView *v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  uint64_t v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  unint64_t v131;
  uint64_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int8x16_t v135;
  int32x4_t v136;
  int8x16_t v137;
  uint64_t v138;
  float v139;
  uint64_t v140;
  float v141;
  unint64_t v142;
  IntSize v143;
  uint64_t v144;
  BOOL v145;
  double v146;
  BOOL v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  IntPoint v151;
  _QWORD v152[2];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  FloatRect v157;
  FloatSize v158[2];
  uint64_t v159;
  uint64_t v160;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 48) + 160);
  if (v2)
    _ZF = *(_BYTE *)(v2 + 144) == 0;
  else
    _ZF = 0;
  if (!_ZF)
    return result;
  v5 = result;
  v148 = *(_BYTE *)(result + 1493);
  *(_BYTE *)(result + 1493) = 1;
  v6 = *(WebCore::ScrollView **)(v2 + 288);
  v7 = WebCore::ScrollView::contentsSize(v6);
  v8 = *(float *)(*(_QWORD *)(v5 + 48) + 356);
  v9 = WebCore::ScrollView::unobscuredContentRect();
  v10 = (WebKit *)WebCore::ViewportConfiguration::initialScale((WebCore::ViewportConfiguration *)(v5 + 944));
  v144 = v9;
  v12 = v11;
  v145 = WebKit::scalesAreEssentiallyEqual(v10, v8, v12);
  v158[0] = (FloatSize)v7;
  v13 = v8;
  v158[1] = *(FloatSize *)&v13;
  v14 = WebCore::ScrollableArea::visibleContentRect();
  v15 = (uint64_t *)(v5 + 1496);
  v16 = *(_QWORD *)(v5 + 1496);
  if (v16
    || (WTF::HashTable<std::pair<WebCore::IntSize,double>,WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>>,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashMap<std::pair<WebCore::IntSize,double>,WebCore::IntPoint,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::IntSize,double>>>::expand((uint64_t *)(v5 + 1496)),
        (v16 = *v15) != 0))
  {
    v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = HIDWORD(v7);
  v19 = WTF::PairHash<WebCore::IntSize,double>::hash((uint64_t)v158) & v17;
  v20 = (unsigned int *)(v16 + 24 * v19);
  v21 = *v20;
  v22 = v20[1];
  v23 = *((double *)v20 + 1);
  if (*v20)
    v24 = 0;
  else
    v24 = v22 == 0;
  if (!v24 || v23 != INFINITY)
  {
    v26 = 0;
    v27 = 1;
    while (__PAIR64__(v22, v21) != v7 || *(_QWORD *)&v13 != *(_QWORD *)&v23)
    {
      if ((v21 & v22) == 0xFFFFFFFF)
        v26 = v20;
      v19 = (v19 + v27) & v17;
      v20 = (unsigned int *)(v16 + 24 * v19);
      v21 = *v20;
      v22 = v20[1];
      v23 = *((double *)v20 + 1);
      ++v27;
      if (*v20)
        v28 = 0;
      else
        v28 = v22 == 0;
      if (v28 && v23 == INFINITY)
      {
        v30 = (FloatSize)v7;
        if (v26)
        {
          *(_OWORD *)v26 = xmmword_1978D08F0;
          *((_QWORD *)v26 + 2) = 0x8000000000000000;
          --*(_DWORD *)(*v15 - 16);
          v30 = v158[0];
          v20 = v26;
        }
        goto LABEL_32;
      }
    }
    goto LABEL_41;
  }
  v30 = (FloatSize)v7;
LABEL_32:
  *(FloatSize *)v20 = v30;
  *((FloatSize *)v20 + 1) = v158[1];
  *((_QWORD *)v20 + 2) = v14;
  v31 = *v15;
  if (*v15)
    v32 = *(_DWORD *)(v31 - 12) + 1;
  else
    v32 = 1;
  *(_DWORD *)(v31 - 12) = v32;
  v33 = *v15;
  if (*v15)
    v34 = *(_DWORD *)(v33 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(v33 - 16) + v34);
  v36 = *(unsigned int *)(v33 - 4);
  if (v36 <= 0x400)
  {
    if (3 * v36 > 4 * v35)
      goto LABEL_41;
    goto LABEL_40;
  }
  if (v36 <= 2 * v35)
LABEL_40:
    WTF::HashTable<std::pair<WebCore::IntSize,double>,WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>>,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashMap<std::pair<WebCore::IntSize,double>,WebCore::IntPoint,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::IntSize,double>>>::expand((uint64_t *)(v5 + 1496));
LABEL_41:
  if (WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)v5) && *(_BYTE *)(v5 + 916))
  {
    v37 = 0;
    v38 = 1.0;
    v39 = 0.0;
    v40 = 0.0;
  }
  else
  {
    WebCore::ScrollView::unobscuredContentSize(v6);
    v42 = v41;
    v43 = WebCore::ScrollView::unobscuredContentRect();
    if ((v44 & 0x80000000) == 0)
      v45 = v44;
    else
      v45 = v44 + 1;
    v46 = v43 + (v45 >> 1);
    v47 = HIDWORD(v44);
    if ((v44 & 0x8000000000000000) != 0)
      LODWORD(v47) = HIDWORD(v44) + 1;
    v48 = HIDWORD(v43) + ((int)v47 >> 1);
    LODWORD(v49) = v46 << 6;
    if (v46 < -33554432)
      v49 = -0.0;
    if (v46 > 0x1FFFFFF)
      v49 = NAN;
    LODWORD(v50) = v48 << 6;
    if (v48 < -33554432)
      v50 = -0.0;
    if (v48 > 0x1FFFFFF)
      v50 = NAN;
    v157.m_location.m_x = v49;
    v157.m_location.m_y = v50;
    WebCore::HitTestResult::HitTestResult();
    if (*(_QWORD *)(WebCore::LocalFrameView::frame(v6) + 296))
    {
      LODWORD(v157.m_location.m_x) = 259;
      LOBYTE(v157.m_location.m_y) = 1;
      WebCore::Document::hitTest();
    }
    v39 = 0.0;
    if (v160 && (v51 = (WebCore::RenderObject *)(*(_QWORD *)(v160 + 64) & 0xFFFFFFFFFFFFLL)) != 0)
    {
      v149 = v160;
      v52 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v160 + 40) + 8) + 528) + 8)
                                    + 288);
      v154 = WebCore::RenderObject::absoluteBoundingBoxRect(v51, 1, 0);
      v155 = v53;
      *(_QWORD *)&v156 = WebCore::ScrollView::contentsToRootView(v52, (const WebCore::IntRect *)&v154);
      *((_QWORD *)&v156 + 1) = v54;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v157, (const WebCore::IntRect *)&v156);
      m_y = v157.m_location.m_y;
      m_height = v157.m_size.m_height;
      v40 = (float)((float)v46 - v157.m_location.m_x) / v157.m_size.m_width;
      *(_DWORD *)(v149 + 24) += 2;
      v57 = (float)v48;
      v37 = v149;
      v39 = (float)(v57 - m_y) / m_height;
    }
    else
    {
      v37 = 0;
      v40 = 0.0;
    }
    v38 = v42 / (float)(int)v7;
    MEMORY[0x19AEADBAC](v158);
  }
  IsKnownToLayOutWiderThanViewport = WebCore::ViewportConfiguration::setIsKnownToLayOutWiderThanViewport((WebCore::ViewportConfiguration *)(v5 + 944));
  LOBYTE(v158[0].m_width) = 0;
  LOBYTE(v158[1].m_width) = 0;
  v157.m_location = *(FloatPoint *)(a2 + 104);
  LOBYTE(v157.m_size.m_width) = 1;
  if ((IsKnownToLayOutWiderThanViewport | WebCore::ViewportConfiguration::setViewLayoutSize()) == 1)
    WebKit::WebPage::viewportConfigurationChanged(v5, 0);
  v153 = WebCore::ViewportConfiguration::layoutSize((WebCore::ViewportConfiguration *)(v5 + 944));
  if (WebKit::WebPage::setFixedLayoutSize((WebKit::WebPage *)v5, (IntSize *)&v153))
    WebKit::WebPage::resetTextAutosizing(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 160));
  WebKit::WebPage::setDefaultUnobscuredSize((WebCore::LocalFrameView *)v5, (const WebCore::FloatSize *)(a2 + 16));
  WebKit::WebPage::setMinimumUnobscuredSize((WebCore::LocalFrameView *)v5, (const WebCore::FloatSize *)(a2 + 8));
  WebKit::WebPage::setMaximumUnobscuredSize((WebCore::LocalFrameView *)v5, (const WebCore::FloatSize *)(a2 + 16));
  WebCore::Page::setUnobscuredSafeAreaInsets();
  WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive();
  v59 = (const WebCore::ViewportConfiguration *)WebCore::ScrollView::contentsSize(v6);
  if (!WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)v5))
    goto LABEL_73;
  v64 = v145;
  if (!*(_BYTE *)(v5 + 916))
    v64 = 0;
  if (v64)
    v65 = 0;
  else
LABEL_73:
    v65 = *(_BYTE *)(v5 + 1291) != 0;
  LODWORD(v62) = *(_DWORD *)(a2 + 64);
  v66 = (WebKit *)WebKit::scaleAfterViewportWidthChange((WebKit *)v65, v62, (WebCore::ViewportConfiguration *)(v5 + 944), v59, v38, v60, v61, v63);
  v68 = v67;
  v69 = *(FloatRect *)(a2 + 40);
  v156 = *(_OWORD *)(a2 + 24);
  v157 = v69;
  v70 = v67;
  v71 = *(double *)(a2 + 88);
  v69.m_location.m_x = v71;
  shouldIgnoreMetaViewport = WebKit::scalesAreEssentiallyEqual(v66, v70, v69.m_location.m_x);
  if ((shouldIgnoreMetaViewport & 1) != 0)
  {
    if ((const WebCore::ViewportConfiguration *)v7 == v59)
      goto LABEL_138;
    v150 = v37;
    v73 = 0;
    m_width = v157.m_size.m_width;
    v75 = v157.m_size.m_height;
  }
  else
  {
    v76 = *(float32x2_t *)(a2 + 48);
    v146 = v71 / v68;
    shouldIgnoreMetaViewport = WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)v5);
    v77 = vmulq_n_f64(vcvtq_f64_f32(v76), v71 / v68);
    if ((_DWORD)shouldIgnoreMetaViewport && *(_BYTE *)(v5 + 916))
    {
      v78.i64[0] = (int)v144;
      v78.i64[1] = SHIDWORD(v144);
      v79 = vcvtq_f64_s64(v78);
      v80 = *(float32x2_t *)(a2 + 40);
      v81 = *(float32x2_t *)(a2 + 48);
    }
    else
    {
      v80 = *(float32x2_t *)(a2 + 40);
      v81 = *(float32x2_t *)(a2 + 48);
      __asm { FMOV            V4.2D, #-0.5 }
      v79 = vaddq_f64(vcvtq_f64_f32(v80), vmulq_f64(vsubq_f64(v77, vcvtq_f64_f32(v81)), _Q4));
    }
    v150 = v37;
    v86 = v79.f64[0];
    v87 = v79.f64[1];
    m_width = v77.f64[0];
    v75 = v77.f64[1];
    v157.m_location.m_x = v86;
    v157.m_location.m_y = v87;
    v88 = vadd_f32(v81, v80);
    v89 = *(float32x2_t *)(a2 + 24);
    v90 = vmulq_n_f64(vcvtq_f64_f32(vsub_f32(v80, v89)), v146);
    v91 = vmulq_n_f64(vcvtq_f64_f32(vsub_f32(vadd_f32(v89, *(float32x2_t *)(a2 + 32)), v88)), v146);
    v92 = vsubq_f64(v79, v90);
    v89.f32[0] = v92.f64[0];
    *(float *)v92.f64 = v92.f64[1];
    *(_QWORD *)&v156 = __PAIR64__(LODWORD(v92.f64[0]), v89.u32[0]);
    *((float32x2_t *)&v156 + 1) = vcvt_f32_f64(vaddq_f64(vaddq_f64(v77, v90), v91));
    v73 = (_DWORD)v7 == (_DWORD)v59 && HIDWORD(v7) == HIDWORD(v59);
  }
  v94 = (float)(int)v59;
  if (m_width >= (float)(int)v59)
    v95 = (float)(int)v59;
  else
    v95 = m_width;
  v96 = (float)SHIDWORD(v59);
  if (v75 >= (float)SHIDWORD(v59))
    v97 = (float)SHIDWORD(v59);
  else
    v97 = v75;
  v157.m_size.m_width = v95;
  v157.m_size.m_height = v97;
  v158[0] = (FloatSize)v59;
  *(double *)&v158[1] = v70;
  v98 = *v15;
  if (!v98)
  {
    v37 = v150;
    goto LABEL_115;
  }
  v147 = v73;
  v99 = *(_DWORD *)(v98 - 8);
  shouldIgnoreMetaViewport = WTF::PairHash<WebCore::IntSize,double>::hash((uint64_t)v158);
  for (i = 0; ; shouldIgnoreMetaViewport = i + (shouldIgnoreMetaViewport & v99))
  {
    v101 = v98 + 24 * (shouldIgnoreMetaViewport & v99);
    v102 = *(_DWORD *)(v101 + 4);
    if (*(_DWORD *)v101 != (_DWORD)v59 || v102 != HIDWORD(v59))
    {
      v104 = *(double *)(v101 + 8);
      goto LABEL_102;
    }
    if (*(_QWORD *)(v101 + 8) == COERCE__INT64(v70))
      break;
    v104 = *(double *)(v101 + 8);
LABEL_102:
    if (*(_DWORD *)v101)
      v105 = 0;
    else
      v105 = v102 == 0;
    if (v105 && v104 == INFINITY)
    {
      v107 = *(_DWORD *)(v98 - 4);
      v101 = v98 + 24 * v107;
      goto LABEL_113;
    }
    ++i;
  }
  v107 = *(_DWORD *)(v98 - 4);
LABEL_113:
  _ZF = v98 + 24 * v107 == v101;
  v37 = v150;
  v73 = v147;
  if (!_ZF)
  {
    v108 = (float)*(int *)(v101 + 16) - v157.m_location.m_x;
    v109 = (float)*(int *)(v101 + 20) - v157.m_location.m_y;
    m_x = v157.m_location.m_x + v108;
    v157.m_location.m_y = v157.m_location.m_y + v109;
    v111 = v108 + *(float *)&v156;
    *((float *)&v156 + 1) = v109 + *((float *)&v156 + 1);
    goto LABEL_132;
  }
LABEL_115:
  if (!v73)
  {
    if (v37 && (shouldIgnoreMetaViewport = *(_QWORD *)(v37 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v112 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 40) + 8) + 528) + 8)
                                     + 288);
      v152[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)shouldIgnoreMetaViewport, 1, 0);
      v152[1] = v113;
      v154 = WebCore::ScrollView::contentsToRootView(v112, (const WebCore::IntRect *)v152);
      v155 = v114;
      shouldIgnoreMetaViewport = WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v158, (const WebCore::IntRect *)&v154);
      v115 = v158[0].m_width + (float)(v40 * v158[1].m_width);
      v116 = v158[0].m_height + (float)(v39 * v158[1].m_height);
      v95 = v157.m_size.m_width;
      v97 = v157.m_size.m_height;
    }
    else
    {
      v115 = (float)((float)(*(float *)(a2 + 40) + (float)(*(float *)(a2 + 48) * 0.5)) / (float)(int)v7) * v94;
      v116 = (float)((float)(*(float *)(a2 + 44) + (float)(*(float *)(a2 + 52) * 0.5)) / (float)SHIDWORD(v7)) * v96;
    }
    v117 = v115 - (float)(v157.m_location.m_x + (float)(v95 * 0.5));
    v118 = v116 - (float)(v157.m_location.m_y + (float)(v97 * 0.5));
    v157.m_location.m_x = v157.m_location.m_x + v117;
    v157.m_location.m_y = v157.m_location.m_y + v118;
    *(float *)&v156 = v117 + *(float *)&v156;
    *((float *)&v156 + 1) = v118 + *((float *)&v156 + 1);
  }
  v119 = *(float *)(a2 + 44);
  if ((float)(v119 + *(float *)(a2 + 52)) > (float)((int)v18 - 1))
  {
    v157.m_location.m_y = v96 - v97;
    *((float *)&v156 + 1) = v96 - v97;
  }
  if (v119 < 1.0)
  {
    v157.m_location.m_y = 0.0;
    DWORD1(v156) = 0;
  }
  v120 = v153;
  if (*(float *)a2 == (float)(int)v153
    && (v121 = v68,
        shouldIgnoreMetaViewport = WebKit::scalesAreEssentiallyEqual((WebKit *)shouldIgnoreMetaViewport, v121, 1.0),
        (_DWORD)shouldIgnoreMetaViewport)
    && v120 < (int)v59
    && (v111 = 0.0, *(float *)(a2 + 40) <= 0.0))
  {
    m_x = 0.0;
  }
  else
  {
    m_x = v157.m_location.m_x;
    v111 = *(float *)&v156;
  }
LABEL_132:
  v122 = v94 - (float)(m_x + v95);
  if ((float)(m_x + v95) <= v94)
    v122 = 0.0;
  if ((float)(v157.m_location.m_y + v97) <= v96)
    v123 = 0.0;
  else
    v123 = v96 - (float)(v157.m_location.m_y + v97);
  v124 = v122 - fminf(m_x, 0.0);
  v125 = v123 - fminf(v157.m_location.m_y, 0.0);
  v157.m_location.m_x = m_x + v124;
  v157.m_location.m_y = v157.m_location.m_y + v125;
  *(float *)&v156 = v111 + v124;
  *((float *)&v156 + 1) = v125 + *((float *)&v156 + 1);
LABEL_138:
  WTF::MonotonicTime::now((WTF::MonotonicTime *)shouldIgnoreMetaViewport);
  v158[0] = 0;
  v158[1].m_width = 0.0;
  v159 = v126;
  WebCore::LocalFrameView::setScrollVelocity();
  v127 = roundf(v157.m_location.m_x);
  v128 = 0x7FFFFFFFLL;
  v129 = 0x80000000;
  if (v127 > -2147500000.0)
    v129 = (int)v127;
  if (v127 < 2147500000.0)
    v128 = v129;
  v130 = roundf(v157.m_location.m_y);
  if (v130 >= 2147500000.0)
  {
    v131 = 0x7FFFFFFF00000000;
  }
  else if (v130 <= -2147500000.0)
  {
    v131 = 0x8000000000000000;
  }
  else
  {
    v131 = (unint64_t)(int)v130 << 32;
  }
  v151 = (IntPoint)(v131 | v128);
  v158[0] = v157.m_size;
  WebCore::ScrollView::setUnobscuredContentSize(v6, v158);
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v5 + 72) + 168))(*(_QWORD *)(v5 + 72), &v156);
  WebKit::WebPage::scalePage((WebKit::WebPage *)v5, v68, (const WebCore::IntPoint *)&v151);
  WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive();
  WebCore::LocalFrameView::frame(v6);
  v132 = WebCore::ScrollView::contentsSize(v6);
  v133.i64[0] = *((_QWORD *)v6 + 12);
  v133.i64[1] = v132;
  v134.i64[0] = 0xFE000000FE000000;
  v134.i64[1] = 0xFE000000FE000000;
  v135 = (int8x16_t)vcgtq_s32(v133, v134);
  v136.i64[0] = 0xFE000000FE000000;
  v136.i64[1] = 0xFE000000FE000000;
  v137.i64[0] = 0x8000000080000000;
  v137.i64[1] = 0x8000000080000000;
  *(int8x16_t *)&v158[0].m_width = vorrq_s8((int8x16_t)(*(_OWORD *)&v135 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v136, v133), v137, (int8x16_t)vshlq_n_s32(v133, 6uLL)), v135));
  v154 = WebCore::LocalFrameView::baseLayoutViewportSize(v6);
  v152[0] = v158[1];
  WebCore::LocalFrameView::expandedLayoutViewportSize();
  v154 = WebCore::LocalFrameView::layoutViewportRect(v6);
  v155 = v138;
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v152, &v157);
  WebCore::LocalFrameView::minStableLayoutViewportOrigin(v6);
  WebCore::LocalFrameView::maxStableLayoutViewportOrigin(v6);
  WebCore::LocalFrameView::computeUpdatedLayoutViewportRect();
  WebCore::LocalFrameView::setLayoutViewportOverrideRect();
  WebCore::LocalFrameView::layoutOrVisualViewportChanged(v6);
  v139 = ceilf(*(float *)(a2 + 64));
  if (v139 >= 2147500000.0)
  {
    v140 = 0x7FFFFFFFLL;
  }
  else if (v139 <= -2147500000.0)
  {
    v140 = 0x80000000;
  }
  else
  {
    v140 = (int)v139;
  }
  v141 = ceilf(*(float *)(a2 + 68));
  if (v141 >= 2147500000.0)
  {
    v142 = 0x7FFFFFFF00000000;
  }
  else if (v141 <= -2147500000.0)
  {
    v142 = 0x8000000000000000;
  }
  else
  {
    v142 = (unint64_t)(int)v141 << 32;
  }
  v143 = (IntSize)(v142 | v140);
  WebCore::LocalFrameView::setCustomSizeForResizeEvent(v6, v143);
  WebKit::WebPage::setDeviceOrientation(v5, *(_DWORD *)(a2 + 96));
  WebCore::ScrollView::setScrollOffset(v6, &v151);
  WebCore::Page::isolatedUpdateRendering(*(WebCore::Page **)(v5 + 48));
  WebKit::WebPage::shrinkToFitContent((unsigned int *)v5, 0);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 72) + 264))(*(_QWORD *)(v5 + 72));
  *(_QWORD *)(v5 + 1552) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(v5 + 1560) = 1;
  if (v37)
  {
    if (*(_DWORD *)(v37 + 24) == 2)
    {
      if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v37);
    }
    else
    {
      *(_DWORD *)(v37 + 24) -= 2;
    }
  }
  *(_BYTE *)(v5 + 1493) = v148;
  return result;
}

void sub_1973D5CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  if (v35)
  {
    if (*(_DWORD *)(v35 + 24) == 2)
    {
      if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v35);
    }
    else
    {
      *(_DWORD *)(v35 + 24) -= 2;
    }
  }
  *(_BYTE *)(v34 + 1493) = a15;
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::shrinkToFitContent(unsigned int *this, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::ScrollView *v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  double v13;
  double v14;
  int v15;
  signed int v16;
  signed int v17;
  int v18;
  double v19;
  uint64_t v20;
  int v21;
  int v22;
  float v23;
  double v24;
  NSObject *v25;
  int v26;
  _DWORD v27[2];
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 186))
  {
    v2 = (uint64_t)this;
    if (((*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 6) + 112) + 720) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 6) + 112) + 724) << 32)) & 0x100000000) != 0
      && !*((_BYTE *)this + 1192))
    {
      this = (unsigned int *)WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)this);
      if ((_DWORD)this)
      {
        if (*(float *)(v2 + 1128) != 0.0 && !*(_BYTE *)(v2 + 1176))
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 24);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 8);
            if (v5)
            {
              if (!*(_BYTE *)(v5 + 144))
              {
                v6 = (unsigned int *)(v5 + 8);
                do
                  v7 = __ldaxr(v6);
                while (__stlxr(v7 + 1, v6));
                v8 = *(WebCore::ScrollView **)(v5 + 288);
                if (v8)
                {
                  v9 = *((_DWORD *)v8 + 2);
                  *((_DWORD *)v8 + 2) = v9 + 1;
                  v10 = *(_QWORD *)(v5 + 296);
                  if (!v10)
                  {
LABEL_39:
                    if (v9)
                      *((_DWORD *)v8 + 2) = v9;
                    else
                      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
                    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
                  }
                  *(_DWORD *)(v10 + 24) += 2;
                  WebCore::Document::updateLayout();
                  v11 = WebCore::ScrollView::contentsSize(v8);
                  v12 = *(float *)(v2 + 1072);
                  WebCore::ViewportConfiguration::initialScale((WebCore::ViewportConfiguration *)(v2 + 944));
                  v14 = v13;
                  v15 = WebCore::ViewportConfiguration::layoutWidth((WebCore::ViewportConfiguration *)(v2 + 944));
                  v16 = llround(v12 / v14);
                  v17 = v11 - v16;
                  if (v11 - v16 < 21 || (v18 = v15, v15 > 1279) || v11 > 1920 || v11 <= v16)
                  {
LABEL_35:
                    if (*(_DWORD *)(v10 + 24) == 2)
                    {
                      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v10);
                    }
                    else
                    {
                      *(_DWORD *)(v10 + 24) -= 2;
                    }
                    if (!v8)
                      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
                    v9 = *((_DWORD *)v8 + 2) - 1;
                    goto LABEL_39;
                  }
                  *(_DWORD *)(v10 + 24) += 2;
                  WebCore::ViewportConfiguration::setIsKnownToLayOutWiderThanViewport((WebCore::ViewportConfiguration *)(v2 + 944));
                  v19 = *(double *)(v2 + 1152);
                  if ((WebCore::ViewportConfiguration::shouldIgnoreMinimumEffectiveDeviceWidthForShrinkToFit((WebCore::ViewportConfiguration *)(v2 + 944)) & 1) == 0)
                  {
                    v20 = 1168;
                    if (!*(_BYTE *)(v2 + 1176))
                      v20 = 1160;
                    if (v19 < *(double *)(v2 + v20))
                      v19 = *(double *)(v2 + v20);
                  }
                  if (v11 >= 1280)
                    v21 = 1280;
                  else
                    v21 = v11;
                  if (WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthForShrinkToFit((WebCore::ViewportConfiguration *)(v2 + 944), (double)v21))
                  {
                    WebKit::WebPage::viewportConfigurationChanged(v2, 0);
                    WebCore::Document::updateLayout();
                    v22 = WebCore::ScrollView::contentsSize(v8);
                    v23 = *(float *)(v2 + 1072);
                    WebCore::ViewportConfiguration::initialScale((WebCore::ViewportConfiguration *)(v2 + 944));
                    if ((int)(v22 - llround(v23 / v24)) > v17)
                    {
                      if (WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthForShrinkToFit((WebCore::ViewportConfiguration *)(v2 + 944), (double)(int)v19))
                      {
                        WebKit::WebPage::viewportConfigurationChanged(v2, 0);
                        WebCore::Document::updateLayout();
                      }
                      WebCore::ViewportConfiguration::setIsKnownToLayOutWiderThanViewport((WebCore::ViewportConfiguration *)(v2 + 944));
                    }
                  }
                  v25 = qword_1ECE71A50;
                  if (os_log_type_enabled((os_log_t)qword_1ECE71A50, OS_LOG_TYPE_DEFAULT))
                  {
                    v27[0] = 67109888;
                    v27[1] = v11;
                    v28 = 1024;
                    v29 = WebCore::ScrollView::contentsSize(v8);
                    v30 = 1024;
                    v31 = v18;
                    v32 = 1024;
                    v33 = WebCore::ViewportConfiguration::layoutWidth((WebCore::ViewportConfiguration *)(v2 + 944));
                    _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "Shrink-to-fit: content width %d => %d; layout width %d => %d",
                      (uint8_t *)v27,
                      0x1Au);
                  }
                  WebKit::WebPage::viewportConfigurationChanged(v2, a2);
                  v26 = *(_DWORD *)(v10 + 24) - 2;
                  if (*(_DWORD *)(v10 + 24) == 2)
                  {
                    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v10);
                    goto LABEL_35;
                  }
                }
                else
                {
                  v10 = *(_QWORD *)(v5 + 296);
                  if (!v10)
                    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
                  v26 = *(_DWORD *)(v10 + 24) + 2;
                }
                *(_DWORD *)(v10 + 24) = v26;
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void sub_1973D6118(_Unwind_Exception *a1)
{
  unsigned int *v1;
  _DWORD *v2;
  uint64_t v3;

  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

WebCore::Page *WebKit::WebPage::applicationWillResignActive(WebKit::WebPage *this)
{
  void *v2;
  WebCore::PlatformMediaSessionManager *v3;
  WebCore::Page *result;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists((WebCore::PlatformMediaSessionManager *)objc_msgSend(v2, "postNotificationName:object:", *MEMORY[0x1E0DCDE88], 0));
  if (v3)
    WebCore::PlatformMediaSessionManager::applicationWillBecomeInactive(v3);
  result = (WebCore::Page *)*((_QWORD *)this + 6);
  if (result)
    return (WebCore::Page *)WebCore::Page::applicationWillResignActive(result);
  return result;
}

WebCore::Page *WebKit::WebPage::applicationDidEnterBackground(WebKit::WebPage *this, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  WebCore::PlatformMediaSessionManager *v6;
  WebCore::PlatformMediaSessionManager *v7;
  WebCore::Page *result;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v5 = *MEMORY[0x1E0DCDE78];
  v9 = CFSTR("isSuspendedUnderLock");
  v10[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  objc_msgSend(v4, "postNotificationName:object:userInfo:", v5, 0, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1));
  *((_BYTE *)this + 1784) = a2;
  v6 = (WebCore::PlatformMediaSessionManager *)WebKit::WebPage::freezeLayerTree((uint64_t)this, 2);
  v7 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists(v6);
  if (v7)
    WebCore::PlatformMediaSessionManager::applicationDidEnterBackground(v7);
  result = (WebCore::Page *)*((_QWORD *)this + 6);
  if (result)
    return (WebCore::Page *)WebCore::Page::applicationDidEnterBackground(result);
  return result;
}

uint64_t WebKit::WebPage::applicationDidFinishSnapshottingAfterEnteringBackground(WebKit::WebPage *this)
{
  uint64_t result;
  uint64_t v2;

  v2 = 0;
  WebKit::WebPage::markLayersVolatile((uint64_t)this, &v2);
  result = v2;
  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1973D6344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebCore::Page *WebKit::WebPage::applicationWillEnterForeground(WebKit::WebPage *this, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  WebCore::PlatformMediaSessionManager *v6;
  WebCore::Page *result;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 1784) = 0;
  WebKit::WebPage::cancelMarkLayersVolatile(this);
  WebKit::WebPage::unfreezeLayerTree((uint64_t)this, 2);
  v4 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v5 = *MEMORY[0x1E0DCDE80];
  v8 = CFSTR("isSuspendedUnderLock");
  v9[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v6 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists((WebCore::PlatformMediaSessionManager *)objc_msgSend(v4, "postNotificationName:object:userInfo:", v5, 0, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1)));
  if (v6)
    WebCore::PlatformMediaSessionManager::applicationWillEnterForeground(v6);
  result = (WebCore::Page *)*((_QWORD *)this + 6);
  if (result)
    return (WebCore::Page *)WebCore::Page::applicationWillEnterForeground(result);
  return result;
}

unsigned int *WebKit::WebPage::updateLayoutViewportHeightExpansionTimerFired(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  IPC::Encoder *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  void *v22;
  _QWORD *v23;
  _QWORD *i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  double v33;
  int v34;
  int v35;
  double v36;
  int v37;
  uint64_t v38;
  void *v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  __int16 v44;
  _QWORD **v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE v51[16];
  _QWORD v52[2];
  _QWORD **v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        v3 = (IPC::Encoder *)this;
        v4 = (unsigned int *)(v2 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = *(_QWORD *)(v2 + 288);
        if (!v6)
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
        ++*(_DWORD *)(v6 + 8);
        v7 = WebCore::LocalFrameView::viewportConstrainedObjectsRect((WebCore::LocalFrameView *)v6);
        v9 = v8;
        if (!WebCore::LocalFrameView::hasViewportConstrainedObjects((WebCore::LocalFrameView *)v6))
          goto LABEL_63;
        v58 = 0;
        v59 = 0;
        v10 = *(_QWORD ***)(v6 + 1304);
        v11 = (float)(int)v7;
        v12 = (float)SHIDWORD(v7);
        v13 = (float)(int)v9;
        v14 = (float)SHIDWORD(v9);
        v45 = v10;
        v46 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::begin(v10);
        v47 = v15;
        v16 = *v10;
        if (*v10)
        {
          v18 = *((unsigned int *)v16 - 1);
          v17 = &v16[v18];
          v48 = v17;
          v49 = v17;
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v45);
        }
        else
        {
          v48 = 0;
          v49 = 0;
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v45);
          v17 = 0;
          v18 = 0;
        }
        v19 = v13 * 0.015625;
        v20 = v14 * 0.015625;
        v21 = v11 * 0.015625;
        v53 = v10;
        v54 = v17;
        v55 = v17;
        v56 = v17;
        v57 = &v16[v18];
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v53);
        v23 = v54;
        for (i = v46; v46 != v23; i = v46)
        {
          v25 = *(_QWORD *)(*i + 8);
          if ((*(_BYTE *)(v25 + 45) & 1) == 0)
          {
            v26 = *(_QWORD *)(*(_QWORD *)(v25 + 24) + 8);
            if (v26)
            {
              if ((*(_WORD *)(v26 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1973D685CLL);
              }
              *(_DWORD *)(v26 + 24) += 2;
              v52[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v25, 1, 0);
              v52[1] = v27;
              WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v51, (const WebCore::IntRect *)v52);
              *(float *)&v60 = v21;
              *((float *)&v60 + 1) = v12 * 0.015625;
              v61 = v19;
              v62 = v20;
              WebCore::FloatRect::intersect((WebCore::FloatRect *)&v60, (const WebCore::FloatRect *)v51);
              if ((float)(v19 * v20) * 0.9 >= (float)(v61 * v62))
              {
                if (*(_DWORD *)(v26 + 24) == 2)
                {
                  if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v26);
                }
                else
                {
                  *(_DWORD *)(v26 + 24) -= 2;
                }
              }
              else
              {
                v60 = v26;
                LODWORD(v28) = HIDWORD(v59);
                if (HIDWORD(v59) == (_DWORD)v59)
                {
                  v29 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v58, HIDWORD(v59) + 1, (unint64_t)&v60);
                  v28 = HIDWORD(v59);
                  v30 = v58;
                  v31 = *v29;
                  *v29 = 0;
                  *(_QWORD *)(v30 + 8 * v28) = v31;
                }
                else
                {
                  v60 = 0;
                  *(_QWORD *)(v58 + 8 * HIDWORD(v59)) = v26;
                }
                HIDWORD(v59) = v28 + 1;
                WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v60);
              }
            }
          }
          v32 = i + 1;
          v46 = i + 1;
          if (i + 1 != v47)
          {
            while ((unint64_t)(*v32 + 1) <= 1)
            {
              if (++v32 == v47)
              {
                v32 = v47;
                break;
              }
            }
            v46 = v32;
          }
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v45);
          ++*((_DWORD *)v45 + 2);
        }
        if (HIDWORD(v59))
        {
          v33 = (float)(v21 + (float)(v19 * 0.5)) * 64.0;
          if (v33 > -2147483650.0)
            v34 = (int)v33;
          else
            v34 = 0x80000000;
          if (v33 < 2147483650.0)
            v35 = v34;
          else
            v35 = 0x7FFFFFFF;
          LODWORD(v53) = v35;
          v36 = (float)((float)(v12 * 0.015625) + (float)(v20 * 0.5)) * 64.0;
          if (v36 >= 2147483650.0)
          {
            v37 = 0x7FFFFFFF;
          }
          else if (v36 <= -2147483650.0)
          {
            v37 = 0x80000000;
          }
          else
          {
            v37 = (int)v36;
          }
          HIDWORD(v53) = v37;
          WebCore::EventHandler::hitTestResultAtPoint();
          v38 = v50;
          if (v50)
          {
            *(_DWORD *)(v50 + 24) += 2;
            MEMORY[0x19AEADBAC](&v45);
            v40 = *(_DWORD *)(v38 + 24);
            *(_DWORD *)(v38 + 24) = v40 + 2;
            if (HIDWORD(v59))
            {
              v41 = 0;
              do
              {
                v42 = WebCore::Node::contains(*(WebCore::Node **)(v58 + 8 * v41), (const WebCore::Node *)v38);
                if ((v42 & 1) != 0)
                  break;
                ++v41;
              }
              while (v41 < HIDWORD(v59));
              v40 = *(_DWORD *)(v38 + 24) - 2;
              if (*(_DWORD *)(v38 + 24) != 2)
                goto LABEL_48;
            }
            else
            {
              v42 = 0;
              if (v40)
              {
LABEL_48:
                *(_DWORD *)(v38 + 24) = v40;
                goto LABEL_49;
              }
            }
            v44 = *(_WORD *)(v38 + 30);
            if ((v44 & 0x400) != 0)
              goto LABEL_59;
            WebCore::Node::removedLastRef((WebCore::Node *)v38);
            v40 = *(_DWORD *)(v38 + 24);
LABEL_49:
            v43 = v40 - 2;
            if (v43)
            {
              *(_DWORD *)(v38 + 24) = v43;
              goto LABEL_51;
            }
            v44 = *(_WORD *)(v38 + 30);
LABEL_59:
            if ((v44 & 0x400) != 0)
            {
              WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v39);
              if (v42)
                goto LABEL_52;
              goto LABEL_63;
            }
            WebCore::Node::removedLastRef((WebCore::Node *)v38);
LABEL_51:
            WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v39);
            if ((v42 & 1) != 0)
            {
LABEL_52:
              WebKit::WebPage::addReasonsToDisallowLayoutViewportHeightExpansion(v3, 2);
              goto LABEL_64;
            }
LABEL_63:
            WebKit::WebPage::removeReasonsToDisallowLayoutViewportHeightExpansion((uint64_t)v3, 2);
LABEL_64:
            if (*(_DWORD *)(v6 + 8) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
            else
              --*(_DWORD *)(v6 + 8);
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
          }
          MEMORY[0x19AEADBAC](&v45);
        }
        WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v22);
        goto LABEL_63;
      }
    }
  }
  return this;
}

void sub_1973D6910(_Unwind_Exception *a1, void *a2)
{
  unsigned int *v2;
  _DWORD *v3;
  uint64_t v4;

  WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 - 160, a2);
  if (v3[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  else
    --v3[2];
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::willStartUserTriggeredZooming(WebCore::Page **this)
{
  WebCore::DiagnosticLoggingKeys *v2;
  WebCore::DiagnosticLoggingKeys *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v2 = (WebCore::DiagnosticLoggingKeys *)WebCore::Page::diagnosticLoggingClient(this[6]);
  v3 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::webViewKey(v2);
  WebCore::DiagnosticLoggingKeys::userZoomActionKey(v3);
  (**(void (***)(WebCore::DiagnosticLoggingKeys *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))v2)(v2, &v8, &v7, 0);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  *((_BYTE *)this + 1291) = 1;
  return result;
}

void sub_1973D6A78(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::dispatchAsynchronousTouchEvents(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  _BOOL8 v7;
  uint64_t *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v2 = a2[3];
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = 112 * v2;
    v5 = (uint64_t *)(*(_QWORD *)a2 + 96);
    do
    {
      result = (uint64_t)WebKit::WebPage::dispatchTouchEvent(v3, *(v5 - 12), *(v5 - 11), (uint64_t)(v5 - 10), (uint64_t)&v14);
      if (*v5)
      {
        v6 = v16;
        if (v16)
        {
          if (v16 != 1)
          {
            v8 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
            return WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::RemoteUserInputEventData>)>::operator()(v8, v9, v10);
          }
          v7 = 0;
          v11 = v14;
          v12 = v15;
          v6 = 1;
        }
        else
        {
          v7 = (_BYTE)v14 != 0;
          LOBYTE(v11) = 0;
        }
        v13 = v6;
        result = WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::RemoteUserInputEventData>)>::operator()(v5, v7, &v11);
      }
      v5 += 14;
      v4 -= 112;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::RemoteUserInputEventData>)>::operator()(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];

  v3 = *a1;
  *a1 = 0;
  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v3 + 16))(v3, a2, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_1973D6BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF *WebKit::WebPage::computePagesForPrintingiOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *result;
  __int128 v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v11 = *(_OWORD *)(a4 + 12);
  WebKit::WebPage::computePagesForPrintingImpl(a1, a2, a3, (float *)a4, (uint64_t)&v13, (double *)&v12, &v11);
  v6 = qword_1ECE715C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE715C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v16 = HIDWORD(v14);
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Computing pages for printing. Page rects size = %zu", buf, 0xCu);
  }
  v7 = HIDWORD(v14);
  v8 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v13;
  if (v13)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

void sub_1973D6D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  uint64_t v14;
  void *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a13)
    WTF::fastFree(a13, v16);
  _Unwind_Resume(a1);
}

WTF *WebKit::WebPage::drawToImage(WebCore::PrintContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  CFTypeRef v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  WebCore::GraphicsContext *v27;
  _QWORD *v28;
  uint64_t v29;
  WebCore::ShareableBitmap *v30;
  WTF *result;
  uint64_t v32;
  _QWORD *v33;
  CFTypeRef v34;
  char v35;
  WebCore::GraphicsContext *v36;
  WebCore::ShareableBitmap *v37;
  __int128 v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  __int128 buf;
  char v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v38 = *(_OWORD *)(a4 + 12);
  WebKit::WebPage::computePagesForPrintingImpl((uint64_t)a1, a2, a3, (float *)a4, (uint64_t)&v40, (double *)&v39, &v38);
  v7 = HIDWORD(v41);
  v8 = qword_1ECE715C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE715C8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "Drawing to image. Page rects size = %zu", (uint8_t *)&buf, 0xCu);
  }
  if (!a1[84])
  {
    LOBYTE(buf) = 0;
    v44 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&buf);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E34D8E50;
    *(_QWORD *)&buf = v18;
    WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&buf);
LABEL_16:
    v19 = buf;
    *(_QWORD *)&buf = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    goto LABEL_42;
  }
  if (!HIDWORD(v41))
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  v10 = *((_DWORD *)v40 + 2);
  v9 = *((_DWORD *)v40 + 3);
  if (v10 <= v9)
    v11 = *((_DWORD *)v40 + 3);
  else
    v11 = *((_DWORD *)v40 + 2);
  v12 = 500.0 / (float)v11;
  if (v12 < 1.0)
  {
    v10 = vcvtms_s32_f32(v12 * (float)v10);
    v9 = vcvtms_s32_f32(v12 * (float)v9);
  }
  v32 = 0;
  v13 = __muloti4(v9, 0, v7, 0, &v32);
  if ((v14 << 63 >> 63) ^ v14 | v32)
    v15 = 0;
  else
    v15 = (v13 ^ (int)v13 | (v14 ^ ((uint64_t)(int)v13 >> 63)) & 1) == 0;
  if (!v15)
  {
    LOBYTE(buf) = 0;
    v44 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&buf);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E34D8E50;
    *(_QWORD *)&buf = v16;
    WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&buf);
    goto LABEL_16;
  }
  v36 = (WebCore::GraphicsContext *)__PAIR64__(v13, v10);
  LOBYTE(v34) = 0;
  v35 = 0;
  MEMORY[0x19AEB3600](&buf, &v36, &v34, 0);
  WebCore::ShareableBitmap::create();
  if (v43)
  {
    v20 = (const void *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v20)
      CFRelease(v20);
  }
  if (v35)
  {
    v21 = v34;
    v34 = 0;
    if (v21)
      CFRelease(v21);
  }
  if (v37)
  {
    WebCore::ShareableBitmap::createGraphicsContext(v37);
    if (v36)
    {
      if ((_DWORD)v7)
      {
        v22 = 0;
        while (1)
        {
          if (v22 >= *((unsigned int *)a1[84] + 9))
            goto LABEL_31;
          (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v36 + 96))(v36, 1);
          v23 = (int)v22 * (uint64_t)v9;
          if (v23 != (int)v23)
            break;
          (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)v36 + 648))(v36, 0.0, (float)(int)v23);
          WebCore::PrintContext::spoolPage(a1[84], v36, (float)v10);
          (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v36 + 104))(v36, 1);
          if (v7 == ++v22)
            goto LABEL_31;
        }
        __break(0xC471u);
LABEL_47:
        JUMPOUT(0x1973D71A8);
      }
LABEL_31:
      WebCore::ShareableBitmap::createHandle();
      WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v24 = off_1E34D8E50;
      v33 = v24;
      WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&v33);
      v25 = (uint64_t)v33;
      v33 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&buf);
    }
    else
    {
      LOBYTE(buf) = 0;
      v44 = 0;
      WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&buf);
      v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v28 = off_1E34D8E50;
      *(_QWORD *)&buf = v28;
      WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&buf);
      v29 = buf;
      *(_QWORD *)&buf = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
    v27 = v36;
    v36 = 0;
    if (v27)
      goto LABEL_39;
  }
  else
  {
    LOBYTE(buf) = 0;
    v44 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&buf);
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v26 = off_1E34D8E50;
    *(_QWORD *)&buf = v26;
    WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&buf);
    v27 = (WebCore::GraphicsContext *)buf;
    *(_QWORD *)&buf = 0;
    if (v27)
LABEL_39:
      (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)v27 + 8))(v27);
  }
  v30 = v37;
  v37 = 0;
  if (v30)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v30, v17);
LABEL_42:
  result = v40;
  if (v40)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

void sub_1973D71B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, char a12, uint64_t a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,CFTypeRef cf,char a23)
{
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a14)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a14, a2);
  if (a19)
    WTF::fastFree(a19, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebPage::drawToPDFiOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int8x8_t v12;
  const __CFData *v13;
  WebCore::FragmentedSharedBuffer *v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int *v18;
  __CFData *v19;
  const __CFData *v20;
  __CFData *v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  int32x2_t v27;
  WebCore::FragmentedSharedBuffer *v28;
  WebCore::FragmentedSharedBuffer *v29;
  WebCore::FragmentedSharedBuffer *v30;
  __int128 v31;
  int v32;
  __CFData *v33[3];
  char v34;
  FloatSize v35[2];
  int v36;
  unsigned int *v37;

  if (*(_BYTE *)(a4 + 28))
  {
    v35[0] = *(FloatSize *)(a4 + 4);
    WebCore::IntSize::IntSize((WebCore::IntSize *)&v37, v35);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
    if (v8)
      v9 = *(_BYTE *)(v8 + 144) == 0;
    else
      v9 = 0;
    if (v9)
    {
      v10 = (uint64_t)v37;
      v11 = *(_QWORD *)(v8 + 288);
      *(_OWORD *)&v35[0].m_width = *(_OWORD *)(v11 + 1088);
      v36 = *(_DWORD *)(v11 + 1104);
      v33[1] = 0;
      v12 = (int8x8_t)vcgt_s32((int32x2_t)v37, (int32x2_t)0xFE000000FE000000);
      v33[2] = (__CFData *)vorr_s8((int8x8_t)(*(_QWORD *)&v12 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v37), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v37, 6uLL)), v12));
      v34 = 1;
      WebCore::LocalFrameView::setLayoutViewportOverrideRect();
      WebKit::WebPage::pdfSnapshotAtSize((unsigned int *)a1, 0, v10, (int32x2_t)v37, 0, v33);
      v31 = *(_OWORD *)&v35[0].m_width;
      v32 = v36;
      WebCore::LocalFrameView::setLayoutViewportOverrideRect();
      v28 = v33[0];
      WebCore::SharedBuffer::create<__CFData const*>(&v28, v13, (uint64_t *)&v29);
      v14 = v29;
      v29 = 0;
      v30 = v14;
      v15 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WebCore::FragmentedSharedBuffer **))(*(_QWORD *)v15 + 16))(v15, &v30);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v17 = (unsigned int *)v30;
      v30 = 0;
      if (v17)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v17, v16);
      v18 = (unsigned int *)v29;
      v29 = 0;
      if (v18)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, v16);
      v19 = v33[0];
      v33[0] = 0;
      if (v19)
LABEL_20:
        CFRelease(v19);
    }
  }
  else
  {
    v35[0] = 0;
    WebKit::WebPage::drawPagesToPDFImpl(a1, a2, a3, a4, 0, a5, (CFMutableDataRef *)v35);
    v30 = (WebCore::FragmentedSharedBuffer *)v35[0];
    WebCore::SharedBuffer::create<__CFData *>(&v30, v20, (uint64_t *)v33);
    v21 = v33[0];
    v33[0] = 0;
    v37 = (unsigned int *)v21;
    v22 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v22 + 16))(v22, &v37);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v24 = v37;
    v37 = 0;
    if (v24)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v24, v23);
    v25 = (unsigned int *)v33[0];
    v33[0] = 0;
    if (v25)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v25, v23);
    v26 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = off_1E34D8E50;
    v37 = v26;
    WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&v37);
    v27 = (int32x2_t)v37;
    v37 = 0;
    if (v27)
      (*(void (**)(int32x2_t))(**(_QWORD **)&v27 + 8))(v27);
    v19 = (__CFData *)v35[0];
    v35[0] = 0;
    if (v19)
      goto LABEL_20;
  }
}

void sub_1973D7564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, unsigned int *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf)
{
  uint64_t v17;
  uint64_t v18;
  void *v20;

  v18 = v17;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a12)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a12, v20);
  if (a11)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, v20);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

unsigned int *WebCore::SharedBuffer::create<__CFData const*>@<X0>(WebCore::FragmentedSharedBuffer **a1@<X0>, const __CFData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  unsigned int *result;
  unsigned int *v7;

  WebCore::FragmentedSharedBuffer::create(*a1, a2);
  v4 = WTF::fastMalloc((WTF *)0x38);
  MEMORY[0x19AEAD8A0](v4, &v7);
  *a3 = v4;
  result = v7;
  v7 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  return result;
}

void sub_1973D768C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  WTF *v10;
  void *v12;

  WTF::fastFree(v10, a2);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  _Unwind_Resume(a1);
}

unsigned int *WebCore::SharedBuffer::create<__CFData *>@<X0>(WebCore::FragmentedSharedBuffer **a1@<X0>, const __CFData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  unsigned int *result;
  unsigned int *v7;

  WebCore::FragmentedSharedBuffer::create(*a1, a2);
  v4 = WTF::fastMalloc((WTF *)0x38);
  MEMORY[0x19AEAD8A0](v4, &v7);
  *a3 = v4;
  result = v7;
  v7 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  return result;
}

void sub_1973D7710(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  WTF *v10;
  void *v12;

  WTF::fastFree(v10, a2);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::hoverSupportedByAnyAvailablePointingDevice(WebKit::WebPage *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *((unsigned __int8 *)v1 + 257);
}

uint64_t WebKit::WebPage::pointerCharacteristicsOfAllAvailablePointingDevices(WebKit::WebPage *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  if (*((_BYTE *)v1 + 257) || *((_BYTE *)v1 + 258))
    return 3;
  else
    return 1;
}

uint64_t WebKit::WebPage::hardwareKeyboardAvailabilityChanged(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *(_BYTE *)(a1 + 1492) = a2 & 1;
  GSEventSetHardwareKeyboardAttachedWithCountryCodeAndType();
  result = WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v4 = *(_QWORD *)(v8 + 16);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || *(_BYTE *)(v5 + 144))
  {
    if (*(_DWORD *)v8)
    {
      --*(_DWORD *)v8;
      return result;
    }
    goto LABEL_13;
  }
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
LABEL_13:
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v8;
  }
  WebCore::EventHandler::capsLockStateMayHaveChanged(*(WebCore::EventHandler **)(v5 + 640));
  return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
}

void sub_1973D78E0(_Unwind_Exception *a1)
{
  unsigned int *v1;

  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPage::updateStringForFind(WebKit::WebPage *this, const WTF::String *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 32;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2087;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_1973D79AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::updateSelectionWithDelta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::FocusController *v11;
  uint64_t v12;
  uint64_t v13;
  Node *v14;
  uint64_t v15;
  uint64_t v16;
  Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::FocusController *v36[4];
  char v37;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v7 = WebCore::FocusController::focusedOrMainFrame(v36[0]);
  v8 = v7;
  if (v7)
  {
    v9 = (unsigned int *)(v7 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = v36[0];
  v36[0] = 0;
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1973D7CE4);
    }
    --*(_DWORD *)v11;
  }
  if (v7)
  {
    v12 = WebCore::FrameSelection::rootEditableElementOrDocumentElement(*(WebCore::FrameSelection **)(*(_QWORD *)(v7 + 296) + 3064));
    v13 = v12;
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064)
                                                                             + 56));
    if (v13 && v37)
    {
      WebCore::makeRangeSelectingNodeContents((WebCore *)v13, v14);
      WebCore::SimpleRange::SimpleRange();
      v15 = WebCore::characterCount();
      v16 = WebCore::characterCount();
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v27);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v25);
      if (__OFADD__(v15, a2) || __OFADD__(v16, a3) || v15 < 0 || v16 < 0)
      {
        v18 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      else
      {
        WebCore::makeRangeSelectingNodeContents((WebCore *)v13, v17);
        WebCore::resolveCharacterRange();
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v27);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v25);
        v22 = v30;
        *(_DWORD *)(v30 + 24) += 2;
        v25 = v22;
        v26 = v31;
        v23 = v32;
        *(_DWORD *)(v32 + 24) += 2;
        v27 = v23;
        v28 = v33;
        v29 = 1;
        WebCore::FrameSelection::setSelectedRange();
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25);
        v24 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v32);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v30);
      }
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v35);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v34);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36);
    }
    else
    {
      v19 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36);
      if (!v13)
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
    }
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
  }
  v21 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
}

unsigned int *WebKit::WebPage::requestDocumentEditingContext(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  WebCore::Node *v23;
  float v24;
  uint64_t v25;
  float v26;
  unint64_t v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  float v30;
  uint64_t v31;
  float v32;
  unint64_t v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  uint64_t v36;
  void *v37;
  WTF *v38;
  WTF *v39;
  WebCore::Node *v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  uint64_t v45;
  WebCore::Node *v46;
  WebCore::Node *v47;
  WTF::StringImpl *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WTF::StringImpl *v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  uint64_t v58;
  WebCore::Node *v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  uint64_t v62;
  WebCore::Node *v63;
  WebCore::Node *v64;
  int v65;
  WebCore::Node *v66;
  WebCore::Node *v67;
  int v68;
  uint64_t v69;
  WebCore::Node *v70;
  int v71;
  WebCore::Node *v72;
  WebCore::Node *v73;
  int v74;
  WebCore::Node *v75;
  WebCore::Node *v76;
  WebCore::Node *v77;
  WebCore::Node *v78;
  void *v79;
  WTF *v80;
  WTF *v81;
  WebCore::Node *v82;
  WebCore::Node *v83;
  WebCore::Node *v84;
  WebCore::Node *v85;
  WebCore::Node *v86;
  WebCore::Node *v87;
  WebCore::Node *v88;
  WebCore::Node *v89;
  WebCore::Node *v90;
  int v91;
  float v92;
  uint8_t v93;
  char v94;
  int v95;
  uint64_t v96;
  WebCore::Node *v97;
  WebCore::Node *v98;
  WebCore::Editor *v99;
  uint64_t v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  char v103;
  WebCore::Node *v104;
  WebCore::Node *v105;
  uint64_t v106;
  void *v107;
  WTF *v108;
  WTF *v109;
  WebCore::Node *v110;
  WebCore::Node *v111;
  WebCore::Node *v112;
  WebCore::Node *v113;
  int v114;
  WebCore::Node *v115;
  WebCore::Node *v116;
  WebCore::Node *v117;
  int v118;
  _BOOL4 v120;
  WebCore::Node *v121;
  WebCore::Node *v122;
  WebCore::Node *v123;
  uint64_t v124;
  WebCore::Node *v125;
  unsigned int v126;
  uint64_t v127;
  __CFString *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  BOOL v132;
  unint64_t v133;
  WebCore::Node *v134;
  uint64_t v135;
  unsigned int v136;
  void *v137;
  WTF *v138;
  void *v139;
  WTF *v140;
  void *v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  WTF *v148;
  WTF *v149;
  uint64_t v150;
  void *v151;
  WTF *v152;
  WTF *v153;
  WebCore::Node *v154;
  WebCore::Node *v155;
  uint64_t v156;
  FloatPoint m_location;
  WebCore::Node *v158;
  WebCore::Node *v159;
  WebCore::Node *v160;
  WebCore::Node *v161;
  WebCore::Node *v162;
  WebCore::Node *v163;
  WebCore::Node *v164;
  WebCore::Node *v165;
  WTF *v166;
  char v167;
  uint64_t v168;
  unsigned int v169;
  __int128 v170;
  uint64_t v171[3];
  __int128 v172;
  char v173;
  WebCore::Node *v174;
  char v175;
  WebCore::Node *v176;
  float v177;
  uint8_t v178;
  char v179;
  char v180;
  WebCore::Node *v181;
  int v182;
  char v183;
  char v184;
  WebCore::Node *v185;
  int v186;
  char v187;
  char v188;
  WebCore::Node *v189;
  int v190;
  char v191;
  char v192;
  WebCore::Node *v193;
  int v194;
  char v195;
  char v196;
  WebCore::Node *v197;
  int v198;
  char v199;
  char v200;
  WebCore::Node *v201;
  int v202;
  char v203;
  char v204;
  uint64_t v205;
  int v206;
  char v207;
  uint64_t v208;
  int v209;
  char v210;
  uint64_t v211;
  int v212;
  char v213;
  uint64_t v214;
  int v215;
  char v216;
  uint64_t v217;
  int v218;
  char v219;
  uint64_t v220;
  int v221;
  char v222;
  __int16 v223;
  char v224;
  WebCore::Node *v225;
  int v226;
  char v227;
  char v228;
  WebCore::Node *v229;
  _QWORD v230[5];
  _BYTE v231[40];
  _QWORD v232[5];
  _BYTE v233[40];
  __int128 v234;
  __int128 v235;
  __int128 v236;
  ElementContext v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;

  v241 = *MEMORY[0x1E0C80C00];
  if ((*a2 & 3) != 0)
  {
    WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
    v6 = WebCore::FocusController::focusedOrMainFrame(v225);
    v7 = v6;
    if (v6)
    {
      v8 = (unsigned int *)(v6 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    v10 = v225;
    v225 = 0;
    if (v10)
    {
      if (!*(_DWORD *)v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1973D9798);
      }
      --*(_DWORD *)v10;
    }
    if (v6)
    {
      v11 = *(_QWORD *)(v6 + 296);
      if (v11)
        *(_DWORD *)(v11 + 24) += 2;
      WebCore::Document::updateLayout();
      if (v11)
      {
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
      v12 = *(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064);
      v13 = *(_QWORD *)(v12 + 56);
      if (v13)
        *(_DWORD *)(v13 + 24) += 2;
      v205 = v13;
      v206 = *(_DWORD *)(v12 + 64);
      v207 = *(_BYTE *)(v12 + 68);
      v14 = *(_QWORD *)(v12 + 72);
      if (v14)
        *(_DWORD *)(v14 + 24) += 2;
      v208 = v14;
      v209 = *(_DWORD *)(v12 + 80);
      v210 = *(_BYTE *)(v12 + 84);
      v15 = *(_QWORD *)(v12 + 88);
      if (v15)
        *(_DWORD *)(v15 + 24) += 2;
      v211 = v15;
      v212 = *(_DWORD *)(v12 + 96);
      v213 = *(_BYTE *)(v12 + 100);
      v16 = *(_QWORD *)(v12 + 104);
      if (v16)
        *(_DWORD *)(v16 + 24) += 2;
      v214 = v16;
      v215 = *(_DWORD *)(v12 + 112);
      v216 = *(_BYTE *)(v12 + 116);
      v17 = *(_QWORD *)(v12 + 120);
      if (v17)
        *(_DWORD *)(v17 + 24) += 2;
      v217 = v17;
      v218 = *(_DWORD *)(v12 + 128);
      v219 = *(_BYTE *)(v12 + 132);
      v18 = *(_QWORD *)(v12 + 136);
      if (v18)
        *(_DWORD *)(v18 + 24) += 2;
      v220 = v18;
      v221 = *(_DWORD *)(v12 + 144);
      v222 = *(_BYTE *)(v12 + 148);
      v223 = *(_WORD *)(v12 + 152);
      v224 = *(_BYTE *)(v12 + 154);
      v197 = 0;
      v198 = 0;
      v199 &= 0xF0u;
      v200 = 1;
      v201 = 0;
      v202 = 0;
      v203 &= 0xF0u;
      v204 = 1;
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::VisiblePosition::VisiblePosition();
      v19 = *a2;
      v20 = *((_OWORD *)a2 + 5);
      *(ProcessQualified<WTF::UUID> *)((char *)&v237.documentIdentifier + 8) = (ProcessQualified<WTF::UUID>)*((_OWORD *)a2 + 4);
      v238 = v20;
      v21 = *((_OWORD *)a2 + 7);
      v239 = *((_OWORD *)a2 + 6);
      v240 = v21;
      v22 = *((_OWORD *)a2 + 3);
      v237.boundingRect = (FloatRect)*((_OWORD *)a2 + 2);
      *(_OWORD *)&v237.webPageIdentifier.m_identifier = v22;
      v167 = v19;
      if ((_BYTE)v21)
      {
        WebKit::WebPage::elementForContext(a1, &v237, &v176);
        v23 = v176;
        if (!v176)
        {
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)&v225);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v230);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v231);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v232);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v233);
          v236 = 0u;
          v235 = 0u;
          v234 = 0u;
          v45 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v45 + 16))(v45, &v225);
LABEL_165:
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          v80 = (WTF *)v236;
          if ((_QWORD)v236)
          {
            *(_QWORD *)&v236 = 0;
            DWORD2(v236) = 0;
            WTF::fastFree(v80, v79);
          }
          v81 = (WTF *)v235;
          if ((_QWORD)v235)
          {
            *(_QWORD *)&v235 = 0;
            DWORD2(v235) = 0;
            WTF::fastFree(v81, v79);
          }
          MEMORY[0x19AEAEECC](v233);
          MEMORY[0x19AEAEECC](v232);
          MEMORY[0x19AEAEECC](v231);
          MEMORY[0x19AEAEECC](v230);
          MEMORY[0x19AEAEECC](&v225);
LABEL_170:
          v82 = v193;
          v193 = 0;
          if (v82)
          {
            if (*((_DWORD *)v82 + 6) == 2)
            {
              if ((*((_WORD *)v82 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v82);
            }
            else
            {
              *((_DWORD *)v82 + 6) -= 2;
            }
          }
          v83 = v189;
          v189 = 0;
          if (v83)
          {
            if (*((_DWORD *)v83 + 6) == 2)
            {
              if ((*((_WORD *)v83 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v83);
            }
            else
            {
              *((_DWORD *)v83 + 6) -= 2;
            }
          }
          v84 = v201;
          v201 = 0;
          if (v84)
          {
            if (*((_DWORD *)v84 + 6) == 2)
            {
              if ((*((_WORD *)v84 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v84);
            }
            else
            {
              *((_DWORD *)v84 + 6) -= 2;
            }
          }
          v85 = v197;
          v197 = 0;
          if (v85)
          {
            if (*((_DWORD *)v85 + 6) == 2)
            {
              if ((*((_WORD *)v85 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v85);
            }
            else
            {
              *((_DWORD *)v85 + 6) -= 2;
            }
          }
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v205);
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
        }
        if (*((float *)a2 + 6) > 0.0 && *((float *)a2 + 7) > 0.0)
        {
          v24 = roundf(*((float *)a2 + 4));
          if (v24 >= 2147500000.0)
          {
            v25 = 0x7FFFFFFFLL;
          }
          else if (v24 <= -2147500000.0)
          {
            v25 = 0x80000000;
          }
          else
          {
            v25 = (int)v24;
          }
          v26 = roundf(*((float *)a2 + 5));
          if (v26 >= 2147500000.0)
          {
            v27 = 0x7FFFFFFF00000000;
          }
          else if (v26 <= -2147500000.0)
          {
            v27 = 0x8000000000000000;
          }
          else
          {
            v27 = (unint64_t)(int)v26 << 32;
          }
          *(_QWORD *)&v172 = v27 | v25;
          WebCore::closestEditablePositionInElementForAbsolutePoint();
          v28 = v225;
          v225 = 0;
          v29 = v197;
          v197 = v28;
          if (v29)
          {
            if (*((_DWORD *)v29 + 6) == 2)
            {
              if ((*((_WORD *)v29 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v29);
                v158 = v225;
                v198 = v226;
                v199 = v227;
                v200 = v228;
                v225 = 0;
                if (v158)
                {
                  if (*((_DWORD *)v158 + 6) == 2)
                  {
                    if ((*((_WORD *)v158 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v158);
                  }
                  else
                  {
                    *((_DWORD *)v158 + 6) -= 2;
                  }
                }
                goto LABEL_40;
              }
            }
            else
            {
              *((_DWORD *)v29 + 6) -= 2;
            }
          }
          v198 = v226;
          v199 = v227;
          v200 = v228;
LABEL_40:
          v30 = roundf(*((float *)a2 + 4) + *((float *)a2 + 6));
          if (v30 >= 2147500000.0)
          {
            v31 = 0x7FFFFFFFLL;
          }
          else if (v30 <= -2147500000.0)
          {
            v31 = 0x80000000;
          }
          else
          {
            v31 = (int)v30;
          }
          v32 = roundf(*((float *)a2 + 5) + *((float *)a2 + 7));
          if (v32 >= 2147500000.0)
          {
            v33 = 0x7FFFFFFF00000000;
          }
          else if (v32 <= -2147500000.0)
          {
            v33 = 0x8000000000000000;
          }
          else
          {
            v33 = (unint64_t)(int)v32 << 32;
          }
          *(_QWORD *)&v172 = v33 | v31;
          WebCore::closestEditablePositionInElementForAbsolutePoint();
          v34 = v225;
          v225 = 0;
          v35 = v201;
          v201 = v34;
          if (!v35)
            goto LABEL_49;
          if (*((_DWORD *)v35 + 6) != 2)
          {
            *((_DWORD *)v35 + 6) -= 2;
LABEL_49:
            v202 = v226;
            v203 = v227;
            v204 = v228;
            goto LABEL_135;
          }
          if ((*((_WORD *)v35 + 15) & 0x400) != 0)
            goto LABEL_49;
          WebCore::Node::removedLastRef(v35);
          v61 = v225;
          v202 = v226;
          v203 = v227;
          v204 = v228;
LABEL_129:
          v225 = 0;
          if (!v61)
            goto LABEL_135;
          goto LABEL_130;
        }
        *((_DWORD *)v176 + 6) += 2;
        if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v23 + 872))(v23) & 1) != 0)
        {
          WebCore::HTMLTextFormControlElement::visiblePositionForIndex(v23);
          v46 = v225;
          v225 = 0;
          v47 = v197;
          v197 = v46;
          if (v47)
          {
            if (*((_DWORD *)v47 + 6) == 2)
            {
              if ((*((_WORD *)v47 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v47);
                v159 = v225;
                v198 = v226;
                v199 = v227;
                v200 = v228;
                v225 = 0;
                if (v159)
                {
                  if (*((_DWORD *)v159 + 6) == 2)
                  {
                    if ((*((_WORD *)v159 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v159);
                  }
                  else
                  {
                    *((_DWORD *)v159 + 6) -= 2;
                  }
                }
LABEL_66:
                (*(void (**)(__int128 *__return_ptr, WebCore::Node *))(*(_QWORD *)v23 + 1392))(&v172, v23);
                WebCore::HTMLTextFormControlElement::visiblePositionForIndex(v23);
                v49 = v225;
                v225 = 0;
                v50 = v201;
                v201 = v49;
                if (v50)
                {
                  if (*((_DWORD *)v50 + 6) == 2)
                  {
                    if ((*((_WORD *)v50 + 15) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef(v50);
                      v161 = v225;
                      v202 = v226;
                      v203 = v227;
                      v204 = v228;
                      v225 = 0;
                      if (v161)
                      {
                        if (*((_DWORD *)v161 + 6) == 2)
                        {
                          if ((*((_WORD *)v161 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v161);
                        }
                        else
                        {
                          *((_DWORD *)v161 + 6) -= 2;
                        }
                      }
                      goto LABEL_70;
                    }
                  }
                  else
                  {
                    *((_DWORD *)v50 + 6) -= 2;
                  }
                }
                v202 = v226;
                v203 = v227;
                v204 = v228;
                v225 = 0;
LABEL_70:
                v51 = (WTF::StringImpl *)v172;
                *(_QWORD *)&v172 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, v48);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                if (*((_DWORD *)v23 + 6) != 2)
                {
                  *((_DWORD *)v23 + 6) -= 2;
                  goto LABEL_135;
                }
                if ((*((_WORD *)v23 + 15) & 0x400) != 0)
                {
LABEL_135:
                  if (*((_DWORD *)v23 + 6) == 2)
                  {
                    if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v23);
                  }
                  else
                  {
                    *((_DWORD *)v23 + 6) -= 2;
                  }
                  goto LABEL_137;
                }
                v61 = v23;
LABEL_368:
                WebCore::Node::removedLastRef(v61);
                goto LABEL_135;
              }
            }
            else
            {
              *((_DWORD *)v47 + 6) -= 2;
            }
          }
          v198 = v226;
          v199 = v227;
          v200 = v228;
          goto LABEL_66;
        }
        if (*((_DWORD *)v23 + 6) == 2)
        {
          if ((*((_WORD *)v23 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v23);
        }
        else
        {
          *((_DWORD *)v23 + 6) -= 2;
        }
        WebCore::firstPositionInOrBeforeNode((WebCore::Node *)&v172, v23);
        WebCore::VisiblePosition::VisiblePosition();
        v56 = v225;
        v225 = 0;
        v57 = v197;
        v197 = v56;
        if (v57)
        {
          if (*((_DWORD *)v57 + 6) == 2)
          {
            if ((*((_WORD *)v57 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v57);
              v160 = v225;
              v198 = v226;
              v199 = v227;
              v200 = v228;
              v225 = 0;
              if (v160)
              {
                if (*((_DWORD *)v160 + 6) == 2)
                {
                  if ((*((_WORD *)v160 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v160);
                }
                else
                {
                  *((_DWORD *)v160 + 6) -= 2;
                }
              }
LABEL_91:
              v58 = v172;
              *(_QWORD *)&v172 = 0;
              if (v58)
              {
                if (*(_DWORD *)(v58 + 24) == 2)
                {
                  if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v58);
                }
                else
                {
                  *(_DWORD *)(v58 + 24) -= 2;
                }
              }
              WebCore::lastPositionInOrAfterNode((WebCore::Node *)&v172, v23);
              WebCore::VisiblePosition::VisiblePosition();
              v59 = v225;
              v225 = 0;
              v60 = v201;
              v201 = v59;
              if (v60)
              {
                if (*((_DWORD *)v60 + 6) == 2)
                {
                  if ((*((_WORD *)v60 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v60);
                    v162 = v225;
                    v202 = v226;
                    v203 = v227;
                    v204 = v228;
                    v225 = 0;
                    if (v162)
                    {
                      if (*((_DWORD *)v162 + 6) == 2)
                      {
                        if ((*((_WORD *)v162 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v162);
                      }
                      else
                      {
                        *((_DWORD *)v162 + 6) -= 2;
                      }
                    }
LABEL_98:
                    v61 = (WebCore::Node *)v172;
                    *(_QWORD *)&v172 = 0;
                    if (!v61)
                      goto LABEL_135;
LABEL_130:
                    if (*((_DWORD *)v61 + 6) != 2)
                    {
                      *((_DWORD *)v61 + 6) -= 2;
                      goto LABEL_135;
                    }
                    if ((*((_WORD *)v61 + 15) & 0x400) != 0)
                      goto LABEL_135;
                    goto LABEL_368;
                  }
                }
                else
                {
                  *((_DWORD *)v60 + 6) -= 2;
                }
              }
              v202 = v226;
              v203 = v227;
              v204 = v228;
              v225 = 0;
              goto LABEL_98;
            }
          }
          else
          {
            *((_DWORD *)v57 + 6) -= 2;
          }
        }
        v198 = v226;
        v199 = v227;
        v200 = v228;
        v225 = 0;
        goto LABEL_91;
      }
      if ((v19 & 0x48) == 0)
      {
        if (HIBYTE(v223))
        {
          v52 = v189;
          if (v189)
            *((_DWORD *)v189 + 6) += 2;
          v53 = v197;
          v197 = v52;
          if (v53)
          {
            if (*((_DWORD *)v53 + 6) == 2)
            {
              if ((*((_WORD *)v53 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v53);
            }
            else
            {
              *((_DWORD *)v53 + 6) -= 2;
            }
          }
          v198 = v190;
          v199 = v191;
          v200 = v192;
          v54 = v193;
          if (v193)
            *((_DWORD *)v193 + 6) += 2;
          v55 = v201;
          v201 = v54;
          if (v55)
          {
            if (*((_DWORD *)v55 + 6) == 2)
            {
              if ((*((_WORD *)v55 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v55);
            }
            else
            {
              *((_DWORD *)v55 + 6) -= 2;
            }
          }
          v202 = v194;
          v203 = v195;
          v204 = v196;
        }
LABEL_137:
        v71 = (char)WebCore::documentOrder();
        if (v71 != -127 && v71 < 0)
        {
          v72 = v197;
          v73 = v201;
          if (v201)
            *((_DWORD *)v201 + 6) += 2;
          v197 = v73;
          v198 = v202;
          v199 = v203;
          v200 = v204;
          if (v72)
          {
            if (*((_DWORD *)v72 + 6) == 2)
            {
              if ((*((_WORD *)v72 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v72);
            }
            else
            {
              *((_DWORD *)v72 + 6) -= 2;
            }
          }
        }
        if ((*a2 & 0x40) != 0)
        {
          v74 = (char)WebCore::documentOrder();
          if (v74 != -127 && v74 < 0)
          {
            v75 = v189;
            if (v189)
              *((_DWORD *)v189 + 6) += 2;
            v76 = v197;
            v197 = v75;
            if (v76)
            {
              if (*((_DWORD *)v76 + 6) == 2)
              {
                if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v76);
              }
              else
              {
                *((_DWORD *)v76 + 6) -= 2;
              }
            }
            v198 = v190;
            v199 = v191;
            v200 = v192;
          }
          if ((char)WebCore::documentOrder() >= 1)
          {
            v77 = v193;
            if (v193)
              *((_DWORD *)v193 + 6) += 2;
            v78 = v201;
            v201 = v77;
            if (v78)
            {
              if (*((_DWORD *)v78 + 6) == 2)
              {
                if ((*((_WORD *)v78 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v78);
              }
              else
              {
                *((_DWORD *)v78 + 6) -= 2;
              }
            }
            v202 = v194;
            v203 = v195;
            v204 = v196;
          }
        }
        if (!v197 || (*((_BYTE *)v197 + 22) & 8) == 0 || !v201 || (*((_BYTE *)v201 + 22) & 8) == 0)
        {
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)&v225);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v230);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v231);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v232);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v233);
          v236 = 0u;
          v235 = 0u;
          v234 = 0u;
          v45 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v45 + 16))(v45, &v225);
          goto LABEL_165;
        }
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::VisiblePosition::VisiblePosition();
        if (WebCore::intersects())
        {
          WebCore::intersection();
          goto LABEL_203;
        }
        WebCore::midpoint();
        WebCore::startOfWord();
        if ((WebCore::contains() & 1) != 0)
        {
LABEL_197:
          v90 = v176;
          if (v176)
          {
            v91 = *((_DWORD *)v176 + 6);
            v237.boundingRect.m_location = (FloatPoint)v176;
            v92 = v177;
            v237.boundingRect.m_size.m_width = v177;
            v93 = v178;
            LOBYTE(v237.boundingRect.m_size.m_height) = v178;
            v94 = v179;
            LOBYTE(v237.webPageIdentifier.m_identifier) = v179;
            *((_DWORD *)v176 + 6) = v91 + 4;
            *(_QWORD *)v237.documentIdentifier.m_object = v90;
            *(float *)&v237.documentIdentifier.m_object[8] = v92;
            v237.documentIdentifier.m_object[12] = v93;
            LOBYTE(v237.m_processIdentifier.m_identifier) = v94;
            v176 = 0;
            v95 = v91 + 2;
            if (v95)
            {
              *((_DWORD *)v90 + 6) = v95;
            }
            else if ((*((_WORD *)v90 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v90);
            }
          }
          else
          {
            v237.boundingRect.m_location = 0;
            v237.boundingRect.m_size.m_width = v177;
            LOBYTE(v237.boundingRect.m_size.m_height) = v178;
            LOBYTE(v237.webPageIdentifier.m_identifier) = v179;
            *(_QWORD *)v237.documentIdentifier.m_object = 0;
            *(float *)&v237.documentIdentifier.m_object[8] = v177;
            v237.documentIdentifier.m_object[12] = v178;
            LOBYTE(v237.m_processIdentifier.m_identifier) = v179;
          }
          v96 = v172;
          *(_QWORD *)&v172 = 0;
          if (v96)
          {
            if (*(_DWORD *)(v96 + 24) == 2)
            {
              if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v96);
            }
            else
            {
              *(_DWORD *)(v96 + 24) -= 2;
            }
          }
LABEL_203:
          v97 = v229;
          v229 = 0;
          if (v97)
          {
            if (*((_DWORD *)v97 + 6) == 2)
            {
              if ((*((_WORD *)v97 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v97);
            }
            else
            {
              *((_DWORD *)v97 + 6) -= 2;
            }
          }
          v98 = v225;
          v225 = 0;
          if (v98)
          {
            if (*((_DWORD *)v98 + 6) == 2)
            {
              if ((*((_WORD *)v98 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v98);
            }
            else
            {
              *((_DWORD *)v98 + 6) -= 2;
            }
          }
          if (!*(_QWORD *)&v237.boundingRect.m_location || !*(_QWORD *)v237.documentIdentifier.m_object)
          {
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)&v225);
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v230);
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v231);
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v232);
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v233);
            v236 = 0u;
            v235 = 0u;
            v234 = 0u;
            v106 = *a3;
            *a3 = 0;
            (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v106 + 16))(v106, &v225);
            (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
            v108 = (WTF *)v236;
            if ((_QWORD)v236)
            {
              *(_QWORD *)&v236 = 0;
              DWORD2(v236) = 0;
              WTF::fastFree(v108, v107);
            }
            v109 = (WTF *)v235;
            if ((_QWORD)v235)
            {
              *(_QWORD *)&v235 = 0;
              DWORD2(v235) = 0;
              WTF::fastFree(v109, v107);
            }
            MEMORY[0x19AEAEECC](v233);
            MEMORY[0x19AEAEECC](v232);
            MEMORY[0x19AEAEECC](v231);
            MEMORY[0x19AEAEECC](v230);
            MEMORY[0x19AEAEECC](&v225);
            goto LABEL_325;
          }
          v185 = 0;
          v186 = 0;
          v187 &= 0xF0u;
          v188 = 1;
          v181 = 0;
          v182 = 0;
          v183 &= 0xF0u;
          v184 = 1;
          v99 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v7 + 296));
          WebCore::Editor::compositionRange(v99);
          v100 = *((_QWORD *)a2 + 1);
          if (v100)
          {
            WebKit::moveByGranularityRespectingWordBoundary((uint64_t)&v225, (uint64_t)&v197, a2[1], v100, 1);
            v101 = v225;
            v225 = 0;
            v102 = v185;
            v185 = v101;
            v103 = v167;
            if (v102)
            {
              if (*((_DWORD *)v102 + 6) == 2)
              {
                if ((*((_WORD *)v102 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v102);
                  v163 = v225;
                  v186 = v226;
                  v187 = v227;
                  v188 = v228;
                  v225 = 0;
                  if (v163)
                  {
                    if (*((_DWORD *)v163 + 6) == 2)
                    {
                      if ((*((_WORD *)v163 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v163);
                    }
                    else
                    {
                      *((_DWORD *)v163 + 6) -= 2;
                    }
                  }
LABEL_216:
                  WebKit::moveByGranularityRespectingWordBoundary((uint64_t)&v225, (uint64_t)&v201, a2[1], *((_QWORD *)a2 + 1), 0);
                  v104 = v225;
                  v225 = 0;
                  v105 = v181;
                  v181 = v104;
                  if (!v105)
                  {
LABEL_219:
                    v182 = v226;
                    v183 = v227;
                    v184 = v228;
                    goto LABEL_266;
                  }
                  if (*((_DWORD *)v105 + 6) != 2)
                  {
                    *((_DWORD *)v105 + 6) -= 2;
                    goto LABEL_219;
                  }
                  if ((*((_WORD *)v105 + 15) & 0x400) != 0)
                    goto LABEL_219;
                  WebCore::Node::removedLastRef(v105);
                  v125 = v225;
                  v182 = v226;
                  v183 = v227;
                  v184 = v228;
                  v225 = 0;
                  if (!v125)
                  {
LABEL_266:
                    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)&v225);
                    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v230);
                    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v231);
                    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v232);
                    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v233);
                    v236 = 0u;
                    v235 = 0u;
                    v234 = 0u;
                    WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_1::operator()((WebCore::AttributedString *)&v172, (uint64_t)&v185);
                    WebCore::AttributedString::operator=();
                    MEMORY[0x19AEAEECC](&v172);
                    WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_1::operator()((WebCore::AttributedString *)&v172, (uint64_t)&v237);
                    WebCore::AttributedString::operator=();
                    MEMORY[0x19AEAEECC](&v172);
                    WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_1::operator()((WebCore::AttributedString *)&v172, (uint64_t)&v237.documentIdentifier);
                    WebCore::AttributedString::operator=();
                    MEMORY[0x19AEAEECC](&v172);
                    WebCore::makeVisiblePositionRange();
                    if (WebCore::intersects())
                    {
                      WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_1::operator()((WebCore::AttributedString *)&v170, (uint64_t)&v172);
                      WebCore::AttributedString::operator=();
                      MEMORY[0x19AEAEECC](&v170);
                      if (v232[0])
                        v126 = *(_DWORD *)(v232[0] + 4);
                      else
                        v126 = 0;
                      v127 = WebCore::distanceBetweenPositions();
                      if (v230[0])
                        v128 = (__CFString *)WTF::StringImpl::operator NSString *();
                      else
                        v128 = &stru_1E351F1B8;
                      v129 = -[__CFString length](v128, "length") + v127;
                      v130 = v127 & ~(v127 >> 63);
                      if (v127 >= v126)
                        v130 = v126;
                      if (v129 >= v126)
                        v131 = v126;
                      else
                        v131 = v129 & ~(v129 >> 63);
                      v132 = v131 >= v130;
                      v133 = v131 - v130;
                      if (!v132)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1973D9CACLL);
                      }
                      *(_QWORD *)&v234 = v130;
                      *((_QWORD *)&v234 + 1) = v133;
                    }
                    v134 = v174;
                    v174 = 0;
                    if (v134)
                    {
                      if (*((_DWORD *)v134 + 6) == 2)
                      {
                        if ((*((_WORD *)v134 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v134);
                      }
                      else
                      {
                        *((_DWORD *)v134 + 6) -= 2;
                      }
                    }
                    v135 = v172;
                    *(_QWORD *)&v172 = 0;
                    if (v135)
                    {
                      if (*(_DWORD *)(v135 + 24) == 2)
                      {
                        if ((*(_WORD *)(v135 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v135);
                      }
                      else
                      {
                        *(_DWORD *)(v135 + 24) -= 2;
                      }
                    }
                    if ((v103 & 4) != 0)
                    {
                      WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v172);
                      if (v175)
                      {
                        WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_3::operator()((uint64_t)&v170, (uint64_t)&v172, 0);
                        v138 = (WTF *)v235;
                        if ((_QWORD)v235)
                        {
                          *(_QWORD *)&v235 = 0;
                          DWORD2(v235) = 0;
                          WTF::fastFree(v138, v137);
                        }
                        v235 = v170;
                      }
                      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v172);
                    }
                    else if ((v103 & 0x20) != 0 && v180)
                    {
                      WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::BoundaryPoint &>((uint64_t)&v172, (uint64_t)&v185, &v176);
                      if (v175)
                        v136 = WebCore::characterCount();
                      else
                        v136 = 0;
                      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v172);
                      if (!v180)
                        goto LABEL_479;
                      WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_3::operator()((uint64_t)&v172, (uint64_t)&v176, v136);
                      v140 = (WTF *)v235;
                      if ((_QWORD)v235)
                      {
                        *(_QWORD *)&v235 = 0;
                        DWORD2(v235) = 0;
                        WTF::fastFree(v140, v139);
                      }
                      v235 = v172;
                    }
                    if ((*a2 & 0x80000000) == 0)
                    {
LABEL_315:
                      v150 = *a3;
                      *a3 = 0;
                      (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v150 + 16))(v150, &v225);
                      (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
                      v152 = (WTF *)v236;
                      if ((_QWORD)v236)
                      {
                        *(_QWORD *)&v236 = 0;
                        DWORD2(v236) = 0;
                        WTF::fastFree(v152, v151);
                      }
                      v153 = (WTF *)v235;
                      if ((_QWORD)v235)
                      {
                        *(_QWORD *)&v235 = 0;
                        DWORD2(v235) = 0;
                        WTF::fastFree(v153, v151);
                      }
                      MEMORY[0x19AEAEECC](v233);
                      MEMORY[0x19AEAEECC](v232);
                      MEMORY[0x19AEAEECC](v231);
                      MEMORY[0x19AEAEECC](v230);
                      MEMORY[0x19AEAEECC](&v225);
                      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v176);
                      v154 = v181;
                      v181 = 0;
                      if (v154)
                      {
                        if (*((_DWORD *)v154 + 6) == 2)
                        {
                          if ((*((_WORD *)v154 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v154);
                        }
                        else
                        {
                          *((_DWORD *)v154 + 6) -= 2;
                        }
                      }
                      v155 = v185;
                      v185 = 0;
                      if (v155)
                      {
                        if (*((_DWORD *)v155 + 6) == 2)
                        {
                          if ((*((_WORD *)v155 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v155);
                        }
                        else
                        {
                          *((_DWORD *)v155 + 6) -= 2;
                        }
                      }
LABEL_325:
                      v156 = *(_QWORD *)v237.documentIdentifier.m_object;
                      *(_QWORD *)v237.documentIdentifier.m_object = 0;
                      if (v156)
                      {
                        if (*(_DWORD *)(v156 + 24) == 2)
                        {
                          if ((*(_WORD *)(v156 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v156);
                        }
                        else
                        {
                          *(_DWORD *)(v156 + 24) -= 2;
                        }
                      }
                      m_location = v237.boundingRect.m_location;
                      v237.boundingRect.m_location = 0;
                      if (m_location)
                      {
                        if (*(_DWORD *)(*(_QWORD *)&m_location + 24) == 2)
                        {
                          if ((*(_WORD *)(*(_QWORD *)&m_location + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef(*(WebCore::Node **)&m_location);
                        }
                        else
                        {
                          *(_DWORD *)(*(_QWORD *)&m_location + 24) -= 2;
                        }
                      }
                      goto LABEL_170;
                    }
                    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v172);
                    if (!v175)
                    {
LABEL_314:
                      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v172);
                      goto LABEL_315;
                    }
                    if (*(_QWORD *)(*(_QWORD *)(v7 + 296) + 1496)
                      || (WebCore::Document::ensureMarkers(*(WebCore::Document **)(v7 + 296)), v175))
                    {
                      WebCore::DocumentMarkerController::rangesForMarkersInRange();
                      v142 = v169;
                      if (v169)
                      {
                        if (v169 >> 28)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1973D9E8CLL);
                        }
                        v166 = (WTF *)WTF::fastMalloc((WTF *)(16 * v169));
                        v143 = 0;
                        v144 = 0;
                        v145 = (uint64_t *)((char *)v166 + 8);
                        do
                        {
                          if (!v175)
                            goto LABEL_479;
                          WebCore::SimpleRange::SimpleRange();
                          v146 = WebCore::characterCount();
                          v147 = WebCore::characterCount();
                          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v171);
                          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v170);
                          *(v145 - 1) = v146;
                          *v145 = v147;
                          ++v144;
                          v145 += 2;
                          v143 += 32;
                        }
                        while (v144 < v169);
                        v148 = v166;
                      }
                      else
                      {
                        v148 = 0;
                        LODWORD(v144) = 0;
                      }
                      v149 = (WTF *)v236;
                      if ((_QWORD)v236)
                      {
                        *(_QWORD *)&v236 = 0;
                        DWORD2(v236) = 0;
                        WTF::fastFree(v149, v141);
                      }
                      *(_QWORD *)&v236 = v148;
                      *((_QWORD *)&v236 + 1) = __PAIR64__(v144, v142);
                      WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v168, v141);
                      goto LABEL_314;
                    }
LABEL_479:
                    __break(1u);
                    JUMPOUT(0x1973DA764);
                  }
LABEL_264:
                  if (*((_DWORD *)v125 + 6) == 2)
                  {
                    if ((*((_WORD *)v125 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v125);
                  }
                  else
                  {
                    *((_DWORD *)v125 + 6) -= 2;
                  }
                  goto LABEL_266;
                }
              }
              else
              {
                *((_DWORD *)v102 + 6) -= 2;
              }
            }
            v186 = v226;
            v187 = v227;
            v188 = v228;
            goto LABEL_216;
          }
          v110 = v197;
          if (v197)
            *((_DWORD *)v197 + 6) += 2;
          v111 = v185;
          v185 = v110;
          if (v111)
          {
            if (*((_DWORD *)v111 + 6) == 2)
            {
              if ((*((_WORD *)v111 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v111);
            }
            else
            {
              *((_DWORD *)v111 + 6) -= 2;
            }
          }
          v186 = v198;
          v187 = v199;
          v188 = v200;
          v112 = v201;
          if (v201)
            *((_DWORD *)v201 + 6) += 2;
          v113 = v181;
          v181 = v112;
          if (v113)
          {
            if (*((_DWORD *)v113 + 6) == 2)
            {
              if ((*((_WORD *)v113 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v113);
            }
            else
            {
              *((_DWORD *)v113 + 6) -= 2;
            }
          }
          v182 = v202;
          v183 = v203;
          v184 = v204;
          v103 = v167;
          if ((v167 & 0x20) == 0 || !v180)
            goto LABEL_266;
          WebCore::makeDeprecatedLegacyPosition();
          if (!v180)
            goto LABEL_479;
          WebCore::makeDeprecatedLegacyPosition();
          WebCore::VisiblePosition::VisiblePosition();
          v114 = (char)WebCore::documentOrder();
          v115 = v225;
          v225 = 0;
          if (v115)
          {
            if (*((_DWORD *)v115 + 6) == 2)
            {
              if ((*((_WORD *)v115 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v115);
            }
            else
            {
              *((_DWORD *)v115 + 6) -= 2;
            }
          }
          if (v114 >= 1)
          {
            WebCore::VisiblePosition::VisiblePosition();
            v116 = v225;
            v225 = 0;
            v117 = v185;
            v185 = v116;
            if (!v117)
            {
LABEL_245:
              v186 = v226;
              v187 = v227;
              v188 = v228;
              goto LABEL_246;
            }
            if (*((_DWORD *)v117 + 6) != 2)
            {
              *((_DWORD *)v117 + 6) -= 2;
              goto LABEL_245;
            }
            if ((*((_WORD *)v117 + 15) & 0x400) != 0)
              goto LABEL_245;
            WebCore::Node::removedLastRef(v117);
            v164 = v225;
            v186 = v226;
            v187 = v227;
            v188 = v228;
            v225 = 0;
            if (v164)
            {
              if (*((_DWORD *)v164 + 6) == 2)
              {
                if ((*((_WORD *)v164 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v164);
              }
              else
              {
                *((_DWORD *)v164 + 6) -= 2;
              }
            }
          }
LABEL_246:
          WebCore::VisiblePosition::VisiblePosition();
          v118 = (char)WebCore::documentOrder();
          v120 = v118 != -127 && v118 < 0;
          v121 = v225;
          v225 = 0;
          if (v121)
          {
            if (*((_DWORD *)v121 + 6) == 2)
            {
              if ((*((_WORD *)v121 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v121);
            }
            else
            {
              *((_DWORD *)v121 + 6) -= 2;
            }
          }
          if (v120)
          {
            WebCore::VisiblePosition::VisiblePosition();
            v122 = v225;
            v225 = 0;
            v123 = v181;
            v181 = v122;
            if (!v123)
            {
LABEL_259:
              v182 = v226;
              v183 = v227;
              v184 = v228;
              goto LABEL_260;
            }
            if (*((_DWORD *)v123 + 6) != 2)
            {
              *((_DWORD *)v123 + 6) -= 2;
              goto LABEL_259;
            }
            if ((*((_WORD *)v123 + 15) & 0x400) != 0)
              goto LABEL_259;
            WebCore::Node::removedLastRef(v123);
            v165 = v225;
            v182 = v226;
            v183 = v227;
            v184 = v228;
            v225 = 0;
            if (v165)
            {
              if (*((_DWORD *)v165 + 6) == 2)
              {
                if ((*((_WORD *)v165 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v165);
              }
              else
              {
                *((_DWORD *)v165 + 6) -= 2;
              }
            }
          }
LABEL_260:
          v124 = v170;
          *(_QWORD *)&v170 = 0;
          if (v124)
          {
            if (*(_DWORD *)(v124 + 24) == 2)
            {
              if ((*(_WORD *)(v124 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v124);
            }
            else
            {
              *(_DWORD *)(v124 + 24) -= 2;
            }
          }
          v125 = (WebCore::Node *)v172;
          *(_QWORD *)&v172 = 0;
          if (!v125)
            goto LABEL_266;
          goto LABEL_264;
        }
        WebCore::endOfWord();
        v86 = (WebCore::Node *)v170;
        *(_QWORD *)&v170 = 0;
        v87 = v176;
        v176 = v86;
        if (v87)
        {
          if (*((_DWORD *)v87 + 6) == 2)
          {
            if ((*((_WORD *)v87 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v87);
              v177 = *((float *)&v170 + 2);
              v178 = BYTE12(v170);
              v179 = v171[0];
              *(_QWORD *)&v170 = 0;
LABEL_190:
              if ((WebCore::contains() & 1) == 0)
              {
                v88 = (WebCore::Node *)v172;
                if ((_QWORD)v172)
                  *(_DWORD *)(v172 + 24) += 2;
                v89 = v176;
                v176 = v88;
                if (v89)
                {
                  if (*((_DWORD *)v89 + 6) == 2)
                  {
                    if ((*((_WORD *)v89 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v89);
                  }
                  else
                  {
                    *((_DWORD *)v89 + 6) -= 2;
                  }
                }
                v177 = *((float *)&v172 + 2);
                v178 = BYTE12(v172);
                v179 = v173;
              }
              goto LABEL_197;
            }
          }
          else
          {
            *((_DWORD *)v87 + 6) -= 2;
          }
        }
        v177 = *((float *)&v170 + 2);
        v178 = BYTE12(v170);
        v179 = v171[0];
        goto LABEL_190;
      }
      WebKit::visiblePositionForPointInRootViewCoordinates(*((float *)a2 + 4), *((float *)a2 + 5), (uint64_t)&v225, (WebCore::LocalFrame *)v7);
      v41 = v225;
      v225 = 0;
      v197 = v41;
      v198 = v226;
      v199 = v227;
      v200 = v228;
      WebKit::visiblePositionForPointInRootViewCoordinates(*((float *)a2 + 4) + *((float *)a2 + 6), *((float *)a2 + 5) + *((float *)a2 + 7), (uint64_t)&v225, (WebCore::LocalFrame *)v7);
      v42 = v225;
      v225 = 0;
      v201 = v42;
      v202 = v226;
      v203 = v227;
      v204 = v228;
      if ((*a2 & 0x40) == 0)
        goto LABEL_137;
      v43 = (WebCore::Node *)WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)&v205);
      v23 = v43;
      if (!v43)
        goto LABEL_137;
      *((_DWORD *)v43 + 6) += 2;
      if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v43 + 208))(v43) & 1) != 0)
      {
        WebCore::firstPositionInNode(v23, v44);
      }
      else
      {
        *((_DWORD *)v23 + 6) += 2;
        WebCore::Position::Position();
        v176 = 0;
        if (v23)
        {
          if (*((_DWORD *)v23 + 6) == 2)
          {
            if ((*((_WORD *)v23 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v23);
          }
          else
          {
            *((_DWORD *)v23 + 6) -= 2;
          }
        }
      }
      WebCore::VisiblePosition::VisiblePosition();
      v62 = v172;
      *(_QWORD *)&v172 = 0;
      if (v62)
      {
        if (*(_DWORD *)(v62 + 24) == 2)
        {
          if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v62);
        }
        else
        {
          *(_DWORD *)(v62 + 24) -= 2;
        }
      }
      if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v23 + 208))(v23) & 1) != 0)
      {
        WebCore::lastPositionInNode(v23, v63);
      }
      else
      {
        *((_DWORD *)v23 + 6) += 2;
        WebCore::Position::Position();
        *(_QWORD *)&v170 = 0;
        if (v23)
        {
          if (*((_DWORD *)v23 + 6) == 2)
          {
            if ((*((_WORD *)v23 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v23);
          }
          else
          {
            *((_DWORD *)v23 + 6) -= 2;
          }
        }
      }
      WebCore::VisiblePosition::VisiblePosition();
      v64 = v176;
      v176 = 0;
      if (v64)
      {
        if (*((_DWORD *)v64 + 6) == 2)
        {
          if ((*((_WORD *)v64 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v64);
        }
        else
        {
          *((_DWORD *)v64 + 6) -= 2;
        }
      }
      v65 = (char)WebCore::documentOrder();
      if (v65 != -127 && v65 < 0)
      {
        v66 = v225;
        v225 = 0;
        v67 = v197;
        v197 = v66;
        if (v67)
        {
          if (*((_DWORD *)v67 + 6) == 2)
          {
            if ((*((_WORD *)v67 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v67);
          }
          else
          {
            *((_DWORD *)v67 + 6) -= 2;
          }
        }
        v198 = v226;
        v199 = v227;
        v200 = v228;
      }
      v68 = (char)WebCore::documentOrder();
      v69 = v172;
      if (v68 < 1)
      {
LABEL_125:
        *(_QWORD *)&v172 = 0;
        if (v69)
        {
          if (*(_DWORD *)(v69 + 24) == 2)
          {
            if ((*(_WORD *)(v69 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v69);
          }
          else
          {
            *(_DWORD *)(v69 + 24) -= 2;
          }
        }
        v61 = v225;
        goto LABEL_129;
      }
      *(_QWORD *)&v172 = 0;
      v70 = v201;
      v201 = (WebCore::Node *)v69;
      if (v70)
      {
        if (*((_DWORD *)v70 + 6) != 2)
        {
          v69 = 0;
          *((_DWORD *)v70 + 6) -= 2;
LABEL_124:
          v202 = DWORD2(v172);
          v203 = BYTE12(v172);
          v204 = v173;
          goto LABEL_125;
        }
        if ((*((_WORD *)v70 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v70);
          v69 = v172;
          goto LABEL_124;
        }
      }
      v69 = 0;
      goto LABEL_124;
    }
  }
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)&v225);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v230);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v231);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v232);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v233);
  v236 = 0u;
  v235 = 0u;
  v234 = 0u;
  v36 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v36 + 16))(v36, &v225);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v38 = (WTF *)v236;
  if ((_QWORD)v236)
  {
    *(_QWORD *)&v236 = 0;
    DWORD2(v236) = 0;
    WTF::fastFree(v38, v37);
  }
  v39 = (WTF *)v235;
  if ((_QWORD)v235)
  {
    *(_QWORD *)&v235 = 0;
    DWORD2(v235) = 0;
    WTF::fastFree(v39, v37);
  }
  MEMORY[0x19AEAEECC](v233);
  MEMORY[0x19AEAEECC](v232);
  MEMORY[0x19AEAEECC](v231);
  MEMORY[0x19AEAEECC](v230);
  return (unsigned int *)MEMORY[0x19AEAEECC](&v225);
}

WebCore::Node *WebCore::firstPositionInOrBeforeNode(WebCore::Node *this, WebCore::Node *a2)
{
  WebCore::Node *v3;

  if (a2)
  {
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 208))(a2) & 1) != 0)
    {
      return WebCore::firstPositionInNode(a2, v3);
    }
    else
    {
      *((_DWORD *)a2 + 6) += 2;
      WebCore::Position::Position();
      this = a2;
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    *((_BYTE *)this + 12) &= 0xF0u;
  }
  return this;
}

void sub_1973DA828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a10);
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::Node *WebCore::lastPositionInOrAfterNode(WebCore::Node *this, WebCore::Node *a2)
{
  WebCore::Node *v3;

  if (a2)
  {
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 208))(a2) & 1) != 0)
    {
      return WebCore::lastPositionInNode(a2, v3);
    }
    else
    {
      *((_DWORD *)a2 + 6) += 2;
      WebCore::Position::Position();
      this = a2;
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    *((_BYTE *)this + 12) &= 0xF0u;
  }
  return this;
}

void sub_1973DA91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a10);
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::visiblePositionForPointInRootViewCoordinates(float a1, float a2, uint64_t a3, WebCore::LocalFrame *a4)
{
  WebCore::ScrollView *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (WebCore::ScrollView *)*((_QWORD *)a4 + 36);
  v6 = roundf(a1);
  v7 = 0x7FFFFFFFLL;
  v8 = 0x80000000;
  if (v6 > -2147500000.0)
    v8 = (int)v6;
  if (v6 < 2147500000.0)
    v7 = v8;
  v9 = roundf(a2);
  v10 = 0x7FFFFFFF00000000;
  v11 = 0x8000000000000000;
  if (v9 > -2147500000.0)
    v11 = (unint64_t)(int)v9 << 32;
  if (v9 < 2147500000.0)
    v10 = v11;
  v13 = v10 | v7;
  v14 = WebCore::ScrollView::rootViewToContents(v5, (const WebCore::IntPoint *)&v13);
  return WebCore::LocalFrame::visiblePositionForPoint(a4, (const WebCore::IntPoint *)&v14);
}

WebCore::Node *WebKit::moveByGranularityRespectingWordBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  int v13;
  char v14;
  char v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *result;
  WebCore::Node *v19;
  int v20;
  char v21;
  char v22;
  WebCore::Node *v23;
  int v24;
  char v25;
  char v26;
  WebCore::Node *v27;

  if (a5 == 1)
    WebCore::startOfEditableContent();
  else
    WebCore::endOfEditableContent();
  if (WebCore::operator==(a2, (uint64_t)&v27))
  {
    if (a5 == 1)
      WebCore::startOfWord();
    else
      WebCore::endOfWord();
    goto LABEL_36;
  }
  v10 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v10 + 6) += 2;
  v11 = 0;
  v23 = v10;
  v24 = *(_DWORD *)(a2 + 8);
  v25 = *(_BYTE *)(a2 + 12);
  v26 = *(_BYTE *)(a2 + 16);
  do
  {
    WebCore::positionOfNextBoundaryOfGranularity();
    v12 = v19;
    v19 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v11);
          v13 = v20;
          v14 = v21;
          v15 = v22;
          v19 = 0;
          goto LABEL_14;
        }
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    v13 = v20;
    v14 = v21;
    v15 = v22;
LABEL_14:
    if (!v12)
      break;
    *((_DWORD *)v12 + 6) += 2;
    v16 = v23;
    v23 = v12;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    v24 = v13;
    v25 = v14;
    v26 = v15;
    a4 -= WebCore::atBoundaryOfGranularity();
    v11 = v12;
  }
  while (a4);
  if (a3 == 2)
  {
    v17 = v23;
    v23 = 0;
    *(_QWORD *)a1 = v17;
    *(_DWORD *)(a1 + 8) = v24;
    *(_BYTE *)(a1 + 12) = v25;
    *(_BYTE *)(a1 + 16) = v26;
  }
  else if (a5 == 1)
  {
    WebCore::startOfWord();
  }
  else
  {
    WebCore::endOfWord();
  }
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
LABEL_36:
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

void sub_1973DACB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, uint64_t a15, WebCore::Node *a16)
{
  uint64_t v16;

  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  if (a13)
  {
    if (*((_DWORD *)a13 + 6) == 2)
    {
      if ((*((_WORD *)a13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a13);
    }
    else
    {
      *((_DWORD *)a13 + 6) -= 2;
    }
  }
  if (a16)
  {
    if (*((_DWORD *)a16 + 6) == 2)
    {
      if ((*((_WORD *)a16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a16);
    }
    else
    {
      *((_DWORD *)a16 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_1::operator()(WebCore::AttributedString *a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  const __CFString *v14;
  WTF::StringImpl *v15;
  const void *v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  unsigned __int8 v25;
  WTF::StringImpl *v26;
  char v27;
  const void *v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;

  WebCore::makeBoundaryPoint();
  WebCore::makeBoundaryPoint();
  v4 = v25;
  if (v27)
    v5 = v25 == 0;
  else
    v5 = 1;
  if (v5)
  {
    v7 = 0;
    LOBYTE(v19) = 0;
  }
  else
  {
    WebCore::SimpleRange::SimpleRange();
    v19 = (uint64_t)v28;
    v20 = v29;
    v6 = v31;
    v28 = 0;
    v31 = 0;
    v21 = v6;
    v22 = v32;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v31);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v28);
    v4 = v25;
    v7 = 1;
  }
  v23 = v7;
  if (v4)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v24);
  if (v27)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v26);
  if (!v23 || v19 == v21 && v20 == v22)
  {
    WebCore::AttributedString::AttributedString(a1);
  }
  else
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)(v8 + 24) += 2;
    v28 = (const void *)v8;
    v29 = *(_DWORD *)(a2 + 8);
    v30 = *(_BYTE *)(a2 + 12);
    v9 = WebCore::enclosingTextFormControl();
    v10 = v9;
    if (v9)
      *(_DWORD *)(v9 + 24) += 2;
    v11 = (uint64_t)v28;
    v28 = 0;
    if (v11)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    if (v10)
    {
      if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24)
        && (*(_WORD *)(v10 + 230) & 0x400) != 0)
      {
        if (*(_DWORD *)(v10 + 24) == 2)
          goto LABEL_44;
        *(_DWORD *)(v10 + 24) -= 2;
      }
      else if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    while (1)
    {
      v12 = objc_alloc(MEMORY[0x1E0CB3498]);
      if (v23)
        break;
      __break(1u);
LABEL_44:
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    v13 = v12;
    WebCore::plainTextReplacingNoBreakSpace();
    if (v26)
      v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v14 = &stru_1E351F1B8;
    v28 = (const void *)objc_msgSend(v13, "initWithString:", v14);
    WebCore::AttributedString::fromNSAttributedString();
    v16 = v28;
    v28 = 0;
    if (v16)
      CFRelease(v16);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19);
}

void sub_1973DB000(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, WTF::StringImpl *a18, uint64_t a19, char a20)
{
  uint64_t v20;
  const void *v22;
  WTF::StringImpl *v23;

  v22 = *(const void **)(v20 - 64);
  *(_QWORD *)(v20 - 64) = 0;
  if (v22)
    CFRelease(v22);
  v23 = a18;
  a18 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_3::operator()(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  WTF *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  unsigned int v21;
  void *v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::ScrollView *v31;
  WebCore::Node *v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  __int128 v36;
  void *v37;
  WTF *v38;
  WebCore::Node *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::Node *v43[2];
  WTF *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[96];
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  char v55;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  LOBYTE(v51) = 0;
  v55 = 0;
  WebCore::TextIterator::TextIterator();
  while (v49)
  {
    if (!v50)
      goto LABEL_42;
    WebCore::TextIterator::range((WebCore::TextIterator *)v48);
    if (!v55 || v51 != (_QWORD)v46 || v52 != DWORD2(v46))
    {
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
LABEL_11:
      v44 = 0;
      v45 = 0;
      WebCore::TextIterator::range((WebCore::TextIterator *)v48);
      v9 = v46;
      v10 = v47;
      v11 = DWORD2(v46);
      v12 = DWORD2(v47);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
      if (v9 == v10 && v11 == v12)
      {
        WebCore::TextIterator::range((WebCore::TextIterator *)v48);
        WebCore::makeContainerOffsetPosition();
        WebCore::VisiblePosition::VisiblePosition();
        v13 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v40, 0);
        v15 = v14;
        v17 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v17 = v13;
        *((_QWORD *)v17 + 1) = v15;
        v18 = v44;
        if (v44)
        {
          v44 = 0;
          LODWORD(v45) = 0;
          WTF::fastFree(v18, v16);
        }
        v44 = v17;
        v45 = 0x100000001;
        v19 = v40;
        v40 = 0;
        if (v19)
        {
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
        v20 = v43[0];
        v43[0] = 0;
        if (v20)
        {
          if (*((_DWORD *)v20 + 6) == 2)
          {
            if ((*((_WORD *)v20 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v20);
          }
          else
          {
            *((_DWORD *)v20 + 6) -= 2;
          }
        }
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
        v21 = HIDWORD(v45);
        if (!HIDWORD(v45))
          goto LABEL_40;
LABEL_31:
        v25 = v44;
        v26 = (WTF *)((char *)v44 + 16 * v21);
        do
        {
LABEL_32:
          WebCore::TextIterator::range((WebCore::TextIterator *)v48);
          v29 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v40 + 5) + 8) + 528);
          if (v29 && (v30 = *(_QWORD *)(v29 + 8)) != 0)
            v31 = *(WebCore::ScrollView **)(v30 + 288);
          else
            v31 = 0;
          v43[0] = (WebCore::Node *)WebCore::ScrollView::contentsToRootView(v31, v25);
          v43[1] = v32;
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v46, (const WebCore::IntRect *)v43);
          *(_QWORD *)&v47 = a3;
          *((_QWORD *)&v47 + 1) = 1;
          v33 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v33 == *(_DWORD *)(a1 + 8))
          {
            v34 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v33 + 1, (unint64_t)&v46);
            v33 = *(unsigned int *)(a1 + 12);
            v35 = (_OWORD *)(*(_QWORD *)a1 + 32 * v33);
            v36 = v34[1];
            *v35 = *v34;
          }
          else
          {
            v35 = (_OWORD *)(*(_QWORD *)a1 + 32 * v33);
            v36 = v47;
            *v35 = v46;
          }
          v35[1] = v36;
          *(_DWORD *)(a1 + 12) = v33 + 1;
          ++a3;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v42);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v40);
          v25 = (WTF *)((char *)v25 + 16);
        }
        while (v25 != v26);
      }
      else
      {
        WebCore::TextIterator::range((WebCore::TextIterator *)v48);
        WebCore::RenderObject::absoluteTextRects();
        v23 = v44;
        if (v44)
        {
          v44 = 0;
          LODWORD(v45) = 0;
          WTF::fastFree(v23, v22);
        }
        v44 = v40;
        v24 = v41;
        v40 = 0;
        v41 = 0;
        v45 = v24;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
        if (HIDWORD(v45))
        {
          v25 = v44;
          v26 = (WTF *)((char *)v44 + 16 * HIDWORD(v45));
          goto LABEL_32;
        }
        v46 = 0uLL;
        if ((_DWORD)v45)
        {
          v27 = v44;
          *(_QWORD *)v44 = 0;
          *((_QWORD *)v27 + 1) = 0;
        }
        else
        {
          v28 = (_OWORD *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, 1uLL, (unint64_t)&v46);
          *((_OWORD *)v44 + HIDWORD(v45)) = *v28;
        }
        v21 = HIDWORD(v45) + 1;
        HIDWORD(v45) = v21;
        if (v21)
          goto LABEL_31;
      }
LABEL_40:
      WebCore::TextIterator::range((WebCore::TextIterator *)v48);
      std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange,void>((uint64_t)&v51, (uint64_t *)&v46);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
      v38 = v44;
      if (v44)
      {
        v44 = 0;
        LODWORD(v45) = 0;
        WTF::fastFree(v38, v37);
      }
      goto LABEL_42;
    }
    v5 = v53;
    v6 = v47;
    v7 = v54;
    v8 = DWORD2(v47);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
    if (v5 != v6 || v7 != v8)
      goto LABEL_11;
LABEL_42:
    WebCore::TextIterator::advance((WebCore::TextIterator *)v48);
  }
  MEMORY[0x19AEAD924](v48);
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51);
}

void sub_1973DB4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, WTF *a16, int a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v26;
  WTF *v27;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v24 - 136);
  v27 = *(WTF **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)v23 = 0;
    *(_DWORD *)(v23 + 8) = 0;
    WTF::fastFree(v27, v26);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::shouldAllowSingleClickToChangeSelection(WebKit::WebPage *this, WebCore::Node *a2, const WebCore::VisibleSelection *a3)
{
  BOOL v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v6 = WebCore::VisibleSelection::rootEditableElement(a3);
  if (v6)
  {
    v7 = v6;
    *(_DWORD *)(v6 + 24) += 2;
    v8 = WebCore::Node::rootEditableElement(a2);
    v9 = v7 == v8;
    if (v7 == v8)
    {
      v10 = 1256;
      if (*((_BYTE *)this + 1258))
        v10 = 1257;
      v3 = *((_BYTE *)this + v10) == 0;
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    v9 = 0;
  }
  return v3 | !v9;
}

void sub_1973DB698(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

_BYTE *WebKit::WebPage::setShouldRevealCurrentSelectionAfterInsertion(_BYTE *this, int a2)
{
  _BYTE *v2;

  if (this[1294] != a2)
  {
    v2 = this;
    this[1294] = a2;
    if (a2)
    {
      WebCore::Page::revealCurrentSelection(*((WebCore::Page **)this + 6));
      return WebKit::WebPage::scheduleFullEditorStateUpdate(v2);
    }
  }
  return this;
}

WTF *WebKit::WebPage::textInputContextsInRect(uint64_t a1, uint64_t *a2, float a3, float a4, float a5, float a6)
{
  WTF *result;
  void *v9;
  WTF *v10;
  unint64_t v11;
  WTF *v12;
  WebCore::Element *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  WTF *v24;
  uint64_t v25;
  _DWORD v26[4];
  __int128 v27;
  _QWORD v28[2];
  _OWORD v29[3];
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(float *)v26 = a3;
  *(float *)&v26[1] = a4;
  *(float *)&v26[2] = a5;
  *(float *)&v26[3] = a6;
  result = (WTF *)WebCore::Page::editableElementsInRect(*(WebCore::Page **)(a1 + 48), (const WebCore::FloatRect *)v26);
  v24 = 0;
  v25 = 0;
  if (v23)
  {
    if (v23 >= 0x3333334)
    {
      __break(0xC471u);
      return result;
    }
    v10 = (WTF *)WTF::fastMalloc((WTF *)(80 * v23));
    LODWORD(v25) = 80 * v23 / 0x50;
    v24 = v10;
    v11 = 0;
    v12 = v10;
    do
    {
      v13 = *(WebCore::Element **)(v22 + 8 * v11);
      v14 = *(_QWORD *)(*((_QWORD *)v13 + 5) + 8);
      v15 = *(_QWORD *)(a1 + 40);
      *(_OWORD *)((char *)v30 + 8) = *(_OWORD *)(v14 + 416);
      *((_QWORD *)&v30[1] + 1) = *(_QWORD *)(v14 + 432);
      v16 = WebCore::Element::identifier(v13);
      v28[0] = WebCore::Element::boundingBoxInRootViewCoordinates(*(WebCore::Element **)(v22 + 8 * v11));
      v28[1] = v17;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v29, (const WebCore::IntRect *)v28);
      v27 = v29[0];
      v19 = v30[1];
      v29[1] = v30[0];
      v18 = v30[0];
      v29[2] = v30[1];
      *(_OWORD *)v12 = v29[0];
      *((_QWORD *)v12 + 2) = v15;
      *(_OWORD *)((char *)v12 + 24) = v18;
      *(_OWORD *)((char *)v12 + 40) = v19;
      *((_QWORD *)v12 + 8) = v16;
      ++v11;
      v12 = (WTF *)((char *)v12 + 80);
    }
    while (v11 < v23);
    HIDWORD(v25) = v11;
  }
  WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v9);
  v20 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, &v24);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  WebCore::Page::setEditableRegionEnabled(*(WebCore::Page **)(a1 + 48));
  result = v24;
  if (v24)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    return (WTF *)WTF::fastFree(result, v21);
  }
  return result;
}

void sub_1973DB8E0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

WebCore::Node *WebKit::WebPage::focusTextInputContextAndPlaceCaret(uint64_t a1, const ElementContext *a2, const WebCore::IntPoint *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WebCore::Node *v12;
  char v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *result;
  uint64_t v19;
  WebCore::Node *v20;
  _QWORD v21[5];
  WebCore::Node *v22;
  _BYTE v23[8];
  WebCore::Node *v24;
  char v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WebKit::WebPage::elementForContext(a1, a2, &v24);
  if (v24)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v24 + 5) + 8) + 528);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(_QWORD *)(v8 + 296);
    if (v11)
      *(_DWORD *)(v11 + 24) += 2;
    WebCore::Document::updateLayout();
    if (v11)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    v12 = v24;
    if ((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    if ((*(_BYTE *)((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1973DBCD8);
    }
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v24 + 552))(v24) & 1) != 0)
    {
      v25 = 0;
      v26 = 0;
      WebCore::UserGestureIndicator::UserGestureIndicator();
      v13 = *(_BYTE *)(a1 + 912);
      *(_BYTE *)(a1 + 912) = 1;
      WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
      WORD2(v22) = 0;
      LODWORD(v22) = 0;
      WebCore::FocusController::setFocusedElement();
      v14 = (_DWORD *)v21[0];
      v21[0] = 0;
      if (v14)
      {
        if (!*v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1973DBCF8);
        }
        --*v14;
      }
      if (*(WebCore::Node **)(a1 + 920) == v12 && (*((_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*((_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1973DBD28);
        }
        v21[0] = WebCore::ScrollView::rootViewToContents(*(WebCore::ScrollView **)(v8 + 288), a3);
        WebCore::closestEditablePositionInElementForAbsolutePoint();
        if (v22)
        {
          WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)v21);
          WebCore::FrameSelection::setSelectedRange();
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21);
          v19 = *a4;
          *a4 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, 1);
        }
        else
        {
          v19 = *a4;
          *a4 = 0;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v20 = v22;
        v22 = 0;
        if (v20)
        {
          if (*((_DWORD *)v20 + 6) == 2)
          {
            if ((*((_WORD *)v20 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v20);
          }
          else
          {
            *((_DWORD *)v20 + 6) -= 2;
          }
        }
      }
      else
      {
        v15 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      *(_BYTE *)(a1 + 912) = v13;
      MEMORY[0x19AEB0CA8](v23);
    }
    else
    {
LABEL_19:
      v16 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
    result = v24;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(v24);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
  }
  else
  {
    v17 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
    return (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

void sub_1973DBD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, uint64_t a16, char a17, WebCore::Node *a18)
{
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a14)
  {
    if (*((_DWORD *)a14 + 6) == 2)
    {
      if ((*((_WORD *)a14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a14);
    }
    else
    {
      *((_DWORD *)a14 + 6) -= 2;
    }
  }
  *(_BYTE *)(v19 + 912) = v21;
  MEMORY[0x19AEB0CA8](&a17);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v18);
  if (a18)
  {
    if (*((_DWORD *)a18 + 6) == 2)
    {
      if ((*((_WORD *)a18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a18);
    }
    else
    {
      *((_DWORD *)a18 + 6) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::didFinishLoadForQuickLookDocumentInMainFrame(WebKit::WebPage *this, const WebCore::FragmentedSharedBuffer *a2)
{
  unsigned int *result;
  unsigned int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  unsigned int *v13;
  _QWORD v14[3];
  char v15;
  WebCore::ShareableResource *v16;
  unsigned int *v17;
  IPC::Encoder *v18;

  result = (unsigned int *)WebCore::SharedMemory::copyBuffer();
  if (v17)
  {
    v14[0] = v17;
    v17 = 0;
    WebCore::ShareableResource::create();
    v4 = (unsigned int *)v14[0];
    v14[0] = 0;
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v4);
    if (v16)
    {
      WebCore::ShareableResource::createHandle(v16);
      if (v15)
      {
        v6 = *((_QWORD *)this + 4);
        v5 = (char *)this + 32;
        v7 = (*(uint64_t (**)(char *))(v6 + 56))(v5);
        v8 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v8 = 1888;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)(v8 + 528) = v8 + 16;
        *(_QWORD *)(v8 + 536) = v8 + 16;
        *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v8 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
        v18 = (IPC::Encoder *)v8;
        IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::encode((IPC::Encoder *)v8, (unint64_t)v14);
        (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v18, 0);
        v10 = v18;
        v18 = 0;
        if (v10)
        {
          IPC::Encoder::~Encoder(v10, v9);
          WTF::fastFree(v11, v12);
        }
        if (v15)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v14);
      }
      v13 = (unsigned int *)v16;
      v16 = 0;
      if (v13)
        WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(v13);
    }
    result = v17;
    v17 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

void sub_1973DBFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned int *a14, unsigned int *a15)
{
  if (a14)
    WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(a14);
  if (a15)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(a15);
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::animationDidFinishForElement(WebCore::Page **this, const WebCore::Element *a2)
{
  unsigned int *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _BYTE *v8;
  uint64_t v9;
  WebCore::Position *v10;
  uint64_t v11;
  WebCore::Position *v12;
  const WebCore::Node *v13;
  WebCore::Node *v14;
  const WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::FocusController *v17;

  WebCore::Page::checkedFocusController(this[6]);
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v17);
  v5 = (uint64_t)result;
  if (result)
  {
    v6 = result + 2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  if (v17)
  {
    if (!*(_DWORD *)v17)
    {
      __break(0xC471u);
      JUMPOUT(0x1973DC218);
    }
    --*(_DWORD *)v17;
  }
  if (result)
  {
    v8 = *(_BYTE **)(*((_QWORD *)result + 37) + 3064);
    if (v8[153])
    {
      v10 = (WebCore::Position *)(v8 + 120);
      v9 = *((_QWORD *)v8 + 15);
      if (!v9 || (*(_BYTE *)(v9 + 22) & 8) != 0)
      {
        v12 = (WebCore::Position *)(v8 + 136);
        v11 = *((_QWORD *)v8 + 17);
        if ((!v11 || (*(_BYTE *)(v11 + 22) & 8) != 0)
          && (v8[153] != 1
           || WebCore::VisibleSelection::hasEditableStyle((WebCore::VisibleSelection *)(v8 + 56))))
        {
          v13 = (const WebCore::Node *)WebCore::Position::containerNode(v10);
          v14 = v13;
          if (v13)
            *((_DWORD *)v13 + 6) += 2;
          if (WebCore::Node::containsIncludingShadowDOM(a2, v13))
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064) + 24) = 1;
            WebKit::WebPage::scheduleFullEditorStateUpdate(this);
          }
          else
          {
            v15 = (const WebCore::Node *)WebCore::Position::containerNode(v12);
            v16 = v15;
            if (v15)
              *((_DWORD *)v15 + 6) += 2;
            if (v14 != v15 && WebCore::Node::containsIncludingShadowDOM(a2, v15))
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064) + 24) = 1;
              WebKit::WebPage::scheduleFullEditorStateUpdate(this);
            }
            if (v16)
            {
              if (*((_DWORD *)v16 + 6) == 2)
              {
                if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v16);
              }
              else
              {
                *((_DWORD *)v16 + 6) -= 2;
              }
            }
          }
          if (v14)
          {
            if (*((_DWORD *)v14 + 6) == 2)
            {
              if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v14);
            }
            else
            {
              *((_DWORD *)v14 + 6) -= 2;
            }
          }
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  return result;
}

void sub_1973DC244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::type(WebKit::PlatformCALayerRemoteCustom *this)
{
  return 2;
}

void WebKit::PlatformCALayerRemoteHost::~PlatformCALayerRemoteHost(WebKit::PlatformCALayerRemoteHost *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::PlatformCALayerRemoteHost::hostingContextIdentifier(WebKit::PlatformCALayerRemoteHost *this)
{
  return *((_QWORD *)this + 105);
}

uint64_t WebKit::PlatformCALayerRemoteHost::type(WebKit::PlatformCALayerRemoteHost *this)
{
  return 3;
}

uint64_t WebKit::PlatformCALayerRemoteModelHosting::type(WebKit::PlatformCALayerRemoteModelHosting *this)
{
  return 4;
}

uint64_t WebCore::AsyncScrollingCoordinator::isAsyncScrollingCoordinator(WebCore::AsyncScrollingCoordinator *this)
{
  return 1;
}

uint64_t WebCore::AsyncScrollingCoordinator::hasVisibleSlowRepaintViewportConstrainedObjects()
{
  return 0;
}

void WebKit::FindIndicatorOverlayClientIOS::~FindIndicatorOverlayClientIOS(WebKit::FindIndicatorOverlayClientIOS *this)
{
  _DWORD *v2;

  *(_QWORD *)this = off_1E34D8C60;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v2);
}

void WebKit::FindIndicatorOverlayClientIOS::~FindIndicatorOverlayClientIOS(WebKit::FindIndicatorOverlayClientIOS *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E34D8C60;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v3);
  WTF::fastFree(this, a2);
}

uint64_t WebKit::FindIndicatorOverlayClientIOS::mouseEvent()
{
  return 0;
}

uint64_t WebCore::PageOverlayClient::copyAccessibilityAttributeStringValueForPoint()
{
  return 0;
}

uint64_t WebCore::PageOverlayClient::copyAccessibilityAttributeBoolValueForPoint()
{
  return 0;
}

void WebCore::PageOverlayClient::copyAccessibilityAttributeNames(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

WebKit::RemoteLayerBackingStoreCollection *std::make_unique[abi:sn180100]<WebKit::RemoteLayerBackingStoreCollection,WebKit::RemoteLayerTreeContext &>(WebKit::RemoteLayerBackingStoreCollection **a1, WebKit::RemoteLayerTreeContext *a2)
{
  WebKit::RemoteLayerBackingStoreCollection *v4;
  WebKit::RemoteLayerBackingStoreCollection *result;

  v4 = (WebKit::RemoteLayerBackingStoreCollection *)WTF::fastMalloc((WTF *)0x98);
  result = WebKit::RemoteLayerBackingStoreCollection::RemoteLayerBackingStoreCollection(v4, a2);
  *a1 = v4;
  return result;
}

void sub_1973DC444(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = *(unsigned int **)(a1 + 8 * i);
      if (v5 != (unsigned int *)-1)
      {
        *(_QWORD *)(a1 + 8 * i) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 24 * i + 8) != -1)
      {
        v5 = a1 + 24 * i;
        v6 = *(unsigned int **)(v5 + 16);
        *(_QWORD *)(v5 + 16) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 72;
    do
    {
      if (*(_QWORD *)(v4 - 64) != -1)
      {
        v5 = *(unsigned int *)(v4 + 16);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v5])(&v7, v4);
        *(_DWORD *)(v4 + 16) = -1;
      }
      v4 += 96;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int v25;
  __int16 v26;
  char v27;

  if (!*a2 || (v3 = *(unsigned int *)(*a2 - 12), !(_DWORD)v3))
  {
    v11 = 0;
    goto LABEL_30;
  }
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_9;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_9:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_10:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v12 = 8;
  else
    v12 = v7;
  v13 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v12 + 16));
  v11 = v13 + 4;
  v13[2] = v12 - 1;
  v13[3] = v12;
  *v13 = 0;
  v13[1] = v3;
  v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::begin(a2);
  v15 = (uint64_t *)v14;
  v16 = a2;
  if (*a2)
    v17 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
  else
    v17 = 0;
  if (v17 != v14)
  {
    do
    {
      v18 = v13[2];
      v25 = -1640531527;
      v26 = 0;
      v27 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v25, v15);
      v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
      v20 = 0;
      do
      {
        v21 = v19 & v18;
        v19 = ++v20 + v21;
      }
      while (*(_OWORD *)&v11[4 * v21] != 0);
      *(_OWORD *)&v11[4 * v21] = *(_OWORD *)v15;
      while (1)
      {
        v15 += 2;
        if (v15 == v16)
          break;
        if (*(_OWORD *)v15 != 0 && v15[1] != -1)
          goto LABEL_29;
      }
      v15 = v16;
LABEL_29:
      ;
    }
    while (v15 != (uint64_t *)v17);
  }
LABEL_30:
  v23 = *a1;
  *a1 = (uint64_t)v11;
  if (v23)
    WTF::fastFree((WTF *)(v23 - 16), a2);
  return a1;
}

unsigned int *WebCore::GraphicsContextState::setFillColor(WebCore::GraphicsContextState *this, const WebCore::Color *a2)
{
  unsigned int *result;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  WebCore::SourceBrush::SourceBrush();
  result = (unsigned int *)WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>((uint64_t)this, 1, 0, &v10);
  if (v12 != -1)
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1E34D8CE0[v12])(&v7, &v11);
  v12 = -1;
  if ((v10 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  if (v9 != -1)
    return (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1E34D8CE0[v9])(&v7, &v8);
  return result;
}

void sub_1973DC8BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  v28 = *(unsigned int *)(v26 + 80);
  if ((_DWORD)v28 != -1)
    ((void (*)(char *, uint64_t *))off_1E34D8CE0[v28])(&a13, &a26);
  *(_DWORD *)(v26 + 80) = -1;
  if ((a24 & 0x8000000000000) != 0)
  {
    v29 = (unsigned int *)(a24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, a2);
    }
  }
  if (a23 != -1)
    ((void (*)(char *, uint64_t *))off_1E34D8CE0[a23])(&a13, &a15);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>(uint64_t a1, int a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t result;

  v7 = a1 + a3;
  result = WebCore::operator==((unint64_t *)(a1 + a3), a4);
  if ((result & 1) == 0)
  {
    WebCore::Color::operator=();
    result = std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,(std::__variant_detail::_Trait)1>>(v7 + 16, (uint64_t)(a4 + 2));
    *(_DWORD *)(a1 + 176) |= a2;
  }
  return result;
}

uint64_t WebCore::operator==(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  int v5;
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;

  v2 = *a1;
  v3 = *a2;
  if ((*a1 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0)
      return 0;
    v13 = 0;
    v14 = 0;
    v19 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v18 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    do
    {
      if (*((float *)&v19 + v14) != *((float *)&v18 + v14))
        break;
      v13 = v14++ > 2;
    }
    while (v14 != 4);
    if (!v13 || HIBYTE(v2) != HIBYTE(v3) || BYTE6(v2) != BYTE6(v3))
      return 0;
  }
  else
  {
    v4 = v2 == v3 && (v3 & 0x8000000000000) == 0;
    if (!v4)
      return 0;
  }
  v5 = *((_DWORD *)a1 + 20);
  v6 = *((_DWORD *)a2 + 20);
  v7 = v6 == v5;
  if (v6 == -1)
    v7 = 0;
  if (v5 == -1)
    v7 = v6 == -1;
  if (!v7)
    return 0;
  if (v5 == 1)
    v8 = (uint64_t)(a1 + 2);
  else
    v8 = 0;
  if (v5 == 1)
  {
    if (v6 == 1)
    {
      v9 = 0;
      do
      {
        v10 = *(double *)&a1[v9 + 4];
        v11 = *(double *)&a2[v9 + 4];
        if (v10 != v11)
          break;
        v4 = v9++ == 5;
      }
      while (!v4);
      if (v10 == v11)
      {
        *(_QWORD *)&v19 = a2 + 2;
        *(_QWORD *)&v18 = a2 + 2;
        return WTF::switchOn<std::variant<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>(v8, &v19, (uint64_t *)&v18);
      }
      return 0;
    }
  }
  else
  {
    if (v5 != 2)
      return 1;
    if (v6 == 2)
      return a1[2] == a2[2];
  }
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::switchOn<std::variant<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>(v15, v16, v17);
}

uint64_t WTF::switchOn<std::variant<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v6;
  _QWORD *v7;
  _QWORD v8[2];
  _QWORD *v9;

  v3 = *a3;
  v8[0] = *a2;
  v8[1] = v3;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == -1)
  {
    v6 = (uint64_t **)std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(v6, v7);
  }
  else
  {
    v9 = v8;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E34D8CD0[v4])(&v9, a1);
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t **a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = **a1;
  return v2 && !*(_DWORD *)(v2 + 8) && *a2 == *(_QWORD *)v2;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  return v2 && *(_DWORD *)(v2 + 8) == 1 && *(_QWORD *)v2 == *a2;
}

uint64_t *std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  if (*((unsigned __int8 *)result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*((_BYTE *)result + 32))
    {
      v4 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v5 = *result;
      *result = v4;
      v10 = v5;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
      *((_DWORD *)v3 + 2) = *(_DWORD *)(a2 + 8);
      v6 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      v7 = v3[2];
      v3[2] = v6;
      v10 = v7;
      result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
      *((_DWORD *)v3 + 6) = *(_DWORD *)(a2 + 24);
    }
  }
  else if (*((_BYTE *)result + 32))
  {
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100](result);
  }
  else
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *result = v8;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    result[2] = v9;
    *((_DWORD *)result + 6) = *(_DWORD *)(a2 + 24);
    *((_BYTE *)result + 32) = 1;
  }
  return result;
}

uint64_t *std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100](uint64_t *result)
{
  uint64_t *v1;

  if (*((_BYTE *)result + 32))
  {
    v1 = result;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(result + 2);
    result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v1);
    *((_BYTE *)v1 + 32) = 0;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy17InterpretKeyEventEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t WebKit::FocusedElementInformation::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 48);
  v4 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 192), (WTF::StringImpl *)(a2 + 192));
  v11 = *(unsigned int *)(a1 + 212);
  if ((_DWORD)v11)
    WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)(a1 + 200), (WTF::StringImpl *)(*(_QWORD *)(a1 + 200) + 16 * v11));
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 200, (_DWORD *)(a2 + 200));
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 224), (WTF::StringImpl *)(a2 + 224));
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 240), (WTF::StringImpl *)(a2 + 240));
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  WTF::URL::operator=(a1 + 256, (WTF::StringImpl *)(a2 + 256));
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 304), (WTF::StringImpl *)(a2 + 304));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 312), (WTF::StringImpl *)(a2 + 312));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 320), (WTF::StringImpl *)(a2 + 320));
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  WebCore::Color::operator=();
  v12 = *(unsigned int *)(a1 + 356);
  if ((_DWORD)v12)
    WTF::VectorDestructor<true,WebCore::Color>::destruct(*(_QWORD **)(a1 + 344), (_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * v12));
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 344, (_DWORD *)(a2 + 344));
  v13 = *(_OWORD *)(a2 + 360);
  v14 = *(_OWORD *)(a2 + 376);
  v15 = *(_OWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v14;
  *(_OWORD *)(a1 + 392) = v15;
  *(_OWORD *)(a1 + 360) = v13;
  return a1;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)(v5 + 24) == 2)
          {
            if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v5);
          }
          else
          {
            *(_DWORD *)(v5 + 24) -= 2;
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t *std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SimpleRange,false> const&>(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  if (*((unsigned __int8 *)result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*((_BYTE *)result + 32))
    {
      v4 = *(_QWORD *)a2;
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
      v5 = *result;
      *result = v4;
      v10 = v5;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
      *((_DWORD *)v3 + 2) = *(_DWORD *)(a2 + 8);
      v6 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(v6 + 24) += 2;
      v7 = v3[2];
      v3[2] = v6;
      v10 = v7;
      result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
      *((_DWORD *)v3 + 6) = *(_DWORD *)(a2 + 24);
    }
  }
  else if (*((_BYTE *)result + 32))
  {
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100](result);
  }
  else
  {
    v8 = *(_QWORD *)a2;
    *(_DWORD *)(v8 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
    *result = v8;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(v9 + 24) += 2;
    result[2] = v9;
    *((_DWORD *)result + 6) = *(_DWORD *)(a2 + 24);
    *((_BYTE *)result + 32) = 1;
  }
  return result;
}

float WebCore::BorderData::borderLeftWidth(WebCore::BorderData *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 20) & 0xE) == 0)
    return 0.0;
  v1 = *((_QWORD *)this + 12);
  if (!*(_BYTE *)(v1 + 5) || *(_BYTE *)(v1 + 76) != 4)
    return *((float *)this + 4);
  if (*(_BYTE *)(v1 + 78))
    return *(float *)(v1 + 72);
  return (float)*(int *)(v1 + 72);
}

float WebCore::BorderData::borderTopWidth(WebCore::BorderData *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 68) & 0xE) == 0)
    return 0.0;
  v1 = *((_QWORD *)this + 12);
  if (!*(_BYTE *)(v1 + 5) || *(_BYTE *)(v1 + 52) != 4)
    return *((float *)this + 16);
  if (*(_BYTE *)(v1 + 54))
    return *(float *)(v1 + 48);
  return (float)*(int *)(v1 + 48);
}

uint64_t WebKit::insideImageOverlay(WebCore::Node **this, const WebCore::VisiblePosition *a2)
{
  WebCore::Node *v2;
  uint64_t v3;
  const Node *v4;
  uint64_t v5;
  WebCore::Node *v6;
  uint64_t isInsideOverlay;
  WebCore::Node *v9;
  int v10;
  char v11;

  v2 = *this;
  if (*this)
    *((_DWORD *)v2 + 6) += 2;
  v9 = v2;
  v10 = *((_DWORD *)this + 2);
  v11 = *((_BYTE *)this + 12);
  v3 = WebCore::Position::containerNode((WebCore::Position *)&v9);
  v5 = v3;
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  if (!v5)
    return 0;
  isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)v5, v4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return isInsideOverlay;
}

void sub_1973DD154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9)
{
  uint64_t v9;

  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != -1)
        a1 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1);
      ++a1;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t std::unique_ptr<WebCore::IgnoreSelectionChangeForScope>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = (WTF *)MEMORY[0x19AEB2B98]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebCore::Position::deprecatedEditingOffset(WebCore::Position *this)
{
  int v1;
  BOOL v2;

  if ((*((_BYTE *)this + 12) & 8) == 0 && ((v1 = *((_BYTE *)this + 12) & 7, v1 != 2) ? (v2 = v1 == 4) : (v2 = 1), v2))
    return WebCore::Position::offsetForPositionAfterAnchor(this);
  else
    return *((unsigned int *)this + 2);
}

WTF::StringImpl *WebKit::WebPage::applyLinkDecorationFiltering(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6[6];

  WebKit::WebPage::applyLinkDecorationFilteringWithResult(a2, a3, 0, (uint64_t)v6);
  WTF::URL::URL(a1, (uint64_t *)v6);
  result = v6[0];
  v6[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1973DD2B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::linkIndicatorPositionInformation(WebKit *this, WebKit::WebPage *a2, WebCore::Element *a3, const WebKit::InteractionInformationRequest *a4, WebKit::InteractionInformationAtPosition *a5)
{
  void *v6;
  __int128 v7;
  WTF *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  void *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  WTF *v20;
  _DWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _OWORD v25[3];
  WTF *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (*((_BYTE *)a3 + 9))
  {
    WebCore::makeRangeSelectingNodeContents(a2, (Node *)a2);
    WebCore::TextIndicator::createWithRange();
    if (v34)
    {
      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v25, (const TextIndicatorData *)(v34 + 8));
      v7 = v25[1];
      *(_OWORD *)((char *)a4 + 280) = v25[0];
      *(_OWORD *)((char *)a4 + 296) = v7;
      *(_OWORD *)((char *)a4 + 312) = v25[2];
      v8 = (WTF *)*((_QWORD *)a4 + 41);
      if (v8)
      {
        *((_QWORD *)a4 + 41) = 0;
        *((_DWORD *)a4 + 84) = 0;
        WTF::fastFree(v8, v6);
      }
      *((_QWORD *)a4 + 41) = v26;
      v9 = v27;
      v26 = 0;
      v27 = 0;
      *((_QWORD *)a4 + 42) = v9;
      *((_DWORD *)a4 + 86) = v28;
      v10 = v29;
      v29 = 0;
      v11 = (_DWORD *)*((_QWORD *)a4 + 44);
      *((_QWORD *)a4 + 44) = v10;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
      v12 = v30;
      v30 = 0;
      v13 = (_DWORD *)*((_QWORD *)a4 + 45);
      *((_QWORD *)a4 + 45) = v12;
      if (v13)
      {
        if (v13[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        else
          --v13[2];
      }
      v14 = v31;
      v31 = 0;
      v15 = (_DWORD *)*((_QWORD *)a4 + 46);
      *((_QWORD *)a4 + 46) = v14;
      if (v15)
      {
        if (v15[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[2];
      }
      WebCore::Color::operator=();
      *((_DWORD *)a4 + 96) = v33;
      if ((v32 & 0x8000000000000) != 0)
      {
        v22 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v16);
        }
      }
      v17 = v31;
      v31 = 0;
      if (v17)
      {
        if (v17[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        else
          --v17[2];
      }
      v18 = v30;
      v30 = 0;
      if (v18)
      {
        if (v18[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
        else
          --v18[2];
      }
      v19 = v29;
      v29 = 0;
      if (v19)
      {
        if (v19[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
        else
          --v19[2];
      }
      v20 = v26;
      if (v26)
      {
        v26 = 0;
        LODWORD(v27) = 0;
        WTF::fastFree(v20, v16);
      }
      v21 = (_DWORD *)v34;
      v34 = 0;
      if (v21)
        WTF::RefCounted<WebCore::TextIndicator>::deref(v21);
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v36);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v35);
  }
}

void sub_1973DD560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  _DWORD *v24;

  v24 = *(_DWORD **)(v22 - 72);
  *(_QWORD *)(v22 - 72) = 0;
  if (v24)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v24);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v22 - 48));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v22 - 64));
  _Unwind_Resume(a1);
}

void WebKit::imageRendererAndImage(WebKit *this, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  char v7;

  v3 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_10;
  if ((*(_BYTE *)((a2 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if ((((*(_BYTE *)((a2 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((a2 & 0xFFFFFFFFFFFFLL) + 0x35)) != 0)
    {
      if (WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFLL)
                                                                                                  + 0xE0)
                                                                                      + 24)))
      {
        if ((*(_WORD *)(WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(_QWORD *)(v3 + 224) + 24))
                                                      + 557) >> 5)
           - 3 > 1)
        {
          WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(_QWORD *)(v3 + 224) + 24));
          v4 = WebCore::CachedImage::imageForRenderer();
          if (v4)
          {
            v5 = v4;
            if ((*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 168))(v4, 0) > 1.0)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 168))(v5, 0);
              if (v6 > 1.0)
              {
                *(_QWORD *)this = v3;
                *((_QWORD *)this + 1) = v5;
                v7 = 1;
LABEL_11:
                *((_BYTE *)this + 16) = v7;
                return;
              }
            }
          }
        }
      }
    }
LABEL_10:
    v7 = 0;
    *(_BYTE *)this = 0;
    goto LABEL_11;
  }
  __break(0xC471u);
}

uint64_t WebKit::boundsPositionInformation(WebKit *this, WebCore::RenderObject *a2, InteractionInformationAtPosition *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  const FloatRect *v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD v19[4];

  if ((*((_BYTE *)this + 52) & 7) != 3 || (*((_BYTE *)this + 53) & 1) == 0)
  {
    result = WebCore::RenderObject::absoluteBoundingBoxRect(this, 1, 0);
    *((_QWORD *)a2 + 22) = result;
    *((_QWORD *)a2 + 23) = v17;
  }
  else
  {
    ++*((_DWORD *)this + 4);
    WebCore::RenderBox::absoluteContentQuad(this);
    WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)&v18);
    v19[0] = v6;
    v19[1] = v7;
    v19[2] = v8;
    v19[3] = v9;
    result = WebCore::enclosingIntRect((WebCore *)v19, v10);
    *((_QWORD *)a2 + 22) = result;
    *((_QWORD *)a2 + 23) = v12;
    v13 = *((_DWORD *)this + 4);
    if (!v13)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    *((_DWORD *)this + 4) = v13 - 1;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (*(_QWORD *)(*(_QWORD *)(v15 + 128) + 8) != v15)
    {
      result = WebCore::ScrollView::contentsToRootView(*(WebCore::ScrollView **)(v15 + 288), (WebCore::RenderObject *)((char *)a2 + 176));
      *((_QWORD *)a2 + 22) = result;
      *((_QWORD *)a2 + 23) = v16;
    }
  }
  return result;
}

void sub_1973DD87C(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 16);
  if (v2)
  {
    *(_DWORD *)(v1 + 16) = v2 - 1;
    _Unwind_Resume(a1);
  }
  __break(0xC471u);
}

uint64_t WebKit::isAssistableElement(WebKit *this, WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t isTimeField;

  if ((*((_WORD *)this + 14) & 0x10) == 0)
    return WebCore::Node::isContentEditable(this);
  v3 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  if (v3 == *(_QWORD *)(*MEMORY[0x1E0DD6218] + 24) || v3 == *(_QWORD *)(*MEMORY[0x1E0DD5D90] + 24))
    return 1;
  if (v3 == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    *((_DWORD *)this + 6) += 2;
    if ((WebCore::HTMLInputElement::isColorControl(this) & 1) != 0
      || (WebCore::HTMLInputElement::isTextField(this) & 1) != 0
      || (WebCore::HTMLInputElement::isDateField(this) & 1) != 0
      || (WebCore::HTMLInputElement::isDateTimeLocalField(this) & 1) != 0
      || (WebCore::HTMLInputElement::isMonthField(this) & 1) != 0)
    {
      isTimeField = 1;
    }
    else
    {
      isTimeField = WebCore::HTMLInputElement::isTimeField(this);
    }
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
    return isTimeField;
  }
  if (v3 == *(_QWORD *)(*MEMORY[0x1E0DD61C0] + 24))
    return 0;
  return WebCore::Node::isContentEditable(this);
}

void sub_1973DD9E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>(WTF::MachSendRight *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*((_BYTE *)this + 16))
    {
      WTF::MachSendRight::operator=();
      *((_QWORD *)this + 1) = *(_QWORD *)(a2 + 8);
    }
  }
  else if (*((_BYTE *)this + 16))
  {
    WTF::MachSendRight::~MachSendRight(this);
    *((_BYTE *)this + 16) = 0;
  }
  else
  {
    WTF::MachSendRight::MachSendRight();
    *((_QWORD *)this + 1) = *(_QWORD *)(a2 + 8);
    *((_BYTE *)this + 16) = 1;
  }
}

uint64_t *std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = a1[2];
    a1[2] = 0;
    if (v2)
    {
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
    v3 = a1[1];
    a1[1] = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    v4 = *a1;
    *a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  return a1;
}

_QWORD *WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result = *a1;
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[v3];
  if (!*((_DWORD *)result - 3))
    return &result[v3];
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v5 -= 8;
      if (!v5)
        return v4;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PlatformCALayerRemoteCustom::clone(WebCore::PlatformCALayerClient *)::$_0,void>::call(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "setPlayer:", objc_msgSend(*(id *)(a1 + 16), "player"));
}

uint64_t WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct(*(uint64_t **)a1, (uint64_t *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(uint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t *WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;

  if (result != a2)
  {
    v3 = result;
    do
    {
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v3 + 2);
      result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v3);
      v3 += 4;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::begin(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (!*a1)
    return 0;
  if (*(_DWORD *)(v1 - 12))
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::makeIterator(a1, v1);
  return v1 + 24 * *(unsigned int *)(v1 - 4);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::makeIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 4);
  else
    v4 = 0;
  v5 = v3 + 24 * v4;
  if (v5 != a2)
  {
    while (*(_OWORD *)a2 == 0 || *(_QWORD *)(a2 + 8) == -1)
    {
      a2 += 24;
      if (a2 == v5)
        return v3 + 24 * v4;
    }
  }
  return a2;
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v4, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  _OWORD *result;
  char v40;
  char v41;
  char v42;
  unsigned int v43;
  __int16 v44;
  char v45;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((96 * a2) | 0x10));
  if (a2)
  {
    v9 = a2;
    v10 = v7 + 56;
    do
    {
      *(_BYTE *)v10 = 0;
      *(_BYTE *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 48) = 0;
      *(_OWORD *)(v10 - 40) = 0uLL;
      *(_OWORD *)(v10 - 24) = 0uLL;
      *(_BYTE *)(v10 - 8) = 0;
      v10 += 96;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = v4 + 96 * v11;
      if (*(_QWORD *)(v14 + 8) != -1)
      {
        if (*(_OWORD *)v14 == 0)
        {
          v33 = v4 + 96 * v11;
          v36 = *(_DWORD *)(v33 + 88);
          v35 = (_DWORD *)(v33 + 88);
          v34 = v36;
          if (v36 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v34])(&v40, v4 + 96 * v11 + 72);
          *v35 = -1;
        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v43 = -1640531527;
          v44 = 0;
          v45 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v43, (_QWORD *)(v4 + 96 * v11));
          v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v43);
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v20 = (_OWORD *)(v15 + 96 * (v17 & v16));
            v17 = ++v18 + (v17 & v16);
          }
          while (*v20 != 0);
          v21 = v15 + 96 * v19;
          v24 = *(_DWORD *)(v21 + 88);
          v23 = (_DWORD *)(v21 + 88);
          v22 = v24;
          if (v24 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v22])(&v41, v15 + 96 * v19 + 72);
          *v23 = -1;
          *v20 = *(_OWORD *)v14;
          v25 = v15 + 96 * v19;
          v26 = v4 + 96 * v11;
          v27 = *(_OWORD *)(v26 + 16);
          v28 = *(_OWORD *)(v26 + 32);
          v29 = *(_OWORD *)(v26 + 48);
          *(_BYTE *)(v25 + 64) = *(_BYTE *)(v26 + 64);
          *(_OWORD *)(v25 + 32) = v28;
          *(_OWORD *)(v25 + 48) = v29;
          *(_OWORD *)(v25 + 16) = v27;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor(v25 + 72, v26 + 72);
          v32 = *(_DWORD *)(v26 + 88);
          v31 = (_DWORD *)(v26 + 88);
          v30 = v32;
          if (v32 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v30])(&v42, v4 + 96 * v11 + 72);
          *v31 = -1;
          if (v14 == a3)
            v12 = v20;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::hash(_QWORD *a1)
{
  unsigned int v2;
  __int16 v3;
  char v4;

  v2 = -1640531527;
  v3 = 0;
  v4 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v2, a1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  _OWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _OWORD *result;
  unsigned int v39;
  __int16 v40;
  char v41;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 24 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = v6;
    do
    {
      v15 = v5 + 24 * v12;
      if (*(_QWORD *)(v15 + 8) != -1)
      {
        if (*(_OWORD *)v15 == 0)
        {
          v16 = v5 + 24 * v12;
          v17 = *(unsigned int **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v9);
            }
          }
        }
        else
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v39 = -1640531527;
          v40 = 0;
          v41 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v39, (_QWORD *)(v5 + 24 * v12));
          v22 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v39);
          v23 = 0;
          do
          {
            v24 = v22 & v21;
            v25 = (_OWORD *)(v20 + 24 * (v22 & v21));
            v22 = ++v23 + (v22 & v21);
          }
          while (*v25 != 0);
          v26 = v20 + 24 * v24;
          v29 = *(unsigned int **)(v26 + 16);
          v28 = (_QWORD *)(v26 + 16);
          v27 = v29;
          *v28 = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v27);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v27));
            if (!v31)
            {
              atomic_store(1u, v27);
              WTF::fastFree((WTF *)v27, v9);
            }
          }
          *v25 = *(_OWORD *)v15;
          v32 = v5 + 24 * v12;
          v33 = *(_QWORD *)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          *v28 = v33;
          v34 = *(unsigned int **)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v34);
              WTF::fastFree((WTF *)v34, v9);
            }
          }
          if (v15 == a3)
            v13 = v25;
        }
      }
      ++v12;
    }
    while (v12 != v14);
    goto LABEL_28;
  }
  v13 = 0;
  result = 0;
  if (v5)
  {
LABEL_28:
    WTF::fastFree((WTF *)(v5 - 16), v9);
    return v13;
  }
  return result;
}

unsigned int *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  *(_OWORD *)a2 = xmmword_1978CF7D0;
  result = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return (unsigned int *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v15;
  __int16 v16;
  char v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v15 = -1640531527;
  v16 = 0;
  v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v15, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  v7 = a2[1];
  v8 = v6 & v5;
  result = (uint64_t *)(v2 + 24 * (v6 & v5));
  v10 = *result;
  v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    v13 = 1;
    while (v10 | v11)
    {
      v8 = (v8 + v13) & v5;
      result = (uint64_t *)(v2 + 24 * v8);
      v10 = *result;
      v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    return 0;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  unsigned int v15;
  __int16 v16;
  char v17;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v15 = -1640531527;
    v16 = 0;
    v17 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v15, a2);
    v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
    v6 = a2[1];
    v7 = v5 & v4;
    v8 = (uint64_t *)(v3 + 16 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
    {
      return v3 + 16 * v7;
    }
    else
    {
      v12 = 1;
      while (v9 | v10)
      {
        v7 = ((_DWORD)v7 + v12) & v4;
        v13 = (uint64_t *)(v3 + 16 * v7);
        v9 = *v13;
        v10 = v13[1];
        ++v12;
        if (v9 == *a2 && v10 == v6)
          return v3 + 16 * v7;
      }
      return 0;
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::PageOverlay>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEAD168](result - 2);
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::RelayAccessibilityNotification>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  IPC::Encoder *v15;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2004;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, **(const void ***)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v15, a4);
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v12, v13);
  }
  return v10;
}

void sub_1973DE5B8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::InterpretKeyEvent>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  char v12;
  int v13;
  unsigned __int16 v14;
  void *v15;
  uint64_t *v16;
  IPC::Encoder *result;
  WTF *v18;
  void *v19;
  uint64_t *v20;
  int v21;
  IPC::Encoder *v22;
  uint64_t v23;
  char v24;

  v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3673, a3, &v23, (uint64_t *)&v22);
  v11 = v22;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v22 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebKit::EditorState,void>::encode(v11, *(uint64_t **)a2);
  v12 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(v11, 1uLL, 1) = v12;
  IPC::Connection::sendSyncMessage(a1, v23, (uint64_t *)&v22, a4, (uint64_t)&v20, a6);
  v13 = v21;
  if (v21)
  {
    if (v21 == 1)
    {
      *(_BYTE *)a5 = (_BYTE)v20;
LABEL_11:
      *(_DWORD *)(a5 + 16) = v13;
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  v14 = IPC::Decoder::decode<std::tuple<BOOL>>(v20);
  if (v14 >= 0x100u)
  {
    if (!v21)
    {
      v16 = v20;
      v20 = 0;
      *(_QWORD *)a5 = v16;
      *(_BYTE *)(a5 + 8) = v14;
      goto LABEL_11;
    }
LABEL_16:
    result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *(_BYTE *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  v13 = v21;
  if (v21 != -1)
LABEL_12:
    ((void (*)(char *, uint64_t **))off_1E34D8D68[v13])(&v24, &v20);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

void sub_1973DE740(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, IPC::Encoder *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;

  if (a12 != -1)
    ((void (*)(char *, char *))off_1E34D8D68[a12])(&a18, &a10);
  v19 = a13;
  a13 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, a2);
    WTF::fastFree(v20, v21);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::handleSyntheticClick(WebCore::Node &,WebCore::FloatPoint const&,WTF::OptionSet<WebKit::WebEventModifier>,unsigned int)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E34D8D88;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::handleSyntheticClick(WebCore::Node &,WebCore::FloatPoint const&,WTF::OptionSet<WebKit::WebEventModifier>,unsigned int)::$_1,void>::~CallableWrapper(uint64_t *a1)
{
  void *v2;
  uint64_t v3;

  *a1 = (uint64_t)off_1E34D8D88;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPage::handleSyntheticClick(WebCore::Node &,WebCore::FloatPoint const&,WTF::OptionSet<WebKit::WebEventModifier>,unsigned int)::$_1,void>::call(IPC::Encoder *result)
{
  uint64_t v1;
  uint64_t v2;
  IPC::Encoder *v3;
  WTF::WallTime *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v1 = *((_QWORD *)result + 1);
  if (!*(_BYTE *)(v1 + 186))
  {
    v2 = *(_QWORD *)(v1 + 48);
    if (v2)
    {
      v3 = result;
      if (*((_DWORD *)result + 9) == 2)
      {
        v4 = *(WTF::WallTime **)(v2 + 160);
        if (v4)
          v5 = *((_BYTE *)v4 + 144) == 0;
        else
          v5 = 0;
        if (v5)
        {
          WebKit::dispatchSyntheticMouseMove(v4);
          v1 = *((_QWORD *)v3 + 1);
        }
        v7 = *(_QWORD *)(v1 + 32);
        v6 = v1 + 32;
        v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
        v9 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v9 = 1898;
        *(_QWORD *)(v9 + 8) = v8;
        *(_QWORD *)(v9 + 528) = v9 + 16;
        *(_QWORD *)(v9 + 536) = v9 + 16;
        *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v9 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
        v13 = (IPC::Encoder *)v9;
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v13, 0);
        result = v13;
        v13 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder(result, v10);
          return (IPC::Encoder *)WTF::fastFree(v11, v12);
        }
      }
      else
      {
        return WebKit::WebPage::completeSyntheticClick(*((_QWORD *)result + 1), *((_QWORD *)result + 2), (float *)result + 6, *((unsigned __int8 *)result + 32), 1, *((_DWORD *)result + 10));
      }
    }
  }
  return result;
}

void sub_1973DE93C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishContentChangeObserving(WKContentChange)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v8;

  *a1 = off_1E34D8DB0;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 4), a2);
      WTF::fastFree((WTF *)v3, v8);
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishContentChangeObserving(WKContentChange)::$_0,void>::~CallableWrapper(uint64_t *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  void *v9;

  *a1 = (uint64_t)off_1E34D8DB0;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 4), a2);
      WTF::fastFree((WTF *)v3, v9);
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return WTF::fastFree((WTF *)a1, v6);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishContentChangeObserving(WKContentChange)::$_0,void>::call(IPC::Encoder *result)
{
  uint64_t v1;
  uint64_t v2;
  IPC::Encoder *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::WallTime *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v1 = *((_QWORD *)result + 1);
  if (!*(_BYTE *)(v1 + 186))
  {
    v2 = *(_QWORD *)(v1 + 48);
    if (v2)
    {
      v3 = result;
      v4 = *((_QWORD *)result + 3);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *((_QWORD *)result + 2);
          if (v5 == *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8))
          {
            if (*((_DWORD *)result + 8))
            {
              v7 = *(WTF::WallTime **)(v2 + 160);
              if (v7)
                v8 = *((_BYTE *)v7 + 144) == 0;
              else
                v8 = 0;
              if (v8)
              {
                WebKit::dispatchSyntheticMouseMove(v7);
                v1 = *((_QWORD *)v3 + 1);
              }
              v10 = *(_QWORD *)(v1 + 32);
              v9 = v1 + 32;
              v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
              v12 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v12 = 1898;
              *(_QWORD *)(v12 + 8) = v11;
              *(_QWORD *)(v12 + 528) = v12 + 16;
              *(_QWORD *)(v12 + 536) = v12 + 16;
              *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v12 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
              v16 = (IPC::Encoder *)v12;
              (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v9, &v16, 0);
              result = v16;
              v16 = 0;
              if (result)
              {
                IPC::Encoder::~Encoder(result, v13);
                return (IPC::Encoder *)WTF::fastFree(v14, v15);
              }
            }
            else
            {
              return WebKit::WebPage::completeSyntheticClick(*((_QWORD *)result + 1), v6, (float *)result + 9, *((unsigned __int8 *)result + 44), 1, *((_DWORD *)result + 12));
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1973DEBA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (_QWORD *)WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>::customDeleteBucket(a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>::customDeleteBucket(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = -1;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)(v26 + 24) == 2)
            {
              if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v26);
            }
            else
            {
              *(_DWORD *)(v26 + 24) -= 2;
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishLoadingImageForElement(WebCore::HTMLImageElement &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D8DD8;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishLoadingImageForElement(WebCore::HTMLImageElement &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D8DD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishLoadingImageForElement(WebCore::HTMLImageElement &)::$_0,void>::call(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    return WebKit::WebPage::computeAndSendEditDragSnapshot(*(WebKit::WebPage **)(result + 8));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded(WebCore::Element &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34D8E00;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded(WebCore::Element &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34D8E00;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded(WebCore::Element &)::$_0,void>::call(IPC::Encoder *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v1 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v1 + 936))
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 32) + 56))(v1 + 32);
    v3 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v3 = 2082;
    *(_QWORD *)(v3 + 8) = v2;
    *(_QWORD *)(v3 + 528) = v3 + 16;
    *(_QWORD *)(v3 + 536) = v3 + 16;
    *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v3 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
    v7 = (IPC::Encoder *)v3;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v1 + 32) + 32))(v1 + 32, &v7, 0);
    result = v7;
    v7 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v4);
      result = (IPC::Encoder *)WTF::fastFree(v5, v6);
    }
  }
  *(_BYTE *)(v1 + 936) = 0;
  return result;
}

void sub_1973DEFE0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = *a2;
      v17 = v9;
    }
    *a2 = 0;
    v19 = *v17;
    *v17 = v10;
    v29 = v19;
    result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v29);
    v20 = *v4;
    if (*v4)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v25 = *v4;
    if (*v4)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_25:
        result = WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::expand(v4, v17);
        v17 = result;
        v25 = *v4;
        if (*v4)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_25;
    }
    v24 = v25 + 8 * v28;
    v23 = 1;
    goto LABEL_30;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v6 - 4);
  v23 = 0;
  v24 = v6 + 8 * v22;
LABEL_30:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          v14 = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::lookupForReinsert(a1, v13);
          v15 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v14);
          v16 = *v13;
          *v13 = 0;
          *v15 = v16;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v13);
          if (v13 == a3)
            v11 = v14;
        }
        else
        {
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v13);
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::selectTextWithGranularityAtPoint(WebCore::IntPoint const&,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *a1 = &off_1E34D8E28;
  v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::selectTextWithGranularityAtPoint(WebCore::IntPoint const&,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34D8E28;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPage::selectTextWithGranularityAtPoint(WebCore::IntPoint const&,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(int32x2_t *a1)
{
  int32x2_t v2;
  uint64_t v3;
  uint64_t v4;
  int32x2_t v5;
  int32x2_t v6;

  v2 = a1[4];
  if (*(_QWORD *)&v2 && (v3 = *(_QWORD *)(*(_QWORD *)&v2 + 8)) != 0)
  {
    v4 = (uint64_t)a1[5];
    CFRetain(*(CFTypeRef *)(v3 - 8));
    WebKit::WebPage::setSelectionRange(v4, a1 + 1, a1[2].u8[0], a1[2].u8[1]);
    v5 = a1[3];
    a1[3] = 0;
    (*(void (**)(int32x2_t))(**(_QWORD **)&v5 + 16))(v5);
    (*(void (**)(int32x2_t))(**(_QWORD **)&v5 + 8))(v5);
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  else
  {
    v6 = a1[3];
    a1[3] = 0;
    (*(void (**)(int32x2_t))(**(_QWORD **)&v6 + 16))(v6);
    (*(void (**)(int32x2_t))(**(_QWORD **)&v6 + 8))(v6);
  }
}

void sub_1973DF4A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v4)
         + 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 24) += 2;
  *(_QWORD *)(v9 + 8 * v8) = a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

uint64_t WTF::HashTable<std::pair<WebCore::IntSize,double>,WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>>,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashMap<std::pair<WebCore::IntSize,double>,WebCore::IntPoint,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::IntSize,double>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  int v13;
  BOOL v15;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  __int128 v24;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastMalloc((WTF *)(24 * v5 + 16));
  if (v5)
  {
    v8 = v5;
    v9 = (_QWORD *)(result + 32);
    do
    {
      *((_OWORD *)v9 - 1) = xmmword_1978D08F0;
      *v9 = 0x8000000000000000;
      v9 += 3;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = v3;
    do
    {
      v12 = (__int128 *)(v2 + 24 * v10);
      v13 = *((_DWORD *)v12 + 1);
      if (*(_DWORD *)v12 != -1 || v13 != -1)
      {
        v15 = !*(_DWORD *)v12 && v13 == 0;
        if (!v15 || *((double *)v12 + 1) != INFINITY)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::PairHash<WebCore::IntSize,double>::hash(v2 + 24 * v10);
          v20 = 0;
          do
          {
            v21 = v17 + 24 * (v19 & v18);
            v19 = ++v20 + (v19 & v18);
            if (*(_DWORD *)v21)
              v22 = 0;
            else
              v22 = *(_DWORD *)(v21 + 4) == 0;
          }
          while (!v22 || *(double *)(v21 + 8) != INFINITY);
          v24 = *v12;
          *(_QWORD *)(v21 + 16) = *((_QWORD *)v12 + 2);
          *(_OWORD *)v21 = v24;
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

unint64_t WTF::PairHash<WebCore::IntSize,double>::hash(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(a1 + 8) + ~(*(_QWORD *)(a1 + 8) << 32);
  v2 = 9 * (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) ^ (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (0xD7862706ELL
        * (unint64_t)(277951225
                           * ((0xD7862706ELL
                                           * (unint64_t)(277951225 * *(_DWORD *)a1
                                                                            + 95187966 * *(_DWORD *)(a1 + 4))) >> 4)
                           + 95187966 * ((v3 >> 31) ^ v3))) >> 4;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::DidStartLoadForQuickLookDocumentInMainFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  IPC::Encoder *v15;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1917;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v15, a4);
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v12, v13);
  }
  return v10;
}

void sub_1973DF8B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD v21[2];
  IPC::Encoder *v22;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2013;
  *(_QWORD *)(v10 + 8) = a4;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v22 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34D8E78;
  v12[1] = v11;
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v21[0] = v12;
  v21[1] = v13;
  v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, &v22, v21, a5);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (v15)
    return v13;
  else
    return 0;
}

void sub_1973DF9E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D8E78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D8E78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  WTF::RefCountedBase *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;

  v2 = (WTF::RefCountedBase *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>((WTF::RefCountedBase *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v5);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(v2, (uint64_t)&v5);
  if (v6)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1973DFB58(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::RefCountedBase *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  v3 = 0;
  WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a1, (uint64_t)&v3);
  result = v3;
  v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1973DFBE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebScreenOrientationManagerProxy::currentOrientation(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(a1 + 24);
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::WebScreenOrientationManagerProxy::lock(WebKit::WebScreenOrientationManagerProxy *this, int a2, uint64_t *a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE v23[8];
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;

  if (*((_QWORD *)this + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v26;
    LOBYTE(v26) = 16;
    v27 = v6;
    v28 = 1;
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v28)
    {
      v9 = v27;
      v27 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  WebKit::WebScreenOrientationManagerProxy::platformShouldRejectLockRequest((uint64_t)&v26);
  if (v28)
  {
    v23[0] = (_BYTE)v26;
    v10 = v27;
    if (v27)
      *(_DWORD *)v27 += 2;
    v24 = v10;
    v25 = 1;
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(v11, v23);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v25)
    {
      result = (uint64_t)v24;
      v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
        else
          *(_DWORD *)result -= 2;
      }
    }
    goto LABEL_45;
  }
  v14 = *a3;
  *a3 = 0;
  result = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v14;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v15 = *((unsigned __int8 *)this + 24);
  v16 = a2;
  v17 = *((unsigned __int8 *)this + 24);
  switch(v16)
  {
    case 0:
      break;
    case 1:
      result = PAL::deviceHasIPadCapability((PAL *)result);
      if ((_DWORD)result)
        v18 = 2;
      else
        v18 = 0;
      if (v15 > 1 != result)
        v17 = v18;
      else
        v17 = v15;
      v15 = *((unsigned __int8 *)this + 24);
      break;
    case 2:
      if ((v15 & 0xFE) == 2)
        v17 = *((unsigned __int8 *)this + 24);
      else
        v17 = 2;
      break;
    case 4:
      v17 = 0;
      break;
    case 5:
      v17 = 1;
      break;
    case 6:
      v17 = 2;
      break;
    case 7:
      v17 = 3;
      break;
    default:
      if (v15 >= 2)
        v17 = 0;
      else
        v17 = *((unsigned __int8 *)this + 24);
      break;
  }
  if (*((_BYTE *)this + 26) && (_DWORD)v17 == *((unsigned __int8 *)this + 25))
    goto LABEL_42;
  v19 = *((_QWORD *)this + 2);
  v20 = *(_QWORD *)(v19 + 360);
  if (!v20
    || (v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v20 + 32) + 24))(*(_QWORD *)(v20 + 32)),
        v19 = *((_QWORD *)this + 2),
        !v21))
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 104) + 264))(*(_QWORD *)(v19 + 104), v19, v17);
    if ((result & 1) == 0)
      goto LABEL_40;
LABEL_42:
    *(_WORD *)((char *)this + 25) = v17 | 0x100;
    if (v15 != (_DWORD)v17)
      return result;
    LOBYTE(v26) = 0;
    v28 = 0;
    goto LABEL_44;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v19 + 360) + 32) + 64))(*(_QWORD *)(*(_QWORD *)(v19 + 360) + 32), v17);
  if ((result & 1) != 0)
    goto LABEL_42;
LABEL_40:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v26) = 6;
  v28 = 1;
LABEL_44:
  v22 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, &v26);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_45:
  if (v28)
  {
    result = (uint64_t)v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebScreenOrientationManagerProxy::unlock(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8[8];
  WTF::StringImpl *v9;
  char v10;

  if (*(_BYTE *)(this + 26))
  {
    v1 = this;
    if (*(_QWORD *)(this + 32))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8[0] = 16;
      v10 = 1;
      v2 = *(_QWORD *)(v1 + 32);
      *(_QWORD *)(v1 + 32) = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      if (v10)
      {
        v4 = v9;
        v9 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, v3);
          else
            *(_DWORD *)v4 -= 2;
        }
      }
    }
    v5 = *(_QWORD *)(v1 + 16);
    v6 = *(_QWORD *)(v5 + 360);
    if (v6
      && (v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 32) + 24))(*(_QWORD *)(v6 + 32)),
          v5 = *(_QWORD *)(v1 + 16),
          v7))
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 360) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(v5 + 360) + 32));
    }
    else
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 104) + 272))(*(_QWORD *)(v5 + 104));
    }
    if (*(_BYTE *)(v1 + 26))
      *(_BYTE *)(v1 + 26) = 0;
  }
  return this;
}

void WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(WebKit::WebURLSchemeHandler *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E34D8ED8;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v5, a2);
}

uint64_t WebKit::WebURLSchemeHandler::startTask(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20[3];
  _QWORD v21[3];
  uint64_t v22;

  v22 = *(_QWORD *)(a5 + 8);
  v12 = a1 + 3;
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 744);
  v20[0] = v22;
  v20[1] = v13;
  v14 = API::Object::newObject(0x228uLL, 103);
  v18[0] = WebKit::WebURLSchemeTask::WebURLSchemeTask(v14, (uint64_t)a1, a2, a3, a4, a5, a6);
  WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>(v12, v20, v18, (uint64_t)v21);
  v15 = v18[0];
  v18[0] = 0;
  if (v15)
    CFRelease(*(CFTypeRef *)(v15 + 8));
  v18[0] = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 744);
  v19 = 0;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>(a1 + 4, v18, &v19, (uint64_t)v20);
  if (v19)
    WTF::fastFree((WTF *)(v19 - 16), v16);
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add((uint64_t *)(v20[0] + 8), &v22, (uint64_t)v18);
  return (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 24))(a1, a2, *(_QWORD *)(v21[0] + 16));
}

void WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a2;
  v11 = a2[1];
  v12 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(*a2, v11) & v9;
  v13 = (uint64_t *)(v8 + 24 * v12);
  v14 = *v13;
  v15 = v13[1];
  if (*(_OWORD *)v13 != 0)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v14 == v10 && v15 == v11)
      {
        v26 = 0;
        v27 = v8 + 24 * *(unsigned int *)(v8 - 4);
        goto LABEL_29;
      }
      if (v14 == -1)
        v16 = v13;
      v12 = (v12 + v17) & v9;
      v13 = (uint64_t *)(v8 + 24 * v12);
      v14 = *v13;
      v15 = v13[1];
      ++v17;
    }
    while (*(_OWORD *)v13 != 0);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = *a2;
      v13 = v16;
    }
  }
  *v13 = v10;
  v13[1] = a2[1];
  v18 = *a3;
  *a3 = 0;
  v19 = v13[2];
  v13[2] = v18;
  if (v19)
    CFRelease(*(CFTypeRef *)(v19 + 8));
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_23:
      v13 = (uint64_t *)WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, v13);
      v22 = *a1;
      if (*a1)
        LODWORD(v25) = *(_DWORD *)(v22 - 4);
      else
        LODWORD(v25) = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_23;
  }
  v27 = v22 + 24 * v25;
  v26 = 1;
LABEL_29:
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v26;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v24;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  v21 = v16[1];
  v16[1] = v20;
  if (v21)
    result = (uint64_t *)WTF::fastFree((WTF *)(v21 - 16), a2);
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_24:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v25 = *v6;
      if (*v6)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_24;
  }
  v30 = v25 + 16 * v28;
  v29 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

void WebKit::WebURLSchemeHandler::stopAllTasksForPage(WebKit::WebURLSchemeHandler *this, WebKit::WebPageProxy *a2, WebKit::WebProcessProxy *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WebKit::WebProcessProxy *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  _QWORD *v29;
  unint64_t v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;

  v35 = *(WTF **)(*((_QWORD *)a2 + 4) + 744);
  v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 4, &v35);
  v7 = v6;
  v8 = *((_QWORD *)this + 4);
  if (v8)
    v8 += 16 * *(unsigned int *)(v8 - 4);
  if (v8 != v6)
  {
    v35 = 0;
    v36 = 0;
    v9 = *(uint64_t **)(v6 + 8);
    if (!v9)
      goto LABEL_45;
    v10 = *((unsigned int *)v9 - 3);
    if ((_DWORD)v10)
    {
      if (v10 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
      LODWORD(v36) = v10;
      v35 = v11;
      v9 = *(uint64_t **)(v7 + 8);
      if (!v9)
        goto LABEL_45;
    }
    if (!*((_DWORD *)v9 - 3))
      goto LABEL_45;
    v12 = *((unsigned int *)v9 - 1);
    v13 = v9;
    if ((_DWORD)v12)
    {
      v14 = 8 * v12;
      v13 = v9;
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        ++v13;
        v14 -= 8;
        if (!v14)
          goto LABEL_45;
      }
    }
    v15 = &v9[v12];
    if (v15 == v13)
    {
LABEL_45:
      v30 = 0;
LABEL_46:
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v35, v30);
      v32 = v35;
      if (HIDWORD(v36))
      {
        v33 = 8 * HIDWORD(v36);
        do
        {
          v34 = *(_QWORD *)v32;
          v32 = (WTF *)((char *)v32 + 8);
          WebKit::WebURLSchemeHandler::stopTask((uint64_t *)this, (uint64_t)a2, v34);
          v33 -= 8;
        }
        while (v33);
        v32 = v35;
      }
      if (v32)
      {
        v35 = 0;
        LODWORD(v36) = 0;
        WTF::fastFree(v32, v31);
      }
      return;
    }
    v16 = 0;
LABEL_16:
    v17 = *v13;
    if (!a3)
    {
LABEL_37:
      v37 = v17;
      if (v16 == (_DWORD)v36)
      {
        v29 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v35, v16 + 1, (unint64_t)&v37);
        *((_QWORD *)v35 + HIDWORD(v36)) = *v29;
      }
      else
      {
        *((_QWORD *)v35 + v16) = v17;
      }
      v16 = ++HIDWORD(v36);
LABEL_41:
      while (++v13 != v15)
      {
        if ((unint64_t)(*v13 + 1) > 1)
        {
          if (v13 != v15)
            goto LABEL_16;
          break;
        }
      }
      v30 = v16;
      goto LABEL_46;
    }
    if (v17 == -1)
      goto LABEL_35;
    v18 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
    v19 = (WebKit::WebProcessProxy *)(v17 | v18);
    if (!(v17 | v18))
      goto LABEL_36;
    v20 = *((_QWORD *)this + 3);
    if (!v20)
      goto LABEL_35;
    v21 = *(_DWORD *)(v20 - 8);
    v22 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(*v13, *(_QWORD *)(*((_QWORD *)a2 + 4) + 744)) & v21;
    v23 = (uint64_t *)(v20 + 24 * v22);
    v24 = *v23;
    v25 = v23[1];
    if (*v23 != v17 || v25 != v18)
    {
      v27 = 1;
      while (v24 | v25)
      {
        v22 = (v22 + v27) & v21;
        v23 = (uint64_t *)(v20 + 24 * v22);
        v24 = *v23;
        v25 = v23[1];
        ++v27;
        if (*v23 == v17 && v25 == v18)
          goto LABEL_33;
      }
      v23 = (uint64_t *)(v20 + 24 * *(unsigned int *)(v20 - 4));
    }
LABEL_33:
    if ((uint64_t *)(v20 + 24 * *(unsigned int *)(v20 - 4)) == v23)
LABEL_35:
      v19 = 0;
    else
      v19 = *(WebKit::WebProcessProxy **)(v23[2] + 24);
LABEL_36:
    if (v19 != a3)
      goto LABEL_41;
    goto LABEL_37;
  }
}

void WebKit::WebURLSchemeHandler::stopTask(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 744);
  v13[0] = a3;
  v13[1] = v3;
  if (a3 != -1 && a3 | v3)
  {
    v7 = a1 + 3;
    v8 = WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1 + 3, v13);
    v9 = v8;
    v10 = (uint64_t *)a1[3];
    if (v10)
      v10 += 3 * *((unsigned int *)v10 - 1);
    if (v10 != v8)
    {
      WebKit::WebURLSchemeTask::stop((WebKit::WebURLSchemeTask *)v8[2]);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 32))(a1, a2, v9[2]);
      WebKit::WebURLSchemeHandler::removeTaskFromPageMap((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 744), a3);
      v11 = a1[3];
      if (v11)
      {
        v12 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
        if (v12 == v9)
          return;
      }
      else
      {
        if (!v9)
          return;
        v12 = 0;
      }
      if (v12 != v9)
        WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v7, v9);
    }
  }
}

void WebKit::WebURLSchemeTask::stop(WebKit::WebURLSchemeTask *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  void *v5;
  WTF *v6;
  CFTypeRef v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  int v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  _BYTE v19[138];
  char v20;
  CFTypeRef cf;
  char v22;

  *((_BYTE *)this + 265) = 1;
  if (*((_QWORD *)this + 34))
  {
    v2 = (unsigned __int8 *)this + 264;
    if (__ldaxr((unsigned __int8 *)this + 264))
    {
      __clrex();
    }
    else if (!__stxr(1u, v2))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEABB3C]((char *)this + 264);
LABEL_6:
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v19);
    cf = 0;
    v22 = 0;
    v20 = v20 & 0xF1 | 4;
    WebKit::failedCustomProtocolSyncLoad((WebKit::WebURLSchemeTask *)((char *)this + 56), (uint64_t)&v15);
    v13 = 0;
    v14 = 0;
    v4 = *((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = 0;
    (*(void (**)(uint64_t, _BYTE *, WTF::StringImpl **, WTF **))(*(_QWORD *)v4 + 16))(v4, v19, &v15, &v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v6 = v13;
    if (v13)
    {
      v13 = 0;
      LODWORD(v14) = 0;
      WTF::fastFree(v6, v5);
    }
    v7 = v18;
    v18 = 0;
    if (v7)
      CFRelease(v7);
    v8 = v17;
    v17 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v16;
    v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v15;
    v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v19, (WTF::StringImpl *)v5);
    v12 = __ldxr(v2);
    if (v12 == 1)
    {
      if (!__stlxr(0, v2))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
}

uint64_t *WebKit::WebURLSchemeHandler::removeTaskFromPageMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a3;
  v12 = a2;
  v4 = (uint64_t *)(a1 + 32);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v12);
  if ((unint64_t)(a3 - 1) > 0xFFFFFFFFFFFFFFFDLL)
    return result;
  v6 = result;
  v7 = result + 1;
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(result + 1, &v11);
  v8 = v6[1];
  if (v8)
  {
    v9 = (uint64_t *)(v8 + 8 * *(unsigned int *)(v8 - 4));
    if (v9 == result)
      goto LABEL_4;
  }
  else
  {
    if (!result)
      goto LABEL_11;
    v9 = 0;
  }
  if (v9 != result)
  {
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v7, result);
    v8 = *v7;
  }
  if (v8)
  {
LABEL_4:
    if (*(_DWORD *)(v8 - 12))
      return result;
  }
LABEL_11:
  if (*v4)
  {
    v10 = *v4 + 16 * *(unsigned int *)(*v4 - 4);
    if ((uint64_t *)v10 == v6)
      return result;
  }
  else
  {
    if (!v6)
      return result;
    v10 = 0;
  }
  if ((uint64_t *)v10 != v6)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v4, v6);
  return result;
}

uint64_t WebKit::WebURLSchemeTask::WebURLSchemeTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D8F18;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  v14 = (unsigned int *)(a4 + 16);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 744);
  *(_QWORD *)(a1 + 48) = a5;
  WTF::URL::URL(a1 + 56, (uint64_t *)(a6 + 16));
  WTF::URL::URL(a1 + 96, (uint64_t *)(a6 + 56));
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a6 + 96);
  v16 = *(_QWORD *)(a6 + 104);
  *(_QWORD *)(a6 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = v16;
  v17 = *(_QWORD *)(a6 + 112);
  *(_QWORD *)(a6 + 112) = 0;
  *(_QWORD *)(a1 + 152) = v17;
  LODWORD(v17) = *(_DWORD *)(a6 + 120);
  *(_DWORD *)(a6 + 120) = 0;
  *(_DWORD *)(a1 + 160) = v17;
  LODWORD(v17) = *(_DWORD *)(a6 + 124);
  *(_DWORD *)(a6 + 124) = 0;
  *(_DWORD *)(a1 + 164) = v17;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v18 = *(_QWORD *)(a6 + 128);
  *(_QWORD *)(a6 + 128) = 0;
  *(_QWORD *)(a1 + 168) = v18;
  LODWORD(v18) = *(_DWORD *)(a6 + 136);
  *(_DWORD *)(a6 + 136) = 0;
  *(_DWORD *)(a1 + 176) = v18;
  LODWORD(v18) = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 140) = 0;
  *(_DWORD *)(a1 + 180) = v18;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v19 = *(_QWORD *)(a6 + 144);
  *(_QWORD *)(a6 + 144) = 0;
  *(_QWORD *)(a1 + 184) = v19;
  LODWORD(v19) = *(_DWORD *)(a6 + 152);
  *(_DWORD *)(a6 + 152) = 0;
  *(_DWORD *)(a1 + 192) = v19;
  LODWORD(v19) = *(_DWORD *)(a6 + 156);
  *(_DWORD *)(a6 + 156) = 0;
  *(_DWORD *)(a1 + 196) = v19;
  LODWORD(v19) = *(_DWORD *)(a6 + 160);
  *(_BYTE *)(a1 + 204) = *(_BYTE *)(a6 + 164);
  *(_DWORD *)(a1 + 200) = v19;
  v20 = *(_QWORD *)(a6 + 168);
  *(_QWORD *)(a6 + 168) = 0;
  *(_QWORD *)(a1 + 208) = v20;
  v21 = *(_QWORD *)(a6 + 176);
  *(_QWORD *)(a6 + 176) = 0;
  *(_QWORD *)(a1 + 216) = v21;
  v22 = *(_QWORD *)(a6 + 184);
  *(_QWORD *)(a6 + 184) = 0;
  *(_QWORD *)(a1 + 224) = v22;
  v23 = *(_QWORD *)(a6 + 192);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a6 + 200);
  *(_QWORD *)(a1 + 232) = v23;
  v24 = *(_QWORD *)(a6 + 208);
  *(_QWORD *)(a6 + 208) = 0;
  *(_QWORD *)(a1 + 248) = v24;
  CFRetain(*(CFTypeRef *)(a3 + 8));
  v28 = a3;
  v25 = API::Object::newObject(0x140uLL, 60);
  *(_QWORD *)(a1 + 256) = API::FrameInfo::FrameInfo(v25, a6 + 216, &v28);
  if (v28)
    CFRelease(*(CFTypeRef *)(v28 + 8));
  *(_WORD *)(a1 + 268) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  v26 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 272) = v26;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 280));
  *(_QWORD *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 418) = *(_BYTE *)(a1 + 418) & 0xF1 | 4;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  return a1;
}

void WebKit::WebURLSchemeTask::~WebURLSchemeTask(WebKit::WebURLSchemeTask *this, void *a2)
{
  unsigned int *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)this = &off_1E34D8F18;
  v3 = (unsigned int *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = (const void *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::WebURLSchemeTask *)((char *)this + 280), (WTF::StringImpl *)a2);
  v5 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = (const void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::WebURLSchemeTask *)((char *)this + 56));
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  v9 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
}

{
  WebKit::WebURLSchemeTask::~WebURLSchemeTask(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

CFTypeRef *WebKit::WebURLSchemeTask::request@<X0>(WebKit::WebURLSchemeTask *this@<X0>, CFTypeRef *a2@<X8>)
{
  unsigned __int8 *v4;
  CFTypeRef *result;
  int v7;

  v4 = (unsigned __int8 *)this + 264;
  if (__ldaxr((unsigned __int8 *)this + 264))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 264);
LABEL_5:
  result = WebCore::ResourceRequest::ResourceRequest(a2, (WebKit::WebURLSchemeTask *)((char *)this + 56));
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (CFTypeRef *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (CFTypeRef *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebKit::WebURLSchemeTask::willPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9;
  const void *v10;
  unsigned __int8 *v11;
  uint64_t v13;
  const void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  IPC::Encoder *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;
  _QWORD v32[2];
  char v33;
  IPC::Encoder *v34;

  if (*(_BYTE *)(a1 + 265))
  {
    if (*(_BYTE *)(a1 + 269))
      return 6;
    else
      return 3;
  }
  if (*(_BYTE *)(a1 + 268))
    return 1;
  if (*(_BYTE *)(a1 + 267))
    return 0;
  if (*(_BYTE *)(a1 + 266))
    return 2;
  if (*(_BYTE *)(a1 + 544))
    return 5;
  if (*(_QWORD *)(a1 + 272))
  {
    WebCore::ResourceResponseBase::operator=(a1 + 280, a2);
    v9 = *(_QWORD *)(a2 + 240);
    if (v9)
      CFRetain(*(CFTypeRef *)(a2 + 240));
    v10 = *(const void **)(a1 + 520);
    *(_QWORD *)(a1 + 520) = v9;
    if (v10)
      CFRelease(v10);
    *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 248);
  }
  v11 = (unsigned __int8 *)(a1 + 264);
  if (__ldaxr((unsigned __int8 *)(a1 + 264)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEABB3C](a1 + 264);
LABEL_23:
  WebCore::ResourceRequestBase::operator=(a1 + 56, a3);
  v13 = *(_QWORD *)(a3 + 192);
  if (v13)
    CFRetain(*(CFTypeRef *)(a3 + 192));
  v14 = *(const void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v13;
  if (v14)
    CFRelease(v14);
  v15 = __ldxr(v11);
  if (v15 == 1)
  {
    if (!__stlxr(0, v11))
      goto LABEL_32;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 264));
LABEL_32:
  WebKit::WebProcessProxy::webPage(*(_QWORD *)(a1 + 40), &v31);
  v16 = v31;
  if (v31)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 544) = 1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v17 = *a4;
      *a4 = 0;
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v18 = &off_1E34D8FB0;
      v18[1] = a1;
      v18[2] = a1;
      v18[3] = v17;
      v19 = *(_QWORD *)(a1 + 24);
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
      v30[0] = &v29;
      v30[1] = a1 + 32;
      v30[2] = a2;
      v30[3] = a3;
      v20 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 1896);
      v21 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v21 = 2477;
      *(_QWORD *)(v21 + 8) = v20;
      *(_QWORD *)(v21 + 528) = v21 + 16;
      *(_QWORD *)(v21 + 536) = v21 + 16;
      *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v21 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
      v34 = (IPC::Encoder *)v21;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v21, (uint64_t)v30);
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = &off_1E34D8FD8;
      v22[1] = v18;
      v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v32[0] = v22;
      v32[1] = v23;
      v33 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v19, &v34, 0, (uint64_t)v32, 1);
      if (v33)
      {
        v25 = v32[0];
        v32[0] = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
      v26 = v34;
      v34 = 0;
      if (v26)
      {
        IPC::Encoder::~Encoder(v26, v24);
        WTF::fastFree(v27, v28);
      }
    }
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  return 6;
}

uint64_t WebKit::WebURLSchemeTask::didPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7;
  const void *v8;
  unsigned __int8 *v9;
  uint64_t v11;
  const void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[4];
  uint64_t v24;
  char v25;
  IPC::Encoder *v26;

  if (*(_BYTE *)(a1 + 265))
  {
    if (*(_BYTE *)(a1 + 269))
      return 6;
    else
      return 3;
  }
  if (*(_BYTE *)(a1 + 268))
    return 1;
  if (*(_BYTE *)(a1 + 267))
    return 0;
  if (*(_BYTE *)(a1 + 266))
    return 2;
  if (*(_BYTE *)(a1 + 544))
    return 5;
  if (*(_QWORD *)(a1 + 272))
  {
    WebCore::ResourceResponseBase::operator=(a1 + 280, a2);
    v7 = *(_QWORD *)(a2 + 240);
    if (v7)
      CFRetain(*(CFTypeRef *)(a2 + 240));
    v8 = *(const void **)(a1 + 520);
    *(_QWORD *)(a1 + 520) = v7;
    if (v8)
      CFRelease(v8);
    *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 248);
  }
  v9 = (unsigned __int8 *)(a1 + 264);
  if (__ldaxr((unsigned __int8 *)(a1 + 264)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEABB3C](a1 + 264);
LABEL_23:
  WebCore::ResourceRequestBase::operator=(a1 + 56, a3);
  v11 = *(_QWORD *)(a3 + 192);
  if (v11)
    CFRetain(*(CFTypeRef *)(a3 + 192));
  v12 = *(const void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v11;
  if (v12)
    CFRelease(v12);
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v9))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 264));
  v14 = *(_QWORD *)(a1 + 24);
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  v23[0] = &v22;
  v23[1] = a1 + 32;
  v23[2] = a2;
  v23[3] = a3;
  v15 = *(_QWORD *)(a1 + 48);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2474;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v26 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v16, (uint64_t)v23);
  LOBYTE(v24) = 0;
  v25 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v14, &v26, 0, (uint64_t)&v24, 1);
  if (v25)
  {
    v18 = v24;
    v24 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v17);
    WTF::fastFree(v20, v21);
  }
  return 6;
}

uint64_t WebKit::WebURLSchemeTask::didReceiveResponse(WebKit::WebURLSchemeTask *this, const WebCore::ResourceResponse *a2)
{
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];

  if (*((_BYTE *)this + 265))
  {
    if (*((_BYTE *)this + 269))
      return 6;
    else
      return 3;
  }
  else if (*((_BYTE *)this + 268))
  {
    return 1;
  }
  else if (*((_BYTE *)this + 267))
  {
    return 0;
  }
  else if (*((_BYTE *)this + 544))
  {
    return 5;
  }
  else
  {
    *((_BYTE *)this + 266) = 1;
    if (*((_QWORD *)this + 34))
    {
      WebCore::ResourceResponseBase::operator=((uint64_t)this + 280, (uint64_t)a2);
      v5 = *((_QWORD *)a2 + 30);
      if (v5)
        CFRetain(*((CFTypeRef *)a2 + 30));
      v6 = (const void *)*((_QWORD *)this + 65);
      *((_QWORD *)this + 65) = v5;
      if (v6)
        CFRelease(v6);
      *((_BYTE *)this + 528) = *((_BYTE *)a2 + 248);
    }
    v7 = *((_QWORD *)this + 3);
    v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
    v9[0] = &v8;
    v9[1] = (char *)this + 32;
    v9[2] = a2;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::URLSchemeTaskDidReceiveResponse>(v7, (uint64_t)v9, *((_QWORD *)this + 6), 0);
    return 6;
  }
}

uint64_t WebKit::WebURLSchemeTask::didReceiveData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_BYTE *)(a1 + 265))
  {
    if (*(_BYTE *)(a1 + 269))
      return 6;
    else
      return 3;
  }
  else if (*(_BYTE *)(a1 + 268))
  {
    return 1;
  }
  else if (*(_BYTE *)(a1 + 266))
  {
    if (*(_BYTE *)(a1 + 544))
    {
      return 5;
    }
    else
    {
      *(_BYTE *)(a1 + 267) = 1;
      if (*(_QWORD *)(a1 + 272))
      {
        WebCore::SharedBufferBuilder::ensureBuffer((WebCore::SharedBufferBuilder *)(a1 + 536));
        WebCore::FragmentedSharedBuffer::append();
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 24);
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
        v6[0] = &v5;
        v6[1] = a1 + 32;
        v6[2] = a2;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::URLSchemeTaskDidReceiveData>(v4, (uint64_t)v6, *(_QWORD *)(a1 + 48), 0);
      }
      return 6;
    }
  }
  else
  {
    return 4;
  }
}

uint64_t WebKit::WebURLSchemeTask::didComplete(WebKit::WebURLSchemeTask *this, const WebCore::ResourceError *a2)
{
  uint64_t result;
  void *v5;
  WTF *v6;
  char *v7;
  WTF *v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF *v29[2];
  char v30;
  WebCore::SharedBuffer *v31;

  if (*((_BYTE *)this + 265))
  {
    if (*((_BYTE *)this + 269))
      return 6;
    else
      return 3;
  }
  if (*((_BYTE *)this + 268))
    return 1;
  if (!(*((_BYTE *)this + 266) | *((_BYTE *)a2 + 60)))
    return 4;
  if (*((_BYTE *)this + 544) && !*((_BYTE *)a2 + 60))
    return 5;
  *((_BYTE *)this + 268) = 1;
  if (*((_QWORD *)this + 34))
  {
    WebCore::SharedBufferBuilder::takeAsContiguous((WebKit::WebURLSchemeTask *)((char *)this + 536));
    result = WebCore::SharedBuffer::data(v31);
    v6 = (WTF *)*((_QWORD *)v31 + 6);
    v29[0] = 0;
    LODWORD(v29[1]) = 0;
    HIDWORD(v29[1]) = (_DWORD)v6;
    if (v6)
    {
      if ((unint64_t)v6 >> 32)
      {
        __break(0xC471u);
        return result;
      }
      v7 = (char *)result;
      v8 = (WTF *)WTF::fastMalloc(v6);
      LODWORD(v29[1]) = (_DWORD)v6;
      v29[0] = v8;
      do
      {
        v9 = *v7++;
        *(_BYTE *)v8 = v9;
        v8 = (WTF *)((char *)v8 + 1);
        v6 = (WTF *)((char *)v6 - 1);
      }
      while (v6);
    }
    v10 = (unsigned int *)v31;
    v31 = 0;
    if (v10)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v5);
    v11 = *((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = 0;
    (*(void (**)(uint64_t, char *, const WebCore::ResourceError *, WTF **))(*(_QWORD *)v11 + 16))(v11, (char *)this + 280, a2, v29);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v13 = v29[0];
    if (v29[0])
    {
      v29[0] = 0;
      LODWORD(v29[1]) = 0;
      WTF::fastFree(v13, v12);
    }
  }
  v14 = *((_QWORD *)this + 3);
  v28 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
  v15 = *((_QWORD *)this + 6);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2473;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v31 = (WebCore::SharedBuffer *)v16;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v16, &v28);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v16, (uint64_t *)this + 4);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v16, a2);
  LOBYTE(v29[0]) = 0;
  v30 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v14, &v31, 0, (uint64_t)v29, 1);
  if (v30)
  {
    v18 = v29[0];
    v29[0] = 0;
    if (v18)
      (*(void (**)(WTF *))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v31;
  v31 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v17);
    WTF::fastFree(v20, v21);
  }
  v22 = (uint64_t *)*((_QWORD *)this + 2);
  *(_OWORD *)v29 = *((_OWORD *)this + 2);
  v23 = WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v22 + 3, (uint64_t *)v29);
  v24 = v22[3];
  if (v24)
    v25 = (uint64_t *)(v24 + 24 * *(unsigned int *)(v24 - 4));
  else
    v25 = 0;
  if (v25 == v23)
  {
    v26 = 0;
  }
  else
  {
    v26 = v23[2];
    if (v26)
    {
      v23[2] = 0;
      v24 = v22[3];
    }
    if (v24)
    {
      v27 = (uint64_t *)(v24 + 24 * *(unsigned int *)(v24 - 4));
      if (v27 == v23)
        goto LABEL_40;
LABEL_38:
      if (v27 != v23)
        WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v22 + 3, v23);
      goto LABEL_40;
    }
    if (v23)
    {
      v27 = 0;
      goto LABEL_38;
    }
  }
LABEL_40:
  WebKit::WebURLSchemeHandler::removeTaskFromPageMap((uint64_t)v22, *((_QWORD *)this + 5), *((_QWORD *)this + 4));
  (*(void (**)(uint64_t *, WebKit::WebURLSchemeTask *))(*v22 + 40))(v22, this);
  if (v26)
    CFRelease(*(CFTypeRef *)(v26 + 8));
  return 6;
}

uint64_t WebKit::WebURLSchemeTask::nsRequest(WebKit::WebURLSchemeTask *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  int v4;

  v1 = (unsigned __int8 *)this + 264;
  if (__ldaxr((unsigned __int8 *)this + 264))
  {
    __clrex();
  }
  else if (!__stxr(1u, v1))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 264);
LABEL_5:
  v3 = WebCore::ResourceRequest::nsURLRequest();
  v4 = __ldxr(v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, v1))
      return v3;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return v3;
}

uint64_t WebKit::ViewGestureController::checkForActiveLoads(WebKit::ViewGestureController *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  if (*(_QWORD *)(v2 + 984) || *(unsigned __int8 *)(v2 + 968) <= 1u)
  {
    result = WTF::RunLoop::TimerBase::isActive((WebKit::ViewGestureController *)((char *)this + 32));
    if ((result & 1) == 0)
      return WTF::RunLoop::TimerBase::start();
  }
  else
  {
    WTF::RunLoop::TimerBase::stop((WebKit::ViewGestureController *)((char *)this + 32));
    return WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController *)((char *)this + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)0x10, "outstanding event occurred: ", 29, 1);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::ViewGestureController&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 16 * v27;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v21 = *(unsigned int **)(a3 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)result));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
  }
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_28:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v28 = *v6;
      if (*v6)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
  v33 = v28 + 16 * v31;
  v32 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

void WebKit::ViewGestureController::~ViewGestureController(WebKit::ViewGestureController *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;

  *(_QWORD *)this = off_1E34D8F40;
  objc_msgSend(*((id *)this + 18), "_setTransitionIsInFlight:", 0);
  objc_msgSend(*((id *)this + 18), "_setInteractor:", 0);
  objc_msgSend(*((id *)this + 18), "_setAnimator:", 0);
  objc_msgSend(*((id *)this + 17), "invalidate");
  {
    WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers = 0;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 744);
  v2 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers, &v31);
  if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers)
  {
    v4 = WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers
       + 16 * *(unsigned int *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 4);
    if ((_QWORD *)v4 == v2)
      goto LABEL_23;
  }
  else
  {
    if (!v2)
      goto LABEL_23;
    v4 = 0;
  }
  if ((_QWORD *)v4 != v2)
  {
    v5 = (unsigned int *)v2[1];
    *v2 = -1;
    v2[1] = 0;
    if (v5)
    {
      do
      {
        v7 = __ldaxr(v5);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v5));
      if (!v8)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
    ++*(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 16);
    if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers)
      v6 = *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 12) - 1;
    else
      v6 = -1;
    *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 12) = v6;
    if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers)
    {
      v9 = *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 4);
      if (6 * *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 12) < v9 && v9 >= 9)
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers, v9 >> 1, 0);
    }
  }
LABEL_23:
  WebKit::ViewGestureController::disconnectFromProcess((unsigned __int8 *)this);
  v11 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 25) = off_1E34ABE00;
  v12 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::ViewGestureController *)((char *)this + 200));
  v14 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (const void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v15)
    CFRelease(v15);
  v16 = (const void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v16)
    CFRelease(v16);
  v17 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v17)
    CFRelease(v17);
  v18 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v18)
    CFRelease(v18);
  v19 = (const void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v19)
    CFRelease(v19);
  v20 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v20)
    CFRelease(*(CFTypeRef *)(v20 + 8));
  v21 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v21)
    CFRelease(*(CFTypeRef *)(v21 + 8));
  v22 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v13);
    }
  }
  v25 = *((_QWORD *)this + 8);
  if ((v25 & 0x8000000000000) != 0)
  {
    v28 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v13);
    }
  }
  *((_QWORD *)this + 4) = off_1E34ABE00;
  v26 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::ViewGestureController *)((char *)this + 32));
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v27);
}

{
  WTF *v1;
  void *v2;

  WebKit::ViewGestureController::~ViewGestureController(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebKit::ViewGestureController::disconnectFromProcess(unsigned __int8 *this)
{
  unsigned __int8 *v1;

  if (this[161])
  {
    v1 = this;
    this = IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(*((_QWORD *)this + 2) + 208) + 152, 0x94u, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 1896));
    v1[161] = 0;
  }
  return this;
}

uint64_t WebKit::ViewGestureController::controllerForGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = a1;
  {
    WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers = 0;
  }
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers, &v6);
  {
    v4 = WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers;
    if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers)
      v4 = WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers
         + 16 * *(unsigned int *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 4);
  }
  else
  {
    v4 = 0;
    WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers = 0;
  }
  if (v4 == v3)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 96) == a2)
    return *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
  return 0;
}

uint64_t WebKit::ViewGestureController::willBeginGesture(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 96) = ++WebKit::ViewGestureController::takeNextGestureID(void)::nextGestureID;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1264))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
}

uint64_t WebKit::ViewGestureController::didEndGesture(WebKit::ViewGestureController *this)
{
  uint64_t v1;
  uint64_t v2;

  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 12) = 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1272))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

unsigned int *WebKit::ViewGestureController::setAlternateBackForwardListSourcePage(WebKit::ViewGestureController *this, WebKit::WebPageProxy *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;

  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    v4 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
  }
  else
  {
    v4 = 0;
  }
  result = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v4;
  if (result)
  {
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

BOOL WebKit::ViewGestureController::canSwipeInDirection(uint64_t a1, int a2)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 28))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 360);
  if (v4)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32)) & 1) != 0)
      return 0;
  }
  v6 = *(_QWORD *)(a1 + 72);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = v7 - 16;
    CFRetain(*(CFTypeRef *)(v7 - 8));
    v9 = 0;
    v10 = (uint64_t *)(v7 + 576);
  }
  else
  {
    v8 = 0;
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 592);
    v9 = 1;
  }
  v11 = *v10;
  if (a2)
    v12 = WebKit::WebBackForwardList::forwardItem(v11);
  else
    v12 = WebKit::WebBackForwardList::backItem(v11);
  v5 = v12 != 0;
  if ((v9 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  return v5;
}

uint64_t WebKit::ViewGestureController::didStartProvisionalOrSameDocumentLoadForMainFrame(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  *(_BYTE *)(this + 162) = 1;
  if (*(_BYTE *)(this + 232))
  {
    this += 168;
    if (*(_BYTE *)(v1 + 168))
      this = WebKit::ViewGestureController::SnapshotRemovalTracker::log(this);
  }
  *(_BYTE *)(v1 + 232) = 0;
  v2 = *(_QWORD *)(v1 + 240);
  *(_QWORD *)(v1 + 240) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return this;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::startWatchdog(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;

  WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral>((uint64_t)"(re)started watchdog timer for ", 32, (uint64_t)" seconds", 9, &v5);
  WebKit::ViewGestureController::SnapshotRemovalTracker::log(a1);
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::RunLoop::TimerBase::start();
}

uint64_t WebKit::ViewGestureController::didReachNavigationTerminalState(uint64_t this, API::Navigation *a2)
{
  API::Navigation *v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(API::Navigation **)(this + 88);
  if (v2)
    v3 = v2 == a2;
  else
    v3 = 0;
  if (v3)
  {
    v4 = this;
    if (*(_BYTE *)(this + 232) && *(_QWORD *)(this + 176))
    {
      return WebKit::ViewGestureController::removeSwipeSnapshot((id *)this);
    }
    else
    {
      this = WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(this + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)8, "outstanding event occurred: ", 29, 1);
      if ((_DWORD)this)
      {
        WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(v4 + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)1, "wait for event cancelled: ", 27, 1);
        return WebKit::ViewGestureController::checkForActiveLoads((WebKit::ViewGestureController *)v4);
      }
    }
  }
  return this;
}

uint64_t WebKit::ViewGestureController::didSameDocumentNavigationForMainFrame(uint64_t a1, char a2)
{
  int v4;
  uint64_t result;

  WebKit::ViewGestureController::didStartProvisionalOrSameDocumentLoadForMainFrame(a1);
  v4 = WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(a1 + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)8, "wait for event cancelled: ", 27, 1);
  result = WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(a1 + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)1, "wait for event cancelled: ", 27, 1);
  if ((a2 & 0xFE) == 2)
  {
    if (v4 | result)
      return WebKit::ViewGestureController::checkForActiveLoads((WebKit::ViewGestureController *)a1);
  }
  return result;
}

WebKit::ViewGestureController::SnapshotRemovalTracker *WebKit::ViewGestureController::SnapshotRemovalTracker::SnapshotRemovalTracker(WebKit::ViewGestureController::SnapshotRemovalTracker *this)
{
  WTF::RunLoop::TimerBase *v2;
  WTF::RunLoop *v3;
  _QWORD *v4;

  *(_BYTE *)this = 0;
  v2 = (WebKit::ViewGestureController::SnapshotRemovalTracker *)((char *)this + 32);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E34D9028;
  v4[1] = WebKit::ViewGestureController::SnapshotRemovalTracker::watchdogTimerFired;
  v4[2] = 0;
  v4[3] = this;
  WTF::RunLoop::TimerBase::TimerBase(v2, v3);
  *((_QWORD *)this + 4) = off_1E34ABE00;
  *((_QWORD *)this + 7) = v4;
  *((_BYTE *)this + 64) = 1;
  return this;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::watchdogTimerFired(WebKit::ViewGestureController::SnapshotRemovalTracker *this)
{
  WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)this);
  return WebKit::ViewGestureController::SnapshotRemovalTracker::fireRemovalCallbackImmediately(this);
}

WTF::StringImpl *WebKit::ViewGestureController::SnapshotRemovalTracker::eventsDescription@<X0>(WebKit::ViewGestureController::SnapshotRemovalTracker *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  char v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;

  v2 = (char)this;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  if ((this & 1) != 0)
  {
    WTF::StringBuilder::append();
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((this & 2) == 0)
  {
    goto LABEL_3;
  }
  WTF::StringBuilder::append();
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  WTF::StringBuilder::append();
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  WTF::StringBuilder::append();
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  WTF::StringBuilder::append();
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_19:
  WTF::StringBuilder::append();
  if ((v2 & 0x40) != 0)
LABEL_8:
    WTF::StringBuilder::append();
LABEL_9:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v8);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v8);
  v5 = v8;
  if (v8)
    *(_DWORD *)v8 += 2;
  *a2 = v5;
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::log(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  double v4;
  double v5;
  char *v6;
  void *v7;
  WTF *v8;
  uint8_t buf[4];
  double v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71A00;
  result = os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)result)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    v5 = (v4 - *(double *)(a1 + 16)) * 1000.0;
    WTF::StringView::utf8();
    if (v8)
      v6 = (char *)v8 + 16;
    else
      v6 = 0;
    *(_DWORD *)buf = 134218242;
    v10 = v5;
    v11 = 2080;
    v12 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "Swipe Snapshot Removal (%0.2f ms) - %s", buf, 0x16u);
    result = (uint64_t)v8;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        return WTF::fastFree(v8, v7);
      else
        --*(_DWORD *)v8;
    }
  }
  return result;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::start(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::MonotonicTime *v5;
  uint64_t v6;
  uint64_t result;

  *(_BYTE *)a1 = a2;
  v4 = *a3;
  *a3 = 0;
  v5 = *(WTF::MonotonicTime **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    v5 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v5 + 8))(v5);
  WTF::MonotonicTime::now(v5);
  *(_QWORD *)(a1 + 16) = v6;
  WebKit::ViewGestureController::SnapshotRemovalTracker::log(a1);
  result = WebKit::ViewGestureController::SnapshotRemovalTracker::startWatchdog(a1);
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::reset(WebKit::ViewGestureController::SnapshotRemovalTracker *this)
{
  WebKit::ViewGestureController::SnapshotRemovalTracker *v2;
  uint64_t result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9[2];

  v2 = (WebKit::ViewGestureController::SnapshotRemovalTracker *)*(unsigned __int8 *)this;
  if ((_DWORD)v2)
  {
    WebKit::ViewGestureController::SnapshotRemovalTracker::eventsDescription(v2, &v7);
    v9[0] = (uint64_t)"reset; had outstanding events: ";
    v9[1] = 32;
    result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>(v9, (uint64_t *)&v7, &v8);
    if (!v8)
    {
      __break(0xC471u);
      return result;
    }
    WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)this);
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v7;
    v7 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  *(_BYTE *)this = 0;
  WTF::RunLoop::TimerBase::stop((WebKit::ViewGestureController::SnapshotRemovalTracker *)((char *)this + 32));
  result = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent(WebKit::ViewGestureController::SnapshotRemovalTracker *a1, WebKit::ViewGestureController::SnapshotRemovalTracker *this, const char *a3, uint64_t a4, int a5)
{
  char v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned __int8 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  const char *v24;
  uint64_t v25;

  if ((*(_BYTE *)a1 & this) == 0)
    return 0;
  v7 = (char)this;
  if (a5 && *((_BYTE *)a1 + 64))
  {
    WebKit::ViewGestureController::SnapshotRemovalTracker::eventsDescription(this, &v21);
    v24 = "is paused; ignoring event: ";
    v25 = 28;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v24, (uint64_t *)&v21, &v23);
    if (v23)
    {
      WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)a1);
      v10 = v23;
      v23 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v19 = v21;
      v21 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v9);
        else
          *(_DWORD *)v19 -= 2;
      }
      return 0;
    }
    __break(0xC471u);
LABEL_39:
    JUMPOUT(0x1973E2B24);
  }
  WebKit::ViewGestureController::SnapshotRemovalTracker::eventsDescription(this, &v20);
  v24 = a3;
  v25 = a4;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v24, (uint64_t *)&v20, &v23);
  if (!v23)
  {
    __break(0xC471u);
    goto LABEL_39;
  }
  WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)a1);
  v12 = v23;
  v23 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(_BYTE *)a1 & ~v7;
  *(_BYTE *)a1 = v14;
  if (v14)
  {
    WebKit::ViewGestureController::SnapshotRemovalTracker::eventsDescription((WebKit::ViewGestureController::SnapshotRemovalTracker *)v14, &v22);
    v24 = "deferring removal; had outstanding events: ";
    v25 = 44;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v24, (uint64_t *)&v22, &v23);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x1973E2B2CLL);
    }
    WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)a1);
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  else
  {
    WebKit::ViewGestureController::SnapshotRemovalTracker::fireRemovalCallbackImmediately(a1);
  }
  return 1;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::fireRemovalCallbackImmediately(WebKit::ViewGestureController::SnapshotRemovalTracker *this)
{
  uint64_t result;
  uint64_t v3;

  result = WTF::RunLoop::TimerBase::stop((WebKit::ViewGestureController::SnapshotRemovalTracker *)((char *)this + 32));
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)this);
    WebKit::ViewGestureController::SnapshotRemovalTracker::reset(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

unsigned int *WebKit::ViewSnapshotStore::didAddImageToSnapshot(WebKit::ViewSnapshotStore *this, WebKit::ViewSnapshot *a2)
{
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  void *v7;
  unsigned int *result;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  _BYTE v13[24];

  v4 = (uint64_t *)((char *)this + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v12 = (WTF *)v5;
  WTF::ListHashSet<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>::add(v4, (uint64_t *)&v12, (uint64_t)v13);
  result = (unsigned int *)v12;
  v12 = 0;
  if (result)
  {
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  v9 = *((_QWORD *)a2 + 2);
  if (v9)
    v9 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)this += v9;
  return result;
}

uint64_t *WTF::ListHashSet<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t **v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = *(_QWORD *)(*a2 + 8);
  v10 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v7;
    v16 = (uint64_t *)(v6 + 8 * (v13 & v7));
    v17 = *v16;
    if (*v16 == -1)
    {
      v8 = (uint64_t *)(v6 + 8 * v15);
      goto LABEL_10;
    }
    if (!v17)
      break;
    if (*(_QWORD *)(*(_QWORD *)v17 + 8) == v9)
    {
      v21 = 0;
      goto LABEL_26;
    }
LABEL_10:
    v13 = i + v15;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*v4 - 16);
    v16 = v8;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v18 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v18;
  *v16 = (uint64_t)result;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *v4;
  if (*v4)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_21:
      v16 = WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::expand(v4, v16);
      result = (uint64_t *)*v16;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_21;
  }
  v26 = v4[2];
  result[1] = v26;
  result[2] = 0;
  if (v26)
    v27 = (uint64_t **)(v26 + 16);
  else
    v27 = (uint64_t **)(v4 + 1);
  *v27 = result;
  v4[2] = (uint64_t)result;
  v17 = *v16;
  v21 = 1;
LABEL_26:
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v17;
  *(_BYTE *)(a3 + 16) = v21;
  return result;
}

WTF **WebKit::ViewSnapshotStore::willRemoveImageFromSnapshot(WebKit::ViewSnapshotStore *this, WebKit::ViewSnapshot *a2)
{
  uint64_t *v4;
  WTF **result;
  WTF **v6;
  WTF *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::ViewSnapshot *v11;

  v4 = (uint64_t *)((char *)this + 8);
  v11 = a2;
  result = (WTF **)WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WebKit::ViewSnapshot const*>((uint64_t *)this + 1, &v11);
  v6 = (WTF **)*((_QWORD *)this + 1);
  if (v6)
    v6 += *((unsigned int *)v6 - 1);
  if (v6 != result)
  {
    v7 = *result;
    if (*result)
    {
      v11 = *result;
      v8 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>>,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>(v4, (uint64_t)&v11);
      v9 = *v4;
      if (*v4)
        v9 += 8 * *(unsigned int *)(v9 - 4);
      if ((_QWORD *)v9 != v8)
        WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::remove(v4, v8);
      result = (WTF **)WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete((uint64_t)v4, v7);
    }
  }
  v10 = *((_QWORD *)a2 + 2);
  if (v10)
    v10 = *(_QWORD *)(v10 + 32);
  *(_QWORD *)this -= v10;
  return result;
}

WebKit::ViewSnapshot *WebKit::ViewSnapshotStore::recordSnapshot(WebKit::ViewSnapshot *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::ViewSnapshot *v9;
  char *v10;
  void *v11;
  WebKit::ViewSnapshot *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  unint64_t v22;
  WebKit::ViewSnapshot *v23;
  const WTF::URL *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl *v31[2];
  char v32;
  WebKit::ViewSnapshot *v33;
  char v34;
  _BYTE v35[24];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 856))
  {
    if (*(_QWORD *)this >= 0x3200001uLL)
      WebKit::ViewSnapshot::clearImage(*(WebCore::IOSurface **)(**((_QWORD **)this + 2) + 8));
    v5 = *((_QWORD *)a2 + 5);
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 1248))(v6, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
    LOBYTE(v31[0]) = 0;
    v32 = 0;
    v7 = *((_QWORD *)a2 + 5);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1584))(v8);
    (*(void (**)(WebKit::ViewSnapshot **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 456))(&v33, v8, v31);
    this = (WebKit::ViewSnapshot *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1592))(v8);
    v9 = v33;
    if (v33)
    {
      *((_QWORD *)v33 + 3) = *((_QWORD *)a2 + 108);
      v10 = (char *)a2 + 692;
      if (!*((_BYTE *)a2 + 696))
        v10 = (char *)a2 + 688;
      *((_DWORD *)v9 + 8) = *(_DWORD *)v10;
      WebCore::Color::Color((WebCore::Color *)v31, (const Color *)(*((_QWORD *)a2 + 4) + 912));
      WebCore::Color::operator=();
      if (((unint64_t)v31[0] & 0x8000000000000) != 0)
      {
        v28 = (unsigned int *)((unint64_t)v31[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          WTF::fastFree((WTF *)v28, v11);
        }
      }
      v12 = v33;
      v13 = *((_QWORD *)a2 + 5);
      if (v13)
        v14 = *(_QWORD *)(v13 + 8);
      else
        v14 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1584))(v14);
      v15 = (*(float (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
      v17 = v16;
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1592))(v14);
      v18 = roundf(v15);
      v19 = 0x7FFFFFFFLL;
      v20 = 0x80000000;
      if (v18 > -2147500000.0)
        v20 = (int)v18;
      if (v18 < 2147500000.0)
        v19 = v20;
      v21 = roundf(v17);
      if (v21 >= 2147500000.0)
      {
        v22 = 0x7FFFFFFF00000000;
      }
      else if (v21 <= -2147500000.0)
      {
        v22 = 0x8000000000000000;
      }
      else
      {
        v22 = (unint64_t)(int)v21 << 32;
      }
      *((_QWORD *)v12 + 6) = v22 | v19;
      v23 = v33;
      WTF::URL::URL((uint64_t)v31, a3 + 7);
      WebCore::SecurityOriginData::fromURL((WebCore::SecurityOriginData *)v31, v24);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v23 + 56, (uint64_t)v35);
      if (v36 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_9[v36])(&v34, v35);
      v36 = -1;
      v26 = v31[0];
      v31[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v33;
      v33 = 0;
      this = a3[42];
      a3[42] = v27;
      if (this)
      {
        WTF::RefCounted<WebKit::ViewSnapshot>::deref(this);
        this = v33;
        v33 = 0;
        if (this)
          return WTF::RefCounted<WebKit::ViewSnapshot>::deref(this);
      }
    }
  }
  return this;
}

uint64_t WebKit::ViewSnapshotStore::discardSnapshotImagesForOrigin(uint64_t this, const WebCore::SecurityOriginData *a2)
{
  uint64_t i;
  WebCore::IOSurface **v3;
  unsigned int v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;

  for (i = *(_QWORD *)(this + 16); i; this = WTF::fastFree((WTF *)v3, v5))
  {
    while (1)
    {
      v3 = *(WebCore::IOSurface ***)i;
      do
        v4 = __ldaxr((unsigned int *)v3);
      while (__stlxr(v4 + 1, (unsigned int *)v3));
      i = *(_QWORD *)(i + 16);
      this = WebCore::operator==();
      if ((_DWORD)this)
        this = (uint64_t)WebKit::ViewSnapshot::clearImage(v3[1]);
      do
      {
        v6 = __ldaxr((unsigned int *)v3);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v3));
      if (!v7)
        break;
      if (!i)
        return this;
    }
    atomic_store(1u, (unsigned int *)v3);
  }
  return this;
}

void WebKit::ViewSnapshot::~ViewSnapshot(WebKit::ViewSnapshot *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v9;

  WebKit::ViewSnapshot::clearImage(this);
  v3 = *((unsigned int *)this + 20);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_9[v3])(&v9, (char *)this + 56);
  *((_DWORD *)this + 20) = -1;
  v4 = *((_QWORD *)this + 5);
  if ((v4 & 0x8000000000000) != 0)
  {
    v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v2);
    }
  }
  std::unique_ptr<WebCore::IOSurface>::reset[abi:sn180100]((WebCore::IOSurface **)this + 2, 0);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

API::Attachment *API::Attachment::Attachment(API::Attachment *this, const WTF::String *a2, WebKit::WebPageProxy *a3)
{
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D8F78;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  v6 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v6 += 2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = v6;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 6, (uint64_t)a3 + 16);
  v7 = (unsigned int *)*((_QWORD *)a3 + 3);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *((_QWORD *)this + 7) = v7;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void API::Attachment::~Attachment(API::Attachment *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    CFRelease(v9);
}

{
  API::Attachment::~Attachment(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

WTF::StringImpl *API::Attachment::updateAttributes(API::Attachment *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return WebKit::WebPageProxy::updateAttachmentAttributes(v3 - 16, this, a2);
  }
  v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void API::Attachment::invalidate(API::Attachment *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  const void *v11;
  int v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *((_BYTE *)this + 64) = 0;
  v9 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEABB3C]((char *)this + 16);
LABEL_21:
  v11 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    CFRelease(v11);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, v9))
LABEL_27:
    WTF::Lock::unlockSlow((API::Attachment *)((char *)this + 16));
}

uint64_t WebKit::WebURLSchemeHandler::isAPIHandler(WebKit::WebURLSchemeHandler *this)
{
  return 0;
}

uint64_t API::ObjectImpl<(API::Object::Type)103>::type()
{
  return 103;
}

uint64_t API::ObjectImpl<(API::Object::Type)41>::type()
{
  return 41;
}

uint64_t WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

char *WebKit::AuxiliaryProcessProxy::send<Messages::WebScreenOrientationManager::OrientationDidChange>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  char *result;
  unint64_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  char v27;
  IPC::Encoder *v28;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2773;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v28 = (IPC::Encoder *)v8;
  v9 = *a2;
  v10 = *(_QWORD *)(v8 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v8 + 552);
  if (v12 < v10 + 1)
  {
    v23 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v24 < v11);
    result = (char *)mmap(0, v24, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v25 = *(void **)(v8 + 528);
    if (v25 != (void *)(v8 + 16))
      munmap(v25, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v13;
    *(_QWORD *)(v8 + 552) = v24;
    v14 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v13 = *(char **)(v8 + 528);
    v14 = *(_QWORD *)(v8 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v8 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v10);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  LOBYTE(v26) = 0;
  v27 = 0;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a4, (uint64_t)&v26, 1);
  if (v27)
  {
    v18 = v26;
    v26 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  return (char *)v17;
}

_OWORD *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (uint64_t *)(v5 + 24 * v10);
      v14 = *v13;
      if (*v13 != -1)
      {
        v9 = v13[1];
        if (v14 | v9)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(v14, v9);
          v20 = 0;
          do
          {
            v21 = v19 & v18;
            v22 = (_OWORD *)(v17 + 24 * (v19 & v18));
            v19 = ++v20 + (v19 & v18);
          }
          while (*v22 != 0);
          v23 = v17 + 24 * v21;
          v26 = *(_QWORD *)(v23 + 16);
          v25 = (_QWORD *)(v23 + 16);
          v24 = v26;
          *v25 = 0;
          if (v26)
            CFRelease(*(CFTypeRef *)(v24 + 8));
          *v22 = *(_OWORD *)v13;
          v27 = v5 + 24 * v10;
          v28 = *(_QWORD *)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          *v25 = v28;
          v29 = *(_QWORD *)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          if (v29)
            CFRelease(*(CFTypeRef *)(v29 + 8));
          if (v13 == a3)
            v11 = v22;
        }
        else
        {
          v15 = v5 + 24 * v10;
          v16 = *(_QWORD *)(v15 + 16);
          *(_QWORD *)(v15 + 16) = 0;
          if (v16)
            CFRelease(*(CFTypeRef *)(v16 + 8));
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), (void *)v9);
  return v11;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = *a2 + ~(*a2 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 8 * v26;
        goto LABEL_18;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_17;
LABEL_20:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4, v14);
    v14 = result;
    v20 = *v4;
    if (*v4)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_17;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_20;
LABEL_17:
  v24 = v20 + 8 * v23;
  v25 = 1;
LABEL_18:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (_QWORD *)v6;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        v13 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(a1, v12);
        *v13 = *v12;
        if (v12 == a3)
          v11 = v13;
      }
      ++v12;
      --v7;
    }
    while (v7);
    goto LABEL_9;
  }
  result = 0;
  if (v6)
  {
LABEL_9:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *a2 + ~(*a2 << 32);
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 8 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

uint64_t *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = a2[1];
  v6 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(*a2, v5) & v3;
  result = (uint64_t *)(v2 + 24 * v6);
  v8 = *result;
  v9 = result[1];
  if (*result != v4 || v9 != v5)
  {
    v11 = 1;
    while (v8 | v9)
    {
      v6 = (v6 + v11) & v3;
      result = (uint64_t *)(v2 + 24 * v6);
      v8 = *result;
      v9 = result[1];
      ++v11;
      if (*result == v4 && v9 == v5)
        return result;
    }
    return (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

void WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *a2 = -1;
  v3 = a2[2];
  a2[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 8 * v7);
  if (v8 == *a2)
    return v2 + 8 * v7;
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 8 * v7);
    ++v9;
    if (v8 == *a2)
      return v2 + 8 * v7;
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTask::willPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::Function<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D8FB0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTask::willPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::Function<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D8FB0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTask::willPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::Function<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::call(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(result + 16);
  v1[544] = 0;
  if (!v1[265] && !v1[268])
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24));
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, *(WebCore::ResourceResponseBase **)(a2 + 16));
  return IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, *(WebCore::ResourceRequest **)(a2 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(WTF::Function<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D8FD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(WTF::Function<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D8FD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(WTF::Function<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _BYTE v3[208];

  v2 = (_QWORD *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::ResourceRequest>>(a2, v3);
    if (v3[200])
    {
      (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v2 + 16))(*v2, v3);
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v3);
    }
    else
    {
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v3);
      IPC::Connection::cancelReply<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>((_QWORD *)(a1 + 8));
  }
}

void IPC::Connection::cancelReply<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(_QWORD *a1)
{
  CFTypeRef v2;
  _BYTE v3[192];
  CFTypeRef cf;

  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v3);
  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a1 + 16))(*a1, v3);
  v2 = cf;
  cf = 0;
  if (v2)
    CFRelease(v2);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v3);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::URLSchemeTaskDidReceiveResponse>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2476;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, *(WebCore::ResourceResponseBase **)(a2 + 16));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::URLSchemeTaskDidReceiveData>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2475;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

unsigned int *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)(a2 + 8));
  return IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(a1, **(WebCore::FragmentedSharedBuffer ***)(a2 + 16));
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ViewGestureController::*&)(void),WebKit::ViewGestureController*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ViewGestureController::SnapshotRemovalTracker::*&)(void),WebKit::ViewGestureController::SnapshotRemovalTracker*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = ~(*(_QWORD *)(*(_QWORD *)v14 + 8) << 32) + *(_QWORD *)(*(_QWORD *)v14 + 8);
        v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>>,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *(_QWORD *)(**(_QWORD **)a2 + 8);
  v5 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v3 & ((v7 >> 31) ^ v7);
  for (i = 1; ; ++i)
  {
    v10 = v8;
    v11 = *(_QWORD *)(v2 + 8 * v8);
    if (v11 != -1)
    {
      if (!v11)
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      if (*(_QWORD *)(*(_QWORD *)v11 + 8) == v4)
        break;
    }
    v8 = (v10 + i) & v3;
  }
  return v2 + 8 * v10;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WebKit::ViewSnapshot const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 8 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      if (*(_QWORD *)(*(_QWORD *)v10 + 8) == *a2)
        break;
    }
    v7 = (v9 + i) & v3;
  }
  return v2 + 8 * v9;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::installMemoryPressureHandler(void)::$_0,void,WTF::Critical,WTF::Synchronous>::call()
{
  uint64_t i;
  void *v1;
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD **v6;
  unsigned int v7;

  {
    for (i = *((_QWORD *)&WebKit::ViewSnapshotStore::singleton(void)::store + 1);
          *((_QWORD *)&WebKit::ViewSnapshotStore::singleton(void)::store + 1);
          i = *((_QWORD *)&WebKit::ViewSnapshotStore::singleton(void)::store + 1))
    {
      if (!*(_DWORD *)(i - 12))
        break;
      WebKit::ViewSnapshot::clearImage(*(WebCore::IOSurface **)(*(_QWORD *)qword_1ECE738B8 + 8));
    }
  }
  else
  {
    byte_1ECE738C8 = 0;
    WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
    *(_OWORD *)&qword_1ECE738B8 = 0u;
  }
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v6);
  if (v7)
  {
    v2 = v6;
    v3 = 8 * v7;
    do
    {
      v4 = *v2++;
      WebKit::WebProcessPool::handleMemoryPressureWarning(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v1);
}

void sub_1973E4990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_1973E4A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, CFTypeRef cf)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (cf)
    CFRelease(cf);
  if (a10)
    CFRelease(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::PlaybackSessionInterfaceContext::~PlaybackSessionInterfaceContext(unsigned int **this, void *a2)
{
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  if (*((_DWORD *)this + 5))
  {
    this[4] = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)this, v3);
  }
}

_QWORD *WebKit::PlaybackSessionInterfaceContext::durationChanged(_QWORD *this, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  _QWORD *v15;
  double *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v23 = this[4];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 609;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v24 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
    v11 = *(_QWORD *)(v10 + 544);
    v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = v12 + 8;
    v14 = *(_QWORD *)(v10 + 552);
    if (v14 < v12 + 8)
    {
      v20 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v13);
      this = mmap(0, v21, 3, 4098, -1, 0);
      if (this == (_QWORD *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v15 = this;
      memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
      v22 = *(void **)(v10 + 528);
      if (v22 != (void *)(v10 + 16))
        munmap(v22, *(_QWORD *)(v10 + 552));
      *(_QWORD *)(v10 + 528) = v15;
      *(_QWORD *)(v10 + 552) = v21;
      v11 = *(_QWORD *)(v10 + 544);
    }
    else
    {
      v15 = *(_QWORD **)(v10 + 528);
    }
    bzero((char *)v15 + v11, v12 - v11);
    *(_QWORD *)(v10 + 544) = v13;
    v16 = (double *)(*(_QWORD *)(v10 + 528) + v12);
    *(_QWORD *)(v10 + 536) = v16 + 1;
    *v16 = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
    this = v24;
    v24 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
      return (_QWORD *)WTF::fastFree(v18, v19);
    }
  }
  return this;
}

void sub_1973E4D28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::currentTimeChanged(IPC::Encoder *this, double a2, double a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  double *v25;
  void *v26;
  WTF *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  void *v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  IPC::Encoder *v38;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v6 = *(_QWORD *)(v3 + 24);
    v37 = *((_QWORD *)this + 4);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = v7 - 16;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    v10 = *(_QWORD *)(v8 + 32);
    v9 = v8 + 32;
    v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 608;
    *(_QWORD *)(v12 + 8) = v11;
    v13 = (void *)(v12 + 16);
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v38 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v37);
    v14 = *(_QWORD *)(v12 + 544);
    v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    v16 = v15 + 8;
    v17 = *(_QWORD *)(v12 + 552);
    if (v17 < v15 + 8)
    {
      v29 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v30 = v29;
        v29 *= 2;
      }
      while (v30 < v16);
      v31 = (char *)mmap(0, v30, 3, 4098, -1, 0);
      if (v31 == (char *)-1)
        goto LABEL_26;
      v18 = v31;
      memcpy(v31, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
      v32 = *(void **)(v12 + 528);
      if (v32 != v13)
        munmap(v32, *(_QWORD *)(v12 + 552));
      *(_QWORD *)(v12 + 528) = v18;
      *(_QWORD *)(v12 + 552) = v30;
      v14 = *(_QWORD *)(v12 + 544);
    }
    else
    {
      v18 = *(char **)(v12 + 528);
    }
    bzero(&v18[v14], v15 - v14);
    *(_QWORD *)(v12 + 544) = v16;
    v19 = (double *)(*(_QWORD *)(v12 + 528) + v15);
    *(_QWORD *)(v12 + 536) = v19 + 1;
    *v19 = a2;
    v20 = *(_QWORD *)(v12 + 544);
    v21 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = v21 + 8;
    v23 = *(_QWORD *)(v12 + 552);
    if (v23 >= v21 + 8)
    {
      v24 = *(char **)(v12 + 528);
LABEL_10:
      bzero(&v24[v20], v21 - v20);
      *(_QWORD *)(v12 + 544) = v22;
      v25 = (double *)(*(_QWORD *)(v12 + 528) + v21);
      *(_QWORD *)(v12 + 536) = v25 + 1;
      *v25 = a3;
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v9, &v38, 0);
      this = v38;
      v38 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v26);
        return (IPC::Encoder *)WTF::fastFree(v27, v28);
      }
      return this;
    }
    v33 = (2 * v23 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v34 = v33;
      v33 *= 2;
    }
    while (v34 < v22);
    v35 = (char *)mmap(0, v34, 3, 4098, -1, 0);
    if (v35 != (char *)-1)
    {
      v24 = v35;
      memcpy(v35, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
      v36 = *(void **)(v12 + 528);
      if (v36 != v13)
        munmap(v36, *(_QWORD *)(v12 + 552));
      *(_QWORD *)(v12 + 528) = v24;
      *(_QWORD *)(v12 + 552) = v34;
      v20 = *(_QWORD *)(v12 + 544);
      goto LABEL_10;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x1973E4FC4);
  }
  return this;
}

void sub_1973E4FD0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionInterfaceContext::bufferedTimeChanged(_QWORD *this, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  _QWORD *v15;
  double *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v23 = this[4];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 605;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v24 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
    v11 = *(_QWORD *)(v10 + 544);
    v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = v12 + 8;
    v14 = *(_QWORD *)(v10 + 552);
    if (v14 < v12 + 8)
    {
      v20 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v13);
      this = mmap(0, v21, 3, 4098, -1, 0);
      if (this == (_QWORD *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v15 = this;
      memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
      v22 = *(void **)(v10 + 528);
      if (v22 != (void *)(v10 + 16))
        munmap(v22, *(_QWORD *)(v10 + 552));
      *(_QWORD *)(v10 + 528) = v15;
      *(_QWORD *)(v10 + 552) = v21;
      v11 = *(_QWORD *)(v10 + 544);
    }
    else
    {
      v15 = *(_QWORD **)(v10 + 528);
    }
    bzero((char *)v15 + v11, v12 - v11);
    *(_QWORD *)(v10 + 544) = v13;
    v16 = (double *)(*(_QWORD *)(v10 + 528) + v12);
    *(_QWORD *)(v10 + 536) = v16 + 1;
    *v16 = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
    this = v24;
    v24 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
      return (_QWORD *)WTF::fastFree(v18, v19);
    }
  }
  return this;
}

void sub_1973E51B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::rateChanged(IPC::Encoder *result, char a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  double *v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  double *v33;
  void *v34;
  WTF *v35;
  void *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  void *v40;
  unint64_t v41;
  size_t v42;
  char *v43;
  void *v44;
  unint64_t v45;
  size_t v46;
  char *v47;
  void *v48;
  uint64_t v49;
  IPC::Encoder *v50;

  v4 = *((_QWORD *)result + 3);
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 24);
    v49 = *((_QWORD *)result + 4);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v10 = v9 - 16;
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
    v12 = *(_QWORD *)(v10 + 32);
    v11 = v10 + 32;
    v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 618;
    *(_QWORD *)(v14 + 8) = v13;
    v15 = (void *)(v14 + 16);
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v50 = (IPC::Encoder *)v14;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, &v49);
    v16 = *(_QWORD *)(v14 + 544);
    v17 = v16 + 1;
    v18 = *(_QWORD *)(v14 + 552);
    if (v18 < v16 + 1)
    {
      v37 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v38 = v37;
        v37 *= 2;
      }
      while (v38 < v17);
      v39 = (char *)mmap(0, v38, 3, 4098, -1, 0);
      if (v39 == (char *)-1)
        goto LABEL_36;
      v19 = v39;
      memcpy(v39, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
      v40 = *(void **)(v14 + 528);
      if (v40 != v15)
        munmap(v40, *(_QWORD *)(v14 + 552));
      *(_QWORD *)(v14 + 528) = v19;
      *(_QWORD *)(v14 + 552) = v38;
      v20 = *(_QWORD *)(v14 + 544);
    }
    else
    {
      v19 = *(char **)(v14 + 528);
      v20 = *(_QWORD *)(v14 + 544);
    }
    bzero(&v19[v20], v16 - v20);
    *(_QWORD *)(v14 + 544) = v17;
    v21 = (_BYTE *)(*(_QWORD *)(v14 + 528) + v16);
    *(_QWORD *)(v14 + 536) = v21 + 1;
    *v21 = a2;
    v22 = *(_QWORD *)(v14 + 544);
    v23 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = v23 + 8;
    v25 = *(_QWORD *)(v14 + 552);
    if (v25 < v23 + 8)
    {
      v41 = (2 * v25 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v42 = v41;
        v41 *= 2;
      }
      while (v42 < v24);
      v43 = (char *)mmap(0, v42, 3, 4098, -1, 0);
      if (v43 == (char *)-1)
      {
        __break(0xC471u);
        JUMPOUT(0x1973E5510);
      }
      v26 = v43;
      memcpy(v43, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
      v44 = *(void **)(v14 + 528);
      if (v44 != v15)
        munmap(v44, *(_QWORD *)(v14 + 552));
      *(_QWORD *)(v14 + 528) = v26;
      *(_QWORD *)(v14 + 552) = v42;
      v22 = *(_QWORD *)(v14 + 544);
    }
    else
    {
      v26 = *(char **)(v14 + 528);
    }
    bzero(&v26[v22], v23 - v22);
    *(_QWORD *)(v14 + 544) = v24;
    v27 = (double *)(*(_QWORD *)(v14 + 528) + v23);
    *(_QWORD *)(v14 + 536) = v27 + 1;
    *v27 = a3;
    v28 = *(_QWORD *)(v14 + 544);
    v29 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    v30 = v29 + 8;
    v31 = *(_QWORD *)(v14 + 552);
    if (v31 >= v29 + 8)
    {
      v32 = *(char **)(v14 + 528);
LABEL_12:
      bzero(&v32[v28], v29 - v28);
      *(_QWORD *)(v14 + 544) = v30;
      v33 = (double *)(*(_QWORD *)(v14 + 528) + v29);
      *(_QWORD *)(v14 + 536) = v33 + 1;
      *v33 = a4;
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v11 + 32))(v11, &v50, 0);
      result = v50;
      v50 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v34);
        return (IPC::Encoder *)WTF::fastFree(v35, v36);
      }
      return result;
    }
    v45 = (2 * v31 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v46 = v45;
      v45 *= 2;
    }
    while (v46 < v30);
    v47 = (char *)mmap(0, v46, 3, 4098, -1, 0);
    if (v47 != (char *)-1)
    {
      v32 = v47;
      memcpy(v47, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
      v48 = *(void **)(v14 + 528);
      if (v48 != v15)
        munmap(v48, *(_QWORD *)(v14 + 552));
      *(_QWORD *)(v14 + 528) = v32;
      *(_QWORD *)(v14 + 552) = v46;
      v28 = *(_QWORD *)(v14 + 544);
      goto LABEL_12;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x1973E5508);
  }
  return result;
}

void sub_1973E551C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionInterfaceContext::playbackStartedTimeChanged(_QWORD *this, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  _QWORD *v15;
  double *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v23 = this[4];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 617;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v24 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
    v11 = *(_QWORD *)(v10 + 544);
    v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = v12 + 8;
    v14 = *(_QWORD *)(v10 + 552);
    if (v14 < v12 + 8)
    {
      v20 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v13);
      this = mmap(0, v21, 3, 4098, -1, 0);
      if (this == (_QWORD *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v15 = this;
      memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
      v22 = *(void **)(v10 + 528);
      if (v22 != (void *)(v10 + 16))
        munmap(v22, *(_QWORD *)(v10 + 552));
      *(_QWORD *)(v10 + 528) = v15;
      *(_QWORD *)(v10 + 552) = v21;
      v11 = *(_QWORD *)(v10 + 544);
    }
    else
    {
      v15 = *(_QWORD **)(v10 + 528);
    }
    bzero((char *)v15 + v11, v12 - v11);
    *(_QWORD *)(v10 + 544) = v13;
    v16 = (double *)(*(_QWORD *)(v10 + 528) + v12);
    *(_QWORD *)(v10 + 536) = v16 + 1;
    *v16 = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
    this = v24;
    v24 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
      return (_QWORD *)WTF::fastFree(v18, v19);
    }
  }
  return this;
}

void sub_1973E56FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::PlaybackSessionInterfaceContext::seekableRangesChanged(WTF *this, const WebCore::TimeRanges *a2, double a3, double a4)
{
  uint64_t v4;
  unsigned int v8;
  uint64_t v9;
  WebCore::PlatformTimeRanges *v10;
  IPC::Encoder *v11;
  IPC::Encoder *v12;
  IPC::Encoder *v13;
  IPC::Encoder *v14;
  IPC::Encoder *v15;
  uint64_t v16;
  __int128 *v17;
  WTF *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  char *v49;
  _QWORD *v50;
  unint64_t v51;
  size_t v52;
  char *v53;
  void *v54;
  unint64_t v55;
  size_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  size_t v61;
  unint64_t v62;
  char *v63;
  double *v64;
  uint64_t v65;
  unint64_t v66;
  size_t v67;
  unint64_t v68;
  char *v69;
  double *v70;
  void *v71;
  IPC::Encoder *v72;
  WTF *v73;
  void *v74;
  unint64_t v75;
  size_t v76;
  char *v77;
  void *v78;
  unint64_t v79;
  size_t v80;
  char *v81;
  void *v82;
  unint64_t v83;
  size_t v84;
  char *v85;
  void *v86;
  IPC::Encoder *v87[2];
  WTF *v88;
  uint64_t v89;
  uint64_t v90;

  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 4);
    v89 = 0;
    v90 = v9;
    v88 = 0;
    v10 = (const WebCore::TimeRanges *)((char *)a2 + 8);
    while (v8 < WebCore::TimeRanges::length(a2))
    {
      v87[0] = (IPC::Encoder *)WebCore::PlatformTimeRanges::start(v10);
      v87[1] = v11;
      WTF::MediaTime::toDouble((WTF::MediaTime *)v87);
      v13 = v12;
      v87[0] = (IPC::Encoder *)WebCore::PlatformTimeRanges::end(v10);
      v87[1] = v14;
      WTF::MediaTime::toDouble((WTF::MediaTime *)v87);
      v87[0] = v13;
      v87[1] = v15;
      v16 = HIDWORD(v89);
      if (HIDWORD(v89) == (_DWORD)v89)
      {
        v17 = (__int128 *)WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v88, HIDWORD(v89) + 1, (unint64_t)v87);
        v16 = HIDWORD(v89);
        v18 = v88;
        v19 = *v17;
      }
      else
      {
        v18 = v88;
        v19 = *(_OWORD *)v87;
      }
      *((_OWORD *)v18 + v16) = v19;
      ++HIDWORD(v89);
      ++v8;
    }
    v20 = *(_QWORD *)(v4 + 24);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
        v22 = v21 - 16;
      else
        v22 = 0;
    }
    else
    {
      v22 = 0;
    }
    v24 = *(_QWORD *)(v22 + 32);
    v23 = v22 + 32;
    v25 = (*(uint64_t (**)(uint64_t))(v24 + 56))(v23);
    v26 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v26 = 619;
    *(_QWORD *)(v26 + 8) = v25;
    v27 = (void *)(v26 + 16);
    *(_QWORD *)(v26 + 528) = v26 + 16;
    *(_QWORD *)(v26 + 536) = v26 + 16;
    *(_OWORD *)(v26 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v26 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v26);
    v87[0] = (IPC::Encoder *)v26;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v26, &v90);
    v28 = HIDWORD(v89);
    v29 = *(_QWORD *)(v26 + 544);
    v30 = (v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    v31 = v30 + 8;
    v32 = *(_QWORD *)(v26 + 552);
    if (v32 < v30 + 8)
    {
      v75 = (2 * v32 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v76 = v75;
        v75 *= 2;
      }
      while (v76 < v31);
      v77 = (char *)mmap(0, v76, 3, 4098, -1, 0);
      if (v77 == (char *)-1)
      {
        __break(0xC471u);
        JUMPOUT(0x1973E5CD0);
      }
      v33 = v77;
      memcpy(v77, *(const void **)(v26 + 528), *(_QWORD *)(v26 + 544));
      v78 = *(void **)(v26 + 528);
      if (v78 != v27)
        munmap(v78, *(_QWORD *)(v26 + 552));
      *(_QWORD *)(v26 + 528) = v33;
      *(_QWORD *)(v26 + 552) = v76;
      v29 = *(_QWORD *)(v26 + 544);
    }
    else
    {
      v33 = *(char **)(v26 + 528);
    }
    bzero(&v33[v29], v30 - v29);
    *(_QWORD *)(v26 + 544) = v31;
    v34 = (_QWORD *)(*(_QWORD *)(v26 + 528) + v30);
    *(_QWORD *)(v26 + 536) = v34 + 1;
    *v34 = v28;
    if (HIDWORD(v89))
    {
      v35 = v88;
      v36 = (WTF *)((char *)v88 + 16 * HIDWORD(v89));
      do
      {
        v37 = *(_QWORD *)v35;
        v38 = *(_QWORD *)(v26 + 544);
        v39 = (v38 + 7) & 0xFFFFFFFFFFFFFFF8;
        v40 = v39 + 8;
        v41 = *(_QWORD *)(v26 + 552);
        if (v41 < v39 + 8)
        {
          v51 = (2 * v41 + 4095) & 0xFFFFFFFFFFFFF000;
          do
          {
            v52 = v51;
            v51 *= 2;
          }
          while (v52 < v40);
          v53 = (char *)mmap(0, v52, 3, 4098, -1, 0);
          if (v53 == (char *)-1)
            goto LABEL_66;
          v42 = v53;
          memcpy(v53, *(const void **)(v26 + 528), *(_QWORD *)(v26 + 544));
          v54 = *(void **)(v26 + 528);
          if (v54 != v27)
            munmap(v54, *(_QWORD *)(v26 + 552));
          *(_QWORD *)(v26 + 528) = v42;
          *(_QWORD *)(v26 + 552) = v52;
          v38 = *(_QWORD *)(v26 + 544);
        }
        else
        {
          v42 = *(char **)(v26 + 528);
        }
        bzero(&v42[v38], v39 - v38);
        *(_QWORD *)(v26 + 544) = v40;
        v43 = (_QWORD *)(*(_QWORD *)(v26 + 528) + v39);
        *(_QWORD *)(v26 + 536) = v43 + 1;
        *v43 = v37;
        v44 = *((_QWORD *)v35 + 1);
        v45 = *(_QWORD *)(v26 + 544);
        v46 = (v45 + 7) & 0xFFFFFFFFFFFFFFF8;
        v47 = v46 + 8;
        v48 = *(_QWORD *)(v26 + 552);
        if (v48 < v46 + 8)
        {
          v55 = (2 * v48 + 4095) & 0xFFFFFFFFFFFFF000;
          do
          {
            v56 = v55;
            v55 *= 2;
          }
          while (v56 < v47);
          v57 = (char *)mmap(0, v56, 3, 4098, -1, 0);
          if (v57 == (char *)-1)
          {
            __break(0xC471u);
            JUMPOUT(0x1973E5CC8);
          }
          v49 = v57;
          memcpy(v57, *(const void **)(v26 + 528), *(_QWORD *)(v26 + 544));
          v58 = *(void **)(v26 + 528);
          if (v58 != v27)
            munmap(v58, *(_QWORD *)(v26 + 552));
          *(_QWORD *)(v26 + 528) = v49;
          *(_QWORD *)(v26 + 552) = v56;
          v45 = *(_QWORD *)(v26 + 544);
        }
        else
        {
          v49 = *(char **)(v26 + 528);
        }
        bzero(&v49[v45], v46 - v45);
        *(_QWORD *)(v26 + 544) = v47;
        v50 = (_QWORD *)(*(_QWORD *)(v26 + 528) + v46);
        *(_QWORD *)(v26 + 536) = v50 + 1;
        *v50 = v44;
        v35 = (WTF *)((char *)v35 + 16);
      }
      while (v35 != v36);
    }
    v59 = *(_QWORD *)(v26 + 544);
    v60 = (v59 + 7) & 0xFFFFFFFFFFFFFFF8;
    v61 = v60 + 8;
    v62 = *(_QWORD *)(v26 + 552);
    if (v62 < v60 + 8)
    {
      v79 = (2 * v62 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v80 = v79;
        v79 *= 2;
      }
      while (v80 < v61);
      v81 = (char *)mmap(0, v80, 3, 4098, -1, 0);
      if (v81 == (char *)-1)
      {
        __break(0xC471u);
        JUMPOUT(0x1973E5CD8);
      }
      v63 = v81;
      memcpy(v81, *(const void **)(v26 + 528), *(_QWORD *)(v26 + 544));
      v82 = *(void **)(v26 + 528);
      if (v82 != v27)
        munmap(v82, *(_QWORD *)(v26 + 552));
      *(_QWORD *)(v26 + 528) = v63;
      *(_QWORD *)(v26 + 552) = v80;
      v59 = *(_QWORD *)(v26 + 544);
    }
    else
    {
      v63 = *(char **)(v26 + 528);
    }
    bzero(&v63[v59], v60 - v59);
    *(_QWORD *)(v26 + 544) = v61;
    v64 = (double *)(*(_QWORD *)(v26 + 528) + v60);
    *(_QWORD *)(v26 + 536) = v64 + 1;
    *v64 = a3;
    v65 = *(_QWORD *)(v26 + 544);
    v66 = (v65 + 7) & 0xFFFFFFFFFFFFFFF8;
    v67 = v66 + 8;
    v68 = *(_QWORD *)(v26 + 552);
    if (v68 < v66 + 8)
    {
      v83 = (2 * v68 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v84 = v83;
        v83 *= 2;
      }
      while (v84 < v67);
      v85 = (char *)mmap(0, v84, 3, 4098, -1, 0);
      if (v85 == (char *)-1)
      {
LABEL_66:
        __break(0xC471u);
        JUMPOUT(0x1973E5CC0);
      }
      v69 = v85;
      memcpy(v85, *(const void **)(v26 + 528), *(_QWORD *)(v26 + 544));
      v86 = *(void **)(v26 + 528);
      if (v86 != v27)
        munmap(v86, *(_QWORD *)(v26 + 552));
      *(_QWORD *)(v26 + 528) = v69;
      *(_QWORD *)(v26 + 552) = v84;
      v65 = *(_QWORD *)(v26 + 544);
    }
    else
    {
      v69 = *(char **)(v26 + 528);
    }
    bzero(&v69[v65], v66 - v65);
    *(_QWORD *)(v26 + 544) = v67;
    v70 = (double *)(*(_QWORD *)(v26 + 528) + v66);
    *(_QWORD *)(v26 + 536) = v70 + 1;
    *v70 = a4;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v23 + 32))(v23, v87, 0);
    v72 = v87[0];
    v87[0] = 0;
    if (v72)
    {
      IPC::Encoder::~Encoder(v72, v71);
      WTF::fastFree(v73, v74);
    }
    this = v88;
    if (v88)
    {
      v88 = 0;
      LODWORD(v89) = 0;
      return (WTF *)WTF::fastFree(this, v71);
    }
  }
  return this;
}

void sub_1973E5CE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, WTF *a12, int a13)
{
  WTF *v14;
  void *v15;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v14, v15);
  }
  if (a12)
    WTF::fastFree(a12, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionInterfaceContext::canPlayFastReverseChanged(_QWORD *this, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v23 = this[4];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 606;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v24 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
    v11 = *(_QWORD *)(v10 + 544);
    v12 = v11 + 1;
    v13 = *(_QWORD *)(v10 + 552);
    if (v13 < v11 + 1)
    {
      v20 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v12);
      this = mmap(0, v21, 3, 4098, -1, 0);
      if (this == (_QWORD *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v14 = this;
      memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
      v22 = *(void **)(v10 + 528);
      if (v22 != (void *)(v10 + 16))
        munmap(v22, *(_QWORD *)(v10 + 552));
      *(_QWORD *)(v10 + 528) = v14;
      *(_QWORD *)(v10 + 552) = v21;
      v15 = *(_QWORD *)(v10 + 544);
    }
    else
    {
      v14 = *(_QWORD **)(v10 + 528);
      v15 = *(_QWORD *)(v10 + 544);
    }
    bzero((char *)v14 + v15, v11 - v15);
    *(_QWORD *)(v10 + 544) = v12;
    v16 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v11);
    *(_QWORD *)(v10 + 536) = v16 + 1;
    *v16 = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
    this = v24;
    v24 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
      return (_QWORD *)WTF::fastFree(v18, v19);
    }
  }
  return this;
}

void sub_1973E5EE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::audioMediaSelectionOptionsChanged(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  _QWORD v14[3];
  uint64_t v15;
  IPC::Encoder *v16;

  v3 = *((_QWORD *)result + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v15 = *((_QWORD *)result + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v14[0] = &v15;
    v14[1] = a2;
    v14[2] = a3;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 604;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v16 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,0ul,1ul,2ul>(v10, (uint64_t)v14);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v16, 0);
    result = v16;
    v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  return result;
}

void sub_1973E5FF0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::legibleMediaSelectionOptionsChanged(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  _QWORD v14[3];
  uint64_t v15;
  IPC::Encoder *v16;

  v3 = *((_QWORD *)result + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v15 = *((_QWORD *)result + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v14[0] = &v15;
    v14[1] = a2;
    v14[2] = a3;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 614;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v16 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,0ul,1ul,2ul>(v10, (uint64_t)v14);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v16, 0);
    result = v16;
    v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  return result;
}

void sub_1973E60FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionInterfaceContext::audioMediaSelectionIndexChanged(_QWORD *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v23 = this[4];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 603;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v24 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
    v11 = *(_QWORD *)(v10 + 544);
    v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = v12 + 8;
    v14 = *(_QWORD *)(v10 + 552);
    if (v14 < v12 + 8)
    {
      v20 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v13);
      this = mmap(0, v21, 3, 4098, -1, 0);
      if (this == (_QWORD *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v15 = this;
      memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
      v22 = *(void **)(v10 + 528);
      if (v22 != (void *)(v10 + 16))
        munmap(v22, *(_QWORD *)(v10 + 552));
      *(_QWORD *)(v10 + 528) = v15;
      *(_QWORD *)(v10 + 552) = v21;
      v11 = *(_QWORD *)(v10 + 544);
    }
    else
    {
      v15 = *(_QWORD **)(v10 + 528);
    }
    bzero((char *)v15 + v11, v12 - v11);
    *(_QWORD *)(v10 + 544) = v13;
    v16 = (_QWORD *)(*(_QWORD *)(v10 + 528) + v12);
    *(_QWORD *)(v10 + 536) = v16 + 1;
    *v16 = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
    this = v24;
    v24 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
      return (_QWORD *)WTF::fastFree(v18, v19);
    }
  }
  return this;
}

void sub_1973E62D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

char *WebKit::PlaybackSessionInterfaceContext::legibleMediaSelectionIndexChanged(WebKit::PlaybackSessionInterfaceContext *this, uint64_t a2)
{
  char *result;

  result = (char *)*((_QWORD *)this + 3);
  if (result)
    return WebKit::PlaybackSessionManager::legibleMediaSelectionIndexChanged((uint64_t)result, *((_QWORD *)this + 4), a2);
  return result;
}

char *WebKit::PlaybackSessionManager::legibleMediaSelectionIndexChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;

  v11 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = v4 - 16;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v10[0] = &v11;
  v10[1] = a3;
  v7 = *(_QWORD *)(v5 + 32);
  v6 = v5 + 32;
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  return IPC::MessageSender::send<Messages::PlaybackSessionManagerProxy::LegibleMediaSelectionIndexChanged>(v6, (uint64_t)v10, v8, 0);
}

WTF::StringImpl *WebKit::PlaybackSessionInterfaceContext::externalPlaybackChanged(WTF::StringImpl *result, char a2, char a3, WTF::StringImpl **a4)
{
  uint64_t v4;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  void *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  void *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  IPC::Encoder *v43;

  v4 = *((_QWORD *)result + 3);
  if (!v4)
    return result;
  v7 = *((_QWORD *)result + 4);
  v8 = *a4;
  if (*a4)
    *(_DWORD *)v8 += 2;
  v41 = v8;
  v42 = v7;
  v9 = *(_QWORD *)(v4 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v11 = v10 - 16;
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  v13 = *(_QWORD *)(v11 + 32);
  v12 = v11 + 32;
  v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12);
  v15 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v15 = 610;
  *(_QWORD *)(v15 + 8) = v14;
  v16 = (void *)(v15 + 16);
  *(_QWORD *)(v15 + 528) = v15 + 16;
  *(_QWORD *)(v15 + 536) = v15 + 16;
  *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v15 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
  v43 = (IPC::Encoder *)v15;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v15, &v42);
  v17 = *(_QWORD *)(v15 + 544);
  v18 = v17 + 1;
  v19 = *(_QWORD *)(v15 + 552);
  if (v19 < v17 + 1)
  {
    v33 = (2 * v19 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v34 = v33;
      v33 *= 2;
    }
    while (v34 < v18);
    v35 = (char *)mmap(0, v34, 3, 4098, -1, 0);
    if (v35 == (char *)-1)
      goto LABEL_32;
    v20 = v35;
    memcpy(v35, *(const void **)(v15 + 528), *(_QWORD *)(v15 + 544));
    v36 = *(void **)(v15 + 528);
    if (v36 != v16)
      munmap(v36, *(_QWORD *)(v15 + 552));
    *(_QWORD *)(v15 + 528) = v20;
    *(_QWORD *)(v15 + 552) = v34;
    v21 = *(_QWORD *)(v15 + 544);
  }
  else
  {
    v20 = *(char **)(v15 + 528);
    v21 = *(_QWORD *)(v15 + 544);
  }
  bzero(&v20[v21], v17 - v21);
  *(_QWORD *)(v15 + 544) = v18;
  v22 = (_BYTE *)(*(_QWORD *)(v15 + 528) + v17);
  *(_QWORD *)(v15 + 536) = v22 + 1;
  *v22 = a2;
  v23 = *(_QWORD *)(v15 + 544);
  v24 = v23 + 1;
  v25 = *(_QWORD *)(v15 + 552);
  if (v25 < v23 + 1)
  {
    v37 = (2 * v25 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v38 = v37;
      v37 *= 2;
    }
    while (v38 < v24);
    v39 = (char *)mmap(0, v38, 3, 4098, -1, 0);
    if (v39 != (char *)-1)
    {
      v26 = v39;
      memcpy(v39, *(const void **)(v15 + 528), *(_QWORD *)(v15 + 544));
      v40 = *(void **)(v15 + 528);
      if (v40 != v16)
        munmap(v40, *(_QWORD *)(v15 + 552));
      *(_QWORD *)(v15 + 528) = v26;
      *(_QWORD *)(v15 + 552) = v38;
      v27 = *(_QWORD *)(v15 + 544);
      goto LABEL_12;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x1973E6638);
  }
  v26 = *(char **)(v15 + 528);
  v27 = *(_QWORD *)(v15 + 544);
LABEL_12:
  bzero(&v26[v27], v23 - v27);
  *(_QWORD *)(v15 + 544) = v24;
  v28 = (_BYTE *)(*(_QWORD *)(v15 + 528) + v23);
  *(_QWORD *)(v15 + 536) = v28 + 1;
  *v28 = a3;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, (uint64_t *)&v41);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v12 + 32))(v12, &v43, 0);
  v30 = v43;
  v43 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v29);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1973E6644(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionInterfaceContext::wirelessVideoPlaybackDisabledChanged(_QWORD *this, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v23 = this[4];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 623;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v24 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
    v11 = *(_QWORD *)(v10 + 544);
    v12 = v11 + 1;
    v13 = *(_QWORD *)(v10 + 552);
    if (v13 < v11 + 1)
    {
      v20 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v12);
      this = mmap(0, v21, 3, 4098, -1, 0);
      if (this == (_QWORD *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v14 = this;
      memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
      v22 = *(void **)(v10 + 528);
      if (v22 != (void *)(v10 + 16))
        munmap(v22, *(_QWORD *)(v10 + 552));
      *(_QWORD *)(v10 + 528) = v14;
      *(_QWORD *)(v10 + 552) = v21;
      v15 = *(_QWORD *)(v10 + 544);
    }
    else
    {
      v14 = *(_QWORD **)(v10 + 528);
      v15 = *(_QWORD *)(v10 + 544);
    }
    bzero((char *)v14 + v15, v11 - v15);
    *(_QWORD *)(v10 + 544) = v12;
    v16 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v11);
    *(_QWORD *)(v10 + 536) = v16 + 1;
    *v16 = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
    this = v24;
    v24 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
      return (_QWORD *)WTF::fastFree(v18, v19);
    }
  }
  return this;
}

void sub_1973E6844(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionInterfaceContext::mutedChanged(_QWORD *this, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v23 = this[4];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 615;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v24 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
    v11 = *(_QWORD *)(v10 + 544);
    v12 = v11 + 1;
    v13 = *(_QWORD *)(v10 + 552);
    if (v13 < v11 + 1)
    {
      v20 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v12);
      this = mmap(0, v21, 3, 4098, -1, 0);
      if (this == (_QWORD *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v14 = this;
      memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
      v22 = *(void **)(v10 + 528);
      if (v22 != (void *)(v10 + 16))
        munmap(v22, *(_QWORD *)(v10 + 552));
      *(_QWORD *)(v10 + 528) = v14;
      *(_QWORD *)(v10 + 552) = v21;
      v15 = *(_QWORD *)(v10 + 544);
    }
    else
    {
      v14 = *(_QWORD **)(v10 + 528);
      v15 = *(_QWORD *)(v10 + 544);
    }
    bzero((char *)v14 + v15, v11 - v15);
    *(_QWORD *)(v10 + 544) = v12;
    v16 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v11);
    *(_QWORD *)(v10 + 536) = v16 + 1;
    *v16 = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
    this = v24;
    v24 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
      return (_QWORD *)WTF::fastFree(v18, v19);
    }
  }
  return this;
}

void sub_1973E6A18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionInterfaceContext::isPictureInPictureSupportedChanged(_QWORD *this, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v23 = this[4];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 616;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v24 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
    v11 = *(_QWORD *)(v10 + 544);
    v12 = v11 + 1;
    v13 = *(_QWORD *)(v10 + 552);
    if (v13 < v11 + 1)
    {
      v20 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v12);
      this = mmap(0, v21, 3, 4098, -1, 0);
      if (this == (_QWORD *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v14 = this;
      memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
      v22 = *(void **)(v10 + 528);
      if (v22 != (void *)(v10 + 16))
        munmap(v22, *(_QWORD *)(v10 + 552));
      *(_QWORD *)(v10 + 528) = v14;
      *(_QWORD *)(v10 + 552) = v21;
      v15 = *(_QWORD *)(v10 + 544);
    }
    else
    {
      v14 = *(_QWORD **)(v10 + 528);
      v15 = *(_QWORD *)(v10 + 544);
    }
    bzero((char *)v14 + v15, v11 - v15);
    *(_QWORD *)(v10 + 544) = v12;
    v16 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v11);
    *(_QWORD *)(v10 + 536) = v16 + 1;
    *v16 = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
    this = v24;
    v24 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
      return (_QWORD *)WTF::fastFree(v18, v19);
    }
  }
  return this;
}

void sub_1973E6BEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionInterfaceContext::volumeChanged(_QWORD *this, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  _QWORD *v15;
  double *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v23 = this[4];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 622;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v24 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
    v11 = *(_QWORD *)(v10 + 544);
    v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = v12 + 8;
    v14 = *(_QWORD *)(v10 + 552);
    if (v14 < v12 + 8)
    {
      v20 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v13);
      this = mmap(0, v21, 3, 4098, -1, 0);
      if (this == (_QWORD *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v15 = this;
      memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
      v22 = *(void **)(v10 + 528);
      if (v22 != (void *)(v10 + 16))
        munmap(v22, *(_QWORD *)(v10 + 552));
      *(_QWORD *)(v10 + 528) = v15;
      *(_QWORD *)(v10 + 552) = v21;
      v11 = *(_QWORD *)(v10 + 544);
    }
    else
    {
      v15 = *(_QWORD **)(v10 + 528);
    }
    bzero((char *)v15 + v11, v12 - v11);
    *(_QWORD *)(v10 + 544) = v13;
    v16 = (double *)(*(_QWORD *)(v10 + 528) + v12);
    *(_QWORD *)(v10 + 536) = v16 + 1;
    *v16 = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
    this = v24;
    v24 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
      return (_QWORD *)WTF::fastFree(v18, v19);
    }
  }
  return this;
}

void sub_1973E6DCC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionInterfaceContext::isInWindowFullscreenActiveChanged(_QWORD *this, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v23 = this[4];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v8 = *(_QWORD *)(v6 + 32);
    v7 = v6 + 32;
    v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 612;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v24 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
    v11 = *(_QWORD *)(v10 + 544);
    v12 = v11 + 1;
    v13 = *(_QWORD *)(v10 + 552);
    if (v13 < v11 + 1)
    {
      v20 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v12);
      this = mmap(0, v21, 3, 4098, -1, 0);
      if (this == (_QWORD *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v14 = this;
      memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
      v22 = *(void **)(v10 + 528);
      if (v22 != (void *)(v10 + 16))
        munmap(v22, *(_QWORD *)(v10 + 552));
      *(_QWORD *)(v10 + 528) = v14;
      *(_QWORD *)(v10 + 552) = v21;
      v15 = *(_QWORD *)(v10 + 544);
    }
    else
    {
      v14 = *(_QWORD **)(v10 + 528);
      v15 = *(_QWORD *)(v10 + 544);
    }
    bzero((char *)v14 + v15, v11 - v15);
    *(_QWORD *)(v10 + 544) = v12;
    v16 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v11);
    *(_QWORD *)(v10 + 536) = v16 + 1;
    *v16 = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
    this = v24;
    v24 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
      return (_QWORD *)WTF::fastFree(v18, v19);
    }
  }
  return this;
}

void sub_1973E6FA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PlaybackSessionManager::~PlaybackSessionManager(WebKit::PlaybackSessionManager *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WebKit::WebProcess *v29;
  _QWORD v30[4];

  *(_QWORD *)this = off_1E34D9158;
  v2 = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 10);
  v30[0] = "VideoPresentationManager";
  v30[1] = 25;
  v30[2] = "~PlaybackSessionManager";
  v30[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v30);
  v4 = (_QWORD *)*((_QWORD *)this + 6);
  v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  v7 = v5;
  v8 = v6;
  if (v4)
    v9 = &v4[3 * *((unsigned int *)v4 - 1)];
  else
    v9 = 0;
  if (v9 != v5)
  {
    do
    {
      v10 = v7[1];
      ++*(_DWORD *)(v10 + 32);
      v11 = v7[2];
      ++*(_DWORD *)(v11 + 16);
      WebCore::PlaybackSessionModelMediaElement::removeClient((WebCore::PlaybackSessionModelMediaElement *)v10, (WebCore::PlaybackSessionModelClient *)v11);
      WebCore::PlaybackSessionModelMediaElement::setMediaElement((WebCore::PlaybackSessionModelMediaElement *)v10, 0);
      *(_QWORD *)(v11 + 24) = 0;
      if (*(_DWORD *)(v11 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      else
        --*(_DWORD *)(v11 + 16);
      if (*(_DWORD *)(v10 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 16) + 8))(v10 + 16);
      else
        --*(_DWORD *)(v10 + 32);
      while (1)
      {
        v7 += 3;
        if (v7 == v8)
          break;
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_17;
      }
      v7 = v8;
LABEL_17:
      ;
    }
    while (v7 != v9);
    v4 = (_QWORD *)*((_QWORD *)this + 6);
  }
  if (v4)
  {
    *((_QWORD *)this + 6) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)v4, v6);
  }
  v12 = *((_QWORD *)this + 4);
  if (v12)
  {
    *((_QWORD *)this + 4) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v12, v6);
    v13 = *((_QWORD *)this + 4);
    *((_DWORD *)this + 10) = 0;
    if (v13)
    {
      LODWORD(v13) = *(_DWORD *)(v13 - 12);
      if (v13 > 0x7FFFFFFE)
        LODWORD(v13) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v13) = 0;
    *((_DWORD *)this + 10) = 0;
  }
  *((_DWORD *)this + 11) = 2 * v13;
  v14 = *((_QWORD *)this + 8);
  if (v14)
  {
    *((_QWORD *)this + 8) = 0;
    WTF::fastFree((WTF *)(v14 - 16), v6);
  }
  v15 = *((_QWORD *)this + 3);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      {
        v17 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v17 = WebKit::WebProcess::WebProcess(v29);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v17;
        v16 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      }
      if (v16)
        v18 = v16 - 16;
      else
        v18 = 0;
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v17 + 40, 0x2Fu, *(_QWORD *)(v18 + 40));
    }
  }
  v19 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  v23 = *((_QWORD *)this + 8);
  if (v23)
    WTF::fastFree((WTF *)(v23 - 16), v6);
  v24 = *((_QWORD *)this + 6);
  if (v24)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v24, v6);
  v25 = *((_QWORD *)this + 4);
  if (v25)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v25, v6);
  v26 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v6);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v6);
}

{
  WTF *v1;
  void *v2;

  WebKit::PlaybackSessionManager::~PlaybackSessionManager(this);
  WTF::fastFree(v1, v2);
}

void sub_1973E72AC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v4 = *(unsigned int **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(_QWORD *)(v2 + 64);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), a2);
  v9 = *(_QWORD *)(v2 + 48);
  if (v9)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, a2);
  v10 = *(_QWORD *)(v2 + 32);
  if (v10)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v10, a2);
  v11 = *(unsigned int **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  *(_QWORD *)v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::PlaybackSessionManager::invalidate(WebKit::PlaybackSessionManager *this)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *result;
  unsigned int v9;
  unsigned int v10;
  WebKit::WebProcess *v11;
  _QWORD v12[4];

  v2 = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 10);
  v12[0] = "VideoPresentationManager";
  v12[1] = 25;
  v12[2] = "invalidate";
  v12[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v12);
  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v11);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v4 + 40, 0x2Fu, *(_QWORD *)(v6 + 40));
  result = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    do
    {
      v9 = __ldaxr(result);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, result));
    if (!v10)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

uint64_t *WebKit::PlaybackSessionManager::ensureModelAndInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  WebCore::PlaybackSessionModelMediaElement *v15;
  WebCore::PlaybackSessionModelClient *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;

  v5 = (uint64_t *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 48), 0), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (uint64_t *)(v4 + 24 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    *v11 = a2;
    v15 = (WebCore::PlaybackSessionModelMediaElement *)WTF::fastMalloc((WTF *)0x70);
    WebCore::PlaybackSessionModelMediaElement::PlaybackSessionModelMediaElement(v15);
    v16 = (WebCore::PlaybackSessionModelClient *)WTF::fastMalloc((WTF *)0x28);
    *((_QWORD *)v16 + 2) = 1;
    *(_QWORD *)v16 = off_1E34D9078;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 3) = a1;
    *((_QWORD *)v16 + 4) = a2;
    WebCore::PlaybackSessionModelMediaElement::addClient(v15, v16);
    v17 = v11[1];
    v11[1] = (uint64_t)v15;
    if (v17)
    {
      if (*(_DWORD *)(v17 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 16) + 8))(v17 + 16);
      else
        --*(_DWORD *)(v17 + 32);
    }
    v18 = (_DWORD *)v11[2];
    v11[2] = (uint64_t)v16;
    if (v18)
    {
      if (v18[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
      else
        --v18[4];
    }
    v19 = *v5;
    if (*v5)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *v5;
    if (*v5)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23)
        return v11 + 1;
    }
    else if (3 * v24 > 4 * v23)
    {
      return v11 + 1;
    }
    v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5, v11);
    return v11 + 1;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != a2)
  {
    if (v12 == -1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (uint64_t *)(v4 + 24 * v10);
    v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return v11 + 1;
}

void sub_1973E76C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v2[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[4];
  if (*(_DWORD *)(v1 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v1 + 16);
  else
    --*(_DWORD *)(v1 + 32);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::removeContext(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a2;
  v3 = (uint64_t *)(a1 + 48);
  result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 48), &v35);
  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    v6 += 24 * *(unsigned int *)(v6 - 4);
  if (v6 != result)
  {
    v7 = *(_QWORD *)(result + 8);
    ++*(_DWORD *)(v7 + 32);
    v8 = *(_QWORD *)(result + 16);
    ++*(_DWORD *)(v8 + 16);
    result = WebCore::PlaybackSessionModelMediaElement::removeClient((WebCore::PlaybackSessionModelMediaElement *)v7, (WebCore::PlaybackSessionModelClient *)v8);
    *(_QWORD *)(v8 + 24) = 0;
    if (*v3)
    {
      v9 = *v3 + 24 * *(unsigned int *)(*v3 - 4);
      if ((_QWORD *)v9 == v5)
        goto LABEL_28;
    }
    else
    {
      if (!v5)
        goto LABEL_28;
      v9 = 0;
    }
    if ((_QWORD *)v9 != v5)
    {
      *v5 = -1;
      v10 = (_DWORD *)v5[2];
      v5[2] = 0;
      if (v10)
      {
        if (v10[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[4];
      }
      result = v5[1];
      v5[1] = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 32) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 8))(result + 16);
        else
          --*(_DWORD *)(result + 32);
      }
      ++*(_DWORD *)(*v3 - 16);
      v11 = *v3;
      if (*v3)
        v12 = *(_DWORD *)(v11 - 12) - 1;
      else
        v12 = -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *v3;
      if (*v3)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v15 >> 1, 0);
      }
    }
LABEL_28:
    v17 = *(_QWORD *)(v7 + 48);
    if (!v17)
    {
LABEL_70:
      if (*(_DWORD *)(v8 + 16) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      else
        --*(_DWORD *)(v8 + 16);
      if (*(_DWORD *)(v7 + 32) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 16) + 8))(v7 + 16);
      --*(_DWORD *)(v7 + 32);
      return result;
    }
    *(_DWORD *)(v17 + 24) += 2;
    result = WebCore::PlaybackSessionModelMediaElement::setMediaElement((WebCore::PlaybackSessionModelMediaElement *)v7, 0);
    v19 = (uint64_t *)(a1 + 32);
    v20 = *(_DWORD *)(a1 + 44);
    v21 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 40) = v21;
    if (v21 <= v20)
    {
LABEL_59:
      v33 = *(_QWORD *)(v17 + 296);
      if (v33 && *(_QWORD *)(v33 + 8))
      {
        v36 = *(_QWORD *)(v17 + 296);
        result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)(a1 + 32), &v36);
        if (*v19)
        {
          v34 = *v19 + 8 * *(unsigned int *)(*v19 - 4);
          if (v34 == result)
            goto LABEL_68;
        }
        else
        {
          if (!result)
            goto LABEL_68;
          v34 = 0;
        }
        if (v34 != result)
          result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)(a1 + 32), (unsigned int **)result);
      }
LABEL_68:
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v17);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
      goto LABEL_70;
    }
    v22 = *v19;
    if (*v19)
    {
      v23 = *(_DWORD *)(v22 - 4);
      if (!v23)
        goto LABEL_53;
      v24 = 0;
      do
      {
        while (1)
        {
          result = *(_QWORD *)(v22 + 8 * --v23);
          if ((unint64_t)(result + 1) >= 2 && !*(_QWORD *)(result + 8))
            break;
          if (!v23)
            goto LABEL_42;
        }
        *(_QWORD *)(v22 + 8 * v23) = 0;
        do
        {
          v25 = __ldaxr((unsigned int *)result);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, (unsigned int *)result));
        if (!v26)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v18);
        }
        *(_QWORD *)(v22 + 8 * v23) = -1;
        ++v24;
      }
      while (v23);
LABEL_42:
      v22 = *v19;
      if (v24)
      {
        *(_DWORD *)(v22 - 16) += v24;
        v27 = *v19;
        if (*v19)
          v28 = *(_DWORD *)(v27 - 12);
        else
          v28 = 0;
        *(_DWORD *)(v27 - 12) = v28 - v24;
        v22 = *v19;
      }
      if (v22)
      {
        v29 = *(_DWORD *)(v22 - 4);
        if (v29 >= 9 && 6 * *(_DWORD *)(v22 - 12) < v29)
        {
          result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 32));
          v22 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = 0;
          if (!v22)
          {
            v31 = 0;
            goto LABEL_57;
          }
          goto LABEL_56;
        }
LABEL_53:
        *(_DWORD *)(a1 + 40) = 0;
LABEL_56:
        v31 = *(_DWORD *)(v22 - 12);
        v32 = 0x7FFFFFFF;
        if (v31 >= 0x7FFFFFFF)
        {
LABEL_58:
          *(_DWORD *)(a1 + 44) = 2 * v32;
          goto LABEL_59;
        }
LABEL_57:
        v32 = v31;
        goto LABEL_58;
      }
    }
    v31 = 0;
    *(_DWORD *)(a1 + 40) = 0;
    goto LABEL_57;
  }
  return result;
}

void sub_1973E7AE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v2[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[4];
  if (*(_DWORD *)(v1 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v1 + 16);
  else
    --*(_DWORD *)(v1 + 32);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::removeClientForContext(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v3 = (uint64_t *)(a1 + 64);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v8);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    v6 = v5 + 16 * *(unsigned int *)(v5 - 4);
  else
    v6 = 0;
  if (v6 != result)
  {
    if (*(_DWORD *)(result + 8) != 1)
    {
      --*(_DWORD *)(result + 8);
      return result;
    }
    if (v5)
    {
      v7 = v5 + 16 * *(unsigned int *)(v5 - 4);
      if (v7 == result)
        return WebKit::PlaybackSessionManager::removeContext(a1, v8);
    }
    else
    {
      if (!result)
        return WebKit::PlaybackSessionManager::removeContext(a1, v8);
      v7 = 0;
    }
    if (v7 != result)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, (_QWORD *)result);
    return WebKit::PlaybackSessionManager::removeContext(a1, v8);
  }
  return result;
}

unsigned int *WebKit::PlaybackSessionManager::setUpPlaybackControlsManager(WebKit::PlaybackSessionManager *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WebKit::WebPage *v35;
  WebKit::WebFullScreenManager *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  WTF *v45;
  void *v46;
  _BYTE v47[24];
  WTF *v48[3];
  uint64_t v49;
  int v50;

  v4 = *((_QWORD *)a2 + 19);
  v5 = (uint64_t *)((char *)this + 32);
  v6 = *((_DWORD *)this + 11);
  v7 = *((_DWORD *)this + 10) + 1;
  *((_DWORD *)this + 10) = v7;
  if (v7 <= v6)
    goto LABEL_31;
  v8 = *v5;
  if (!*v5)
    goto LABEL_26;
  v9 = *(_DWORD *)(v8 - 4);
  if (!v9)
  {
LABEL_25:
    *((_DWORD *)this + 10) = 0;
    goto LABEL_28;
  }
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 8 * --v9);
      if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
        break;
      if (!v9)
        goto LABEL_14;
    }
    *(_QWORD *)(v8 + 8 * v9) = 0;
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    *(_QWORD *)(v8 + 8 * v9) = -1;
    ++v10;
  }
  while (v9);
LABEL_14:
  v8 = *v5;
  if (v10)
  {
    *(_DWORD *)(v8 - 16) += v10;
    v14 = *v5;
    if (*v5)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v10;
    v8 = *v5;
  }
  if (!v8)
  {
LABEL_26:
    v18 = 0;
    *((_DWORD *)this + 10) = 0;
LABEL_29:
    v19 = v18;
    goto LABEL_30;
  }
  v16 = *(_DWORD *)(v8 - 4);
  if (v16 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v16)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v5);
  v8 = *((_QWORD *)this + 4);
  *((_DWORD *)this + 10) = 0;
  if (!v8)
  {
    v18 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_DWORD *)(v8 - 12);
  v19 = 0x7FFFFFFF;
  if (v18 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *((_DWORD *)this + 11) = 2 * v19;
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 74, (uint64_t)a2);
  v20 = (unsigned int *)*((_QWORD *)a2 + 37);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 + 1, v20));
  v48[0] = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v5, v48, (uint64_t)v47);
  result = (unsigned int *)v48[0];
  v48[0] = 0;
  if (result)
  {
    do
    {
      v29 = __ldaxr(result);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, result));
    if (!v30)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  if (v20)
  {
    do
    {
      v25 = __ldaxr(v20);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v20));
    if (!v26)
    {
      atomic_store(1u, v20);
      result = (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  if (v47[16])
  {
    v27 = WebKit::PlaybackSessionManager::ensureModelAndInterface((uint64_t)this, v4);
    v28 = *v27;
    *(_DWORD *)(v28 + 32) = *(_DWORD *)(*v27 + 32) + 1;
    WebCore::PlaybackSessionModelMediaElement::setMediaElement((WebCore::PlaybackSessionModelMediaElement *)v28, a2);
    if (*(_DWORD *)(v28 + 32) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v28 + 16) + 8))(v28 + 16);
    else
      --*(_DWORD *)(v28 + 32);
    result = (unsigned int *)WebKit::PlaybackSessionManager::sendLogIdentifierForMediaElement(this, a2);
  }
  v32 = (uint64_t *)((char *)this + 56);
  v31 = *((_QWORD *)this + 7);
  if (v31 != v4)
  {
    *v32 = v4;
    if (v31)
    {
      WebKit::PlaybackSessionManager::removeClientForContext((uint64_t)this, v31);
      v4 = *((_QWORD *)this + 7);
    }
    v49 = v4;
    v50 = 0;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)this + 8, &v49, &v50, (uint64_t)v48);
    ++*((_DWORD *)v48[0] + 2);
    v33 = *((_QWORD *)this + 3);
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v34)
        v35 = (WebKit::WebPage *)(v34 - 16);
      else
        v35 = 0;
    }
    else
    {
      v35 = 0;
    }
    v36 = WebKit::WebPage::fullScreenManager(v35);
    if (v36)
      WebKit::WebFullScreenManager::videoControlsManagerDidChange(v36);
    v37 = *((_QWORD *)this + 3);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 8);
      if (v38)
        v39 = v38 - 16;
      else
        v39 = 0;
    }
    else
    {
      v39 = 0;
    }
    v41 = *(_QWORD *)(v39 + 32);
    v40 = v39 + 32;
    v42 = (*(uint64_t (**)(uint64_t))(v41 + 56))(v40);
    v43 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v43 = 621;
    *(_QWORD *)(v43 + 8) = v42;
    *(_QWORD *)(v43 + 528) = v43 + 16;
    *(_QWORD *)(v43 + 536) = v43 + 16;
    *(_OWORD *)(v43 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v43 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v43);
    v48[0] = (WTF *)v43;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v43, v32);
    (*(void (**)(uint64_t, WTF **, _QWORD))(*(_QWORD *)v40 + 32))(v40, v48, 0);
    result = (unsigned int *)v48[0];
    v48[0] = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v44);
      return (unsigned int *)WTF::fastFree(v45, v46);
    }
  }
  return result;
}

void sub_1973E7FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  uint64_t v12;

  if (*(_DWORD *)(v12 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 16) + 8))(v12 + 16);
  else
    --*(_DWORD *)(v12 + 32);
  _Unwind_Resume(exception_object);
}

char *WebKit::PlaybackSessionManager::sendLogIdentifierForMediaElement(WebKit::PlaybackSessionManager *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v13 = WebKit::PlaybackSessionManager::contextIdForMediaElement(this, a2);
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = v5 - 16;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 229);
  v12[0] = &v13;
  v12[1] = v7;
  v9 = *(_QWORD *)(v6 + 32);
  v8 = v6 + 32;
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  return IPC::MessageSender::send<Messages::PlaybackSessionManagerProxy::SetLogIdentifier>(v8, (uint64_t)v12, v10, 0);
}

uint64_t *WebKit::PlaybackSessionManager::mediaEngineChanged(uint64_t *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t *v2;
  uint64_t *v3;

  if (this[7])
  {
    v2 = this;
    this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(this + 6, this + 7);
    v3 = (uint64_t *)v2[6];
    if (v3)
      v3 += 3 * *((unsigned int *)v3 - 1);
    if (v3 != this)
      return (uint64_t *)WebCore::PlaybackSessionModelMediaElement::mediaEngineChanged((WebCore::PlaybackSessionModelMediaElement *)this[1]);
  }
  return this;
}

uint64_t WebKit::PlaybackSessionManager::contextIdForMediaElement(WebKit::PlaybackSessionManager *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((_QWORD *)a2 + 19);
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface((uint64_t)this, v3);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setMediaElement((WebCore::PlaybackSessionModelMediaElement *)v5, a2);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return v3;
}

void sub_1973E81AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v1 + 16);
  else
    --*(_DWORD *)(v1 + 32);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::currentPlaybackControlsElement(WebKit::PlaybackSessionManager *this)
{
  uint64_t *v2;
  uint64_t *v3;

  if (!*((_QWORD *)this + 7))
    return 0;
  v2 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 6, (_QWORD *)this + 7);
  v3 = (uint64_t *)*((_QWORD *)this + 6);
  if (v3)
    v3 += 3 * *((unsigned int *)v3 - 1);
  if (v3 == v2)
    return 0;
  else
    return *(_QWORD *)(v2[1] + 48);
}

uint64_t WebKit::PlaybackSessionManager::play(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::play((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E8304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::pause(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::pause((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E841C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::togglePlayState(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::togglePlayState((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E8534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::beginScrubbing(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::beginScrubbing((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E864C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::endScrubbing(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::endScrubbing((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E8764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::seekToTime(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t *v10;
  uint64_t v11;
  _BYTE v13[48];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13[8] = 0;
  v13[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v10 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v11 = *v10;
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(*v10 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::seekToTime((WebCore::PlaybackSessionModelMediaElement *)v11, a3, a4, a5);
  if (*(_DWORD *)(v11 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 16) + 8))(v11 + 16);
  else
    --*(_DWORD *)(v11 + 32);
  return MEMORY[0x19AEB0CA8](v13);
}

void sub_1973E88A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 8))(v2 + 16);
  else
    --*(_DWORD *)(v2 + 32);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::fastSeek(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[48];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9[8] = 0;
  v9[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v6 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v7 = *v6;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(*v6 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::fastSeek((WebCore::PlaybackSessionModelMediaElement *)v7, a3);
  if (*(_DWORD *)(v7 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 16) + 8))(v7 + 16);
  else
    --*(_DWORD *)(v7 + 32);
  return MEMORY[0x19AEB0CA8](v9);
}

void sub_1973E89C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::beginScanningForward(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::beginScanningForward((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E8AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::beginScanningBackward(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::beginScanningBackward((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E8BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::endScanning(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::endScanning((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E8D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setDefaultPlaybackRate(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[48];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9[8] = 0;
  v9[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v6 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v7 = *v6;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(*v6 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setDefaultPlaybackRate((WebCore::PlaybackSessionModelMediaElement *)v7, a3);
  if (*(_DWORD *)(v7 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 16) + 8))(v7 + 16);
  else
    --*(_DWORD *)(v7 + 32);
  return MEMORY[0x19AEB0CA8](v9);
}

void sub_1973E8E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 8))(v2 + 16);
  else
    --*(_DWORD *)(v2 + 32);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setPlaybackRate(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[48];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9[8] = 0;
  v9[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v6 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v7 = *v6;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(*v6 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setPlaybackRate((WebCore::PlaybackSessionModelMediaElement *)v7, a3);
  if (*(_DWORD *)(v7 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 16) + 8))(v7 + 16);
  else
    --*(_DWORD *)(v7 + 32);
  return MEMORY[0x19AEB0CA8](v9);
}

void sub_1973E8F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 8))(v2 + 16);
  else
    --*(_DWORD *)(v2 + 32);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::selectAudioMediaOption(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::selectAudioMediaOption((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E9080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 8))(v2 + 16);
  else
    --*(_DWORD *)(v2 + 32);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::selectLegibleMediaOption(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[48];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8[8] = 0;
  v8[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::selectLegibleMediaOption((WebCore::PlaybackSessionModelMediaElement *)v5);
  v6 = WebCore::PlaybackSessionModelMediaElement::legibleMediaSelectedIndex((WebCore::PlaybackSessionModelMediaElement *)v5);
  WebKit::PlaybackSessionManager::legibleMediaSelectionIndexChanged(a1, a2, v6);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v8);
}

void sub_1973E91BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::handleControlledElementIDRequest(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;

  v21 = a2;
  result = *WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v4 = *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 32) = v4 + 1;
  v5 = *(_QWORD *)(result + 48);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  if (v4)
  {
    *(_DWORD *)(result + 32) = v4;
    if (!v5)
      return result;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 8))(result + 16);
    if (!v5)
      return result;
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v6 = v7 - 16;
    else
      v6 = 0;
  }
  v8 = v6 + 32;
  v9 = *(_QWORD *)(v5 + 104);
  if (v9 && *(_QWORD *)(v9 + 24))
  {
    v10 = *(_DWORD *)(v9 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(uint64_t **)(v9 + 40);
      LODWORD(v12) = *(_DWORD *)(v9 + 52);
      if (!(_DWORD)v12)
      {
LABEL_23:
        v11 = 0;
LABEL_24:
        v13 = v11 + 1;
        goto LABEL_25;
      }
    }
    else
    {
      v11 = (uint64_t *)(v9 + 32);
      LODWORD(v12) = v10 >> 5;
      if (!(_DWORD)v12)
        goto LABEL_23;
    }
    v14 = *MEMORY[0x1E0DD5FA8];
    v12 = v12;
    while (1)
    {
      v15 = *v11;
      if (*v11 == v14
        || *(_QWORD *)(v15 + 24) == *(_QWORD *)(v14 + 24) && *(_QWORD *)(v15 + 32) == *(_QWORD *)(v14 + 32))
      {
        goto LABEL_24;
      }
      v11 += 2;
      if (!--v12)
        goto LABEL_23;
    }
  }
  v13 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_25:
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 611;
  *(_QWORD *)(v17 + 8) = v16;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v22 = (IPC::Encoder *)v17;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v17, &v21);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, v13);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v8 + 32))(v8, &v22, 0);
  result = (uint64_t)v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
    result = WTF::fastFree(v19, v20);
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

void sub_1973E93E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  uint64_t v10;
  WTF *v12;
  void *v13;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v12, v13);
  }
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::togglePictureInPicture(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::togglePictureInPicture((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E9500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::enterFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  v2 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v3 = *v2;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(*v2 + 32) + 1;
  result = WebCore::PlaybackSessionModelMediaElement::enterFullscreen((WebCore::PlaybackSessionModelMediaElement *)v3);
  if (*(_DWORD *)(v3 + 32) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(v3 + 16);
  --*(_DWORD *)(v3 + 32);
  return result;
}

void sub_1973E95A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v1 + 16);
  else
    --*(_DWORD *)(v1 + 32);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::exitFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  v2 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v3 = *v2;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(*v2 + 32) + 1;
  result = WebCore::PlaybackSessionModelMediaElement::exitFullscreen((WebCore::PlaybackSessionModelMediaElement *)v3);
  if (*(_DWORD *)(v3 + 32) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(v3 + 16);
  --*(_DWORD *)(v3 + 32);
  return result;
}

void sub_1973E9634(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v1 + 16);
  else
    --*(_DWORD *)(v1 + 32);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::toggleInWindow(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  v2 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v3 = *v2;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(*v2 + 32) + 1;
  result = WebCore::PlaybackSessionModelMediaElement::toggleInWindowFullscreen((WebCore::PlaybackSessionModelMediaElement *)v3);
  if (*(_DWORD *)(v3 + 32) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(v3 + 16);
  --*(_DWORD *)(v3 + 32);
  return result;
}

void sub_1973E96C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v1 + 16);
  else
    --*(_DWORD *)(v1 + 32);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::toggleMuted(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::toggleMuted((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E97BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setMuted(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setMuted((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E98E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 8))(v2 + 16);
  else
    --*(_DWORD *)(v2 + 32);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setVolume(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[48];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9[8] = 0;
  v9[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v6 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v7 = *v6;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(*v6 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setVolume((WebCore::PlaybackSessionModelMediaElement *)v7, a3);
  if (*(_DWORD *)(v7 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 16) + 8))(v7 + 16);
  else
    --*(_DWORD *)(v7 + 32);
  return MEMORY[0x19AEB0CA8](v9);
}

void sub_1973E9A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 32) - 1;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setPlayingOnSecondScreen(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setPlayingOnSecondScreen((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E9B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 8))(v2 + 16);
  else
    --*(_DWORD *)(v2 + 32);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::sendRemoteCommand(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v5 = *v4;
  ++*(_DWORD *)(*v4 + 32);
  WebCore::PlaybackSessionModelMediaElement::sendRemoteCommand();
  if (*(_DWORD *)(v5 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  else
    --*(_DWORD *)(v5 + 32);
  return MEMORY[0x19AEB0CA8](v7);
}

void sub_1973E9C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 8))(v2 + 16);
  else
    --*(_DWORD *)(v2 + 32);
  MEMORY[0x19AEB0CA8](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setSoundStageSize(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  WebCore::AudioSession *v8;
  uint64_t v9;
  _QWORD *v11;
  unsigned __int8 v12;

  v5 = *WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  v6 = *(_DWORD *)(v5 + 32);
  *(_DWORD *)(v5 + 32) = v6 + 1;
  *(_BYTE *)(v5 + 104) = a3;
  if (v6)
    *(_DWORD *)(v5 + 32) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(v5 + 16);
  v12 = a3;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E34D91E0;
  v7[1] = &v12;
  v11 = v7;
  WebKit::PlaybackSessionManager::forEachModel(a1, &v11);
  v8 = (WebCore::AudioSession *)(*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  v9 = WebCore::AudioSession::sharedSession(v8);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 272))(v9, v12);
}

void sub_1973E9D50(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::PlaybackSessionManager::forEachModel(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;

  v3 = *(_QWORD **)(a1 + 48);
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v3);
  v5 = result;
  v7 = v6;
  if (v3)
    v8 = &v3[3 * *((unsigned int *)v3 - 1)];
  else
    v8 = 0;
  if (v8 != result)
  {
    do
    {
      v9 = v5[1];
      v10 = (_DWORD *)v5[2];
      ++*(_DWORD *)(v9 + 32);
      ++v10[4];
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v9);
      if (v10[4] == 1)
        result = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[4];
      if (*(_DWORD *)(v9 + 32) == 1)
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 16) + 8))(v9 + 16);
      else
        --*(_DWORD *)(v9 + 32);
      while (1)
      {
        v5 += 3;
        if (v5 == v7)
          break;
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_15;
      }
      v5 = v7;
LABEL_15:
      ;
    }
    while (v5 != v8);
  }
  return result;
}

void sub_1973E9E70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v2[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[4];
  if (*(_DWORD *)(v1 + 32) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v1 + 16);
  else
    --*(_DWORD *)(v1 + 32);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionInterfaceContext::ptrCount(WebKit::PlaybackSessionInterfaceContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::PlaybackSessionInterfaceContext::ptrCountWithoutThreadCheck(WebKit::PlaybackSessionInterfaceContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::PlaybackSessionInterfaceContext::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 20);
  return this;
}

uint64_t WebKit::PlaybackSessionInterfaceContext::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 20);
  if (v1)
  {
    *(_DWORD *)(this + 20) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)(a1 + 16);
    do
    {
      if (*(v4 - 2) != (_DWORD *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (v5[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[4];
        }
        v6 = (uint64_t)*(v4 - 1);
        *(v4 - 1) = 0;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 32) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 16) + 8))(v6 + 16);
          else
            --*(_DWORD *)(v6 + 32);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  _DWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = (uint64_t *)(v16 + 24 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          v25 = v16 + 24 * v23;
          v28 = *(_DWORD **)(v25 + 16);
          v27 = (_QWORD *)(v25 + 16);
          v26 = v28;
          *v27 = 0;
          if (v28)
          {
            if (v26[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[4];
          }
          v30 = *(v27 - 1);
          *(v27 - 1) = 0;
          if (v30)
          {
            if (*(_DWORD *)(v30 + 32) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)(v30 + 16) + 8))(v30 + 16);
            else
              --*(_DWORD *)(v30 + 32);
          }
          *v24 = *v12;
          v31 = v4 + 24 * v9;
          v33 = *(_QWORD *)(v31 + 8);
          v32 = (uint64_t *)(v31 + 8);
          *v32 = 0;
          *(v27 - 1) = v33;
          v34 = v32[1];
          v32[1] = 0;
          *v27 = v34;
          v35 = (_DWORD *)v32[1];
          v32[1] = 0;
          if (v35)
          {
            if (v35[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
            else
              --v35[4];
          }
          v36 = *v32;
          *v32 = 0;
          if (v36)
          {
            if (*(_DWORD *)(v36 + 32) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)(v36 + 16) + 8))(v36 + 16);
            else
              --*(_DWORD *)(v36 + 32);
          }
          if (v12 == a3)
            v10 = v24;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = *(_DWORD **)(v14 + 16);
          *(_QWORD *)(v14 + 16) = 0;
          if (v15)
          {
            if (v15[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[4];
          }
          v29 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v29)
          {
            if (*(_DWORD *)(v29 + 32) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)(v29 + 16) + 8))(v29 + 16);
            else
              --*(_DWORD *)(v29 + 32);
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  _QWORD *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  void *v29;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, *(uint64_t **)a2);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned int *)(v4 + 12);
  v6 = *(_QWORD *)(a1 + 544);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v9 = *(_QWORD *)(a1 + 552);
  if (v9 < v7 + 8)
  {
    v22 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v8);
    v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (v24 == (char *)-1)
      goto LABEL_21;
    v10 = v24;
    memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v25 = *(void **)(a1 + 528);
    if (v25 != (void *)(a1 + 16))
      munmap(v25, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v10;
    *(_QWORD *)(a1 + 552) = v23;
    v6 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v10 = *(char **)(a1 + 528);
  }
  bzero(&v10[v6], v7 - v6);
  *(_QWORD *)(a1 + 544) = v8;
  v11 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v7);
  *(_QWORD *)(a1 + 536) = v11 + 1;
  *v11 = v5;
  v12 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(char **)v4;
    v14 = 24 * v12;
    do
    {
      IPC::ArgumentCoder<WebCore::MediaSelectionOption,void>::encode((IPC::Encoder *)a1, v13);
      v13 += 24;
      v14 -= 24;
    }
    while (v14);
  }
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a1 + 544);
  v17 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = v17 + 8;
  v19 = *(_QWORD *)(a1 + 552);
  if (v19 >= v17 + 8)
  {
    v20 = *(char **)(a1 + 528);
    goto LABEL_8;
  }
  v26 = (2 * v19 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v27 = v26;
    v26 *= 2;
  }
  while (v27 < v18);
  v28 = (char *)mmap(0, v27, 3, 4098, -1, 0);
  if (v28 == (char *)-1)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x1973EA56CLL);
  }
  v20 = v28;
  memcpy(v28, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
  v29 = *(void **)(a1 + 528);
  if (v29 != (void *)(a1 + 16))
    munmap(v29, *(_QWORD *)(a1 + 552));
  *(_QWORD *)(a1 + 528) = v20;
  *(_QWORD *)(a1 + 552) = v27;
  v16 = *(_QWORD *)(a1 + 544);
LABEL_8:
  bzero(&v20[v16], v17 - v16);
  *(_QWORD *)(a1 + 544) = v18;
  v21 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v17);
  *(_QWORD *)(a1 + 536) = v21 + 1;
  *v21 = v15;
}

char *IPC::MessageSender::send<Messages::PlaybackSessionManagerProxy::LegibleMediaSelectionIndexChanged>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  char *result;
  unint64_t v22;
  size_t v23;
  void *v24;
  IPC::Encoder *v25;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 613;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v25 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(v8 + 544);
  v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 + 8;
  v13 = *(_QWORD *)(v8 + 552);
  if (v13 < v11 + 8)
  {
    v22 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v12);
    result = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v14 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v24 = *(void **)(v8 + 528);
    if (v24 != (void *)(v8 + 16))
      munmap(v24, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v14;
    *(_QWORD *)(v8 + 552) = v23;
    v10 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v14 = *(char **)(v8 + 528);
  }
  bzero(&v14[v10], v11 - v10);
  *(_QWORD *)(v8 + 544) = v12;
  v15 = (_QWORD *)(*(_QWORD *)(v8 + 528) + v11);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  v17 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v25, a4);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v19, v20);
  }
  return (char *)v17;
}

void sub_1973EA70C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PlaybackSessionManager::setSoundStageSize(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::AudioSessionSoundStageSize)::$_0,void,WebCore::PlaybackSessionModel &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 480))(a2);
  if (result > **(unsigned __int8 **)(a1 + 8))
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 480))(a2);
    **(_BYTE **)(a1 + 8) = result;
  }
  return result;
}

char *IPC::MessageSender::send<Messages::PlaybackSessionManagerProxy::SetLogIdentifier>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  char *result;
  unint64_t v22;
  size_t v23;
  void *v24;
  IPC::Encoder *v25;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 620;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v25 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(v8 + 544);
  v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 + 8;
  v13 = *(_QWORD *)(v8 + 552);
  if (v13 < v11 + 8)
  {
    v22 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v12);
    result = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v14 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v24 = *(void **)(v8 + 528);
    if (v24 != (void *)(v8 + 16))
      munmap(v24, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v14;
    *(_QWORD *)(v8 + 552) = v23;
    v10 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v14 = *(char **)(v8 + 528);
  }
  bzero(&v14[v10], v11 - v10);
  *(_QWORD *)(v8 + 544) = v12;
  v15 = (_QWORD *)(*(_QWORD *)(v8 + 528) + v11);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  v17 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v25, a4);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v19, v20);
  }
  return (char *)v17;
}

void sub_1973EA920(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void API::ContentRuleList::~ContentRuleList(API::ContentRuleList *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
    os_release(v2);
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
}

{
  API::ContentRuleList::~ContentRuleList(this);
  JUMPOUT(0x19AEB936CLL);
}

BOOL API::ContentRuleList::supportsRegularExpression(API::ContentRuleList *this, const WTF::String *a2)
{
  _BOOL8 v2;
  uint64_t v4;
  _BYTE v5[40];

  WebCore::ContentExtensions::CombinedURLFilters::CombinedURLFilters((WebCore::ContentExtensions::CombinedURLFilters *)v5);
  WebCore::ContentExtensions::URLFilterParser::URLFilterParser();
  v2 = WebCore::ContentExtensions::URLFilterParser::addPattern() < 2;
  WebCore::ContentExtensions::URLFilterParser::~URLFilterParser((WebCore::ContentExtensions::URLFilterParser *)&v4);
  MEMORY[0x19AEAF7A8](v5);
  return v2;
}

unint64_t API::ContentRuleList::parseRuleList(API::ContentRuleList *this, const WTF::String *a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;

  WebCore::ContentExtensions::parseRuleList(this, a2);
  if (v8)
  {
    if (v8 != 1)
    {
      v6 = std::__throw_bad_variant_access[abi:sn180100]();
      return API::ContentRuleListAction::create(v6);
    }
    v2 = v7 & 0xFFFFFFFF00000000;
    v3 = v7;
    v4 = 1;
  }
  else
  {
    std::system_category();
    v3 = 0;
    v2 = 0;
    v4 = 0;
  }
  ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore17ContentExtensions20ContentExtensionRuleELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v4])(&v9, &v7);
  return v2 | v3;
}

void API::ContentRuleListAction::create(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  v4 = API::Object::newObject(0x28uLL, 48);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(_QWORD *)v4 = &off_1E34D9230;
  v5 = *a1;
  *(_BYTE *)(v4 + 20) = *((_BYTE *)a1 + 4);
  *(_DWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v6 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  *(_QWORD *)(v4 + 24) = v6;
  LODWORD(v6) = a1[4];
  a1[4] = 0;
  *(_DWORD *)(v4 + 32) = v6;
  LODWORD(v6) = a1[5];
  a1[5] = 0;
  *(_DWORD *)(v4 + 36) = v6;
  *a2 = v4;
}

void API::ContentRuleListAction::~ContentRuleListAction(API::ContentRuleListAction *this, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
}

{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  JUMPOUT(0x19AEB936CLL);
}

API::ContentRuleListStore *API::ContentRuleListStore::defaultStore(API::ContentRuleListStore *this)
{
  API::ContentRuleListStore *result;
  API::ContentRuleListStore *v2;

    return (API::ContentRuleListStore *)API::ContentRuleListStore::defaultStore(void)::defaultStore;
  v2 = (API::ContentRuleListStore *)API::Object::newObject(0x30uLL, 49);
  result = API::ContentRuleListStore::ContentRuleListStore(v2);
  API::ContentRuleListStore::defaultStore(void)::defaultStore = (uint64_t)result;
  return result;
}

API::ContentRuleListStore *API::ContentRuleListStore::ContentRuleListStore(API::ContentRuleListStore *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;

  API::ContentRuleListStore::defaultStorePath(this);
  API::ContentRuleListStore::ContentRuleListStore(this, (const WTF::String *)&v5);
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return this;
}

void API::ContentRuleListStore::~ContentRuleListStore(API::ContentRuleListStore *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

{
  API::ContentRuleListStore::~ContentRuleListStore(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a1 + 32);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  WTF::String::isolatedCopy();
  v5 = *a2;
  *a2 = 0;
  v9 = v5;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34D9590;
  v6[1] = a1;
  v6[2] = v8;
  v10 = v6;
  v6[3] = v9;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 32))(v4, &v10);
  v7 = v10;
  v10 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
}

WTF::StringImpl *API::ContentRuleListStore::compileContentRuleList(CFTypeRef *a1, const WTF::String *a2, const WTF::String *a3, uint64_t *a4)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::StringImpl *v12;

  API::constructedPath((API *)(a1 + 2), a2, a3);
  v8 = *a4;
  *a4 = 0;
  v11 = v8;
  API::ContentRuleListStore::compileContentRuleListFile(a1, (uint64_t)&v12, (uint64_t)a2, a3, &v11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void API::ContentRuleListStore::compileContentRuleListFile(CFTypeRef *a1, uint64_t a2, uint64_t a3, WebCore::ContentExtensions *a4, uint64_t *a5)
{
  WebCore::QualifiedName *v8;
  const WTF::String *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  char v44;
  WTF::StringImpl *v45[2];
  uint64_t v46;
  int v47;
  int v48;
  _BYTE v49[112];
  int v50;
  _QWORD v51[14];
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = (WebCore::QualifiedName *)WebCore::initializeCommonAtomStrings((WebCore *)a1);
  WebCore::QualifiedName::init(v8);
  WebCore::ContentExtensions::parseRuleList(a4, v9);
  if (v41)
  {
    v38 = 0;
    if (v41 != 1)
      std::__throw_bad_variant_access[abi:sn180100]();
    WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()(a5, &v38);
    if (v38)
      CFRelease(*(CFTypeRef *)(v38 + 8));
    goto LABEL_38;
  }
  CFRetain(a1[1]);
  *(_QWORD *)&v33 = a1;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v10 = v39;
  v11 = HIDWORD(v40);
  if (HIDWORD(v40))
  {
    v12 = v39 + 152 * HIDWORD(v40);
    while (1)
    {
      WebCore::ContentExtensions::Trigger::isolatedCopy();
      WebCore::ContentExtensions::Action::isolatedCopy();
      WebCore::ContentExtensions::ContentExtensionRule::ContentExtensionRule();
      if (v52 != -1)
        ((void (*)(char *, _QWORD *))off_1E34D9348[v52])(&v44, v51);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v13);
      v15 = v42;
      v42 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v45[0];
      v45[0] = 0;
      v17 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
      *(WTF::StringImpl **)(v10 + 8) = v45[1];
      v18 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 8 * v18));
      v19 = *(WTF **)(v10 + 16);
      if (v19)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v19, v14);
      }
      v20 = v46;
      v46 = 0;
      *(_QWORD *)(v10 + 16) = v20;
      LODWORD(v20) = v47;
      v47 = 0;
      *(_DWORD *)(v10 + 24) = v20;
      LODWORD(v20) = v48;
      v48 = 0;
      *(_DWORD *)(v10 + 28) = v20;
      v21 = *(unsigned int *)(v10 + 144);
      if ((_DWORD)v21 != -1)
        break;
      if (v50 != -1)
        goto LABEL_26;
LABEL_29:
      v50 = -1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v14);
      v23 = v45[0];
      v45[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      v10 += 152;
      if (v10 >= v12)
      {
        v10 = v39;
        v11 = HIDWORD(v40);
        goto LABEL_35;
      }
    }
    if (v50 == -1)
    {
      ((void (*)(_QWORD *, unint64_t))off_1E34D9348[v21])(v51, v10 + 32);
      *(_DWORD *)(v10 + 144) = -1;
    }
    else
    {
LABEL_26:
      v51[0] = v10 + 32;
      ((void (*)(_QWORD *, unint64_t, _BYTE *))off_1E34D93D0[v50])(v51, v10 + 32, v49);
    }
    if (v50 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E34D9348[v50])(v51, v49);
    goto LABEL_29;
  }
LABEL_35:
  v39 = 0;
  v35 = v10;
  v24 = v40;
  v40 = 0;
  v36 = __PAIR64__(v11, v24);
  WTF::String::isolatedCopy();
  v25 = *a5;
  *a5 = 0;
  *((_QWORD *)&v37 + 1) = v25;
  v26 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v26 = off_1E34D95E0;
  *(_OWORD *)(v26 + 8) = v33;
  *(_QWORD *)(v26 + 24) = v34;
  v27 = *((_QWORD *)&v34 + 1);
  v33 = 0u;
  v34 = 0u;
  *(_QWORD *)(v26 + 32) = v27;
  v28 = v35;
  v35 = 0;
  *(_QWORD *)(v26 + 40) = v28;
  v29 = v36;
  v36 = 0;
  *(_QWORD *)(v26 + 48) = v29;
  *(_QWORD *)(v26 + 56) = v37;
  v30 = *((_QWORD *)&v37 + 1);
  v37 = 0u;
  *(_QWORD *)(v26 + 64) = v30;
  v45[0] = (WTF::StringImpl *)v26;
  WTF::ConcurrentWorkQueue::dispatch();
  v32 = v45[0];
  v45[0] = 0;
  if (v32)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 8))(v32);
  API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::~$_0((uint64_t *)&v33, v31);
LABEL_38:
  if (v41 != -1)
    ((void (*)(WTF::StringImpl **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore17ContentExtensions20ContentExtensionRuleELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v41])(v45, &v39);
}

uint64_t *API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::~$_0(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *a1;
  *a1 = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return a1;
}

WTF::StringImpl *API::ContentRuleListStore::removeContentRuleList(uint64_t a1, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  WTF::StringImpl *v9;

  API::constructedPath((API *)(a1 + 16), a2, a3);
  v5 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v8 = v5;
  API::ContentRuleListStore::removeContentRuleListFile(a1, (uint64_t)&v9, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void API::ContentRuleListStore::removeContentRuleListFile(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = *(_QWORD *)(a1 + 40);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  WTF::String::isolatedCopy();
  v6 = *a3;
  *a3 = 0;
  v10 = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34D96E0;
  v7[1] = a1;
  v7[2] = v9;
  v11 = v7;
  v7[3] = v10;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 32))(v5, &v11);
  v8 = v11;
  v11 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
}

uint64_t API::ContentRuleListStore::synchronousRemoveAllContentRuleLists(API::ContentRuleListStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;

  WTF::FileSystemImpl::listDirectory((API::ContentRuleListStore *)((char *)this + 16), a2);
  if (v10)
  {
    v3 = v9;
    v4 = 8 * v10;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v8, v5);
      v6 = v8;
      v8 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v2);
}

uint64_t API::ContentRuleListStore::invalidateContentRuleListVersion(API::ContentRuleListStore *this, const WTF::String *a2, const WTF::String *a3)
{
  WTF::StringImpl *v3;
  int v4;
  uint64_t result;
  int *v6;
  WTF::StringImpl *v7;
  int v8;

  API::constructedPath((API::ContentRuleListStore *)((char *)this + 16), a2, a3);
  v4 = WTF::FileSystemImpl::openFile();
  result = (uint64_t)v7;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      result = WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v4;
  if (v4 != -1)
  {
    WTF::FileSystemImpl::writeToFile();
    return WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v8, v6);
  }
  return result;
}

uint64_t API::ContentRuleListStore::getContentRuleListSource(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  uint64_t v6;
  const WTF::String *v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD *v16;

  v6 = *(_QWORD *)(a1 + 32);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  API::constructedPath((API *)(a1 + 16), a2, v7);
  WTF::String::isolatedCopy();
  v8 = *a3;
  *a3 = 0;
  v15 = v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E34D9730;
  v9[1] = a1;
  v9[2] = v14;
  v16 = v9;
  v9[3] = v15;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v6 + 32))(v6, &v16);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  result = (uint64_t)v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

API::ContentWorld *API::ContentWorld::ContentWorld(API::ContentWorld *this, const WTF::String *a2)
{
  _DWORD *v4;
  unint64_t v5;
  _QWORD v7[3];
  char v8;
  _QWORD *v9;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E34D9280;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = v4;
  v5 = atomic_load(&API::ContentWorld::ContentWorld(WTF::String const&)::once);
  if (v5 != -1)
  {
    v7[0] = &v8;
    v9 = v7;
    std::__call_once(&API::ContentWorld::ContentWorld(WTF::String const&)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<API::ContentWorld::ContentWorld(WTF::String const&)::$_0 &&>>);
  }
  *((_QWORD *)this + 3) = WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  {
    API::sharedWorldIdentifierMap(void)::sharedMap = 0;
  }
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<API::ContentWorld&>(&API::sharedWorldIdentifierMap(void)::sharedMap, (uint64_t *)this + 3, (uint64_t)this, (uint64_t)v7);
  return this;
}

uint64_t WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<API::ContentWorld&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 16 * v27;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v21 = *(unsigned int **)(a3 + 16);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)result));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
  }
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_28:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v28 = *v6;
      if (*v6)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
  v33 = v28 + 16 * v31;
  v32 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

unsigned int *API::ContentWorld::sharedWorldWithName@<X0>(WTF::StringImpl **this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  WTF **v10;
  int i;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  API::ContentWorld *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *result;
  int v24;
  uint64_t v25;
  unint64_t v26;

  if ((byte_1ECE72DF1 & 1) != 0)
  {
    v6 = qword_1ECE72E00;
    if (qword_1ECE72E00)
      goto LABEL_4;
  }
  else
  {
    qword_1ECE72E00 = 0;
    byte_1ECE72DF1 = 1;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand();
  v6 = qword_1ECE72E00;
  if (!qword_1ECE72E00)
  {
    v7 = 0;
    goto LABEL_5;
  }
LABEL_4:
  v7 = *(_DWORD *)(v6 - 8);
LABEL_5:
  v8 = *((_DWORD *)*this + 4);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*this);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = (WTF **)(v6 + 16 * v12);
    v14 = *v13;
    if (*v13 == (WTF *)-1)
    {
      v10 = (WTF **)(v6 + 16 * v12);
      goto LABEL_14;
    }
    if (!v14)
      break;
    if (WTF::equal(v14, *this, a2))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v6 + 16 * v12 + 8) + 8);
      result = (unsigned int *)CFRetain(*(CFTypeRef *)(v22 + 8));
      goto LABEL_32;
    }
LABEL_14:
    v9 = i + v12;
  }
  if (v10)
  {
    *v10 = 0;
    v10[1] = 0;
    --*(_DWORD *)(qword_1ECE72E00 - 16);
    v13 = v10;
  }
  WTF::String::operator=(v13, (WTF::StringImpl *)this);
  v22 = API::Object::newObject(0x38uLL, 50);
  v15 = API::ContentWorld::ContentWorld((API::ContentWorld *)v22, (const WTF::String *)this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v15 + 4, v22);
  v17 = *(unsigned int **)(v22 + 16);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  result = (unsigned int *)v13[1];
  v13[1] = (WTF *)v17;
  if (result)
  {
    do
    {
      v20 = __ldaxr(result);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, result));
    if (!v21)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v16);
    }
  }
  if (qword_1ECE72E00)
    v19 = *(_DWORD *)(qword_1ECE72E00 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(qword_1ECE72E00 - 12) = v19;
  if (qword_1ECE72E00)
    v24 = *(_DWORD *)(qword_1ECE72E00 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(qword_1ECE72E00 - 16) + v24);
  v26 = *(unsigned int *)(qword_1ECE72E00 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
LABEL_31:
      result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand();
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_31;
  }
LABEL_32:
  *a3 = v22;
  return result;
}

API::ContentWorld *API::ContentWorld::defaultClientWorld(API::ContentWorld *this)
{
  API::ContentWorld *result;
  API::ContentWorld *v2;
  uint64_t v3;

    return (API::ContentWorld *)API::ContentWorld::defaultClientWorld(void)::world;
  v2 = (API::ContentWorld *)API::Object::newObject(0x38uLL, 50);
  v3 = 0;
  result = API::ContentWorld::ContentWorld(v2, (const WTF::String *)&v3);
  API::ContentWorld::defaultClientWorld(void)::world = (uint64_t)result;
  return result;
}

void API::ContentWorld::~ContentWorld(API::ContentWorld *this, void *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  _QWORD *v18;
  int v19;
  int i;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  CFTypeRef *v46;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  {
    if (!API::sharedWorldIdentifierMap(void)::sharedMap)
      goto LABEL_10;
    v4 = *((_QWORD *)this + 3);
    v5 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 8);
    v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap + 16 * v9);
    if (v10 != v4)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(_QWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap + 16 * v9);
        ++v11;
        if (v10 == v4)
          goto LABEL_9;
      }
      v9 = *(unsigned int *)(API::sharedWorldIdentifierMap(void)::sharedMap - 4);
    }
LABEL_9:
    if (v9 != *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 4))
    {
      v18 = (_QWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap + 16 * v9);
      v12 = (unsigned int *)v18[1];
      *v18 = -1;
      v18[1] = 0;
      ++*(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 16);
      if (API::sharedWorldIdentifierMap(void)::sharedMap)
        v19 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12) = v19;
      if (API::sharedWorldIdentifierMap(void)::sharedMap)
      {
        v27 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 4);
        if (6 * *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12) < v27 && v27 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&API::sharedWorldIdentifierMap(void)::sharedMap, v27 >> 1, 0);
      }
    }
    else
    {
LABEL_10:
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    API::sharedWorldIdentifierMap(void)::sharedMap = 0;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  if (v13)
  {
    if ((byte_1ECE72DF1 & 1) == 0)
    {
      qword_1ECE72E00 = 0;
      byte_1ECE72DF1 = 1;
      goto LABEL_62;
    }
    v14 = qword_1ECE72E00;
    if (qword_1ECE72E00)
    {
      v15 = *(_DWORD *)(qword_1ECE72E00 - 8);
      v16 = *((_DWORD *)v13 + 4);
      v17 = v16 >= 0x100 ? v16 >> 8 : WTF::StringImpl::hashSlowCase(v13);
      for (i = 0; ; v17 = i + v21)
      {
        v21 = v17 & v15;
        v22 = *(WTF **)(v14 + 16 * v21);
        if (v22 != (WTF *)-1)
        {
          if (!v22)
          {
            v23 = qword_1ECE72E00;
            if (!qword_1ECE72E00)
              goto LABEL_62;
            v24 = qword_1ECE72E00 + 16 * *(unsigned int *)(qword_1ECE72E00 - 4);
            goto LABEL_27;
          }
          if ((WTF::equal(v22, *((const WTF::StringImpl **)this + 4), a3) & 1) != 0)
            break;
        }
        ++i;
      }
      v24 = v14 + 16 * v21;
      v23 = qword_1ECE72E00;
      if (qword_1ECE72E00)
      {
LABEL_27:
        v25 = 0;
        v26 = v23 + 16 * *(unsigned int *)(v23 - 4);
        goto LABEL_37;
      }
      v26 = 0;
      v25 = 1;
LABEL_37:
      if (v26 != v24)
      {
        v29 = *(unsigned int **)(v24 + 8);
        if (v29)
          *(_QWORD *)(v24 + 8) = 0;
        if ((v25 & 1) != 0)
        {
          v30 = 0;
        }
        else
        {
          v30 = v23 + 16 * *(unsigned int *)(v23 - 4);
          if (v30 == v24)
          {
LABEL_58:
            if (v29)
            {
              do
              {
                v38 = __ldaxr(v29);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, v29));
              if (!v39)
              {
                atomic_store(1u, v29);
                WTF::fastFree((WTF *)v29, a2);
              }
            }
            goto LABEL_62;
          }
        }
        if (v30 != v24)
        {
          WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v24, (WTF::StringImpl *)a2);
          v31 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v31)
          {
            do
            {
              v34 = __ldaxr(v31);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v31));
            if (!v35)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, a2);
            }
          }
          v32 = qword_1ECE72E00;
          ++*(_DWORD *)(qword_1ECE72E00 - 16);
          if (v32)
            v33 = *(_DWORD *)(v32 - 12) - 1;
          else
            v33 = -1;
          *(_DWORD *)(v32 - 12) = v33;
          if (qword_1ECE72E00)
          {
            v36 = *(_DWORD *)(qword_1ECE72E00 - 4);
            if (6 * *(_DWORD *)(qword_1ECE72E00 - 12) < v36 && v36 >= 9)
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v36 >> 1);
          }
        }
        goto LABEL_58;
      }
    }
  }
LABEL_62:
  v40 = (uint64_t *)((char *)this + 40);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v59);
  v41 = *((_QWORD *)this + 5);
  if (v41)
  {
    v42 = *(unsigned int *)(v41 - 4);
    v43 = v41 + 8 * v42;
  }
  else
  {
    v43 = 0;
    v42 = 0;
  }
  v54 = (char *)this + 40;
  v55 = v43;
  v56 = v43;
  v57 = v43;
  v58 = v41 + 8 * v42;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v54);
  while (v60 != v55)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v60 + 8);
    if (v45)
      v46 = (CFTypeRef *)(v45 - 16);
    else
      v46 = 0;
    CFRetain(v46[1]);
    WebKit::WebUserContentControllerProxy::contentWorldDestroyed((WebKit::WebUserContentControllerProxy *)v46, this);
    if (v45)
      CFRelease(*(CFTypeRef *)(v45 - 8));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v59);
  }
  if (v12)
  {
    do
    {
      v47 = __ldaxr(v12);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v12));
    if (!v48)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v44);
    }
  }
  if (*v40)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v40, v44);
  v49 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v44);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = *((_QWORD *)this + 2);
  if (v50)
  {
    *(_QWORD *)(v50 + 8) = 0;
    v51 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v51)
    {
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, v44);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  API::ContentWorld::~ContentWorld(this, a2, a3);
  JUMPOUT(0x19AEB936CLL);
}

API::ContextMenuElementInfo *API::ContextMenuElementInfo::ContextMenuElementInfo(API::ContextMenuElementInfo *this, const WebKit::InteractionInformationAtPosition *a2, NSDictionary *a3)
{
  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D92A8;
  WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((API::ContextMenuElementInfo *)((char *)this + 16), a2);
  *((_QWORD *)this + 82) = a3;
  if (a3)
    CFRetain(a3);
  return this;
}

void API::DataTask::~DataTask(WebKit::ProcessThrottlerActivity **this)
{
  void *v2;
  WebKit::ProcessThrottlerActivity *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *this = (WebKit::ProcessThrottlerActivity *)&off_1E34D92D0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 13, 0);
  v3 = this[12];
  this[12] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
      (*(void (**)(WebKit::ProcessThrottlerActivity *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 2);
  }
  v4 = (unsigned int *)this[9];
  this[9] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v2);
    }
  }
  v7 = this[4];
  this[4] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (unsigned int *)this[3];
  this[3] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v2);
    }
  }
}

{
  API::DataTask::~DataTask(this);
  JUMPOUT(0x19AEB936CLL);
}

WebKit::ProcessThrottlerActivity *API::DataTask::cancel(API::DataTask *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*((_BYTE *)this + 88))
        WebKit::NetworkProcessProxy::cancelDataTask(v3, *((_QWORD *)this + 2), *((_QWORD *)this + 10));
    }
  }
  return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 13, 0);
}

WTF::StringImpl *API::DataTask::networkProcessCrashed(WebKit::ProcessThrottlerActivity **this)
{
  WebKit::ProcessThrottlerActivity *v2;
  WTF::StringImpl *v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  CFTypeRef cf;

  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 13, 0);
  v2 = this[12];
  WebCore::createInternalError();
  (*(void (**)(WebKit::ProcessThrottlerActivity *, WebKit::ProcessThrottlerActivity **, WTF::StringImpl **))(*(_QWORD *)v2 + 48))(v2, this, &v8);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  v5 = v10;
  v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t API::DataTask::DataTask(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  WebKit::ProcessThrottlerActivity *v25;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D92D0;
  *(_QWORD *)(a1 + 16) = a2;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v10;
  WTF::URL::URL(a1 + 32, a4);
  v11 = *(_QWORD *)(a1 + 24);
  if (!v11)
  {
    *(_QWORD *)(a1 + 72) = 0;
    v16 = (_BYTE *)(a1 + 80);
LABEL_9:
    v18 = 0;
    *v16 = 0;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    v13 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(v12 + 248));
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 8), v13);
    v12 = *(_QWORD *)(v13 + 8);
    if (v12)
    {
      do
        v14 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v14 + 1, (unsigned int *)v12));
    }
  }
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 72) = v12;
  v16 = (_BYTE *)(a1 + 80);
  if (!v15)
    goto LABEL_9;
  v17 = *(_QWORD *)(v15 + 8);
  if (!v17)
    goto LABEL_9;
  *(_QWORD *)v16 = *(_QWORD *)(*(_QWORD *)(v17 + 248) + 24);
  v18 = 1;
LABEL_10:
  *(_BYTE *)(a1 + 88) = v18;
  v19 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)v19 = off_1E34D9480;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = v19;
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v22 = (unsigned int *)(v21 + 16);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      v24 = v21 + 200;
      v25 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
      WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v25, v24, "WKDataTask", 11, a5, 0);
      std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 104), v25);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v22);
    }
  }
  return a1;
}

void API::DebuggableInfo::~DebuggableInfo(API::DebuggableInfo *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  API::DebuggableInfo::~DebuggableInfo(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)47>::type()
{
  return 47;
}

uint64_t API::ObjectImpl<(API::Object::Type)48>::type()
{
  return 48;
}

uint64_t API::ObjectImpl<(API::Object::Type)49>::type()
{
  return 49;
}

uint64_t API::ObjectImpl<(API::Object::Type)50>::type()
{
  return 50;
}

uint64_t API::ObjectImpl<(API::Object::Type)54>::type()
{
  return 54;
}

uint64_t API::ObjectImpl<(API::Object::Type)55>::type()
{
  return 55;
}

void API::ContextMenuElementInfo::~ContextMenuElementInfo(API::ContextMenuElementInfo *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((API::ContextMenuElementInfo *)((char *)this + 16), a2);
}

{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((API::ContextMenuElementInfo *)((char *)this + 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)51>::type()
{
  return 51;
}

uint64_t API::ObjectImpl<(API::Object::Type)57>::type()
{
  return 57;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore17ContentExtensions20ContentExtensionRuleELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  char v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WTF **)a1;
    v5 = 152 * v3;
    do
    {
      v6 = *((unsigned int *)v4 + 36);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_1E34D9348[v6])(&v10, (char *)v4 + 32);
      *((_DWORD *)v4 + 36) = -1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4 + 16, a2);
      v7 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 152);
      v5 -= 152;
    }
    while (v5);
  }
  v8 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, void *a2)
{
  void *v3;

  WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 24, a2);
  return WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, v3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D93A0[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 104) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 112);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D9348[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 112);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D9348[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 112) = 1;
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(WTF::StringImpl **result, WTF::StringImpl **a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *result;
  v5 = *((unsigned int *)*result + 28);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
      return WTF::String::operator=(a2, a3);
    result = (WTF::StringImpl **)((uint64_t (*)(char *, WTF::StringImpl *))off_1E34D9348[v5])(&v7, v4);
  }
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  *((_DWORD *)v4 + 28) = 2;
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(WTF::StringImpl **result, WTF::StringImpl **a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *result;
  v5 = *((unsigned int *)*result + 28);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
      return WTF::String::operator=(a2, a3);
    result = (WTF::StringImpl **)((uint64_t (*)(char *, WTF::StringImpl *))off_1E34D9348[v5])(&v7, v4);
  }
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  *((_DWORD *)v4 + 28) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 112);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 4)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D9348[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 112) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 112);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 5)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D9348[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 112) = 5;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 6)
  {
    ((void (*)(char *, uint64_t))off_1E34D9348[v5])(&v21, v4);
LABEL_15:
    *(_DWORD *)(v4 + 112) = -1;
    *(_BYTE *)v4 = *(_BYTE *)a3;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v17 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(v4 + 8) = v17;
    LODWORD(v17) = *(_DWORD *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = 0;
    *(_DWORD *)(v4 + 16) = v17;
    LODWORD(v17) = *(_DWORD *)(a3 + 20);
    *(_DWORD *)(a3 + 20) = 0;
    *(_DWORD *)(v4 + 20) = v17;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    v18 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(v4 + 24) = v18;
    LODWORD(v18) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(a3 + 32) = 0;
    *(_DWORD *)(v4 + 32) = v18;
    result = *(double *)(a3 + 36);
    *(_DWORD *)(a3 + 36) = 0;
    *(double *)(v4 + 36) = result;
    *(_DWORD *)(v4 + 112) = 6;
    return result;
  }
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v7 = (uint64_t *)(a2 + 8);
  v8 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v8)
  {
    v9 = *v7;
    v10 = 24 * v8;
    do
    {
      v11 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, uint64_t))off_1E34D9388[v11])(&v19, v9);
      *(_DWORD *)(v9 + 16) = -1;
      v9 += 24;
      v10 -= 24;
    }
    while (v10);
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v7, (_DWORD *)(a3 + 8));
  v12 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(a2 + 24);
    v14 = 24 * v12;
    do
    {
      v15 = *(unsigned int *)(v13 + 16);
      if ((_DWORD)v15 != -1)
        ((void (*)(char *, uint64_t))off_1E34D9388[v15])(&v20, v13);
      *(_DWORD *)(v13 + 16) = -1;
      v13 += 24;
      v14 -= 24;
    }
    while (v14);
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2 + 24, (_DWORD *)(a3 + 24));
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 112);
  if ((_DWORD)v5 == -1)
  {
LABEL_7:
    *(_DWORD *)(v4 + 112) = -1;
    *(_BYTE *)v4 = *(_BYTE *)a3;
    *(_BYTE *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 104) = -1;
    v10 = *(unsigned int *)(a3 + 104);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34D9450[v10])(&v14, v4 + 8, a3 + 8);
      *(_DWORD *)(v4 + 104) = v10;
    }
    *(_DWORD *)(v4 + 112) = 7;
    return result;
  }
  if ((_DWORD)v5 != 7)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D9348[v5])(&v13, v4);
    goto LABEL_7;
  }
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v7 = a2 + 8;
  v8 = *(unsigned int *)(a2 + 104);
  v9 = *(unsigned int *)(a3 + 104);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      return result;
  }
  else if ((_DWORD)v9 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D93A0[v8])(&v12, v7);
    *(_DWORD *)(a2 + 104) = -1;
    return result;
  }
  v11 = v7;
  return ((uint64_t (*)(uint64_t *))off_1E34D9410[v9])(&v11);
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl **result, WTF::StringImpl **a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *result;
  v5 = *((unsigned int *)*result + 24);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WTF::String::operator=(a2, a3);
    result = (WTF::StringImpl **)((uint64_t (*)(char *, WTF::StringImpl *))off_1E34D93A0[v5])(&v7, v4);
  }
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  *((_DWORD *)v4 + 24) = 0;
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl **result, WTF::StringImpl **a2, uint64_t *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *result;
  v5 = *((unsigned int *)*result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      WTF::String::operator=(a2, (WTF::StringImpl *)a3);
      return WTF::String::operator=(a2 + 1, (WTF::StringImpl *)(a3 + 1));
    }
    result = (WTF::StringImpl **)((uint64_t (*)(char *, WTF::StringImpl *))off_1E34D93A0[v5])(&v9, v4);
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)v4 = v7;
  v8 = a3[1];
  a3[1] = 0;
  *((_QWORD *)v4 + 1) = v8;
  *((_DWORD *)v4 + 24) = 1;
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **result;
  uint64_t v11;
  char v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 96);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1E34D93A0[v5])(&v13, v4);
LABEL_7:
    *(_DWORD *)(v4 + 96) = -1;
    result = (WTF::StringImpl **)std::__variant_detail::__alt<2ul,WebCore::ContentExtensions::RedirectAction::URLTransformAction>::__alt[abi:sn180100]<WebCore::ContentExtensions::RedirectAction::URLTransformAction>(v4, (uint64_t *)a3);
    *(_DWORD *)(v4 + 96) = 2;
    return result;
  }
  WTF::String::operator=((WTF::StringImpl **)a2, (WTF::StringImpl *)a3);
  WTF::String::operator=((WTF::StringImpl **)(a2 + 8), (WTF::StringImpl *)(a3 + 8));
  WTF::String::operator=((WTF::StringImpl **)(a2 + 16), (WTF::StringImpl *)(a3 + 16));
  WTF::String::operator=((WTF::StringImpl **)(a2 + 24), (WTF::StringImpl *)(a3 + 24));
  v7 = *(_DWORD *)(a3 + 32);
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(a3 + 36);
  *(_DWORD *)(a2 + 32) = v7;
  v8 = *(unsigned int *)(a2 + 72);
  v9 = *(unsigned int *)(a3 + 72);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      goto LABEL_10;
LABEL_9:
    v11 = a2 + 40;
    ((void (*)(uint64_t *))off_1E34D9430[v9])(&v11);
    goto LABEL_10;
  }
  if ((_DWORD)v9 != -1)
    goto LABEL_9;
  ((void (*)(char *, uint64_t))off_1E34D93C0[v8])(&v12, a2 + 40);
  *(_DWORD *)(a2 + 72) = -1;
LABEL_10:
  WTF::String::operator=((WTF::StringImpl **)(a2 + 80), (WTF::StringImpl *)(a3 + 80));
  return WTF::String::operator=((WTF::StringImpl **)(a2 + 88), (WTF::StringImpl *)(a3 + 88));
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl **result, WTF::StringImpl **a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *result;
  v5 = *((unsigned int *)*result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
      return WTF::String::operator=(a2, a3);
    result = (WTF::StringImpl **)((uint64_t (*)(char *, WTF::StringImpl *))off_1E34D93A0[v5])(&v7, v4);
  }
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  *((_DWORD *)v4 + 24) = 3;
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl **result, WTF::StringImpl **a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *result;
  v5 = *((unsigned int *)*result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WTF::String::operator=(a2, a3);
    result = (WTF::StringImpl **)((uint64_t (*)(char *, WTF::StringImpl *))off_1E34D93C0[v5])(&v7, v4);
  }
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  *((_DWORD *)v4 + 8) = 0;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOST_EEEDcSL_DpT0_(WTF *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E34D93C0[v5])(&v13, v4);
LABEL_11:
    *(_DWORD *)(v4 + 32) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v11 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v11;
    LODWORD(v11) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v11;
    LODWORD(v11) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v11;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    v12 = a3[2];
    a3[2] = 0;
    *(_QWORD *)(v4 + 16) = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = 0;
    *(_DWORD *)(v4 + 24) = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 7) = 0;
    *(_DWORD *)(v4 + 28) = v12;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  v7 = *(_DWORD *)(a2 + 12);
  if (v7)
    WTF::VectorDestructor<true,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue>::destruct(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 24 * v7));
  v8 = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    WTF::fastFree(v8, (void *)a2);
  }
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v9;
  v10 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v10)
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a2 + 16), (WTF::StringImpl *)(*(_QWORD *)(a2 + 16) + 8 * v10));
  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2 + 16, (_DWORD *)a3 + 4);
}

uint64_t std::__variant_detail::__alt<2ul,WebCore::ContentExtensions::RedirectAction::URLTransformAction>::__alt[abi:sn180100]<WebCore::ContentExtensions::RedirectAction::URLTransformAction>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 8);
  v8 = *((_WORD *)a2 + 18);
  *(_BYTE *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 72) = -1;
  v9 = *((unsigned int *)a2 + 18);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *))off_1E34D9440[v9])(&v13);
    *(_DWORD *)(a1 + 72) = v9;
  }
  v10 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(a1 + 88) = v11;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<2ul,WebCore::ContentExtensions::RedirectAction::URLTransformAction>::__alt[abi:sn180100]<WebCore::ContentExtensions::RedirectAction::URLTransformAction>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

WTF::StringImpl *API::DataTaskClient::didReceiveChallenge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  CFTypeRef v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  CFTypeRef cf;

  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v10);
  cf = 0;
  v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, 3, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t API::DataTaskClient::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t API::DataTaskClient::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = &off_1E34D94C8;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

NSObject *API::getContentRuleListSourceFromMappedFile(NSObject *result, uint64_t a2)
{
  NSObject *v2;
  unint64_t v4;
  WebKit::NetworkCache::Data *v5;
  unint64_t v6;
  int isa_low;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = result;
  if (*(_DWORD *)a2 <= 8u || !*(_QWORD *)(a2 + 8))
    goto LABEL_16;
  if (*(_DWORD *)a2 >= 0xCu)
    v4 = 64;
  else
    v4 = 48;
  v5 = (WebKit::NetworkCache::Data *)(a2 + 72);
  result = WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Data *)(a2 + 72));
  if (v6 <= v4)
    goto LABEL_18;
  isa_low = LOBYTE(result[v4 / 8].isa);
  v8 = v4 | 1;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = v9 - 1;
  if (!isa_low)
  {
    if ((v10 & 1) == 0)
    {
      result = WebKit::NetworkCache::Data::span(v5);
      if (v12 >= v8 && v12 - v8 >= v10)
        return WTF::String::String();
      goto LABEL_18;
    }
LABEL_16:
    v2->isa = 0;
    return result;
  }
  result = WebKit::NetworkCache::Data::span(v5);
  if (v11 >= v8 && (!v9 || v11 - v8 >= v10))
    return WTF::String::String();
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D94F0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D94F0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 16);
  v2 = 0;
  if ((_MergedGlobals_95 & 1) == 0)
  {
    qword_1ECE72DF8 = (uint64_t)&off_1E34D9780;
    _MergedGlobals_95 = 1;
  }
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()(v1, &v2);
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = &off_1E34D9518;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34D9518;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::call(_QWORD *a1)
{
  CFTypeRef *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = (CFTypeRef *)a1[1];
  v2 = a1[4];
  a1[4] = 0;
  v4 = v2;
  API::ContentRuleListStore::compileContentRuleList(v1, (const WTF::String *)(a1 + 3), (const WTF::String *)(a1 + 2), &v4);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#3},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D9540;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#3},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D9540;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#3},void>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 16);
  v2 = 0;
  if ((_MergedGlobals_95 & 1) == 0)
  {
    qword_1ECE72DF8 = (uint64_t)&off_1E34D9780;
    _MergedGlobals_95 = 1;
  }
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()(v1, &v2);
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#4},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = &off_1E34D9568;
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)a1[12];
  if (v4)
    os_release(v4);
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34D9590;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D9590;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0,void>::call(_QWORD *a1, const WTF::String *a2)
{
  const WTF::String *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::RunLoop *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  void *v20;
  WTF::StringImpl *v21;
  void *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl **v26;
  uint64_t v27;
  _QWORD v28[2];
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;

  v30 = 0;
  v31 = 0;
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(a1 + 2), a2);
  if (HIDWORD(v27))
  {
    v4 = v26;
    v5 = 8 * HIDWORD(v27);
    do
    {
      if (*v4 && WTF::StringImpl::startsWith())
      {
        if (*v4)
        {
          WTF::StringImpl::substring(*v4);
          v6 = v32;
        }
        else
        {
          v6 = 0;
        }
        v29 = v6;
        WTF::FileSystemImpl::decodeFromFilename((WTF::FileSystemImpl *)&v29, v3);
        LODWORD(v7) = HIDWORD(v31);
        if (HIDWORD(v31) == (_DWORD)v31)
        {
          v11 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v30, HIDWORD(v31) + 1, (unint64_t)&v32);
          v7 = HIDWORD(v31);
          v12 = v30;
          v13 = *v11;
          *v11 = 0;
          *(_QWORD *)(v12 + 8 * v7) = v13;
        }
        else
        {
          v8 = v32;
          v32 = 0;
          *(_QWORD *)(v30 + 8 * HIDWORD(v31)) = v8;
        }
        HIDWORD(v31) = v7 + 1;
        v9 = v32;
        v32 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v3);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = v29;
        v29 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v3);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v14 = (WTF::RunLoop *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v3);
  WTF::RunLoop::main(v14);
  v15 = a1[1];
  a1[1] = 0;
  v16 = a1[3];
  a1[3] = 0;
  v17 = v30;
  v30 = 0;
  v18 = v31;
  v31 = 0;
  v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v19 = off_1E34D95B8;
  *((_QWORD *)v19 + 1) = v15;
  v26 = 0;
  v27 = 0;
  *((_QWORD *)v19 + 2) = v16;
  *((_QWORD *)v19 + 3) = v17;
  v28[0] = 0;
  v28[1] = 0;
  *((_QWORD *)v19 + 4) = v18;
  v32 = v19;
  WTF::RunLoop::dispatch();
  v21 = v32;
  v32 = 0;
  if (v21)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v21 + 8))(v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v20);
  v23 = v27;
  v27 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v26;
  v26 = 0;
  if (v24)
    CFRelease(v24[1]);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v22);
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E34D95B8;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34D95B8;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4[2];

  v4[0] = a1[3];
  v1 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  v4[1] = v1;
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a1 + 2, v4);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34D95E0;
  API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E34D95E0;
  API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::~$_0(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::call(_QWORD *a1)
{
  _QWORD *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  WTF::StringImpl *v8;
  int *v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  const WTF::String *v24;
  const WTF::String *v25;
  const WTF::String *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  char v34;
  int v35;
  __int128 v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void *object;
  __int128 v44;
  char v45;
  __int128 v46;
  _BYTE *v47;
  __int128 v48;
  _BYTE v49[25];
  _BYTE v50[64];
  uint64_t v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v2 = &v52;
  WTF::FileSystemImpl::openTemporaryFile();
  if (v53 == -1)
  {
    WTFLogAlways();
LABEL_9:
    if ((_MergedGlobals_95 & 1) == 0)
    {
      qword_1ECE72DF8 = (uint64_t)&off_1E34D9780;
      _MergedGlobals_95 = 1;
    }
    *(_QWORD *)&v27 = 3;
    *((_QWORD *)&v27 + 1) = &qword_1ECE72DF8;
    goto LABEL_12;
  }
  v2 = &v53;
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  v56 = v3;
  v57 = v3;
  v54 = v3;
  v55 = v3;
  if (WTF::FileSystemImpl::writeToFile() == -1)
    goto LABEL_8;
  *(_DWORD *)v50 = 17;
  memset(&v50[8], 0, 44);
  *(_QWORD *)&v50[56] = 0;
  v51 = 0;
  *(_QWORD *)&v46 = &off_1E34D9608;
  DWORD2(v46) = v53;
  v47 = v50;
  v48 = 0u;
  memset(v49, 0, sizeof(v49));
  v5 = WebCore::ContentExtensions::compileRuleList();
  if ((_DWORD)v5)
  {
    v6 = v4;
    WTFLogAlways();
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v53, v7);
    *(_QWORD *)&v27 = v5;
    *((_QWORD *)&v27 + 1) = v6;
LABEL_12:
    v10 = 1;
    v35 = 1;
    goto LABEL_13;
  }
  if (v49[24])
  {
LABEL_8:
    WTFLogAlways();
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v53, v9);
    goto LABEL_9;
  }
  v23 = 64;
  if (*(_DWORD *)v50 < 0xCu)
    v23 = 48;
  WebKit::NetworkCache::adoptAndMapFile((WebKit::NetworkCache *)v53, 0, vaddvq_s64(vaddq_s64(*(int64x2_t *)&v50[8], *(int64x2_t *)&v50[24])) + *(_QWORD *)&v50[40] + v23, (uint64_t)&object);
  if (!object
    || (v2 = a1 + 2,
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)(a1 + 2), v24),
        (WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v52, (const WTF::String *)(a1 + 2), v25) & 1) == 0))
  {
    WTFLogAlways();
    goto LABEL_41;
  }
  if ((WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath((WTF::FileSystemImpl *)(a1 + 2), v26) & 1) == 0)
  {
LABEL_41:
    if ((_MergedGlobals_95 & 1) == 0)
    {
      qword_1ECE72DF8 = (uint64_t)&off_1E34D9780;
      _MergedGlobals_95 = 1;
    }
    *(_QWORD *)&v27 = 3;
    *((_QWORD *)&v27 + 1) = &qword_1ECE72DF8;
    v10 = 1;
    v35 = 1;
    goto LABEL_44;
  }
  v40 = *(_OWORD *)&v50[32];
  v41 = *(_OWORD *)&v50[48];
  v42 = v51;
  v38 = *(_OWORD *)v50;
  v39 = *(_OWORD *)&v50[16];
  v2 = object;
  if (object)
  {
    os_retain(object);
    v36 = v44;
    v37 = v45;
    v29 = v40;
    v30 = v41;
    v31 = v42;
    v27 = v38;
    v28 = v39;
    os_retain(v2);
    v33 = v36;
    v34 = v37;
    os_release(v2);
  }
  else
  {
    v29 = *(_OWORD *)&v50[32];
    v30 = *(_OWORD *)&v50[48];
    v31 = v51;
    v27 = *(_OWORD *)v50;
    v28 = *(_OWORD *)&v50[16];
    v33 = v44;
    v34 = v45;
  }
  v10 = 0;
  v32 = v2;
  v35 = 0;
LABEL_44:
  if (object)
    os_release(object);
LABEL_13:
  v11 = v52;
  v52 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      v11 = (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::RunLoop::main(v11);
  if (v10)
  {
    v12 = a1[1];
    a1[1] = 0;
    *(_OWORD *)v50 = v27;
    v13 = a1[8];
    a1[8] = 0;
    v14 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v14 = &off_1E34D9680;
    *(_QWORD *)(v14 + 8) = v12;
    *(_OWORD *)(v14 + 16) = *(_OWORD *)v50;
    *(_QWORD *)(v14 + 32) = v13;
    *(_QWORD *)&v46 = v14;
    WTF::RunLoop::dispatch();
    v15 = v46;
    *(_QWORD *)&v46 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = 1;
LABEL_30:
    ((void (*)(_BYTE *, __int128 *))off_1E34D96C0[v16])(v50, &v27);
    return;
  }
  v17 = a1[1];
  a1[1] = 0;
  v18 = a1[3];
  a1[3] = 0;
  *(_OWORD *)&v50[32] = v29;
  *(_OWORD *)&v50[48] = v30;
  v51 = v31;
  *(_OWORD *)v50 = v27;
  *(_OWORD *)&v50[16] = v28;
  if (v2)
    os_retain(v2);
  v46 = v33;
  LOBYTE(v47) = v34;
  v19 = a1[8];
  a1[8] = 0;
  v20 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)v20 = &off_1E34D96A8;
  *(_QWORD *)(v20 + 8) = v17;
  *(_QWORD *)(v20 + 16) = v18;
  v21 = *(_OWORD *)v50;
  *(_OWORD *)(v20 + 40) = *(_OWORD *)&v50[16];
  *(_OWORD *)(v20 + 56) = *(_OWORD *)&v50[32];
  *(_OWORD *)(v20 + 72) = *(_OWORD *)&v50[48];
  v22 = v51;
  *(_OWORD *)(v20 + 24) = v21;
  *(_QWORD *)(v20 + 88) = v22;
  *(_QWORD *)(v20 + 96) = v2;
  if (v2)
    os_retain(v2);
  *(_OWORD *)(v20 + 104) = v46;
  *(_BYTE *)(v20 + 120) = (_BYTE)v47;
  *(_QWORD *)(v20 + 128) = v19;
  WTF::RunLoop::dispatch();
  *(_QWORD *)&v38 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v2)
    os_release(v2);
  v16 = v35;
  if (v35 != -1)
    goto LABEL_30;
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::~CompilationClient()
{
  JUMPOUT(0x19AEB936CLL);
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeSource(uint64_t a1, uint64_t *a2)
{
  int v4;
  dispatch_data_t v5;
  uint64_t v6;
  size_t v7;
  dispatch_data_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  dispatch_data_t v12;
  dispatch_data_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char buffer;

  if (*a2)
    v4 = (*(unsigned __int8 *)(*a2 + 16) >> 2) & 1;
  else
    LOBYTE(v4) = 1;
  buffer = v4;
  v5 = dispatch_data_create(&buffer, 1uLL, 0, 0);
  v13 = v5;
  v14 = 0;
  v15 = 1;
  v16 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)&v13);
  if (v5)
    os_release(v5);
  ++*(_QWORD *)(a1 + 24);
  v6 = *a2;
  if (*a2)
  {
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      v7 = 2 * *(unsigned int *)(v6 + 4);
      v8 = dispatch_data_create(*(const void **)(v6 + 8), v7, 0, 0);
      v13 = v8;
      v14 = 0;
      v15 = v7;
      v16 = 0;
      API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)&v13);
      if (v8)
        os_release(v8);
      v9 = *a2;
      if (*a2)
        v9 = 2 * *(unsigned int *)(v9 + 4);
      goto LABEL_16;
    }
    v10 = *(const void **)(v6 + 8);
    v11 = *(unsigned int *)(v6 + 4);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = dispatch_data_create(v10, v11, 0, 0);
  v13 = v12;
  v14 = 0;
  v15 = v11;
  v16 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)&v13);
  if (v12)
    os_release(v12);
  v9 = *a2;
  if (*a2)
    v9 = *(unsigned int *)(v9 + 4);
LABEL_16:
  *(_QWORD *)(a1 + 24) += v9;
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeActions(uint64_t a1, uint64_t a2)
{
  size_t v3;
  dispatch_data_t v4;
  _QWORD v5[3];
  char v6;

  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(a1 + 32) += v3;
  v4 = dispatch_data_create(*(const void **)a2, v3, 0, 0);
  v5[0] = v4;
  v5[1] = 0;
  v5[2] = v3;
  v6 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)v5);
  if (v4)
    os_release(v4);
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeURLFiltersBytecode(uint64_t a1, uint64_t a2)
{
  size_t v3;
  dispatch_data_t v4;
  _QWORD v5[3];
  char v6;

  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(a1 + 40) += v3;
  v4 = dispatch_data_create(*(const void **)a2, v3, 0, 0);
  v5[0] = v4;
  v5[1] = 0;
  v5[2] = v3;
  v6 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)v5);
  if (v4)
    os_release(v4);
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeTopURLFiltersBytecode(uint64_t a1, uint64_t a2)
{
  size_t v3;
  dispatch_data_t v4;
  _QWORD v5[3];
  char v6;

  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(a1 + 48) += v3;
  v4 = dispatch_data_create(*(const void **)a2, v3, 0, 0);
  v5[0] = v4;
  v5[1] = 0;
  v5[2] = v3;
  v6 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)v5);
  if (v4)
    os_release(v4);
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeFrameURLFiltersBytecode(uint64_t a1, uint64_t a2)
{
  size_t v3;
  dispatch_data_t v4;
  _QWORD v5[3];
  char v6;

  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(a1 + 56) += v3;
  v4 = dispatch_data_create(*(const void **)a2, v3, 0, 0);
  v5[0] = v4;
  v5[1] = 0;
  v5[2] = v3;
  v6 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)v5);
  if (v4)
    os_release(v4);
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  dispatch_data_t v6;
  int *v7;
  _QWORD v8[3];
  char v9;
  void *buffer;
  size_t size;

  v3 = MEMORY[0x1E0C80A78](a1, a2, a3);
  v4 = *(unsigned int **)(v3 + 16);
  *(_OWORD *)(v4 + 2) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v4 + 6) = *(_OWORD *)(v3 + 40);
  *((_QWORD *)v4 + 5) = *(_QWORD *)(v3 + 56);
  WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&buffer);
  MEMORY[0x19AEAB290](&buffer, *v4);
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  MEMORY[0x19AEAB290](&buffer, v4[12]);
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  v5 = size;
  v6 = dispatch_data_create(buffer, size, 0, 0);
  v8[0] = v6;
  v8[1] = 0;
  v8[2] = v5;
  v9 = 0;
  WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&buffer);
  if (!*(_BYTE *)(v3 + 64) && WTF::FileSystemImpl::seekFile() == -1)
  {
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)(v3 + 8), v7);
    *(_BYTE *)(v3 + 64) = 1;
  }
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(v3, (uint64_t)v8);
  if (v6)
    os_release(v6);
}

uint64_t API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  WTF::FileSystemImpl *v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char v9;

  if (!*(_BYTE *)(result + 64))
  {
    v3 = result;
    v4 = (WTF::FileSystemImpl *)(result + 8);
    v5 = *(_DWORD *)(result + 8);
    v9 = 1;
    v6 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v6 = off_1E34D9658;
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 16) = &v9;
    v8 = v6;
    WebKit::NetworkCache::Data::apply(a2, (uint64_t)&v8);
    result = v8;
    v8 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (!v9)
    {
      result = WTF::FileSystemImpl::closeFile(v4, v7);
      *(_BYTE *)(v3 + 64) = 1;
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<API::writeDataToFile(WebKit::NetworkCache::Data const&,int)::$_0,BOOL,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1)
{
  uint64_t v2;

  v2 = WTF::FileSystemImpl::writeToFile();
  if (v2 == -1)
    **(_BYTE **)(a1 + 16) = 0;
  return v2 != -1;
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D9680;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D9680;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = 0;
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()((uint64_t *)(a1 + 32), &v1);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = &off_1E34D96A8;
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)a1[12];
  if (v4)
    os_release(v4);
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34D96A8;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 12);
  if (v4)
    os_release(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  API::createExtension(&v4, (uint64_t *)(a1 + 16), a1 + 24);
  v2 = v4;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v3 = v2;
  std::system_category();
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()((uint64_t *)(a1 + 128), &v3);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  CFRelease(*(CFTypeRef *)(v2 + 8));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3API10MappedDataENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 72);
  if (v2)
    os_release(v2);
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34D96E0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D96E0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0,void>::call(_QWORD *a1, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::RunLoop *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v2 = a1[1];
  a1[1] = 0;
  v3 = a1[3];
  a1[3] = 0;
  v4 = WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)(a1 + 2), a2);
  if ((v4 & 1) != 0)
  {
    v5 = (WTF::RunLoop *)std::system_category();
    WTF::RunLoop::main(v5);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v6 = &off_1E34D9708;
    v6[1] = v2;
    v6[2] = v3;
    v6[3] = 0;
    v6[4] = v5;
    v9 = v6;
  }
  else
  {
    if ((_MergedGlobals_95 & 1) == 0)
    {
      qword_1ECE72DF8 = (uint64_t)&off_1E34D9780;
      _MergedGlobals_95 = 1;
    }
    WTF::RunLoop::main((WTF::RunLoop *)v4);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v7 = &off_1E34D9708;
    v7[1] = v2;
    v7[2] = v3;
    v7[3] = 4;
    v7[4] = &qword_1ECE72DF8;
    v9 = v7;
  }
  WTF::RunLoop::dispatch();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0::operator()(void)::{lambda(std::__1)#1}::operator()(std::__1)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D9708;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0::operator()(void)::{lambda(std::__1)#1}::operator()(std::__1)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D9708;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0::operator()(void)::{lambda(std::__1)#1}::operator()(std::__1)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1[3];
  v2 = a1[4];
  v3 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34D9730;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D9730;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _BYTE v6[72];
  void *object;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1[1];
  a1[1] = 0;
  v2 = a1[3];
  a1[3] = 0;
  v9 = v1;
  v10 = v2;
  API::openAndMapContentRuleList((API *)v6, (const WTF::String *)(a1 + 2));
  if (v8)
  {
    API::getContentRuleListSourceFromMappedFile(&v5, (uint64_t)v6);
    API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()((WTF::RunLoop *)&v9);
    v4 = v5;
    v5 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    if (v8 && object)
      os_release(object);
  }
  else
  {
    API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()((WTF::RunLoop *)&v9);
    v5 = 0;
  }
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
}

void API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::RunLoop *a1)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  WTF::RunLoop::main(a1);
  v2 = *(_OWORD *)a1;
  *(_OWORD *)a1 = 0u;
  v4 = v2;
  WTF::String::isolatedCopy();
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v3 = &off_1E34D9758;
  *(_OWORD *)(v3 + 8) = v4;
  v6 = v3;
  *(_QWORD *)(v3 + 24) = v5;
  WTF::RunLoop::dispatch();
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

_QWORD *WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34D9758;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D9758;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  v2 = (uint64_t *)(a1 + 16);
  v3 = *(WTF::StringImpl **)(a1 + 24);
  if (v3)
    *(_DWORD *)v3 += 2;
  v6 = v3;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(v2, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void API::contentRuleListStoreErrorCategory(void)::ContentRuleListStoreErrorCategory::~ContentRuleListStoreErrorCategory(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x19AEB936CLL);
}

const char *API::contentRuleListStoreErrorCategory(void)::ContentRuleListStoreErrorCategory::name()
{
  return "content extension store";
}

char **API::contentRuleListStoreErrorCategory(void)::ContentRuleListStoreErrorCategory::message@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  char *v2;
  char **result;

  switch(a1)
  {
    case 1:
      v2 = "Unspecified error during lookup.";
      goto LABEL_7;
    case 2:
      v2 = "Version of file does not match version of interpreter.";
      goto LABEL_7;
    case 3:
      v2 = "Unspecified error during compile.";
      goto LABEL_7;
    case 4:
      v2 = "Unspecified error during remove.";
LABEL_7:
      result = std::string::basic_string[abi:sn180100]<0>((char **)a2, v2);
      break;
    default:
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      break;
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand()
{
  int v0;

  if (qword_1ECE72E00 && (v0 = *(_DWORD *)(qword_1ECE72E00 - 4)) != 0)
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE72E00 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u);
}

_DWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  v2 = qword_1ECE72E00;
  if (qword_1ECE72E00)
  {
    v3 = *(_DWORD *)(qword_1ECE72E00 - 4);
    v4 = *(_DWORD *)(qword_1ECE72E00 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE72E00 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE72E00 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    while (1)
    {
      v8 = (WTF::StringImpl **)(v2 + 16 * v7);
      v9 = *v8;
      if (*v8 != (WTF::StringImpl *)-1)
      {
        if (v9)
        {
          v15 = qword_1ECE72E00;
          if (qword_1ECE72E00)
            v16 = *(_DWORD *)(qword_1ECE72E00 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v9 + 4);
          if (v17 >= 0x100)
            v18 = v17 >> 8;
          else
            v18 = WTF::StringImpl::hashSlowCase(v9);
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 16 * v20));
          v21 = v15 + 16 * v20;
          v22 = *(unsigned int **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v22)
          {
            do
            {
              v24 = __ldaxr(v22);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v22));
            if (!v25)
            {
              atomic_store(1u, v22);
              WTF::fastFree((WTF *)v22, v6);
            }
          }
          v23 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v23 -= 2;
          }
          v26 = *v8;
          *v8 = 0;
          *(_QWORD *)v21 = v26;
          v27 = v2 + 16 * v7;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v21 + 8) = v28;
          v29 = *(unsigned int **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v29);
              WTF::fastFree((WTF *)v29, v6);
            }
          }
          v12 = *v8;
          *v8 = 0;
          if (!v12)
            goto LABEL_40;
          if (*(_DWORD *)v12 == 2)
            goto LABEL_39;
          *(_DWORD *)v12 -= 2;
        }
        else
        {
          v10 = v2 + 16 * v7;
          v11 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v11)
          {
            do
            {
              v13 = __ldaxr(v11);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v11));
            if (!v14)
            {
              atomic_store(1u, v11);
              WTF::fastFree((WTF *)v11, v6);
            }
          }
          v12 = *v8;
          *v8 = 0;
          if (!v12)
            goto LABEL_40;
          if (*(_DWORD *)v12 == 2)
          {
LABEL_39:
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v6);
            goto LABEL_40;
          }
          *(_DWORD *)v12 -= 2;
        }
      }
LABEL_40:
      if (++v7 == v3)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

void WebKit::VideoPresentationInterfaceContext::~VideoPresentationInterfaceContext(WebKit::VideoPresentationInterfaceContext *this)
{
  const void *v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    CFRelease(v2);
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 5, 0);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  uint64_t v1;
  void *v2;

  WebKit::VideoPresentationInterfaceContext::~VideoPresentationInterfaceContext(this);
  if (*(_DWORD *)(v1 + 20))
  {
    *(_QWORD *)(v1 + 64) = 0;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

void WebKit::VideoPresentationInterfaceContext::setRootLayer(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v4;
  const void *v5;
  uint64_t v6;
  void *v7;

  v4 = *a2;
  if (*a2)
    CFRetain(*a2);
  v5 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v4;
  if (v5)
    CFRelease(v5);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = *(void **)(v6 + 16);
    if (!v7)
      v7 = *(void **)(v6 + 8);
    objc_msgSend(v7, "setLayer:", *a2);
  }
}

_QWORD *WebKit::VideoPresentationInterfaceContext::hasVideoChanged(_QWORD *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v2 = this[3];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 32);
      v23 = this[4];
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v8 = *(_QWORD *)(v5 + 16);
          v7 = v5 + 16;
          v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
          v10 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v10 = 1488;
          *(_QWORD *)(v10 + 8) = v9;
          *(_QWORD *)(v10 + 528) = v10 + 16;
          *(_QWORD *)(v10 + 536) = v10 + 16;
          *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v10 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
          v24 = (IPC::Encoder *)v10;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
          v11 = *(_QWORD *)(v10 + 544);
          v12 = v11 + 1;
          v13 = *(_QWORD *)(v10 + 552);
          if (v13 < v11 + 1)
          {
            v20 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
            do
            {
              v21 = v20;
              v20 *= 2;
            }
            while (v21 < v12);
            this = mmap(0, v21, 3, 4098, -1, 0);
            if (this == (_QWORD *)-1)
            {
              __break(0xC471u);
              return this;
            }
            v14 = this;
            memcpy(this, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
            v22 = *(void **)(v10 + 528);
            if (v22 != (void *)(v10 + 16))
              munmap(v22, *(_QWORD *)(v10 + 552));
            *(_QWORD *)(v10 + 528) = v14;
            *(_QWORD *)(v10 + 552) = v21;
            v15 = *(_QWORD *)(v10 + 544);
          }
          else
          {
            v14 = *(_QWORD **)(v10 + 528);
            v15 = *(_QWORD *)(v10 + 544);
          }
          bzero((char *)v14 + v15, v11 - v15);
          *(_QWORD *)(v10 + 544) = v12;
          v16 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v11);
          *(_QWORD *)(v10 + 536) = v16 + 1;
          *v16 = a2;
          (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v24, 0);
          this = v24;
          v24 = 0;
          if (this)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)this, v17);
            return (_QWORD *)WTF::fastFree(v18, v19);
          }
        }
      }
    }
  }
  return this;
}

void sub_1973EFB34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationInterfaceContext::documentVisibilityChanged(WebKit::VideoPresentationInterfaceContext *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  IPC::Encoder *v25;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v4 + 1;
      v5 = *(_QWORD *)(v3 + 32);
      v24 = *((_QWORD *)this + 4);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          CFRetain(*(CFTypeRef *)(v6 - 8));
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 16) + 56))(v6 + 16);
          v9 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v9 = 1487;
          *(_QWORD *)(v9 + 8) = v8;
          *(_QWORD *)(v9 + 528) = v9 + 16;
          *(_QWORD *)(v9 + 536) = v9 + 16;
          *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v9 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
          v25 = (IPC::Encoder *)v9;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, &v24);
          v10 = *(_QWORD *)(v9 + 544);
          v11 = v10 + 1;
          v12 = *(_QWORD *)(v9 + 552);
          if (v12 < v10 + 1)
          {
            v20 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
            do
            {
              v21 = v20;
              v20 *= 2;
            }
            while (v21 < v11);
            v22 = (char *)mmap(0, v21, 3, 4098, -1, 0);
            if (v22 == (char *)-1)
            {
              __break(0xC471u);
              return;
            }
            v13 = v22;
            memcpy(v22, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
            v23 = *(void **)(v9 + 528);
            if (v23 != (void *)(v9 + 16))
              munmap(v23, *(_QWORD *)(v9 + 552));
            *(_QWORD *)(v9 + 528) = v13;
            *(_QWORD *)(v9 + 552) = v21;
            v14 = *(_QWORD *)(v9 + 544);
          }
          else
          {
            v13 = *(char **)(v9 + 528);
            v14 = *(_QWORD *)(v9 + 544);
          }
          bzero(&v13[v14], v10 - v14);
          *(_QWORD *)(v9 + 544) = v11;
          v15 = (_BYTE *)(*(_QWORD *)(v9 + 528) + v10);
          *(_QWORD *)(v9 + 536) = v15 + 1;
          *v15 = a2;
          (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v6 + 16) + 32))(v6 + 16, &v25, 0);
          v17 = v25;
          v25 = 0;
          if (v17)
          {
            IPC::Encoder::~Encoder(v17, v16);
            WTF::fastFree(v18, v19);
          }
          CFRelease(*(CFTypeRef *)(v6 - 8));
          v4 = *(_DWORD *)(v3 + 16) - 1;
        }
      }
      if (v4)
        *(_DWORD *)(v3 + 16) = v4;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
}

void sub_1973EFD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  _DWORD *v10;

  if (v10[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
  else
    --v10[4];
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::VideoPresentationInterfaceContext::videoDimensionsChanged(IPC::Encoder *this, const WebCore::FloatSize *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 32);
      v10 = *((_QWORD *)this + 4);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v9[0] = &v10;
          v9[1] = a2;
          v7 = *(_QWORD *)(v5 + 16);
          v6 = v5 + 16;
          v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
          return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetVideoDimensions>(v6, (uint64_t)v9, v8);
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::VideoPresentationInterfaceContext::setPlayerIdentifier(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)result + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      return WebKit::VideoPresentationManager::setPlayerIdentifier(*(IPC::Encoder **)(v4 + 32), *((_QWORD *)result + 4), a2, a3);
  }
  return result;
}

IPC::Encoder *WebKit::VideoPresentationManager::setPlayerIdentifier(IPC::Encoder *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  _QWORD v12[2];
  uint64_t v13;
  IPC::Encoder *v14;

  v12[1] = a4;
  v13 = a2;
  v12[0] = a3;
  if (result)
  {
    v4 = *((_QWORD *)result + 1);
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 16);
      v5 = v4 + 16;
      v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 1491;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v14 = (IPC::Encoder *)v8;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, &v13);
      IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v8, (uint64_t)v12);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v14, 0);
      result = v14;
      v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v9);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return result;
}

void sub_1973EFF28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

WebKit::VideoPresentationManager *WebKit::VideoPresentationManager::create@<X0>(WebKit::VideoPresentationManager *this@<X0>, WebKit::WebPage *a2@<X1>, WebKit::VideoPresentationManager **a3@<X8>)
{
  WebKit::VideoPresentationManager *v7;
  WebKit::VideoPresentationManager *result;

  v7 = (WebKit::VideoPresentationManager *)WTF::fastMalloc((WTF *)0x68);
  result = WebKit::VideoPresentationManager::VideoPresentationManager(v7, this, a2);
  *a3 = v7;
  return result;
}

void sub_1973EFF90(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::VideoPresentationManager *WebKit::VideoPresentationManager::VideoPresentationManager(WebKit::VideoPresentationManager *this, WebKit::WebPage *a2, WebKit::PlaybackSessionManager *a3)
{
  unsigned int **v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  WebKit::WebProcess *v14;
  unsigned int *v15[4];
  _QWORD v16[2];

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E34D9850;
  v6 = (unsigned int **)((char *)a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v7 = *v6;
  if (*v6)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  ++*((_DWORD *)a3 + 4);
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 4) = v7;
  *((_QWORD *)this + 5) = a3;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_BYTE *)this + 96) = 0;
  v9 = *((_QWORD *)a3 + 9);
  v10 = (unsigned int *)*((_QWORD *)a3 + 10);
  v15[0] = (unsigned int *)"VideoPresentationManager";
  v15[1] = (unsigned int *)25;
  v15[2] = (unsigned int *)"VideoPresentationManager";
  v15[3] = v10;
  if (*(_BYTE *)(v9 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v15);
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v14);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = *((_QWORD *)a2 + 5);
  v16[0] = 146;
  v16[1] = v12;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)v11 + 6, (unsigned __int8 *)v16, (uint64_t)this, v15);
  return this;
}

void sub_1973F00E0(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;
  unsigned int **v4;
  uint64_t *v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;

  v7 = (unsigned int *)v2[11];
  v2[11] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = v2[10];
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = v2[8];
  if (v11)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v11, a2);
  if (*v5)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v5, a2);
  v12 = (_DWORD *)v2[5];
  v2[5] = 0;
  if (v12)
  {
    if (v12[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[4];
  }
  v13 = (unsigned int *)v2[4];
  v2[4] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  *v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v16);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationManager::~VideoPresentationManager(WebKit::VideoPresentationManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  WebCore::VideoPresentationModelClient *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebKit::WebProcess *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  WebKit::WebProcess *v33;
  _QWORD v34[4];

  *(_QWORD *)this = off_1E34D9850;
  v3 = *((_QWORD *)this + 5);
  v5 = *(_QWORD *)(v3 + 72);
  v4 = *(_QWORD *)(v3 + 80);
  v34[0] = "VideoPresentationManager";
  v34[1] = 25;
  v34[2] = "~VideoPresentationManager";
  v34[3] = v4;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v34);
  v6 = *((_QWORD *)this + 8);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (_QWORD *)(v6 + 24 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = (_QWORD *)*((_QWORD *)this + 8);
      if ((_DWORD)v7)
      {
        v10 = 24 * v7;
        v9 = (_QWORD *)*((_QWORD *)this + 8);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 3;
          v10 -= 24;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v9 = (_QWORD *)(v6 + 24 * v7);
  }
  else
  {
    v9 = 0;
    LODWORD(v7) = 0;
  }
  v8 = (_QWORD *)(v6 + 24 * v7);
  if (v6)
  {
LABEL_10:
    v11 = (_QWORD *)(v6 + 24 * *(unsigned int *)(v6 - 4));
    goto LABEL_15;
  }
  v11 = 0;
LABEL_15:
  if (v11 == v9)
    goto LABEL_28;
  do
  {
    v12 = (unsigned __int8 **)v9[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v12 + 1);
    v13 = (WebCore::VideoPresentationModelClient *)v9[2];
    ++*((_DWORD *)v13 + 4);
    WebCore::VideoPresentationModelVideoElement::setVideoElement((WebCore::VideoPresentationModelVideoElement *)v12, 0);
    WebCore::VideoPresentationModelVideoElement::removeClient((WebCore::VideoPresentationModelVideoElement *)v12, v13);
    if (*((_DWORD *)v13 + 4) != 1)
    {
      --*((_DWORD *)v13 + 4);
      if (!v12)
        goto LABEL_19;
LABEL_18:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v12[1], a2);
      goto LABEL_19;
    }
    (*(void (**)(WebCore::VideoPresentationModelClient *))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      goto LABEL_18;
LABEL_19:
    v14 = v9 + 3;
    v9 = v8;
    if (v14 != v8)
    {
      v9 = v14;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 3;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  while (v9 != v11);
  v6 = *((_QWORD *)this + 8);
LABEL_28:
  if (v6)
  {
    *((_QWORD *)this + 8) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, a2);
  }
  v15 = *((_QWORD *)this + 6);
  if (v15)
  {
    *((_QWORD *)this + 6) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v15, a2);
    v16 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 14) = 0;
    if (v16)
    {
      LODWORD(v16) = *(_DWORD *)(v16 - 12);
      if (v16 > 0x7FFFFFFE)
        LODWORD(v16) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v16) = 0;
    *((_DWORD *)this + 14) = 0;
  }
  *((_DWORD *)this + 15) = 2 * v16;
  v17 = *((_QWORD *)this + 10);
  if (v17)
  {
    *((_QWORD *)this + 10) = 0;
    WTF::fastFree((WTF *)(v17 - 16), a2);
  }
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      {
        v20 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v20 = WebKit::WebProcess::WebProcess(v33);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v20;
        v19 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
      }
      if (v19)
        v21 = v19 - 16;
      else
        v21 = 0;
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v20 + 40, 0x92u, *(_QWORD *)(v21 + 40));
    }
  }
  v22 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, a2);
    }
  }
  v25 = *((_QWORD *)this + 10);
  if (v25)
    WTF::fastFree((WTF *)(v25 - 16), a2);
  v26 = *((_QWORD *)this + 8);
  if (v26)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v26, a2);
  v27 = *((_QWORD *)this + 6);
  if (v27)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v27, a2);
  v28 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v28)
  {
    if (v28[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[4];
  }
  v29 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, a2);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v32);
}

{
  WTF *v2;
  void *v3;

  WebKit::VideoPresentationManager::~VideoPresentationManager(this, a2);
  WTF::fastFree(v2, v3);
}

void sub_1973F052C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;

  v4 = *(unsigned int **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *(_QWORD *)(v2 + 80);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  v8 = *(_QWORD *)(v2 + 64);
  if (v8)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v8, a2);
  v9 = *(_QWORD *)(v2 + 48);
  if (v9)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v9, a2);
  v10 = *(_DWORD **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v10)
  {
    if (v10[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[4];
  }
  v11 = *(unsigned int **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  *(_QWORD *)v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 24), v14);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::VideoPresentationManager::invalidate(WebKit::VideoPresentationManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *result;
  unsigned int v10;
  unsigned int v11;
  WebKit::WebProcess *v12;
  _QWORD v13[4];

  v2 = *((_QWORD *)this + 5);
  v4 = *(_QWORD *)(v2 + 72);
  v3 = *(_QWORD *)(v2 + 80);
  v13[0] = "VideoPresentationManager";
  v13[1] = 25;
  v13[2] = "invalidate";
  v13[3] = v3;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v5 + 40, 0x92u, *(_QWORD *)(v7 + 40));
  result = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

BOOL WebKit::VideoPresentationManager::hasVideoPlayingInPictureInPicture(WebKit::VideoPresentationManager *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 11);
  return v1 && *(_QWORD *)(v1 + 8) != 0;
}

uint64_t *WebKit::VideoPresentationManager::ensureModelAndInterface(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  WebCore::VideoPresentationModelVideoElement *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  id *v26;
  id *v27;
  WTF *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  WebKit::LayerHostingContext *v40[3];
  uint64_t v41;
  int v42;

  v7 = a1 + 8;
  v6 = a1[8];
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 8, 0), (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v6 + 24 * v12);
  v14 = *v13;
  if (!*v13)
  {
LABEL_12:
    *v13 = a2;
    v17 = (WebCore::VideoPresentationModelVideoElement *)WTF::fastMalloc((WTF *)0x90);
    WebCore::VideoPresentationModelVideoElement::VideoPresentationModelVideoElement(v17);
    v18 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 1;
    *(_QWORD *)v18 = off_1E34D97C8;
    v19 = a1[3];
    if (v19)
      goto LABEL_43;
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = a1;
    v21 = (unsigned int *)a1[3];
    a1[3] = v19;
    if (!v21)
      goto LABEL_43;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
    v19 = a1[3];
    if (v19)
    {
LABEL_43:
      do
        v24 = __ldaxr((unsigned int *)v19);
      while (__stlxr(v24 + 1, (unsigned int *)v19));
    }
    *(_QWORD *)(v18 + 40) = 0;
    *(_QWORD *)(v18 + 24) = v19;
    *(_QWORD *)(v18 + 32) = a2;
    *(_DWORD *)(v18 + 48) = 0;
    *(_BYTE *)(v18 + 52) = 0;
    *(_DWORD *)(v18 + 56) = 0;
    *(_WORD *)(v18 + 60) = 0;
    *(_QWORD *)(v18 + 64) = 0;
    v25 = a1[5];
    v41 = a2;
    v42 = 0;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v25 + 64), &v41, &v42, (uint64_t)v40);
    ++*((_DWORD *)v40[0] + 2);
    if (a3)
    {
      LOWORD(v41) = 0;
      WebKit::LayerHostingContext::createForExternalHostingProcess((unsigned __int8 *)&v41, (uint64_t *)v40);
      v26 = (id *)v40[0];
      v40[0] = 0;
      std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v18 + 40), v26);
      v27 = (id *)v40[0];
      v40[0] = 0;
      if (v27)
      {
        WebKit::LayerHostingContext::~LayerHostingContext(v27);
        WTF::fastFree(v28, v29);
      }
    }
    WebCore::VideoPresentationModelVideoElement::addClient(v17, (WebCore::VideoPresentationModelClient *)v18);
    v31 = v13[1];
    v13[1] = (uint64_t)v17;
    if (v31)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v31 + 8), v30);
    v32 = (_DWORD *)v13[2];
    v13[2] = v18;
    if (v32)
    {
      if (v32[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
      else
        --v32[4];
    }
    v33 = *v7;
    if (*v7)
      v34 = *(_DWORD *)(v33 - 12) + 1;
    else
      v34 = 1;
    *(_DWORD *)(v33 - 12) = v34;
    v35 = *v7;
    if (*v7)
      v36 = *(_DWORD *)(v35 - 12);
    else
      v36 = 0;
    v37 = (*(_DWORD *)(v35 - 16) + v36);
    v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37)
        return v13 + 1;
    }
    else if (3 * v38 > 4 * v37)
    {
      return v13 + 1;
    }
    v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v7, v13);
    return v13 + 1;
  }
  v15 = 0;
  v16 = 1;
  while (v14 != a2)
  {
    if (v14 == -1)
      v15 = v13;
    v12 = (v12 + v16) & v8;
    v13 = (uint64_t *)(v6 + 24 * v12);
    v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        --*(_DWORD *)(*v7 - 16);
        v13 = v15;
      }
      goto LABEL_12;
    }
  }
  return v13 + 1;
}

void sub_1973F0A6C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int **v4;
  void *v6;
  void *v7;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, a2);
  WTF::fastFree(v3, v6);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 8), v7);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::VideoPresentationManager::addClientForContext(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = a2;
  v3 = 1;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 80), &v6, &v3, (uint64_t)&v4);
  if (!v5)
    ++*(_DWORD *)(v4 + 8);
  return result;
}

unsigned __int8 *WebKit::VideoPresentationManager::removeClientForContext(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unsigned __int8 *result;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  WebCore::VideoPresentationModelClient *v15;
  void *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int i;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v48;

  v48 = a2;
  v3 = (uint64_t *)(a1 + 80);
  result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 80), &v48);
  v5 = *(unsigned __int8 **)(a1 + 80);
  if (v5)
    v5 += 16 * *((unsigned int *)v5 - 1);
  if (v5 == result)
    return result;
  v6 = *((_DWORD *)result + 2);
  v7 = __OFSUB__(v6--, 1);
  *((_DWORD *)result + 2) = v6;
  if (!((v6 < 0) ^ v7 | (v6 == 0)))
    return result;
  if (*v3)
  {
    v8 = *v3 + 16 * *(unsigned int *)(*v3 - 4);
    if ((unsigned __int8 *)v8 == result)
      goto LABEL_13;
  }
  else
  {
    if (!result)
      goto LABEL_13;
    v8 = 0;
  }
  if ((unsigned __int8 *)v8 != result)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
LABEL_13:
  v9 = v48;
  WebKit::PlaybackSessionManager::removeClientForContext(*(_QWORD *)(a1 + 40), v48);
  v11 = (uint64_t *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v10, v9);
  v12 = result;
  if (v10)
    v13 = (unsigned __int8 *)(v10 + 24 * *(unsigned int *)(v10 - 4));
  else
    v13 = 0;
  if (v13 == result)
    return result;
  v14 = *((_QWORD *)result + 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v14 + 8));
  v15 = (WebCore::VideoPresentationModelClient *)*((_QWORD *)v12 + 2);
  ++*((_DWORD *)v15 + 4);
  WebCore::VideoPresentationModelVideoElement::removeClient((WebCore::VideoPresentationModelVideoElement *)v14, v15);
  if (*v11)
  {
    v17 = *v11 + 24 * *(unsigned int *)(*v11 - 4);
    if ((unsigned __int8 *)v17 == v12)
      goto LABEL_36;
LABEL_22:
    if ((unsigned __int8 *)v17 != v12)
    {
      *(_QWORD *)v12 = -1;
      v18 = (_DWORD *)*((_QWORD *)v12 + 2);
      *((_QWORD *)v12 + 2) = 0;
      if (v18)
      {
        if (v18[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
        else
          --v18[4];
      }
      v19 = *((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      if (v19)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v19 + 8), v16);
      ++*(_DWORD *)(*v11 - 16);
      v20 = *v11;
      if (*v11)
        v21 = *(_DWORD *)(v20 - 12) - 1;
      else
        v21 = -1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *v11;
      if (*v11)
      {
        v23 = 6 * *(_DWORD *)(v22 - 12);
        v24 = *(_DWORD *)(v22 - 4);
        if (v23 < v24 && v24 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 64), v24 >> 1, 0);
      }
    }
    goto LABEL_36;
  }
  if (v12)
  {
    v17 = 0;
    goto LABEL_22;
  }
LABEL_36:
  v25 = *(_QWORD *)(v14 + 24);
  if (v25)
  {
    *(_DWORD *)(v25 + 24) += 2;
    WebCore::VideoPresentationModelVideoElement::setVideoElement((WebCore::VideoPresentationModelVideoElement *)v14, 0);
    v26 = (uint64_t *)(a1 + 48);
    v27 = *(_DWORD *)(a1 + 56);
    v28 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 56) = v27 + 1;
    if (v27 > v28)
      WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1 + 48, v16);
    v29 = *(_QWORD *)(v25 + 296);
    if (v29)
    {
      if (*(_QWORD *)(v29 + 8))
      {
        v30 = *v26;
        if (*v26)
        {
          v31 = *(_DWORD *)(v30 - 8);
          v32 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
          v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
          v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
          v35 = v31 & ((v34 >> 31) ^ v34);
          for (i = 1; ; ++i)
          {
            v37 = v35;
            v38 = *(_QWORD *)(v30 + 16 * v35);
            if (v38 != -1)
            {
              if (!v38)
                goto LABEL_62;
              if (v38 == v29)
                break;
            }
            v35 = (v37 + i) & v31;
          }
          if ((_DWORD)v37 != *(_DWORD *)(v30 - 4))
          {
            v39 = (_QWORD *)(v30 + 16 * v37);
            *v39 = 0;
            do
            {
              v40 = __ldaxr((unsigned int *)v29);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, (unsigned int *)v29));
            if (!v41)
            {
              atomic_store(1u, (unsigned int *)v29);
              WTF::fastFree((WTF *)v29, v16);
            }
            *v39 = -1;
            ++*(_DWORD *)(*v26 - 16);
            v42 = *v26;
            if (*v26)
              v43 = *(_DWORD *)(v42 - 12) - 1;
            else
              v43 = -1;
            *(_DWORD *)(v42 - 12) = v43;
            v44 = *v26;
            if (*v26)
            {
              v45 = 6 * *(_DWORD *)(v44 - 12);
              v46 = *(_DWORD *)(v44 - 4);
              if (v45 < v46 && v46 >= 9)
                WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v26, v46 >> 1, 0);
            }
          }
        }
      }
    }
LABEL_62:
    if (*(_DWORD *)(v25 + 24) == 2)
    {
      if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v25);
    }
    else
    {
      *(_DWORD *)(v25 + 24) -= 2;
    }
  }
  if (*((_DWORD *)v15 + 4) == 1)
    (*(void (**)(WebCore::VideoPresentationModelClient *))(*(_QWORD *)v15 + 8))(v15);
  else
    --*((_DWORD *)v15 + 4);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 8), v16);
}

void sub_1973F0ED8(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  _DWORD *v3;
  uint64_t v4;

  if (v3[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  else
    --v3[4];
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::VideoPresentationManager::setupRemoteLayerHosting(WebKit::PlaybackSessionManager **this, WebCore::HTMLVideoElement *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebKit::PlaybackSessionManager *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  WTF *v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  uint64_t i;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  WebCore::VideoPresentationModelVideoElement *v39;
  unsigned __int8 **v40;
  _DWORD *v41;
  uint64_t *result;
  void *v43;
  uint64_t v44;
  _QWORD v45[4];
  _BYTE v46[56];
  uint64_t v47;
  WTF *v48[2];
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint8_t buf[4];
  char *v54;
  int v55;
  _DWORD v56[4];
  _QWORD v57[3];

  v57[1] = *MEMORY[0x1E0C80C00];
  v47 = WebKit::PlaybackSessionManager::contextIdForMediaElement(this[5], a2);
  v4 = (WTF::StringImpl *)WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::add<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)v46, (_DWORD *)this + 12, (uint64_t)a2, &v47);
  if (v46[48])
    v4 = (WTF::StringImpl *)WebKit::PlaybackSessionManager::sendLogIdentifierForMediaElement(this[5], a2);
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v5 + 680) + 704) & 0x1000000000000000) != 0
    && (v6 = *(_QWORD *)(v5 + 528)) != 0
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && (v8 = *(_QWORD *)(v7 + 24)) != 0
    && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v4 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 1760))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16));
    v10 = (int)v4;
  }
  else
  {
    v10 = 0;
  }
  v11 = this[5];
  v13 = *((_QWORD *)v11 + 9);
  v12 = *((_QWORD *)v11 + 10);
  v45[0] = "VideoPresentationManager";
  v45[1] = 25;
  v45[2] = "setupRemoteLayerHosting";
  v45[3] = v12;
  if (*(_BYTE *)(v13 + 12) && WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v45);
    WTF::String::String((WTF::String *)&v50, "Block Media layer rehosting = ");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v49);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, &v52);
    v15 = v49;
    v49 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v50;
    v50 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v51;
    v51 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = qword_1ECE710F0;
    v19 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v19)
    {
      WTF::String::utf8();
      v21 = v48[0] ? (char *)v48[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v54 = v21;
      _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v19 = v48[0];
      v48[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          v19 = (WTF *)WTF::fastFree(v19, v20);
        else
          --*(_DWORD *)v19;
      }
    }
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
    {
      v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v23 = *v22;
        if ((v23 & 1) != 0)
          break;
        v24 = __ldaxr(v22);
        if (v24 == v23)
        {
          if (!__stxr(v23 | 1, v22))
          {
            v25 = WTF::Logger::observers(v19);
            v26 = *(unsigned int *)(v25 + 12);
            if ((_DWORD)v26)
            {
              v27 = *(uint64_t **)v25;
              v44 = *(_QWORD *)v25 + 8 * v26;
              do
              {
                v28 = *v27;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v45);
                v55 = 0;
                WTF::String::String((WTF::String *)v56, "Block Media layer rehosting = ");
                v56[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(v57);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v48, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(_QWORD *)v28 + 16))(v28, &WebKit2LogFullscreen, 3, v48);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v29);
                for (i = 40; i != -8; i -= 16)
                {
                  v31 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                }
                ++v27;
              }
              while (v27 != (uint64_t *)v44);
            }
            v32 = __ldxr(v22);
            if (v32 == 1)
            {
              if (!__stlxr(0, v22))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v4 = v52;
    v52 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  v33 = v10 ^ 1;
  if ((v33 & 1) == 0)
  {
    v34 = (uint64_t *)WebCore::TextTrackRepresentationCocoa::representationFactory(v4);
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v35 = off_1E34D99E8;
    v36 = *v34;
    *v34 = (uint64_t)v35;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  v37 = v47;
  v38 = WebKit::VideoPresentationManager::ensureModelAndInterface(this, v47, v33);
  v39 = (WebCore::VideoPresentationModelVideoElement *)*v38;
  v40 = (unsigned __int8 **)(*v38 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v40);
  v41 = (_DWORD *)v38[1];
  ++v41[4];
  WebCore::VideoPresentationModelVideoElement::setVideoElement(v39, a2);
  result = WebKit::VideoPresentationManager::addClientForContext((uint64_t)this, v37);
  if (v41[4] == 1)
  {
    result = (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
    if (!v39)
      return result;
  }
  else
  {
    --v41[4];
    if (!v39)
      return result;
  }
  return (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v40, v43);
}

void sub_1973F13FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29)
{
  unsigned __int8 *v29;
  uint64_t v30;
  int v32;
  WTF::StringImpl *v33;

  v32 = __ldxr(v29);
  if (v32 == 1)
  {
    if (!__stlxr(0, v29))
    {
LABEL_6:
      v33 = *(WTF::StringImpl **)(v30 - 152);
      *(_QWORD *)(v30 - 152) = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, a2);
        else
          *(_DWORD *)v33 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::add<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>(uint64_t a1, _DWORD *a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v8;
  unsigned int v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int i;
  unsigned int v25;
  uint64_t *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  WTF *v42;
  uint64_t *v43;

  v8 = a2[2];
  v9 = a2[3];
  a2[2] = v8 + 1;
  if (v8 > v9)
    WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)a2, a2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 296), a3);
  v11 = *(unsigned int **)(a3 + 296);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  if (v11)
  {
    do
    {
      v14 = __ldaxr(v11);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v11));
    if (!v15)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  v16 = *(_QWORD *)a2;
  if (*(_QWORD *)a2
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)a2, 0), (v16 = *(_QWORD *)a2) != 0))
  {
    v17 = 0;
    v18 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v18 = 0;
    v17 = 1;
  }
  v19 = 0;
  v20 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = (v22 >> 31) ^ v22;
  for (i = 1; ; ++i)
  {
    v25 = v23 & v18;
    v26 = (uint64_t *)(v16 + 16 * (v23 & v18));
    result = *v26;
    if (*v26 != -1)
      break;
    v19 = v16 + 16 * v25;
LABEL_19:
    v23 = i + v25;
  }
  if (!result)
  {
    if (v19)
    {
      *(_QWORD *)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
      --*(_DWORD *)(*(_QWORD *)a2 - 16);
      *(_QWORD *)v19 = v11;
    }
    else
    {
      *v26 = (uint64_t)v11;
      v19 = (uint64_t)v26;
    }
    *(_QWORD *)(v19 + 8) = *a4;
    v32 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v34 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 <= 2 * v36)
      {
LABEL_39:
        result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)a2, (unsigned int **)v19);
        v19 = result;
        v34 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
          v37 = *(unsigned int *)(v34 - 4);
        else
          v37 = 0;
      }
    }
    else if (3 * v37 <= 4 * v36)
    {
      goto LABEL_39;
    }
    v29 = (uint64_t *)(v34 + 16 * v37);
    v31 = 1;
    v26 = (uint64_t *)v19;
    goto LABEL_44;
  }
  if ((unsigned int *)result != v11)
    goto LABEL_19;
  if ((v17 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v16 - 4);
  v29 = (uint64_t *)(v16 + 16 * v28);
  if (v11)
  {
    do
      v30 = __ldaxr(v11);
    while (__stlxr(v30 - 1, v11));
    if (v30 == 1)
    {
      atomic_store(1u, v11);
      v42 = (WTF *)v11;
      v43 = v26;
      result = WTF::fastFree(v42, (void *)v19);
      v26 = v43;
    }
  }
  v31 = 0;
LABEL_44:
  v38 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v39 = *(unsigned int *)(v38 - 4);
    v40 = (uint64_t *)(v38 + 16 * v39);
  }
  else
  {
    v40 = 0;
    v39 = 0;
  }
  if (v26 != v40)
  {
    while (!*(_QWORD *)(*v26 + 8))
    {
      v41 = v26 + 2;
      v26 = v29;
      if (v41 != v29)
      {
        v26 = v41;
        while ((unint64_t)(*v26 + 1) <= 1)
        {
          v26 += 2;
          if (v26 == v29)
          {
            v26 = v29;
            break;
          }
        }
      }
      if (v26 == v40)
      {
        v26 = v40;
        break;
      }
    }
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v26;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v40;
  *(_QWORD *)(a1 + 32) = v38 + 16 * v39;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = v31;
  return result;
}

void sub_1973F18AC(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebKit::VideoPresentationManager *this, WebCore::HTMLVideoElement *a2, int a3, char a4)
{
  WebCore::Quirks *v8;
  char v9;
  unsigned __int8 *result;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  WebCore::VideoPresentationModelVideoElement *v18;
  unsigned __int8 **v19;
  WebCore::HTMLVideoElement *v20;
  uint64_t v21;
  int v22;
  float v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  char v42;
  const void *v43;
  const void *v44;
  WTF::StringImpl *v45;
  NSObject *v46;
  WTF *v47;
  void *v48;
  char *v49;
  void *v50;
  const Color *v51;
  void *v52;
  CFTypeRef v53;
  const void *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  WTF *v67;
  __int128 v68;
  WTF *v69;
  void *v70;
  WTF::StringImpl *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  WTF *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t i;
  WTF::StringImpl *v96;
  int v97;
  _DWORD *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  CFTypeRef cf[2];
  __int128 v103;
  __int128 v104;
  unsigned int *v105;
  uint64_t v106;
  CFTypeRef v107;
  WTF *v108[6];
  char v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  uint8_t buf[16];
  WTF *v114[2];
  __int128 v115;
  __int128 v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  FloatRect v120;

  v119 = *MEMORY[0x1E0C80C00];
  v8 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 688);
  if (!v8)
    v8 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8));
  v9 = WebCore::Quirks::allowLayeredFullscreenVideos(v8);
  result = (unsigned __int8 *)*((_QWORD *)this + 5);
  v11 = *((_QWORD *)result + 9);
  if (a3 != 1 || !*((_BYTE *)this + 96) || (v9 & 1) != 0)
  {
    v15 = (WTF *)*((_QWORD *)result + 10);
    *(_QWORD *)buf = "VideoPresentationManager";
    *(_QWORD *)&buf[8] = 25;
    v114[0] = (WTF *)"enterVideoFullscreenForVideoElement";
    v114[1] = v15;
    if (*(_BYTE *)(v11 + 12) && WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)buf);
      result = (unsigned __int8 *)*((_QWORD *)this + 5);
    }
    v16 = (WTF::StringImpl *)WebKit::PlaybackSessionManager::contextIdForMediaElement((WebKit::PlaybackSessionManager *)result, a2);
    v112 = v16;
    WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::add<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)v108, (_DWORD *)this + 12, (uint64_t)a2, &v112);
    if (v109)
      WebKit::PlaybackSessionManager::sendLogIdentifierForMediaElement(*((WebKit::PlaybackSessionManager **)this + 5), a2);
    v17 = WebKit::VideoPresentationManager::ensureModelAndInterface(this, (uint64_t)v16, 1);
    v18 = (WebCore::VideoPresentationModelVideoElement *)*v17;
    v19 = (unsigned __int8 **)(*v17 + 8);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v19);
    v21 = v17[1];
    ++*(_DWORD *)(v21 + 16);
    v22 = *(_DWORD *)(v21 + 56);
    if (!v22)
      WebKit::VideoPresentationManager::addClientForContext((uint64_t)this, (uint64_t)v16);
    v23 = WebKit::inlineVideoFrame(a2, v20);
    v25 = v24;
    v27 = v26;
    v29 = v28;
    WebCore::HTMLMediaElement::videoLayerSize(a2);
    v31 = v30;
    v33 = v32;
    v34 = a3 != 0;
    if ((v9 & 1) == 0)
      *((_BYTE *)this + 96) = v34;
    *(_BYTE *)(v21 + 52) = v34;
    if (a3 == 2)
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 74, (uint64_t)a2);
      v36 = (unsigned int *)*((_QWORD *)a2 + 37);
      if (v36)
      {
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 + 1, v36));
      }
      v38 = (unsigned int *)*((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = v36;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((WTF *)v38, v35);
        }
      }
    }
    *(_DWORD *)(v21 + 56) = a3;
    *(_BYTE *)(v21 + 60) = a4;
    result = (unsigned __int8 *)WebCore::VideoPresentationModelVideoElement::setVideoElement(v18, a2);
    if (a3 && !v22)
    {
      v120.m_location.m_x = 0.0;
      v120.m_location.m_y = 0.0;
      v120.m_size.m_width = v27;
      v120.m_size.m_height = v29;
      result = (unsigned __int8 *)WebCore::VideoPresentationModelVideoElement::setVideoLayerFrame(v18, v120);
    }
    if (*(_DWORD *)(v21 + 48))
    {
LABEL_32:
      if (*(_DWORD *)(v21 + 16) == 1)
      {
        result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        if (!v18)
          return result;
      }
      else
      {
        --*(_DWORD *)(v21 + 16);
        if (!v18)
          return result;
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v19, v41);
    }
    *(_DWORD *)(v21 + 48) = 1;
    v42 = WebCore::HTMLVideoElement::webkitSupportsPresentationMode();
    v43 = *(const void **)(v21 + 64);
    if (v43)
    {
      CFRetain(*(CFTypeRef *)(v21 + 64));
      v44 = v43;
    }
    else
    {
      WebCore::VideoPresentationModelVideoElement::createVideoFullscreenLayer(v18);
      objc_msgSend(*(id *)buf, "setDelegate:", objc_msgSend(MEMORY[0x1E0DCDD78], "shared"));
      objc_msgSend(*(id *)buf, "setName:", CFSTR("Web Video Fullscreen Layer"));
      objc_msgSend(*(id *)buf, "setAnchorPoint:", 0.0, 0.0);
      objc_msgSend(*(id *)buf, "setPosition:", 0.0, 0.0);
      v50 = *(void **)buf;
      v111 = (WTF::StringImpl *)0x1104000000000000;
      WebCore::cachedCGColor((WebCore *)&v111, v51);
      objc_msgSend(v50, "setBackgroundColor:", cf[0]);
      v53 = cf[0];
      cf[0] = 0;
      if (v53)
        CFRelease(v53);
      if (((unint64_t)v111 & 0x8000000000000) != 0)
      {
        v99 = (unsigned int *)((unint64_t)v111 & 0xFFFFFFFFFFFFLL);
        do
        {
          v100 = __ldaxr(v99);
          v101 = v100 - 1;
        }
        while (__stlxr(v101, v99));
        if (!v101)
        {
          atomic_store(1u, v99);
          WTF::fastFree((WTF *)v99, v52);
        }
      }
      v54 = *(const void **)buf;
      v107 = *(CFTypeRef *)buf;
      if (*(_QWORD *)buf)
        CFRetain(*(CFTypeRef *)buf);
      WebKit::VideoPresentationInterfaceContext::setRootLayer(v21, &v107);
      v107 = 0;
      if (v54)
        CFRelease(v54);
      v44 = *(const void **)buf;
      *(_QWORD *)buf = 0;
      if (!v44)
      {
LABEL_60:
        ++*((_DWORD *)this + 4);
        cf[0] = this;
        v55 = (unsigned int *)*((_QWORD *)this + 4);
        if (v55)
        {
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 + 1, v55));
        }
        cf[1] = v55;
        *(_QWORD *)&v103 = v112;
        *((_QWORD *)&v103 + 1) = __PAIR64__(v33, v31);
        *(_QWORD *)&v104 = __PAIR64__(v25, LODWORD(v23));
        *((_QWORD *)&v104 + 1) = __PAIR64__(LODWORD(v29), LODWORD(v27));
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 74, (uint64_t)a2);
        v57 = (unsigned int *)*((_QWORD *)a2 + 37);
        if (v57)
        {
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 + 1, v57));
        }
        v105 = v57;
        LOBYTE(v106) = v42;
        BYTE1(v106) = a4;
        HIDWORD(v106) = *(_DWORD *)(v21 + 56);
        v59 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
        if ((*(_QWORD *)(*(_QWORD *)(v59 + 680) + 704) & 0x1000000000000000) != 0
          && (v60 = *(_QWORD *)(v59 + 528)) != 0
          && (v61 = *(_QWORD *)(v60 + 8)) != 0
          && (v62 = *(_QWORD *)(v61 + 24)) != 0
          && (v63 = *(_QWORD *)(v62 + 8)) != 0
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v63 + 48) + 16) + 1760))(*(_QWORD *)(*(_QWORD *)(v63 + 48) + 16)))
        {
          v64 = WebCore::HTMLMediaElement::layerHostingContextID(a2);
          if (!v64)
          {
            v65 = v104;
            *(_OWORD *)v114 = *(_OWORD *)cf;
            v115 = v103;
            ++*((_DWORD *)this + 4);
            *((_DWORD *)a2 + 6) += 2;
            *(_QWORD *)buf = this;
            *(_QWORD *)&buf[8] = a2;
            cf[0] = 0;
            cf[1] = 0;
            v116 = v65;
            v105 = 0;
            v117 = (WTF *)v57;
            v118 = v106;
            v66 = WTF::fastMalloc((WTF *)0x58);
            *(_QWORD *)v66 = off_1E34D9A10;
            *(_QWORD *)(v66 + 8) = *(_QWORD *)buf;
            *(_QWORD *)(v66 + 16) = *(_QWORD *)&buf[8];
            *(WTF **)(v66 + 24) = v114[0];
            v67 = v114[1];
            *(_OWORD *)buf = 0u;
            *(_OWORD *)v114 = 0u;
            *(_QWORD *)(v66 + 32) = v67;
            v68 = v115;
            *(_OWORD *)(v66 + 56) = v116;
            *(_OWORD *)(v66 + 40) = v68;
            v69 = v117;
            v117 = 0;
            *(_QWORD *)(v66 + 72) = v69;
            *(_QWORD *)(v66 + 80) = v118;
            v111 = (WTF::StringImpl *)v66;
            WebCore::HTMLMediaElement::requestHostingContextID();
            v71 = v111;
            v111 = 0;
            if (v71)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v71 + 8))(v71);
            v72 = (unsigned int *)v117;
            v117 = 0;
            if (v72)
            {
              do
              {
                v73 = __ldaxr(v72);
                v74 = v73 - 1;
              }
              while (__stlxr(v74, v72));
              if (!v74)
              {
                atomic_store(1u, v72);
                WTF::fastFree((WTF *)v72, v70);
              }
            }
            v75 = (unsigned int *)v114[1];
            v114[1] = 0;
            if (v75)
            {
              do
              {
                v76 = __ldaxr(v75);
                v77 = v76 - 1;
              }
              while (__stlxr(v77, v75));
              if (!v77)
              {
                atomic_store(1u, v75);
                WTF::fastFree((WTF *)v75, v70);
              }
            }
            v78 = v114[0];
            v114[0] = 0;
            if (v78)
            {
              if (*((_DWORD *)v78 + 4) == 1)
                (*(void (**)(WTF *))(*(_QWORD *)v78 + 8))(v78);
              else
                --*((_DWORD *)v78 + 4);
            }
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&buf[8]);
            v98 = *(_DWORD **)buf;
            *(_QWORD *)buf = 0;
            if (v98)
            {
              if (v98[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v98 + 8))(v98);
              else
                --v98[4];
            }
            v57 = v105;
            goto LABEL_86;
          }
        }
        else
        {
          v64 = WebKit::LayerHostingContext::contextID(*(id **)(v21 + 40));
        }
        v79 = WebCore::HTMLVideoElement::videoWidth(a2);
        v80 = WebCore::HTMLVideoElement::videoHeight(a2);
        *(float *)buf = (float)v79;
        *(float *)&buf[4] = (float)v80;
        WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_0::operator()((unsigned __int8 *)cf, v64, (int *)buf);
LABEL_86:
        v105 = 0;
        if (v57)
        {
          do
          {
            v81 = __ldaxr(v57);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v57));
          if (!v82)
          {
            atomic_store(1u, v57);
            WTF::fastFree((WTF *)v57, v41);
          }
        }
        v83 = (unsigned int *)cf[1];
        cf[1] = 0;
        if (v83)
        {
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            atomic_store(1u, v83);
            WTF::fastFree((WTF *)v83, v41);
          }
        }
        result = (unsigned __int8 *)cf[0];
        if (cf[0])
        {
          if (*((_DWORD *)cf[0] + 4) == 1)
            result = (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)cf[0] + 8))();
          else
            --*((_DWORD *)cf[0] + 4);
        }
        goto LABEL_32;
      }
    }
    CFRelease(v44);
    goto LABEL_60;
  }
  v12 = *((_QWORD *)result + 10);
  cf[0] = "VideoPresentationManager";
  cf[1] = (CFTypeRef)25;
  *(_QWORD *)&v103 = "enterVideoFullscreenForVideoElement";
  *((_QWORD *)&v103 + 1) = v12;
  if (*(_BYTE *)(v11 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)cf);
    WTF::String::String((WTF::String *)&v110, "already in fullscreen, aborting");
    *(_QWORD *)buf = v111;
    v108[0] = v110;
    result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v108, &v112);
    if (v112)
    {
      v14 = v110;
      v110 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      v45 = v111;
      v111 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v13);
        else
          *(_DWORD *)v45 -= 2;
      }
      v46 = qword_1ECE710F0;
      v47 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v47)
      {
        WTF::String::utf8();
        v49 = v108[0] ? (char *)v108[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v49;
        _os_log_impl(&dword_196BCC000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v47 = v108[0];
        v108[0] = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 1)
            v47 = (WTF *)WTF::fastFree(v47, v48);
          else
            --*(_DWORD *)v47;
        }
      }
      if (WebKit2LogFullscreen && byte_1ECE710E0)
      {
        v86 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v87 = *v86;
          if ((v87 & 1) != 0)
            break;
          v88 = __ldaxr(v86);
          if (v88 == v87)
          {
            if (!__stxr(v87 | 1, v86))
            {
              v89 = WTF::Logger::observers(v47);
              v90 = *(unsigned int *)(v89 + 12);
              if ((_DWORD)v90)
              {
                v91 = *(uint64_t **)v89;
                v92 = *(_QWORD *)v89 + 8 * v90;
                do
                {
                  v93 = *v91;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)cf);
                  LODWORD(v114[0]) = 0;
                  WTF::String::String((WTF::String *)&v114[1], "already in fullscreen, aborting");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v108, (uint64_t)buf, 2uLL);
                  (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(_QWORD *)v93 + 16))(v93, &WebKit2LogFullscreen, 1, v108);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v108, v94);
                  for (i = 24; i != -8; i -= 16)
                  {
                    v96 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v96)
                    {
                      if (*(_DWORD *)v96 == 2)
                        WTF::StringImpl::destroy(v96, (WTF::StringImpl *)v48);
                      else
                        *(_DWORD *)v96 -= 2;
                    }
                  }
                  ++v91;
                }
                while (v91 != (uint64_t *)v92);
              }
              v97 = __ldxr(v86);
              if (v97 == 1)
              {
                if (!__stlxr(0, v86))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = (unsigned __int8 *)v112;
      v112 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v48);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

